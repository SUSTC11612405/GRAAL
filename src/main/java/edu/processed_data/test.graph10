class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public boolean isProgramRegistration(){  return program != null && program.isRegistration();}  }
class C{  protected void execWithInput(CommandInput commandInput,String command,final CompletionHandler completionHandler,Function<String,?> mapper,int timeout,TimeUnit unit){  String outStreamFile="/tmp/" + SSH_OP_OUT_PREFIX + UUID.randomUUID()+ ".txt";  String errStreamFile="/tmp/" + SSH_OP_ERR_PREFIX + UUID.randomUUID()+ ".txt";  String exitCodeFile="/tmp/" + SSH_OP_EXIT_CODE_PREFIX + UUID.randomUUID()+ ".txt";  String hostname=commandInput.getDockerUri().getHost();  AuthCredentialsServiceState credentials=commandInput.getCredentials();  SSHClient client;  try {    client=getSshClient(hostname,credentials);  } catch (  IOException e) {    completionHandler.handle(null,e);    return;  }  command=String.format("nohup /bin/sh -c '%s > %s 2> %s ; echo $? > %s' &>/dev/null & echo $!",escape(command),outStreamFile,errStreamFile,exitCodeFile);  AsyncResult result=SshUtil.asyncExec(client,command);  ExecutionState state=new ExecutionState(result,null,null,timeout,unit);  state.handler=null;  logger.fine(String.format("SSH execution %s started on %s: %s",state.id,hostname,command));  handleExecInProgress(state);}  }
class C{  public boolean forEachValue(TLongProcedure procedure){  Object[] keys=_set;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public static ItemStack sanitize(ItemStack stack){  if (stack != null) {    if (stack.hasTagCompound() && stack.getTagCompound().hasKey(DATA_TAG)) {      stack.getTagCompound().removeTag(DATA_TAG);    }    if (stack.hasTagCompound() && stack.getTagCompound().hasNoTags()) {      stack.setTagCompound(null);    }  }  return stack;}  }
class C{  public LikesIsLikedQuery isLiked(UserActor actor,LikesType type,int itemId){  return new LikesIsLikedQuery(getClient(),actor,type,itemId);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  private void initVocoder(int mcep_order,int mcep_vsize,HMMData htsData){  stage=htsData.getStage();  gamma=htsData.getGamma();  use_log_gain=htsData.getUseLogGain();  fprd=htsData.getFperiod();  rate=htsData.getRate();  rand=new Random(SEED);  C=new double[mcep_order];  CC=new double[mcep_order];  CINC=new double[mcep_order];  if (stage == 0) {    int vector_size=(mcep_vsize * (3 + PADEORDER) + 5 * PADEORDER + 6) - (3 * (mcep_order));    D1=new double[vector_size];    pt2=(2 * (PADEORDER + 1)) + (PADEORDER * (mcep_order + 1));    for (int i=PADEORDER; i >= 1; i--)     pt3[i]=(2 * (PADEORDER + 1)) + ((i - 1) * (mcep_order + 1));  } else {    int vector_size=((mcep_vsize + 1) * (stage + 3)) - (3 * (mcep_order));    D1=new double[vector_size];  }  p1=-1;  pc=0.0;}  }
class C{  public RunnableDistributedTaskAdapter(Runnable runnable,AsyncResultsReducer<T,R> reducer,AsyncResultFilter<T> filter) throws IllegalArgumentException {  super(runnable);  this.reducer=reducer;  this.filter=filter;}  }
class C{  public static void registerForBeam(final Activity activity,final BeamProvider provider){  final NfcAdapter nfcAdapter=NfcAdapter.getDefaultAdapter(activity);  if (nfcAdapter == null)   return;  if (activity.checkPermission(Manifest.permission.NFC,Process.myPid(),Process.myUid()) == PackageManager.PERMISSION_DENIED)   return;  try {    final BeamCallback beamCallback=new BeamCallback(activity,provider);    nfcAdapter.setNdefPushMessageCallback(beamCallback,activity);    nfcAdapter.setOnNdefPushCompleteCallback(beamCallback,activity);  } catch (  IllegalStateException e) {    Log.w("BeamController","NFC registration failure. Can't retry, giving up.");  }}  }
class C{  public void takeThreadDump(CoreDump coreDump,boolean openView){  threadDumpProvider.createThreadDump(coreDump,openView);}  }
class C{  protected void assertClose(String msg,Fraction[] m,Fraction[] n,double tolerance){  if (m.length != n.length) {    Assert.fail("vectors not same length");  }  for (int i=0; i < m.length; i++) {    Assert.assertEquals(msg + " " + i+ " elements differ",m[i].doubleValue(),n[i].doubleValue(),tolerance);  }}  }
class C{  public static Map ordinalMap(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    ColumnMetadata md=((Table)tuples).getMetadata(field);    return md.getOrdinalMap();  } else {    return ordinalMap(tuples.tuples(),field,cmp);  }}  }
class C{  public Expression containsKey(Value map,Value arg){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public final long readLELong(byte[] byteArray){  return (long)(byteArray[7]) << 56 | (long)(byteArray[6] & 0xff) << 48 | (long)(byteArray[5] & 0xff) << 40 | (long)(byteArray[4] & 0xff) << 32 | (long)(byteArray[3] & 0xff) << 24 | (long)(byteArray[2] & 0xff) << 16 | (long)(byteArray[1] & 0xff) << 8 | (byteArray[0] & 0xff);}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  public CountModifiers(CountModifiers modifiers1,CountModifiers modifiers2,CountModifiers modifiers3){  super(modifiers1,modifiers2,modifiers3);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private String i18n(int key,Object... args){  return getContext().getString(key,args);}  }
class C{  public void click(int mask,Point p) throws InterruptedException {  click(mask,p.x,p.y);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_OPPOSITE(String value0){  return new SM_SYSTEM_MESSAGE(1300520,value0);}  }
class C{  public int download_file1(String file_id,String local_filename) throws IOException, MyException {  final long file_offset=0;  final long download_bytes=0;  return this.download_file1(file_id,file_offset,download_bytes,local_filename);}  }
class C{  public static void assertRelativelyEquals(double expected,double actual,double relativeError){  assertRelativelyEquals(null,expected,actual,relativeError);}  }
class C{  @Override protected void updateTrafficMask(){}  }
class C{  @Override public Set<String> locateSimilarDocuments(DocumentNGramGraph dngCur){  String sClusterLabel=null;  double dSim=0.0;  double dPrvSim=0.0;  Vertex vBestCandidate=null;  Vertex vCur=getRootHierarchyNode(Hierarchy);  LinkedList<String> lPath=new LinkedList<String>();  lPath.add(vCur.getLabel());  do {    dPrvSim=dSim;    Iterator iChildren=utils.getAdjacentIncomingVertices(Hierarchy,vCur).iterator();    vBestCandidate=vCur;    if (iChildren.hasNext()) {      while (iChildren.hasNext()) {        Vertex vCandidate=(Vertex)iChildren.next();        double dCurSim=Double.NEGATIVE_INFINITY;        try {          initComparator();          dCurSim=Comparator.getSimilarityBetween(dngCur,getRepresentationFromCluster(vCandidate.getLabel())).getOverallSimilarity();        } catch (        InvalidClassException ex) {          System.err.println("Invalid document type. Ignoring...");          ex.printStackTrace(System.err);        }        if (dCurSim > dSim) {          vBestCandidate=vCandidate;          dSim=dCurSim;        }      }    }    vCur=vBestCandidate;    sClusterLabel=vBestCandidate.getLabel();    lPath.add(sClusterLabel);  } while (dPrvSim < dSim);  System.err.println(utils.printIterable(lPath,"->\n"));  return getDocumentIDsFromCluster(sClusterLabel);}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {  if (context.useNamespaces()) {    if (!XML11Char.isXML11ValidNCName(content)) {      throw new InvalidDatatypeValueException("IDREFInvalidWithNamespaces",new Object[]{content});    }  } else {    if (!XML11Char.isXML11ValidName(content)) {      throw new InvalidDatatypeValueException("IDREFInvalid",new Object[]{content});    }  }  context.addIdRef(content);}  }
class C{  public void invalidate(RuleTag ruleTag,TagQualityStatus status,String statusDescription,Timestamp timestamp){  updateQuality(ruleTag,status,statusDescription);  setTimestamp(ruleTag,timestamp);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysBlock_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200937,skilltarget,skillcaster,skillname);}  }
class C{  public CountModifiers(CountModifiers... modifiers){  super(modifiers);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BINDSTONE_CAPACITY_LIMITTED_ALARM(int num0){  return new SM_SYSTEM_MESSAGE(1390231,num0);}  }
class C{  public static int apply(Director dir,File file,boolean officialRanksOnly,ProgressListener progressListener) throws IOException, CanceledException {  final BiomData biomData=new BiomData(file.getPath());  biomData.setType(BiomData.AcceptableTypes.Taxon_table.toString());  biomData.setMatrix_type(BiomData.AcceptableMatrixTypes.dense.toString());  biomData.setMatrix_element_type(BiomData.AcceptableMatrixElementTypes.Int.toString());  biomData.setComment("Taxonomy classification computed by MEGAN");  final MainViewer viewer=dir.getMainViewer();  final java.util.List<String> names=dir.getDocument().getSampleNames();  int numberOfCols=names.size();  final LinkedList<Map> colList=new LinkedList<>();  for (  String name : names) {    final Map<String,Object> colItem=new StringMap<>();    colItem.put("id",Basic.getFileNameWithoutPath(Basic.getFileBaseName(name)));    colItem.put("metadata",new StringMap<>());    colList.add(colItem);  }  biomData.setColumns(colList.toArray(new Map[colList.size()]));  final NodeSet selectedNodes=viewer.getSelectedNodes();  if (selectedNodes.size() == 0) {    throw new IOException("No nodes selected");  }  progressListener.setSubtask("Processing taxa");  progressListener.setMaximum(selectedNodes.size());  progressListener.setProgress(0);  final LinkedList<Map> rowList=new LinkedList<>();  final LinkedList<int[]> dataList=new LinkedList<>();  visitSelectedLeavesRec(viewer,viewer.getTree().getRoot(),selectedNodes,new Vector<String>(),rowList,dataList,officialRanksOnly,progressListener);  int numberOfRows=rowList.size();  biomData.setRows(rowList.toArray(new Map[numberOfRows]));  biomData.setShape(new int[]{numberOfRows,numberOfCols});  final int[][] data=new int[numberOfRows][];  int j=0;  for (  int[] dataRow : dataList) {    data[j++]=dataRow;  }  biomData.setData(data);  System.err.println("Writing file: " + file);  try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){    biomData.write(w);  }   return numberOfRows;}  }
class C{  public static DateTimeUnit fromJdkCalendar(java.util.Calendar calendar){  return fromJodaDateTime(new DateTime(calendar));}  }
class C{  private void initLoadMoreData(){  for (int i=0; i < 2; i++) {    List<String> url=new ArrayList<>();    url.add("http://qq1234.org/uploads/allimg/140404/3_140404114555_5.jpg");    url.add("http://qq1234.org/uploads/allimg/140404/3_140404114555_4.jpg");    mLists.add(url);  }}  }
class C{  public List<LogicalTable> findByDimension(Dimension dimension){  return values().stream().filter(null).collect(Collectors.toList());}  }
class C{  public boolean containsHeader(String name){  for (int i=0; i < headers.size(); i++) {    Header header=(Header)headers.get(i);    if (header.getName().equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public boolean forEach(TIntProcedure procedure){  byte[] states=_states;  int[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public static <T extends RealFieldElement<T>>T dotProduct(final Vector3D v1,final FieldVector3D<T> v2){  return v2.dotProduct(v1);}  }
class C{  public String toString(){  StringBuffer s=new StringBuffer();  boolean colon=false;  s.append("ClassHierarchy:{");  for (  TypeNode typeNode : typeNodeList) {    if (colon) {      s.append(",");    } else {      colon=true;    }    s.append(typeNode);  }  s.append("}");  return s.toString();}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public static String addFileExtensionSeparator(String fileExtension){  return "." + fileExtension;}  }
class C{  public static String returnDateInPredefinedFormat(){  return new SimpleDateFormat(AppScanConstants.DATE_FORMAT).format(new Date());}  }
class C{  private boolean preOnCreate(Bundle bundle){  System.out.println("RubotoActivity onCreate(): " + getClass().getName() + ", finishing: "+ isFinishing());  if (isFinishing())   return true;  if (this.getClass().getName().equals("org.ruboto.RubotoActivity") && !JRubyAdapter.isInitialized()) {    super.onCreate(bundle);    System.out.println("Shutting down stale RubotoActivity: " + getClass().getName());    finish();    return true;  }  Bundle configBundle=getIntent().getBundleExtra("Ruboto Config");  if (configBundle != null) {    if (configBundle.containsKey("Theme")) {      setTheme(configBundle.getInt("Theme"));    }  }  if (getIntent().hasExtra(THEME_KEY)) {    setTheme(getIntent().getIntExtra(THEME_KEY,0));  }  scriptInfo.setFromIntent(getIntent());  return false;}  }
class C{  public boolean isInBoundsX(float x){  return (isInBoundsLeft(x) && isInBoundsRight(x));}  }
class C{  private void put(Map<String,String> variables,Object key,Object value){  variables.put(String.valueOf(key),String.valueOf(value));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ENCHANT_ITEM_SUCCEED_NEW(DescriptionId descriptionId,int value0){  return new SM_SYSTEM_MESSAGE(1401681,descriptionId,value0);}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  public Point2D convertWindowToReference(Point2D apt){  if (scrollBackReferenceRect == null)   return null; else   return new Point2D.Double((apt.getX() - scrollBackReferenceRect.getX()) / scrollBackReferenceRect.getWidth(),(apt.getY() - scrollBackReferenceRect.getY()) / scrollBackReferenceRect.getHeight());}  }
class C{  public static Director newProject(){  return newProject(true);}  }
class C{  public static void writeFileTxt(String fileName,String[] totalFile) throws IOException {  try (final Writer writer=Files.newBufferedWriter(Paths.get(fileName),Charset.forName("UTF-8"));PrintWriter pw=new PrintWriter(writer)){    for (    String file : totalFile) {      pw.println(file);    }  } }  }
class C{  private void startupPlugins(){  for (  PluginEntry entry : entryMap.values()) {    if (entry.onload) {      getPlugin(entry.service);    } else {      pluginMap.put(entry.service,null);    }  }}  }
class C{  @Override public ElectionEntry clone(){  try {    ElectionEntry cloneEntry=(ElectionEntry)super.clone();    cloneEntry._actState=new ActiveElectionState();    cloneEntry.attributeSetTemplates=attributeSetTemplates.clone();    for (int i=0; i < cloneEntry.attributeSetTemplates.length; i++) {      if (cloneEntry.attributeSetTemplates[i] instanceof ActiveElectionState) {        cloneEntry.attributeSetTemplates[i]=cloneEntry._actState;        break;      }    }    return cloneEntry;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  private void adjustLeftByAspectRatio(RectF rect,float aspectRatio){  rect.left=rect.right - rect.height() * aspectRatio;}  }
class C{  public double normality(String s){  DistributionDocument dDoc=new DistributionDocument(NeighbourhoodWindow,SourceNGramSize);  dDoc.setDataString(s,SourceNGramSize,true);  double dRes=0.0;  int iCnt=0;  try {    Iterator iIter=dDoc.Graph.getEdgeSet().iterator();    while (iIter.hasNext()) {      Edge eCur=(Edge)iIter.next();      Distribution dCur=dDoc.Graph.getEdgeDistro(eCur);      Edge e=gr.demokritos.iit.jinsect.utils.locateEdgeInGraph(Graph,eCur.getVertexA(),eCur.getVertexB());      if (e != null) {        Distribution d=(Graph.getEdgeDistro(e) == null) ? new Distribution() : Graph.getEdgeDistro(e);        if (OnCompare != null)         dRes+=OnCompare.compareDistributions(dCur,d); else         dRes+=dCur.similarityTo(d);      }      iCnt++;    }  } catch (  Exception exc) {    exc.printStackTrace();    return 0.0;  }  return dRes / (iCnt == 0 ? 1 : iCnt);}  }
class C{  public CipherTextIvMac(byte[] c,byte[] i,byte[] h){  cipherText=new byte[c.length];  System.arraycopy(c,0,cipherText,0,c.length);  iv=new byte[i.length];  System.arraycopy(i,0,iv,0,i.length);  mac=new byte[h.length];  System.arraycopy(h,0,mac,0,h.length);}  }
class C{  private void createUI(){  readConfigFile(null,this,"StyleDetails.xml");}  }
class C{  private void cleanupService(){  if (mService != null) {    try {      mContext.unbindService(this);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Unable to unbind from licensing service (already unbound)");    }    mService=null;  }}  }
class C{  public static int calculateDeliveryControllerCount(int vmcount){  int itmp=0;  Float f=(vmcount / 2000.00F);  f=(float)Math.ceil(f);  f++;  itmp=f.intValue();  return itmp;}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysParam other=(SysParam)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getParamKey() == null ? other.getParamKey() == null : this.getParamKey().equals(other.getParamKey())) && (this.getParamValue() == null ? other.getParamValue() == null : this.getParamValue().equals(other.getParamValue()))&& (this.getCatalogId() == null ? other.getCatalogId() == null : this.getCatalogId().equals(other.getCatalogId()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  public boolean isEmpty(){  return config.isEmpty();}  }
class C{  private void initGraph(Taxa taxa,SplitSystem splits,int[] cycle,PhyloGraph graph){  int[] taxon2split=new int[ntax + 1];  for (int s=1; s <= splits.size(); s++) {    BitSet part=splits.getSplit(s).getA();    if (part.cardinality() == ntax - 1) {      part=splits.getSplit(s).getB();    }    if (part.cardinality() == 1) {      int t=getMax(part,ntax);      taxon2split[t]=s;    }  }  Node center=graph.newNode();  for (int i=1; i <= ntax; i++) {    int t=cycle[i];    Node v=graph.newNode();    graph.setLabel(v,taxa.getLabel(t));    graph.setNode2Taxa(v,t);    graph.setTaxon2Node(t,v);    Edge e=graph.newEdge(center,v);    if (taxon2split[t] != 0) {      int s=taxon2split[t];      graph.setWeight(e,splits.getSplit(s).getWeight());      graph.setSplit(e,s);    } else     graph.setSplit(e,-1);  }}  }
class C{  @Deployment public void testFindActiveActivityIdProcessWithErrorEventAndSubProcess(){  ProcessInstance processInstance=processEngine.getRuntimeService().startProcessInstanceByKey("errorEventSubprocess");  List<String> activeActivities=runtimeService.getActiveActivityIds(processInstance.getId());  assertEquals(5,activeActivities.size());  List<Task> tasks=taskService.createTaskQuery().list();  assertEquals(2,tasks.size());  Task parallelUserTask=null;  for (  Task task : tasks) {    if (!task.getName().equals("ParallelUserTask") && !task.getName().equals("MainUserTask")) {      fail("Expected: <ParallelUserTask> or <MainUserTask> but was <" + task.getName() + ">.");    }    if (task.getName().equals("ParallelUserTask")) {      parallelUserTask=task;    }  }  assertNotNull(parallelUserTask);  taskService.complete(parallelUserTask.getId());  Execution execution=runtimeService.createExecutionQuery().processInstanceId(processInstance.getId()).activityId("subprocess1WaitBeforeError").singleResult();  runtimeService.trigger(execution.getId());  activeActivities=runtimeService.getActiveActivityIds(processInstance.getId());  assertEquals(4,activeActivities.size());  tasks=taskService.createTaskQuery().list();  assertEquals(2,tasks.size());  Task beforeErrorUserTask=null;  for (  Task task : tasks) {    if (!task.getName().equals("BeforeError") && !task.getName().equals("MainUserTask")) {      fail("Expected: <BeforeError> or <MainUserTask> but was <" + task.getName() + ">.");    }    if (task.getName().equals("BeforeError")) {      beforeErrorUserTask=task;    }  }  assertNotNull(beforeErrorUserTask);  taskService.complete(beforeErrorUserTask.getId());  activeActivities=runtimeService.getActiveActivityIds(processInstance.getId());  assertEquals(2,activeActivities.size());  tasks=taskService.createTaskQuery().list();  assertEquals(2,tasks.size());  Task afterErrorUserTask=null;  for (  Task task : tasks) {    if (!task.getName().equals("AfterError") && !task.getName().equals("MainUserTask")) {      fail("Expected: <AfterError> or <MainUserTask> but was <" + task.getName() + ">.");    }    if (task.getName().equals("AfterError")) {      afterErrorUserTask=task;    }  }  assertNotNull(afterErrorUserTask);  taskService.complete(afterErrorUserTask.getId());  tasks=taskService.createTaskQuery().list();  assertEquals(1,tasks.size());  assertEquals("MainUserTask",tasks.get(0).getName());  activeActivities=runtimeService.getActiveActivityIds(processInstance.getId());  assertEquals(1,activeActivities.size());  assertEquals("MainUserTask",activeActivities.get(0));  taskService.complete(tasks.get(0).getId());  assertProcessEnded(processInstance.getId());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_TOO_LOW_LEVEL_TO_INVITE(String value0){  return new SM_SYSTEM_MESSAGE(1400266,value0);}  }
class C{  public boolean contains(S2LatLngRect other){  return lat.contains(other.lat) && lng.contains(other.lng);}  }
class C{  public DynamicQueue(int capacity){  super(capacity);}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public ToolTipControl(String field){  this(new String[]{field});}  }
class C{  public static LineIterator toLineIterator(BufferedReader r){  return new BuffReadIter(r);}  }
class C{  public <T extends Event>boolean post(T event){  Class<? extends Event> clazz=event.getClass();  ConcurrentLinkedQueue<Consumer<T>> handlers=(ConcurrentLinkedQueue<Consumer<T>>)(ConcurrentLinkedQueue<?>)map.get(clazz);  if (handlers != null) {    for (    Consumer<T> handler : handlers) {      handler.accept(event);      if (event.isCanceled()) {        return false;      }    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201153,num0,skillname);}  }
class C{  public WordDefinition(String sWord){  Word=new String(sWord.toLowerCase());  Hash=hashWord(sWord);}  }
class C{  public void addNearbyPokemons(Collection<NearbyPokemon> nearbyPokemons){  if (nearbyPokemons == null || nearbyPokemons.isEmpty()) {    return;  }  complete=true;  this.nearbyPokemons.addAll(nearbyPokemons);}  }
class C{  private static void checkHorizontalParentMarginSnap(ConstraintAnchor anchor,ConstraintAnchor.Type type,int margin,SnapCandidate candidate){  ConstraintWidget widget=anchor.getOwner();  if (widget.getParent() == null) {    return;  }  ConstraintAnchor targetParent=widget.getParent().getAnchor(type);  ConstraintHandle targetParentHandle=WidgetInteractionTargets.constraintHandle(targetParent);  ConstraintHandle anchorHandle=WidgetInteractionTargets.constraintHandle(anchor);  ConstraintAnchor target=new ConstraintAnchor(widget.getParent(),type);  int tx=targetParentHandle.getDrawX() + margin;  int ty=targetParentHandle.getDrawY();  int distance=Math.abs(anchorHandle.getDrawX() - tx);  if (distance <= CONNECTION_SLOPE) {    candidate.distance=distance;    candidate.target=target;    candidate.source=anchor;    candidate.x=tx;    candidate.y=ty;  }}  }
class C{  private void scheduleInvalidTapNotification(){  mRunnableHandler.postDelayed(mHandleInvalidTapRunnable,INVALID_IF_NO_SELECTION_CHANGE_AFTER_TAP_MS);}  }
class C{  public final int readLEInt(byte[] byteArray){  return (byteArray[3]) << 24 | (byteArray[2] & 0xff) << 16 | (byteArray[1] & 0xff) << 8 | (byteArray[0] & 0xff);}  }
class C{  public static EnumFacing rotateDirection(EnumFacing dir,Quaternion rot,Iterable<EnumFacing> allow){  Vec3 v=fromDirection(dir);  rot.applyRotation(v);  EnumFacing best=null;  double bestDot=Double.POSITIVE_INFINITY;  for (  EnumFacing fd : allow) {    Vec3 f=fromDirection(fd);    rot.applyRotation(f);    double dot=v.dotProduct(f);    if (dot < bestDot) {      bestDot=dot;      best=fd;    }  }  return best;}  }
class C{  @Override public void revertToDefaultValue(){  TimePeriod timePeriod=new TimePeriod();  populateField(timePeriod);}  }
class C{  public boolean isAcontains(int taxon){  return A.get(taxon);}  }
class C{  protected AdsImportTargetContactsQuery targetGroupId(int value){  return unsafeParam("target_group_id",value);}  }
class C{  public synchronized String decrypt(String str){  byte[] dec;  try {    dec=decoder.decodeBuffer(str);    byte[] utf8=decrypter.doFinal(dec);    return new String(utf8,"UTF-8");  } catch (  IOException e) {    e.printStackTrace();  }catch (  IllegalBlockSizeException e) {    e.printStackTrace();  }catch (  BadPaddingException e) {    e.printStackTrace();  }  return str;}  }
class C{  protected boolean isEnabledForIgnoredResources(){  return false;}  }
class C{  public WrappedIndentingWriter(Writer out,int width,String prefix){  super(out);  if (out == null) {    throw new NullPointerException("out == null");  }  if (width < 0) {    throw new IllegalArgumentException("width < 0");  }  if (prefix == null) {    throw new NullPointerException("prefix == null");  }  this.width=(width != 0) ? width : Integer.MAX_VALUE;  this.maxIndent=width >> 1;  this.prefix=(prefix.length() == 0) ? null : prefix;  bol();}  }
class C{  public void populateExpression(Expression expression){  this.storedExpression=expression;  String expressionString="";  if (expression != null) {    expressionString=expression.toString();  }  expressionTextField.setText(expressionString);}  }
class C{  public ObjectFactory(){}  }
class C{  public APIUser(APIUser other){  update(other);}  }
class C{  public BoardGetCommentsQueryWithExtended sort(BoardGetCommentsSort value){  return unsafeParam("sort",value);}  }
class C{  public final void close(AionServerPacket closePacket,boolean forced){synchronized (guard) {    if (isWriteDisabled()) {      return;    }    pendingClose=true;    isForcedClosing=forced;    sendMsgQueue.clear();    sendMsgQueue.addLast(closePacket);    enableWriteInterest();  }}  }
class C{  public VisibilityFilter(Predicate p){  setPredicate(p);}  }
class C{  public ZWavePowerLevelCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public void releaseScan() throws SAException {  if (_curValueList != null) {    _curValueList.releaseScan();    _curValueList=null;  }  if (_entriesIter != null) {    _entriesIter.releaseScan();    _entriesIter=null;  }  _curValueListHolder=null;}  }
class C{  public void render(GL2 gl){  gl.glPushMatrix();  gl.glTranslated(this.transform.getTranslationX(),this.transform.getTranslationY(),0.0);  gl.glRotated(Math.toDegrees(this.transform.getRotation()),0.0,0.0,1.0);  for (  BodyFixture fixture : this.fixtures) {    Convex convex=fixture.getShape();    if (convex instanceof Polygon) {      Polygon p=(Polygon)convex;      gl.glColor4fv(this.color,0);      gl.glBegin(GL2.GL_POLYGON);      for (      Vector2 v : p.getVertices()) {        gl.glVertex3d(v.x,v.y,0.0);      }      gl.glEnd();      gl.glColor4f(this.color[0] * 0.8f,this.color[1] * 0.8f,this.color[2] * 0.8f,1.0f);      gl.glBegin(GL.GL_LINE_LOOP);      for (      Vector2 v : p.getVertices()) {        gl.glVertex3d(v.x,v.y,0.0);      }      gl.glEnd();    }  }  gl.glPopMatrix();}  }
class C{  public XMLSerializer(OutputStream output,OutputFormat format){  super(format != null ? format : new OutputFormat(Method.XML,null,false));  _format.setMethod(Method.XML);  setOutputByteStream(output);}  }
class C{  public final void run(){  boolean committed=true;  stopped=false;  if (FALLBACK_LOG.isDebugEnabled())   FALLBACK_LOG.debug("Thread of instance " + this.hashCode() + " beginning");synchronized (persistenceManager.getFallbackManager().getFallbackFileController()) {    while (!persistenceManager.getFallbackManager().isFallbackFileEmpty() && committed && isRunning()) {      int numberOfTags;      numberOfTags=commitFallbackData();      if (numberOfTags > 0) {        removeReadData(numberOfTags);      }      if (numberOfTags == 0) {        committed=false;      }      try {        Thread.sleep(persistenceManager.getSleepTime());      } catch (      InterruptedException e) {        FALLBACK_LOG.error("An error occurred while trying to make the thread to sleep");      }    }  }  stopped=true;  persistenceManager=null;  if (FALLBACK_LOG.isDebugEnabled()) {    FALLBACK_LOG.debug("Removing the reference to the persistenceManager");  }  if (LOG.isDebugEnabled())   FALLBACK_LOG.debug("Thread of instance " + this.hashCode() + " terminated");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Resurrect_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200556,skilltarget,skillname);}  }
class C{  public boolean isExists(){  return exists;}  }
class C{  public static List<String> toXVals(RealmResults<? extends RealmObject> result,String xValuesField){  List<String> xVals=new ArrayList<>();  for (  RealmObject object : result) {    DynamicRealmObject dynamicObject=new DynamicRealmObject(object);    xVals.add(dynamicObject.getString(xValuesField));  }  return xVals;}  }
class C{  public boolean isAllowed(List<VersionData> versionList,VendorOptionVersion vendorOptionVersion){  if ((versionList != null) && (vendorOptionVersion != null)) {    for (    VersionData versionData : versionList) {      if (vendorOptionVersion.isAllowed(versionData)) {        return true;      }    }  }  return false;}  }
class C{  @Override public void populateExpression(Object objValue){}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private String buildDurationString(int value,String suffix){  return String.format("%d%s",value,suffix);}  }
class C{  public static void main(String[] args){  boolean showTimes=false;  String srcPath=".";  String destPath=".";  try {    if (args.length > 0) {      BulkTimer timer=BulkTimer.LOAD;      timer.start();      for (int i=0; i < args.length; i++) {        if (args[i].equals("-src")) {          srcPath=args[++i];        } else         if (args[i].equals("-dest")) {          destPath=args[++i];        } else         if (args[i].equals("-generate_binary")) {          String name="diphone_units.txt";          if (i + 1 < args.length) {            String nameArg=args[++i];            if (!nameArg.startsWith("-")) {              name=nameArg;            }          }          int suffixPos=name.lastIndexOf(".txt");          String binaryName="diphone_units.bin";          if (suffixPos != -1) {            binaryName=name.substring(0,suffixPos) + ".bin";          }          String indexName="diphone_units.idx";          if (suffixPos != -1) {            indexName=name.substring(0,suffixPos) + ".idx";          }          System.out.println("Loading " + name);          timer.start("load_text");          DiphoneUnitDatabase udb=new DiphoneUnitDatabase(new URL("file:" + srcPath + "/"+ name),false);          timer.stop("load_text");          System.out.println("Dumping " + binaryName);          timer.start("dump_binary");          udb.dumpBinary(destPath + "/" + binaryName);          timer.stop("dump_binary");          timer.start("load_binary");          DiphoneUnitDatabase budb=new DiphoneUnitDatabase(new URL("file:" + destPath + "/"+ binaryName),true);          timer.stop("load_binary");          System.out.println("Dumping " + indexName);          timer.start("dump index");          budb.dumpBinaryIndex(destPath + "/" + indexName);          timer.stop("dump index");        } else         if (args[i].equals("-compare")) {          timer.start("load_text");          DiphoneUnitDatabase udb=new DiphoneUnitDatabase(new URL("file:./diphone_units.txt"),false);          timer.stop("load_text");          timer.start("load_binary");          DiphoneUnitDatabase budb=new DiphoneUnitDatabase(new URL("file:./diphone_units.bin"),true);          timer.stop("load_binary");          timer.start("compare");          if (udb.compare(budb)) {            System.out.println("other compare ok");          } else {            System.out.println("other compare different");          }          timer.stop("compare");        } else         if (args[i].equals("-showtimes")) {          showTimes=true;        } else {          System.out.println("Unknown option " + args[i]);        }      }      timer.stop();      if (showTimes) {        timer.show("DiphoneUnitDatabase");      }    } else {      System.out.println("Options: ");      System.out.println("    -src path");      System.out.println("    -dest path");      System.out.println("    -compare");      System.out.println("    -generate_binary");      System.out.println("    -showTimes");    }  } catch (  IOException ioe) {    System.err.println(ioe);  }}  }
class C{  public PagesGetQuery global(Boolean value){  return unsafeParam("global",value);}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public INDArray asRowVector(File f) throws IOException {  return asRowVector(ImageIO.read(f));}  }
class C{  public void handle(Exception ex){}  }
class C{  public IntColumn(int nrows){  this(nrows,nrows,-1);}  }
class C{  public boolean hasStartEndDate(){  return startDate != null && endDate != null;}  }
class C{  public static void sendBroadcast(Context context,String action){  sendBroadcast(context,action,null);}  }
class C{  public final boolean canSetFloat(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetFloat());}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start || start < 0 || end > size) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start / 32;  int lastInt=end / 32;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask=(2 << lastBit) - (1 << firstBit);    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  FetchResult fetch(String url,boolean prune,boolean force,Iterable<String> refspecs) throws RepoException {  List<String> args=Lists.newArrayList("fetch",validateUrl(url));  args.add("--verbose");  if (prune) {    args.add("-p");  }  if (force) {    args.add("-f");  }  for (  String ref : refspecs) {    try {      Refspec.create(environment,gitDir,ref,null);    } catch (    EvalException e) {      throw new RepoException("Invalid refspec passed to fetch: " + e);    }    args.add(ref);  }  ImmutableMap<String,GitReference> before=showRef();  git(getCwd(),addGitDirAndWorkTreeParams(args));  ImmutableMap<String,GitReference> after=showRef();  return new FetchResult(before,after);}  }
class C{  public BoundingVolume mergeLocal(BoundingVolume volume){  if (volume == null) {    return this;  }switch (volume.getType()) {case Sphere:{      BoundingSphere sphere=(BoundingSphere)volume;      float temp_radius=sphere.getRadius();      Vector3f temp_center=sphere.center;      return merge(temp_radius,temp_center,this);    }case AABB:{    BoundingBox box=(BoundingBox)volume;    Vector3f radVect=Vector3f.newInstance();    radVect.set(box.xExtent,box.yExtent,box.zExtent);    Vector3f temp_center=box.center;    float len=radVect.length();    Vector3f.recycle(radVect);    return merge(len,temp_center,this);  }default :return null;}}  }
class C{  private void log(final Level level,final Object o){  if (logger.isEnabledFor(level)) {    NDC.push(ndcPush);    logger.log(level,o);    NDC.pop();  }}  }
class C{  private Object writeReplace(){  return new DataTransferObject(compiler.getFreeParameters(),compiler.getOrder(),data);}  }
class C{  @Override public boolean isSelected(T photo){  return selectedPhotos.contains(photo);}  }
class C{  public static Simulation fromXml(InputStream stream) throws ParserConfigurationException, SAXException, IOException {  return XmlReader.fromXml(new InputSource(stream));}  }
class C{  public PhotosCreateAlbumQuery privacyComment(List<String> value){  return unsafeParam("privacy_comment",value);}  }
class C{  public static JsonValue parse(Reader reader) throws IOException {  if (reader == null) {    throw new NullPointerException("reader is null");  }  DefaultHandler handler=new DefaultHandler();  new JsonParser(handler).parse(reader);  return handler.getValue();}  }
class C{  public Object remove(Object key){  Object underlying=this.underlyingObjectGetter.getUnderlyingObject(key);  return removeUsingUnderlying(underlying);}  }
class C{  protected void jimplifyInterface(DexBody body){  SootMethodRef ref=getSootMethodRef(InvocationType.Interface);  if (!ref.declaringClass().isInterface()) {    jimplifyVirtual(body);    return;  }  List<Local> parameters=buildParameters(body,false);  invocation=Jimple.v().newInterfaceInvokeExpr(parameters.get(0),getSootMethodRef(InvocationType.Interface),parameters.subList(1,parameters.size()));  body.setDanglingInstruction(this);}  }
class C{  public int size(){  return filledCells;}  }
class C{  public void lerp(Vector2 dp,double da,double alpha){  this.translate(dp.x * alpha,dp.y * alpha);  this.rotate(da * alpha,this.getTranslationX(),this.getTranslationY());}  }
class C{  @Override public void begin(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int startMask){  super.begin(x,y,startMask);  int androidX=Coordinates.getAndroidX(myScreenView,myStartX);  int androidY=Coordinates.getAndroidY(myScreenView,myStartY);  DrawConstraintModel model=ConstraintModel.getDrawConstraintModel(myScreenView);  model.updateModifiers(startMask);  model.setInteractionComponent(myComponent.getParent() != null ? myComponent.getParent() : myComponent);  model.mousePressed(androidX,androidY);}  }
class C{  public boolean removeTuple(Tuple t){  if (containsTuple(t)) {    removeRow(t.getRow());    return true;  } else {    return false;  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static List<CarbonDimension> addChildrenForComplexTypeDimension(List<CarbonDimension> queryDimensions,List<CarbonDimension> tableBlockDimensions){  List<CarbonDimension> updatedQueryDimension=new ArrayList<CarbonDimension>();  int numberOfChildren=0;  for (  CarbonDimension queryDimension : queryDimensions) {    if (queryDimension.numberOfChild() == 0) {      updatedQueryDimension.add(queryDimension);    }    numberOfChildren=queryDimension.getOrdinal() + queryDimension.numberOfChild();    for (int j=queryDimension.getOrdinal(); j < numberOfChildren; j++) {      updatedQueryDimension.add(tableBlockDimensions.get(j));    }  }  return updatedQueryDimension;}  }
class C{  public int size(){  return 9;}  }
class C{  public void handleCharNameRequest(int exOpcode,Player activePlayer,String charName,String newNickname,int rank){  Legion legion=activePlayer.getLegion();  charName=Util.convertName(charName);  Player targetPlayer=world.findPlayer(charName);switch (exOpcode) {case 0x01:    if (targetPlayer != null) {      if (targetPlayer.getPlayerSettings().isInDeniedStatus(DeniedStatus.GUILD)) {        PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_MSG_REJECTED_INVITE_GUILD(charName));        return;      }      invitePlayerToLegion(activePlayer,targetPlayer);    } else {      PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_NO_USER_TO_INVITE);    }  break;case LEGION_ACTION_KICK:if (legionRestrictions.canKickPlayer(activePlayer,charName)) {  if (removeLegionMember(charName,true,activePlayer.getName())) {    if (targetPlayer != null) {      PacketSendUtility.sendPacket(targetPlayer,new SM_LEGION_LEAVE_MEMBER(1300246,0,legion.getLegionName()));      targetPlayer.resetLegionMember();      if (legion.hasBonus()) {        PacketSendUtility.sendPacket(activePlayer,new SM_ICON_INFO(1,false));      }    }  }}break;case 0x05:if (targetPlayer != null) {appointBrigadeGeneral(activePlayer,targetPlayer);} else {PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_NO_USER_TO_INVITE);}break;case 0x06:if (targetPlayer != null) {appointRank(activePlayer,targetPlayer,rank);} else {appointRank(activePlayer,charName,rank);}break;case 0x0F:changeNickname(activePlayer,charName,newNickname);break;}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_JOIN_ZONE(String value0){  return new SM_SYSTEM_MESSAGE(1400239,value0);}  }
class C{  public static void launchActivityFromFragment(FragmentActivity context,Class<? extends Activity> activity,boolean closeCurrentActivity,Bundle bundle){  Intent intent=new Intent(context,activity);  if (bundle != null) {    intent.putExtras(bundle);  }  context.startActivity(intent);  if (closeCurrentActivity) {    context.finish();  }}  }
class C{  private static String[] splitTypeArguments(final String nestedTypes){  StringBuilder string=new StringBuilder(nestedTypes.replaceAll("\\s*",""));  List<String> arguments=new ArrayList<String>();  while (string.length() > 0) {    int nextComma=string.indexOf(",");    int nextOpen=string.indexOf("<");    if (nextComma == -1) {      arguments.add(string.toString());      string.setLength(0);    } else     if (nextOpen == -1 || nextComma < nextOpen) {      arguments.add(string.substring(0,nextComma));      string.replace(0,nextComma + 1,"");    } else {      int depth=1;      int index=nextOpen;      while (depth > 0 && index < string.length() - 1) {        char nextChar=string.charAt(++index);        if ('<' == nextChar) {          ++depth;        } else         if ('>' == nextChar) {          --depth;        }      }      arguments.add(string.substring(0,index + 1));      string.replace(0,index + 1,"");    }  }  return arguments.toArray(new String[arguments.size()]);}  }
class C{  public boolean write(byte[] bytes,int offset,int size){  bytes=convert16To8Bits(bytes);  size/=2;  System.arraycopy(bytes,offset,outputData,curIndex,size);  curIndex+=size;  return true;}  }
class C{  private static int determineConsecutiveTextCount(CharSequence msg,int startpos){  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch) && idx < len) {      numericCount++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }    if (numericCount >= 13) {      return idx - startpos - numericCount;    }    if (numericCount > 0) {      continue;    }    ch=msg.charAt(idx);    if (!isText(ch)) {      break;    }    idx++;  }  return idx - startpos;}  }
class C{  public E removeMaximum(){  if (this.root == null)   return null;  return this.removeMaximum(this.root).comparable;}  }
class C{  public boolean isStatic(){  return this.mass.isInfinite() && this.velocity.isZero() && Math.abs(this.angularVelocity) <= Epsilon.E;}  }
class C{  public void close() throws RemoteException {  if (_transactionManagerProvider != null)   _transactionManagerProvider.destroy();  _queryCache.clear();}  }
class C{  public static ModelInfo createFromElements(ModelInfo defaultInfo,Element element){  String title=StringUtil.internString(UtilXml.childElementValue(element,"title"));  if (title == null || title.isEmpty()) {    title=defaultInfo.getTitle();  }  String description=StringUtil.internString(UtilXml.childElementValue(element,"description"));  if (description == null || description.isEmpty()) {    description=defaultInfo.getDescription();  }  String copyright=StringUtil.internString(UtilXml.childElementValue(element,"copyright"));  if (copyright == null || copyright.isEmpty()) {    copyright=defaultInfo.getCopyright();  }  String author=StringUtil.internString(UtilXml.childElementValue(element,"author"));  if (author == null || author.isEmpty()) {    author=defaultInfo.getAuthor();  }  String version=StringUtil.internString(UtilXml.childElementValue(element,"version"));  if (version == null || version.isEmpty()) {    version=defaultInfo.getVersion();  }  String defaultResourceName=StringUtil.internString(UtilXml.childElementValue(element,"default-resource-name"));  if (defaultResourceName == null || defaultResourceName.isEmpty()) {    defaultResourceName=defaultInfo.getDefaultResourceName();  }  return new ModelInfo(title,description,copyright,author,version,defaultResourceName);}  }
class C{  protected boolean isPerformOrderById(){  return performOrderById;}  }
class C{  private ContainerNetworkState updateNetwork(ContainerNetworkState network,String newSubnet,String newGateway) throws Throwable {  ContainerNetworkState patch=new ContainerNetworkState();  if (newSubnet != null || newGateway != null) {    Ipam ipam=new Ipam();    IpamConfig ipamConfig=new IpamConfig();    ipamConfig.subnet=newSubnet;    ipamConfig.gateway=newGateway;    ipam.config=new IpamConfig[]{ipamConfig};    patch.ipam=ipam;  }  return doPatch(patch,network.documentSelfLink);}  }
class C{  public static Map<String,List<String>> loadVisualThemeResourcesFromScript(Map<String,Object> context,String script,GenericValue webSite) throws GenericServiceException {  Map<String,Object> scriptCtx=new HashMap<String,Object>(context);  scriptCtx.put("webSite",webSite);  scriptCtx.remove("visualThemeId");  ScriptUtil.executeScript(script,null,scriptCtx);  String visualThemeId=(String)scriptCtx.get("visualThemeId");  if (UtilValidate.isNotEmpty(visualThemeId)) {    LocalDispatcher dispatcher=(LocalDispatcher)context.get("dispatcher");    Map<String,Object> serviceCtx=dispatcher.getDispatchContext().makeValidContext("getVisualThemeResources",ModelService.IN_PARAM,context);    serviceCtx.put("visualThemeId",visualThemeId);    Map<String,Object> serviceResult=dispatcher.runSync("getVisualThemeResources",serviceCtx);    if (ServiceUtil.isSuccess(serviceResult)) {      return UtilGenerics.cast(serviceResult.get("themeResources"));    }  }  return null;}  }
class C{  private static boolean canDetermineAvailability(Interval available,Interval needed){  if (available != null && needed != null) {    if (available.contains(needed) || available.getStart().isAfter(needed.getStart())) {      return true;    }  }  return false;}  }
class C{  @Override public boolean endContentModel(int[] currentState){  int state=currentState[0];  if (state == XSCMValidator.FIRST_ERROR || state == XSCMValidator.SUBSEQUENT_ERROR) {    return false;  }  if (fHasOptionalContent && state == STATE_START) {    return true;  }  for (int i=0; i < fNumElements; i++) {    if (!fIsOptionalElement[i] && currentState[i + 1] == STATE_START)     return false;  }  return true;}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  private int findOptionPanel(Box box,FieldPanel panel){  int index;  for (index=0; index < box.getComponentCount(); index++) {    if (box.getComponent(index) == panel) {      return index;    }  }  return -1;}  }
class C{  Node(Node<K,V> next){  this.key=null;  this.value=this;  this.next=next;}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};}  }
class C{  public void pathValueToPixel(Path path){  path.transform(mMatrixValueToPx);  path.transform(mViewPortHandler.getMatrixTouch());  path.transform(mMatrixOffset);}  }
class C{  @Override protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,positions[i * 2],fixedPosition - offset,mAxisLabelPaint);  }}  }
class C{  public void dump(PrintWriter out,int pad,String title){  String itemName=title + ":" + toString();  getFeatures().dump(out,pad,itemName);  if (hasDaughters()) {    Item daughter=getDaughter();    while (daughter != null) {      daughter.dump(out,pad + 8,"d");      daughter=daughter.next;    }  }}  }
class C{  @Override public void characters(char[] chars,int start,int length) throws SAXException {  elementText.append(chars,start,length);}  }
class C{  public RoleDataAccessException(String s){  super(s);}  }
class C{  @RequestMapping(value="/{id}",method=DELETE,produces=APPLICATION_JSON_VALUE) public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {  log.debug("Delete by id Author : {}",id);  try {    authorRepository.delete(id);    return ResponseEntity.ok().build();  } catch (  Exception x) {    return ResponseEntity.status(HttpStatus.CONFLICT).build();  }}  }
class C{  protected boolean isUpdateAvailable(){  boolean result=false;  String version=EMPTY_VERSION;  try {    version=retrieveRemoteVersion(store.getVersionUrl(),store.getCharset());  } catch (  final IOException e) {    LOG.info(MSG_NO_UPDATE_CHECK_POSSIBLE);    LOG.debug(String.format(MSG_NO_UPDATE_CHECK_POSSIBLE__DEBUG,e.getClass().getName(),e.getLocalizedMessage()));  }  if (hasUpdate(version,getCurrentVersion())) {    LOG.debug(String.format(MSG_UPDATE_AVAILABLE,getCurrentVersion(),version));    result=true;  } else {    LOG.debug(String.format(MSG_NO_UPDATE_AVAILABLE,getCurrentVersion()));  }  lastUpdateCheck=System.currentTimeMillis();  return result;}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public static int hashBytes(byte[] bytes,int length){  return hashBytes(bytes,0,length);}  }
class C{  public static Object fromXml(Reader reader){  return xstream.fromXML(reader);}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  private Layout parseLayout(TokenStream tokens){  Doc.GroupKind kind=Doc.GroupKind.VERTICAL;  Doc separator=Doc.BREAK;  int nest=0;  if (tokens.has("vertical")) {    tokens.next();    kind=Doc.GroupKind.VERTICAL;  } else   if (tokens.has("horizontal")) {    tokens.next();    kind=Doc.GroupKind.HORIZONTAL;  } else   if (tokens.has("auto")) {    tokens.next();    kind=Doc.GroupKind.AUTO;  } else   if (tokens.has("fill")) {    tokens.next();    kind=Doc.GroupKind.FILL;  }  if (tokens.has(INT_LITERAL)) {    nest=Integer.parseInt(tokens.next());  }  if (tokens.has(JOIN_SEPARATOR)) {    tokens.next();    Elem expr=parseExpr(tokens);    if (expr != null) {      separator=evalParsingTime(expr);    }  }  return Layout.create(separator,kind,nest);}  }
class C{  public static Element createBoundary(Document doc){  if (!doc.getDocumentElement().getTagName().equals(MaryXML.MARYXML))   throw new DOMException(DOMException.INVALID_ACCESS_ERR,"Expected <" + MaryXML.MARYXML + "> document, received "+ doc.getDocumentElement().getTagName()+ ".");  Element boundary=MaryXML.createElement(doc,MaryXML.BOUNDARY);  boundary.setAttribute("breakindex","3");  boundary.setAttribute("tone","unknown");  return boundary;}  }
class C{  public static Future<Void> abortSequence(ExecutorService executorService,AsyncAbortable... abortables){  List<AsyncAbortable> abortableList=Lists.newArrayListWithExpectedSize(abortables.length);  for (  AsyncAbortable abortable : abortables) {    if (null == abortable) {      abortableList.add(AsyncAbortable.NULL);    } else {      abortableList.add(abortable);    }  }  return FutureUtils.processList(abortableList,AsyncAbortable.ABORT_FUNC,executorService).map(VoidFunctions.LIST_TO_VOID_FUNC);}  }
class C{  @Override public void parse(String aLine) throws IOException {  String[] tokens=aLine.split("\t");  if (tokens.length == 1) {    clear();    queryName=tokens[0];  } else {    queryName=tokens[0];    refName=tokens[1];    bitScore=Basic.parseInt(tokens[11]);    expected=Basic.parseFloat(tokens[10]);    percentIdentity=Basic.parseInt(tokens[2]);  }}  }
class C{  public NewsfeedGetCommentsQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  private void sortChildrenByRank(NodeBase node){  SortedSet<NodeBase> children=new TreeSet<>();  for (int i=0; i < node.getChildCount(); i++) {    NodeBase child=(NodeBase)node.getChildAt(i);    children.add(child);  }  node.removeAllChildren();  for (  NodeBase a : children) {    node.add(a);  }}  }
class C{  protected static void loadStandardWidgets(){  for (  Class<?> clz : ModelScreenWidget.class.getClasses()) {    try {      if (ModelScreenWidget.class.isAssignableFrom(clz) && (clz.getModifiers() & Modifier.ABSTRACT) == 0) {        try {          Field field=clz.getField("TAG_NAME");          Object fieldObject=field.get(null);          if (fieldObject != null) {            Class<? extends ModelScreenWidget> widgetClass=UtilGenerics.cast(clz);            registerScreenWidget(fieldObject.toString(),widgetClass);          }        } catch (        Exception e) {        }      }    } catch (    Exception e) {      Debug.logError(e,module);    }  }  try {    registerScreenWidget("iterate-section",IterateSectionWidget.class);  } catch (  Exception e) {    Debug.logError(e,module);  }}  }
class C{  @Override public String toString(){  final StringBuilder builder=new StringBuilder(32);  builder.append("Pool []");  return builder.toString();}  }
class C{  public void outputOrigin(){  System.out.println("After decoding:");  for (int i=0; i < disks; i++) {    System.out.printf("idata:%d:  ",i);    System.out.println(Arrays.toString(idata.get(i).toArray()));  }}  }
class C{  public static AudioFileFormat.Type findTargetType(String strExtension){  AudioFileFormat.Type[] aTypes=AudioSystem.getAudioFileTypes();  for (int i=0; i < aTypes.length; i++) {    if (aTypes[i].getExtension().equals(strExtension)) {      return aTypes[i];    }  }  return null;}  }
class C{  public static String join(List<?> list,String delim){  return join((Collection<?>)list,delim);}  }
class C{  public boolean onError(MediaPlayer player,int arg1,int arg2){  Log.d(LOG_TAG,"AudioPlayer.onError(" + arg1 + ", "+ arg2+ ")");  this.player.stop();  this.player.release();  sendErrorStatus(arg1);  return false;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static Future<BoxedUnit> zkAsyncCreateFullPathOptimistic(final ZooKeeperClient zkc,final String pathToCreate,final byte[] data,final List<ACL> acl,final CreateMode createMode){  Optional<String> parentPathShouldNotCreate=Optional.absent();  return zkAsyncCreateFullPathOptimistic(zkc,pathToCreate,parentPathShouldNotCreate,data,acl,createMode);}  }
class C{  public static int loadCubeMap(Context context,int[] cubeResources){  final int[] textureObjectIds=new int[1];  glGenTextures(1,textureObjectIds,0);  if (textureObjectIds[0] == 0) {    if (LoggerConfig.ON) {      Log.w(TAG,"Could not generate a new OpenGL texture object.");    }    return 0;  }  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inScaled=false;  final Bitmap[] cubeBitmaps=new Bitmap[6];  for (int i=0; i < 6; i++) {    cubeBitmaps[i]=BitmapFactory.decodeResource(context.getResources(),cubeResources[i],options);    if (cubeBitmaps[i] == null) {      if (LoggerConfig.ON) {        Log.w(TAG,"Resource ID " + cubeResources[i] + " could not be decoded.");      }      glDeleteTextures(1,textureObjectIds,0);      return 0;    }  }  glBindTexture(GL_TEXTURE_CUBE_MAP,textureObjectIds[0]);  glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MIN_FILTER,GL_LINEAR);  glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MAG_FILTER,GL_LINEAR);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X,0,cubeBitmaps[0],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X,0,cubeBitmaps[1],0);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,0,cubeBitmaps[2],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y,0,cubeBitmaps[3],0);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,0,cubeBitmaps[4],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z,0,cubeBitmaps[5],0);  glBindTexture(GL_TEXTURE_2D,0);  for (  Bitmap bitmap : cubeBitmaps) {    bitmap.recycle();  }  return textureObjectIds[0];}  }
class C{  public boolean dump_cg(){  return soot.PhaseOptions.getBoolean(options,"dump-cg");}  }
class C{  private boolean isOctalDigit(final char ch){  return ch >= '0' && ch <= '7';}  }
class C{  public AdsGetSuggestionsQueryWithRegions lang(AdsGetSuggestionsLang value){  return unsafeParam("lang",value);}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  @Override public Constant evaluate(Record rec){  return rec.getVal(fldName);}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  @Override public SourceDataTagValue clone(){  SourceDataTagValue clone=null;  try {    clone=(SourceDataTagValue)super.clone();    if (this.daqTimestamp != null) {      clone.daqTimestamp=(Timestamp)this.daqTimestamp.clone();    }    if (this.quality != null) {      clone.quality=this.quality.clone();    }    if (this.timestamp != null) {      clone.timestamp=(Timestamp)this.timestamp.clone();    }  } catch (  CloneNotSupportedException e) {    throw new RuntimeException("Catched CloneNotSupportedException when trying to create a clone from SourceDataTagValue! Please check the code",e);  }  return clone;}  }
class C{  public MessagesMarkAsImportantQuery markAsImportant(UserActor actor){  return new MessagesMarkAsImportantQuery(getClient(),actor);}  }
class C{  public static final void drawDistanceJoint(GL2 gl,DistanceJoint joint){  Vector2 v1=joint.getAnchor1();  Vector2 v2=joint.getAnchor2();  gl.glColor4f(0.0f,0.0f,0.0f,0.3f);  if (joint.isSpring()) {    final double h=0.03;    final double w=0.25;    double offset=h * 0.5;    int loops=(int)Math.ceil((joint.getDistance() - offset * 2.0) / h);    Vector2 n=v1.to(v2);    double x=n.normalize();    Vector2 t=n.getRightHandOrthogonalVector();    double d=(x - offset * 2.0) / (loops - 1);    Vector2 d1=n.product(offset).add(v1);    gl.glBegin(GL.GL_LINES);    gl.glVertex2d(v1.x,v1.y);    gl.glVertex2d(d1.x,d1.y);    Vector2 ct=t.product(w * 0.5);    Vector2 cn=n.product(d * 0.5);    Vector2 first=ct.sum(cn).add(d1);    gl.glVertex2d(d1.x,d1.y);    gl.glVertex2d(first.x,first.y);    Vector2 prev=first;    for (int i=1; i < loops - 1; i++) {      ct=t.product(w * 0.5 * ((i + 1) % 2 == 1 ? 1.0 : -1.0));      cn=n.product(d * (i + 0.5) + offset);      Vector2 p2=ct.sum(cn).add(v1);      gl.glVertex2d(prev.x,prev.y);      gl.glVertex2d(p2.x,p2.y);      prev=p2;    }    Vector2 d2=n.product(-offset).add(v2);    gl.glVertex2d(prev.x,prev.y);    gl.glVertex2d(d2.x,d2.y);    gl.glVertex2d(d2.x,d2.y);    gl.glVertex2d(v2.x,v2.y);    gl.glEnd();  } else {    Vector2 t=v1.to(v2);    t.normalize();    t.left();    t.multiply(0.025);    gl.glBegin(GL2.GL_QUADS);    gl.glVertex2d(v1.x - t.x,v1.y - t.y);    gl.glVertex2d(v1.x + t.x,v1.y + t.y);    gl.glVertex2d(v2.x + t.x,v2.y + t.y);    gl.glVertex2d(v2.x - t.x,v2.y - t.y);    gl.glEnd();  }}  }
class C{  @Override public Filter createFilter(){  return new IsGreaterThanExtended();}  }
class C{  public Bundler(){  this(null);}  }
class C{  public void testReadXmlLangNewStyle() throws Exception {  Properties result=xmlToProperties("-");  assertNotNull(result);  assertTrue(!result.isEmpty());  assertEquals(1,result.size());  assertEquals("Key Value",result.getProperty("PropertyKey"));}  }
class C{  public static final void drawRectangleFromTopLeft(GL2 gl,double sx,double sy,double w,double h,boolean points){  gl.glBegin(GL.GL_LINE_LOOP);  gl.glVertex2d(sx,sy);  gl.glVertex2d(sx + w,sy);  gl.glVertex2d(sx + w,sy - h);  gl.glVertex2d(sx,sy - h);  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    gl.glVertex2d(sx,sy);    gl.glVertex2d(sx + w,sy);    gl.glVertex2d(sx + w,sy - h);    gl.glVertex2d(sx,sy - h);    gl.glEnd();  }}  }
class C{  public boolean isApplicable(){  return getViewer().getTabbedIndex() != ClusterViewer.MATRIX_TAB_INDEX;}  }
class C{  private void update(final AliveTimer aliveTimer){  aliveTimer.setActive(true);  aliveTimer.setLastUpdate(System.currentTimeMillis());  if (LOGGER.isDebugEnabled()) {    StringBuffer str=new StringBuffer("Updated alive timer for ");    str.append(AliveTimer.ALIVE_TYPE_PROCESS + " ");    str.append(aliveTimer.getRelatedName());    str.append(".");    LOGGER.debug(str.toString());  }}  }
class C{  public SpaceTypeDescriptorBuilder addFixedProperty(String propertyName,String propertyTypeName){  return addFixedProperty(propertyName,propertyTypeName,SpaceDocumentSupport.DEFAULT,StorageType.DEFAULT);}  }
class C{  @RequestMapping(value="/races/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteRace(@PathVariable String id){  log.debug("REST request to delete Race : {}",id);  raceRepository.delete(UUID.fromString(id));  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("race",id.toString())).build();}  }
class C{  private Segment[] retrieveLineSegments(){  if (lineSegments == null) {    final int size=vertices.length;    if (size <= 1) {      this.lineSegments=new Segment[0];    } else     if (size == 2) {      this.lineSegments=new Segment[1];      final Vector2D p1=vertices[0];      final Vector2D p2=vertices[1];      this.lineSegments[0]=new Segment(p1,p2,new Line(p1,p2,tolerance));    } else {      this.lineSegments=new Segment[size];      Vector2D firstPoint=null;      Vector2D lastPoint=null;      int index=0;      for (      Vector2D point : vertices) {        if (lastPoint == null) {          firstPoint=point;          lastPoint=point;        } else {          this.lineSegments[index++]=new Segment(lastPoint,point,new Line(lastPoint,point,tolerance));          lastPoint=point;        }      }      this.lineSegments[index]=new Segment(lastPoint,firstPoint,new Line(lastPoint,firstPoint,tolerance));    }  }  return lineSegments;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANCEL_PETITION_FAIL_TO_GM(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300558,value0,value1);}  }
class C{  public void clear(){  clear(DEFAULT_CAPACITY);}  }
class C{  void drawDivider(Canvas canvas,Rect bounds,int childIndex){  final Drawable divider=mDivider;  final boolean clipDivider=mClipDivider;  if (!clipDivider) {    divider.setBounds(bounds);  } else {    canvas.save();    canvas.clipRect(bounds);  }  divider.draw(canvas);  if (clipDivider) {    canvas.restore();  }}  }
class C{  public LPCCInterpolator(int p,double r){  super(p);  if (r < 0 || r > 1)   throw new IllegalArgumentException("Mixing ratio r must be between 0 and 1");  this.r=r;}  }
class C{  @Override public boolean isFileModified(long fileTimeStamp,long endOffset){  boolean isFileModified=false;  if (getLastModifiedTime() > fileTimeStamp || getSize() > endOffset) {    isFileModified=true;  }  return isFileModified;}  }
class C{  public void intersection(double x,double y,double w,double h){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(x,y,w,h);    status=INUSE;    return;  }  clip[0]=Math.max(clip[0],x);  clip[1]=Math.max(clip[1],y);  clip[6]=Math.min(clip[6],x + w);  clip[7]=Math.min(clip[7],y + h);}  }
class C{  public static void main(String[] args){  runShell(args,Version.VERSION,HISTORY_FILENAME,new GraqlClientImpl());}  }
class C{  public boolean contains(Vertex v){  return UniqueVertices.containsKey(v.getLabel());}  }
class C{  private SymbolManager(){  initialise();}  }
class C{  public void addToEffectedController(){  if ((!addedToController) && (effected.getLifeStats() != null) && (!effected.getLifeStats().isAlreadyDead())) {    effected.getEffectController().addEffect(this);    addedToController=true;  }}  }
class C{  private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {  BigInteger result=BigInteger.ZERO;  for (int i=0; i < count; i++) {    result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));  }  String resultString=result.toString();  if (resultString.charAt(0) != '1') {    throw FormatException.getFormatInstance();  }  return resultString.substring(1);}  }
class C{  @deprecated public Object clone(){  try {    return (StringCharacterIterator)super.clone();  } catch (  CloneNotSupportedException e) {    throw new IllegalStateException();  }}  }
class C{  public static Matrix random(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=Math.random();    }  }  return A;}  }
class C{  public static String toSlashString(String str){  String result="";  char[] chars=str.toCharArray();  for (  char chr : chars) {    if (chr == '"' || chr == '\'' || chr == '\\') {      result+="\\";    }    result+=chr;  }  return result;}  }
class C{  public static void main(String[] args){  OkHttpClient http=new OkHttpClient();  RequestEnvelopeOuterClass.RequestEnvelope.AuthInfo auth=null;  PokemonGo go=new PokemonGo(http);  try {    go.login(new PtcCredentialProvider(http,ExampleLoginDetails.LOGIN,ExampleLoginDetails.PASSWORD));    go.setLocation(-32.058087,115.744325,0);    List<CatchablePokemon> catchablePokemon=go.getMap().getCatchablePokemon();    System.out.println("Pokemon in area:" + catchablePokemon.size());    for (    CatchablePokemon cp : catchablePokemon) {      EncounterResult encResult=cp.encounterPokemon();      if (encResult.wasSuccessful()) {        System.out.println("Encounted:" + cp.getPokemonId());        CatchOptions options=new CatchOptions(go);        options.useRazzberry(true);        CatchResult result=cp.catchPokemon(options);        System.out.println("Attempt to catch:" + cp.getPokemonId() + " "+ result.getStatus());      }    }  } catch (  LoginFailedException|NoSuchItemException|RemoteServerException e) {    Log.e("Main","Failed to login or server issue: ",e);  }}  }
class C{  public AutoSummENGGui(){  initComponents();  loadSettings();}  }
class C{  public int read(ClassificationsFooterRMA3 classificationsFooter,IInputReader reader) throws IOException {  map.clear();  long start=classificationsFooter.getStart(classificationType);  if (start != 0) {    reader.seek(start);    final int numberOfClasses=reader.readInt();    for (int i=0; i < numberOfClasses; i++) {      int classId=reader.readInt();      int sum=reader.readInt();      for (int z=0; z < 8; z++)       reader.skipBytes(sum);      map.put(classId,sum);    }  }  return map.size();}  }
class C{  public GroupsJoinQuery(VkApiClient client,UserActor actor){  super(client,"groups.join",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public String message(){  return message;}  }
class C{  public void testProperties(BigQuerySinkConnectorConfig config){  super.testProperties(config);  config.getBoolean(config.TABLE_CREATE_CONFIG);}  }
class C{  public ConfigurationNotFoundException(String s,Throwable t){  super(s,t);}  }
class C{  public void splashscreenHidden(int reason){  assert reason >= 0 && reason < SPLASHSCREEN_HIDES_REASON_MAX;  RecordHistogram.recordEnumeratedHistogram(HISTOGRAM_SPLASHSCREEN_HIDES,reason,SPLASHSCREEN_HIDES_REASON_MAX);  assert mSplashScreenVisibleTime != 0;  RecordHistogram.recordMediumTimesHistogram(HISTOGRAM_SPLASHSCREEN_DURATION,SystemClock.elapsedRealtime() - mSplashScreenVisibleTime,TimeUnit.MILLISECONDS);}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ReplicationTransmissionPolicy copy=(ReplicationTransmissionPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  private RectangleNode mergeManyToMany(){  long x_min=Long.MAX_VALUE, y_min=Long.MAX_VALUE;  long x_max=Long.MIN_VALUE, y_max=Long.MIN_VALUE;  RectangleNode p=(RectangleNode)header[GeometricManager.MANY_TO_MANY];  header[GeometricManager.MANY_TO_MANY]=null;  size[GeometricManager.MANY_TO_MANY]=0;  while (p != null) {    if (p.I1 < x_min)     x_min=p.I1;    if (p.I2 < y_min)     y_min=p.I2;    if (p.I1 + p.L > x_max)     x_max=p.I1 + p.L;    if (p.I2 + p.L_prime > y_max)     y_max=p.I2 + p.L_prime;    p=(RectangleNode)reclaimRectangleNode(p);  }  p=getRectangleNode();  p.I1=x_min;  p.I2=y_min;  p.L=x_max - x_min;  p.L_prime=y_max - y_min;  p.next=null;  return p;}  }
class C{  private void createLayouts(int widthItems,int widthLabel){  if (itemsLayout == null || itemsLayout.getWidth() > widthItems) {    itemsLayout=new StaticLayout(buildText(isScrollingPerformed),itemsPaint,widthItems,widthLabel > 0 ? Layout.Alignment.ALIGN_CENTER : Layout.Alignment.ALIGN_CENTER,1,ADDITIONAL_ITEM_HEIGHT,false);  } else {    itemsLayout.increaseWidthTo(widthItems);  }  if (!isScrollingPerformed && (valueLayout == null || valueLayout.getWidth() > widthItems)) {    String text=getAdapter() != null ? getAdapter().getItem(currentItem) : null;    valueLayout=new StaticLayout(text != null ? text : "",valuePaint,widthItems,widthLabel > 0 ? Layout.Alignment.ALIGN_CENTER : Layout.Alignment.ALIGN_CENTER,1,ADDITIONAL_ITEM_HEIGHT,false);  } else   if (isScrollingPerformed) {    valueLayout=null;  } else {    valueLayout.increaseWidthTo(widthItems);  }  if (widthLabel > 0) {    if (labelLayout == null || labelLayout.getWidth() > widthLabel) {      labelLayout=new StaticLayout(label,valuePaint,widthLabel,Layout.Alignment.ALIGN_NORMAL,1,ADDITIONAL_ITEM_HEIGHT,false);    } else {      labelLayout.increaseWidthTo(widthLabel);    }  }}  }
class C{  @Override public void modelChanged(@NotNull NlModel model){  SwingUtilities.invokeLater(null);}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=_set.length;  short oldKeys[]=_set;  V oldVals[]=_values;  byte oldStates[]=_states;  _set=new short[newCapacity];  _values=(V[])new Object[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      short o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  protected BoardEditCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public ParticleSystem(ViewGroup parentView,int maxParticles,Drawable drawable,long timeToLive){  this(parentView,maxParticles,timeToLive);  if (drawable instanceof BitmapDrawable) {    Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();    for (int i=0; i < mMaxParticles; i++) {      mParticles.add(new Particle(bitmap));    }  } else   if (drawable instanceof AnimationDrawable) {    AnimationDrawable animation=(AnimationDrawable)drawable;    for (int i=0; i < mMaxParticles; i++) {      mParticles.add(new AnimatedParticle(animation));    }  } else {  }}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.isAllowNucleotides() && viewer.isShowAminoAcids();}  }
class C{  public void serviceIDNotify(ServiceID serviceID){  if (_logger.isLoggable(Level.INFO)) {    _logger.info("<" + m_ContainerName + "> container registered with "+ serviceID.toString()+ " serviceID successfully.");  }}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigFilename copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigFilename(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public WeightCheckRequestHandler(DataRequestHandler next,DruidWebService webService,QueryWeightUtil queryWeightUtil,ObjectMapper mapper){  super(mapper);  this.next=next;  this.webService=webService;  this.queryWeightUtil=queryWeightUtil;}  }
class C{  public void addFilter(JpaRepositoryFilter filter){  filters.add(filter);}  }
class C{  private static double mlsadf2(double x,double b[],int m,double a,double d[],int pt2,int pt3[]){  double out=0.0;  for (int i=PADEORDER; i > 0; i--) {    int pt2_plus_i=pt2 + i;    d[pt2_plus_i]=mlsafir(d[pt2_plus_i - 1],b,m,a,d,pt3[i]);    double v=d[pt2_plus_i] * pade[ppade + i];    x+=((1 & i) == 1) ? v : -v;    out+=v;  }  d[pt2]=x;  out+=x;  return out;}  }
class C{  private String extractBoundary(String line){  int index=line.lastIndexOf("boundary=");  if (index == -1) {    return null;  }  String boundary=line.substring(index + 9);  if (boundary.charAt(0) == '"') {    index=boundary.lastIndexOf('"');    boundary=boundary.substring(1,index);  }  boundary="--" + boundary;  return boundary;}  }
class C{  public StatelessHibernateSpaceSynchronizationEndpointConfigurer sessionFactory(SessionFactory sessionFactory){  this.sessionFactory=sessionFactory;  return this;}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  Window window=activity.getWindow();  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mChildView=mContentView.getChildAt(0);  if (mChildView != null) {    ViewCompat.setFitsSystemWindows(mChildView,false);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int statusBarHeight=getStatusBarHeight(activity);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);      if (hideStatusBarBackground) {        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.setStatusBarColor(COLOR_TRANSLUCENT);      } else {        window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));      }      if (mChildView != null) {        ViewCompat.requestApplyInsets(mChildView);      }    } else {      ViewGroup mDecorView=(ViewGroup)window.getDecorView();      if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {        mChildView=mDecorView.getChildAt(0);        mContentView.removeView(mChildView);        mChildView=mContentView.getChildAt(0);        if (mChildView != null) {          FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();          if (lp != null && lp.topMargin >= statusBarHeight) {            lp.topMargin-=statusBarHeight;            mChildView.setLayoutParams(lp);          }        }        mDecorView.setTag(false);      }    }  }}  }
class C{  public String toString(){  return "DiphonePitchmarkGenerator";}  }
class C{  public static boolean matches(IIngredient ingredient,ILiquidStack liquidStack){  if (ingredient == null) {    return false;  }  if (ingredient.matches(liquidStack)) {    return true;  }  if (ingredient.getLiquids() != null) {    for (    ILiquidStack liquid : ingredient.getLiquids()) {      if (InputHelper.toFluid(liquid).isFluidEqual(InputHelper.toFluid(liquidStack))) {        return true;      }    }  }  return false;}  }
class C{  @Override public boolean next(){  while (rf.next())   if (rf.getVal(SCHEMA_KEY).compareTo(searchKey) == 0)   return true;  return false;}  }
class C{  private static int unrandomize255State(int randomizedBase256Codeword,int base256CodewordPosition){  int pseudoRandomNumber=((149 * base256CodewordPosition) % 255) + 1;  int tempVariable=randomizedBase256Codeword - pseudoRandomNumber;  return tempVariable >= 0 ? tempVariable : tempVariable + 256;}  }
class C{  @Override public void startAttlist(String elementName,Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.startAttlist(elementName,augs);  if (fDTDHandler != null) {    fDTDHandler.startAttlist(elementName,augs);  }}  }
class C{  private void checkXSLAvailability() throws ClusterConfigurationException {  if (System.getProperty("java.runtime.version").indexOf("1.4") > -1) {    String[] membersName=getClusterMemberNames();    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("cluster members: " + Arrays.asList(membersName));    }    for (int i=0; i < membersName.length; i++) {      String name=membersName[i];      validateMemberName(name);    }    String[] groupMembersArray=getGroupMemberNames();    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("cluster Group members: " + Arrays.asList(groupMembersArray));    }    for (int i=0; i < groupMembersArray.length; i++) {      validateMemberName(groupMembersArray[i]);    }  }}  }
class C{  public void build(RealmResults<T> results){  int xIndex=0;  for (  T object : results) {    mValues.add(buildEntryFromResultObject(object,xIndex++));  }}  }
class C{  public HomeSearchView(Activity a,int type){  super(a);  this.initialize(type);}  }
class C{  public WordDefinition(String sWord){  Word=new String(sWord.toLowerCase());  Hash=hashWord(sWord);}  }
class C{  public CommandForKey(String key){  this.keyDescription=key;}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  private boolean handleStaticOpcode(String owner,String name,String desc,boolean itf){  if (DEBUG) {    System.out.println("Static Method : " + name + ":"+ desc+ ":"+ itf+ ":"+ isStatic);  }  AccessRight accessRight=getMethodAccessRight(owner,name,desc);  if (accessRight == AccessRight.PUBLIC) {    return false;  }  pushMethodRedirectArgumentsOnStack(name,desc);  visitLdcInsn(Type.getType("L" + owner + ";"));  invokeStatic(RUNTIME_TYPE,Method.getMethod("Object invokeProtectedStaticMethod(Object[], Class[], String, Class)"));  handleReturnType(desc);  return true;}  }
class C{  public ReturnStmt newReturnStmt(Value op){  return new JReturnStmt(op);}  }
class C{  @Override public void undo(Transaction tx){}  }
class C{  private void unbindSession(){  SessionFactory sessionFactory=(SessionFactory)getBean("sessionFactory");  SessionHolder sessionHolder=(SessionHolder)TransactionSynchronizationManager.unbindResource(sessionFactory);  SessionFactoryUtils.closeSession(sessionHolder.getSession());}  }
class C{  public int write(byte[] buffer,final int bytes){  int remaining;  if ((remaining=checkSpace(true)) == 0) {    Log.e(RingBuffer.class.getSimpleName(),"Buffer overrun. Data will not be written");    return 0;  }  final int bytesWrite=bytes > remaining ? remaining : bytes;  for (int i=0; i < bytesWrite; ++i) {    this.buffer[wp++]=buffer[i];    if (wp == size)     wp=0;  }  return bytesWrite;}  }
class C{  public CronExpression(String cronExpression,ClockReader clockReader,TimeZone timeZone) throws ParseException {  this(cronExpression,clockReader);  this.timeZone=timeZone;}  }
class C{  public void loadData(){  loadCustomers();  List<Supplier> suppliers=loadSuppliers();  List<Product> products=loadProducts(suppliers);  List<CustomerReview> customerReviews=loadCustomerReviews(products);  loadStock(products);  loadProductCategories(products);}  }
class C{  public boolean moveDown(int firstRow,int lastRow){  firstRow=Math.max(0,firstRow);  if (lastRow >= getNumberRows() - 1)   return false; else {    List<Integer>[] array=new List[getNumberRows()];    for (int i=0; i < getNumberRows(); i++)     array[i]=getCompressedRow2Reads(i);    List<Integer> replaced=array[lastRow + 1];    System.arraycopy(array,firstRow,array,firstRow + 1,lastRow + 1 - firstRow);    array[firstRow]=replaced;    compressedRow2Reads.clear();    compressedRow2Reads.addAll(Arrays.asList(array));    return true;  }}  }
class C{  public TIntHashSet(){  super();}  }
class C{  public Layout(String group){  super(group);}  }
class C{  public static String encodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length() * 3);  for (  char c : s.toCharArray()) {    if (c < 256) {      sb.append(c);    } else {      sb.append("\\u");      sb.append(Character.forDigit((c >>> 12) & 0xf,16));      sb.append(Character.forDigit((c >>> 8) & 0xf,16));      sb.append(Character.forDigit((c >>> 4) & 0xf,16));      sb.append(Character.forDigit((c) & 0xf,16));    }  }  return sb.toString();}  }
class C{  public void pointValuesToPixel(float[] pts){  mMatrixValueToPx.mapPoints(pts);  mViewPortHandler.getMatrixTouch().mapPoints(pts);  mMatrixOffset.mapPoints(pts);}  }
class C{  public List<DexlibAbstractInstruction> instructionsBefore(DexlibAbstractInstruction instruction){  int i=instructions.indexOf(instruction);  if (i == -1)   throw new IllegalArgumentException("Instruction " + instruction + " not part of this body.");  List<DexlibAbstractInstruction> l=new ArrayList<DexlibAbstractInstruction>();  l.addAll(instructions.subList(0,i));  Collections.reverse(l);  return l;}  }
class C{  public VideoGetCatalogQuery itemsCount(Integer value){  return unsafeParam("items_count",value);}  }
class C{  private boolean _hasNext(){  try {    if (_iterator.hasNext())     return true; else     while (_cursor < _listOfIterators.size()) {      _iterator=_listOfIterators.get(_cursor++);      if (_iterator.hasNext())       return true;    }    return false;  } catch (  NullPointerException npe) {    if (_iterator == null)     return false; else     throw npe;  }}  }
class C{  public XSObjectListImpl(XSObject[] array,int length){  fArray=array;  fLength=length;}  }
class C{  public PagerImplementor(PagerView view){  this.view=view;}  }
class C{  public static void unzipArchive(File archive,File outputDir) throws IOException {  ZipFile zipfile=new ZipFile(archive);  for (Enumeration<? extends ZipEntry> e=zipfile.entries(); e.hasMoreElements(); ) {    ZipEntry entry=e.nextElement();    unzipEntry(zipfile,entry,outputDir);  }}  }
class C{  private void saveMembershipMatrix(final double[][] matrix){  for (int i=0; i < points.size(); i++) {    System.arraycopy(membershipMatrix[i],0,matrix[i],0,clusters.size());  }}  }
class C{  private Set<String> toAccountNameSet(Account[] accountList){  Set<String> actualAccounts=new HashSet<String>(accountList.length);  for (  Account account : accountList) {    actualAccounts.add(account.name);  }  return actualAccounts;}  }
class C{  @Override protected void readImpl(){  name=readS();  message=readS();}  }
class C{  public boolean removeEdge(Edge e){  if (!edges.remove(e))   return false;  srcMap.remove(e.getSrc(),e);  tgtMap.remove(e.getTgt(),e);  unitMap.remove(e.srcUnit(),e);  return true;}  }
class C{  public FileAlterationMonitor(long interval,FileAlterationObserver... observers){  this(interval);  if (observers != null) {    for (    FileAlterationObserver observer : observers) {      addObserver(observer);    }  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static ShortBuffer clone(ShortBuffer buf){  if (buf == null) {    return null;  }  buf.rewind();  ShortBuffer copy;  if (buf.isDirect()) {    copy=createShortBuffer(buf.limit());  } else {    copy=ShortBuffer.allocate(buf.limit());  }  copy.put(buf);  return copy;}  }
class C{  @Override public void clear(){  mItems.clear();  notifyIfNeed();}  }
class C{  static boolean isSameColumn(ConstraintWidget a,ConstraintWidget b){  return Math.max(a.getX(),b.getX()) < Math.min(a.getX() + a.getWidth(),b.getX() + b.getWidth());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_FRIENDLY_ATTACK(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1240000,value0,num2,value1);}  }
class C{  protected TreeItem<WeakRef<Node>> insertWeakRefIntoMap(WeakRef<Node> weakRef){  TreeItem<WeakRef<Node>> child=new TreeItem<WeakRef<Node>>(weakRef);  map.put(weakRef,child);  return child;}  }
class C{  public long duration(){  return System.currentTimeMillis() - t;}  }
class C{  public void validateData(List<BlogPostEntity> blogPostEntities){  if (blogPostEntities == null) {    throw new IllegalArgumentException("The list cannot be null");  }}  }
class C{  public void requestInclusionStop(){  stopInclusionTimer();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public FloatingPointType fullCopy(){  FloatingPointType tree=(FloatingPointType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Sequence(){  this(INITIAL_VALUE);}  }
class C{  public AdsGetAdsTargetingQuery limit(Integer value){  return unsafeParam("limit",value);}  }
class C{  private float[] loadBitmapData(Bitmap bitmap){  final int[] pixels=new int[width * height];  bitmap.getPixels(pixels,0,width,0,0,width,height);  bitmap.recycle();  final float[] heightmapVertices=new float[width * height * TOTAL_COMPONENT_COUNT];  int offset=0;  for (int row=0; row < height; row++) {    for (int col=0; col < width; col++) {      final Point point=getPoint(pixels,row,col);      heightmapVertices[offset++]=point.x;      heightmapVertices[offset++]=point.y;      heightmapVertices[offset++]=point.z;      final Point top=getPoint(pixels,row - 1,col);      final Point left=getPoint(pixels,row,col - 1);      final Point right=getPoint(pixels,row,col + 1);      final Point bottom=getPoint(pixels,row + 1,col);      final Vector rightToLeft=Geometry.vectorBetween(right,left);      final Vector topToBottom=Geometry.vectorBetween(top,bottom);      final Vector normal=rightToLeft.crossProduct(topToBottom).normalize();      heightmapVertices[offset++]=normal.x;      heightmapVertices[offset++]=normal.y;      heightmapVertices[offset++]=normal.z;    }  }  return heightmapVertices;}  }
class C{  public void animate(){  cleanupExistingAnimation();  attachConfettiViewToParent();  addNewConfetti(numInitialCount,0);  startNewAnimation();}  }
class C{  protected MarketGetByIdQuery itemIds(String... value){  return unsafeParam("item_ids",value);}  }
class C{  @Override public void onMapReady(GoogleMap googleMap){  mMap=googleMap;  LatLng sydney=new LatLng(-34,151);  mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));  mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public LikesIsLikedQuery(VkApiClient client,UserActor actor,LikesType type,int itemId){  super(client,"likes.isLiked",IsLikedResponse.class);  accessToken(actor.getAccessToken());  type(type);  itemId(itemId);}  }
class C{  @Override public boolean contains(short item){  for (int i=0; i < fLength; i++) {    if (fArray[i] == item) {      return true;    }  }  return false;}  }
class C{  public boolean isRasterSymbol(){  Style style=getStyle();  if (style != null) {    for (    FeatureTypeStyle fts : style.featureTypeStyles()) {      for (      Rule rule : fts.rules()) {        for (        Symbolizer symbolizer : rule.symbolizers()) {          if (symbolizer instanceof RasterSymbolizer) {            return true;          }        }      }    }  }  return false;}  }
class C{  public boolean isSatisfied(Record rec){  for (  Term t : terms)   if (!t.isSatisfied(rec))   return false;  return true;}  }
class C{  public void updateModel(NlModel model,boolean preserveXmlTags){  assertThat(model).isNotNull();  name("linear2.xml");  NlModel newModel=preserveXmlTags ? model : build();  model.updateHierarchy(newModel.getFile().getRootTag(),buildViewInfos(newModel));  for (  NlComponent component : newModel.getComponents()) {    checkStructure(component);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200823,skillcaster,num0,skillname);}  }
class C{  public GSObjectMessageImpl() throws JMSException {  super();}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  @Override public void onWebsocketHandshakeSentAsClient(WebSocket conn,ClientHandshake request) throws InvalidDataException {}  }
class C{  public RombergIntegrator(final double relativeAccuracy,final double absoluteAccuracy,final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  super(relativeAccuracy,absoluteAccuracy,minimalIterationCount,maximalIterationCount);  if (maximalIterationCount > ROMBERG_MAX_ITERATIONS_COUNT) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,maximalIterationCount,ROMBERG_MAX_ITERATIONS_COUNT);  }}  }
class C{  private static int parseNotificationId(String id){  try {    return Integer.parseInt(id);  } catch (  NumberFormatException nfe) {    Log.w(TAG,"Exception while parsing download id:" + id);    return -1;  }}  }
class C{  private List<DataQueryParams> groupByDataType(DataQueryParams params){  List<DataQueryParams> queries=new ArrayList<>();  if (!params.getDataElements().isEmpty()) {    ListMap<DataType,DimensionalItemObject> dataTypeDataElementMap=QueryPlannerUtils.getDataTypeDataElementMap(params.getDataElements());    for (    DataType dataType : dataTypeDataElementMap.keySet()) {      DataQueryParams query=DataQueryParams.newBuilder(params).withDataElements(dataTypeDataElementMap.get(dataType)).withDataType(dataType).build();      queries.add(query);    }  } else {    DataQueryParams query=DataQueryParams.newBuilder(params).withDataType(DataType.NUMERIC).build();    queries.add(query);  }  if (queries.size() > 1) {    log.debug("Split on data type: " + queries.size());  }  return queries;}  }
class C{  public void lockUserInput(){  locked=true;  statusbar.setText1("");  statusbar.setText2("Busy...");  frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  getCommandManager().setEnableCritical(false);  searchManager.getFindDialogAsToolBar().setEnableCritical(false);  samplesSpreadSheet.lockUserInput();}  }
class C{  static void applyLowPassFilter(float[] input,float[] output,float[] gravity,float alpha){  gravity[0]=alpha * gravity[0] + (1 - alpha) * input[0];  gravity[1]=alpha * gravity[1] + (1 - alpha) * input[1];  gravity[2]=alpha * gravity[2] + (1 - alpha) * input[2];  output[0]=input[0] - gravity[0];  output[1]=input[1] - gravity[1];  output[2]=input[2] - gravity[2];}  }
class C{  public WithinExtended(){  super(null,null);}  }
class C{  public SimpleFileFilter(String ext,String desc,Object data){  addExtension(ext);  this.desc=desc;  this.data=data;}  }
class C{  private short[] createIndexData(){  final short[] indexData=new short[numElements];  int offset=0;  for (int row=0; row < height - 1; row++) {    for (int col=0; col < width - 1; col++) {      short topLeftIndexNum=(short)(row * width + col);      short topRightIndexNum=(short)(row * width + col + 1);      short bottomLeftIndexNum=(short)((row + 1) * width + col);      short bottomRightIndexNum=(short)((row + 1) * width + col + 1);      indexData[offset++]=topLeftIndexNum;      indexData[offset++]=bottomLeftIndexNum;      indexData[offset++]=topRightIndexNum;      indexData[offset++]=topRightIndexNum;      indexData[offset++]=bottomLeftIndexNum;      indexData[offset++]=bottomRightIndexNum;    }  }  return indexData;}  }
class C{  public void outputData(){  System.out.println("The res:");  System.out.print("odata:0:  ");  System.out.println(odata.get(0));  System.out.print("odata:1:  ");  System.out.println(odata.get(1));}  }
class C{  public ClusterConfigurationException(){  super();}  }
class C{  @Override public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {}  }
class C{  private boolean isDeprecated(PhpClass clazz){  PhpPsiElement classDoc=clazz.getPrevPsiSibling();  if (!(classDoc instanceof PhpDocCommentImpl)) {    return false;  }  Collection<PhpDocTagImpl> tags=PsiTreeUtil.findChildrenOfType(classDoc,PhpDocTagImpl.class);  if (tags.size() > 0) {    for (    PhpDocTagImpl subject : tags) {      if (subject.getName().equals("@deprecated")) {        tags.clear();        return true;      }    }    tags.clear();  }  return false;}  }
class C{  public boolean waitFor(long timeout) throws InterruptedException {  return Executor.waitFor(getProcess(),timeout);}  }
class C{  public Builder filter(Filter filter){  actionList.add(new DataAction(filter));  return this;}  }
class C{  private void addRemovedDashboards(List<String> ids,List<Dashboard> dashboards){  if (Preconditions.NOT_EMPTY_COLLECTION.test(ids) && Preconditions.NOT_EMPTY_COLLECTION.test(dashboards)) {    Set<String> dashHashSet=dashboards.stream().map(null).collect(Collectors.toSet());    List<Dashboard> additionalDashboards=ids.stream().filter(null).map(null).collect(Collectors.toList());    dashboards.addAll(additionalDashboards);  }}  }
class C{  public GaussWindow(int length,double sigma,double prescalingFactor){  window=new double[length];  this.sigma=sigma;  this.sigmasquare=sigma * sigma;  this.prescalingFactor=prescalingFactor;  initialise();}  }
class C{  @Pollable(async=true,message="Start copying all translations with MD5 match between repository") public PollableFuture copyAllTranslationsWithMD5MatchBetweenRepositories(Repository source,Repository target){  logger.debug("Get TmTextUnit that must be processed");  List<TMTextUnit> tmTextUnits=tmTextUnitRepository.findByTm_id(target.getTm().getId());  leveragerByMd5.performLeveragingFor(tmTextUnits,source.getTm().getId());  return new PollableFutureTaskResult();}  }
class C{  public Set<String> tables(){  return tables;}  }
class C{  public RequestParams(final String key,final String value){  this(new HashMap<String,String>(){{      put(key,value);    }  });}  }
class C{  public static void moveClass(IDexUnit unit,String packagePath,long itemId){  String processedPath=packagePath.substring(1,packagePath.length() - 1).replace("/",".");  ActionMoveToPackageData data=new ActionMoveToPackageData();  data.setDstPackageFqname(processedPath);  ActionContext action=new ActionContext(unit,Actions.MOVE_TO_PACKAGE,itemId,null);  if (unit.prepareExecution(action,data)) {    unit.executeAction(action,data,false);  }}  }
class C{  @RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) public static boolean makeDirs(String path){  return makeDirs(new File(path));}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set drawer=" + ViewerBase.DiagramType.RoundedCladogram + ";");}  }
class C{  private static Reader internalGetContentReader(IPackageFragment fragment) throws JavaModelException {  IPackageFragmentRoot root=(IPackageFragmentRoot)fragment.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);  boolean isBinary=root.getKind() == IPackageFragmentRoot.K_BINARY;  ITypeRoot packageInfo;  if (isBinary) {    packageInfo=fragment.getClassFile(PACKAGE_INFO_CLASS);  } else {    packageInfo=fragment.getCompilationUnit(PACKAGE_INFO_JAVA);  }  if (packageInfo != null && packageInfo.exists()) {    String source=packageInfo.getSource();    if (source != null) {      Javadoc javadocNode=getPackageJavadocNode(fragment,source);      if (javadocNode != null) {        int start=javadocNode.getStartPosition();        int length=javadocNode.getLength();        return new JavaDocCommentReader(source,start,start + length - 1);      }    }  }  return null;}  }
class C{  protected String adjustContentPath(String path){  return isMobile ? path : path.replaceFirst("-mobile","");}  }
class C{  @Override public void connect(){}  }
class C{  public long parseLong(){  ASTNode$State state=state();  try {switch (getKind()) {case HEXADECIMAL:      return parseLongHexadecimal();case OCTAL:    return parseLongOctal();case BINARY:  return parseLongBinary();case DECIMAL:default :return parseLongDecimal();}}  finally {}}  }
class C{  @Override public URI[] locations(){  return new URI[0];}  }
class C{  public void typeCheck(){  boolean pass=true;  for (int i=0; i < getNumTypeAccess(); ++i) {    for (int j=0; j < getNumTypeAccess(); ++j) {      if (i == j)       continue;      TypeDecl t1=getTypeAccess(i).type();      TypeDecl t2=getTypeAccess(j).type();      if (t2.instanceOf(t1)) {        error(t2.fullName() + " is a subclass of " + t1.fullName());        pass=false;      }    }  }}  }
class C{  public boolean hasDeletedSlots(){  long blkNum=(Long)getVal(OFFSET_LDS_BLOCKID,BIGINT).asJavaVal();  return blkNum != NO_SLOT_BLOCKID ? true : false;}  }
class C{  protected void addBounds(NlComponent node,String id,boolean addHorizontal,boolean addVertical,boolean includePadding){  Rectangle b=new Rectangle(node.x,node.y,node.w,node.h);  Insets m=node.getMargins();  Insets p=includePadding ? node.getPadding() : Insets.NONE;  if (addHorizontal) {    if (m.top != 0) {      myHorizontalEdges.add(new Segment(b.y + p.top,b.x + p.left,x2(b) - p.right,node,id,SegmentType.TOP,WITHOUT_MARGIN));      myHorizontalEdges.add(new Segment(b.y - m.top + p.top,b.x + p.left,x2(b) - p.right,node,id,SegmentType.TOP,WITH_MARGIN));    } else {      myHorizontalEdges.add(new Segment(b.y + p.top,b.x + p.left,x2(b) - p.right,node,id,SegmentType.TOP,NO_MARGIN));    }    if (m.bottom != 0) {      myHorizontalEdges.add(new Segment(y2(b) - p.bottom,b.x + p.left,x2(b) - p.right,node,id,SegmentType.BOTTOM,WITHOUT_MARGIN));      myHorizontalEdges.add(new Segment(y2(b) + m.bottom - p.bottom,b.x + p.left,x2(b) - p.right,node,id,SegmentType.BOTTOM,WITH_MARGIN));    } else {      myHorizontalEdges.add(new Segment(y2(b) - p.bottom,b.x + p.left,x2(b) - p.right,node,id,SegmentType.BOTTOM,NO_MARGIN));    }  }  if (addVertical) {    if (m.left != 0) {      myVerticalEdges.add(new Segment(b.x + p.left,b.y + p.top,y2(b) - p.bottom,node,id,SegmentType.LEFT,WITHOUT_MARGIN));      myVerticalEdges.add(new Segment(b.x - m.left + p.left,b.y + p.top,y2(b) - p.bottom,node,id,SegmentType.LEFT,WITH_MARGIN));    } else {      myVerticalEdges.add(new Segment(b.x + p.left,b.y + p.top,y2(b) - p.bottom,node,id,SegmentType.LEFT,NO_MARGIN));    }    if (m.right != 0) {      myVerticalEdges.add(new Segment(x2(b) - p.right,b.y + p.top,y2(b) - p.bottom,node,id,SegmentType.RIGHT,WITHOUT_MARGIN));      myVerticalEdges.add(new Segment(x2(b) + m.right - p.right,b.y + p.top,y2(b) - p.bottom,node,id,SegmentType.RIGHT,WITH_MARGIN));    } else {      myVerticalEdges.add(new Segment(x2(b) - p.right,b.y + p.top,y2(b) - p.bottom,node,id,SegmentType.RIGHT,NO_MARGIN));    }  }}  }
class C{  private void initPrimaryOnlyComponents() throws SpaceComponentsInitializeException {  for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {    ISpaceComponentsHandler handler=iterator.next();    handler.initComponents(true);  }}  }
class C{  public void showOverlapGraph(Director dir,ProgressListener progress) throws CanceledException {  final OverlapGraphViewer overlapGraphViewer=new OverlapGraphViewer(dir,overlapGraph,node2ReadNameMap,paths);  overlapGraphViewer.apply(progress);}  }
class C{  public boolean isApplicable(){  ParametersDialog viewer=(ParametersDialog)getParent();  return viewer != null;}  }
class C{  int[] decodeEnd(BitArray row) throws NotFoundException {  row.reverse();  try {    int endStart=skipWhiteSpace(row);    int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);    validateQuietZone(row,endPattern[0]);    int temp=endPattern[0];    endPattern[0]=row.getSize() - endPattern[1];    endPattern[1]=row.getSize() - temp;    return endPattern;  }  finally {    row.reverse();  }}  }
class C{  public static final ReconciliationBlock create(Reconciler reconciler){  return new ReconciliationBlock(reconciler);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcDPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201235,skilltarget,num0,skillname);}  }
class C{  public static final void drawArc(GL2 gl,double cx,double cy,double r,double sa,double aa){  double t;  double x=r;  double y=0;  t=x;  x=Math.cos(sa) * x - Math.sin(sa) * y;  y=Math.sin(sa) * t + Math.cos(sa) * y;  double sign=Math.signum(aa);  double cos=COS;  double sin=sign >= 0 ? SIN : -SIN;  gl.glBegin(GL.GL_LINE_STRIP);  for (int i=0; i < N; i++) {    gl.glVertex2d(x + cx,y + cy);    t=x;    x=cos * x - sin * y;    y=sin * t + cos * y;    if (Math.abs(cos * i) >= Math.abs(aa))     break;  }  gl.glEnd();}  }
class C{  public static final void sort(float[] a,int[] b){  mergesort(a,b,0,a.length - 1);}  }
class C{  public static int hash32(final String text){  final byte[] bytes=text.getBytes();  return hash32(bytes,bytes.length);}  }
class C{  public AdsDeleteCampaignsQuery(VkApiClient client,UserActor actor,int accountId,String ids){  super(client,"ads.deleteCampaigns",Integer.class);  accessToken(actor.getAccessToken());  accountId(accountId);  ids(ids);}  }
class C{  public static Block registerBlock(Block block,@Nullable Item item){  block.setUnlocalizedName("bwm" + block.getRegistryName().toString().substring(BWMod.MODID.length()));  Block registeredBlock=GameRegistry.register(block);  if (item != null)   GameRegistry.register(item.setRegistryName(block.getRegistryName()));  return registeredBlock;}  }
class C{  void scale(double s){  Matrix3D tmp=new Matrix3D();  tmp.set(0,0,s);  tmp.set(1,1,s);  tmp.set(2,2,s);  preMultiply(tmp);}  }
class C{  @Override public ImageWritable transform(ImageWritable image,Random random){  if (image == null) {    return null;  }  Mat mat=(Mat)converter.convert(image.getFrame());  Mat result=new Mat();  try {    if (conversionCode == CV_BGR2GRAY) {      equalizeHist(mat,result);    } else     if (conversionCode == CV_BGR2YCrCb || conversionCode == COLOR_BGR2Luv) {      split(mat,splitChannels);      equalizeHist(splitChannels.get(0),splitChannels.get(0));      merge(splitChannels,result);    }  } catch (  Exception e) {    throw new RuntimeException(e);  }  return new ImageWritable(converter.convert(result));}  }
class C{  public SimpleMqttConnection(final ReconnectionManager reconnectionManager,final String id,final MqttConnectionDetails connectionDetails) throws ConfigurationException {  super(reconnectionManager,new MqttConnectionDetailsWithOptions(id,connectionDetails));}  }
class C{  public JFileChooserTest(){  initComponents();  jMenu1.setEnabled(isEnable);}  }
class C{  @Override public String toString(){  return this.years + ":" + this.months+ ":"+ this.days+ ":"+ this.hours+ ":"+ this.minutes+ ":"+ this.seconds+ ":"+ this.milliseconds;}  }
class C{  public void cancel(){  if (audioMetrics) {    timer.start("audioCancel");  }  if (currentClip != null) {    currentClip.stop();    currentClip.close();  }synchronized (this) {    cancelled=true;    paused=false;    notifyAll();  }  if (audioMetrics) {    timer.stop("audioCancel");    timer.getTimer("audioCancel").showTimesShortTitle("");    timer.getTimer("audioCancel").showTimesShort(0);  }}  }
class C{  public void removeSubscription(final String topic){synchronized (subscriptionControllers) {    logger.debug("Trying to remove subscription {}",topic);    final MqttSubscription subscription=subscriptionControllers.get(topic).getSubscription();    subscription.getConnection().unsubscribeAndRemove(subscription);    subscription.getStore().cleanUp();    subscriptionControllers.get(topic).onClose();    TabUtils.requestClose(subscriptionControllers.get(topic).getTab());    subscriptionControllers.remove(topic);  }}  }
class C{  public String highlightLine(String line,List<String> matchTerms){  List<String> terms=matchTerms.stream().filter(null).map(null).collect(Collectors.toList());  List<String> tokens=Arrays.asList(line.split(" "));  List<String> returnList=new ArrayList<>();  for (  String token : tokens) {    String longestTerm="";    for (    String term : terms) {      if (term.replace(")","").endsWith("*")) {        if (token.toLowerCase().contains(term.replace(")","").replace("*",""))) {          if (term.length() > longestTerm.length()) {            longestTerm=term;          }        }      } else {        if (token.toLowerCase().contains(term)) {          if (term.length() > longestTerm.length()) {            longestTerm=term;          }        }      }    }    if (!"".equals(longestTerm)) {      if (longestTerm.replace(")","").endsWith("*")) {        int loc=token.toLowerCase().indexOf(longestTerm.replace(")","").replace("*",""));        returnList.add(StringEscapeUtils.escapeHtml4(token.substring(0,loc)) + "<strong>" + StringEscapeUtils.escapeHtml4(token.substring(loc,token.length()))+ "</strong>");      } else {        int loc=token.toLowerCase().indexOf(longestTerm);        returnList.add(StringEscapeUtils.escapeHtml4(token.substring(0,loc)) + "<strong>" + StringEscapeUtils.escapeHtml4(token.substring(loc,loc + longestTerm.length()))+ "</strong>"+ this.highlightLine(token.substring(loc + longestTerm.length(),token.length()),matchTerms));      }    } else {      returnList.add(StringEscapeUtils.escapeHtml4(token));    }  }  return StringUtils.join(returnList," ");}  }
class C{  public Object[] validRestrictionOf(String typeName,XSAttributeGroupDecl baseGroup){  Object[] errorArgs=null;  XSAttributeUseImpl attrUse=null;  XSAttributeDecl attrDecl=null;  XSAttributeUseImpl baseAttrUse=null;  XSAttributeDecl baseAttrDecl=null;  for (int i=0; i < fAttrUseNum; i++) {    attrUse=fAttributeUses[i];    attrDecl=attrUse.fAttrDecl;    baseAttrUse=(XSAttributeUseImpl)baseGroup.getAttributeUse(attrDecl.fTargetNamespace,attrDecl.fName);    if (baseAttrUse != null) {      if (baseAttrUse.getRequired() && !attrUse.getRequired()) {        errorArgs=new Object[]{typeName,attrDecl.fName,attrUse.fUse == SchemaSymbols.USE_OPTIONAL ? SchemaSymbols.ATTVAL_OPTIONAL : SchemaSymbols.ATTVAL_PROHIBITED,"derivation-ok-restriction.2.1.1"};        return errorArgs;      }      if (attrUse.fUse == SchemaSymbols.USE_PROHIBITED) {        continue;      }      baseAttrDecl=baseAttrUse.fAttrDecl;      if (!XSConstraints.checkSimpleDerivationOk(attrDecl.fType,baseAttrDecl.fType,baseAttrDecl.fType.getFinal())) {        errorArgs=new Object[]{typeName,attrDecl.fName,attrDecl.fType.getName(),baseAttrDecl.fType.getName(),"derivation-ok-restriction.2.1.2"};        return errorArgs;      }      int baseConsType=baseAttrUse.fConstraintType != XSConstants.VC_NONE ? baseAttrUse.fConstraintType : baseAttrDecl.getConstraintType();      int thisConstType=attrUse.fConstraintType != XSConstants.VC_NONE ? attrUse.fConstraintType : attrDecl.getConstraintType();      if (baseConsType == XSConstants.VC_FIXED) {        if (thisConstType != XSConstants.VC_FIXED) {          errorArgs=new Object[]{typeName,attrDecl.fName,"derivation-ok-restriction.2.1.3.a"};          return errorArgs;        } else {          ValidatedInfo baseFixedValue=(baseAttrUse.fDefault != null ? baseAttrUse.fDefault : baseAttrDecl.fDefault);          ValidatedInfo thisFixedValue=(attrUse.fDefault != null ? attrUse.fDefault : attrDecl.fDefault);          if (!baseFixedValue.actualValue.equals(thisFixedValue.actualValue)) {            errorArgs=new Object[]{typeName,attrDecl.fName,thisFixedValue.stringValue(),baseFixedValue.stringValue(),"derivation-ok-restriction.2.1.3.b"};            return errorArgs;          }        }      }    } else {      if (baseGroup.fAttributeWC == null) {        errorArgs=new Object[]{typeName,attrDecl.fName,"derivation-ok-restriction.2.2.a"};        return errorArgs;      } else       if (!baseGroup.fAttributeWC.allowNamespace(attrDecl.fTargetNamespace)) {        errorArgs=new Object[]{typeName,attrDecl.fName,attrDecl.fTargetNamespace == null ? "" : attrDecl.fTargetNamespace,"derivation-ok-restriction.2.2.b"};        return errorArgs;      }    }  }  for (int i=0; i < baseGroup.fAttrUseNum; i++) {    baseAttrUse=baseGroup.fAttributeUses[i];    if (baseAttrUse.fUse == SchemaSymbols.USE_REQUIRED) {      baseAttrDecl=baseAttrUse.fAttrDecl;      if (getAttributeUse(baseAttrDecl.fTargetNamespace,baseAttrDecl.fName) == null) {        errorArgs=new Object[]{typeName,baseAttrUse.fAttrDecl.fName,"derivation-ok-restriction.3"};        return errorArgs;      }    }  }  if (fAttributeWC != null) {    if (baseGroup.fAttributeWC == null) {      errorArgs=new Object[]{typeName,"derivation-ok-restriction.4.1"};      return errorArgs;    }    if (!fAttributeWC.isSubsetOf(baseGroup.fAttributeWC)) {      errorArgs=new Object[]{typeName,"derivation-ok-restriction.4.2"};      return errorArgs;    }    if (fAttributeWC.weakerProcessContents(baseGroup.fAttributeWC)) {      errorArgs=new Object[]{typeName,fAttributeWC.getProcessContentsAsString(),baseGroup.fAttributeWC.getProcessContentsAsString(),"derivation-ok-restriction.4.3"};      return errorArgs;    }  }  return null;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public final void fallback(final List data) throws DataFallbackException {  if (isFallbackFileEmpty())   fFileController.closeFallbackInputStream();  fFileController.openFallbackOutputStream();  final int size=data.size();  for (int i=0; i != size; i++) {    fFileController.writeLine((IFallback)data.get(i));  }  fFileController.setNumberOfLines(fFileController.getNumberOfLines() + size);}  }
class C{  public void loadData(Table t,String query,String keyField,Object lock,DataSourceWorker.Listener listener){  DataSourceWorker.Entry e=new DataSourceWorker.Entry(this,t,query,keyField,lock,listener);  DataSourceWorker.submit(e);}  }
class C{  public void replaceSymbolizer(Symbolizer newSymbolizer){  if (this.symbolData != null) {    if (this.symbolData.getRule() != null) {      List<Symbolizer> symbolizerList=(List<Symbolizer>)this.symbolData.getRule().symbolizers();      Symbolizer oldSymbolizer=null;      int indexFound=-1;      int index=0;      for (      Symbolizer symbolizer : symbolizerList) {        if (symbolizer == this.symbolData.getSymbolizer()) {          indexFound=index;          oldSymbolizer=symbolizer;          break;        } else {          index++;        }      }      if (indexFound > -1) {        symbolizerList.remove(indexFound);        symbolizerList.add(indexFound,newSymbolizer);        setSymbolizer(newSymbolizer);      }      for (      SLDTreeUpdatedInterface listener : treeUpdateListenerList) {        listener.updateNode(oldSymbolizer,newSymbolizer);      }    }  }}  }
class C{  public Object[] copyAll(){  return Arrays.copyOf(args,args.length);}  }
class C{  public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){  activeMatchesForClassification.clear();  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);    }  }  float bestScore=0;  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);    float score=matchBlock.getBitScore();    if (score > bestScore)     bestScore=score;  }  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);}  }
class C{  @Override public String toString(){  return "DummyFreeTTSVoice";}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FORCE_LOOTING_CHANGED_RULE(String value0,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1390251,value0,value1,value2);}  }
class C{  @Override public Plan createPlan(QueryData data,Transaction tx){  List<Plan> plans=new ArrayList<Plan>();  for (  String tblname : data.tables()) {    String viewdef=VanillaDb.catalogMgr().getViewDef(tblname,tx);    if (viewdef != null)     plans.add(VanillaDb.newPlanner().createQueryPlan(viewdef,tx)); else     plans.add(new TablePlan(tblname,tx));  }  Plan p=plans.remove(0);  for (  Plan nextplan : plans)   p=new ProductPlan(p,nextplan);  p=new SelectPlan(p,data.pred());  if (data.groupFields() != null) {    p=new GroupByPlan(p,data.groupFields(),data.aggregationFn(),tx);  }  p=new ProjectPlan(p,data.projectFields());  if (data.sortFields() != null)   p=new SortPlan(p,data.sortFields(),data.sortDirections(),tx);  if (data.isExplain())   p=new ExplainPlan(p);  return p;}  }
class C{  public BucketCreateEvent(UserInfo user,ExperimentBase experiment,Bucket bucket){  super(user);  if (experiment == null) {    throw new IllegalArgumentException("Experiment must not be null!");  }  if (bucket == null) {    throw new IllegalArgumentException("Bucket must not be null!");  }  this.experiment=experiment;  this.bucket=bucket;  this.appName=experiment.getApplicationName();}  }
class C{  public final void propagate(){  final OnFlyCallGraph ofcg=pag.getOnFlyCallGraph();  new TopoSorter(pag,false).sort();  for (  Object object : pag.allocSources()) {    handleAllocNode((AllocNode)object);  }  int iteration=1;  boolean change;  do {    change=false;    TreeSet<Object> simpleSources=new TreeSet<Object>(pag.simpleSources());    if (pag.getOpts().verbose()) {      G.v().out.println("Iteration " + (iteration++));    }    for (    Object object : simpleSources) {      change=handleSimples((VarNode)object) | change;    }    if (ofcg != null) {      QueueReader<Node> addedEdges=pag.edgeReader();      for (      VarNode src : pag.getVarNodeNumberer()) {        ofcg.updatedNode(src);      }      ofcg.build();      while (addedEdges.hasNext()) {        Node addedSrc=(Node)addedEdges.next();        Node addedTgt=(Node)addedEdges.next();        change=true;        if (addedSrc instanceof VarNode) {          PointsToSetInternal p2set=((VarNode)addedSrc).getP2Set();          if (p2set != null)           p2set.unFlushNew();        } else         if (addedSrc instanceof AllocNode) {          ((VarNode)addedTgt).makeP2Set().add(addedSrc);        }      }      if (change) {        new TopoSorter(pag,false).sort();      }    }    for (    Object object : pag.loadSources()) {      change=handleLoads((FieldRefNode)object) | change;    }    for (    Object object : pag.storeSources()) {      change=handleStores((VarNode)object) | change;    }  } while (change);}  }
class C{  private Map<String,List<ChartObject>> transformNamesForUI(Map<String,List<ChartObject>> input){  for (  Map.Entry<String,List<ChartObject>> entry : input.entrySet()) {    for (    ChartObject exist : entry.getValue()) {      Map<String,String> values=new HashMap<>();      for (      String key : exist.getValues().keySet()) {        String keyValue=exist.getValues().get(key);        values.put(key.replaceAll("\\.","\\$"),keyValue);      }      exist.setValues(values);    }  }  return input;}  }
class C{  private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){  drawPaint.setStyle(Paint.Style.FILL);  float strokeRadius=radius + mRadiusStrokeWidth;  drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint);  drawPaint.setXfermode(null);  final int halfBitmapWidth=bitmap.getWidth() / 2;  final int halfBitmapHeight=bitmap.getHeight() / 2;  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);  Matrix shaderMatrix=new Matrix();  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();  float scale=radius * 2 / minSize;  shaderMatrix.setScale(scale,scale);  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));  bitmapShader.setLocalMatrix(shaderMatrix);  drawPaint.setShader(bitmapShader);  canvas.drawCircle(centerX,centerY,radius,drawPaint);  drawPaint.setShader(null);}  }
class C{  public Layout(){  super();}  }
class C{  public static boolean isPowerOfTwo(int number){  return (number > 0) && (number & (number - 1)) == 0;}  }
class C{  public void init(Tailer tailer){}  }
class C{  public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof EntryClass))   return false;  EntryClass t=(EntryClass)o;  return hash == t.hash;}  }
class C{  public static ContextSet fromMap(Map<String,String> map){  if (map == null) {    throw new NullPointerException("map");  }  MutableContextSet set=new MutableContextSet();  set.addAll(map);  return set.immutableCopy();}  }
class C{  public static byte[] translate(byte[] sequence,byte[] alphabet,int offset,int length){  byte[] result=new byte[length];  for (int i=0; i < length; i++)   result[i]=alphabet[sequence[i + offset]];  return result;}  }
class C{  @Override public EntryCreatedRS startChildItem(StartTestItemRQ rq,String parent){  TestItem parentItem=testItemRepository.findOne(parent);  validate(parentItem,parent);  validate(rq,parentItem);  TestItem item=testItemBuilder.get().addStartItemRequest(rq).addParent(parentItem).addPath(parentItem).addStatus(Status.IN_PROGRESS).build();  testItemRepository.save(item);  parentItem.setHasChilds(true);  testItemRepository.save(parentItem);  return new EntryCreatedRS(item.getId());}  }
class C{  public ViewBinder addLinks(int viewId,int mask){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,mask);  return this;}  }
class C{  public static void putUtf(ByteBuffer buf,String s) throws UTFDataFormatException {  ByteBuffer dup=buf.duplicate();  dup.putShort((short)0);  int start=dup.position();  CoderResult cr=utf.newEncoder().encode(CharBuffer.wrap(s),dup,true);  if (cr.isUnderflow()) {    buf.putShort(intToUshort(dup.position() - start));    buf.position(dup.position());  } else   if (cr.isOverflow()) {    throw new BufferOverflowException();  } else {    throw new UTFDataFormatException(cr.toString());  }}  }
class C{  static void addTextChangedListener(TextView textView,TextWatcher watcher){  textView.addTextChangedListener(watcher);}  }
class C{  public void animateX(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200515,skilltarget,skillname);}  }
class C{  public void expressionChanged(Expression expr){  fireExpressionChange();}  }
class C{  @Override public void subscribeByName(String regex,BaseTagListener listener) throws CacheSynchronizationException {  subscribeByName(new HashSet<>(Arrays.asList(new String[]{regex})),listener);}  }
class C{  public static void loadPropsFromFile(Path filePath,FileSystem fs) throws IOException {  if (fs.exists(filePath)) {    try (InputStream stream=fs.open(filePath)){      logger.info("Loading properties file from hdfs'" + filePath.toString() + "'");      loadProperties(stream);    } catch (    IOException e) {      logger.error("Problem loading properties file from hdfs '" + filePath.toString() + "'");      e.printStackTrace();    }  } else {    logger.warn("Properties file does not exist: '" + filePath.toString() + "'");  }}  }
class C{  public Leaves(TreeSpecies species){  this(DEFAULT_TYPE,species,DEFAULT_DECAYABLE);}  }
class C{  public WallDeleteQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public final void seek(final long offset){  try {    bs.seek(offset);  } catch (  IOException e) {    System.err.println("Seek failed" + e);  }}  }
class C{  @Override public String toString(){  return MoreObjects.toStringHelper(this).add("id",getId()).add("roleName",getRoleName()).toString();}  }
class C{  public void notifyItemuseObservers(Item item){  notifyObservers(ObserverType.ITEMUSE,item);}  }
class C{  public TeamsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public final boolean canGetBoolean(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetBoolean());}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public AppendableSequenceAudioInputStream(AudioFormat audioFormat,Collection audioInputStreams){  super(audioFormat,audioInputStreams);}  }
class C{  public ResolvingXMLFilter(XMLReader parent){  super(parent);  catalogResolver=new CatalogResolver(catalogManager);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeTypeBoostSkillLevel_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200846,skillcaster,skillname);}  }
class C{  public WallGetByIdQueryWithExtended fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public AudioGetRecommendationsQuery targetAudio(String value){  return unsafeParam("target_audio",value);}  }
class C{  public void notifyTemplate(NotifyTemplateHolder template,IEntryHolder entry,IEntryHolder oldEntry,NotifyContext notifyContext,Context ctx){  if (executeBeforeNotifyTriggeredFilters(notifyContext,template)) {    RemoteEvent event=oldEntry == null ? template.createRemoteEvent(entry,notifyContext.getNotifyType(),ctx.getOperationID(),_spaceProxy,ctx.isFromReplication()) : template.createRemoteEvent(entry,oldEntry,notifyContext.getNotifyType(),ctx.getOperationID(),_spaceProxy,ctx.isFromReplication());    if (event != null) {      if (template.isGuaranteedNotification())       notifyContext.setGuaranteedNotifications(true);      RemoteEventBusPacket packet=new RemoteEventBusPacket(template,event,_notifyTTL,notifyContext,ctx.isFromReplication());      if (packet.isFromReplication() && !template.isTriggerNotify() && _spaceImpl.isBackup()) {        if (packet.getOperationID() != null)         _backupLog.add(packet);      } else {        _dataEventDispatcherWorkingGroup.enqueueBlocked(packet);      }    }  }}  }
class C{  private Value dereference(SoftReference<DoubleRef<Key,Value>> ref){  if (ref == null)   return null;  DoubleRef<Key,Value> doubleRef=ref.get();  return doubleRef == null ? null : doubleRef.getValue();}  }
class C{  public SimpleTextCategory(String sName){  super();  Dictionary=new Dictionary(sName,30);  Dictionary.AddSubStrings=false;  Dictionary.RemoveSubStrings=false;  DocumentCount=0;  Name=sName;}  }
class C{  public TShortHash(int initialCapacity,float loadFactor,TShortHashingStrategy strategy){  super(initialCapacity,loadFactor);  this._hashingStrategy=strategy;}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Rebirth_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200400,skillname);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void verifyPortMappings(ContainerState containerState,String expectedPortBindings){  Map<String,Object> hostConfig=Utils.fromJson(containerState.attributes.get(DOCKER_CONTAINER_HOST_CONFIG_PROP_NAME),Map.class);  Map<String,List<Map<String,String>>> hostConfigPorts=(Map)hostConfig.get(DOCKER_CONTAINER_PORT_BINDINGS_PROP_NAME);  assertEquals("Unexpected number of port mappings",1,hostConfigPorts.size());  Entry<String,List<Map<String,String>>> entry=hostConfigPorts.entrySet().iterator().next();  DockerPortMapping portMapping=DockerPortMapping.fromMap(entry);  DockerPortMapping expectedPortMapping=DockerPortMapping.fromString(expectedPortBindings);  assertEquals("port mapping host ip",expectedPortMapping.getHostIp(),portMapping.getHostIp());  assertEquals("port mapping container port",expectedPortMapping.getContainerPort(),portMapping.getContainerPort());  assertNotNull("port mapping host port",portMapping.getHostPort());}  }
class C{  public DOMASBuilderImpl(){  super(new XMLGrammarCachingConfiguration());}  }
class C{  public void saveAuxData(Map<String,byte[]> label2data) throws IOException {  final long location=footerSectionRMA6.getStartAuxDataSection();  io=new InputOutputReaderWriter(new File(fileName),READ_WRITE);  io.setLength(location);  io.seek(location);  io.writeInt(label2data.size());  for (  String name : label2data.keySet()) {    io.writeString(name);    byte[] bytes=label2data.get(name);    io.writeInt(bytes.length);    io.write(bytes,0,bytes.length);  }  footerSectionRMA6.setEndAuxDataSection(io.getPosition());  footerSectionRMA6.setStartFooterSection(io.getPosition());  footerSectionRMA6.write(io);  close();}  }
class C{  public float[] evaluate(String inputFileName){  JavaRDD<String> lines=jsc.textFile(inputFileName);  DataFrame dataset=createDataFrame(lines.collect());  return evaluate(dataset);}  }
class C{  protected AdsUpdateCampaignsQuery data(String value){  return unsafeParam("data",value);}  }
class C{  public String process(Item item) throws ProcessException {  int v=Integer.parseInt(item.getFeatures().getString("name"));  if ((v > 0) && (v < 32)) {    return "1";  } else {    return "0";  }}  }
class C{  @Override public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augmentations) throws XNIException {}  }
class C{  public Visualization(){  m_actions=new ActivityMap();  m_renderers=new DefaultRendererFactory();  m_visual=new LinkedHashMap();  m_source=new HashMap();  m_focus=new HashMap();  m_displays=new ArrayList();  addFocusGroup(Visualization.FOCUS_ITEMS,new DefaultTupleSet());  addFocusGroup(Visualization.SELECTED_ITEMS,new DefaultTupleSet());}  }
class C{  public void push(int value){  ensureCapacity(fDepth + 1);  fData[fDepth++]=value;}  }
class C{  @deprecated public SimpleDateFormat(String pattern,DateFormatSymbols formatData,ULocale loc){  this(pattern,(DateFormatSymbols)formatData.clone(),null,null,loc,true,null);}  }
class C{  public void updateSize(int x,int y,int w,int h){  this.x=x;  this.y=y;  this.w=w;  this.h=h;}  }
class C{  public GClassLoader(ClassLoader cl){  parent=cl;}  }
class C{  private String printDFormat(long x){  return printDFormat(Long.toString(x));}  }
class C{  @Override public boolean markSupported(){  return markSupported;}  }
class C{  public DatagramPacket readPacketBlocking(int blockFor) throws IOException {  DatagramPacket dp=new DatagramPacket(new byte[65535],65535);  try {    socket.setSoTimeout(blockFor);    socket.receive(dp);    socket.setSoTimeout(1);    dp.setData(Arrays.copyOf(dp.getData(),dp.getLength()));    return dp;  } catch (  SocketTimeoutException e) {    return null;  }}  }
class C{  ConstrainableServiceLease(Registrar server,ServiceID registrarID,ServiceID serviceID,Uuid leaseID,long expiration,MethodConstraints constraints){  super((Registrar)((RemoteMethodControl)server).setConstraints(ConstrainableProxyUtil.translateConstraints(constraints,methodMappings)),registrarID,serviceID,leaseID,expiration);  this.constraints=constraints;}  }
class C{  protected MessagesGetChatQueryWithFields fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  @Override public void start(String testName){  currentTest.get().setLast(false);  currentTest.set(injector.getInstance(TestInfo.class));  currentTest.get().setLast(true);  currentTest.get().setName(testName);  browserInfo();  testInfoEntries.add(currentTest.get());}  }
class C{  public AemDropdown selectByIndex(int index){  expandDropdown();  List<WebElement> items=bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.cssSelector(ITEMS_LOCATOR)));  items.get(index).click();  return this;}  }
class C{  public ExportPermission(String name,String actions){  super(name,actions);}  }
class C{  protected static LazyNode cStringValue(int index){  return new LazyNode(VALUE_STRING,index);}  }
class C{  @deprecated public static VersionInfo javaVersion(){  if (javaVersion == null) {    String s=System.getProperty("java.version");    char[] chars=s.toCharArray();    int r=0;    int w=0;    int count=0;    boolean numeric=false;    while (r < chars.length) {      char c=chars[(r++)];      if ((c < '0') || (c > '9')) {        if (numeric) {          if (count == 3) {            break;          }          numeric=false;          chars[(w++)]='.';          count++;        }      } else {        numeric=true;        chars[(w++)]=c;      }    }    while ((w > 0) && (chars[(w - 1)] == '.')) {      w--;    }    String vs=new String(chars,0,w);    javaVersion=getInstance(vs);  }  return javaVersion;}  }
class C{  private void populateMultipleIVMatch(IVScanResult ivScanResult){  llMaxIV.setVisibility(View.VISIBLE);  llMinIV.setVisibility(View.VISIBLE);  llSingleMatch.setVisibility(View.GONE);  llMultipleIVMatches.setVisibility(View.VISIBLE);  tvAvgIV.setText(getString(R.string.avg));  if (ivScanResult.tooManyPossibilities) {    resultsCombinations.setText(getString(R.string.too_many_iv_combinations));  } else {    resultsCombinations.setText(String.format(getString(R.string.possible_iv_combinations),ivScanResult.iVCombinations.size()));  }  populateAllIvPossibilities(ivScanResult);}  }
class C{  public Server(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_GUILD_CASTLE_TAKEN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1301037,value0,value1);}  }
class C{  @Override public int update(int scrollAmount){  final int currentScrollPosition=myScrollView.getScrollY();  final int newScrollY=Math.min(myMaxScrollableHeight,Math.max(0,myStartScrollPosition + scrollAmount * myScrollUnitSize));  if (newScrollY == currentScrollPosition) {    return 0;  }  myScrollView.setScrollY(newScrollY);  handleScrolling(myScrollView);  return newScrollY - currentScrollPosition;}  }
class C{  public void onMessage(Message message){  MapMessage mapMessage=null;  if (Debug.verboseOn())   Debug.logVerbose("JMS Message Received --> " + message,module);  if (message instanceof MapMessage) {    mapMessage=(MapMessage)message;  } else {    Debug.logError("Received message is not a MapMessage!",module);    return;  }  runService(mapMessage);}  }
class C{  static public void copyFile(String fileName,String destFileName) throws IOException, FileNotFoundException {  int ch;  BufferedOutputStream bos;  BufferedInputStream bis;  bis=new BufferedInputStream(new FileInputStream(fileName));  bos=new BufferedOutputStream(new FileOutputStream(destFileName));  while ((ch=bis.read()) != -1)   bos.write(ch);  bos.flush();  bos.close();  bis.close();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHate_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200796,skillcaster,value0,skillname);}  }
class C{  public boolean isInitialIfExistSearchActive(){  return _initialIfExistSearchActive;}  }
class C{  public FixedWidthTextTableReader(String location) throws DataIOException {  this(FixedWidthTextTableSchema.load(location));}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  unregisterReceiver(receiver);  mBluetoothAdapter.disable();}  }
class C{  public void restoreInstanceState(Bundle savedInstanceState){  initCallbackService=savedInstanceState.getString("callbackService");  savedPluginState=savedInstanceState.getBundle("plugin");  activityWasDestroyed=true;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  XSParticleDecl traverseAll(Element allDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent){  Object[] attrValues=fAttrChecker.checkAttributes(allDecl,false,schemaDoc);  Element child=DOMUtil.getFirstChildElement(allDecl);  XSAnnotationImpl annotation=null;  if (child != null && DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {    annotation=traverseAnnotationDecl(child,attrValues,false,schemaDoc);    child=DOMUtil.getNextSiblingElement(child);  } else {    String text=DOMUtil.getSyntheticAnnotation(allDecl);    if (text != null) {      annotation=traverseSyntheticAnnotation(allDecl,text,attrValues,false,schemaDoc);    }  }  String childName=null;  XSParticleDecl particle;  fPArray.pushContext();  for (; child != null; child=DOMUtil.getNextSiblingElement(child)) {    particle=null;    childName=DOMUtil.getLocalName(child);    if (childName.equals(SchemaSymbols.ELT_ELEMENT)) {      particle=fSchemaHandler.fElementTraverser.traverseLocal(child,schemaDoc,grammar,PROCESSING_ALL_EL,parent);    } else {      Object[] args={"all","(annotation?, element*)",DOMUtil.getLocalName(child)};      reportSchemaError("s4s-elt-must-match.1",args,child);    }    if (particle != null)     fPArray.addParticle(particle);  }  particle=null;  XInt minAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MINOCCURS];  XInt maxAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MAXOCCURS];  Long defaultVals=(Long)attrValues[XSAttributeChecker.ATTIDX_FROMDEFAULT];  XSModelGroupImpl group=new XSModelGroupImpl();  group.fCompositor=XSModelGroupImpl.MODELGROUP_ALL;  group.fParticleCount=fPArray.getParticleCount();  group.fParticles=fPArray.popContext();  XSObjectList annotations;  if (annotation != null) {    annotations=new XSObjectListImpl();    ((XSObjectListImpl)annotations).addXSObject(annotation);  } else {    annotations=XSObjectListImpl.EMPTY_LIST;  }  group.fAnnotations=annotations;  particle=new XSParticleDecl();  particle.fType=XSParticleDecl.PARTICLE_MODELGROUP;  particle.fMinOccurs=minAtt.intValue();  particle.fMaxOccurs=maxAtt.intValue();  particle.fValue=group;  particle.fAnnotations=annotations;  particle=checkOccurrences(particle,SchemaSymbols.ELT_ALL,(Element)allDecl.getParentNode(),allContextFlags,defaultVals.longValue());  fAttrChecker.returnAttrArray(attrValues,schemaDoc);  return particle;}  }
class C{  public GroupsEditQuery description(String value){  return unsafeParam("description",value);}  }
class C{  private Headers parseResponseHeaders(URI uri,int responseCode,String responseMessage,Map<String,List<String>> responseHeaders){  try {    NoHttp.getDefaultCookieManager().put(uri,responseHeaders);  } catch (  IOException e) {    Logger.e(e,"Save cookie filed: " + uri.toString() + ".");  }  Headers headers=new HttpHeaders();  headers.set(responseHeaders);  headers.set(Headers.HEAD_KEY_RESPONSE_MESSAGE,responseMessage);  headers.set(Headers.HEAD_KEY_RESPONSE_CODE,Integer.toString(responseCode));  for (  String headKey : headers.keySet()) {    List<String> headValues=headers.getValues(headKey);    for (    String headValue : headValues) {      StringBuilder builder=new StringBuilder();      if (!TextUtils.isEmpty(headKey))       builder.append(headKey).append(": ");      if (!TextUtils.isEmpty(headValue))       builder.append(headValue);      Logger.i(builder.toString());    }  }  return headers;}  }
class C{  public grammaticalityEstimator(Set FileNames,int iMinChar,int iMaxChar,int iMinWord,int iMaxWord,int iNeighbourhoodWindow){  iMinCharNGram=iMinChar;  iMaxCharNGram=iMaxChar;  iMinWordNGram=iMinWord;  iMaxWordNGram=iMaxWord;  DistroDocs=new TreeMap<Integer,DistributionDocument>();  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();  StringBuffer sb=new StringBuffer();  Iterator iTexts=FileNames.iterator();  while (iTexts.hasNext()) {    String sFile=(String)iTexts.next();    try {      BufferedReader bf=new BufferedReader(new FileReader(sFile));      String sTmp;      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);      bf.close();    } catch (    FileNotFoundException ex) {      ex.printStackTrace(System.err);    }catch (    IOException ex) {      ex.printStackTrace(System.err);    }    sb.append((char)0);  }  FullTextDataString=sb.toString();  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistroDocs.put(iCnt,new DistributionDocument(iNeighbourhoodWindow,iCnt));  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistroWordDocs.put(iCnt,new DistributionWordDocument(iNeighbourhoodWindow,iCnt));  }}  }
class C{  public AudioGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  private boolean atBinaryOperator(int prec){  if (matchesAnyOf(OPERATOR_PRECEDENCE.get(prec))) {    return true;  }  if (matchesSequence(TokenKind.NOT,TokenKind.IN)) {    return true;  }  return false;}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>startElement (" + element.rawname + ")");  }  if (!fDeferNodeExpansion) {    if (fFilterReject) {      ++fRejectedElementDepth;      return;    }    Element el=createElementNode(element);    int attrCount=attributes.getLength();    boolean seenSchemaDefault=false;    for (int i=0; i < attrCount; i++) {      attributes.getName(i,fAttrQName);      Attr attr=createAttrNode(fAttrQName);      String attrValue=attributes.getValue(i);      AttributePSVI attrPSVI=(AttributePSVI)attributes.getAugmentations(i).getItem(Constants.ATTRIBUTE_PSVI);      if (fStorePSVI && attrPSVI != null) {        ((PSVIAttrNSImpl)attr).setPSVI(attrPSVI);      }      attr.setValue(attrValue);      boolean specified=attributes.isSpecified(i);      if (!specified && (seenSchemaDefault || (fAttrQName.uri != null && fAttrQName.uri != NamespaceContext.XMLNS_URI && fAttrQName.prefix == null))) {        el.setAttributeNodeNS(attr);        seenSchemaDefault=true;      } else {        el.setAttributeNode(attr);      }      if (fDocumentImpl != null) {        AttrImpl attrImpl=(AttrImpl)attr;        Object type=null;        boolean id=false;        if (attrPSVI != null && fNamespaceAware) {          type=attrPSVI.getMemberTypeDefinition();          if (type == null) {            type=attrPSVI.getTypeDefinition();            if (type != null) {              id=((XSSimpleType)type).isIDType();              attrImpl.setType(type);            }          } else {            id=((XSSimpleType)type).isIDType();            attrImpl.setType(type);          }        } else {          boolean isDeclared=Boolean.TRUE.equals(attributes.getAugmentations(i).getItem(Constants.ATTRIBUTE_DECLARED));          if (isDeclared) {            type=attributes.getType(i);            id="ID".equals(type);          }          attrImpl.setType(type);        }        if (id) {          ((ElementImpl)el).setIdAttributeNode(attr,true);        }        attrImpl.setSpecified(specified);      }    }    setCharacterData(false);    if (augs != null) {      ElementPSVI elementPSVI=(ElementPSVI)augs.getItem(Constants.ELEMENT_PSVI);      if (elementPSVI != null && fNamespaceAware) {        XSTypeDefinition type=elementPSVI.getMemberTypeDefinition();        if (type == null) {          type=elementPSVI.getTypeDefinition();        }        ((ElementNSImpl)el).setType(type);      }    }    if (fDOMFilter != null && !fInEntityRef) {      if (fRoot == null) {        fRoot=el;      } else {        short code=fDOMFilter.startElement(el);switch (code) {case LSParserFilter.FILTER_INTERRUPT:{            throw Abort.INSTANCE;          }case LSParserFilter.FILTER_REJECT:{          fFilterReject=true;          fRejectedElementDepth=0;          return;        }case LSParserFilter.FILTER_SKIP:{        fFirstChunk=true;        fSkippedElemStack.push(Boolean.TRUE);        return;      }default :{      if (!fSkippedElemStack.isEmpty()) {        fSkippedElemStack.push(Boolean.FALSE);      }    }}}}fCurrentNode.appendChild(el);fCurrentNode=el;} else {int el=fDeferredDocumentImpl.createDeferredElement(fNamespaceAware ? element.uri : null,element.rawname);Object type=null;int attrCount=attributes.getLength();for (int i=attrCount - 1; i >= 0; --i) {AttributePSVI attrPSVI=(AttributePSVI)attributes.getAugmentations(i).getItem(Constants.ATTRIBUTE_PSVI);boolean id=false;if (attrPSVI != null && fNamespaceAware) {type=attrPSVI.getMemberTypeDefinition();if (type == null) {  type=attrPSVI.getTypeDefinition();  if (type != null) {    id=((XSSimpleType)type).isIDType();  }} else {  id=((XSSimpleType)type).isIDType();}} else {boolean isDeclared=Boolean.TRUE.equals(attributes.getAugmentations(i).getItem(Constants.ATTRIBUTE_DECLARED));if (isDeclared) {  type=attributes.getType(i);  id="ID".equals(type);}}fDeferredDocumentImpl.setDeferredAttribute(el,attributes.getQName(i),attributes.getURI(i),attributes.getValue(i),attributes.isSpecified(i),id,type);}fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,el);fCurrentNodeIndex=el;}}  }
class C{  public static Instances[] splitData(Instances data,Attribute att){  int size=data.numDistinctValues(att);  Instances[] splitData=new Instances[size];  for (int j=0; j < size; j++) {    splitData[j]=new Instances(data,data.numInstances());  }  Enumeration instEnum=data.enumerateInstances();  while (instEnum.hasMoreElements()) {    Instance inst=(Instance)instEnum.nextElement();    splitData[(int)inst.value(att)].add(inst);  }  for (int i=0; i < splitData.length; i++) {    splitData[i].compactify();  }  return splitData;}  }
class C{  public AdsGetAdsLayoutQuery campaignIds(String value){  return unsafeParam("campaign_ids",value);}  }
class C{  public void sync() throws CanceledException {  getChartDrawer().forceUpdate();  seriesList.sync(getChartData().getSeriesNames(),getChartData().getSamplesTooltips(),false);  if (getChartData() instanceof IChartData) {    classesList.sync(((IChartData)getChartData()).getClassNames(),getChartData().getClassesTooltips(),false);    classesList.fireSyncToViewer();  }  attributesList.sync(getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(),null,false);}  }
class C{  protected ResultSet mapResultSet(ResultSet resultSet){  ResultSet mappedResultSet=resultSet;  for (  ResultSetMapper resultSetMapper : getMappers()) {    mappedResultSet=resultSetMapper.map(mappedResultSet);  }  return mappedResultSet;}  }
class C{  public long parseLongOctal(){  ASTNode$State state=state();  try {    long val=0;    if (digits.length() > 21) {      for (int i=0; i < digits.length() - 21; i++)       if (i == digits.length() - 21 - 1) {        if (digits.charAt(i) != '0' && digits.charAt(i) != '1')         throw new NumberFormatException("");      } else {        if (digits.charAt(i) != '0')         throw new NumberFormatException("");      }    }    for (int i=0; i < digits.length(); i++) {      int c=digits.charAt(i) - '0';      val=val * 8 + c;    }    return val;  }  finally {  }}  }
class C{  public Writer render(String templatePath,Map<String,Object> parentContext) throws SurveyWrapperException {  URL templateUrl=null;  try {    templateUrl=FlexibleLocation.resolveLocation(templatePath);  } catch (  MalformedURLException e) {    throw new SurveyWrapperException(e);  }  if (templateUrl == null) {    String errMsg="Problem getting the template for Survey from URL: " + templatePath;    Debug.logError(errMsg,module);    throw new IllegalArgumentException(errMsg);  }  Writer writer=new StringWriter();  this.render(templateUrl,writer,parentContext);  return writer;}  }
class C{  public DruidAggregationQuery<?> buildQuery(DataApiRequest request,TemplateDruidQuery template) throws DimensionRowNotFoundException, NoMatchFoundException {  LOG.trace("Building druid query with DataApiRequest: {} and TemplateDruidQuery: {}",request,template);  LimitSpec druidOrderBy;  TopNMetric druidTopNMetric;  if (request.getTopN().isPresent()) {    if (canOptimizeTopN(request,template)) {      druidOrderBy=null;      OrderByColumn sortBy=request.getSorts().iterator().next();      druidTopNMetric=new TopNMetric(sortBy.getDimension(),sortBy.getDirection());    } else     if (request.getSorts().size() > 0) {      druidOrderBy=new LimitSpec(request.getSorts());      druidTopNMetric=null;    } else {      throw new UnsupportedOperationException(TOP_N_UNSORTED.format(request.getTopN()));    }  } else   if (request.getSorts().isEmpty() && !request.getCount().isPresent()) {    druidOrderBy=null;    druidTopNMetric=null;  } else {    druidOrderBy=new LimitSpec(request.getSorts(),request.getCount());    druidTopNMetric=null;  }  LogicalTable logicalTable=tableDictionary.get(TableIdentifier.create(request));  TableGroup group=logicalTable.getTableGroup();  PhysicalTable table=resolver.resolve(group.getPhysicalTables(),request,template);  return druidTopNMetric != null ? buildTopNQuery(template,table,request.getGranularity(),request.getTimeZone(),request.getDimensions(),request.getFilter(),request.getIntervals(),druidTopNMetric,request.getTopN().getAsInt()) : canOptimizeTimeSeries(request,template) ? buildTimeSeriesQuery(template,table,request.getGranularity(),request.getTimeZone(),request.getFilter(),request.getIntervals()) : buildGroupByQuery(template,table,request.getGranularity(),request.getTimeZone(),request.getDimensions(),request.getFilter(),request.getHaving(),request.getIntervals(),druidOrderBy);}  }
class C{  public boolean renewalsDone(){  return expiration <= endTime;}  }
class C{  public boolean intersects(double x,double y,double w,double h){  if (npoints <= 0 || !bounds.intersects(x,y,w,h)) {    return false;  }  updateComputingPath();  return closedPath.intersects(x,y,w,h);}  }
class C{  public static Box createBox(@NotNull Iterable<Component> components){  Box box=Box.createVerticalBox();  box.setAlignmentX(0);  for (  Component component : components) {    if (component instanceof JComponent) {      ((JComponent)component).setAlignmentX(0);    }    box.add(component);  }  return box;}  }
class C{  public PartialWeakUniqueIndex(String indexName,Extractor[] extractors,int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  this.extractors=extractors;  hashStrategy=ExtractorBasedHashStrategy.create(this.extractors);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  table=new Entry[capacity];  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);}  }
class C{  private void addCandidate(Candidate candidate){  if (candidate == null) {    return;  }  if (candidate.isTerminal) {    result.add(candidate.cell.id());    return;  }  int numLevels=(candidate.cell.level() < minLevel) ? 1 : levelMod;  int numTerminals=expandChildren(candidate,candidate.cell,numLevels);  if (candidate.numChildren == 0) {  } else   if (!interiorCovering && numTerminals == 1 << maxChildrenShift() && candidate.cell.level() >= minLevel) {    candidate.isTerminal=true;    addCandidate(candidate);  } else {    int priority=-((((candidate.cell.level() << maxChildrenShift()) + candidate.numChildren) << maxChildrenShift()) + numTerminals);    candidateQueue.add(new QueueEntry(priority,candidate));  }}  }
class C{  private static boolean isGnome(){  return System.getenv("GNOME_DESKTOP_SESSION_ID") != null;}  }
class C{  public NewsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void stopWatch(){  _time=UNWATCHED;}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  protected void load(Document d){  for (  String name : d.keySet()) {    Object o=d.get(name);    if (o instanceof ObjectId) {      o=((ObjectId)o).toString();    }    this.set(name,o);  }}  }
class C{  public static Map<String,Object> checkInventoryAvailability(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Map<String,Map<String,Timestamp>> ordersToUpdate=FastMap.newInstance();  Map<String,Map<String,Timestamp>> ordersToCancel=FastMap.newInstance();  List<GenericValue> inventoryItems=null;  try {    inventoryItems=EntityQuery.use(delegator).from("InventoryItem").where(EntityCondition.makeCondition("availableToPromiseTotal",EntityOperator.LESS_THAN,BigDecimal.ZERO)).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"Trouble getting inventory items",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveInventoryItem",locale));  }  if (inventoryItems == null) {    Debug.logInfo("No items out of stock; no backorders to worry about",module);    return ServiceUtil.returnSuccess();  }  Debug.logInfo("OOS Inventory Items: " + inventoryItems.size(),module);  for (  GenericValue inventoryItem : inventoryItems) {    List<GenericValue> shipmentAndItems=null;    try {      List<EntityExpr> exprs=new ArrayList<EntityExpr>();      exprs.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,inventoryItem.get("productId")));      exprs.add(EntityCondition.makeCondition("destinationFacilityId",EntityOperator.EQUALS,inventoryItem.get("facilityId")));      exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"SHIPMENT_DELIVERED"));      exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"SHIPMENT_CANCELLED"));      shipmentAndItems=EntityQuery.use(delegator).from("ShipmentAndItem").where(EntityCondition.makeCondition(exprs,EntityOperator.AND)).orderBy("estimatedArrivalDate").queryList();    } catch (    GenericEntityException e) {      Debug.logError(e,"Problem getting ShipmentAndItem records",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveShipmentAndItem",locale));    }    List<GenericValue> reservations=null;    try {      reservations=inventoryItem.getRelated("OrderItemShipGrpInvRes",null,UtilMisc.toList("-reservedDatetime"),false);    } catch (    GenericEntityException e) {      Debug.logError(e,"Problem getting related reservations",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveRelativeReservation",locale));    }    if (reservations == null) {      Debug.logWarning("No outstanding reservations for this inventory item, why is it negative then?",module);      continue;    }    Debug.logInfo("Reservations for item: " + reservations.size(),module);    BigDecimal availableBeforeReserved=inventoryItem.getBigDecimal("availableToPromiseTotal");    for (    GenericValue reservation : reservations) {      String orderId=reservation.getString("orderId");      String orderItemSeqId=reservation.getString("orderItemSeqId");      Timestamp promisedDate=reservation.getTimestamp("promisedDatetime");      Timestamp currentPromiseDate=reservation.getTimestamp("currentPromisedDate");      Timestamp actualPromiseDate=currentPromiseDate;      if (actualPromiseDate == null) {        if (promisedDate != null) {          actualPromiseDate=promisedDate;        } else {          actualPromiseDate=reservation.getTimestamp("reservedDatetime");        }      }      Debug.logInfo("Promised Date: " + actualPromiseDate,module);      Timestamp nextShipDate=null;      BigDecimal availableAtTime=BigDecimal.ZERO;      for (      GenericValue shipmentItem : shipmentAndItems) {        availableAtTime=availableAtTime.add(shipmentItem.getBigDecimal("quantity"));        if (availableAtTime.compareTo(availableBeforeReserved) >= 0) {          nextShipDate=shipmentItem.getTimestamp("estimatedArrivalDate");          break;        }      }      Debug.logInfo("Next Ship Date: " + nextShipDate,module);      Calendar pCal=Calendar.getInstance();      pCal.setTimeInMillis(actualPromiseDate.getTime());      pCal.add(Calendar.DAY_OF_YEAR,-1);      Timestamp modifiedPromisedDate=new Timestamp(pCal.getTimeInMillis());      Timestamp now=UtilDateTime.nowTimestamp();      Debug.logInfo("Promised Date + 1: " + modifiedPromisedDate,module);      Debug.logInfo("Now: " + now,module);      if (nextShipDate == null || nextShipDate.after(actualPromiseDate)) {        if (nextShipDate == null && modifiedPromisedDate.after(now)) {          Debug.logInfo("No ship date known yet, but promised date hasn't approached, assuming it will be here on time",module);        } else {          Debug.logInfo("We won't ship on time, getting notification info",module);          Map<String,Timestamp> notifyItems=ordersToUpdate.get(orderId);          if (notifyItems == null) {            notifyItems=FastMap.newInstance();          }          notifyItems.put(orderItemSeqId,nextShipDate);          ordersToUpdate.put(orderId,notifyItems);          Calendar sCal=Calendar.getInstance();          sCal.setTimeInMillis(actualPromiseDate.getTime());          sCal.add(Calendar.DAY_OF_YEAR,30);          Timestamp farPastPromised=new Timestamp(sCal.getTimeInMillis());          boolean needToCancel=false;          if (nextShipDate == null || nextShipDate.after(farPastPromised)) {            Debug.logInfo("Ship date is >30 past the promised date",module);            needToCancel=true;          } else           if (currentPromiseDate != null && actualPromiseDate.equals(currentPromiseDate)) {            needToCancel=true;          }          if (needToCancel) {            Debug.logInfo("Flagging the item to auto-cancel",module);            Map<String,Timestamp> cancelItems=ordersToCancel.get(orderId);            if (cancelItems == null) {              cancelItems=FastMap.newInstance();            }            cancelItems.put(orderItemSeqId,farPastPromised);            ordersToCancel.put(orderId,cancelItems);          }          try {            reservation.set("currentPromisedDate",nextShipDate);            reservation.store();          } catch (          GenericEntityException e) {            Debug.logError(e,"Problem storing reservation : " + reservation,module);          }        }      }      availableBeforeReserved=availableBeforeReserved.subtract(reservation.getBigDecimal("quantity"));    }  }  List<String> ordersToNotify=FastList.newInstance();  for (  Map.Entry<String,Map<String,Timestamp>> entry : ordersToUpdate.entrySet()) {    String orderId=entry.getKey();    Map<String,Timestamp> backOrderedItems=entry.getValue();    Map<String,Timestamp> cancelItems=ordersToCancel.get(orderId);    boolean cancelAll=false;    Timestamp cancelAllTime=null;    List<GenericValue> orderItemShipGroups=null;    try {      orderItemShipGroups=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId).queryList();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get OrderItemShipGroups from orderId" + orderId,module);    }    for (    GenericValue orderItemShipGroup : orderItemShipGroups) {      List<GenericValue> orderItems=FastList.newInstance();      List<GenericValue> orderItemShipGroupAssoc=null;      try {        orderItemShipGroupAssoc=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where("shipGroupSeqId",orderItemShipGroup.get("shipGroupSeqId"),"orderId",orderId).queryList();        for (        GenericValue assoc : orderItemShipGroupAssoc) {          GenericValue orderItem=assoc.getRelatedOne("OrderItem",false);          if (orderItem != null) {            orderItems.add(orderItem);          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,"Problem fetching OrderItemShipGroupAssoc",module);      }      boolean maySplit=false;      if (orderItemShipGroup != null && orderItemShipGroup.get("maySplit") != null) {        maySplit=orderItemShipGroup.getBoolean("maySplit").booleanValue();      }      if (!maySplit && cancelItems != null) {        cancelAll=true;        Set<String> cancelSet=cancelItems.keySet();        cancelAllTime=cancelItems.get(cancelSet.iterator().next());      }      if (cancelItems == null) {        cancelItems=FastMap.newInstance();      }      if (orderItems != null) {        List<GenericValue> toBeStored=FastList.newInstance();        for (        GenericValue orderItem : orderItems) {          String orderItemSeqId=orderItem.getString("orderItemSeqId");          Timestamp shipDate=backOrderedItems.get(orderItemSeqId);          Timestamp cancelDate=cancelItems.get(orderItemSeqId);          Timestamp currentCancelDate=orderItem.getTimestamp("autoCancelDate");          Debug.logInfo("OI: " + orderId + " SEQID: "+ orderItemSeqId+ " cancelAll: "+ cancelAll+ " cancelDate: "+ cancelDate,module);          if (backOrderedItems.containsKey(orderItemSeqId)) {            orderItem.set("estimatedShipDate",shipDate);            if (currentCancelDate == null) {              if (cancelAll || cancelDate != null) {                if (orderItem.get("dontCancelSetUserLogin") == null && orderItem.get("dontCancelSetDate") == null) {                  if (cancelAllTime != null) {                    orderItem.set("autoCancelDate",cancelAllTime);                  } else {                    orderItem.set("autoCancelDate",cancelDate);                  }                }              }              ordersToNotify.add(orderId);            }            toBeStored.add(orderItem);          }        }        if (toBeStored.size() > 0) {          try {            delegator.storeAll(toBeStored);          } catch (          GenericEntityException e) {            Debug.logError(e,"Problem storing order items",module);          }        }      }    }  }  for (  String orderId : ordersToNotify) {    try {      dispatcher.runAsync("sendOrderBackorderNotification",UtilMisc.<String,Object>toMap("orderId",orderId,"userLogin",userLogin));    } catch (    GenericServiceException e) {      Debug.logError(e,"Problems sending off the notification",module);      continue;    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public TIntArrayList(int[] values){  this(Math.max(values.length,DEFAULT_CAPACITY));  add(values);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set useColors=" + (!isSelected()) + ";");}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public LocateOptions build(){  LocateOptions options=new LocateOptions();  options.watch=this.watch;  options.setView=this.setView;  options.maxZoom=this.maxZoom;  options.timeout=this.timeout;  options.maximumAge=this.maximumAge;  options.enableHighAccuracy=this.enableHighAccuracy;  return options;}  }
class C{  public void identifyNode(int nodeId){  enqueue(new IdentifyNodeMessageClass().doRequest(nodeId));}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set show-insertions=" + !isSelected() + ";apply;");}  }
class C{  public void post(Object event){  mBusSubject.onNext(event);}  }
class C{  public void flushUpdate(){  for (int i=0; i < numberOfQueues; i++) {    if (!dbUpdateLists[i].isEmpty()) {      this.submitTaskToQueue(this.createUpdateTask(dbUpdateLists[i],fileUpdateLists[i]),i,processedUpdates);      this.dbUpdateLists[i]=new ArrayList(batchSize);      this.fileUpdateLists[i]=new ArrayList(batchSize);      this.updatesQueued++;    }  }}  }
class C{  protected OrdersGetAmountQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public static int write(Sequence in,int type,File out) throws IOException {  List providers=getMidiFileWriters();  int bytesWritten=-2;  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(type,in)) {      bytesWritten=writer.write(in,type,out);      break;    }  }  if (bytesWritten == -2) {    throw new IllegalArgumentException("MIDI file type is not supported");  }  return bytesWritten;}  }
class C{  public final boolean canSetInt(String field){  return m_table.canSetInt(field);}  }
class C{  public ZWaveProtectionCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public NewtonRaphsonSolver(double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  public static void cleanExternalCache(Context context){  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))   deleteFilesByDirectory(context.getExternalCacheDir());}  }
class C{  public FriendsGetOnlineQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  private void stopStateTag(final Long stateTagId,final Timestamp pTimestamp,final String message){  controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.DOWN.toString(),message,pTimestamp);}  }
class C{  public Response doPut(String url){  return doPut(url,null);}  }
class C{  private void initModel(){  AuthManager.reBuild().addOnWriteDataListener(this);  this.fragmentManageModel=new FragmentManageObject();  this.drawerModel=new DrawerObject();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set layout=" + AlignmentViewer.AlignmentLayout.Unsorted.toString() + ";zoom axis=both what=fit;");}  }
class C{  public PSVIDocumentImpl(DocumentType doctype){  super(doctype);}  }
class C{  public PrintfFormat(Locale locale,String fmtArg) throws IllegalArgumentException {  dfs=new DecimalFormatSymbols(locale);  int ePos=0;  ConversionSpecification sFmt=null;  String unCS=this.nonControl(fmtArg,0);  if (unCS != null) {    sFmt=new ConversionSpecification();    sFmt.setLiteral(unCS);    vFmt.addElement(sFmt);  }  while (cPos != -1 && cPos < fmtArg.length()) {    for (ePos=cPos + 1; ePos < fmtArg.length(); ePos++) {      char c=0;      c=fmtArg.charAt(ePos);      if (c == 'i')       break;      if (c == 'd')       break;      if (c == 'f')       break;      if (c == 'g')       break;      if (c == 'G')       break;      if (c == 'o')       break;      if (c == 'x')       break;      if (c == 'X')       break;      if (c == 'e')       break;      if (c == 'E')       break;      if (c == 'c')       break;      if (c == 's')       break;      if (c == '%')       break;    }    ePos=Math.min(ePos + 1,fmtArg.length());    sFmt=new ConversionSpecification(fmtArg.substring(cPos,ePos));    vFmt.addElement(sFmt);    unCS=this.nonControl(fmtArg,ePos);    if (unCS != null) {      sFmt=new ConversionSpecification();      sFmt.setLiteral(unCS);      vFmt.addElement(sFmt);    }  }}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  _writeExternal(out);}  }
class C{  public K key(){  return (K)_map._set[_index];}  }
class C{  private void insertEntry(Entry e,long now){  e.calcRenew(now);  leases.put(e,e);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public Simulation(Camera camera,List<SandboxRay> rays,World world){  this.camera=camera;  this.rays=rays;  this.world=world;  this.contactCounter=new ContactCounter();  this.world.addListener(this.contactCounter);}  }
class C{  public LifoSet(int capacity){  maxCapacity=capacity;}  }
class C{  public LinearConstraint(final RealVector lhsCoefficients,final double lhsConstant,final Relationship relationship,final RealVector rhsCoefficients,final double rhsConstant){  this.coefficients=lhsCoefficients.subtract(rhsCoefficients);  this.relationship=relationship;  this.value=rhsConstant - lhsConstant;}  }
class C{  public OrFileFilter(){  this.fileFilters=new ArrayList<IOFileFilter>();}  }
class C{  private static List<Vector2D> buildQuadrilateral(final Vector2D... points){  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();  for (  Vector2D p : points) {    if (!quadrilateral.contains(p)) {      quadrilateral.add(p);    }  }  return quadrilateral;}  }
class C{  public static boolean areEqualOrNull(ItemStack stack1,ItemStack stack2){  if (stack1 == stack2) {    return true;  }  return (areEqual(stack1,stack2));}  }
class C{  public static Bundler of(Bundle b){  return new Bundler(b);}  }
class C{  public static double hypot(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_WRONG_TARGET_RACE(String value0){  return new SM_SYSTEM_MESSAGE(1400339,value0);}  }
class C{  public static Map<String,Object> renderContentAsText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> results=FastMap.newInstance();  LocalDispatcher dispatcher=dctx.getDispatcher();  Delegator delegator=dctx.getDelegator();  Writer out=(Writer)context.get("outWriter");  Map<String,Object> templateContext=UtilGenerics.checkMap(context.get("templateContext"));  String contentId=(String)context.get("contentId");  if (templateContext != null && UtilValidate.isEmpty(contentId)) {    contentId=(String)templateContext.get("contentId");  }  String mimeTypeId=(String)context.get("mimeTypeId");  if (templateContext != null && UtilValidate.isEmpty(mimeTypeId)) {    mimeTypeId=(String)templateContext.get("mimeTypeId");  }  Locale locale=(Locale)context.get("locale");  if (templateContext != null && locale == null) {    locale=(Locale)templateContext.get("locale");  }  if (templateContext == null) {    templateContext=FastMap.newInstance();  }  Writer outWriter=new StringWriter();  GenericValue view=(GenericValue)context.get("subContentDataResourceView");  if (view != null && view.containsKey("contentId")) {    contentId=view.getString("contentId");  }  try {    ContentWorker.renderContentAsText(dispatcher,delegator,contentId,outWriter,templateContext,locale,mimeTypeId,null,null,true);    if (out != null)     out.write(outWriter.toString());    results.put("textData",outWriter.toString());  } catch (  GeneralException e) {    Debug.logError(e,"Error rendering sub-content text",module);    return ServiceUtil.returnError(e.toString());  }catch (  IOException e) {    Debug.logError(e,"Error rendering sub-content text",module);    return ServiceUtil.returnError(e.toString());  }  return results;}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);  setChild(new List(),2);}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONArray response){  onSuccess(statusCode,response);}  }
class C{  public PartialDataResultSetMapper(SimplifiedIntervalList missingIntervals,Supplier<SimplifiedIntervalList> volatileIntervalSupply){  this.missingIntervals=missingIntervals;  this.volatileIntervalSupply=volatileIntervalSupply;}  }
class C{  public boolean swapEdgesOutOf(Stmt out,Stmt in){  boolean hasSwapped=false;  for (QueueReader<Edge> edgeRdr=listener(); edgeRdr.hasNext(); ) {    Edge e=edgeRdr.next();    if (e.srcUnit() == out) {      removeEdge(e);      addEdge(new Edge(e.getSrc(),in,e.getTgt()));      hasSwapped=true;    }  }  return hasSwapped;}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  private void startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  frameIndex=3;}  }
class C{  public CategoryImplementor(CategoryModel model,CategoryView view){  this.model=model;  this.view=view;}  }
class C{  public TransformerException(String message,Throwable e){  super(((message == null) || (message.length() == 0)) ? e.toString() : message);  this.containedException=e;  this.locator=null;}  }
class C{  @Controller(events=EventType.PIN_ADDED) public void onPinAdded(WebSocketSession session,Event event){  reply(session,event,new Message("Thanks for the pin! You can find all pinned items under channel details."));}  }
class C{  public boolean keyPressed(@NotNull KeyEvent event){  return false;}  }
class C{  public void unregisterReceiver(Context context){  mHandler.removeCallbacks(mServiceRunnable);  if (mIsRegistered.getAndSet(false)) {    context.unregisterReceiver(this);    mNeedToRunActions.set(false);  }}  }
class C{  private void printAttribute(String name,String value,boolean isSpecified,Attr attr) throws IOException {  if (isSpecified || (features & DOMSerializerImpl.DISCARDDEFAULT) == 0) {    if (fDOMFilter != null && (fDOMFilter.getWhatToShow() & NodeFilter.SHOW_ATTRIBUTE) != 0) {      short code=fDOMFilter.acceptNode(attr);switch (code) {case NodeFilter.FILTER_REJECT:case NodeFilter.FILTER_SKIP:{          return;        }default :{      }  }}_printer.printSpace();_printer.printText(name);_printer.printText("=\"");printEscaped(value);_printer.printText('"');}if (name.equals("xml:space")) {if (value.equals("preserve")) fPreserveSpace=true; else fPreserveSpace=_format.getPreserveSpace();}}  }
class C{  public static void createFile(String filePath,String content) throws IOException {  FileWriter writer=null;  try {    writer=new FileWriter(filePath);    writer.write(content);  } catch (  IOException ex) {    throw ex;  } finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  public ContinousQuery(Class<T> type,String sqlExpression,Object... parameters){  super(type,sqlExpression,parameters);}  }
class C{  synchronized protected boolean _unexport(Remote obj){  WeakReference<Remote> weakStub=_identityExportObjTable.get(new WeakKey(obj));  Remote dynamicProxy=weakStub != null ? weakStub.get() : null;  if (dynamicProxy == null)   return true;  DynamicSmartStub dynamicSmartStub=TransportProtocolHelper.extractSmartStubFromProxy(dynamicProxy);  dynamicSmartStub.unexport();  if (_logger.isLoggable(Level.FINE))   _logger.fine("ObjImpl: [" + dynamicSmartStub.getLocalObjImpl() + "] was unexported.");  return true;}  }
class C{  public void confirmDelete(){  By dialogLocator=By.cssSelector(CSS);  conditions.verifyPostAjax(visibilityOfElementLocated(dialogLocator));  deleteButton.click();  conditions.verifyPostAjax(invisibilityOfElementLocated(dialogLocator));}  }
class C{  public MarketGetCommentsQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public int encrypt(byte[] data,int offset,int length){  length+=4;  if (!updatedKey) {    length+=4;    length+=8 - length % 8;    encXORPass(data,offset,length,Rnd.nextInt());    cipher.cipher(data,offset,length);    cipher.updateKey(key);    updatedKey=true;  } else {    length+=8 - length % 8;    appendChecksum(data,offset,length);    cipher.cipher(data,offset,length);  }  return length;}  }
class C{  public VideoSearchQuery filters(VideoSearchFilter... value){  return unsafeParam("filters",value);}  }
class C{  protected AbstractFormat(final NumberFormat format){  this(format,(NumberFormat)format.clone());}  }
class C{  @Override public int compareTo(final DataRow other){  return mean.compareTo(other.mean);}  }
class C{  public static SuggestionAnswer parseAnswerContents(String answerContents){  SuggestionAnswer answer=new SuggestionAnswer();  try {    JSONObject jsonAnswer=new JSONObject(answerContents);    JSONArray jsonLines=jsonAnswer.getJSONArray(ANSWERS_JSON_LINE);    if (jsonLines.length() != 2) {      Log.e(TAG,"Answer JSON doesn't contain exactly two lines: " + jsonAnswer);      return null;    }    answer.mFirstLine=new SuggestionAnswer.ImageLine(jsonLines.getJSONObject(0).getJSONObject(ANSWERS_JSON_IMAGE_LINE));    answer.mSecondLine=new SuggestionAnswer.ImageLine(jsonLines.getJSONObject(1).getJSONObject(ANSWERS_JSON_IMAGE_LINE));  } catch (  JSONException e) {    Log.e(TAG,"Problem parsing answer JSON: " + e.getMessage());    return null;  }  return answer;}  }
class C{  public AnchorUpdateControl(Layout layout){  this(layout,null);}  }
class C{  public static void main(String[] args){  Ragdoll simulation=new Ragdoll();  simulation.run();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200903,skilltarget);}  }
class C{  public MessagesGetChatUsersQuery(VkApiClient client,UserActor actor){  super(client,"messages.getChatUsers",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());}  }
class C{  public static String base64EncodeBasicCredentials(String username,String password){  String credentialsToEncode=username + ':' + password;  byte[] credentialsAsUtf8Bytes=credentialsToEncode.getBytes(Charset.forName("UTF-8"));  return new String(DatatypeConverter.parseBase64Binary(new String(credentialsAsUtf8Bytes)));}  }
class C{  public boolean configureARScene(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200502,skilltarget,skillname);}  }
class C{  public UTF8Reader(InputStream inputStream){  this(inputStream,DEFAULT_BUFFER_SIZE,new XMLMessageFormatter(),Locale.getDefault());}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public void disconnect(final IMqttActionListener diconnectionResultHandler) throws SpyException {  reconnectionManager.removeConnection(this);  setConnectionStatus(ConnectionStatus.DISCONNECTING);  unsubscribeAll(true);  try {    logger.info("Disconnecting " + getMqttConnectionDetails().getClientID() + " from "+ getMqttConnectionDetails().getServerURI());    if (getClient() != null && getClient().isConnected()) {      getClient().disconnect(this,diconnectionResultHandler);    } else {      logger.debug("Already disconnected");    }  } catch (  MqttException e) {    throw new SpyException("Cannot disconnect from connection " + getMqttConnectionDetails().getId() + " "+ getMqttConnectionDetails().getName(),e);  }}  }
class C{  @Override public boolean shouldOverrideUrlLoading(WebView view,String url){  return parentEngine.client.onNavigationAttempt(url);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DashATK_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200345,num0,skillname);}  }
class C{  private int popAndInsert() throws InterruptedException {  Stats min=pq.take();  if (LOG.isTraceEnabled()) {    LOG.trace("picked forest# " + min.fIdx + " with "+ min.frmtCount+ " docs");  }  min.frmtCount+=batch;  pq.offer(min);  int idx=min.fIdx;  frmtCount[idx]=min.frmtCount;  return idx;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void addText(String text){  this.text+=text;}  }
class C{  public void shareToWeiXin(String webpageUrl,String title,String description){  WXWebpageObject webpage=new WXWebpageObject();  webpage.webpageUrl=webpageUrl;  WXMediaMessage msg=new WXMediaMessage(webpage);  msg.title=title;  msg.description=description;  Bitmap thumb=BitmapFactory.decodeResource(context.getResources(),R.mipmap.ic_launcher);  msg.thumbData=Util.bmpToByteArray(thumb,true);  SendMessageToWX.Req req=new SendMessageToWX.Req();  req.transaction=buildTransaction("webpage");  req.message=msg;  req.scene=SendMessageToWX.Req.WXSceneSession;  api.sendReq(req);}  }
class C{  public ObjectFactory(){}  }
class C{  protected Record(ModelRecord modelRecord,Map<String,Object> fields){  if (modelRecord == null)   throw new IllegalArgumentException("Cannont create a Record with a null modelRecord parameter");  this.recordName=modelRecord.name;  this.modelRecord=modelRecord;  this.fields=(fields == null ? new HashMap<String,Object>() : new HashMap<String,Object>(fields));}  }
class C{  public void increment(int i,int j){  matrix[i - 1][j - 1]++;  matrix[j - 1][i - 1]++;}  }
class C{  public void stopDeceleration(){  mDecelerationAngularVelocity=0.f;}  }
class C{  public PhotosGetQueryWithExtended photoIds(String... value){  return unsafeParam("photo_ids",value);}  }
class C{  public boolean isEmpty(){  return _pos == 0;}  }
class C{  public static String implementationVersion(){  return implementationVersion;}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if (groupCheckbox != null) {    Boolean newValue=(Boolean)undoRedoObject.getNewValue();    groupCheckbox.setSelected(newValue.booleanValue());    enableSubGroups(newValue.booleanValue());  }}  }
class C{  public BlockFieldMatrix(final int rows,final int columns,final T[][] blockData,final boolean copyArray) throws MathIllegalArgumentException {  super(extractField(blockData),rows,columns);  this.rows=rows;  this.columns=columns;  blockRows=(rows + BLOCK_SIZE - 1) / BLOCK_SIZE;  blockColumns=(columns + BLOCK_SIZE - 1) / BLOCK_SIZE;  if (copyArray) {    blocks=MathArrays.buildArray(getField(),blockRows * blockColumns,-1);  } else {    blocks=blockData;  }  int index=0;  for (int iBlock=0; iBlock < blockRows; ++iBlock) {    final int iHeight=blockHeight(iBlock);    for (int jBlock=0; jBlock < blockColumns; ++jBlock, ++index) {      if (blockData[index].length != iHeight * blockWidth(jBlock)) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,blockData[index].length,iHeight * blockWidth(jBlock));      }      if (copyArray) {        blocks[index]=blockData[index].clone();      }    }  }}  }
class C{  @Override public final int size(){  return getAll().size();}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (comboBox != null) {      return comboBox.isEnabled();    }  }  return false;}  }
class C{  @Override public boolean equals(Object p_test){  if (p_test instanceof URI) {    URI testURI=(URI)p_test;    if (((m_scheme == null && testURI.m_scheme == null) || (m_scheme != null && testURI.m_scheme != null && m_scheme.equals(testURI.m_scheme))) && ((m_userinfo == null && testURI.m_userinfo == null) || (m_userinfo != null && testURI.m_userinfo != null && m_userinfo.equals(testURI.m_userinfo))) && ((m_host == null && testURI.m_host == null) || (m_host != null && testURI.m_host != null && m_host.equals(testURI.m_host)))&& m_port == testURI.m_port && ((m_path == null && testURI.m_path == null) || (m_path != null && testURI.m_path != null && m_path.equals(testURI.m_path))) && ((m_queryString == null && testURI.m_queryString == null) || (m_queryString != null && testURI.m_queryString != null && m_queryString.equals(testURI.m_queryString))) && ((m_fragment == null && testURI.m_fragment == null) || (m_fragment != null && testURI.m_fragment != null && m_fragment.equals(testURI.m_fragment)))) {      return true;    }  }  return false;}  }
class C{  public String phoneArray2phoneString(AllophoneSet allophoneSet,String[] voicePhones){  StringBuilder phoneBuf=new StringBuilder();  for (int i=0; i < voicePhones.length; i++) {    phoneBuf.append(voicePhones[i]);  }  Syllabifier syllabifier=new Syllabifier(allophoneSet);  return syllabifier.syllabify(phoneBuf.toString());}  }
class C{  private static Object compressNonDecimal(DataType changedDataType,double[] value,int decimal){  int i=0;switch (changedDataType) {case DATA_BYTE:    byte[] result=new byte[value.length];  for (  double a : value) {    result[i]=(byte)(Math.round(Math.pow(10,decimal) * a));    i++;  }return result;case DATA_SHORT:short[] shortResult=new short[value.length];for (double a : value) {shortResult[i]=(short)(Math.round(Math.pow(10,decimal) * a));i++;}return shortResult;case DATA_INT:int[] intResult=new int[value.length];for (double a : value) {intResult[i]=(int)(Math.round(Math.pow(10,decimal) * a));i++;}return intResult;case DATA_LONG:long[] longResult=new long[value.length];for (double a : value) {longResult[i]=(long)(Math.round(Math.pow(10,decimal) * a));i++;}return longResult;case DATA_FLOAT:float[] floatResult=new float[value.length];for (double a : value) {floatResult[i]=(float)(Math.round(Math.pow(10,decimal) * a));i++;}return floatResult;default :double[] defaultResult=new double[value.length];for (double a : value) {defaultResult[i]=(double)(Math.round(Math.pow(10,decimal) * a));i++;}return defaultResult;}}  }
class C{  private static double[] unpack(List<Double> values){  int n=values.size();  if (values == null || n == 0) {    return new double[]{};  }  double[] out=new double[n];  for (int i=0; i < n; i++) {    out[i]=values.get(i);  }  return out;}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public ObjectFactory(){}  }
class C{  @Nullable private static String resolveAndroidExtension(PsiFile file){  assert file instanceof GroovyFile;  List<String> plugins=GradleBuildFile.getPlugins((GroovyFile)file);  if (plugins.contains(GradleDetector.APP_PLUGIN_ID) || plugins.contains(GradleDetector.OLD_APP_PLUGIN_ID)) {    return ANDROID_FQCN;  } else   if (plugins.contains(GradleDetector.LIB_PLUGIN_ID) || plugins.contains(GradleDetector.OLD_LIB_PLUGIN_ID)) {    return ANDROID_LIB_FQCN;  } else {    return null;  }}  }
class C{  public FriendsGetRequestsQueryWithNeedMutual suggested(Boolean value){  return unsafeParam("suggested",value);}  }
class C{  public void dumpRow(PrintStream out){  for (int i=0; i < columnNames.length; i++) {    out.print("Column ");    out.print(i);    out.print(" ");    out.print(columnNames[i]);    out.print(" : ");    try {      out.println(line[i]);    } catch (    ArrayIndexOutOfBoundsException aioobe) {      out.println("Unable to get cell " + i + " of this line");    }  }}  }
class C{  public InvalidJobException(String msg){  super(msg);}  }
class C{  private void estimationStep(PointList samplePoints){  double p_j;  double value;  for (int j=0; j < samplePoints.size(); j++) {    p_j=0;    for (int i=0; i < components.length; i++) {      Matrix x=samplePoints.get(j);      value=components[i].getWeightedSampleProbability(x);      p_j+=value;      p_ij[i][j]=value;    }    for (int i=0; i < components.length; i++)     p_ij[i][j]/=p_j;  }}  }
class C{  public <T>com.twitter.util.Future<T> apply(Object key,Function0<T> function){  return chooseFuturePool(key).apply(function);}  }
class C{  public static int readUnsignedShort(ByteBuffer bb) throws BufferUnderflowException {  int ch1=bb.get() & 0xFF;  int ch2=bb.get() & 0xFF;  return (ch1 << 8) + (ch2 << 0);}  }
class C{  public static LatLng translatePoint(LatLng point,double distance,double bearing){  distance=distance / 1000d;  double lat=Math.toRadians(point.latitude);  double lng=Math.toRadians(point.longitude);  bearing=Math.toRadians(bearing);  double Lat2=Math.asin((Math.sin(lat) * Math.cos(distance / EARTH)) + (Math.cos(lat) * Math.sin(distance / EARTH) * Math.cos(bearing)));  double Long2=lng + Math.atan2(Math.sin(bearing) * Math.sin(distance / EARTH) * Math.cos(lat),Math.cos(distance / EARTH) - (Math.sin(lat) * Math.sin(Lat2)));  Lat2=Math.toDegrees(Lat2);  Long2=Math.toDegrees(Long2);  return new LatLng(Lat2,Long2);}  }
class C{  void listConstantPool(){  cp_info c;  int i;  for (i=1; i < constant_pool_count; i++) {    c=constant_pool[i];    G.v().out.println("[" + i + "] "+ c.typeName()+ "="+ c.toString(constant_pool));    if ((constant_pool[i]).tag == cp_info.CONSTANT_Long || (constant_pool[i]).tag == cp_info.CONSTANT_Double) {      i++;    }  }}  }
class C{  public AdsGetSuggestionsQueryWithCities(VkApiClient client,UserActor actor,AdsGetSuggestionsSection section,String cities){  super(client,"ads.getSuggestions",Utils.buildParametrizedType(List.class,TargSuggestionsCities.class));  accessToken(actor.getAccessToken());  section(section);  cities(cities);}  }
class C{  public static long mulAndCheck(long a,long b){  long ret;  String msg="overflow: multiply";  if (a > b) {    ret=mulAndCheck(b,a);  } else {    if (a < 0) {      if (b < 0) {        if (a >= Long.MAX_VALUE / b) {          ret=a * b;        } else {          throw new ArithmeticException(msg);        }      } else       if (b > 0) {        if (Long.MIN_VALUE / b <= a) {          ret=a * b;        } else {          throw new ArithmeticException(msg);        }      } else {        ret=0;      }    } else     if (a > 0) {      if (a <= Long.MAX_VALUE / b) {        ret=a * b;      } else {        throw new ArithmeticException(msg);      }    } else {      ret=0;    }  }  return ret;}  }
class C{  public void notifyReturned(NotifyContext notifyContext,ITemplateHolder template){  if (notifyContext == null)   return;  if (_filterManager._isFilter[FilterOperationCodes.AFTER_NOTIFY_TRIGGER]) {    Object[] entries=new Object[2];    entries[0]=notifyContext.getEntry();    entries[1]=template;    try {      _filterManager.invokeFilters(FilterOperationCodes.AFTER_NOTIFY_TRIGGER,null,entries);    } catch (    Exception e) {      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,"Exception was thrown by filter on AFTER_NOTIFY_TRIGGER.",e);    }  }  decreaseCounter(notifyContext);}  }
class C{  public NVTASCIIReader(InputStream stream,String charsetName) throws IOException {  this.stream=stream;  reader=new InputStreamReader(stream,charsetName);}  }
class C{  @Override public boolean shouldExecute(){  Vec3d vec3d=null;  if (this.theEntityCreature.isBurning()) {    vec3d=RandomPositionGenerator.findRandomTarget(this.theEntityCreature,5,4);  } else   if (this.theEntityCreature.getAITarget() != null) {    vec3d=RandomPositionGenerator.findRandomTargetBlockAwayFrom(this.theEntityCreature,5,4,new Vec3d(this.theEntityCreature.getAITarget().posX,this.theEntityCreature.getAITarget().posY,this.theEntityCreature.getAITarget().posZ));  }  if (vec3d != null) {    this.randPosX=vec3d.xCoord;    this.randPosY=vec3d.yCoord;    this.randPosZ=vec3d.zCoord;    return true;  } else {    return false;  }}  }
class C{  protected void assertFailsWith(String command,JSONObject args,String... fragments) throws Exception {  assertFailsWith(command,args.toString(),fragments);}  }
class C{  public ConstantColumn(Class type,Object defaultValue){  super(type,defaultValue);}  }
class C{  @Override public void populateExpression(Object objValue){  if (wktPanel != null) {    if (objValue instanceof String) {      wktPanel.populateExpression((String)objValue);    }  }}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public boolean isEmpty(){  return this.map.isEmpty();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  protected void beforeMove(){  if (!Silent) synchronized (System.err) {    System.err.println(getLocalName() + " is now migrating.");  }}  }
class C{  private synchronized <T extends BaseTagListener>void doSubscriptionByName(final Set<String> regexList,final T listener){  if (regexList == null) {    String error="Called with null parameter (regex list). Ignoring request.";    log.warn("doSubscriptionByName() : " + error);    throw new IllegalArgumentException(error);  }  if (listener == null) {    String error="Called with null parameter (BaseTagListener). Ignoring request.";    log.warn("doSubscriptionByName() : " + error);    throw new IllegalArgumentException(error);  }  if (regexList.isEmpty()) {    String info="Called with empty regex list. Ignoring request.";    log.info("doSubscriptionByName() : " + info);    return;  }  if (log.isDebugEnabled()) {    log.debug(String.format("doTagSubscription() : called for %d tags.",regexList.size()));  }  try {    cache.subscribeByRegex(regexList,listener);    tagUpdateListeners.add(listener);  } catch (  CacheSynchronizationException cse) {    log.error("doSubscriptionByName() : Cache error occured while subscribing to data tags.",cse);    throw cse;  }}  }
class C{  static private void syncAux2Summary(String fileName,byte[] bytes,DataTable table) throws IOException {  if (bytes != null) {    String string=Basic.toString(bytes);    if (string.startsWith(DataTable.MEGAN6_SUMMARY_TAG_NOT_USED_ANYMORE) || string.startsWith(DataTable.MEGAN4_SUMMARY_TAG) || string.startsWith("!MEGAN4")) {      BufferedReader r=new BufferedReader(new StringReader(string));      table.read(r,true);      r.close();    } else     if (string.startsWith("!MEGAN")) {      System.err.println("Archive is in an old format, upgrading to MEGAN6");      BufferedReader r=new BufferedReader(new StringReader(string));      table.importMEGAN3SummaryFile(fileName,r,false);      r.close();    }  }}  }
class C{  @Override public void close(){  try {    reader.close();    refReader.close();  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  @Override public void invalidateView(){  mViewBinder.invalidateView();}  }
class C{  public static void writeString(String path,String name,String encoding,String s) throws IOException {  String fileName=getPatchedFileName(path,name);  if (UtilValidate.isEmpty(fileName)) {    throw new IOException("Cannot obtain buffered writer for an empty filename!");  }  try {    FileUtils.writeStringToFile(new File(fileName),s,encoding);  } catch (  IOException e) {    Debug.logError(e,module);    throw e;  }}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public Boolean isLogQos(){  return logQos;}  }
class C{  public static DmnEngineInfo retry(String resourceUrl){  log.debug("retying initializing of resource {}",resourceUrl);  try {    return initDmnEngineFromResource(new URL(resourceUrl));  } catch (  MalformedURLException e) {    throw new ActivitiDmnException("invalid url: " + resourceUrl,e);  }}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  @Override protected boolean isValid(int ch){  return XML11Char.isXML11Valid(ch);}  }
class C{  protected AdsCheckLinkQuery linkType(AdsCheckLinkType value){  return unsafeParam("link_type",value);}  }
class C{  public void update(GpsSettingsOuterClass.GpsSettings gpsSettings){  drivingWarningSpeedMetersPerSecond=gpsSettings.getDrivingWarningSpeedMetersPerSecond();  drivingWarningCooldownMinutes=gpsSettings.getDrivingWarningCooldownMinutes();  drivingSpeedSampleIntervalSeconds=gpsSettings.getDrivingSpeedSampleIntervalSeconds();  drivingSpeedSampleCount=gpsSettings.getDrivingSpeedSampleCount();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ONE_IS_INCLUDED(String value0){  return new SM_SYSTEM_MESSAGE(1300637,value0);}  }
class C{  public void actionPerformed(ActionEvent ev){  File lastOpenFile=ProgramProperties.getFile(MeganProperties.TAXONOMYFILE);  getDir().notifyLockInput();  File file=ChooseFileDialog.chooseFileToOpen(getViewer().getFrame(),lastOpenFile,new TextFileFilter("tre"),new TextFileFilter("tre"),ev,"Open Tree File");  getDir().notifyUnlockInput();  if (file != null && file.exists() && file.canRead()) {    ProgramProperties.put(MeganProperties.TAXONOMYFILE,file.getAbsolutePath());    String mappingFile=Basic.replaceFileSuffix(file.getPath(),".map");    if (!(new File(mappingFile)).exists()) {      mappingFile=null;    }    StringBuilder buf=new StringBuilder();    buf.append("load taxonomyFile='").append(file.getPath()).append("'");    if (mappingFile != null)     buf.append(" mapfile='").append(mappingFile).append("';"); else     buf.append(";");    buf.append("collapse level=2;");    execute(buf.toString());  }}  }
class C{  public static ArrayList<String> matches(String text){  return matches(text,ALL);}  }
class C{  public CART[] load(int numStates,InputStream treeStream,InputStream pdfStream,PdfFileFormat fileFormat,FeatureDefinition featDefinition,PhoneTranslator phTranslator) throws IOException, MaryConfigurationException {  featDef=featDefinition;  int i, j, length, state;  BufferedReader s=null;  String line, aux;  phTrans=phTranslator;  CART treeSet[]=new CART[numStates];  for (i=0; i < numStates; i++)   treeSet[i]=new CART();  double pdf[][][][];  pdf=loadPdfs(numStates,pdfStream,fileFormat);  assert featDefinition != null : "Feature Definition was not set";  s=new BufferedReader(new InputStreamReader(treeStream,"UTF-8"));  while ((line=s.readLine()) != null) {    if (line.indexOf("QS") < 0)     break;  }  while ((line=s.readLine()) != null) {    if (line.indexOf("{*}") >= 0) {      aux=line.substring(line.indexOf("[") + 1,line.indexOf("]"));      state=Integer.parseInt(aux);      treeSet[state - 2].setRootNode(loadStateTree(s,pdf[state - 2]));      if (treeSet[state - 2].getRootNode() instanceof DecisionNode)       ((DecisionNode)treeSet[state - 2].getRootNode()).countData();      Log.d(Mary.LOG,"load: CART[" + (state - 2) + "], total number of nodes in this CART: "+ treeSet[state - 2].getNumNodes());    }  }  if (s != null)   s.close();  if (treeSet.length == 0) {    throw new IOException("LoadTreeSet: error no trees loaded");  }  return treeSet;}  }
class C{  public static Map<String,Object> findRelatedContent(DispatchContext dctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> results=FastMap.newInstance();  GenericValue currentContent=(GenericValue)context.get("currentContent");  String fromDate=(String)context.get("fromDate");  String thruDate=(String)context.get("thruDate");  String toFrom=(String)context.get("toFrom");  Locale locale=(Locale)context.get("locale");  if (toFrom == null) {    toFrom="TO";  } else {    toFrom=toFrom.toUpperCase();  }  List<String> assocTypes=UtilGenerics.checkList(context.get("contentAssocTypeList"));  List<String> targetOperations=UtilGenerics.checkList(context.get("targetOperationList"));  List<String> contentTypes=UtilGenerics.checkList(context.get("contentTypeList"));  List<GenericValue> contentList=null;  try {    contentList=ContentWorker.getAssociatedContent(currentContent,toFrom,assocTypes,contentTypes,fromDate,thruDate);  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocRetrievingError",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (UtilValidate.isEmpty(targetOperations)) {    results.put("contentList",contentList);    return results;  }  Map<String,Object> serviceInMap=FastMap.newInstance();  serviceInMap.put("userLogin",context.get("userLogin"));  serviceInMap.put("targetOperationList",targetOperations);  serviceInMap.put("entityOperation",context.get("entityOperation"));  List<GenericValue> permittedList=FastList.newInstance();  Map<String,Object> permResults=null;  for (  GenericValue content : contentList) {    serviceInMap.put("currentContent",content);    try {      permResults=dispatcher.runSync("checkContentPermission",serviceInMap);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problem checking permissions","ContentServices");      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPermissionNotGranted",locale));    }    String permissionStatus=(String)permResults.get("permissionStatus");    if (permissionStatus != null && permissionStatus.equalsIgnoreCase("granted")) {      permittedList.add(content);    }  }  results.put("contentList",permittedList);  return results;}  }
class C{  public VideoGetUserVideosQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public ASBSessionCursor queryASBSessions(){  return mHelper.queryASBSessions();}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public static <K>void addToDoubleInMap(Map<K,Object> theMap,K key,Double value){  Double curValue=(Double)theMap.get(key);  if (curValue != null) {    theMap.put(key,curValue + value);  } else {    theMap.put(key,value);  }}  }
class C{  private void fillXMLAttribute(Attributes att,int index){  fillQName(fAttributeQName,att.getURI(index),att.getLocalName(index),att.getQName(index));  String type=att.getType(index);  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(index));}  }
class C{  public static int update(W q,V v){  String passwd=(String)v.value("password");  if (!X.isEmpty(passwd)) {    passwd=encrypt(passwd);    v.set("password",passwd,true);  } else {    v.remove("password");  }  return Helper.update(q,v.set("updated",System.currentTimeMillis()),User.class);}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  double[] points=makeCumulativeTestValues();  double[] points2=new double[points.length - 5];  System.arraycopy(points,5,points2,0,points.length - 5);  return points2;}  }
class C{  public static <T>T readObjectFromFile(String path,Class<T> type,JavaSparkContext sc) throws IOException {  return readObjectFromFile(path,type,sc.sc());}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  Director.showMessageWindow();  final AlignmentViewer viewer=(AlignmentViewer)getViewer();  final Alignment alignment=viewer.getAlignment();  final SelectedBlock block=viewer.getSelectedBlock();  for (int row=0; row < alignment.getRowCompressor().getNumberRows(); row++) {    if (block.isSelectedRow(row)) {      for (      Integer read : alignment.getRowCompressor().getCompressedRow2Reads(row)) {        Lane lane=alignment.getLane(read);        int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(block.getFirstCol());        if ((block.isSelectedCol(lane.getFirstNonGapPosition() - firstJump + 1))) {          System.out.println();          System.out.println(viewer.getSelectedReference());          System.out.println(lane.getText());        }      }    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public boolean isIterable(){  if (isIterable_computed) {    return isIterable_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  isIterable_value=isIterable_compute();  if (isFinal && num == state().boundariesCrossed)   isIterable_computed=true;  return isIterable_value;}  }
class C{  public byte[] download_file1(String file_id) throws IOException, MyException {  final long file_offset=0;  final long download_bytes=0;  return this.download_file1(file_id,file_offset,download_bytes);}  }
class C{  @Override protected void assertRequiredDependentMetricCount(String dictionaryName,List<String> dependentMetrics){  int minimalCount=getDependentMetricsRequired();  int actualCount=dependentMetrics.size();  if (actualCount < minimalCount) {    String message=String.format("%s got %d of at least %d dependent metrics",dictionaryName,actualCount,minimalCount);    LOG.error(message);    throw new IllegalArgumentException(message);  }}  }
class C{  private boolean lastEntry(){  return column.get(column.size() - 1);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public DefaultChunkScrollableDataIterator(SQLQuery sqlQuery,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int chunkSize){  super(sqlQuery,sessionFactory,fetchSize,performOrderById,chunkSize);}  }
class C{  int positionOfBookmarkId(BookmarkId id){  return positionOfItem(new Item(id));}  }
class C{  public static void toJrxml(Grid grid,Map<?,?> params,Writer writer){  render(grid,params,writer,JASPER_TEMPLATE);}  }
class C{  public int cardinality(){  int c=0;  for (  long v : bits) {    while (v != 0) {      v&=v - 1;      ++c;    }  }  return c;}  }
class C{  protected boolean isLastStep(){  return isLastStep;}  }
class C{  public static void main(String[] args){  boolean ok=false;  FileData fileData=null;  if (args.length == 2) {    fileData=new FileData();    fileData.setInputFile(args[0]);    File f=fileData.getInputFile();    if (!f.exists()) {      logger.error("Input mxd file does not exist");      ok=false;    } else {      ok=true;    }    fileData.setOutputFile(args[1]);    File outputFile=fileData.getOutputFile();    File parentFolder=outputFile.getParentFile();    if (!parentFolder.exists()) {      ok=parentFolder.mkdirs();      if (ok) {        logger.info("Created output folder : " + parentFolder.getAbsolutePath());      }    }    fileData.setOverwrite(true);    List<String> errorMessages=new ArrayList<String>();    boolean valid=fileData.isValid(true,errorMessages);    if (!valid) {      for (      String errorMessage : errorMessages) {        System.err.println(errorMessage);      }      fileData=null;      System.exit(2);    }  }  if (!ok) {    try {      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());    } catch (    UnsupportedLookAndFeelException e) {      e.printStackTrace();    }catch (    ClassNotFoundException e) {      e.printStackTrace();    }catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }  if (fileData != null) {    processFile(fileData);  } else {    System.exit(2);  }}  }
class C{  public void clearParam(String param){  params.remove(param);}  }
class C{  public DocumentSet(String sBaseDir,double dTrainingPercent){  TrainingPercent=dTrainingPercent;  BaseDir=sBaseDir;  TrainingFiles=new ArrayList();  TestFiles=new ArrayList();  Categories=new ArrayList();}  }
class C{  @SuppressWarnings("unchecked") @Override public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector namesVec,Vector argsVec) throws BSFException {  if (namesVec.size() != argsVec.size())   throw new BSFException("number of params/names mismatch");  if (!(funcBody instanceof String))   throw new BSFException("apply: function body must be a string");  String[] names=new String[namesVec.size()];  namesVec.copyInto(names);  Object[] args=new String[argsVec.size()];  argsVec.copyInto(args);  try {    if (!installedApplyMethod) {      interpreter.eval(bsfApplyMethod);      installedApplyMethod=true;    }    bsh.This global=(bsh.This)interpreter.get("global");    return global.invokeMethod("_bsfApply",new Object[]{names,args,(String)funcBody});  } catch (  InterpreterError e) {    throw new BSFException("BeanShell interpreter internal error: " + e + sourceInfo(source,lineNo,columnNo));  }catch (  TargetError e2) {    throw new BSFException("The application script threw an exception: " + e2.getTarget() + sourceInfo(source,lineNo,columnNo));  }catch (  EvalError e3) {    throw new BSFException("BeanShell script error: " + e3 + sourceInfo(source,lineNo,columnNo));  }}  }
class C{  private double calculateNumericalVariance(){  final double N=getPopulationSize();  final double m=getNumberOfSuccesses();  final double n=getSampleSize();  return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));}  }
class C{  public GraphDistanceFilter(String group,String sources,int distance){  super(group);  m_sources=sources;  m_distance=distance;  m_groupP=new InGroupPredicate(PrefuseLib.getGroupName(group,Graph.NODES));  m_bfs=new BreadthFirstIterator();}  }
class C{  public boolean isTransient(){  Allophone allophone=getAllophone();  return allophone.isPlosive() || allophone.isAffricate();}  }
class C{  public boolean isEmpty(){  return names.isEmpty();}  }
class C{  public void downloadImage(String location,int index){  new DownloadImage(context,location,ContextCompat.getColor(context,R.color.transparent1)).execute(urls[index]);}  }
class C{  @Override public void schedule(Runnable childStatement){  Future<Void> submittedStatement=completionService.submit(childStatement,null);  tasks.add(submittedStatement);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ReturnHome_ME_TO_B(String skillname){  return new SM_SYSTEM_MESSAGE(1200457,skillname);}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public ScrollImplementor(ScrollModel model,ScrollView view){  this.model=model;  this.view=view;}  }
class C{  public static String normaliseUnicodePunctuation(String unicodeText){  return normaliseUnicode(unicodeText,punctuationTable);}  }
class C{  public Selection isBeforeNoon(){  return select(null);}  }
class C{  @Override protected void readImpl(){  this.npcId=readD();}  }
class C{  private static void determineFirstDigit(StringBuilder resultString,int lgPatternFound) throws NotFoundException {  for (int d=0; d < 10; d++) {    if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {      resultString.insert(0,(char)('0' + d));      return;    }  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  private static int findMnemonicAmpersand(String text){  int i=-1;  do {    i=text.indexOf('&',i + 1);    if ((i >= 0) && ((i + 1) < text.length())) {      if (text.charAt(i + 1) == ' ') {        continue;      } else       if ((text.charAt(i + 1) == '\'') && (i > 0) && (text.charAt(i - 1) == '\'')) {        continue;      }      return i;    }  } while (i >= 0);  return -1;}  }
class C{  public synchronized void cancel(){}  }
class C{  @Override public ASObject cloneASObject(boolean deep){  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  @Override public ListenableFuture<StatusResponse> statusMember(){  return this.futureStub.status(StatusRequest.getDefaultInstance());}  }
class C{  public String formatPercent(long value){  return SimpleXYChartUtils.formatPercent(value * chartFactor);}  }
class C{  private boolean decrypt(ByteBuffer buf){  int size=buf.remaining();  final int offset=buf.arrayOffset() + buf.position();  boolean ret=cryptEngine.decrypt(buf.array(),offset,size);  if (!ret) {    log.warn("Wrong checksum from client: " + this);  }  return ret;}  }
class C{  public RecognitionRequest addTagForSelectClasses(String tag){  selectClasses.add(tag);  return this;}  }
class C{  public static List<LoadMetadataDetails> filterOutNewlyAddedSegments(List<LoadMetadataDetails> segments,LoadMetadataDetails lastSeg){  List<LoadMetadataDetails> list=new ArrayList<>(segments);  List<LoadMetadataDetails> trimmedList=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  CarbonDataMergerUtil.sortSegments(list);  trimmedList=list.subList(0,list.indexOf(lastSeg) + 1);  return trimmedList;}  }
class C{  public void update(int fps,float angle){  double speed=(SPEED / FPS) * Math.log(radius);  y-=speed;  x+=amp * Math.sin(freq * (step++ * speed)) + skew;  if (radius < maxRadius) {    radius+=maxRadius / (((float)fps / SPEED) * radius);    if (radius > maxRadius)     radius=maxRadius;  }}  }
class C{  private DocumentFragment traverseCommonAncestors(Node startAncestor,Node endAncestor,int how){  DocumentFragment frag=null;  if (how != DELETE_CONTENTS)   frag=fDocument.createDocumentFragment();  Node n=traverseLeftBoundary(startAncestor,how);  if (frag != null)   frag.appendChild(n);  Node commonParent=startAncestor.getParentNode();  int startOffset=indexOf(startAncestor,commonParent);  int endOffset=indexOf(endAncestor,commonParent);  ++startOffset;  int cnt=endOffset - startOffset;  Node sibling=startAncestor.getNextSibling();  while (cnt > 0) {    Node nextSibling=sibling.getNextSibling();    n=traverseFullySelected(sibling,how);    if (frag != null)     frag.appendChild(n);    sibling=nextSibling;    --cnt;  }  n=traverseRightBoundary(endAncestor,how);  if (frag != null)   frag.appendChild(n);  if (how != CLONE_CONTENTS) {    setStartAfter(startAncestor);    collapse(true);  }  return frag;}  }
class C{  public static BetweenSpacePredicate between(Comparable<?> low,Comparable<?> high){  return new BetweenSpacePredicate(low,high);}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public static void performSaveAs(File selFile,String spaceName,String containerName,JSpaceAttributes spaceAttributes){  try {    InputStream schemaInputStream=ResourceLoader.findSpaceSchema(Constants.Schemas.DEFAULT_SCHEMA).getInputStream();    writeDOMToFile(schemaInputStream,selFile,spaceName);    SpaceImpl.setConfig(spaceName,containerName,spaceAttributes,selFile.getPath());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected void hideModel(EpoxyModel<?> model){  showModel(model,false);}  }
class C{  public MarketSearchQuery priceTo(Integer value){  return unsafeParam("price_to",value);}  }
class C{  private void writeCsvResponse(OutputStream os) throws IOException {  CsvSchema schema=buildCsvHeaders();  csvMapper.writer().with(schema.withSkipFirstDataRow(true)).writeValue(os,Collections.emptyMap());  ObjectWriter writer=csvMapper.writer().with(schema.withoutHeader());  try {    resultSet.stream().map(null).forEachOrdered(null);  } catch (  RuntimeException re) {    throw new IOException(re);  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    V v=n.getValidValue();    if (v != null) {      s.writeObject(n.key);      s.writeObject(v);    }  }  s.writeObject(null);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  private int readInternal() throws IOException {  int c;  if (peekc == NO_CHAR) {    c=reader.read();  } else {    c=peekc;    peekc=NO_CHAR;    if (c == '\\') {      return c;    }  }  if (c != '\\') {    return c;  }  c=reader.read();  if (c != 'u') {    peekc=c;    return '\\';  }  do {    c=reader.read();  } while (c == 'u');  int nchars=0;  if (c >= 0) {    code[nchars++]=(char)c;    while (nchars < 4) {      int n=reader.read(code,nchars,4 - nchars);      if (n < 0) {        break;      }      nchars+=n;    }  }  String s=new String(code,0,nchars);  if (nchars == 4) {    try {      int i=Integer.parseInt(s,16);      if (i >= 0) {        return (char)i;      }    } catch (    NumberFormatException e) {    }  }  throw new IOException("illegal Unicode escape: \\u" + s);}  }
class C{  private Boolean checkProcessPIK(final DataTagValueUpdate dataTagValueUpdate){  Process process;  processCache.acquireWriteLockOnKey(dataTagValueUpdate.getProcessId());  try {    process=this.processCache.get(dataTagValueUpdate.getProcessId());    if (process.getProcessPIK() != null) {      if (dataTagValueUpdate.getProcessPIK() == null) {        if (LOGGER.isTraceEnabled()) {          LOGGER.warn(" Processing incoming update for Process " + process.getName() + ": PIK registered ("+ process.getProcessPIK()+ ") but no PIK received from update: Ignoring the update");        }        return IGNORE_UPDATE;      } else       if (!process.getProcessPIK().equals(dataTagValueUpdate.getProcessPIK())) {        if (LOGGER.isTraceEnabled()) {          LOGGER.warn("Processing incoming updates for Process " + process.getName() + ": Received wrong PIK - cache vs update ("+ process.getProcessPIK()+ " vs "+ dataTagValueUpdate.getProcessPIK()+ "): Ignoring the update");        }        return IGNORE_UPDATE;      }    } else {      if (dataTagValueUpdate.getProcessPIK() == null) {        if (LOGGER.isTraceEnabled()) {          LOGGER.warn("Processing incoming update for Process " + process.getName() + " with no PIK: Ignoring the update");        }        return IGNORE_UPDATE;      }      if (isTestMode()) {        if (LOGGER.isTraceEnabled()) {          LOGGER.trace("[TEST] Processing incoming update for Process " + process.getName());        }      } else {        if (LOGGER.isTraceEnabled()) {          LOGGER.trace("Processing incoming update for Process " + process.getName() + " and saving PIK "+ dataTagValueUpdate.getProcessPIK());        }        this.processFacade.setProcessPIK(process.getId(),dataTagValueUpdate.getProcessPIK());      }    }  } catch (  CacheElementNotFoundException cacheEx) {    LOGGER.warn("Receive updates from unrecognized Process #" + dataTagValueUpdate.getProcessId() + ": Ignoring the updates",cacheEx);  } finally {    processCache.releaseWriteLockOnKey(dataTagValueUpdate.getProcessId());  }  return ACCEPT_UPDATE;}  }
class C{  public void writeDouble(double value) throws JMSException {  initializeWriting();  try {    this.dataOut.write(_DOUBLE);    this.dataOut.writeDouble(value);  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  if (token.type == LazyNode.VALUE_TRUE)   return true;  if (token.type == LazyNode.VALUE_FALSE)   return false;  throw new LazyException("Requested value is not a boolean",token);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  private boolean isRequestingSensorEventData(){  for (  Map.Entry<String,SensorDataRequest> sensorDataRequestEntry : sensorDataRequests.entrySet()) {    if (sensorDataRequestEntry.getValue().getEndTimestamp() == DataRequest.TIMESTAMP_NOT_SET) {      return true;    }  }  return false;}  }
class C{  @Override public Writer append(char c){  return this;}  }
class C{  public EntryImpl(IEntryHolder entryHolder,ITypeDesc typeDesc){  super(typeDesc);  this._entryHolder=entryHolder;}  }
class C{  private void removeEquipmentTags(Equipment equipment,ConfigurationElementReport equipmentReport){  for (  Long dataTagId : new ArrayList<>(equipmentFacade.getDataTagIds(equipment.getId()))) {    ConfigurationElementReport tagReport=new ConfigurationElementReport(Action.REMOVE,Entity.DATATAG,dataTagId);    equipmentReport.addSubReport(tagReport);    dataTagConfigHandler.removeDataTag(dataTagId,tagReport);  }}  }
class C{  public Vector3f divide(float scalar){  scalar=1f / scalar;  return new Vector3f(x * scalar,y * scalar,z * scalar);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static boolean canChat(Player player){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canChat.ordinal()]) {    if (!restrictions.canChat(player)) {      return false;    }  }  return true;}  }
class C{  public boolean readBool() throws IOException {  return dis.readByte() > 0;}  }
class C{  public void print(char ch){synchronized (lock) {    try {      appendLocked(ch);    } catch (    IOException e) {    }  }}  }
class C{  private void writeConstraintsToXml(XmlSerializer out,JobStatus jobStatus) throws IOException {  out.startTag(null,XML_TAG_PARAMS_CONSTRAINTS);  if (jobStatus.hasUnmeteredConstraint()) {    out.attribute(null,"unmetered",Boolean.toString(true));  }  if (jobStatus.hasConnectivityConstraint()) {    out.attribute(null,"connectivity",Boolean.toString(true));  }  if (jobStatus.hasIdleConstraint()) {    out.attribute(null,"idle",Boolean.toString(true));  }  if (jobStatus.hasChargingConstraint()) {    out.attribute(null,"charging",Boolean.toString(true));  }  out.endTag(null,XML_TAG_PARAMS_CONSTRAINTS);}  }
class C{  private void saveInstantUploadVideoPathOnPreferences(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  SharedPreferences.Editor editor=appPrefs.edit();  editor.putString("instant_video_upload_path",mUploadVideoPath);  editor.commit();}  }
class C{  @Override public void createPriorities(Application.Name applicationName,List<Experiment.ID> experimentPriorityList){  if (experimentPriorityList.isEmpty()) {    final String CQL="delete from application where app_name = ?";    try {      driver.getKeyspace().prepareQuery(keyspace.application_CF()).withCql(CQL).asPreparedStatement().withByteBufferValue(applicationName,ApplicationNameSerializer.get()).execute().getResult();    } catch (    Exception e) {      throw new RepositoryException("Unable to modify the priority list for the application: \"" + applicationName.toString() + "\""+ e);    }  } else {    final String CQL="insert into application(app_name,priorities) values(?,?)";    try {      driver.getKeyspace().prepareQuery(keyspace.application_CF()).withCql(CQL).asPreparedStatement().withByteBufferValue(applicationName,ApplicationNameSerializer.get()).withByteBufferValue(experimentPriorityList,ExperimentIDListSerializer.get()).execute().getResult();    } catch (    Exception e) {      throw new RepositoryException("Unable to modify the priority list for application: \"" + applicationName.toString() + "\""+ e);    }  }}  }
class C{  @Override public boolean isEqualNode(Node arg){  if (!super.isEqualNode(arg)) {    return false;  }  Node child1=getFirstChild();  Node child2=arg.getFirstChild();  while (child1 != null && child2 != null) {    if (!child1.isEqualNode(child2)) {      return false;    }    child1=child1.getNextSibling();    child2=child2.getNextSibling();  }  return child1 == child2;}  }
class C{  public static int cleanSuspendedTransactions() throws GenericTransactionException {  Transaction trans=null;  int num=0;  while ((trans=popSuspendedTransaction()) != null) {    resume(trans);    rollback();    num++;  }  clearTransactionStartStampStack();  return num;}  }
class C{  public void addTag(Tag t){  if (mTagList == null)   mTagList=new ArrayList<Tag>(1);  mTagList.add(t);}  }
class C{  @Override public void onTokenRefresh(){  String refreshedToken=FirebaseInstanceId.getInstance().getToken();  Log.d(TAG,"Refreshed token: " + refreshedToken);  Intent i=new Intent("com.evollu.react.fcm.FCMRefreshToken");  Bundle bundle=new Bundle();  bundle.putString("token",refreshedToken);  i.putExtras(bundle);  sendBroadcast(i);}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public Map<String,String> buildHiveData(Map<String,AttributeValue> dynamoDBItem){  if (dynamoDBItem == null || dynamoDBItem.isEmpty()) {    throw new RuntimeException("DynamoDB item cannot be null or empty.");  }  Map<String,String> hiveData=new HashMap<>(dynamoDBItem.size());  for (  Entry<String,AttributeValue> attributeNameValue : dynamoDBItem.entrySet()) {    hiveData.put(attributeNameValue.getKey(),serializeAttributeValue(attributeNameValue.getValue()));  }  return hiveData;}  }
class C{  public static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public static List split(String str,String regex){  return (Arrays.asList(str.split(regex)));}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=StringCodingUtils.getBytes(input,Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public WallSearchQuery ownersOnly(Boolean value){  return unsafeParam("owners_only",value);}  }
class C{  public static JsonObject createPicture(Picture picture){  JsonObject jsonObject=null;  if (picture != null) {    jsonObject=new JsonObject();    try {      BufferedImage image=(BufferedImage)picture.toImage();      jsonObject.addProperty(CommonPictureKeys.HEIGHT,image.getHeight(null));      jsonObject.addProperty(CommonPictureKeys.WIDTH,image.getWidth(null));      String imageType=null;switch (picture.getType()) {case 1:        imageType="png";      break;default :    imageType="png";  break;}jsonObject.addProperty(CommonPictureKeys.TYPE,imageType);String encodedImage=encodeToString(toBufferedImage(image),imageType);jsonObject.addProperty(CommonPictureKeys.IMAGE,encodedImage);} catch (AutomationException e) {e.printStackTrace();}catch (IOException e) {e.printStackTrace();}}return jsonObject;}  }
class C{  public static final void emoteStartDancing2(Npc owner){  owner.unsetState(CreatureState.NPC_IDLE);  owner.setState(CreatureState.ACTIVE);  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,133,0));}  }
class C{  public ShapelessMaterialRecipe(Block output,Object... input){  this(new ItemStack(output),input);}  }
class C{  public static String acceptRoleAssignment(HttpServletRequest request,HttpServletResponse response){  ServletContext ctx=(ServletContext)request.getAttribute("servletContext");  RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");  Locale locale=UtilHttp.getLocale(request);  if (addToOrderRole(request)) {    try {      EventHandler eh=rh.getEventFactory().getEventHandler("service");      eh.invoke(new Event("service","","wfAcceptRoleAssignment",true),null,request,response);    } catch (    EventHandlerException e) {      Debug.logError(e,"Invocation error",module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderFailedToInvokeTheWfAcceptRoleAssignmentService",locale));      return "error";    }    return "success";  }  return "error";}  }
class C{  public void testRegistration(){  supervisionNotifier.registerAsListener(supervisionTagNotifier);  mockControl.replay();  supervisionTagNotifier.init();  mockControl.verify();}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'QUN' ("+ "'QUN_ID' TEXT PRIMARY KEY NOT NULL ,"+ "'NAME' TEXT,"+ "'PORTRAIT_URI' TEXT,"+ "'DISPLAY_NAME' TEXT,"+ "'ROLE' TEXT,"+ "'TIMESTAMP' INTEGER);");}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  ServicePanel servicePanel=((RemoteServiceBrowser)getViewer()).getServicePanel();  if (servicePanel != null) {    new Message(getViewer().getFrame(),servicePanel.getService().getInfo());  }}  }
class C{  @Override public void startPrefixMapping(String prefix,String uri) throws SAXException {  return;}  }
class C{  public NGramHistoDocument(int iMinGraphSize,int iMaxGraphSize,int iGraphCorrelationWindow,int iMinHistogramSize,int iMaxHistogramSize){  Graph=new DocumentNGramGraph(iMinGraphSize,iMaxGraphSize,iGraphCorrelationWindow);  Histogram=new DocumentNGramHistogram(iMinHistogramSize,iMaxHistogramSize);}  }
class C{  public Long putClassLoader(ClassLoader classLoader){  if (classLoader == null)   throw new IllegalArgumentException("Argument cannot be null - 'classLoader'.");  Long previousId=_classLoaderToIdMap.get(classLoader);  if (previousId != null)   return previousId;synchronized (_lock) {    previousId=_classLoaderToIdMap.get(classLoader);    if (previousId != null)     return previousId;    removeMarkers();    long id=generateClassLoaderKey();    if (_logger.isLoggable(Level.FINE))     _logger.fine("introducing new class loader to cache [" + ClassLoaderHelper.getClassLoaderLogName(classLoader) + "] to the class provider, class loader designated id is "+ id);    _classLoaders.put(id,new ClassLoaderContext(classLoader,Represent.REGULAR));    _classLoaderToIdMap.put(classLoader,id);    return id;  }}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{0.00500250166792,0.0502516792675,0.126589039921,0.256466471938,0.526802578289,34.5387763949,23.0258509299,18.4443972706,14.9786613678,11.5129254650};}  }
class C{  public NodeELResolver(){  XPathFactory factory=XPathFactory.newInstance();  xpath=factory.newXPath();}  }
class C{  protected void addDefaultComponents(final ContextInitializer initializer){  initializer.addComponents(new AssetService(),new SkinAssetAnnotationProcessor(),localeService=new LocaleService(),new I18nBundleAnnotationProcessor(),new PreferenceAnnotationProcessor(),new SkinAnnotationProcessor(),new StageViewportAnnotationProcessor(),new PreferencesService(),new ViewAnnotationProcessor(),new ViewDialogAnnotationProcessor(),new ViewActionContainerAnnotationProcessor(),new ViewStageAnnotationProcessor(),new LmlMacroAnnotationProcessor(),new LmlParserSyntaxAnnotationProcessor(),new AvailableLocalesAnnotationProcessor(),interfaceService=new InterfaceService(),new SkinService(),modelService=new ModelService(),shortcutHandler=new GlobalShortcutHandler(),componentExtractor=new ComponentExtractor());}  }
class C{  public void values(ArrayList list){  Object[] val=values;  byte[] stat=state;  for (int i=stat.length; i-- > 0; ) {    if (stat[i] == FULL)     list.add(val[i]);  }}  }
class C{  public String toString(){switch (type) {case APPEND:    return "A " + parentId + " "+ taxId+ " '"+ taxName+ "'";case DELETE:  return "D " + taxId;case RENAME:return "R " + taxId + " '"+ taxName+ "'";default :return "NONE";}}  }
class C{  @Override public String toString(){  return toString(false);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public ReceiveResultBehaviour(ResultsAgent a,long lInterval,PrintStream pResultOutput){  super(a,lInterval);  myAgent=a;  Interval=lInterval;  pOut=pResultOutput;}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  public ConfigExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @Nullable public static PsiNamedElement findInScope(PsiElement element,String name){  PsiNamedElement[] resultHolder=new PsiNamedElement[1];  Processor<BuildElement> processor=null;  searchInScope(element,processor);  return resultHolder[0];}  }
class C{  public static void deleteLocalDataLoadFolderLocation(CarbonLoadModel loadModel,boolean isCompactionFlow){  String databaseName=loadModel.getDatabaseName();  String tableName=loadModel.getTableName();  String tempLocationKey=databaseName + CarbonCommonConstants.UNDERSCORE + tableName+ CarbonCommonConstants.UNDERSCORE+ loadModel.getTaskNo();  if (isCompactionFlow) {    tempLocationKey=CarbonCommonConstants.COMPACTION_KEY_WORD + '_' + tempLocationKey;  }  String localStoreLocation=CarbonProperties.getInstance().getProperty(tempLocationKey,CarbonCommonConstants.STORE_LOCATION_DEFAULT_VAL);  try {    CarbonUtil.deleteFoldersAndFiles(new File[]{new File(localStoreLocation).getParentFile()});    LOGGER.info("Deleted the local store location" + localStoreLocation);  } catch (  CarbonUtilException e) {    LOGGER.error(e,"Failed to delete local data load folder location");  }}  }
class C{  protected final boolean handleVarNode(final VarNode src){  boolean ret=false;  if (src.getReplacement() != src)   throw new RuntimeException("Got bad node " + src + " with rep "+ src.getReplacement());  final PointsToSetInternal newP2Set=src.getP2Set().getNewSet();  if (newP2Set.isEmpty())   return false;  if (ofcg != null) {    QueueReader<Node> addedEdges=pag.edgeReader();    ofcg.updatedNode(src);    ofcg.build();    while (addedEdges.hasNext()) {      Node addedSrc=(Node)addedEdges.next();      Node addedTgt=(Node)addedEdges.next();      ret=true;      if (addedSrc instanceof VarNode) {        if (addedTgt instanceof VarNode) {          VarNode edgeSrc=(VarNode)addedSrc;          VarNode edgeTgt=(VarNode)addedTgt;          if (edgeTgt.makeP2Set().addAll(edgeSrc.getP2Set(),null))           addToWorklist(edgeTgt);        }      } else       if (addedSrc instanceof AllocNode) {        AllocNode edgeSrc=(AllocNode)addedSrc;        VarNode edgeTgt=(VarNode)addedTgt;        if (edgeTgt.makeP2Set().add(edgeSrc))         addToWorklist(edgeTgt);      }      FieldRefNode frn=null;      if (addedSrc instanceof FieldRefNode)       frn=(FieldRefNode)addedSrc;      if (addedTgt instanceof FieldRefNode)       frn=(FieldRefNode)addedTgt;      if (frn != null) {        VarNode base=frn.getBase();        if (fieldToBase.put(frn.getField(),base)) {          aliasWorkList.add(base);        }      }    }  }  Node[] simpleTargets=pag.simpleLookup(src);  for (  Node element : simpleTargets) {    if (element.makeP2Set().addAll(newP2Set,null)) {      addToWorklist((VarNode)element);      ret=true;    }  }  Node[] storeTargets=pag.storeLookup(src);  for (  Node element : storeTargets) {    final FieldRefNode fr=(FieldRefNode)element;    if (fr.makeP2Set().addAll(newP2Set,null)) {      fieldRefWorkList.add(fr);      ret=true;    }  }  src.getP2Set().flushNew();  return ret;}  }
class C{  @Override public void put(Collection<SinkRecord> sinkRecords) throws ConnectException {  for (  SinkRecord record : sinkRecords) {    fLog.trace("Put message {}",record.value());    try {      iParser.parse(record.value().toString());      for (int i=0; i < iPaths.length; ++i) {        Element element=iParser.getElement(iPaths[i]);        if (element == null) {        } else {          String string=element.toString();          if (string.equals("null")) {          } else {            if (string.charAt(0) == '"')             iWriter.append(string.substring(1,string.length() - 1)); else             iWriter.append(string);          }        }        iWriter.next();      }    } catch (    IOException exception) {      throw new ConnectException(exception);    }  }}  }
class C{  private void load(DataInput input) throws IOException {  magic=input.readInt();  version=input.readInt();  type=input.readInt();}  }
class C{  public MyDialog heightParam(int height){  if (mLayoutHeight != height) {    mLayoutHeight=height;    if (isShowing() && mContentView != null) {      mRunShowAnimation=true;      mContainer.forceLayout();      mContainer.requestLayout();    }  }  return this;}  }
class C{  private BlobStoreStreaming(){}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  final ClusterViewer viewer=getViewer();  int max=viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(null).size();  np.matchIgnoreCase("set triplotSize=");  int number=np.getInt(0,max);  np.matchIgnoreCase(";");  viewer.getPcoaTab().setTriplotSize(number);}  }
class C{  @Override public synchronized boolean isActive(){  return this.active;}  }
class C{  public static void write(File file,CharSequence data) throws IOException {  write(file,data,Charset.defaultCharset(),false);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  BookDao.dropTable(db,ifExists);}  }
class C{  public AdsDeleteCampaignsQuery deleteCampaigns(UserActor actor,int accountId,String ids){  return new AdsDeleteCampaignsQuery(getClient(),actor,accountId,ids);}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyleAttr){  this(context,attrs,defStyleAttr,0);}  }
class C{  public Builder traceTaskExecutionWarnTimeUs(long timeUs){  this.traceTaskExecutionWarnTimeUs=timeUs;  return this;}  }
class C{  public static void o(Zdiagmat D,int w,int d){  int n=D.order;  int ww=w + d + 10;  int ncp=(Parameters.PageWidth) / ww;  int jl=0;  while (jl < n) {    int ju=Math.min(n,jl + ncp);    System.out.print("\n");    String head="";    for (int j=jl; j < ju; j++) {      head=Integer.toString(j + D.bx);      while (head.length() < ww)       head=" " + head;      System.out.print(head);    }    System.out.print("\n");    for (int j=jl; j < ju; j++) {      System.out.print(ZtoEstring(new Z(D.re[j],D.im[j]),w,d));    }    System.out.print("\n");    jl=jl + ncp;  }}  }
class C{  protected void writePixels() throws IOException {  Encoder encoder=new Encoder(width,height,indexedPixels,colorDepth);  encoder.encode(out);}  }
class C{  public static double[] weightsFor(List<Double> vector){  List<double[]> coords=coordSplit(vector);  double[] x=coords.get(0);  double[] y=coords.get(1);  double meanX=sum(x) / x.length;  double meanY=sum(y) / y.length;  double sumOfMeanDifferences=sumOfMeanDifferences(x,y);  double xDifferenceOfMean=sumOfMeanDifferencesOnePoint(x);  double w_1=sumOfMeanDifferences / xDifferenceOfMean;  double w_0=meanY - (w_1) * meanX;  double[] ret=new double[vector.size()];  ret[0]=w_0;  ret[1]=w_1;  return ret;}  }
class C{  public void addRepurchaseItems(Player player,List<Item> items){  repurchaseItems.putAll(player.getObjectId(),items);}  }
class C{  public void prune(double dMinCoexistenceImportance){}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  protected TimelineReader loadAudioTimeline(String fileName) throws IOException, MaryConfigurationException {  return new TimelineReader(fileName);}  }
class C{  public boolean allowNamespace(String namespace){  if (fType == NSCONSTRAINT_ANY)   return true;  if (fType == NSCONSTRAINT_NOT) {    boolean found=false;    int listNum=fNamespaceList.length;    for (int i=0; i < listNum && !found; i++) {      if (namespace == fNamespaceList[i])       found=true;    }    if (!found)     return true;  }  if (fType == NSCONSTRAINT_LIST) {    int listNum=fNamespaceList.length;    for (int i=0; i < listNum; i++) {      if (namespace == fNamespaceList[i])       return true;    }  }  return false;}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  @Override public void onClick(View expirationView){  if (mPublicShare != null && mPublicShare.getExpirationDate() > 0) {    long chosenDateInMillis=-1;    if (mPublicShare != null) {      chosenDateInMillis=mPublicShare.getExpirationDate();    }    ExpirationDatePickerDialogFragment dialog=ExpirationDatePickerDialogFragment.newInstance(mFile,chosenDateInMillis);    dialog.show(getActivity().getSupportFragmentManager(),ExpirationDatePickerDialogFragment.DATE_PICKER_DIALOG);  }}  }
class C{  @NonNull private JSONObject createJSONObject(PointF screenXY,PointF pageXY,float pointerId){  JSONObject jsonObject=new JSONObject();  jsonObject.put(GestureInfo.PAGE_X,pageXY.x);  jsonObject.put(GestureInfo.PAGE_Y,pageXY.y);  jsonObject.put(GestureInfo.SCREEN_X,screenXY.x);  jsonObject.put(GestureInfo.SCREEN_Y,screenXY.y);  jsonObject.put(GestureInfo.POINTER_ID,pointerId);  return jsonObject;}  }
class C{  public FieldVector3D<T> applyTo(final FieldVector3D<T> u){  final T x=u.getX();  final T y=u.getY();  final T z=u.getZ();  final T s=q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));  return new FieldVector3D<T>(q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),q0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),q0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));}  }
class C{  public GroupsGetRequestsQueryWithFields(VkApiClient client,UserActor actor,int groupId,List<UserField> fields){  super(client,"groups.getRequests",GetRequestsFieldsResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  fields(fields);}  }
class C{  public IVarAbstraction findAndInsertInstanceField(AllocNode obj,SparkField field){  AllocDotField af=findAllocDotField(obj,field);  IVarAbstraction pn=null;  if (af == null) {    Type decType=((SootField)field).getDeclaringClass().getType();    Type baseType=obj.getType();    if (typeManager.castNeverFails(baseType,decType)) {      af=makeAllocDotField(obj,field);      pn=makeInternalNode(af);      pointers.add(pn);    }  } else {    pn=consG.get(af);  }  return pn;}  }
class C{  public void updatePreferences(boolean isEnabled){  if (mIsEnabled == isEnabled)   return;  getPreferenceScreen().removeAll();  createDataReductionSwitch(isEnabled);  if (isEnabled) {    addPreferencesFromResource(R.xml.data_reduction_preferences);    updateReductionStatistics();  } else {    addPreferencesFromResource(R.xml.data_reduction_preferences_off);    if (!DataReductionProxySettings.getInstance().isIncludedInAltFieldTrial()) {      getPreferenceScreen().removePreference(findPreference("data_reduction_experiment_text"));      getPreferenceScreen().removePreference(findPreference("data_reduction_experiment_link"));    }  }  mIsEnabled=isEnabled;}  }
class C{  private List<ProcessChange> applyConfigElement(final ConfigurationElement element,final ConfigurationElementReport elementReport) throws IllegalAccessException {  List<ProcessChange> daqConfigEvents=new ArrayList<ProcessChange>();  if (log.isTraceEnabled()) {    log.trace(element.getConfigId() + " Applying configuration element with sequence id " + element.getSequenceId());  }  if (element.getAction() == null || element.getEntity() == null || element.getEntityId() == null) {    elementReport.setFailure("Parameter missing in configuration line with sequence id " + element.getSequenceId());    return null;  }switch (element.getAction()) {case CREATE:switch (element.getEntity()) {case DATATAG:      daqConfigEvents.add(dataTagConfigHandler.createDataTag(element));    break;case RULETAG:  ruleTagConfigHandler.createRuleTag(element);break;case CONTROLTAG:daqConfigEvents.add(controlTagConfigHandler.createControlTag(element));break;case COMMANDTAG:daqConfigEvents=commandTagConfigHandler.createCommandTag(element);break;case ALARM:alarmConfigHandler.createAlarm(element);break;case PROCESS:daqConfigEvents.add(processConfigHandler.createProcess(element));element.setDaqStatus(Status.RESTART);break;case EQUIPMENT:daqConfigEvents.addAll(equipmentConfigHandler.createEquipment(element));break;case SUBEQUIPMENT:daqConfigEvents.addAll(subEquipmentConfigHandler.createSubEquipment(element));break;case DEVICECLASS:daqConfigEvents.add(deviceClassConfigHandler.createDeviceClass(element));break;case DEVICE:daqConfigEvents.add(deviceConfigHandler.createDevice(element));break;default :elementReport.setFailure("Unrecognized reconfiguration entity: " + element.getEntity());log.warn("Unrecognized reconfiguration entity: {} - see reconfiguration report for details.",element.getEntity());}break;case UPDATE:switch (element.getEntity()) {case DATATAG:daqConfigEvents.add(dataTagConfigHandler.updateDataTag(element.getEntityId(),element.getElementProperties()));break;case CONTROLTAG:daqConfigEvents.add(controlTagConfigHandler.updateControlTag(element.getEntityId(),element.getElementProperties()));break;case RULETAG:ruleTagConfigHandler.updateRuleTag(element.getEntityId(),element.getElementProperties());break;case COMMANDTAG:daqConfigEvents.addAll(commandTagConfigHandler.updateCommandTag(element.getEntityId(),element.getElementProperties()));break;case ALARM:alarmConfigHandler.updateAlarm(element.getEntityId(),element.getElementProperties());break;case PROCESS:daqConfigEvents.add(processConfigHandler.updateProcess(element.getEntityId(),element.getElementProperties()));break;case EQUIPMENT:daqConfigEvents.addAll(equipmentConfigHandler.updateEquipment(element.getEntityId(),element.getElementProperties()));break;case SUBEQUIPMENT:daqConfigEvents.addAll(subEquipmentConfigHandler.updateSubEquipment(element.getEntityId(),element.getElementProperties()));break;case DEVICECLASS:daqConfigEvents.add(deviceClassConfigHandler.updateDeviceClass(element.getEntityId(),element.getElementProperties()));break;case DEVICE:daqConfigEvents.add(deviceConfigHandler.updateDevice(element.getEntityId(),element.getElementProperties()));break;default :elementReport.setFailure("Unrecognized reconfiguration entity: " + element.getEntity());log.warn("Unrecognized reconfiguration entity: {}  - see reconfiguration report for details.",element.getEntity());}break;case REMOVE:switch (element.getEntity()) {case DATATAG:daqConfigEvents.add(dataTagConfigHandler.removeDataTag(element.getEntityId(),elementReport));break;case CONTROLTAG:daqConfigEvents.add(controlTagConfigHandler.removeControlTag(element.getEntityId(),elementReport));break;case RULETAG:ruleTagConfigHandler.removeRuleTag(element.getEntityId(),elementReport);break;case COMMANDTAG:daqConfigEvents.addAll(commandTagConfigHandler.removeCommandTag(element.getEntityId(),elementReport));break;case ALARM:alarmConfigHandler.removeAlarm(element.getEntityId(),elementReport);break;case PROCESS:daqConfigEvents.add(processConfigHandler.removeProcess(element.getEntityId(),elementReport));break;case EQUIPMENT:daqConfigEvents.add(equipmentConfigHandler.removeEquipment(element.getEntityId(),elementReport));break;case SUBEQUIPMENT:daqConfigEvents.addAll(subEquipmentConfigHandler.removeSubEquipment(element.getEntityId(),elementReport));break;case DEVICECLASS:deviceClassConfigHandler.removeDeviceClass(element.getEntityId(),elementReport);break;case DEVICE:deviceConfigHandler.removeDevice(element.getEntityId(),elementReport);break;default :elementReport.setFailure("Unrecognized reconfiguration entity: " + element.getEntity());log.warn("Unrecognized reconfiguration entity: {} - see reconfiguration report for details.",element.getEntity());}break;default :elementReport.setFailure("Unrecognized reconfiguration action: " + element.getAction());log.warn("Unrecognized reconfiguration action: {} - see reconfiguration report for details.",element.getAction());}if (!daqConfigEvents.isEmpty()) {for (ProcessChange processChange : daqConfigEvents) {if (processChange.processActionRequired()) {processChange.getChangeEvent().setChangeId(changeId);changeId++;}}}return daqConfigEvents;}  }
class C{  public Builder reduce(IReducer reducer){  actionList.add(new DataAction(reducer));  return this;}  }
class C{  public static String decorate(String name,String formatString,Map bindings){  IDecoratorComponent[][] format=compileFormatString(formatString);  String[] prefixSuffix=decorate(format,bindings);  return prefixSuffix[0] + name + prefixSuffix[1];}  }
class C{  @Override public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {}  }
class C{  public Iterator tuples(){  return new CompositeIterator(edges(),nodes());}  }
class C{  public static void copy(byte[] input,Writer output) throws IOException {  ByteArrayInputStream in=new ByteArrayInputStream(input);  copy(in,output);}  }
class C{  @deprecated protected TimeZoneFormat(ULocale locale){  this._locale=locale;  this._tznames=TimeZoneNames.getInstance(locale);  String gmtPattern=null;  String hourFormats=null;  this._gmtZeroFormat="GMT";  try {    ICUResourceBundle bundle=(ICUResourceBundle)ICUResourceBundle.getBundleInstance("com/ibm/icu/impl/data/icudt48b/zone",locale);    try {      gmtPattern=bundle.getStringWithFallback("zoneStrings/gmtFormat");    } catch (    MissingResourceException e) {    }    try {      hourFormats=bundle.getStringWithFallback("zoneStrings/hourFormat");    } catch (    MissingResourceException e) {    }    try {      this._gmtZeroFormat=bundle.getStringWithFallback("zoneStrings/gmtZeroFormat");    } catch (    MissingResourceException e) {    }  } catch (  MissingResourceException e) {  }  if (gmtPattern == null) {    gmtPattern="GMT{0}";  }  initGMTPattern(gmtPattern);  String[] gmtOffsetPatterns=new String[GMTOffsetPatternType.values().length];  if (hourFormats != null) {    String[] hourPatterns=hourFormats.split(";",2);    gmtOffsetPatterns[GMTOffsetPatternType.POSITIVE_HM.ordinal()]=hourPatterns[0];    gmtOffsetPatterns[GMTOffsetPatternType.POSITIVE_HMS.ordinal()]=expandOffsetPattern(hourPatterns[0]);    gmtOffsetPatterns[GMTOffsetPatternType.NEGATIVE_HM.ordinal()]=hourPatterns[1];    gmtOffsetPatterns[GMTOffsetPatternType.NEGATIVE_HMS.ordinal()]=expandOffsetPattern(hourPatterns[1]);  } else {    for (    GMTOffsetPatternType patType : GMTOffsetPatternType.values()) {      gmtOffsetPatterns[patType.ordinal()]=patType.defaultPattern();    }  }  initGMTOffsetPatterns(gmtOffsetPatterns);  this._gmtOffsetDigits=DEFAULT_GMT_DIGITS;  NumberingSystem ns=NumberingSystem.getInstance(locale);  if (!ns.isAlgorithmic()) {    this._gmtOffsetDigits=toCodePoints(ns.getDescription());  }}  }
class C{  public void load(SampleAttributeTable sampleAttributeTable){  if (originalBytes == null)   originalBytes=sampleAttributeTable.getBytes();  samplesOrder.clear();  samplesOrder.addAll(sampleAttributeTable.getSampleOrder());  attributesOrder.clear();  hiddenAttribute2Data.clear();  for (  String attribute : sampleAttributeTable.getAttributeOrder()) {    if (!sampleAttributeTable.isSecretAttribute(attribute)) {      attributesOrder.add(attribute);      if (sampleAttributeTable.isHiddenAttribute(attribute)) {        Map<String,Object> sample2value=new HashMap<>();        for (        String sample : sampleAttributeTable.getSampleOrder()) {          sample2value.put(sample,sampleAttributeTable.get(sample,attribute));        }        hiddenAttribute2Data.put(attribute,sample2value);      }    }  }  for (  String attribute : sampleAttributeTable.getAttributeOrder()) {    if (sampleAttributeTable.isSecretAttribute(attribute)) {      secretAttributesOrder.add(attribute);      Map<String,Object> sample2value=new HashMap<>();      for (      String sample : sampleAttributeTable.getSampleOrder()) {        sample2value.put(sample,sampleAttributeTable.get(sample,attribute));      }      secretAttribute2Data.put(attribute,sample2value);    }  }  final List<ObservableList<SpreadsheetCell>> rows=new LinkedList<>();{    final ObservableList<String> rowHeaders=gridBase.getRowHeaders();    rowHeaders.clear();    rowHeaders.add("");    for (int r=1; r <= sampleAttributeTable.getNumberOfSamples(); r++)     rowHeaders.add(String.format("%d",r));  }{    final ObservableList<String> colHeaders=gridBase.getColumnHeaders();    colHeaders.add("");    int c=1;    for (    String attribute : attributesOrder) {      if (!sampleAttributeTable.isSecretAttribute(attribute)) {        if (!sampleAttributeTable.isHiddenAttribute(attribute))         colHeaders.add(getAlpha(c));        c++;      }    }  }{    final ObservableList<SpreadsheetCell> row=FXCollections.observableArrayList();    int c=0;{      SpreadsheetCell cell=SpreadsheetCellType.STRING.createCell(0,c++,1,1,SampleAttributeTable.SAMPLE_ID);      row.add(cell);    }    for (    String attribute : attributesOrder) {      if (!sampleAttributeTable.isHiddenAttribute(attribute)) {        SpreadsheetCell cell=SpreadsheetCellType.STRING.createCell(0,c++,1,1,attribute);        row.add(cell);      }    }    rows.add(row);  }{    int r=1;    for (    String sample : sampleAttributeTable.getSampleOrder()) {      final ObservableList<SpreadsheetCell> row=FXCollections.observableArrayList();      SpreadsheetCell firstCell=SpreadsheetCellType.STRING.createCell(r,0,1,1,sample);      firstCell.setEditable(false);      row.add(firstCell);      int c=1;      for (      String attribute : attributesOrder) {        if (!sampleAttributeTable.isHiddenAttribute(attribute)) {          Object label=sampleAttributeTable.get(sample,attribute);          SpreadsheetCell cell=SpreadsheetCellType.STRING.createCell(r,c++,1,1,label != null ? label.toString() : "");          row.add(cell);        }      }      rows.add(row);      r++;    }  }  gridBase.setRows(new LinkedList<ObservableList<SpreadsheetCell>>());  gridBase.setRows(rows);}  }
class C{  public Dfp newDfp(final double x){  return new Dfp(this,x);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSkill_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201268,skillcaster,skillname);}  }
class C{  public int memberOf(){  return theType.memberOf();}  }
class C{  @Override public boolean exclude(String identifier){  return blacklist.contains(identifier);}  }
class C{  public void rescan(ProgressListener progress) throws IOException, CanceledException {  progress.setSubtask("Scanning...");  lock.lock();  try {    files.clear();    List<File> files=Basic.getAllFilesInDirectory(rootDirectory,RMAFileFilter.getInstance(),true,progress);    for (    File file : files) {      File relative=Basic.getRelativeFile(file,rootDirectory);      this.files.add(relative.getPath());      MeganFile meganFile=new MeganFile();      meganFile.setFileFromExistingFile(file.getPath(),true);      if (meganFile.hasDataConnector()) {        IConnector connector=meganFile.getDataConnector();        DataTable dataTable=new DataTable();        SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();        SyncArchiveAndDataTable.syncArchive2Summary(meganFile.getFileName(),connector,dataTable,sampleAttributeTable);        Object description=sampleAttributeTable.get(meganFile.getName(),"Description");        if (description == null)         description=meganFile.getName();        fileName2Description.put(relative.getParent(),description.toString());      }    }  }  finally {    lock.unlock();  }}  }
class C{  public boolean isSetMessageType(){  return __isset_bit_vector.get(__MESSAGETYPE_ISSET_ID);}  }
class C{  public boolean chiSquareTest(final double[] expected,final long[] observed,final double alpha) throws MathIllegalArgumentException, MathIllegalStateException {  if ((alpha <= 0) || (alpha > 0.5)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,alpha,0,0.5);  }  return chiSquareTest(expected,observed) < alpha;}  }
class C{  public void java_lang_reflect_Array_multiNewArray(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  public Element next(){  return theNext;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  static Pair<DistributedLogClient,MonitorServiceClient> createDistributedLogClient(SocketAddress host,DistributedLogClientBuilder clientBuilder){  DistributedLogClientBuilder newBuilder=DistributedLogClientBuilder.newBuilder(clientBuilder).host(host);  return ClientUtils.buildClient(newBuilder);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  private boolean focusCenter(){  return !showGuidelines();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignLShiftExpr fullCopy(){  AssignLShiftExpr tree=(AssignLShiftExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Matrix timesEquals(double s){  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s * A[i][j];    }  }  return this;}  }
class C{  protected void performTypingAction(Editor editor,char typedChar){  EditorTestUtil.performTypingAction(editor,typedChar);  getProject().getComponent(PostprocessReformattingAspect.class).doPostponedFormatting();  PsiDocumentManager.getInstance(getProject()).commitAllDocuments();}  }
class C{  public static void o(Z[][] A){  o(A,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);}  }
class C{  public boolean isAggregate(){  return true;}  }
class C{  public Builder diskCacheExtraOptions(int maxImageWidthForDiskCache,int maxImageHeightForDiskCache,BitmapProcessor processorForDiskCache){  this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;  this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;  this.processorForDiskCache=processorForDiskCache;  return this;}  }
class C{  public ColourFieldConfig(FieldIdEnum colour,FieldIdEnum opacity,FieldIdEnum width){  super();  this.colour=colour;  this.opacity=opacity;  this.width=width;}  }
class C{  public static Element firstChildElement(Element element,String childElementName){  if (element == null)   return null;  if (UtilValidate.isEmpty(childElementName))   return null;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && (childElementName == null || childElementName.equals(node.getLocalName() != null ? node.getLocalName() : node.getNodeName()))) {        Element childElement=(Element)node;        return childElement;      }    } while ((node=node.getNextSibling()) != null);  }  return null;}  }
class C{  public void callEvent(Event event){  if (event.isAsynchronous()) {    if (Thread.holdsLock(this)) {      throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code.");    }    if (server.isPrimaryThread()) {      throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread.");    }    fireEvent(event);  } else {synchronized (this) {      fireEvent(event);    }  }}  }
class C{  public InvalidConfigurationException(String msg){  super(msg);}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public RequestParams(final String key,final String value){  this(new HashMap<String,String>(){{      put(key,value);    }  });}  }
class C{  public static float log(float fValue){  return (float)Math.log(fValue);}  }
class C{  public NotificationsGetQuery filters(List<NotificationsGetFilter> value){  return unsafeParam("filters",value);}  }
class C{  public void mapVectors(float[] vecs){  if (vecs == null || vecs.length % 2 != 0) {    return;  }  for (int i=0; i < vecs.length / 2; i++) {    float[] result=mapVector(vecs[i * 2],vecs[i * 2 + 1]);    vecs[i * 2]=result[0];    vecs[i * 2 + 1]=result[1];  }}  }
class C{  public void applyMirroredCorrection(ResultPoint[] points){  if (!mirrored || points == null || points.length < 3) {    return;  }  ResultPoint bottomLeft=points[0];  points[0]=points[2];  points[2]=bottomLeft;}  }
class C{  public void removeAllUpdateListeners(){  listeners.clear();}  }
class C{  public boolean popped(int width,int height,int topMargin){  if (y + radius <= -20 || y - radius >= height || x + radius <= 0 || x - radius >= width || y - radius <= topMargin) {    return true;  }  return false;}  }
class C{  public ZWaveTimeParametersCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  put(key,new Long(value));  return this;}  }
class C{  public void begin(int size){  debugPrint("opening Stream...");  openLine(currentFormat);  reset();  debugPrint("...Stream opened");}  }
class C{  private List<Experiment.ID> expectedResult(List<Map<String,byte[]>> queryResult){  List<Experiment.ID> resultList=new ArrayList<>(queryResult.size());  queryResult.forEach(null);  return resultList;}  }
class C{  static boolean checkSumm(int a,int b){  if ((a + b >= 10) && (a + b <= 20)) {    return true;  } else {    return false;  }}  }
class C{  public void add(Predicate p,StrokeAction f){  super.add(p,f);}  }
class C{  public EnergyNormaliser(double energyFactor){  this.amplitudeFactor=Math.sqrt(energyFactor);  this.referencePower=-1;}  }
class C{  public Vector1DFormat(){  super(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,CompositeFormat.getDefaultNumberFormat());}  }
class C{  private void shortPulling(ClientSession client,Map<String,String> configItems,HttpServletResponse resp){  sendUpdatedConfigsIfPossible(client.getAppId(),configItems,resp);}  }
class C{  protected NotesGetByIdQuery noteId(int value){  return unsafeParam("note_id",value);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static void init(String homePropName,String confName) throws Exception {  Config.confName=confName;  home=System.getProperty(homePropName);  if (home == null) {    home=System.getenv(homePropName);  }  if (home == null)   throw new Exception(homePropName + " does not exist.");  if (new File(home + File.separator + "log4j.properties").exists()) {    PropertyConfigurator.configure(home + File.separator + "log4j.properties");  } else {    Properties prop=new Properties();    prop.setProperty("log4j.rootLogger","error, stdout");    prop.setProperty("log4j.appender.stdout","org.apache.log4j.ConsoleAppender");    prop.setProperty("log4j.appender.stdout.layout","org.apache.log4j.PatternLayout");    prop.setProperty("log4j.logger.com.giiwa","info");    PropertyConfigurator.configure(prop);  }  PropertiesConfiguration c1=null;  String file=home + File.separator + confName+ ".properties";  if (new File(file).exists()) {    c1=new PropertiesConfiguration(file);    c1.setEncoding("utf-8");    System.out.println("load config: " + file);  } else {    System.out.println(file + " no found!");  }  if (c1 != null) {    if (conf == null) {      conf=c1;    } else {      conf.append(c1);    }  }  if (conf == null) {    conf=new PropertiesConfiguration();  }  conf.addProperty("home",home);  List<String> list=conf.getList("@include");  Set<String> ss=new HashSet<String>();  ss.addAll(list);  for (  String s : ss) {    if (s.startsWith(File.separator)) {      if (new File(s).exists()) {        PropertiesConfiguration c=new PropertiesConfiguration(s);        c.setEncoding("utf-8");        conf.append(c);      } else {        System.out.println("Can't find the configuration file, file=" + s);      }    } else {      String s1=home + "/conf/" + s;      if (new File(s1).exists()) {        PropertiesConfiguration c=new PropertiesConfiguration(s1);        c.setEncoding("utf-8");        conf.append(c);      } else {        System.out.println("Can't find the configuration file, file=" + s1);      }    }  }  if (!conf.containsKey("site.name")) {    conf.setProperty("site.name","default");  }  Iterator it=conf.getKeys();  while (it.hasNext()) {    Object name=it.next();    Object v=conf.getProperty(name.toString());    if (v != null && v instanceof String) {      String s=(String)v;      int i=s.indexOf("${");      while (i > -1) {        int j=s.indexOf("}",i + 2);        String n=s.substring(i + 2,j);        String s1=System.getProperty(n);        if (s1 == null) {          System.out.println("did not set -D" + n + ", but required in "+ home+ ".properites");          break;        } else {          s=s.substring(0,i) + s1 + s.substring(j + 1);          i=s.indexOf("${");        }      }      conf.setProperty(name.toString(),s);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_HEAL_ME_to_B(String protector,int num0,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201181,protector,num0,skilltarget);}  }
class C{  public void requestQueryFocus(){  mFindQuery.requestFocus();  showKeyboard();}  }
class C{  public StatusGetQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public void saveEntity(final ProxyEntity proxyEntity){  final Session session=this.sessionFactory.openSession();  final Transaction transaction=session.beginTransaction();  session.saveOrUpdate(proxyEntity);  transaction.commit();  session.close();}  }
class C{  public void transformValues(TIntFunction function){  for (int i=_pos; i-- > 0; ) {    _data[i]=function.execute(_data[i]);  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_NPC_FOUND_IN_OTHER_WORLD(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300754,value0,value1);}  }
class C{  public DocsSaveQuery save(Actor actor,String file){  return new DocsSaveQuery(getClient(),actor,file);}  }
class C{  @ApiMethod(path="{type}/count",verb=ApiVerb.GET,description="Returns the number of entries in space of the specified type\n",produces={MediaType.APPLICATION_JSON_VALUE}) @RequestMapping(value="/{type}/count",method=RequestMethod.GET,produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> count(@ApiPathParam(name="type",description=TYPE_DESCRIPTION) @PathVariable String type) throws ObjectNotFoundException {  GigaSpace gigaSpace=ControllerUtils.xapCache.get();  Integer cnt;  try {    cnt=gigaSpace.count(new SpaceDocument(type));  } catch (  DataAccessException e) {    throw translateDataAccessException(gigaSpace,e,type);  }  if (cnt == null) {    cnt=0;  }  Map<String,Object> result=new Hashtable<String,Object>();  result.put("status","success");  result.put("data",cnt);  return result;}  }
class C{  private void digitsToWords(WordRelation wordRelation,Item tokenItem,String tokenVal){  FeatureSet featureSet=tokenItem.getFeatures();  String nsw="";  if (featureSet.isPresent("nsw")) {    nsw=featureSet.getString("nsw");  }  if (nsw.equals("nide")) {    NumberExpander.expandID(tokenVal,wordRelation,tokenItem);  } else {    String rName=featureSet.getString("name");    String digitsType=null;    if (tokenVal.equals(rName)) {      digitsType=(String)cart.interpret(tokenItem);    } else {      featureSet.setString("name",tokenVal);      digitsType=(String)cart.interpret(tokenItem);      featureSet.setString("name",rName);    }    if (digitsType.equals("ordinal")) {      NumberExpander.expandOrdinal(tokenVal,wordRelation,tokenItem);    } else     if (digitsType.equals("digits")) {      NumberExpander.expandDigits(tokenVal,wordRelation,tokenItem);    } else     if (digitsType.equals("year")) {      NumberExpander.expandID(tokenVal,wordRelation,tokenItem);    } else {      NumberExpander.expandNumber(tokenVal,wordRelation,tokenItem);    }  }}  }
class C{  public BinaryBitmap crop(int left,int top,int width,int height){  LuminanceSource newSource=binarizer.getLuminanceSource().crop(left,top,width,height);  return new BinaryBitmap(binarizer.createBinarizer(newSource));}  }
class C{  private void collapseGroup(ExpandableListPosition listPosition){  expandableList.expandedGroupIndexes.put(listPosition.groupPos,false);  if (listener != null) {    listener.onGroupCollapsed(expandableList.getFlattenedGroupIndex(listPosition) + 1,expandableList.groups.get(listPosition.groupPos).getItemCount());  }}  }
class C{  private void scrollFinished(){  if (mEdgeSwipeHandler != null && mEdgeSwipeStarted) {    mEdgeSwipeHandler.swipeFinished();  }  mEdgeSwipeStarted=false;}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_USEMONEY(int num0){  return new SM_SYSTEM_MESSAGE(1300757,num0);}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArrayList(String key,ArrayList<CharSequence> value){  bundle.putCharSequenceArrayList(key,value);  return this;}  }
class C{  public UrlValidator(){  this(null);}  }
class C{  public FriendsGetRequestsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  public void addChildren(MyJTreeNode node){  final Node v=node.getV();  final DefaultTreeModel model=(DefaultTreeModel)getModel();  if (v.getOutDegree() > 0 && node.getChildCount() == 0) {    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {      final Node w=e.getTarget();      final MyJTreeNode wNode=new MyJTreeNode(w);      node.add(wNode);      id2node.put((Integer)w.getInfo(),wNode);      model.nodeStructureChanged(wNode);    }  }  model.nodeStructureChanged(node);}  }
class C{  public static void addLineTag(soot.tagkit.Host host,int sLine,int eLine){  host.addTag(new soot.tagkit.SourceLineNumberTag(sLine,eLine));}  }
class C{  public AemDialog openByContextMenu(){  openByContextMenu(currentScope);  return this;}  }
class C{  public static <T>CompletionStage<T> withRetries(Supplier<CompletionStage<T>> tFactory,int maxRetries){  return tFactory.get().handle(null).thenCompose(null);}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  public RiddersSolver(double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  private UnitTestUtils(){  super();}  }
class C{  @VisibleForTesting boolean syncProject(BlazeContext context){  SyncResult syncResult=SyncResult.FAILURE;  try {    SaveUtil.saveAllFiles();    onSyncStart(project,context);    syncResult=doSyncProject(context);  } catch (  AssertionError|Exception e) {    LOG.error(e);    IssueOutput.error("Internal error: " + e.getMessage()).submit(context);  } finally {    afterSync(project,context,syncResult);  }  return syncResult == SyncResult.SUCCESS || syncResult == SyncResult.PARTIAL_SUCCESS;}  }
class C{  public MarketEditQuery photoIds(List<Integer> value){  return unsafeParam("photo_ids",value);}  }
class C{  public void writeInt(int a) throws IOException {  io.write((byte)(a >> 24));  io.write((byte)(a >> 16));  io.write((byte)(a >> 8));  io.write((byte)(a));}  }
class C{  public static boolean startsWithIgnoreCase(final String string,final String prefix) throws IllegalArgumentException, NullPointerException {  Validate.notNull(string,"Cannot check a null string for a match");  if (string.length() < prefix.length()) {    return false;  }  return string.regionMatches(true,0,prefix,0,prefix.length());}  }
class C{  protected void an(Object object){  org.junit.Assert.assertNull(object);}  }
class C{  public ForceDirectedLayout(String group,ForceSimulator fsim,boolean enforceBounds){  this(group,fsim,enforceBounds,false);}  }
class C{  public Builder tapTolerance(Number tapTolerance){  this.tapTolerance=tapTolerance;  return this;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public boolean dump_solution(){  return soot.PhaseOptions.getBoolean(options,"dump-solution");}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  protected double homoscedasticT(final double m1,final double m2,final double v1,final double v2,final double n1,final double n2){  final double pooledVariance=((n1 - 1) * v1 + (n2 - 1) * v2) / (n1 + n2 - 2);  return (m1 - m2) / FastMath.sqrt(pooledVariance * (1d / n1 + 1d / n2));}  }
class C{  private void cascadePersist(int field,OpCallbacks call,Object value){  if (value == null)   return;  FieldMetaData fmd=getMetaData().getField(field);  Broker broker=(Broker)getBroker();switch (fmd.getDeclaredTypeCode()) {case JavaTypes.PC:case JavaTypes.PC_UNTYPED:    if (!broker.isDetachedNew() && broker.isDetached(value))     return;  StateManager stateManager=(StateManager)broker.persist(value,null,true,call);if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE) stateManager.setOwnerInformation(this,fmd);break;case JavaTypes.ARRAY:broker.persistCollection(Arrays.asList((Object[])value),true,call,this,fmd);break;case JavaTypes.COLLECTION:broker.persistCollection((Collection<?>)value,true,call,this,fmd);break;case JavaTypes.MAP:if (fmd.getKey().getCascadePersist() == ValueMetaData.CASCADE_IMMEDIATE) broker.persistCollection(((Map<?,?>)value).keySet(),true,call,this,fmd);if (fmd.getElement().getCascadePersist() == ValueMetaData.CASCADE_IMMEDIATE) broker.persistCollection(((Map<?,?>)value).values(),true,call,this,fmd);break;}}  }
class C{  public RealMatrix computeCorrelationMatrix(final RealMatrix matrix){  final RealMatrix matrixCopy=rankTransform(matrix);  return new PearsonsCorrelation().computeCorrelationMatrix(matrixCopy);}  }
class C{  public SessionKey(Account acc){  this.accountId=acc.getId();  this.loginOk=Rnd.nextInt();  this.playOk1=Rnd.nextInt();  this.playOk2=Rnd.nextInt();}  }
class C{  public FIRFilter(double[] impulseResponse){  int sliceLen=MathUtils.closestPowerOfTwoAbove(2 * impulseResponse.length) - impulseResponse.length;  initialise(impulseResponse,sliceLen);}  }
class C{  public synchronized Utterance pend(){  Utterance utterance=null;  while (list.size() == 0) {    try {      wait();    } catch (    InterruptedException ie) {      return null;    }  }  utterance=(Utterance)list.removeFirst();  notify();  return utterance;}  }
class C{  public StatusCode withOverflow(){  return new StatusCode(value | 0x480);}  }
class C{  public DefaultErrorDTO(String code,String message,Map<String,Object> metadata){  this.code=code;  this.message=message;  if (metadata == null)   metadata=Collections.emptyMap();  this.metadata=(metadata.isEmpty()) ? Collections.<String,Object>emptyMap() : Collections.unmodifiableMap(new HashMap<>(metadata));}  }
class C{  public static void stopBroker() throws Exception {  broker.stop();}  }
class C{  public AccessPermission(String name){  super(name);  init(name);}  }
class C{  public MessagesDeleteChatPhotoQuery deleteChatPhoto(UserActor actor,int chatId){  return new MessagesDeleteChatPhotoQuery(getClient(),actor,chatId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_Instant_HEAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200689,num0,skillcaster,skillname);}  }
class C{  final public void redirect(String url){  resp.setHeader("Location",url);  setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);}  }
class C{  public <T>void send(T message,Object token){  sendToTargetOrType(message,null,token);}  }
class C{  public Node<K,V> last(){  Node<K,V> node=this;  Node<K,V> child=node.right;  while (child != null) {    node=child;    child=node.right;  }  return node;}  }
class C{  public static double distanceInf(Vector1D p1,Vector1D p2){  return p1.distanceInf(p2);}  }
class C{  public FloatDataType(float f){  this.f=f;}  }
class C{  public static LocalResourceStatus fromBytes(byte[] bytes) throws SVNException {  return ((bytes != null) && (bytes.length > 0)) ? new LocalResourceStatus(bytes) : null;}  }
class C{  public void initialize(){  enqueue(new GetVersionMessageClass().doRequest());  enqueue(new MemoryGetIdMessageClass().doRequest());  enqueue(new SerialApiGetCapabilitiesMessageClass().doRequest());  enqueue(new SerialApiSetTimeoutsMessageClass().doRequest(150,15));  enqueue(new GetSucNodeIdMessageClass().doRequest());}  }
class C{  public static <T extends RealFieldElement<T>>FieldVector3D<T> crossProduct(final FieldVector3D<T> v1,final Vector3D v2){  return v1.crossProduct(v2);}  }
class C{  public void clear(){  super.clear();  long[] keys=_set;  Object[] vals=_values;  byte[] states=_states;  Arrays.fill(_set,0,_set.length,(long)0);  Arrays.fill(_values,0,_values.length,null);  Arrays.fill(_states,0,_states.length,FREE);}  }
class C{  public static void main(String[] args){  PrefPanel panel=new PrefPanel();  panel.pack();  panel.setVisible(true);}  }
class C{  private void onMoveFileOperationFinish(MoveFileOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    refreshListOfFilesFragment();  } else {    try {      Toast msg=Toast.makeText(FileDisplayActivity.this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  void addLogEntry(LogEntry logEntry){  logEntries.add(logEntry);}  }
class C{  private void beginEnterTransition(){  Views.from(mDetailsContent).animateWith(this,R.anim.translaterightandfadein).withDelayBetweenEachChild(50).start();}  }
class C{  private void saveTouchStart(MotionEvent event){  mSavedMatrix.set(mTouchMatrix);  mTouchStartPoint.x=event.getX();  mTouchStartPoint.y=event.getY();  mClosestDataSetToTouch=mChart.getDataSetByTouchPoint(event.getX(),event.getY());}  }
class C{  private static int expensiveCCW(S2Point a,S2Point b,S2Point c){  if (a.equals(b) || b.equals(c) || c.equals(a)) {    return 0;  }  double sab=(a.dotProd(b) > 0) ? -1 : 1;  double sbc=(b.dotProd(c) > 0) ? -1 : 1;  double sca=(c.dotProd(a) > 0) ? -1 : 1;  S2Point vab=S2Point.add(a,S2Point.mul(b,sab));  S2Point vbc=S2Point.add(b,S2Point.mul(c,sbc));  S2Point vca=S2Point.add(c,S2Point.mul(a,sca));  double dab=vab.norm2();  double dbc=vbc.norm2();  double dca=vca.norm2();  double sign;  if (dca < dbc || (dca == dbc && a.lessThan(b))) {    if (dab < dbc || (dab == dbc && a.lessThan(c))) {      sign=S2Point.crossProd(vab,vca).dotProd(a) * sab;    } else {      sign=S2Point.crossProd(vca,vbc).dotProd(c) * sca;    }  } else {    if (dab < dca || (dab == dca && b.lessThan(c))) {      sign=S2Point.crossProd(vbc,vab).dotProd(b) * sbc;    } else {      sign=S2Point.crossProd(vca,vbc).dotProd(c) * sca;    }  }  if (sign > 0) {    return 1;  }  if (sign < 0) {    return -1;  }  int ccw=planarOrderedCCW(new R2Vector(a.y,a.z),new R2Vector(b.y,b.z),new R2Vector(c.y,c.z));  if (ccw == 0) {    ccw=planarOrderedCCW(new R2Vector(a.z,a.x),new R2Vector(b.z,b.x),new R2Vector(c.z,c.x));    if (ccw == 0) {      ccw=planarOrderedCCW(new R2Vector(a.x,a.y),new R2Vector(b.x,b.y),new R2Vector(c.x,c.y));    }  }  return ccw;}  }
class C{  public T proxy(){  eventDrivenFactoryBean.afterPropertiesSet();  return (T)eventDrivenFactoryBean.getObject();}  }
class C{  @Override public ReversibleIterator<BasicLogRecord> iterator(){  logMgrLock.lock();  try {    flush();    return new LogIterator(currentBlk);  }  finally {    logMgrLock.unlock();  }}  }
class C{  @Override public void run(){  while (exitWhenFinished == false || trackers.size() > 0) {    try {      Tracker tracker=(Tracker)q.remove();      trackers.remove(tracker);      if (!tracker.delete()) {        deleteFailures.add(tracker.getPath());      }      tracker.clear();    } catch (    InterruptedException e) {      continue;    }  }}  }
class C{  public static final short ulawToShort(short uByte){  int sign, exponent, mantissa;  int sample;  int ulawByte=uByte;  ulawByte=~(ulawByte);  sign=(ulawByte & 0x80);  exponent=(ulawByte >> 4) & 0x07;  mantissa=ulawByte & 0x0F;  sample=expLut[exponent] + (mantissa << (exponent + 3));  if (sign != 0) {    sample=-sample;  }  return (short)sample;}  }
class C{  public static boolean isCreditCard(String stPassed){  if (isEmpty(stPassed))   return defaultEmptyOK;  String st=stripCharsInBag(stPassed,creditCardDelimiters);  if (!isInteger(st))   return false;  if (st.length() > 19)   return false;  return sumIsMod10(getLuhnSum(st));}  }
class C{  protected void initializeWorld(){  this.world.setGravity(new Vector2(0,-3));  SimulationBody l=new SimulationBody();  l.addFixture(Geometry.createRectangle(1,15));  l.translate(-5,0);  l.setMass(MassType.INFINITE);  this.world.addBody(l);  SimulationBody r=new SimulationBody();  r.addFixture(Geometry.createRectangle(1,15));  r.translate(5,0);  r.setMass(MassType.INFINITE);  this.world.addBody(r);  SimulationBody t=new SimulationBody();  t.addFixture(Geometry.createRectangle(15,1));  t.translate(0,5);  t.setMass(MassType.INFINITE);  this.world.addBody(t);  SimulationBody b=new SimulationBody();  b.addFixture(Geometry.createRectangle(15,1));  b.translate(0,-5);  b.setMass(MassType.INFINITE);  this.world.addBody(b);  ship=new SimulationBody();  ship.addFixture(Geometry.createRectangle(0.5,1.5),1,0.2,0.2);  BodyFixture bf2=ship.addFixture(Geometry.createEquilateralTriangle(0.5),1,0.2,0.2);  bf2.getShape().translate(0,0.9);  ship.translate(0.0,2.0);  ship.setMass(MassType.NORMAL);  this.world.addBody(ship);}  }
class C{  protected AbstractRealDistribution(){  this.solverAbsoluteAccuracy=DEFAULT_SOLVER_ABSOLUTE_ACCURACY;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_CANT_USE_TOOL(String value0){  return new SM_SYSTEM_MESSAGE(1330052,value0);}  }
class C{  public long addQuery(byte[] queryText,int queryTextLength,int numberOfMatches,byte[] matchesText,int matchesTextLength,int[][] match2Classification2Id,long mateLocation) throws IOException {  final long location=readerWriter.getPosition();  if (isPairedReads)   readerWriter.writeLong(mateLocation);  readerWriter.writeString(queryText,0,queryTextLength);  readerWriter.writeInt(numberOfMatches);  for (int i=0; i < numberOfMatches; i++) {    for (int j=0; j < numberOfClassificationNames; j++) {      readerWriter.writeInt(match2Classification2Id[i][j]);    }  }  readerWriter.writeString(matchesText,0,matchesTextLength);  this.totalNumberOfReads++;  this.totalNumberOfMatches+=numberOfMatches;  return location;}  }
class C{  public boolean isSetClientIp(){  return this.clientIp != null;}  }
class C{  public NGramHistogramComparator(){}  }
class C{  static Storage initializeGroup(Collection<Storage> group){  List<Storage> sorted=Ordering.natural().immutableSortedCopy(group);  Storage primary=sorted.get(0);  if (!primary.isConsistent()) {    return null;  }  for (  Storage storage : sorted) {    storage._group=sorted;  }  return primary;}  }
class C{  protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  private static DhisHttpResponse processResponse(String requestURL,String username,HttpResponse response) throws Exception {  DhisHttpResponse dhisHttpResponse=null;  String output=null;  int statusCode=0;  if (response != null) {    HttpEntity responseEntity=response.getEntity();    if (responseEntity != null && responseEntity.getContent() != null) {      Header contentType=response.getEntity().getContentType();      if (contentType != null && checkIfGzipContentType(contentType)) {        GzipDecompressingEntity gzipDecompressingEntity=new GzipDecompressingEntity(response.getEntity());        InputStream content=gzipDecompressingEntity.getContent();        output=IOUtils.toString(content);      } else {        output=EntityUtils.toString(response.getEntity());      }      statusCode=response.getStatusLine().getStatusCode();    } else {      throw new Exception("No content found in the response received from http POST call to " + requestURL + " with username "+ username);    }    dhisHttpResponse=new DhisHttpResponse(response,output,statusCode);  } else {    throw new Exception("NULL response received from http POST call to " + requestURL + " with username "+ username);  }  return dhisHttpResponse;}  }
class C{  public static Observable<float[]> createFrom2D(Observable<float[]> stream){  final JKalman kalman=new JKalman(4,2);  final Matrix m=new Matrix(4,1);  double[][] tr={{1,0,1,0},{0,1,0,1},{0,0,1,0},{0,0,0,1}};  kalman.setTransition_matrix(new Matrix(tr));  kalman.setError_cov_post(kalman.getError_cov_post().identity());  final float[] buffer=new float[2];  return Observable.create(null);}  }
class C{  public void onStopMove(){  notifyAIOnMove();}  }
class C{  public void merge(StringMap<T> toMerge){  toMerge.forEach(null);}  }
class C{  synchronized void ignoreTextChanges(){  mIgnoreTextChanges=true;}  }
class C{  @Override public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {}  }
class C{  @Override public void removeTags(final Set<Long> tagIds){  if (tagIds.size() > 0) {    LOG.info("removeTags() - Removing " + tagIds.size() + " tags from the cache.");    for (    Long tagId : tagIds) {      if (controller.isHistoryModeEnabled()) {        historyCache.remove(tagId);      }      ClientDataTagImpl liveTag=liveCache.remove(tagId);      if (liveTag.getDataTagQuality().isExistingTag()) {        try {          jmsProxy.unregisterUpdateListener(liveTag);        } catch (        Exception e) {          LOG.warn("removeTags() - Could not unregister tag " + tagId + " from JmsProxy. Reason: "+ e.getMessage());        }      }      supervisionManager.removeSupervisionListener(liveTag);    }    if (liveCache.isEmpty()) {      LOG.info("removeTags() - Cache is now empty.");    } else {      LOG.info(String.format("removeTags() - Cache contains still %d tags",liveCache.size()));    }  }}  }
class C{  void sendEcommerceMessages(int num,int throttle,String topicShipments,String topicSales,Generator shipmentMessage,Generator salesMessage){  int totalItems=100;  Map<String,Integer> internalInventory=new HashMap<>();  try (Producer<Object,Object> producer=getAvroProducer(brokers,schemaregistry)){    log.info("Sending " + num / 1000 + "K messages to topic [" + topicShipments + "] and [" + topicSales + "]");    long startTime=System.nanoTime();    for (int i=0; i < num; i++) {      long itemID=random.nextInt(totalItems);      int tradomStoreID=random.nextInt(AvroEcommerce.storeCodes.length - 1);      String store=AvroEcommerce.storeCodes[tradomStoreID];      int realInventory=0;      if (internalInventory.containsKey(store + "-" + itemID)) {        realInventory=internalInventory.get(store + "-" + itemID);      }      int shippedItems;      if (realInventory <= 10) {        shippedItems=100;      } else {        shippedItems=(random.nextInt(9) + 1) * 10;      }      realInventory=realInventory + shippedItems;      GenericRecord shipmentRecord=new GenericData.Record(shipmentMessage.getSchema());      shipmentRecord.put("itemID",itemID);      shipmentRecord.put("storeCode",store);      shipmentRecord.put("count",100);      producer.send(new ProducerRecord<Object,Object>(topicShipments,0,shipmentRecord));      internalInventory.put(store + "-" + itemID,realInventory);      for (int s=0; s < 5; s++) {        int currentInventory=internalInventory.get(store + "-" + itemID);        int numberSales=0;        if (currentInventory == 0) {        } else         if (currentInventory >= 4 && currentInventory <= 10) {          numberSales=1;        } else {          numberSales=random.nextInt(10) * currentInventory;        }        realInventory=realInventory - numberSales;        if (numberSales > 0) {          GenericRecord salesRecord=new GenericData.Record(salesMessage.getSchema());          salesRecord.put("itemID",itemID);          salesRecord.put("storeCode",store);          salesRecord.put("count",numberSales);          salesRecord.put("customerID","-");          producer.send(new ProducerRecord<Object,Object>(topicSales,0,salesRecord));          internalInventory.put(store + "-" + itemID,realInventory);        }      }      if (i % 10000 == 0) {        System.out.print(" . " + (i / 1000) + "K");      }      if (throttle > 0 && i % throttle == 0) {        long totalMillis=(System.nanoTime() - startTime) / 1000000;        int expectedMessages=(int)(throttle * (totalMillis / 1000));        if (i > expectedMessages) {          System.out.println("sleeping for " + 1000 * (i - expectedMessages) / throttle + " msec");          Thread.sleep(1000 * (i - expectedMessages) / throttle);        }      }    }    System.out.println();    long endTime=System.nanoTime();    long durationMsec=(endTime - startTime) / 1000000;    log.info("Total time " + (durationMsec / 1000.0) + " sec ");    log.info("Shipment message rate : " + (int)(num / (durationMsec / 1000.0)) + " msg / sec");    log.info("Sales message rate : " + (int)(num * 5 / (durationMsec / 1000.0)) + " msg / sec");  } catch (  Throwable throwable) {    throwable.printStackTrace();  }}  }
class C{  @Override public XSSimpleType createTypeList(String name,String targetNamespace,short finalSet,XSSimpleType itemType,XSObjectList annotations){  if (fDeclPool != null) {    XSSimpleTypeDecl st=fDeclPool.getSimpleTypeDecl();    return st.setListValues(name,targetNamespace,finalSet,(XSSimpleTypeDecl)itemType,annotations);  }  return new XSSimpleTypeDecl(name,targetNamespace,finalSet,(XSSimpleTypeDecl)itemType,false,annotations);}  }
class C{  public FilteredRowManager(Table table){  super(table);  m_childToParent=new IntColumn(table.getRowCount());  m_parentToChild=new IntIntTreeMap(false);  clear();}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public Object findFeature(Item item){  return path.findFeature(item);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  private Interceptor applyLrModel(Item syllable){  float fv=0.0f;  Interceptor interceptor=new Interceptor();  interceptor.start=terms[0].start;  interceptor.mid=terms[0].mid;  interceptor.end=terms[0].end;  for (int i=1; i < terms.length; i++) {    Object value=terms[i].findFeature(syllable);    if (terms[i].type != null) {      if (value.toString().equals(terms[i].type)) {        fv=1.0f;      } else {        fv=0.0f;      }    } else {      fv=Float.parseFloat(value.toString());    }    interceptor.start+=fv * terms[i].start;    interceptor.mid+=fv * terms[i].mid;    interceptor.end+=fv * terms[i].end;  }  return interceptor;}  }
class C{  public CarouselOptions maxScrollingVelocity(int maxScrollingVelocity){  mMaxScrollingVelocity=maxScrollingVelocity;  return this;}  }
class C{  public void removeObserver(FindToolbarObserver observer){  mObservers.removeObserver(observer);}  }
class C{  public void remove(){  if (m_table.removeRow(m_cur))   modify();}  }
class C{  public T remove(int position){  T removed=items.remove(position);  notifyItemRemoved(position);  return removed;}  }
class C{  public void entryArrivedSA(EntryArrivedPacket packet) throws SAException, EntryDeletedException {  Context context=null;  IEntryHolder entry=packet.getEntryHolder();  try {    context=_cacheManager.getCacheContext();    context.setOperationID(packet.getOperationID());    context.setOperationVisibilityTime(packet.getCreationTime());    ServerTransaction txn=packet.getTransaction();    if (packet.shouldNotifyListeners() && _cacheManager.getTemplatesManager().anyNotifyWriteTemplates() && txn == null) {      try {        context.setFromReplication(packet.isFromReplication());        IEntryHolder entryValueToNotify=packet.getEntryValueToNotify();        NotifyContextsHolder notifyContextHolder=new NotifyContextsHolder(null,entryValueToNotify,context.getOperationID(),NotifyActionType.NOTIFY_WRITE);        _engine.getTemplateScanner().scanNotifyTemplates(notifyContextHolder,context,null,FifoSearch.NO);      }  finally {        context.setFromReplication(false);      }    }    try {      _engine.getTemplateScanner().scanNonNotifyTemplates(context,entry,txn,FifoSearch.NO);    } catch (    EntryDeletedException ex) {    }  }  finally {    _cacheManager.freeCacheContext(context);    _engine.getEntryArrivedPacketsFactory().freePacket(packet);  }}  }
class C{  public void draw(Node v,boolean selected){  final NodeView nv=viewer.getNV(v);  final NodeData data=(NodeData)v.getData();  if (selected)   hilite(v);  if ((!drawLeavesOnly || v.getOutDegree() == 0) && scaleBy != ScaleBy.None && nv.getShape() != NodeView.NONE_NODE) {switch (style) {case HeatMap:      drawAsHeatMap(v,nv,data);    break;case BarChart:  drawAsBarChart(v,nv,data);break;case PieChart:drawAsCircle(v,nv,data);drawAsPieChart(v,nv,data);break;case CoxComb:drawAsCoxComb(v,nv,data);break;default :case Circle:drawAsCircle(v,nv,data);break;}} else {nv.setShape(NodeView.NONE_NODE);}}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  private void parseExtras(Bundle savedInstanceState){  if (getIntent() != null) {    mTitle=getIntent().getStringExtra(EXTRA_TITLE);  }  if (savedInstanceState != null) {    mTitle=savedInstanceState.getString(EXTRA_TITLE);  }}  }
class C{  public static boolean isParcelable(Class clazz){  return Parcelable.class.isAssignableFrom(clazz);}  }
class C{  public synchronized void stop(long stopInterval) throws Exception {  if (running == false) {    throw new IllegalStateException("Monitor is not running");  }  running=false;  try {    thread.join(stopInterval);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }  for (  FileAlterationObserver observer : observers) {    observer.destroy();  }}  }
class C{  public static String removePunctuationMarks(String text){  return removeExtraSpaces(allMarksPat.matcher(text).replaceAll(" "));}  }
class C{  public static int computeHash(byte[] key,int mask){  return Math.abs(MurmurHash3.murmurhash3x8632(key,0,key.length,666) & mask);}  }
class C{  public void moveBy(int amountX,int amountY){  Point p=getPosition();  move(p.x + amountX,p.y + amountY);}  }
class C{  public UsersGetFollowersQueryWithFields userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){  return (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_HE_IS_ALREADY_MEMBER_OF_OTHER_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1300169,value0);}  }
class C{  @Override public String toString(){  return fXPath.toString();}  }
class C{  public AccountGetActiveOffersQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public void applyDimensionBehaviour(){  wrapContent();}  }
class C{  public boolean isHttps(){  return isHttps;}  }
class C{  private static Type createType(String typeName,DescriptorProto descriptorProto,String fileName){  Type.Builder coreTypeBuilder=Type.newBuilder().setName(typeName);  int count=1;  for (  FieldDescriptorProto fieldProto : descriptorProto.getFieldList()) {    Field.Kind fieldKind=Field.Kind.valueOf(fieldProto.getType().getNumber());    Cardinality cardinality=Cardinality.CARDINALITY_OPTIONAL;    if (fieldProto.getLabel() == Label.LABEL_REPEATED) {      cardinality=Cardinality.CARDINALITY_REPEATED;    }    Field.Builder coreFieldBuilder=Field.newBuilder().setName(fieldProto.getName()).setNumber(count++).setKind(fieldKind).setCardinality(cardinality);    if (fieldKind == Kind.TYPE_MESSAGE || fieldKind == Kind.TYPE_ENUM) {      String typeFullName=fieldProto.getTypeName().startsWith(".") ? fieldProto.getTypeName().substring(1) : fieldProto.getTypeName();      coreFieldBuilder.setTypeUrl(TYPE_SERVICE_BASE_URL + typeFullName);    }    coreTypeBuilder.addFields(coreFieldBuilder.build());  }  coreTypeBuilder.setSourceContext(SourceContext.newBuilder().setFileName(fileName));  coreTypeBuilder.setSyntax(Syntax.SYNTAX_PROTO3);  return coreTypeBuilder.build();}  }
class C{  @JsonProperty @JsonView(View.PollableSummary.class) public boolean isAllFinished(){  boolean currentTaskFinished=(getFinishedDate() != null);  boolean allSubtasksFinished=true;  if (currentTaskFinished) {    if (getSubTasks() != null) {      int numSubtasks=getSubTasks().size();      if (numSubtasks < getExpectedSubTaskNumber()) {        allSubtasksFinished=false;      } else {        for (        PollableTask pollableTask : subTasks) {          if (!pollableTask.isAllFinished()) {            allSubtasksFinished=false;            break;          }        }      }    }  }  return currentTaskFinished && allSubtasksFinished;}  }
class C{  public int size(){  return players.size();}  }
class C{  @Override public double nextNormalizedDouble(){  return generator.nextGaussian();}  }
class C{  public void enqueueLaunch(boolean incognito,int parentId,AsyncTabCreationParams asyncParams){  ThreadUtils.assertOnUiThread();  LaunchRunnable runnable=new LaunchRunnable(incognito,parentId,asyncParams);  if (mCurrentRunnable == null) {    mCurrentRunnable=runnable;    mCurrentRunnable.launch();  } else {    mQueue.add(runnable);  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  private int findCurrentCenterViewPos(){  return getPosition(findCurrentCenterView());}  }
class C{  public Landlord.RenewResults renewAll(Uuid[] cookies,long[] extensions){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"renewAll");  }  readyState.check();  Landlord.RenewResults results=LandlordUtil.renewAll(this,cookies,extensions);  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"renewAll");  }  return results;}  }
class C{  @Override public double[] makeInverseCumulativeTestValues(){  double[] points=makeCumulativeTestPoints();  double[] points2=new double[points.length - 2];  System.arraycopy(points,1,points2,0,points2.length);  return points2;}  }
class C{  public JSONObject(Map<String,Object> map){  this.map=new HashMap<String,Object>();  if (map != null) {    Iterator<Entry<String,Object>> i=map.entrySet().iterator();    while (i.hasNext()) {      Entry<String,Object> entry=i.next();      Object value=entry.getValue();      if (value != null) {        this.map.put(entry.getKey(),wrap(value));      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXCHANGE_CANT_EXCHANGE_PARTNER_HAS_LORE_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300360,value0);}  }
class C{  protected void removeAt(int index){  _values[index]=null;  super.removeAt(index);}  }
class C{  public void infinite(){  confettiManager.setNumInitialCount(0).setEmissionDuration(ConfettiManager.INFINITE_DURATION).setEmissionRate(50).animate();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  static private boolean connectionNetwork(){  boolean result=false;  HttpURLConnection httpUrl=null;  try {    httpUrl=(HttpURLConnection)new URL("http://www.baidu.com").openConnection();    httpUrl.setConnectTimeout(TIMEOUT);    httpUrl.connect();    result=true;  } catch (  IOException e) {  } finally {    if (null != httpUrl) {      httpUrl.disconnect();    }    httpUrl=null;  }  return result;}  }
class C{  public void createSets(boolean bNoCategories){  createSets(true,1.0,bNoCategories);}  }
class C{  public static byte[] fetchPropertyOrEmptyArray(StateStore stateStore,String key){  if (stateStore.fetchPropertyKeys().contains(key)) {    return stateStore.fetchProperty(key);  } else {    return new byte[0];  }}  }
class C{  public static void appendElementDescription(@NotNull StringBuilder sb,@NotNull PsiElement element){  if (element instanceof LazyValueResourceElementWrapper) {    LazyValueResourceElementWrapper wrapper=(LazyValueResourceElementWrapper)element;    XmlAttributeValue value=wrapper.computeElement();    if (value != null) {      element=value;    }  }  PsiFile file=element.getContainingFile();  int offset=element.getTextOffset();  TextRange segment=element.getTextRange();  appendSourceDescription(sb,file,offset,segment);}  }
class C{  @Override public double[] makeLogDensityTestValues(){  return new double[]{Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,-1.07465022926458,-1.76779740982453,-2.17326251793269,-2.46094459038447,-2.68408814169868,-2.86640969849264,-3.0205603783199,-3.15409177094442,-3.2718748066008,-3.37723532225863,Double.NEGATIVE_INFINITY};}  }
class C{  @Override public Dfp add(final Dfp x){  if (field.getRadixDigits() != x.field.getRadixDigits()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    final Dfp result=newInstance(getZero());    result.nans=QNAN;    return dotrap(DfpField.FLAG_INVALID,ADD_TRAP,x,result);  }  if (nans != FINITE || x.nans != FINITE) {    if (isNaN()) {      return this;    }    if (x.isNaN()) {      return x;    }    if (nans == INFINITE && x.nans == FINITE) {      return this;    }    if (x.nans == INFINITE && nans == FINITE) {      return x;    }    if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {      return x;    }    if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);      Dfp result=newInstance(getZero());      result.nans=QNAN;      result=dotrap(DfpField.FLAG_INVALID,ADD_TRAP,x,result);      return result;    }  }  Dfp a=newInstance(this);  Dfp b=newInstance(x);  Dfp result=newInstance(getZero());  final byte asign=a.sign;  final byte bsign=b.sign;  a.sign=1;  b.sign=1;  byte rsign=bsign;  if (compare(a,b) > 0) {    rsign=asign;  }  if (b.mant[mant.length - 1] == 0) {    b.exp=a.exp;  }  if (a.mant[mant.length - 1] == 0) {    a.exp=b.exp;  }  int aextradigit=0;  int bextradigit=0;  if (a.exp < b.exp) {    aextradigit=a.align(b.exp);  } else {    bextradigit=b.align(a.exp);  }  if (asign != bsign) {    if (asign == rsign) {      bextradigit=b.complement(bextradigit);    } else {      aextradigit=a.complement(aextradigit);    }  }  int rh=0;  for (int i=0; i < mant.length; i++) {    final int r=a.mant[i] + b.mant[i] + rh;    rh=r / RADIX;    result.mant[i]=r - rh * RADIX;  }  result.exp=a.exp;  result.sign=rsign;  if (rh != 0 && (asign == bsign)) {    final int lostdigit=result.mant[0];    result.shiftRight();    result.mant[mant.length - 1]=rh;    final int excp=result.round(lostdigit);    if (excp != 0) {      result=dotrap(excp,ADD_TRAP,x,result);    }  }  for (int i=0; i < mant.length; i++) {    if (result.mant[mant.length - 1] != 0) {      break;    }    result.shiftLeft();    if (i == 0) {      result.mant[0]=aextradigit + bextradigit;      aextradigit=0;      bextradigit=0;    }  }  if (result.mant[mant.length - 1] == 0) {    result.exp=0;    if (asign != bsign) {      result.sign=1;    }  }  final int excp=result.round(aextradigit + bextradigit);  if (excp != 0) {    result=dotrap(excp,ADD_TRAP,x,result);  }  return result;}  }
class C{  private String createRegexFromRule(String urlRuleText){  String regexText=StringUtils.replaceEach(urlRuleText,new String[]{"?",".","+","[","]","(",")","{","}","#"," ","\\","$"},new String[]{"\\?","\\.","\\+","\\[","\\]","\\(","\\)","\\{","\\}","\\#","\\ ","\\\\","\\$"});  regexText=regexText.substring(0,MASK_START_URL.length()) + StringUtils.replace(regexText.substring(MASK_START_URL.length(),regexText.length() - 1),"|","\\|") + regexText.substring(regexText.length() - 1);  regexText=StringUtils.replace(regexText,MASK_ANY_SYMBOL,REGEXP_ANY_SYMBOL);  regexText=StringUtils.replace(regexText,MASK_SEPARATOR,REGEXP_SEPARATOR);  if (regexText.startsWith(MASK_START_URL)) {    regexText=REGEXP_START_URL + regexText.substring(MASK_START_URL.length());  } else   if (regexText.startsWith(MASK_PIPE)) {    regexText=REGEXP_START_STRING + regexText.substring(MASK_PIPE.length());  }  if (regexText.endsWith(MASK_PIPE)) {    regexText=regexText.substring(0,regexText.length() - 1) + REGEXP_END_STRING;  }  return regexText;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_LIMIT_LOVE_COUNT(String value0){  return new SM_SYSTEM_MESSAGE(1400696,value0);}  }
class C{  public LikesGetListQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public XSNamedMap4Types(String[] namespaces,SymbolHash[] maps,int num,short type){  super(namespaces,maps,num);  fType=type;}  }
class C{  public boolean isApplicable(){  return ProjectManager.getNumberOfProjects() == 1 && ((Director)ProjectManager.getProjects().get(0)).getDocument().getNumberOfSamples() == 0;}  }
class C{  public static void addErrors(List<String> targetList,Map<String,Object> targetMap,Map<String,? extends Object> callResult){  List<String> newList;  Map<String,Object> errorMsgMap;  if (callResult.containsKey(ModelService.ERROR_MESSAGE)) {    targetList.add((String)callResult.get(ModelService.ERROR_MESSAGE));  }  if (callResult.containsKey(ModelService.ERROR_MESSAGE_LIST)) {    newList=UtilGenerics.checkList(callResult.get(ModelService.ERROR_MESSAGE_LIST));    targetList.addAll(newList);  }  if (callResult.containsKey(ModelService.ERROR_MESSAGE_MAP)) {    errorMsgMap=UtilGenerics.checkMap(callResult.get(ModelService.ERROR_MESSAGE_MAP));    targetMap.putAll(errorMsgMap);  }}  }
class C{  public ShimpleBody newBody(SootMethod m,Map<String,String> options){  return new ShimpleBody(m,options);}  }
class C{  public static LinkedHashSet<File> unrollFileCollection(java.util.Collection<File> inputs){  LinkedHashSet<File> vcfFiles=new LinkedHashSet<>(inputs.size() + 1);  for (  File file : inputs) {    if (file.getName().endsWith(".list")) {      IOUtil.assertFileIsReadable(file);      for (      final String s : IOUtil.readLines(file)) {        if (s.endsWith("#"))         continue;        if (s.trim().isEmpty())         continue;        vcfFiles.add(new File(s));      }    } else {      vcfFiles.add(file);    }  }  return vcfFiles;}  }
class C{  public AppsGetCatalogQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public MinTask(Class<T> reduceType,Task<T> task) throws IllegalArgumentException {  super(task);  this.reducer=new MinReducer<T>(reduceType);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof Point3D)) {    return false;  }  Point3D point3D=(Point3D)o;  return x == point3D.x && y == point3D.y && z == point3D.z;}  }
class C{  public static void main(String[] args){  StopBodyAfterCollision simulation=new StopBodyAfterCollision();  simulation.run();}  }
class C{  public static String searchExpireFromCategory(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String productCategoryId=request.getParameter("SE_SEARCH_CATEGORY_ID");  String thruDateStr=request.getParameter("thruDate");  String errMsg=null;  Timestamp thruDate;  try {    thruDate=Timestamp.valueOf(thruDateStr);  } catch (  RuntimeException e) {    Map<String,String> messageMap=UtilMisc.toMap("errDateFormat",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.thruDate_not_formatted_properly",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      int numExpired=0;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        List<GenericValue> pcmList=EntityQuery.use(delegator).from("ProductCategoryMember").where("productCategoryId",productCategoryId,"productId",productId).queryList();        for (        GenericValue pcm : pcmList) {          if (pcm.get("thruDate") == null) {            pcm.set("thruDate",thruDate);            pcm.store();            numExpired++;          }        }      }      Map<String,String> messageMap=UtilMisc.toMap("numExpired",Integer.toString(numExpired));      errMsg=UtilProperties.getMessage(resource,"productsearchevents.expired_x_items",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_EVENT_MESSAGE_",errMsg);      eli.close();    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      TransactionUtil.rollback(beganTransaction,errMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public GotoLineDialog(JTextComponent text){  super(ActionUtils.getFrameFor(text),false);  initComponents();  this.text=text;  setLocationRelativeTo(text.getRootPane());}  }
class C{  public void zoom(float scaleX,float scaleY,float x,float y){  Matrix save=mZoomMatrixBuffer;  mViewPortHandler.zoom(scaleX,scaleY,x,-y,save);  mViewPortHandler.refresh(save,this,false);  calculateOffsets();  postInvalidate();}  }
class C{  private void registerLabelRenderers(){  logger.info("Label Renderers supported:");  addLabelRenderer(new LabelEngineLayerProperties());}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";  db.execSQL(sql);}  }
class C{  public void clear(){  Arrays.fill(state,FREE);  Arrays.fill(values,null);  this.distinct=0;  this.freeEntries=table.length;  trimToSize();}  }
class C{  private void addContribution(final SubHyperplane<Euclidean2D> sub,final BSPTree<Euclidean2D> node,final Iterable<BSPTree<Euclidean2D>> splitters,final boolean reversed){  @SuppressWarnings("unchecked") final AbstractSubHyperplane<Euclidean2D,Euclidean1D> absSub=(AbstractSubHyperplane<Euclidean2D,Euclidean1D>)sub;  final Line line=(Line)sub.getHyperplane();  final List<Interval> intervals=((IntervalsSet)absSub.getRemainingRegion()).asList();  for (  final Interval i : intervals) {    final Vector2D startV=Double.isInfinite(i.getInf()) ? null : (Vector2D)line.toSpace((Point<Euclidean1D>)new Vector1D(i.getInf()));    final Vector2D endV=Double.isInfinite(i.getSup()) ? null : (Vector2D)line.toSpace((Point<Euclidean1D>)new Vector1D(i.getSup()));    final BSPTree<Euclidean2D> startN=selectClosest(startV,splitters);    final BSPTree<Euclidean2D> endN=selectClosest(endV,splitters);    if (reversed) {      segments.add(new ConnectableSegment(endV,startV,line.getReverse(),node,endN,startN));    } else {      segments.add(new ConnectableSegment(startV,endV,line,node,startN,endN));    }  }}  }
class C{  public static long parseDateDiff(String time,boolean future) throws IllegalDateException {  Matcher m=TIME_PATTERN.matcher(time);  int years=0;  int months=0;  int weeks=0;  int days=0;  int hours=0;  int minutes=0;  int seconds=0;  boolean found=false;  while (m.find()) {    if (m.group() == null || m.group().isEmpty()) {      continue;    }    for (int i=0; i < m.groupCount(); i++) {      if (m.group(i) != null && !m.group(i).isEmpty()) {        found=true;        break;      }    }    if (found) {      if (m.group(1) != null && !m.group(1).isEmpty()) {        years=Integer.parseInt(m.group(1));      }      if (m.group(2) != null && !m.group(2).isEmpty()) {        months=Integer.parseInt(m.group(2));      }      if (m.group(3) != null && !m.group(3).isEmpty()) {        weeks=Integer.parseInt(m.group(3));      }      if (m.group(4) != null && !m.group(4).isEmpty()) {        days=Integer.parseInt(m.group(4));      }      if (m.group(5) != null && !m.group(5).isEmpty()) {        hours=Integer.parseInt(m.group(5));      }      if (m.group(6) != null && !m.group(6).isEmpty()) {        minutes=Integer.parseInt(m.group(6));      }      if (m.group(7) != null && !m.group(7).isEmpty()) {        seconds=Integer.parseInt(m.group(7));      }      break;    }  }  if (!found) {    throw new IllegalDateException();  }  Calendar c=new GregorianCalendar();  if (years > 0) {    if (years > MAX_YEARS) {      years=MAX_YEARS;    }    c.add(Calendar.YEAR,years * (future ? 1 : -1));  }  if (months > 0) {    c.add(Calendar.MONTH,months * (future ? 1 : -1));  }  if (weeks > 0) {    c.add(Calendar.WEEK_OF_YEAR,weeks * (future ? 1 : -1));  }  if (days > 0) {    c.add(Calendar.DAY_OF_MONTH,days * (future ? 1 : -1));  }  if (hours > 0) {    c.add(Calendar.HOUR_OF_DAY,hours * (future ? 1 : -1));  }  if (minutes > 0) {    c.add(Calendar.MINUTE,minutes * (future ? 1 : -1));  }  if (seconds > 0) {    c.add(Calendar.SECOND,seconds * (future ? 1 : -1));  }  Calendar max=new GregorianCalendar();  max.add(Calendar.YEAR,10);  if (c.after(max)) {    return (max.getTimeInMillis() / 1000) + 1;  }  return (c.getTimeInMillis() / 1000) + 1;}  }
class C{  private boolean canMoveUnitOver(Unit aUnitToMove,Unit aUnitToGoOver){  if ((aUnitToGoOver instanceof MethodArgInst && aUnitToMove instanceof MethodArgInst) || (aUnitToGoOver instanceof MethodArgInst && isNonLocalReadOrWrite(aUnitToMove)) || (isNonLocalReadOrWrite(aUnitToGoOver) && aUnitToMove instanceof MethodArgInst)|| (aUnitToGoOver instanceof ArrayReadInst && aUnitToMove instanceof ArrayWriteInst)|| (aUnitToGoOver instanceof ArrayWriteInst && aUnitToMove instanceof ArrayReadInst)|| (aUnitToGoOver instanceof ArrayWriteInst && aUnitToMove instanceof ArrayWriteInst)|| (aUnitToGoOver instanceof FieldPutInst && aUnitToMove instanceof FieldGetInst && ((FieldArgInst)aUnitToGoOver).getField() == ((FieldArgInst)aUnitToMove).getField())|| (aUnitToGoOver instanceof FieldGetInst && aUnitToMove instanceof FieldPutInst && ((FieldArgInst)aUnitToGoOver).getField() == ((FieldArgInst)aUnitToMove).getField())|| (aUnitToGoOver instanceof FieldPutInst && aUnitToMove instanceof FieldPutInst && ((FieldArgInst)aUnitToGoOver).getField() == ((FieldArgInst)aUnitToMove).getField())|| (aUnitToGoOver instanceof StaticPutInst && aUnitToMove instanceof StaticGetInst && ((FieldArgInst)aUnitToGoOver).getField() == ((FieldArgInst)aUnitToMove).getField())|| (aUnitToGoOver instanceof StaticGetInst && aUnitToMove instanceof StaticPutInst && ((FieldArgInst)aUnitToGoOver).getField() == ((FieldArgInst)aUnitToMove).getField())|| (aUnitToGoOver instanceof StaticPutInst && aUnitToMove instanceof StaticPutInst && ((FieldArgInst)aUnitToGoOver).getField() == ((FieldArgInst)aUnitToMove).getField()))   return false;  if (aUnitToGoOver instanceof EnterMonitorInst || aUnitToGoOver instanceof ExitMonitorInst)   return false;  if (aUnitToMove instanceof EnterMonitorInst || aUnitToGoOver instanceof ExitMonitorInst)   return false;  if (aUnitToGoOver instanceof IdentityInst || aUnitToMove instanceof IdentityInst)   return false;  if (aUnitToMove instanceof LoadInst) {    if (aUnitToGoOver instanceof StoreInst) {      if (((StoreInst)aUnitToGoOver).getLocal() == ((LoadInst)aUnitToMove).getLocal()) {        return false;      }    } else     if (aUnitToGoOver instanceof IncInst) {      if (((IncInst)aUnitToGoOver).getLocal() == ((LoadInst)aUnitToMove).getLocal()) {        return false;      }    }  }  if (aUnitToMove instanceof StoreInst) {    if (aUnitToGoOver instanceof LoadInst) {      if (((LoadInst)aUnitToGoOver).getLocal() == ((StoreInst)aUnitToMove).getLocal()) {        return false;      }    } else     if (aUnitToGoOver instanceof IncInst) {      if (((IncInst)aUnitToGoOver).getLocal() == ((StoreInst)aUnitToMove).getLocal()) {        return false;      }    }  }  if (aUnitToMove instanceof IncInst) {    if (aUnitToGoOver instanceof StoreInst) {      if (((StoreInst)aUnitToGoOver).getLocal() == ((IncInst)aUnitToMove).getLocal()) {        return false;      }    } else     if (aUnitToGoOver instanceof LoadInst) {      if (((LoadInst)aUnitToGoOver).getLocal() == ((IncInst)aUnitToMove).getLocal()) {        return false;      }    }  }  return true;}  }
class C{  private void goToPage(int rowCount,int currentPage){  if (getNumPages() < currentPage) {    lastPage();    return;  }  if (currentPage >= getNumPages()) {    getIconNext().setEnabled(false);    getIconPrev().setEnabled(true);  } else {    getIconNext().setEnabled(true);  }  if (currentPage <= 1) {    getIconNext().setEnabled(true);    getIconPrev().setEnabled(false);  } else {    getIconPrev().setEnabled(true);  }  if (getNumPages() == 1) {    getIconNext().setEnabled(false);    getIconPrev().setEnabled(false);  }  setRowCount(rowCount);  setFirstRow(((Math.max(0,currentPage - 1)) * rowCount) + 1);  setLastRow(currentPage * rowCount);  updateDataTable();  setCurrentPage(currentPage);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_EDIT_GUILD_NAME_SUCCESS(String value0){  return new SM_SYSTEM_MESSAGE(1400158,value0);}  }
class C{  private List<LinkedList<Integer>> shortestPaths(int v){  LinkedList<Integer> nodes=edges.get(v);  if (nodes.isEmpty()) {    LinkedList<Integer> stop=new LinkedList<Integer>();    stop.add(v);    List<LinkedList<Integer>> list=new ArrayList<LinkedList<Integer>>();    list.add(stop);    return list;  } else {    List<LinkedList<Integer>> vList=new ArrayList<LinkedList<Integer>>();    for (    Integer u : nodes) {      float d=length(u,v) + distance[v];      if (new Float(distance[u]).compareTo(new Float(d)) == 0) {        List<LinkedList<Integer>> uList=shortestPaths(u);        for (        LinkedList<Integer> list : uList) {          list.add(v);          vList.add(list);        }      }    }    return vList;  }}  }
class C{  public static String encodeHex(byte[] data){  StringBuffer buf=new StringBuffer();  for (int i=0; i < data.length; i++) {    int halfbyte=(data[i] >>> 4) & 0x0F;    int two_halfs=0;    do {      if ((0 <= halfbyte) && (halfbyte <= 9))       buf.append((char)('0' + halfbyte)); else       buf.append((char)('a' + (halfbyte - 10)));      halfbyte=data[i] & 0x0F;    } while (two_halfs++ < 1);  }  return buf.toString();}  }
class C{  @Override public DistinguishableEffectSize distinguishableEffectSizes(final long number_impressions_1,final long number_actions_1,final long number_impressions_2,final long number_actions_2){  inputValidation(number_impressions_1,number_actions_1,number_impressions_2);  double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);  double rate_1=1.0 * number_actions_1 / number_impressions_1;  double scale_1=zval * zval / number_impressions_1;  double scale_2=zval * zval / number_impressions_2;  double a=1 + scale_2;  double b=-(2 * rate_1 + scale_2);  double c=rate_1 * rate_1 * (1 + scale_1) - rate_1 * scale_1;  return new DistinguishableEffectSize.Builder().withNegativeEffectSize(rate_1 - (-b + sqrt(b * b - 4 * a * c)) / (2 * a)).withPositiveEffectSize(rate_1 - (-b - sqrt(b * b - 4 * a * c)) / (2 * a)).build();}  }
class C{  public static Aggregate<Map<String,Concept>,Optional<?>> min(String varName){  return new MinAggregate(varName);}  }
class C{  public static boolean saveToFolder(File basedir,FunktionConfig config,boolean overwriteIfExists) throws IOException {  File file=new File(basedir,FunktionConfigs.FILE_NAME);  if (file.exists()) {    if (!overwriteIfExists) {      LOG.warn("Not generating " + file + " as it already exists");      return false;    }  }  return saveConfig(config,file);}  }
class C{  public void join(TransactionParticipant part,long crashCount,ServerTransaction userXtnObject,int partitionId,String clusterName,IDirectSpaceProxy clusterProxy) throws CannotJoinException, CrashCountException, RemoteException {  if (finer_op_logger) {    operationsLogger.entering(TxnManagerTransaction.class.getName(),"join",new Object[]{part,new Long(crashCount)});  }  int state=getState();  if (state != ACTIVE && !_reenteredPreparedXid)   throw new CannotJoinException("not active");  if ((state == ACTIVE) && !_leaseForEver && !ensureCurrent()) {    doAbort(0);    throw new CannotJoinException("Lease expired");  }  ParticipantHandle ph=null;  try {synchronized (this) {      if (userXtnObject != null && _leaseRenewed)       updateLeaseInUserXtnIfNeeded(userXtnObject);      if (_singleHandle != null && _singleHandle.getParticipant() == part) {        _singleHandle.setDisableDisjoin();        return;      }      ph=new ParticipantHandle(part,crashCount,null,_persistent,partitionId,clusterName,clusterProxy);      if (_singleHandle == null) {        _singleHandle=ph;        return;      }      if (_parts == null) {        _parts=new HashMap<ParticipantHandle,ParticipantHandle>(2);        if (_singleHandle.getStubId() == null && _singleHandle.getParticipant() instanceof ILRMIProxy) {          ILRMIProxy stub=(ILRMIProxy)_singleHandle.getParticipant();          _singleHandle.setStubId(stub.getStubId());        }        _parts.put(_singleHandle,_singleHandle);      }      if (part instanceof ILRMIProxy) {        ILRMIProxy stub=(ILRMIProxy)part;        ph.setStubId(stub.getStubId());      }      ParticipantHandle cur=_parts.get(ph);      if (cur == null)       _parts.put(ph,ph); else       cur.setDisableDisjoin();    }  } catch (  InternalManagerException ime) {    if (transactionsLogger.isLoggable(Level.SEVERE)) {      transactionsLogger.log(Level.SEVERE,"TransactionParticipant unable to join",ime);    }    throw ime;  }catch (  RemoteException re) {    if (transactionsLogger.isLoggable(Level.FINEST)) {      transactionsLogger.log(Level.FINEST,"TransactionParticipant unable to be stored",re);    }    throw re;  }  if (finer_op_logger) {    operationsLogger.exiting(TxnManagerTransaction.class.getName(),"join");  }}  }
class C{  public boolean on_fly_cg(){  return soot.PhaseOptions.getBoolean(options,"on-fly-cg");}  }
class C{  public IgDiskCache(File directory,long maxSizeInBytes){  this(directory,maxSizeInBytes,DEFAULT_MAX_COUNT,AsyncTask.SERIAL_EXECUTOR);}  }
class C{  public void flush() throws IOException {  try {    _writer.write(_buffer,0,_pos);    _writer.flush();  } catch (  IOException except) {    if (_exception == null)     _exception=except;    throw except;  }  _pos=0;}  }
class C{  public void removeFeatureTypeStyle(FeatureTypeStyle ftsToDelete){  List<FeatureTypeStyle> ftsList=this.symbolData.getStyle().featureTypeStyles();  int indexFound=-1;  int index=0;  for (  FeatureTypeStyle fts : ftsList) {    if (fts == ftsToDelete) {      indexFound=index;      break;    } else {      index++;    }  }  if (indexFound > -1) {    ftsList.remove(indexFound);  }}  }
class C{  @Provides @Singleton @BlackListIpValueStore MapStore<Long> provideBlackListIps(@Global CuratorFramework curator,LifeCycleRegistry lifeCycle){  CuratorFramework webCurator=withComponentNamespace(curator,"web");  return lifeCycle.manage(new ZkMapStore<>(webCurator,"/blacklist",new ZkTimestampSerializer()));}  }
class C{  @Override public void generateReport(){  this.cfg=new Configuration();  try {    configureFreeMarker();    getTemplate();    merge();  } catch (  IOException e) {    LOG.error("Exception when setting template directory",e);  }}  }
class C{  public WallGetCommentsQueryWithExtended allowGroupComments(Boolean value){  return unsafeParam("allow_group_comments",value);}  }
class C{  public synchronized VisualTable addTable(String group,Schema schema){  VisualTable vt=new VisualTable(this,group,schema);  addDataGroup(group,vt,null);  return vt;}  }
class C{  public boolean isTextVisible(Object parentObj,Object obj){  boolean enabled=false;  if (overallEnableSymbolizersOverride) {    enabled=(obj instanceof Rule);  }  return enabled;}  }
class C{  public AppsGetCatalogQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public void freeSLHolder(IStoredListIterator<T> slh){  if (slh != null)   slh.release();}  }
class C{  private void init(Properties configProps){  Log.d(Mary.LOG,configProps.toString());  this.langResources=new HashMap<>();  for (  Map.Entry<Object,Object> oneEntry : configProps.entrySet()) {    String oneLanguage=(String)oneEntry.getKey();    String langDir=(String)oneEntry.getValue();    System.out.println(String.format("loading language resources for %s from %s",oneLanguage,langDir));    this.langResources.put(oneLanguage,new LanguageResource(oneLanguage,langDir));  }}  }
class C{  public void clear(){  clear(DEFAULT_CAPACITY);}  }
class C{  public void notifyAttackedObservers(Creature creature){  notifyObservers(ObserverType.ATTACKED,creature);}  }
class C{  public static boolean viewsIntersect(View view1,View view2){  final int[] view1Loc=new int[2];  view1.getLocationOnScreen(view1Loc);  final Rect view1Rect=new Rect(view1Loc[0],view1Loc[1],view1Loc[0] + view1.getWidth(),view1Loc[1] + view1.getHeight());  int[] view2Loc=new int[2];  view2.getLocationOnScreen(view2Loc);  final Rect view2Rect=new Rect(view2Loc[0],view2Loc[1],view2Loc[0] + view2.getWidth(),view2Loc[1] + view2.getHeight());  return view1Rect.intersect(view2Rect);}  }
class C{  public static boolean readConfig(Class<?> panelId,String fullResourceName,Map<Class<?>,List<SymbolTypeConfig>> fieldEnableMap){  XMLSymbolTypeConfig symbolTypeConfig=(XMLSymbolTypeConfig)ParseXML.parseUIFile(fullResourceName,SCHEMA_RESOURCE,XMLSymbolTypeConfig.class);  if (symbolTypeConfig == null) {    return false;  }  for (  XMLPanelDetails xmlPanelDetails : symbolTypeConfig.getPanel()) {    String symbolizerClassName=xmlPanelDetails.getType();    logger.debug("Symbolizer : " + symbolizerClassName);    Class<?> symbolizerClass;    try {      symbolizerClass=Class.forName(symbolizerClassName);      List<SymbolTypeConfig> configList=readSymbolizerConfig(panelId,xmlPanelDetails);      fieldEnableMap.put(symbolizerClass,configList);    } catch (    ClassNotFoundException e) {      ConsoleManager.getInstance().exception(SymbolTypeConfigReader.class,e);      return false;    }  }  return true;}  }
class C{  @MainThread public static void cancel(@NonNull final String jobId,@NonNull final String componentId){  checkMainThread();  HashMap<String,Thinr> instances=componentIdToThinrInstances.get(componentId);  if (instances != null) {    Thinr instance=instances.get(jobId);    if (instance != null) {      instance.cancel();      if (instance.cancelFunction == null) {        instances.remove(jobId);      }    }  }}  }
class C{  public void clear(){  _objMap.clear();  _objIdMap.clear();}  }
class C{  public int compute(String line){  this.line=line;  int count=0;  if (attemptFirstWord) {    int a=0;    while (a < line.length()) {      if (line.charAt(a) == '>' || Character.isWhitespace(line.charAt(a)))       a++; else       break;    }    int b=a + 1;    while (b < line.length()) {      int ch=line.charAt(b);      if (Character.isLetterOrDigit(ch) || ch == ':' || ch == '_')       b++; else       break;    }    if (b - a > 4) {      pairs[count][0]=a;      pairs[count++][1]=b;    }  }  if (idTags.length > 0) {    for (    String tag : idTags) {      int b;      for (int a=line.indexOf(tag); a != -1; a=line.indexOf(tag,b + 1)) {        a+=tag.length();        b=a + 1;        while (b < line.length() && (Character.isLetterOrDigit(line.charAt(b)) || line.charAt(b) == '_'))         b++;        if (b > a) {          if (count == pairs.length)           pairs=MultiWords.grow(pairs);          pairs[count][0]=a;          pairs[count++][1]=b;        }      }    }  }  return count;}  }
class C{  private void finishLaunch(){  mCurrentRunnable=null;  if (mQueue.size() != 0) {    mCurrentRunnable=mQueue.remove(0);    mCurrentRunnable.launch();  }}  }
class C{  public Sinc(boolean normalized){  this.normalized=normalized;}  }
class C{  @Override public int[] makeInverseCumulativeTestValues(){  return new int[]{1,1,1,1,1,1,2,10,10,10,9,8,10};}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  public void increaseDpi(){  if (this.currentDpiPos < (this.dpiSizes.length - 1)) {    ++this.currentDpiPos;  }}  }
class C{  private CommandTagHandleImpl<String> createCommandTagHandleImpl(final Long id){  Builder<String> builder=new Builder<String>(id);  builder=builder.clientTimeout(666).dataType(String.class.getName()).description("test descriptor").hardwareAddress(createHardwareAddress()).maxValue("666").minValue("1").name("test name").rbacAuthorizationDetails(createAuthDetails()).processId(123L);  return new CommandTagHandleImpl<String>(builder);}  }
class C{  public StringRequest(int method,String url,Response.Listener<String> listener,Response.ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public GSServerTransaction(){  super();}  }
class C{  public static void tintTextView(@NonNull TextView textview,ColorStateList tintColor){  textview.setTextColor(tintColor);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {    Drawable[] drawables=textview.getCompoundDrawablesRelative();    textview.setCompoundDrawablesRelative(tintDrawable(drawables[0],tintColor),tintDrawable(drawables[1],tintColor),tintDrawable(drawables[2],tintColor),tintDrawable(drawables[3],tintColor));  } else {    Drawable[] drawables=textview.getCompoundDrawables();    textview.setCompoundDrawables(tintDrawable(drawables[0],tintColor),tintDrawable(drawables[1],tintColor),tintDrawable(drawables[2],tintColor),tintDrawable(drawables[3],tintColor));  }}  }
class C{  private void parseLayoutNode(String layoutFile,AXmlNode rootNode){  if (rootNode.getTag() == null || rootNode.getTag().isEmpty()) {    System.err.println("Encountered a null or empty node name " + "in file " + layoutFile + ", skipping node...");    return;  }  String tname=rootNode.getTag().trim();  if (tname.equals("dummy")) {  } else   if (tname.equals("include")) {    parseIncludeAttributes(layoutFile,rootNode);  } else   if (tname.equals("merge")) {  } else   if (tname.equals("fragment")) {    final AXmlAttribute<?> attr=rootNode.getAttribute("name");    if (attr == null)     System.err.println("Fragment without class name detected"); else {      if (attr.getType() != AxmlVisitor.TYPE_STRING)       System.err.println("Invalid targer resource " + attr.getValue() + "for fragment class value");      getLayoutClass(attr.getValue().toString());    }  } else {    final SootClass childClass=getLayoutClass(tname);    if (childClass != null && (isLayoutClass(childClass) || isViewClass(childClass)))     parseLayoutAttributes(layoutFile,childClass,rootNode);  }  for (  AXmlNode childNode : rootNode.getChildren())   parseLayoutNode(layoutFile,childNode);}  }
class C{  public NewsfeedGetBannedQueryWithExtended fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public static String graphToCASCDot(CASCGraph gTree){  StringBuffer sb=new StringBuffer();  String sConnector;  sb.append("graph {\n");  sConnector="--";  Iterator iIter=gTree.getEdgeSet().iterator();  TreeSet tsDescribed=new TreeSet();  while (iIter.hasNext()) {    Edge e=(Edge)iIter.next();    if (!tsDescribed.contains(e.getVertexA().getLabel())) {      tsDescribed.add(e.getVertexA().getLabel());      if (gTree.getVertexType(e.getVertexA()) == gTree.NORMAL)       sb.append("\t" + e.getVertexA().getLabel() + " [label=\""+ e.getVertexA().getLabel()+ "\" shape=plaintext fontsize=24]\n"); else       sb.append("\t" + e.getVertexA().getLabel() + " [shape=point]\n");    }    if (!tsDescribed.contains(e.getVertexB().getLabel())) {      tsDescribed.add(e.getVertexB().getLabel());      if (gTree.getVertexType(e.getVertexB()) == gTree.NORMAL)       sb.append("\t" + e.getVertexB().getLabel() + " [label=\""+ e.getVertexB().getLabel()+ "\" shape=plaintext fontsize=24]\n"); else       sb.append("\t" + e.getVertexB().getLabel() + " [shape=point]\n");    }    if (e instanceof WeightedEdge)     sb.append("\t" + e.getVertexA() + " "+ sConnector+ " "+ e.getVertexB()+ " [weight="+ (int)(((WeightedEdge)e).getWeight() * 100)+ "]\n"); else     sb.append("\t" + e.getVertexA() + " "+ sConnector+ " "+ e.getVertexB()+ "\n");  }  sb.append("}");  return sb.toString();}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public static void main(String[] args){  arguments=args;  JBCOViewer inst=new JBCOViewer();  inst.setVisible(true);}  }
class C{  @Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {  if (fInDTD) {    return;  }  if (!fDeferNodeExpansion) {    if (fCurrentEntityDecl != null && !fFilterReject) {      fCurrentEntityDecl.setXmlEncoding(encoding);      if (version != null)       fCurrentEntityDecl.setXmlVersion(version);    }  } else {    if (fDeferredEntityDecl != -1) {      fDeferredDocumentImpl.setEntityInfo(fDeferredEntityDecl,version,encoding);    }  }}  }
class C{  public GtExpr newGtExpr(Value op1,Value op2){  return new JGtExpr(op1,op2);}  }
class C{  @Override public void optionSelected(Class<?> fieldPanelId,String selectedItem){  setSymbolTypeVisibility(fieldPanelId,selectedItem);  selectedFillPanelId=fieldPanelId;  dataHasChanged();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PRINT_SCREEN(String value0){  return new SM_SYSTEM_MESSAGE(1300779,value0);}  }
class C{  private void init(final AttributeSet attrs){  Typeface typeface;  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {    super.setTypeface(typeface,typeface.getStyle());  }}  }
class C{  public QueueReader<MethodOrMethodContext> newListener(){  return reachables.reader();}  }
class C{  private void cancelPreviousWebRtcNotifications(){  Set<String> notificationIds=mSharedPreferences.getStringSet(WEBRTC_NOTIFICATION_IDS,null);  if (notificationIds == null)   return;  Iterator<String> iterator=notificationIds.iterator();  while (iterator.hasNext()) {    mNotificationManager.cancel(NOTIFICATION_NAMESPACE,Integer.parseInt(iterator.next()));  }  SharedPreferences.Editor sharedPreferenceEditor=mSharedPreferences.edit();  sharedPreferenceEditor.remove(MediaCaptureNotificationService.WEBRTC_NOTIFICATION_IDS);  sharedPreferenceEditor.apply();}  }
class C{  public static byte[] writeFloat(float f){  return ByteBuffer.allocate(4).putFloat(f).array();}  }
class C{  protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  if (contentType != null) {    uriRequest.setHeader("Content-Type",contentType);  }  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());  responseHandler.setRequestURI(uriRequest.getURI());  Future<?> request=threadPool.submit(new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler));  if (context != null) {    List<WeakReference<Future<?>>> requestList=requestMap.get(context);    if (requestList == null) {      requestList=new LinkedList<WeakReference<Future<?>>>();      requestMap.put(context,requestList);    }    requestList.add(new WeakReference<Future<?>>(request));  }  return new RequestHandle(request);}  }
class C{  public void printTable(ScoutWidget[] list){  printCenterTable(list);  printBaseTable(list);}  }
class C{  public static void errorNotification(final String message){  showNotification(message,NotificationType.ERROR);}  }
class C{  public void commitBuffer() throws IOException {  if (mThread == null) {    mThread=new Thread(this);    mThread.start();  }  if (++mBufferIn >= mBufferCount)   mBufferIn=0;  mBufferCommitted.release();}  }
class C{  public RequestHandle post(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(url),entity),contentType,responseHandler,context);}  }
class C{  public static boolean isCurrency(char c){  return (c == '$') || isRange(c,'\u00A2','\u00A5') || isRange(c,'\u20A0','\u20CF');}  }
class C{  public static List<Bucket> createCompleteBuckets(Experiment experiment,int numberOfBuckets){  double[] percentages=new double[numberOfBuckets];  Arrays.fill(percentages,1.0d / numberOfBuckets);  return createBuckets(experiment,percentages);}  }
class C{  public boolean addSubEquipmentId(final Long subEquipmentId){  if (subEquipmentId != null && subEquipmentId > 0) {    return subEquipmentIds.add(subEquipmentId);  }  return false;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public static String T2S(String text){  char[] chars=text.toCharArray();  for (int i=0; i < chars.length; i++) {    Character replacement=t2s.get(chars[i]);    if (replacement != null) {      chars[i]=replacement;    }  }  return new String(chars);}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public static void toXls(List<Grid> grids,OutputStream out) throws Exception {  WritableWorkbook workbook=openWorkbook(out);  for (int i=0; i < grids.size(); i++) {    Grid grid=grids.get(i);    String sheetName=CodecUtils.filenameEncode(StringUtils.defaultIfEmpty(grid.getTitle(),XLS_SHEET_PREFIX + (i + 1)));    toXlsInternal(grid,workbook,sheetName,i);  }  workbook.write();  workbook.close();}  }
class C{  public static float calculateAspectRatio(float left,float top,float right,float bottom){  final float width=right - left;  final float height=bottom - top;  return width / height;}  }
class C{  public PhotosSearchQuery lng(Float value){  return unsafeParam("long",value);}  }
class C{  @Override public String matchPredicateOperand(String alias){  Objects.requireNonNull(alias,"alias cannot be null");  return "ID(" + alias + ")";}  }
class C{  public GroupsSearchQuery future(Boolean value){  return unsafeParam("future",value);}  }
class C{  public boolean isApplicable(){  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;}  }
class C{  protected VideoPutTagQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_NO_COMPONENT_ITEM_MULTIPLE(int num1,String value0){  return new SM_SYSTEM_MESSAGE(1330047,num1,value0);}  }
class C{  public static boolean isAccessLegal(SootMethod container,Stmt stmt){  if (stmt.containsInvokeExpr()) {    return AccessManager.isAccessLegal(container,stmt.getInvokeExpr().getMethod());  } else   if (stmt instanceof AssignStmt) {    AssignStmt as=(AssignStmt)stmt;    if (as.getRightOp() instanceof FieldRef) {      FieldRef r=(FieldRef)as.getRightOp();      return AccessManager.isAccessLegal(container,r.getField());    }    if (as.getLeftOp() instanceof FieldRef) {      FieldRef r=(FieldRef)as.getLeftOp();      return AccessManager.isAccessLegal(container,r.getField());    }  }  return true;}  }
class C{  public boolean isEmpty(){  return lat.isEmpty();}  }
class C{  @NotNull private static Storage calculateInitialVmHeap(@NotNull AvdDeviceData deviceData){  ScreenSize size=AvdScreenData.getScreenSize(deviceData.diagonalScreenSize().get());  Density density=AvdScreenData.getScreenDensity(deviceData.isTv().get(),deviceData.screenDpi().get(),deviceData.screenResolutionHeight().get());  int vmHeapSize=32;  boolean isScreenXLarge=size.equals(ScreenSize.XLARGE);switch (density) {case LOW:case MEDIUM:    vmHeapSize=(isScreenXLarge) ? 32 : 16;  break;case TV:case HIGH:case DPI_280:case DPI_360:vmHeapSize=(isScreenXLarge) ? 64 : 32;break;case XHIGH:case DPI_400:case DPI_420:case XXHIGH:case DPI_560:case XXXHIGH:vmHeapSize=(isScreenXLarge) ? 128 : 64;break;case NODPI:case ANYDPI:break;}return new Storage(vmHeapSize,Storage.Unit.MiB);}  }
class C{  @Override public void endCDATA(Augmentations augs) throws XNIException {}  }
class C{  private void modifyQueryForSearch(QueryHelper qh,String columnName,String searchTerm){  String[] words=searchTerm.split(" ");  String[] selectionArgs=new String[words.length * 2];  qh.Selection="";  for (int i=0; i < words.length; i++) {    if (i != 0) {      qh.Selection+=" AND ";    }    qh.Selection+="(" + columnName + " LIKE ? OR "+ columnName+ " LIKE ?)";    selectionArgs[i * 2]="% " + words[i] + "%";    selectionArgs[(i * 2) + 1]=words[i] + "%";  }  qh.SelectionArgs=selectionArgs;}  }
class C{  public static Object processTarget(Object target){  if (Proxy.isProxyClass(target.getClass())) {    MetaObject mo=SystemMetaObject.forObject(target);    return processTarget(mo.getValue("h.target"));  }  return target;}  }
class C{  public synchronized BookKeeperClientBuilder bkc(BookKeeperClient bkc){  this.cachedClient=bkc;  return this;}  }
class C{  public static boolean isPrimitiveWrapper(Class<?> type){  return PRIMITIVE_WRAPPER_TYPES.contains(type);}  }
class C{  @VisibleForTesting protected String generateRandomUUID(){  return UUID.randomUUID().toString();}  }
class C{  private static int computeCapacity(final int expectedSize){  if (expectedSize == 0) {    return 1;  }  final int capacity=(int)FastMath.ceil(expectedSize / LOAD_FACTOR);  final int powerOfTwo=Integer.highestOneBit(capacity);  if (powerOfTwo == capacity) {    return capacity;  }  return nextPowerOfTwo(capacity);}  }
class C{  private boolean checkIfBatchIsProcessedCompletely(BatchResult batch){  if (counter < batch.getSize()) {    return false;  } else {    return true;  }}  }
class C{  private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {  if (count * 13 > bits.available()) {    throw FormatException.getFormatInstance();  }  byte[] buffer=new byte[2 * count];  int offset=0;  while (count > 0) {    int twoBytes=bits.readBits(13);    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);    if (assembledTwoBytes < 0x003BF) {      assembledTwoBytes+=0x0A1A1;    } else {      assembledTwoBytes+=0x0A6A1;    }    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);    offset+=2;    count--;  }  try {    result.append(new String(buffer,StringUtils.GB2312));  } catch (  UnsupportedEncodingException ignored) {    throw FormatException.getFormatInstance();  }}  }
class C{  private void validateDictionaryFileOffsetWithLastSegmentEntryOffset() throws IOException {  chunkMetaObjectForLastSegmentEntry=getChunkMetaObjectForLastSegmentEntry();  int bytesToTruncate=(int)(chunk_start_offset - chunkMetaObjectForLastSegmentEntry.getEnd_offset());  if (bytesToTruncate > 0) {    LOGGER.info("some inconsistency in dictionary file for column " + this.columnIdentifier);    FileFactory.FileType fileType=FileFactory.getFileType(this.dictionaryFilePath);    CarbonFile carbonFile=FileFactory.getCarbonFile(this.dictionaryFilePath,fileType);    boolean truncateSuccess=carbonFile.truncate(this.dictionaryFilePath,chunkMetaObjectForLastSegmentEntry.getEnd_offset());    if (!truncateSuccess) {      LOGGER.info("Diction file not truncated successfully for column " + this.columnIdentifier);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_SUBMIT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390258,value0,value1);}  }
class C{  @RequestMapping(value="/complete",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<List<AuthorDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {  List<AuthorDTO> results=authorDTOService.complete(acq.query,acq.maxResults);  return new ResponseEntity<>(results,new HttpHeaders(),HttpStatus.OK);}  }
class C{  public void importXLIFF(Long assetId,String xliffContent,boolean updateTM){  Asset asset=assetRepository.findOne(assetId);  ImportExportedXliffStep importExportedXliffStep=new ImportExportedXliffStep(asset,xliffContent,updateTM);  importXLIFF(importExportedXliffStep,xliffContent);}  }
class C{  public CSVTableReader(ParserFactory parserFactory){  super(parserFactory);}  }
class C{  public static String fixedWidthDoubletoString(double x,int w,int d){  java.text.DecimalFormat fmt=new java.text.DecimalFormat();  fmt.setMaximumFractionDigits(d);  fmt.setMinimumFractionDigits(d);  fmt.setGroupingUsed(false);  String s=fmt.format(x);  while (s.length() < w) {    s=" " + s;  }  return s;}  }
class C{  public boolean registerPathFlag(int id,int maxSize){  if (pathFlags != null && id < pathFlags.size() && pathFlags.get(id))   return false;  if (pathFlags == null) {synchronized (this) {      if (pathFlags == null) {        AtomicBitSet pf=new AtomicBitSet(maxSize);        pathFlags=pf;      }    }  }  return pathFlags.set(id);}  }
class C{  private void initWidget(View v){  TextView content=(TextView)v.findViewById(R.id.dialog_path_text);  DisplayUtils.setTypeface(getActivity(),content);  v.findViewById(R.id.dialog_path_copyBtn).setOnClickListener(this);  v.findViewById(R.id.dialog_path_enterBtn).setOnClickListener(this);}  }
class C{  public ContentWrapperView(Context context,InfoBar infoBar,View panel){  super(context);  mInfoBar=infoBar;  mGravity=Gravity.TOP;  Resources resources=context.getResources();  LayoutParams wrapParams=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);  setLayoutParams(wrapParams);  setBackgroundColor(ApiCompatibilityUtils.getColor(resources,R.color.infobar_background));  View separator=new View(context);  separator.setBackgroundColor(ApiCompatibilityUtils.getColor(resources,R.color.infobar_background_separator));  addView(separator,new LayoutParams(LayoutParams.MATCH_PARENT,getBoundaryHeight(context),mGravity));  addChildView(panel);}  }
class C{  public boolean isDisabled(String type){  return !isEnabled(type);}  }
