class C{  public final void toggleSelected(){  setSelected(!isSelected());}  }
class C{  private void adjustAllocation() throws Exception {  for (int j=0; j < m_runLines.length; j++)   adjustAllocation(j);}  }
class C{  public boolean isDrawFilledEnabled(){  return mDrawFilled;}  }
class C{  @Override public boolean retainAll(Collection<?> c){  throw new UnsupportedOperationException("cannot retainAll in Empty Ranges");}  }
class C{  public NodeId(int namespaceIndex,int value){  this(namespaceIndex,UnsignedInteger.getFromBits(value));}  }
class C{  public static String bind(String message,Object[] bindings){  return MessageFormat.format(message,bindings);}  }
class C{  private static void checkArguments(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01760: Graph argument can not be null");}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  if (m_Classifier instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_Classifier).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      newVector.addElement(mname);    }  }  return newVector.elements();}  }
class C{  public void updateView(View child,View dependency){  float percent=0;  float start=0;  float current=0;  float end=UNSPECIFIED_INT;switch (mDependType) {case DEPEND_TYPE_WIDTH:    start=mDependStartWidth;  current=dependency.getWidth();end=mDependTargetWidth;break;case DEPEND_TYPE_HEIGHT:start=mDependStartHeight;current=dependency.getHeight();end=mDependTargetHeight;break;case DEPEND_TYPE_X:start=mDependStartX;current=dependency.getX();end=mDependTargetX;break;case DEPEND_TYPE_Y:start=mDependStartY;current=dependency.getY();end=mDependTargetY;break;}if (end != UNSPECIFIED_INT) {percent=Math.abs(current - start) / Math.abs(end - start);}updateViewWithPercent(child,percent > 1 ? 1 : percent);}  }
class C{  private List<BuckBlock> buildSubBlocks(){  final List<BuckBlock> blocks=new ArrayList<BuckBlock>();  for (ASTNode child=myNode.getFirstChildNode(); child != null; child=child.getTreeNext()) {    final IElementType childType=child.getElementType();    if (child.getTextRange().isEmpty()) {      continue;    }    if (childType == TokenType.WHITE_SPACE) {      continue;    }    if (childType == BuckTypes.GLOB_BLOCK) {      continue;    }    blocks.add(buildSubBlock(child));  }  return Collections.unmodifiableList(blocks);}  }
class C{  protected DBIDs computeSubspaceForGene(short[] gene,ArrayList<ArrayList<DBIDs>> ranges){  HashSetModifiableDBIDs m=null;  for (int i=0; i < gene.length; i++) {    if (gene[i] != DONT_CARE) {      DBIDs current=ranges.get(i).get(gene[i] - GENE_OFFSET);      if (m == null) {        m=DBIDUtil.newHashSet(current);      } else {        m.retainAll(current);      }    }  }  assert (m != null) : "All genes set to '*', should not happen!";  return m;}  }
class C{  private void clipToGraphArea(Canvas canvas){  int x=getScrollX() + leftBorder;  int y=topBorder;  canvas.clipRect(x,y,x + effectiveWidth,y + effectiveHeight);}  }
class C{  void createMultiplePR(int startIndexForRegion,int endIndexForRegion){  int startIndexForNode=0;  int endIndexForNode=4;  int midIndexForRegion=(endIndexForRegion - startIndexForRegion) / 2;  startIndexForNode=0;  endIndexForNode=3;  List vmList=addNodeToList(startIndexForNode,endIndexForNode);  localMaxMemory=200;  createPartitionRegion(vmList,startIndexForRegion,midIndexForRegion,localMaxMemory,redundancy);  startIndexForNode=3;  endIndexForNode=4;  vmList=addNodeToList(startIndexForNode,endIndexForNode);  localMaxMemory=0;  createPartitionRegion(vmList,startIndexForRegion,midIndexForRegion,localMaxMemory,redundancy);  startIndexForNode=0;  endIndexForNode=3;  vmList=addNodeToList(startIndexForNode,endIndexForNode);  localMaxMemory=200;  final int redundancyTwo=1;  createPartitionRegion(vmList,midIndexForRegion,endIndexForNode,localMaxMemory,redundancyTwo);  startIndexForNode=3;  endIndexForNode=4;  vmList=addNodeToList(startIndexForNode,endIndexForNode);  localMaxMemory=0;  createPartitionRegion(vmList,midIndexForRegion,endIndexForNode,localMaxMemory,redundancyTwo);  LogWriterUtils.getLogWriter().info("testBucketCerationInMultiPlePartitionRegion() - Partition Regions successfully created ");}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm determines the maximum weight spanning tree " + " and returns a Naive Bayes network augmented with a tree.\n\n" + "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void testUnAckedMessageAreNotConsumedOnSessionClose() throws JMSException {  connection.start();  Session session=connection.createSession(false,ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);  Queue queue=session.createQueue(getQueueName());  MessageProducer producer=session.createProducer(queue);  producer.send(session.createTextMessage("Hello"));  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  session.close();  session=connection.createSession(false,ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  msg=consumer.receive(2000);  assertNotNull(msg);  msg.acknowledge();  session.close();}  }
class C{  public SQLException(String reason,String sqlState,Throwable cause){  super(reason,cause);  this.SQLState=sqlState;  this.vendorCode=0;  if (!(this instanceof SQLWarning)) {    if (DriverManager.getLogWriter() != null) {      printStackTrace(DriverManager.getLogWriter());      DriverManager.println("SQLState(" + SQLState + ")");    }  }}  }
class C{  private static void initCommonVariable(Calendar _calendar,boolean _traceFlag,int numUser) throws Exception {  initialize();  traceFlag=_traceFlag;  if (_calendar == null) {    calendar=Calendar.getInstance();  } else {    calendar=_calendar;  }  CloudSimShutdown shutdown=new CloudSimShutdown("CloudSimShutdown",numUser);  shutdownId=shutdown.getId();}  }
class C{  public double cond(){  return s[0] / s[Math.min(m,n) - 1];}  }
class C{  @ObjectiveCName("isAudioAutoDownloadEnabled") public boolean isAudioAutoDownloadEnabled(){  return modules.getSettingsModule().isAudioAutoDownloadEnabled();}  }
class C{  public void deleteShardDirectorySafe(ShardId shardId,Settings indexSettings) throws IOException {  assert indexSettings != Settings.EMPTY;  final Path[] paths=availableShardPaths(shardId);  logger.trace("deleting shard {} directory, paths: [{}]",shardId,paths);  try (ShardLock lock=shardLock(shardId)){    deleteShardDirectoryUnderLock(lock,indexSettings);  } }  }
class C{  static String packageNameOf(Element el){  while (true) {    Element enclosing=el.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    el=(Element)enclosing;  }}  }
class C{  protected static String nonAlias(String str){  if (str == null)   return null;  String[] arr=str.split(" [aA][sS] ");  return arr[0].trim();}  }
class C{  public void handleConfiguration(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  if (mRetainedFragmentManager.firstTimeIn()) {    Log.d(TAG,"First time onCreate() call");    initialize(opsType,instance);  } else {    Log.d(TAG,"Second or subsequent onCreate() call");    mOpsInstance=mRetainedFragmentManager.get(opsType.getSimpleName());    if (mOpsInstance == null)     initialize(opsType,instance); else     mOpsInstance.onConfiguration(instance,false);  }}  }
class C{  public static void main(String[] args){  TestDocRootInlineTag tester=new TestDocRootInlineTag();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public Monitor findByName(String name) throws MonitorException {  return impl.findByName(name);}  }
class C{  @Override protected void onResume(){  super.onResume();  registerReceiver();}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  @RequestMapping(value={"/apply","/apply/"},method=RequestMethod.POST) @ResponseBody public RestWrapper apply(@ModelAttribute("processtemplate") @Valid ProcessTemplate processTemplate,BindingResult bindingResult){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    LOGGER.debug("parent.process.id = " + processTemplate.getParentProcessId());    List<ProcessTemplate> processTemplateInfos=new ArrayList<ProcessTemplate>();    processTemplateInfos=processTemplateDAO.selectPTList(processTemplate.getProcessTemplateId());    for (    ProcessTemplate processTempInfo : processTemplateInfos) {      List<Process> processInfos=new ArrayList<Process>();      processInfos=processTemplateDAO.selectPListForTemplate(processTemplate.getProcessTemplateId());      for (      Process processInfo : processInfos) {        LOGGER.debug("Entered update");        processTempInfo.setProcessId(processInfo.getProcessId());        processTempInfo.setParentProcessId(processInfo.getParentProcessId());        processTempInfo.setEnqProcessId(processInfo.getEnqProcessId());        processTempInfo.setProcessName(processInfo.getProcessName());        processTempInfo.setDescription(processInfo.getDescription());        LOGGER.debug("processtempinfo.batchmarking= " + processTempInfo.getBatchPattern());        LOGGER.debug("processtempinfo.type= " + processTempInfo.getProcessTypeId());        LOGGER.debug("processtempinfo.canrecover= " + processTempInfo.getCanRecover());        LOGGER.debug("processInfo next process id is " + processInfo.getNextProcessIds());        processTempInfo.setNextProcessIds(processInfo.getNextProcessIds());      }    }    for (    ProcessTemplate processTempInfo : processTemplateInfos) {      List<Process> processInfos=processTemplateDAO.selectPListForTemplate(processTemplate.getProcessTemplateId());      for (      Process processInfo : processInfos) {        List<PropertiesTemplate> propTemplateList=propertiesTemplateDAO.listPropertiesTemplateBean(processTemplate.getProcessTemplateId());        if (propTemplateList.isEmpty()) {          for (          PropertiesTemplate propertyTemplate : propTemplateList) {            propertyTemplate.setProcessId(processInfo.getProcessId());          }        }      }    }    List<Process> processesForInsert=processTemplateDAO.selectPPListForTemplateId(processTemplate.getProcessTemplateId());    for (    Process process : processesForInsert) {      processTemplate.setProcessId(process.getProcessId());      LOGGER.debug("ProcessId= " + process.getProcessId());      List<ProcessTemplate> processTemplates=processTemplateDAO.selectMissingSubTList(processTemplate.getProcessId(),processTemplate.getProcessTemplateId());      for (      ProcessTemplate processTemplate1 : processTemplates) {        processTemplate1.setParentProcessId(process.getProcessId());        processTemplate1.setEnqProcessId(0);        processTemplate1.setNextProcessIds("");        com.wipro.ats.bdre.md.dao.jpa.Process insertDaoProcess=new com.wipro.ats.bdre.md.dao.jpa.Process();        com.wipro.ats.bdre.md.dao.jpa.ProcessType daoProcessType=new com.wipro.ats.bdre.md.dao.jpa.ProcessType();        daoProcessType.setProcessTypeId(processTemplate1.getProcessTypeId());        insertDaoProcess.setProcessType(daoProcessType);        if (processTemplate1.getWorkflowId() != null) {          WorkflowType daoWorkflowType=new WorkflowType();          daoWorkflowType.setWorkflowId(processTemplate1.getWorkflowId());          insertDaoProcess.setWorkflowType(daoWorkflowType);        }        BusDomain daoBusDomain=new BusDomain();        daoBusDomain.setBusDomainId(processTemplate1.getBusDomainId());        insertDaoProcess.setBusDomain(daoBusDomain);        if (processTemplate1.getProcessTemplateId() != null) {          com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate daoProcessTemplate=new com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate();          daoProcessTemplate.setProcessTemplateId(processTemplate1.getProcessTemplateId());          insertDaoProcess.setProcessTemplate(daoProcessTemplate);        }        if (processTemplate1.getParentProcessId() != null) {          com.wipro.ats.bdre.md.dao.jpa.Process parentProcess=new com.wipro.ats.bdre.md.dao.jpa.Process();          parentProcess.setProcessId(processTemplate1.getParentProcessId());          insertDaoProcess.setProcess(parentProcess);        }        insertDaoProcess.setDescription(processTemplate1.getDescription());        insertDaoProcess.setAddTs(processTemplate1.getAddTS());        insertDaoProcess.setProcessName(processTemplate1.getProcessName());        if (processTemplate1.getCanRecover() == null)         insertDaoProcess.setCanRecover(true); else         insertDaoProcess.setCanRecover(processTemplate1.getCanRecover());        if (processTemplate1.getDeleteFlag() == null)         insertDaoProcess.setDeleteFlag(true); else         insertDaoProcess.setDeleteFlag(processTemplate1.getDeleteFlag());        insertDaoProcess.setEnqueuingProcessId(processTemplate1.getEnqProcessId());        if (processTemplate1.getBatchPattern() != null) {          insertDaoProcess.setBatchCutPattern(processTemplate1.getBatchPattern());        }        insertDaoProcess.setNextProcessId(processTemplate1.getNextProcessIds());        Integer processId=processDAO.insert(insertDaoProcess);        processTemplate1.setProcessId(processId);        processTemplate1.setTableAddTS(DateConverter.dateToString(processTemplate1.getAddTS()));      }    }    List<Process> processesForDelete=processTemplateDAO.selectPPListForTemplateId(processTemplate.getProcessTemplateId());    for (    Process process : processesForDelete) {      processTemplate.setProcessId(process.getProcessId());      LOGGER.debug("ProcessId= " + process.getProcessId());      List<ProcessTemplate> processTemplates=processTemplateDAO.selectMissingSubPList(processTemplate.getProcessId(),processTemplate.getProcessTemplateId());      for (      ProcessTemplate processTemplate1 : processTemplates) {        processDAO.delete(processTemplate1.getProcessId());      }    }    List<ProcessTemplate> processTemplatesForInsert=processTemplateDAO.selectPTList(processTemplate.getProcessTemplateId());    for (    ProcessTemplate processTemplateForInsert : processTemplatesForInsert) {      LOGGER.debug("HERE processTemplateForInsertid= " + processTemplateForInsert.getProcessTemplateId());      List<Process> processesForPropInsert=processTemplateDAO.selectPListForTemplate(processTemplateForInsert.getProcessTemplateId());      for (      Process processForPropInsert : processesForPropInsert) {        LOGGER.debug("HERE processForPropInsertid= " + processForPropInsert.getProcessId());        ProcessTemplate procTemplate=new ProcessTemplate();        procTemplate.setParentProcessId(processTemplatesForInsert.get(0).getProcessTemplateId());        LOGGER.debug("procTemplate.setParentProcessId = " + procTemplate.getParentProcessId());        procTemplate.setProcessId(processForPropInsert.getProcessId());        LOGGER.debug("procTemplate.setProcessId= " + procTemplate.getProcessId());        procTemplate.setProcessTemplateId(processTemplateForInsert.getProcessTemplateId());        LOGGER.debug("procTemplate.setProcessTemplateId= " + procTemplate.getProcessTemplateId());        List<PropertiesTemplate> propertiesTemplates=processTemplateDAO.selectMissingPropListForT(procTemplate.getProcessId(),procTemplate.getParentProcessId(),procTemplate.getProcessTemplateId());        for (        PropertiesTemplate propertyTemplates : propertiesTemplates) {          LOGGER.debug("HERE property to be inserted = " + propertyTemplates.getProcessId() + "property config= "+ propertyTemplates.getConfigGroup());          com.wipro.ats.bdre.md.dao.jpa.Properties jpaPropertyTemplate=new com.wipro.ats.bdre.md.dao.jpa.Properties();          PropertiesId propertiesId=new PropertiesId();          propertiesId.setProcessId(propertyTemplates.getProcessId());          propertiesId.setPropKey(propertyTemplates.getKey());          com.wipro.ats.bdre.md.dao.jpa.Process process=new com.wipro.ats.bdre.md.dao.jpa.Process();          process.setProcessId(propertyTemplates.getProcessId());          jpaPropertyTemplate.setProcess(process);          jpaPropertyTemplate.setConfigGroup(propertyTemplates.getConfigGroup());          jpaPropertyTemplate.setPropValue(propertyTemplates.getValue());          jpaPropertyTemplate.setDescription(propertyTemplates.getDescription());          jpaPropertyTemplate.setId(propertiesId);          propertiesDAO.insert(jpaPropertyTemplate);        }      }    }    LOGGER.debug("checking proctemplate before using it= " + processTemplate.getProcessTemplateId());    List<ProcessTemplate> processTemplatesForDelete=processTemplateDAO.selectPTList(processTemplate.getProcessTemplateId());    for (    ProcessTemplate processTemplateForDelete : processTemplatesForDelete) {      List<Process> processesForPropDelete=processTemplateDAO.selectPListForTemplate(processTemplateForDelete.getProcessTemplateId());      for (      Process processForPropDelete : processesForPropDelete) {        List<Properties> propertiesForDelete=processTemplateDAO.selectMissingPropListForP(processForPropDelete.getProcessId(),processForPropDelete.getProcessTemplateId());        for (        Properties propertyForDelete : propertiesForDelete) {          LOGGER.debug("prperty to be deleted  = " + propertyForDelete.getProcessId() + " "+ propertyForDelete.getKey());          PropertiesId propertiesId=new PropertiesId();          propertiesId.setProcessId(propertyForDelete.getProcessId());          propertiesId.setPropKey(propertyForDelete.getKey());          propertiesDAO.delete(propertiesId);        }      }    }    restWrapper=new RestWrapper(processTemplate,RestWrapper.OK);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  } finally {    AdjustNextIdsForApply(processTemplate);  }  return restWrapper;}  }
class C{  public void flingY(int velocityY){  int height=getHeight();  int bottom=getChildAt(getChildCount() - 1).getBottom();  mScroller.fling(mScrollX,mScrollY,0,velocityY,0,0,0,bottom - height);  final boolean movingDown=velocityY > 0;  View newFocused=findFocusableViewInMyBoundsY(movingDown,mScroller.getFinalY(),findFocus());  if (newFocused == null) {    newFocused=this;  }  if (newFocused != findFocus() && newFocused.requestFocus(movingDown ? View.FOCUS_DOWN : View.FOCUS_UP)) {    mScrollViewMovedFocus=true;    mScrollViewMovedFocus=false;  }  invalidate();}  }
class C{  @RequestMapping(method=RequestMethod.PUT,value="/{query}") @ApiOperation(value="update parametrized query",notes="Update named, parametrized query by ID",response=void.class) @ApiResponses({@ApiResponse(code=200,message="Updated successfully."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="queryId does not exist."),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @PreAuthorize("@securityService.authorize('DATA', 'READ')") public ResponseEntity<?> update(@PathVariable("query") final String queryId,@RequestParam(value="q",required=false) String oqlInUrl,@RequestBody(required=false) final String oqlInBody){  final String oqlStatement=validateQuery(oqlInUrl,oqlInBody);  logger.debug("Updating a named, parametrized Query ({}) with ID ({})...",oqlStatement,queryId);  checkForQueryIdExist(PARAMETERIZED_QUERIES_REGION,queryId);  updateNamedQuery(PARAMETERIZED_QUERIES_REGION,queryId,oqlStatement);  compiledQueries.remove(queryId);  return new ResponseEntity<Object>(HttpStatus.OK);}  }
class C{  public String types(){  return "Circles";}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public BaseEventEntry(){  super();  getCategories().add(EventEntry.EVENT_CATEGORY);}  }
class C{  public QueryOrTemplateCall(Resource cls,Query query){  this.cls=cls;  this.query=query;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void writeURL(JsonGenerator jsonGenerator,Object entity) throws IOException {  jsonGenerator.writeFieldName(URL);  if (entity instanceof EntitySet) {    jsonGenerator.writeObject(((EntitySet)entity).getName());  } else {    jsonGenerator.writeObject(((Singleton)entity).getName());  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.608 -0400",hash_original_method="4810FC5CE3CAB0CAD1200C5A2A6DEBB2",hash_generated_method="E6ED5A98613FAFF75741DD77BAA51BD3") public BluetoothTestUtils(Context context,String tag,String outputFile){  mContext=context;  mTag=tag;  mOutputFile=outputFile;  if (mOutputFile == null) {    mOutputWriter=null;  } else {    try {      mOutputWriter=new BufferedWriter(new FileWriter(new File(Environment.getExternalStorageDirectory(),mOutputFile),true));    } catch (    IOException e) {      Log.w(mTag,"Test output file could not be opened",e);      mOutputWriter=null;    }  }}  }
class C{  public void select(int pos){  if (pos >= 0) {    try {      int line=getLineOfOffset(pos);      Rectangle rect=modelToView(pos);      if (rect == null) {        select(pos,pos);      } else {        try {          Rectangle nrect=modelToView(getLineStartOffset(line + 1));          if (nrect != null) {            rect=nrect;          }        } catch (        Exception exc) {        }        JViewport vp=(JViewport)getParent();        Rectangle viewRect=vp.getViewRect();        if (viewRect.y + viewRect.height > rect.y) {          select(pos,pos);        } else {          rect.y+=(viewRect.height - rect.height) / 2;          scrollRectToVisible(rect);          select(pos,pos);        }      }    } catch (    BadLocationException exc) {      select(pos,pos);    }  }}  }
class C{  public int size(){  return mSize;}  }
class C{  public void serialize(KXmlSerializer serializer) throws IOException {  mDeviceInfo.serialize(serializer);  serializeHostInfo(serializer);  serializeTestSummary(serializer);  monkeyTag.serialize(serializer);  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());  Collections.sort(pkgs,new PkgComparator());  for (  TestPackageResult r : pkgs) {    r.serialize(serializer);  }}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {  SCHEMES.get(iprot.getScheme()).getScheme().read(iprot,this);}  }
class C{  public void tagExport(String[] names,int[] ids) throws IOException {  startTag(TAG_EXPORT,true);  int count=ids.length;  out.writeUI16(count);  for (int i=0; i < count; i++) {    out.writeUI16(ids[i]);    out.writeString(names[i]);  }  completeTag();}  }
class C{  void unparse(){  int i, j;  Code_attribute ca;  byte bc[];  method_info mi;  exception_table_entry e;  for (i=0; i < methods_count; i++) {    mi=methods[i];    ca=mi.locate_code_attribute();    if (ca == null)     continue;    bc=unparseMethod(mi);    if (bc == null) {      G.v().out.println("Recompile of " + mi.toName(constant_pool) + " failed!");    } else {      ca.code_length=bc.length;      ca.code=bc;      for (j=0; j < ca.exception_table_length; j++) {        e=ca.exception_table[j];        e.start_pc=(e.start_inst.label);        if (e.end_inst != null)         e.end_pc=(e.end_inst.label); else         e.end_pc=(int)(ca.code_length);        e.handler_pc=(e.handler_inst.label);      }    }  }}  }
class C{  public static TableIndex create(Table table,TableIndex index){  TableIndex copy=create(table.getAIS(),table,index.getIndexName().getName(),index.getIndexId(),index.isUnique(),index.isPrimaryKey(),index.getConstraintName());  if (index.isSpatial()) {    copy.markSpatial(index.firstSpatialArgument(),index.spatialColumns(),index.getIndexMethod());  }  return copy;}  }
class C{  public void tagSerialNumber(String serialNumber) throws IOException {  if (tags != null) {    tags.tagSerialNumber(serialNumber);  }}  }
class C{  public static String normalizePositiveInteger(String value){  return normalizeIntegerValue(value,"1",null);}  }
class C{  public static boolean[] subarray(boolean[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return EMPTY_BOOLEAN_ARRAY;  }  boolean[] subarray=new boolean[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public Summary(String text,Object result){  if (text == null)   throw new NullPointerException("Text is null");  if (text.trim().length() == 0)   throw new IllegalArgumentException("Text is empty or all whitespace");  this.result=result;  JTextArea jta=new JTextArea();  jta.setText(text);  jta.setWrapStyleWord(true);  jta.setLineWrap(true);  jta.getCaret().setBlinkRate(0);  jta.setEditable(false);  jta.getCaret().setVisible(true);  Font f=UIManager.getFont("Label.font");  if (f != null)   jta.setFont(f);  comp=new JScrollPane(jta);}  }
class C{  public <U extends T,A,B,C>OngoingMatchingR3<T,U,A,B,C,R> when(DecomposableMatchBuilder3<U,A,B,C> decomposableMatchBuilder){  return new OngoingMatchingR3<>(this,decomposableMatchBuilder.build());}  }
class C{  public SQLFeatureNotSupportedException(Throwable cause){  super(cause);}  }
class C{  public DefaultUriDataSource(Context context,TransferListener listener,String userAgent,boolean allowCrossProtocolRedirects){  this(context,listener,new DefaultHttpDataSource(userAgent,null,listener,DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS,allowCrossProtocolRedirects));}  }
class C{  public boolean isNameCompatible(String simpleName,Kind kind){  if (kind == Kind.SOURCE) {    String name=f.getName();    String n=simpleName + ".ceylon";    if (name.endsWith(n)) {      return true;    }    int limit=simpleName.indexOf("$$overload");    if (limit >= 0) {      n=simpleName.substring(0,limit) + ".ceylon";      if (name.endsWith(n)) {        return true;      }    }  }  return f.isNameCompatible(simpleName,kind);}  }
class C{  @Override public synchronized void removeAll(){  DefaultTreeModel model=(DefaultTreeModel)getModel();  DefaultMutableTreeNode root=(DefaultMutableTreeNode)model.getRoot();  root.removeAllChildren();  model.nodeStructureChanged(root);  nodes.clear();}  }
class C{  @Override public void onSuccess(){  if (measuredHeight <= 0)   measuredHeight=itemContainer.getMeasuredHeight();  ViewGroup.LayoutParams params=giveawayImage.getLayoutParams();  params.height=measuredHeight;}  }
class C{  public static boolean isStatic(int flags){  return (flags & STATIC) != 0;}  }
class C{  private static InetAddress maskIP(byte[] ip,byte[] mask){  if (ip.length != mask.length) {    throw new IllegalArgumentException("IP address and mask must be of the same length.");  }  if (ip.length != 4) {    throw new IllegalArgumentException("IP address and mask length must be equal to 4.");  }  try {    byte[] maskedIp=new byte[ip.length];    for (int i=0; i < ip.length; i++) {      maskedIp[i]=(byte)(ip[i] & mask[i]);    }    return getByAddress(maskedIp);  } catch (  UnknownHostException e) {    return null;  }}  }
class C{  public static sun.security.krb5.internal.ktab.KeyTab snapshotFromJavaxKeyTab(KeyTab ktab){  return KerberosSecrets.getJavaxSecurityAuthKerberosAccess().keyTabTakeSnapshot(ktab);}  }
class C{  public void testGetPreferences() throws IOException {  String id=Long.toString((new Date()).getTime());  Profile project=new Profile(this.getName(),id,new File(this.workspace.toFile(),id));  Class<?> clazz=this.getClass();  Preferences shared=JmriPreferencesProvider.getPreferences(project,clazz,true);  Preferences privat=JmriPreferencesProvider.getPreferences(project,clazz,false);  assertNotNull(shared);  assertNotNull(privat);  assertNotSame(shared,privat);  try {    assertEquals(shared.keys().length,0);  } catch (  BackingStoreException ex) {    assertNotNull(ex);  }  try {    assertEquals(privat.keys().length,0);  } catch (  BackingStoreException ex) {    assertNotNull(ex);  }  FileUtil.delete(project.getPath());}  }
class C{  public DGetPassword(JFrame parent,String title){  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  public void pathValuesToPixel(List<Path> paths){  for (int i=0; i < paths.size(); i++) {    pathValueToPixel(paths.get(i));  }}  }
class C{  public static final void drawLineSegment(GL2 gl,double p1x,double p1y,double p2x,double p2y,boolean points){  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(p1x,p1y);  gl.glVertex2d(p2x,p2y);  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    gl.glVertex2d(p1x,p1y);    gl.glVertex2d(p2x,p2y);    gl.glEnd();  }}  }
class C{  public void ifCmp(final Type type,final int mode,final Label label){switch (type.getSort()) {case Type.LONG:    mv.visitInsn(Opcodes.LCMP);  break;case Type.DOUBLE:mv.visitInsn(mode == GE || mode == GT ? Opcodes.DCMPL : Opcodes.DCMPG);break;case Type.FLOAT:mv.visitInsn(mode == GE || mode == GT ? Opcodes.FCMPL : Opcodes.FCMPG);break;case Type.ARRAY:case Type.OBJECT:switch (mode) {case EQ:mv.visitJumpInsn(Opcodes.IF_ACMPEQ,label);return;case NE:mv.visitJumpInsn(Opcodes.IF_ACMPNE,label);return;}throw new IllegalArgumentException("Bad comparison for type " + type);default :int intOp=-1;switch (mode) {case EQ:intOp=Opcodes.IF_ICMPEQ;break;case NE:intOp=Opcodes.IF_ICMPNE;break;case GE:intOp=Opcodes.IF_ICMPGE;break;case LT:intOp=Opcodes.IF_ICMPLT;break;case LE:intOp=Opcodes.IF_ICMPLE;break;case GT:intOp=Opcodes.IF_ICMPGT;break;}mv.visitJumpInsn(intOp,label);return;}mv.visitJumpInsn(mode,label);}  }
class C{  public void passScoreBeforeParsing(Text url,CrawlDatum datum,Content content){  content.getMetadata().set(Nutch.SCORE_KEY,"" + datum.getScore());}  }
class C{  public void prepareDialogInstance(){  final LmlParser parser=interfaceService.getParser();  if (actionContainer != null) {    parser.getData().addActionContainer(getId(),actionContainer);  }  dialog=(Window)parser.createView(wrappedObject,Gdx.files.internal(dialogData.value())).first();  if (actionContainer != null) {    parser.getData().removeActionContainer(getId());  }}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (SerialAddress.validSystemNameConfig(systemName,'L'));}  }
class C{  public void sync() throws IOException {  hashFile.sync();  idFile.sync();  dataFile.sync();}  }
class C{  public long totalFailedCount(){  return _totalFailedCount;}  }
class C{  public SyncRequestMessage(SyncRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetKeys()) {    List<ByteBuffer> __this__keys=new ArrayList<ByteBuffer>();    for (    ByteBuffer other_element : other.keys) {      ByteBuffer temp_binary_element=org.apache.thrift.TBaseHelper.copyBinary(other_element);      ;      __this__keys.add(temp_binary_element);    }    this.keys=__this__keys;  }}  }
class C{  @Override public String toString(){  return new StringBuffer("PreSharedKey Identity [").append(identity).append("]").toString();}  }
class C{  List<INaviModule> initializeRawModules(final List<INaviModule> modules,final List<INaviRawModule> rawModules){  final List<INaviModule> newModules=new ArrayList<INaviModule>();  for (  final INaviRawModule rawModule : rawModules) {    if (!hasModule(modules,rawModule)) {      try {        newModules.add(createModule(rawModule));      } catch (      CouldntLoadDataException|CouldntSaveDataException e) {        CUtilityFunctions.logException(e);      }    }  }  return newModules;}  }
class C{  protected static String[] convertTypeNamesToSigs(char[][] typeNames){  if (typeNames == null)   return CharOperation.NO_STRINGS;  int n=typeNames.length;  if (n == 0)   return CharOperation.NO_STRINGS;  String[] typeSigs=new String[n];  for (int i=0; i < n; ++i) {    typeSigs[i]=Signature.createTypeSignature(typeNames[i],false);  }  return typeSigs;}  }
class C{  public void parse() throws Exception {  parse(input.event().daemon().size);}  }
class C{  private E dequeue(){  Node<E> h=head;  Node<E> first=h.next;  h.next=h;  head=first;  E x=first.item;  first.item=null;  return x;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final Map<?,?> map){  buffer.append(map);}  }
class C{  public static AndroidHttpClient newInstance(String userAgent,Context context){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setStaleCheckingEnabled(params,false);  HttpConnectionParams.setConnectionTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSoTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSocketBufferSize(params,8192);  HttpClientParams.setRedirecting(params,false);  Object sessionCache=null;  if (null != context && null != sSslSessionCacheClass) {    Constructor<?> ct;    try {      ct=sSslSessionCacheClass.getConstructor(Context.class);      sessionCache=ct.newInstance(context);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  HttpProtocolParams.setUserAgent(params,userAgent);  SchemeRegistry schemeRegistry=new SchemeRegistry();  schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));  SocketFactory sslCertificateSocketFactory=null;  if (null != sessionCache) {    Method getHttpSocketFactoryMethod;    try {      getHttpSocketFactoryMethod=SSLCertificateSocketFactory.class.getDeclaredMethod("getHttpSocketFactory",Integer.TYPE,sSslSessionCacheClass);      sslCertificateSocketFactory=(SocketFactory)getHttpSocketFactoryMethod.invoke(null,SOCKET_OPERATION_TIMEOUT,sessionCache);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  if (null == sslCertificateSocketFactory) {    sslCertificateSocketFactory=SSLSocketFactory.getSocketFactory();  }  schemeRegistry.register(new Scheme("https",sslCertificateSocketFactory,443));  ClientConnectionManager manager=new ThreadSafeClientConnManager(params,schemeRegistry);  return new AndroidHttpClient(manager,params);}  }
class C{  private void incState(){  if (state < probabilities.length - 1) {    state++;  }}  }
class C{  public CTracesPanel(final CDebugPerspectiveModel model,final ZyGraph graph,final ITraceListProvider traceProvider,final CGraphPanel graphPanel){  super(new BorderLayout());  m_model=model;  m_graph=graph;  m_traceProvider=traceProvider;  m_graphPanel=graphPanel;  m_innerPanel=new CDebugEventListPanel(traceProvider);  add(m_innerPanel);  m_traceTable=m_innerPanel.getTracesTable();  m_eventTable=m_innerPanel.getEventsTable();  m_traceTable.addMouseListener(new InternalTraceTableListener());  m_eventTable.addMouseListener(new InternalEventsTableListener());}  }
class C{  public static GenericDraweeHierarchyBuilder updateBuilder(GenericDraweeHierarchyBuilder builder,Context context,@Nullable AttributeSet attrs){  int progressBarAutoRotateInterval=0;  int roundedCornerRadius=0;  boolean roundTopLeft=true;  boolean roundTopRight=true;  boolean roundBottomLeft=true;  boolean roundBottomRight=true;  if (attrs != null) {    TypedArray gdhAttrs=context.obtainStyledAttributes(attrs,R.styleable.GenericDraweeHierarchy);    try {      final int indexCount=gdhAttrs.getIndexCount();      for (int i=0; i < indexCount; i++) {        final int attr=gdhAttrs.getIndex(i);        if (attr == R.styleable.GenericDraweeHierarchy_actualImageScaleType) {          builder.setActualImageScaleType(getScaleTypeFromXml(gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_placeholderImage) {          builder.setPlaceholderImage(getDrawable(context,gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_pressedStateOverlayImage) {          builder.setPressedStateOverlay(getDrawable(context,gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_progressBarImage) {          builder.setProgressBarImage(getDrawable(context,gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_fadeDuration) {          builder.setFadeDuration(gdhAttrs.getInt(attr,0));        } else         if (attr == R.styleable.GenericDraweeHierarchy_viewAspectRatio) {          builder.setDesiredAspectRatio(gdhAttrs.getFloat(attr,0));        } else         if (attr == R.styleable.GenericDraweeHierarchy_placeholderImageScaleType) {          builder.setPlaceholderImageScaleType(getScaleTypeFromXml(gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_retryImage) {          builder.setRetryImage(getDrawable(context,gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_retryImageScaleType) {          builder.setRetryImageScaleType(getScaleTypeFromXml(gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_failureImage) {          builder.setFailureImage(getDrawable(context,gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_failureImageScaleType) {          builder.setFailureImageScaleType(getScaleTypeFromXml(gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_progressBarImageScaleType) {          builder.setProgressBarImageScaleType(getScaleTypeFromXml(gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_progressBarAutoRotateInterval) {          progressBarAutoRotateInterval=gdhAttrs.getInteger(attr,progressBarAutoRotateInterval);        } else         if (attr == R.styleable.GenericDraweeHierarchy_backgroundImage) {          builder.setBackground(getDrawable(context,gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_overlayImage) {          builder.setOverlay(getDrawable(context,gdhAttrs,attr));        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundAsCircle) {          getRoundingParams(builder).setRoundAsCircle(gdhAttrs.getBoolean(attr,false));        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundedCornerRadius) {          roundedCornerRadius=gdhAttrs.getDimensionPixelSize(attr,roundedCornerRadius);        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundTopLeft) {          roundTopLeft=gdhAttrs.getBoolean(attr,roundTopLeft);        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundTopRight) {          roundTopRight=gdhAttrs.getBoolean(attr,roundTopRight);        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundBottomLeft) {          roundBottomLeft=gdhAttrs.getBoolean(attr,roundBottomLeft);        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundBottomRight) {          roundBottomRight=gdhAttrs.getBoolean(attr,roundBottomRight);        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundWithOverlayColor) {          getRoundingParams(builder).setOverlayColor(gdhAttrs.getColor(attr,0));        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundingBorderWidth) {          getRoundingParams(builder).setBorderWidth(gdhAttrs.getDimensionPixelSize(attr,0));        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundingBorderColor) {          getRoundingParams(builder).setBorderColor(gdhAttrs.getColor(attr,0));        } else         if (attr == R.styleable.GenericDraweeHierarchy_roundingBorderPadding) {          getRoundingParams(builder).setPadding(gdhAttrs.getDimensionPixelSize(attr,0));        }      }    }  finally {      gdhAttrs.recycle();    }  }  if (builder.getProgressBarImage() != null && progressBarAutoRotateInterval > 0) {    builder.setProgressBarImage(new AutoRotateDrawable(builder.getProgressBarImage(),progressBarAutoRotateInterval));  }  if (roundedCornerRadius > 0) {    getRoundingParams(builder).setCornersRadii(roundTopLeft ? roundedCornerRadius : 0,roundTopRight ? roundedCornerRadius : 0,roundBottomRight ? roundedCornerRadius : 0,roundBottomLeft ? roundedCornerRadius : 0);  }  return builder;}  }
class C{  public Word lsh(int amt){  return new Word(value.lsh(amt));}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  public mxCircleLayout(mxGraph graph,double radius){  super(graph);  this.radius=radius;}  }
class C{  private void fillJars(){synchronized (_pathList) {    _pathList.clear();    loadPaths(_pathList);    Collections.sort(_pathList);    for (    PathImpl jar : _pathList) {      addJar(jar);    }  }}  }
class C{  public void write(final byte[] data,final int offset,final int length) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.write(byte[], int, int)");  if (offset < 0) {    throw new IllegalArgumentException("Array offset may not be negative");  }  if (length < 0) {    throw new IllegalArgumentException("Array length may not be negative");  }  if (offset + length > data.length) {    throw new IllegalArgumentException("Given offset and length exceed the array length");  }  assertOpen();  try {    outputStream.write(data,offset,length);  } catch (  final Throwable t) {    LOG.debug("",t);    if (t instanceof IOException) {      throw (IOException)t;    }    if (t instanceof IllegalStateException) {      throw (IllegalStateException)t;    }    throw new Error(t);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public Builder startFrom(int startFrom){  this.startFrom=startFrom;  return this;}  }
class C{  private boolean calls_app_method(MethodOrMethodContext mc,Stack<SootMethod> stack){  CallGraph cg=PTABridge.v().getCallGraph();  logger.info("  cam: entering iterator, stack = {}",stack);  if (no_callback_methods.contains(mc.method().getName()))   return false;  if (system_depth(stack) > 5) {    no_callback_methods.add(mc.method().getName());    return false;  }  int ii=0;  for (Iterator<Edge> tit=cg.edgesOutOf(mc); tit.hasNext(); ) {    Edge e=tit.next();    SootMethod m=e.getTgt().method();    logger.info("  cam: considering method {} ({})",m,ii++);    if (no_callback_methods.contains(m.getName()))     continue;    if (m.toString().contains("<clinit>"))     continue;    if (!is_system(m)) {      logger.info("  cam: {} is not a system call");      return true;    }    if (!stack.contains(m)) {      stack.push(m);      boolean result=calls_app_method(e.getTgt(),stack);      stack.pop();      if (result) {        logger.info("  cam: {} true",m);        return true;      }    }  }  logger.info("  cam: {} is terminal",mc.method());  no_callback_methods.add(mc.method().getName());  return false;}  }
class C{  public synchronized void start(){  if (workers.size() > 0) {    throw new RuntimeException("Start called while there are workers" + " still running");  }  for (int i=0; i < numWorkers; i++) {    Worker worker=new Worker<Job>(workerName,jobsToRun,this);    workers.add(worker);  }  for (  Worker w : workers) {    try {      Thread.sleep(100);    } catch (    Exception e) {      LOG.error(e);    }    w.start();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int nextInt(){  return nextInt(defaultRadix);}  }
class C{  public static void createDir(File target) throws AdeUsageException {  if (!target.exists() && !target.mkdir() && !target.exists()) {    throw new AdeUsageException("Failed creating directory " + target.getPath());  }}  }
class C{  WildcardArgumentWithLowerBound(Type[] lowerBounds){  super(ParameterBound.forTypes(lowerBounds));}  }
class C{  public boolean isTickMarksVisible(){  return this.showTickMarksCheckBox.isSelected();}  }
class C{  public static ArrayList<BloomFilter<Integer>> searchFirstInBFList(List<BloomFilter<Integer>> bfList,Integer o,SearchStatistics stat){  ArrayList<BloomFilter<Integer>> result=new ArrayList<BloomFilter<Integer>>();  for (int i=0; i < bfList.size(); i++) {    stat.nbBFChecks++;    if (bfList.get(i).contains(o)) {      result.add(bfList.get(i));      break;    }  }  return result;}  }
class C{  public void playTogether(Animator... items){  if (items != null) {    mNeedsSort=true;    Builder builder=play(items[0]);    for (int i=1; i < items.length; ++i) {      builder.with(items[i]);    }  }}  }
class C{  public SubscriptionMigrationExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  public Process(final String xmlString) throws IOException, XMLException {  initContext();  StringReader in=new StringReader(xmlString);  readProcess(in);  in.close();}  }
class C{  public static byte[] encodeBase64(byte[] binaryData,boolean isChunked){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  int encodedDataLength=0;  int nbrChunks=0;  if (fewerThan24bits != 0) {    encodedDataLength=(numberTriplets + 1) * 4;  } else {    encodedDataLength=numberTriplets * 4;  }  if (isChunked) {    nbrChunks=(CHUNK_SEPARATOR.length == 0 ? 0 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));    encodedDataLength+=nbrChunks * CHUNK_SEPARATOR.length;  }  encodedData=new byte[encodedDataLength];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  int nextSeparatorIndex=CHUNK_SIZE;  int chunksSoFar=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];    encodedIndex+=4;    if (isChunked) {      if (encodedIndex == nextSeparatorIndex) {        System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);        chunksSoFar++;        nextSeparatorIndex=(CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);        encodedIndex+=CHUNK_SEPARATOR.length;      }    }  }  dataIndex=i * 3;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  if (isChunked) {    if (chunksSoFar < nbrChunks) {      System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength - CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);    }  }  return encodedData;}  }
class C{  void close(String name){  if (jmx) {    try {      Utils.callStaticMethod("org.h2.jmx.DatabaseInfo.unregisterMBean",name);    } catch (    Exception e) {      throw DbException.get(ErrorCode.FEATURE_NOT_SUPPORTED_1,e,"JMX");    }  }  DATABASES.remove(name);}  }
class C{  public SurfaceObjectTileBuilder(){}  }
class C{  public static List<Date> computeFireTimes(OperableTrigger trigg,org.quartz.Calendar cal,int numTimes){  LinkedList<Date> lst=new LinkedList<Date>();  OperableTrigger t=(OperableTrigger)trigg.clone();  if (t.getNextFireTime() == null) {    t.computeFirstFireTime(cal);  }  for (int i=0; i < numTimes; i++) {    Date d=t.getNextFireTime();    if (d != null) {      lst.add(d);      t.triggered(cal);    } else {      break;    }  }  return java.util.Collections.unmodifiableList(lst);}  }
class C{  private void handleError(ChatError error){  if (sLogger.isActivated()) {    sLogger.info("Subscribe has failed: " + error.getErrorCode() + ", reason="+ error.getMessage());  }  mSubscribed=false;  stopTimer();  resetDialogPath();}  }
class C{  public OrganizationDataException(){  super();}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private static void verifyWriteSetNotFound(final BTree btree){  log.info("");  for (int i=0; i < 1000; i++) {    if (btree.contains(i)) {      throw new RuntimeException("Not expecting: key=" + i);    }  }}  }
class C{  public DynamicColumnData(final TableColumn tableColumn,final String preferredLength){  this(tableColumn,DynamicLengthFormat.parse(preferredLength),new DynamicLength(0d,DynamicLengthMeasure.PIXEL));}  }
class C{  protected boolean isChecked(int position){  return position < checked.size() && checked.get(position);}  }
class C{  public String toString(){  return "Extension : title(" + title + "), name("+ name+ "), spec vendor("+ specVendor+ "), spec version("+ specVersion+ "), impl vendor("+ vendor+ "), impl vendor id("+ vendorId+ "), impl version("+ implementationVersion+ "), impl url("+ url+ ")";}  }
class C{  public ValidationResult(int rc,String s,String ss){  setResponseCode(rc);  setStatus(s);  setSubstatus(ss);}  }
class C{  public void maintain(List<Runnable> pendingExecutions,ExpirationDetails expirationDetails){}  }
class C{  private static int findNalStartCode(byte[] data,int index){  int endIndex=data.length - NAL_START_CODE.length;  for (int i=index; i <= endIndex; i++) {    if (isNalStartCode(data,i)) {      return i;    }  }  return -1;}  }
class C{  public void unlockUI(ProcessInfo pi){  setEnabled(true);  setCursor(Cursor.getDefaultCursor());  generateComplete(pi);}  }
class C{  public boolean isDrawSelectedSymbol(){  return this.drawSelectedSymbol;}  }
class C{  public static boolean isXMLAlphabeticCharacter(char c){  return (c < 128) && (ALPHABETIC_CHARACTER[c / 32] & (1 << (c % 32))) != 0;}  }
class C{  public void addOptionToSelect(String option){  if (optionsToSelect == null) {    optionsToSelect=new LinkedList<>();  }  optionsToSelect.add(option);}  }
class C{  private boolean fileExists(String fileName){  return new File(fileName).exists();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void filterDataSources(List<ApplicationResource> resources,List<ApplicationResource> dataSources){  for (  ApplicationResource res : resources) {    if (res.getDataSourceInfo() != null) {      dataSources.add(res);    }  }}  }
class C{  @Override public final void paintComponent(final Graphics g){  super.paintComponent(g);  final Graphics2D g2=(Graphics2D)g;  g2.drawImage(image,0,0,this);}  }
class C{  public void testStateTransitionWithRecovery() throws Throwable {  createServers(3);  final CopycatClient client=createClient(RecoveryStrategies.RECOVER);  final AtomicReference<CopycatClient.State> prev=new AtomicReference<>(CopycatClient.State.CONNECTED);  client.onStateChange(null);  ((ClientSession)client.session()).expire().thenAccept(null);  await(5000,2);}  }
class C{  public void addLayer(int position,QGisLayer layer){  this.layers.add(position,layer);}  }
class C{  public final void writeByte(int v){  write(v);}  }
class C{  @Override protected View onCreateView(){  View view=LayoutInflater.from(SampleKeyguardProviderService.this).inflate(R.layout.main,null);  mImageView=(ImageView)view.findViewById(R.id.cid);  return view;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (tracerType_1: ");  result.append(tracerType_1);  result.append(')');  return result.toString();}  }
class C{  private <T>T hold(DataStoreTransaction subTransaction,T object){  if (subTransaction != lastDataStoreTransaction) {    clonedObjects.put(object,cloneObject(object));  }  return object;}  }
class C{  private static void assertParse(PsiBuilder builder,GroovyParser parser){  PsiBuilder.Marker marker=builder.mark();  ParserUtils.getToken(builder,GroovyTokenTypes.kASSERT);  if (!ConditionalExpression.parse(builder,parser)) {    builder.error(GroovyBundle.message("expression.expected"));  }  if (ParserUtils.lookAhead(builder,GroovyTokenTypes.mCOLON) || GroovyTokenTypes.mCOMMA.equals(builder.getTokenType())) {    builder.advanceLexer();    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);    if (!AssignmentExpression.parse(builder,parser)) {      builder.error(GroovyBundle.message("expression.expected"));    }  }  marker.done(GroovyElementTypes.ASSERT_STATEMENT);}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits){  this.effectiveKeyBits=effectiveKeyBits;  iv=null;}  }
class C{  public static void serializeActions(JsonGenerator jsonGenerator,List<OFAction> actions) throws IOException, JsonProcessingException {  StringBuilder sb=new StringBuilder();  int len=actions.size();  int pos=0;  for (  OFAction a : actions) {switch (a.getType()) {case OUTPUT:      sb.append(ActionUtils.STR_OUTPUT).append("=").append(((OFActionOutput)a).getPort().toString());    break;case SET_VLAN_VID:  sb.append(ActionUtils.STR_VLAN_SET_VID).append("=").append(((OFActionSetVlanVid)a).getVlanVid().getVlan());break;case SET_VLAN_PCP:sb.append(ActionUtils.STR_VLAN_SET_PCP).append("=").append(((OFActionSetVlanPcp)a).getVlanPcp().getValue());break;case SET_QUEUE:sb.append(ActionUtils.STR_QUEUE_SET).append("=").append(((OFActionSetQueue)a).getQueueId());break;case SET_DL_SRC:sb.append(ActionUtils.STR_DL_SRC_SET).append("=").append(((OFActionSetDlSrc)a).getDlAddr().toString());break;case SET_DL_DST:sb.append(ActionUtils.STR_DL_DST_SET).append("=").append(((OFActionSetDlDst)a).getDlAddr().toString());break;case SET_NW_SRC:sb.append(ActionUtils.STR_NW_SRC_SET).append("=").append(((OFActionSetNwSrc)a).getNwAddr().toString());break;case SET_NW_DST:sb.append(ActionUtils.STR_NW_DST_SET).append("=").append(((OFActionSetNwDst)a).getNwAddr().toString());break;case SET_NW_TOS:sb.append(ActionUtils.STR_NW_TOS_SET).append("=").append(((OFActionSetNwTos)a).getNwTos());break;case SET_TP_SRC:sb.append(ActionUtils.STR_TP_SRC_SET).append("=").append(((OFActionSetTpSrc)a).getTpPort().getPort());break;case SET_TP_DST:sb.append(ActionUtils.STR_TP_DST_SET).append("=").append(((OFActionSetTpDst)a).getTpPort().getPort());break;case ENQUEUE:sb.append(ActionUtils.STR_ENQUEUE).append("=").append(((OFActionEnqueue)a).getPort().getPortNumber());break;case GROUP:sb.append(ActionUtils.STR_GROUP).append("=").append(((OFActionGroup)a).getGroup().toString());break;case STRIP_VLAN:sb.append(ActionUtils.STR_VLAN_STRIP).append("=").append(ActionUtils.STR_NOT_APPLICABLE);break;case PUSH_VLAN:sb.append(ActionUtils.STR_VLAN_PUSH).append("=").append(((OFActionPushVlan)a).getEthertype().getValue());break;case PUSH_MPLS:sb.append(ActionUtils.STR_MPLS_PUSH).append("=").append(((OFActionPushMpls)a).getEthertype().getValue());break;case PUSH_PBB:sb.append(ActionUtils.STR_PBB_PUSH).append("=").append(((OFActionPushPbb)a).getEthertype().getValue());break;case POP_VLAN:sb.append(ActionUtils.STR_VLAN_POP).append("=").append(ActionUtils.STR_NOT_APPLICABLE);break;case POP_MPLS:sb.append(ActionUtils.STR_MPLS_POP).append("=").append(((OFActionPopMpls)a).getEthertype().getValue());break;case POP_PBB:sb.append(ActionUtils.STR_PBB_POP).append("=").append(ActionUtils.STR_NOT_APPLICABLE);break;case COPY_TTL_IN:sb.append(ActionUtils.STR_TTL_IN_COPY).append("=").append(ActionUtils.STR_NOT_APPLICABLE);break;case COPY_TTL_OUT:sb.append(ActionUtils.STR_TTL_OUT_COPY).append("=").append(ActionUtils.STR_NOT_APPLICABLE);break;case DEC_NW_TTL:sb.append(ActionUtils.STR_NW_TTL_DEC).append("=").append(ActionUtils.STR_NOT_APPLICABLE);break;case DEC_MPLS_TTL:sb.append(ActionUtils.STR_MPLS_TTL_DEC).append("=").append(ActionUtils.STR_NOT_APPLICABLE);break;case SET_MPLS_LABEL:sb.append(ActionUtils.STR_MPLS_LABEL_SET).append("=").append(((OFActionSetMplsLabel)a).getMplsLabel());break;case SET_MPLS_TC:sb.append(ActionUtils.STR_MPLS_TC_SET).append("=").append(((OFActionSetMplsTc)a).getMplsTc());break;case SET_MPLS_TTL:sb.append(ActionUtils.STR_MPLS_TTL_SET).append("=").append(((OFActionSetMplsTtl)a).getMplsTtl());break;case SET_NW_ECN:sb.append(ActionUtils.STR_NW_ECN_SET).append("=").append(((OFActionSetNwEcn)a).getNwEcn().getEcnValue());break;case SET_NW_TTL:sb.append(ActionUtils.STR_NW_TTL_SET).append("=").append(((OFActionSetNwTtl)a).getNwTtl());break;case EXPERIMENTER:sb.append(ActionUtils.STR_EXPERIMENTER).append("=").append(((OFActionExperimenter)a).getExperimenter());break;case SET_FIELD:if (((OFActionSetField)a).getField() instanceof OFOxmArpOp) {sb.append(MatchUtils.STR_ARP_OPCODE).append("=").append(((OFOxmArpOp)((OFActionSetField)a).getField()).getValue().getOpcode());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSha) {sb.append(MatchUtils.STR_ARP_SHA).append("=").append(((OFOxmArpSha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTha) {sb.append(MatchUtils.STR_ARP_DHA).append("=").append(((OFOxmArpTha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSpa) {sb.append(MatchUtils.STR_ARP_SPA).append("=").append(((OFOxmArpSpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTpa) {sb.append(MatchUtils.STR_ARP_DPA).append("=").append(((OFOxmArpTpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdSll) {sb.append(MatchUtils.STR_IPV6_ND_SSL).append("=").append(((OFOxmIpv6NdSll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTll) {sb.append(MatchUtils.STR_IPV6_ND_TTL).append("=").append(((OFOxmIpv6NdTll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTarget) {sb.append(MatchUtils.STR_IPV6_ND_TARGET).append("=").append(((OFOxmIpv6NdTarget)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthType) {sb.append(MatchUtils.STR_DL_TYPE).append("=").append(((OFOxmEthType)((OFActionSetField)a).getField()).getValue().getValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthSrc) {sb.append(MatchUtils.STR_DL_SRC).append("=").append(((OFOxmEthSrc)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthDst) {sb.append(MatchUtils.STR_DL_DST).append("=").append(((OFOxmEthDst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanVid) {sb.append(MatchUtils.STR_DL_VLAN).append("=").append(((OFOxmVlanVid)((OFActionSetField)a).getField()).getValue().getVlan());} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanPcp) {} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Code) {sb.append(MatchUtils.STR_ICMP_CODE).append("=").append(((OFOxmIcmpv4Code)((OFActionSetField)a).getField()).getValue().getCode());} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Type) {sb.append(MatchUtils.STR_ICMP_TYPE).append("=").append(((OFOxmIcmpv4Type)((OFActionSetField)a).getField()).getValue().getType());} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Code) {sb.append(MatchUtils.STR_ICMPV6_CODE).append("=").append(((OFOxmIcmpv6Code)((OFActionSetField)a).getField()).getValue().getRaw());} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Type) {sb.append(MatchUtils.STR_ICMPV6_TYPE).append("=").append(((OFOxmIcmpv6Type)((OFActionSetField)a).getField()).getValue().getRaw());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpProto) {sb.append(MatchUtils.STR_NW_PROTO).append("=").append(((OFOxmIpProto)((OFActionSetField)a).getField()).getValue().getIpProtocolNumber());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Src) {sb.append(MatchUtils.STR_NW_SRC).append("=").append(((OFOxmIpv4Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Dst) {sb.append(MatchUtils.STR_NW_DST).append("=").append(((OFOxmIpv4Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Src) {sb.append(MatchUtils.STR_IPV6_SRC).append("=").append(((OFOxmIpv6Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Dst) {sb.append(MatchUtils.STR_IPV6_DST).append("=").append(((OFOxmIpv6Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Flabel) {sb.append(MatchUtils.STR_IPV6_FLOW_LABEL).append("=").append(((OFOxmIpv6Flabel)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpEcn) {sb.append(MatchUtils.STR_NW_ECN).append("=").append(((OFOxmIpEcn)((OFActionSetField)a).getField()).getValue().getEcnValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpDscp) {sb.append(MatchUtils.STR_NW_DSCP).append("=").append(((OFOxmIpDscp)((OFActionSetField)a).getField()).getValue().getDscpValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpSrc) {sb.append(MatchUtils.STR_TCP_SRC).append("=").append(((OFOxmTcpSrc)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpDst) {sb.append(MatchUtils.STR_TCP_DST).append("=").append(((OFOxmTcpDst)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpSrc) {sb.append(MatchUtils.STR_UDP_SRC).append("=").append(((OFOxmUdpSrc)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpDst) {sb.append(MatchUtils.STR_UDP_DST).append("=").append(((OFOxmUdpDst)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpSrc) {sb.append(MatchUtils.STR_SCTP_SRC).append("=").append(((OFOxmSctpSrc)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpDst) {sb.append(MatchUtils.STR_SCTP_DST).append("=").append(((OFOxmSctpDst)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsLabel) {sb.append(MatchUtils.STR_MPLS_LABEL).append("=").append(((OFOxmMplsLabel)((OFActionSetField)a).getField()).getValue().getValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsTc) {sb.append(MatchUtils.STR_MPLS_TC).append("=").append(((OFOxmMplsTc)((OFActionSetField)a).getField()).getValue().getValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsBos) {sb.append(MatchUtils.STR_MPLS_TC).append("=").append(((OFOxmMplsBos)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmMetadata) {sb.append(MatchUtils.STR_METADATA).append("=").append(((OFOxmMetadata)((OFActionSetField)a).getField()).getValue().getValue().getValue());} else {logger.error("Could not decode Set-Field action field: {}",((OFActionSetField)a));}}pos++;if (pos < len) {sb.append(",");}}if (actions.isEmpty()) {jsonGenerator.writeStringField("none","drop");} else {jsonGenerator.writeStringField("actions",sb.toString());}}  }
class C{  public DataBufferDouble(int size,int numBanks){  super(STABLE,TYPE_DOUBLE,size,numBanks);  bankdata=new double[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new double[size];  }  data=bankdata[0];}  }
class C{  public boolean connect(final String address){  if (mBluetoothAdapter == null || address == null) {    Log.w(TAG,"BluetoothAdapter not initialized or unspecified address.");    return false;  }  if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress) && mBluetoothGatt != null) {    Log.d(TAG,"Trying to use an existing mBluetoothGatt for connection.");    if (mBluetoothGatt.connect()) {      mConnectionState=STATE_CONNECTING;      return true;    } else {      return false;    }  }  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);  if (device == null) {    Log.w(TAG,"Device not found.  Unable to connect.");    return false;  }  mBluetoothGatt=device.connectGatt(this,false,mGattCallback);  Log.d(TAG,"Trying to create a new connection.");  mBluetoothDeviceAddress=address;  mConnectionState=STATE_CONNECTING;  return true;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public Vector4f zero(){  MemUtil.INSTANCE.zero(this);  return this;}  }
class C{  public String outputAdditionalStatsTipText(){  return "Output additional statistics (such as " + "std deviation of coefficients and t-statistics)";}  }
class C{  protected int skipSpacesAndCDOCDC(){  loop:   for (; ; ) {switch (current) {default :      break loop;case LexicalUnits.COMMENT:case LexicalUnits.SPACE:case LexicalUnits.CDO:case LexicalUnits.CDC:  }  scanner.clearBuffer();  next();}return current;}  }
class C{  public static int compareTo(int[] n1,int[] n2){  int off1=0;  int off2=0;  boolean z1=isZero(n1);  boolean z2=isZero(n2);  if (z1 && z2) {    return 0;  }  if (z1) {    return -1;  }  if (z2) {    return +1;  }  while (n1[off1] == 0) {    off1++;  }  while (n2[off2] == 0) {    off2++;  }  int sz1=n1.length - off1;  int sz2=n2.length - off2;  if (sz1 < sz2) {    return -1;  }  if (sz2 < sz1) {    return +1;  }  for (int i=0; i < sz1; i++) {    if (n1[off1 + i] == n2[off2 + i]) {      continue;    }    if (n2[off2 + i] > n1[off1 + i]) {      return -1;    } else {      return +1;    }  }  return 0;}  }
class C{  public void init(IWorkbench workbench,IStructuredSelection selection){  this.selection=selection;}  }
class C{  public RoundBorder shadowBlur(float shadowBlur){  this.shadowBlur=shadowBlur;  return this;}  }
class C{  public Iterator<Edge> legalEdges(final Vertex vertex){  return null == this.edgeFilter ? vertex.edges(Direction.BOTH) : TraversalUtil.applyAll(vertex,this.edgeFilter);}  }
class C{  public boolean isSelected(Selection sel){  if (sel == null) {    return false;  }  if (sel.isEmpty()) {    boolean isCompletelyWithin=sel.start() >= start() && sel.end() < end();    boolean isWithin=sel.start() >= start() && sel.end() <= end();    return isCompletelyWithin || (isWithin && mIsLast);  } else {    int start=Math.max(start(),sel.start());    int end=Math.min(end(),sel.end());    return start < end;  }}  }
class C{  public void initialise(int dimensions,double epsilon){  this.kernelWidth=epsilon;  if (this.dimensions != dimensions) {    this.dimensions=dimensions;    svkeMarginals=new KernelEstimatorUniVariate[dimensions];    for (int i=0; i < dimensions; i++) {      svkeMarginals[i]=new KernelEstimatorUniVariate();      svkeMarginals[i].setNormalise(normalise);      if (dynCorrExcl) {        svkeMarginals[i].setDynamicCorrelationExclusion(dynCorrExclTime);      } else {        svkeMarginals[i].clearDynamicCorrelationExclusion();      }    }  }  for (int i=0; i < dimensions; i++) {    svkeMarginals[i].initialise(epsilon);  }  mvkeJoint.initialise(dimensions,epsilon);  super.initialise(dimensions);}  }
class C{  public GlowInventoryView(GlowHumanEntity player){  this(player,player.getInventory().getCraftingInventory());}  }
class C{  public static void swapRows(DenseDoubleMatrix2D matrix,long row1,long row2){  double temp=0;  long cols=matrix.getColumnCount();  for (long col=0; col < cols; col++) {    temp=matrix.getDouble(row1,col);    matrix.setDouble(matrix.getDouble(row2,col),row1,col);    matrix.setDouble(temp,row2,col);  }}  }
class C{  public SimpleString(final String string){  int len=string.length();  data=new byte[len << 1];  int j=0;  for (int i=0; i < len; i++) {    char c=string.charAt(i);    byte low=(byte)(c & 0xFF);    data[j++]=low;    byte high=(byte)(c >> 8 & 0xFF);    data[j++]=high;  }  str=string;}  }
class C{  public static void removeAllDroidsafeMarkers(IProject project){  IMarker markers[];  if (project != null) {    try {      markers=project.findMarkers(DROIDSAFE_MARKER_ID,true,IResource.DEPTH_INFINITE);      for (      IMarker marker : markers) {        marker.delete();      }    } catch (    CoreException ex) {      ex.printStackTrace();    }  }}  }
class C{  protected EntityImpl(){  super();}  }
class C{  public static void Display(String title,String message){  Shell parent=UIHelper.getShellProvider().getShell();  PopupMessage popup=new PopupMessage(parent,title,message);  popup.open();  return;}  }
class C{  public static void main(String[] args){  InitJob bp=new InitJob();  List<InitJobRowInfo> initJobRowInfos=bp.execute(args);  InitJobInfo initJobInfo=InitJob.parseBean(initJobRowInfos);  OozieUtil oozieUtil=new OozieUtil();  try {    oozieUtil.persistBeanData(initJobInfo,false);  } catch (  Exception e) {    LOGGER.error(e);    throw new MetadataException(e);  }}  }
class C{  public void testRbrDelete() throws Exception {  OneRowChange oneRowChange=generateRowChange("foo","bar",RowChangeData.ActionType.DELETE);  oneRowChange.setKeySpec(generateSpec(oneRowChange));  oneRowChange.setKeyValues(generateValues(oneRowChange,1,"one"));  RbrTableChangeSet changeSet=new RbrTableChangeSet(oneRowChange);  assertEquals("check schema","foo",changeSet.getSchemaName());  assertEquals("check table","bar",changeSet.getTableName());  assertEquals("check rows",1,changeSet.size());  RbrRowChange rowChange=changeSet.getRowChange(0);  assertEquals("check schema","foo",rowChange.getSchemaName());  assertEquals("check table","bar",rowChange.getTableName());  assertTrue(rowChange.isDelete());  assertFalse(rowChange.isUpdate());  assertFalse(rowChange.isInsert());  RbrRowImage before=rowChange.getBeforeImage();  assertNotNull(before);  assertEquals("c1 is int",Types.INTEGER,before.getSpec(1).getType());  assertEquals("c2 is c2","c2",before.getSpec("c2").getName());  assertEquals("key is 1",1,before.getValue(1).getValue());  assertEquals("col is one","one",before.getValue("c2").getValue());  RbrRowImage after=rowChange.getAfterImage();  assertNull(after);}  }
class C{  public static boolean toBooleanValue(char c){  return c != 0;}  }
class C{  void updateMnemonicBinding(AbstractButton b){  int m=b.getMnemonic();  if (m != 0) {    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);    if (map == null) {      map=new ComponentInputMapUIResource(b);      SwingUtilities.replaceUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW,map);    }    map.clear();    map.put(KeyStroke.getKeyStroke(m,BasicLookAndFeel.getFocusAcceleratorKeyMask(),false),"pressed");    map.put(KeyStroke.getKeyStroke(m,BasicLookAndFeel.getFocusAcceleratorKeyMask(),true),"released");    map.put(KeyStroke.getKeyStroke(m,0,true),"released");  } else {    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);    if (map != null) {      map.clear();    }  }}  }
class C{  public boolean isFfa(){  for (  PlayingPlayerContainer container : playerContainers) {    if (container instanceof Team) {      return false;    }  }  return true;}  }
class C{  synchronized boolean grantLock(long newLeaseExpireTime,int newLeaseId,int newRecursion,RemoteThread remoteThread){  Assert.assertTrue(remoteThread != null);  Assert.assertTrue(newLeaseId > -1,"Invalid attempt to grant lock with leaseId " + newLeaseId);  checkDestroyed();  checkForExpiration();  this.ignoreForRecovery=false;  this.leaseExpireTime=newLeaseExpireTime;  this.leaseId=newLeaseId;  this.lesseeThread=remoteThread;  this.recursion=newRecursion;  this.thread=Thread.currentThread();  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockToken.grantLock.client] granted {}",this);  }  return true;}  }
class C{  @Override public int compareTo(Ellipse another){  return this.area() > another.area() ? 1 : this.area() < another.area() ? -1 : 0;}  }
class C{  public void scrollOnce(){  PagerAdapter adapter=getAdapter();  int currentItem=getCurrentItem();  int totalCount;  if (adapter == null || (totalCount=adapter.getCount()) <= 1) {    return;  }  int nextItem=++currentItem;  if (nextItem < 0) {    setCurrentItem(totalCount - 1);  } else   if (nextItem == totalCount) {    setCurrentItem(0);  } else {    setCurrentItem(nextItem);  }}  }
class C{  private static LocalDate create(int year,int month,int dayOfMonth){  if (dayOfMonth > 28) {    int dom=31;switch (month) {case 2:      dom=(IsoChronology.INSTANCE.isLeapYear(year) ? 29 : 28);    break;case 4:case 6:case 9:case 11:  dom=30;break;}if (dayOfMonth > dom) {if (dayOfMonth == 29) {throw new DateTimeException("Invalid date 'February 29' as '" + year + "' is not a leap year");} else {throw new DateTimeException("Invalid date '" + Month.of(month).name() + " "+ dayOfMonth+ "'");}}}return new LocalDate(year,month,dayOfMonth);}  }
class C{  public static byte[] encodeJPEG(BufferedImage image,float quality) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  ImageOutputStream iosout=new MemoryCacheImageOutputStream(out);  if (Debug.debugging("jpeghelper")) {    Debug.output("Got output stream..." + out);  }  Iterator<ImageWriter> iter=ImageIO.getImageWritersByFormatName("jpeg");  ImageWriter writer=iter.next();  ImageWriteParam iwp=writer.getDefaultWriteParam();  iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);  iwp.setCompressionQuality(quality);  if (Debug.debugging("jpeghelper")) {    Debug.output("Got encode params...");  }  writer.setOutput(iosout);  if (Debug.debugging("jpeghelper")) {    Debug.output("Got jpeg encoder...");  }  IIOImage iioi=new IIOImage(image,null,null);  writer.write(null,iioi,iwp);  writer.dispose();  if (Debug.debugging("jpeghelper")) {    Debug.output("encoded?");  }  return out.toByteArray();}  }
class C{  public static boolean isDocumentActivity(String className){  return TextUtils.equals(className,IncognitoDocumentActivity.class.getName()) || TextUtils.equals(className,DocumentActivity.class.getName()) || TextUtils.equals(className,LEGACY_CLASS_NAME)|| TextUtils.equals(className,LEGACY_INCOGNITO_CLASS_NAME);}  }
class C{  public GroupInviteEvent(String leader,boolean expire){  super(Events.GROUP_INVITE);  put("leader",leader);  if (expire) {    put("expire","");  }}  }
class C{  public static SecurityMode[] create(SecurityPolicy[] securityPolicies,MessageSecurityMode[] messageSecurityModes){  SecurityMode[] result=new SecurityMode[securityPolicies.length * messageSecurityModes.length];  for (int i=0; i < securityPolicies.length; i++) {    for (int j=0; j < messageSecurityModes.length; j++) {      int x=i * messageSecurityModes.length + j;      result[x]=new SecurityMode(securityPolicies[i],messageSecurityModes[j]);    }  }  return result;}  }
class C{  public Month(){  this(new Date());}  }
class C{  public static String sha1(String s){  return encrypt(s,"SHA-1");}  }
class C{  @Override public Request<Void> delete(String factoryId){  final Invocation request=getWebTarget().path(factoryId).request().accept(APPLICATION_JSON).buildDelete();  return new SimpleRequest<Void>(request,getAuthenticationManager());}  }
class C{  void remove(){  active=false;}  }
class C{  public void closeAnimate(int position){  touchListener.closeAnimate(position);}  }
class C{  public static void main(String[] args){  RacingThreadsTest test=new RacingThreadsTest("dummy",2,3,2);  DriverThread driver=new DriverThread(test);  WorkerThread[] workers=new WorkerThread[2];  for (int i=0; i < workers.length; i++) {    workers[i]=new WorkerThread(i,test);  }  test.runTest(driver,workers);}  }
class C{  public static PathPoint lineTo(float x,float y){  return new PathPoint(LINE,x,y);}  }
class C{  @Override protected void doAction(){  kseFrame.showHideToolBar();}  }
class C{  public boolean supportsOrderByUnrelated() throws SQLException {  return true;}  }
class C{  public double slope(){  return beta;}  }
class C{  public Configuration createConfig() throws Exception {  Configuration config=new Configuration();  config.set(HDFSResourceConstants.HDFS_FS_DEFAULT_NAME,this.hdfsEndPoint);  return config;}  }
class C{  @Override public void onTcpOpen(PseudoTCPBase tcp){  if (tcp == localTcp) {    have_connected_=true;    onTcpWriteable(tcp);  }}  }
class C{  public void streamClosed(boolean inStream) throws IOException {}  }
class C{  public static DateFormat toDateFormat(String dateFormat,TimeZone tz,Locale locale){  DateFormat df=null;  if (UtilValidate.isEmpty(dateFormat)) {    df=DateFormat.getDateInstance(DateFormat.SHORT,locale);  } else {    df=new SimpleDateFormat(dateFormat,locale == null ? Locale.getDefault() : locale);  }  df.setTimeZone(tz);  return df;}  }
class C{  static ArrayList<String> visibleNonRealmFieldsForClass(String realmClass){  FieldData fieldData=getFieldData(realmClass);  ArrayList<String> fields=fieldData.getFieldNames();  Iterator<String> fieldIterator=fields.iterator();  while (fieldIterator.hasNext()) {    String field=fieldIterator.next();    if (fieldData.isRealmListType(field) || fieldData.isRealmModelType(field))     fieldIterator.remove();  }  ArrayList<String> visFields=new ArrayList<>();  for (  String field : fields)   visFields.add(fieldData.visibleNameOf(field));  return visFields;}  }
class C{  public java.lang.StringBuilder insert(int offset,java.lang.Object obj){  return null;}  }
class C{  public Integer directionToKeyCode(final Direction direction){switch (direction) {case LEFT:    return KeyEvent.VK_LEFT;case RIGHT:  return KeyEvent.VK_RIGHT;case UP:return KeyEvent.VK_UP;case DOWN:return KeyEvent.VK_DOWN;default :return null;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.769 -0500",hash_original_method="A9F8B5B0AC3E4C318EC1793646D70D6E",hash_generated_method="AB5A4F9637989EE47AC99185BEB75E6F") public static byte[] readFully(InputStream in) throws IOException {  try {    return readFullyNoClose(in);  }  finally {    in.close();  }}  }
class C{  static public String[] splitTokens(String what,String delim){  StringTokenizer toker=new StringTokenizer(what,delim);  String pieces[]=new String[toker.countTokens()];  int index=0;  while (toker.hasMoreTokens()) {    pieces[index++]=toker.nextToken();  }  return pieces;}  }
class C{  @Override public void schedule(){  int blockingCount=0;  startRunning();  assert Thread.currentThread() == scheduler;  Trace.trace(Item.SCHEDULER,"%d: scheduler begin",scheduler.getId());  while (!runQueue.isEmpty()) {synchronized (scheduler) {      assert runQueue.size() <= mutators.size() + collectors.size() : "Run queue is unreasonably long, queue=" + runQueue.size() + ", m="+ mutators.size()+ ", c="+ collectors.size();      if (runQueue.size() > 0) {        runQueue.remove().resumeThread();        Trace.trace(Item.SCHED_DETAIL,"%s: scheduler sleeping, runqueue=%d",scheduler.getName(),runQueue.size());        schedWait();        Trace.trace(Item.SCHED_DETAIL,"%s: scheduler resuming, state %s, runqueue=%d",scheduler.getName(),getState(),runQueue.size());      }      assert mutatorsBlocked.get() <= mutators.size() : mutatorsBlocked.get() + " mutators are blocked but only " + mutators.size()+ " exist";switch (getState()) {case MUTATOR:        assert mutators.isEmpty() || !runQueue.isEmpty() : "mutators.isEmpty()=" + mutators.isEmpty() + ", runQueue.isEmpty()="+ runQueue.isEmpty();      break;case BLOCKING:    blockingCount++;  Trace.trace(Item.SCHEDULER,"mutators blocked %d/%d",mutatorsBlocked.get(),mutators.size());if (mutatorsBlocked.get() == mutators.size()) {  setState(BLOCKED);  blockingCount=0;}if (blockingCount > 1000000) {System.err.println("Block pending for an unreasonable amount of time");dumpThreads();throw new AssertionError();}break;case BLOCKED:assert !unitTest && (mutators.size() == 0 || !runQueue.isEmpty()) : "Runqueue cannot be empty while mutators are blocked";break;case RESUMING:break;}}}Trace.trace(Item.SCHEDULER,"%d: scheduler end",scheduler.getId());stopRunning();}  }
class C{  @Override protected ArrayList<String> genAttachFiles(){  _log.info("Start SendRegistrationEvent::genAttachFiles");  ArrayList<String> fileList=new ArrayList<String>();  try {    fileList.add(generateConfigFile());  } catch (  Exception e) {    _log.error("Error occurred while creating config file. {}",e);  }  _log.info("End SendRegistrationEvent::genAttachFiles");  return fileList;}  }
class C{  void fakeObjectUpdate(){  notifyTestHelper(TestHelper.COMMAND_ENQUEUED);  notifyTestHelper(TestHelper.COMMAND_SUCCESSFUL);  notifyTestHelper(TestHelper.OBJECT_UPDATED);}  }
class C{  public static SocialShare share(Context context){  if (context == null)   throw new IllegalArgumentException("context == null");  return new SocialShare(context);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String previousFontName=(String)controller.getModel().getUserPreference(CoreModel.PREVIOUS_FONT_NAME);  String previousFontStyle=(String)controller.getModel().getUserPreference(CoreModel.PREVIOUS_FONT_STYLE);  int previousFontStyleAsInt=0;  try {    previousFontStyleAsInt=Integer.parseInt(previousFontStyle);  } catch (  NumberFormatException nfe) {  }  String previousFontSize=(String)controller.getModel().getUserPreference(CoreModel.PREVIOUS_FONT_SIZE);  int previousFontSizeAsInt=ColorAndFontConstants.MULTIBIT_DEFAULT_FONT_SIZE;  try {    previousFontSizeAsInt=Integer.parseInt(previousFontSize);  } catch (  NumberFormatException nfe) {  }  controller.getModel().setUserPreference(CoreModel.USER_LANGUAGE_CODE,(String)controller.getModel().getUserPreference(CoreModel.PREVIOUS_USER_LANGUAGE_CODE));  controller.getModel().setUserPreference(CoreModel.FONT_NAME,previousFontName);  controller.getModel().setUserPreference(CoreModel.FONT_STYLE,previousFontStyle);  controller.getModel().setUserPreference(CoreModel.FONT_SIZE,previousFontSize);  controller.getModel().setUserPreference(CoreModel.CAN_UNDO_PREFERENCES_CHANGES,"false");  FontSizer.INSTANCE.initialise(controller);  UIManager.put("ToolTip.font",new Font(previousFontName,previousFontStyleAsInt,previousFontSizeAsInt));  controller.fireDataStructureChanged();  controller.displayView(View.PREFERENCES_VIEW);}  }
class C{  public boolean searchMatrix(int[][] matrix,int target){  if (matrix == null || matrix.length == 0 || matrix[0].length == 0)   return false;  int left=0;  int right=matrix.length - 1;  int mid;  while (left <= right) {    mid=left + (right - left) / 2;    if (matrix[mid][0] == target)     return true; else     if (matrix[mid][0] > target)     right=mid - 1; else     left=mid + 1;  }  if (left - 1 < 0 || left - 1 >= matrix.length)   return false;  int row=left - 1;  left=0;  right=matrix[row].length - 1;  while (left <= right) {    mid=left + (right - left) / 2;    if (matrix[row][mid] == target)     return true; else     if (matrix[row][mid] > target)     right=mid - 1; else     left=mid + 1;  }  return false;}  }
class C{  @PostLoad public void postLoad(final Object entity){  notifyAll(null);}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,R>Promise<R> join(Promise<T1> p1,Promise<T2> p2,Promise<T3> p3,Promise<T4> p4,Promise<T5> p5,Promise<T6> p6,Promise<T7> p7,final Func7<T1,T2,T3,T4,T5,T6,T7,R> joinFunction){  return new Promise<R>(Observable.zip(p1.observable,p2.observable,p3.observable,p4.observable,p5.observable,p6.observable,p7.observable,joinFunction));}  }
class C{  public static void println(int x){  out.println(x);}  }
class C{  public static final CButton createZoomButton(boolean withText){  if (withText)   return createZoomButton(Msg.getMsg(Env.getCtx(),A_ZOOM));  return createZoomButton(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.406 -0400",hash_original_method="266E87F8A828CDA30627CAA7433FF646",hash_generated_method="CE03EAF7EDFB05F294B401E410CDC667") void addDirective(String name,boolean haveQuotedPair){  String value;  int inputIndex;  int valueIndex;  char valueChar;  int type;  if (!haveQuotedPair) {    value=m_directives.substring(m_scanStart,m_curPos);  } else {    StringBuffer valueBuf=new StringBuffer(m_curPos - m_scanStart);    valueIndex=0;    inputIndex=m_scanStart;    while (inputIndex < m_curPos) {      if ('\\' == (valueChar=m_directives.charAt(inputIndex)))       inputIndex++;      valueBuf.setCharAt(valueIndex,m_directives.charAt(inputIndex));      valueIndex++;      inputIndex++;    }    value=new String(valueBuf);  }  if (m_state == STATE_SCANNING_QUOTED_STRING_VALUE)   type=ParsedDirective.QUOTED_STRING_VALUE; else   type=ParsedDirective.TOKEN_VALUE;  m_directiveList.add(new ParsedDirective(name,value,type));}  }
class C{  public void startPinchScaleDetection(PinchScaleDetector.PinchScaleListener pinchScaleListener){  if (pinchScaleListener != null) {    pinchScaleDetector=new PinchScaleDetector(context,pinchScaleListener);  }}  }
class C{  public CharacterFilter(TokenStream in){  super(in);}  }
class C{  @Override public int hashCode(){  int hash=super.hashCode();  hash=HashUtilities.hashCode(hash,this.renderAsPercentages);  hash=HashUtilities.hashCode(hash,this.ignoreZeroValues);  return hash;}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  private boolean Routine_L41(){  ++gi;  if (gi > iee)   return true;  idir=3;  if (funcArray[gj - 1][gi - 1] <= cont) {    doInterpolation();    return true;  }  fij=funcArray[gj - 1][gi - 1];  return (Routine_L51());}  }
class C{  public PathImpl fsWalk(String userPath,Map<String,Object> attributes,String uri){  String path;  String query=null;  int queryIndex=uri.indexOf('?');  if (queryIndex >= 0) {    path=uri.substring(0,queryIndex);    query=uri.substring(queryIndex + 1);  } else   path=uri;  if (path.length() == 0)   path="/";  return create(_root,userPath,attributes,path,query);}  }
class C{  public void closeJobs(){  for (  final Job job : getJobList())   job.close();}  }
class C{  public BSIModel loadModel(IProgress nullMonitor) throws CommandException {  log.debug("Loading model instance");  nullMonitor.setTaskName(Messages.getString("CnAElementHome.1"));  LoadBSIModelForTreeView command=new LoadBSIModelForTreeView();  command=getCommandService().executeCommand(command);  return command.getModel();}  }
class C{  public FastCharStream(Reader r){  input=r;}  }
class C{  public static char[] trim(final char[] array,final int length){  if (length >= array.length)   return array;  final char t[]=length == 0 ? EMPTY_ARRAY : new char[length];  System.arraycopy(array,0,t,0,length);  return t;}  }
class C{  public TimeEvent(@IntRange(from=0) long happenAfter,@NonNull String eventKey){  super(eventKey);  this.targetDate=currentTimeMillis() + happenAfter;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void removeAllElements(){synchronized (scanResults) {    scanResults.clear();    fireTableDataChanged();  }}  }
class C{  public final void sub(Matrix3d m1,Matrix3d m2){  this.m00=m1.m00 - m2.m00;  this.m01=m1.m01 - m2.m01;  this.m02=m1.m02 - m2.m02;  this.m10=m1.m10 - m2.m10;  this.m11=m1.m11 - m2.m11;  this.m12=m1.m12 - m2.m12;  this.m20=m1.m20 - m2.m20;  this.m21=m1.m21 - m2.m21;  this.m22=m1.m22 - m2.m22;}  }
class C{  public void scheduleAtFixedRate(@NotNull VanillaEventHandler eventHandler,long initialDelayMs,long periodMs){  eventLoop.addHandler(new ScheduledEventHandler(eventHandler,initialDelayMs,periodMs));}  }
class C{  protected int nextInt(int N,int M,int n,RandomEngine randomGenerator){  int Nhalf, n_le_Nhalf, M_le_Nhalf, K;  Nhalf=N / 2;  n_le_Nhalf=(n <= Nhalf) ? n : N - n;  M_le_Nhalf=(M <= Nhalf) ? M : N - M;  if ((n * M / N) < 10) {    K=(n_le_Nhalf <= M_le_Nhalf) ? hmdu(N,M_le_Nhalf,n_le_Nhalf,randomGenerator) : hmdu(N,n_le_Nhalf,M_le_Nhalf,randomGenerator);  } else {    K=(n_le_Nhalf <= M_le_Nhalf) ? hprs(N,M_le_Nhalf,n_le_Nhalf,randomGenerator) : hprs(N,n_le_Nhalf,M_le_Nhalf,randomGenerator);  }  if (n <= Nhalf) {    return (M <= Nhalf) ? K : n - K;  } else {    return (M <= Nhalf) ? M - K : n - N + M + K;  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WWindow.init");}  }
class C{  public void testSavepoint() throws Exception {  DatabaseMetaData dbmd=this.conn.getMetaData();  if (dbmd.supportsSavepoints()) {    System.out.println("Testing SAVEPOINTs");    try {      this.conn.setAutoCommit(true);      createTable("testSavepoints","(field1 int)","InnoDB");      this.conn.setAutoCommit(false);      this.stmt.executeUpdate("INSERT INTO testSavepoints VALUES (1)");      Savepoint afterInsert=this.conn.setSavepoint("afterInsert");      this.stmt.executeUpdate("UPDATE testSavepoints SET field1=2");      Savepoint afterUpdate=this.conn.setSavepoint("afterUpdate");      this.stmt.executeUpdate("DELETE FROM testSavepoints");      assertTrue("Row count should be 0",getRowCount("testSavepoints") == 0);      this.conn.rollback(afterUpdate);      assertTrue("Row count should be 1",getRowCount("testSavepoints") == 1);      assertTrue("Value should be 2","2".equals(getSingleValue("testSavepoints","field1",null).toString()));      this.conn.rollback(afterInsert);      assertTrue("Value should be 1","1".equals(getSingleValue("testSavepoints","field1",null).toString()));      this.conn.rollback();      assertTrue("Row count should be 0",getRowCount("testSavepoints") == 0);      this.conn.rollback();      this.stmt.executeUpdate("INSERT INTO testSavepoints VALUES (1)");      afterInsert=this.conn.setSavepoint();      this.stmt.executeUpdate("UPDATE testSavepoints SET field1=2");      afterUpdate=this.conn.setSavepoint();      this.stmt.executeUpdate("DELETE FROM testSavepoints");      assertTrue("Row count should be 0",getRowCount("testSavepoints") == 0);      this.conn.rollback(afterUpdate);      assertTrue("Row count should be 1",getRowCount("testSavepoints") == 1);      assertTrue("Value should be 2","2".equals(getSingleValue("testSavepoints","field1",null).toString()));      this.conn.rollback(afterInsert);      assertTrue("Value should be 1","1".equals(getSingleValue("testSavepoints","field1",null).toString()));      this.conn.rollback();      this.conn.releaseSavepoint(this.conn.setSavepoint());    }  finally {      this.conn.setAutoCommit(true);    }  } else {    System.out.println("MySQL version does not support SAVEPOINTs");  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (trace_for_1: ");  result.append(trace_for_1);  result.append(')');  return result.toString();}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public static boolean isValidExpression(String cronExpression){  try {    new CronExpression(cronExpression);  } catch (  ParseException pe) {    return false;  }  return true;}  }
class C{  private AuthorizeEndpoint(){}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(buildName(getContextIndex()));  this.setLayout(new GridBagLayout());  this.setBorder(new EmptyBorder(2,2,2,2));  this.add(new JLabel(LABEL_DESCRIPTION),LayoutHelper.getGBC(0,0,1,1.0D));  this.add(new JLabel(FIELD_LABEL_TYPE_SELECT),LayoutHelper.getGBC(0,1,1,1.0D,new Insets(20,0,5,5)));  this.add(getAuthenticationMethodsComboBox(),LayoutHelper.getGBC(0,2,1,1.0D));  this.add(getConfigContainerPanel(),LayoutHelper.getGBC(0,3,1,1.0d,new Insets(10,0,10,0)));  this.add(new JLabel(FIELD_LABEL_LOGGED_IN_INDICATOR),LayoutHelper.getGBC(0,4,1,1.0D));  this.add(getLoggedInIndicaterRegexField(),LayoutHelper.getGBC(0,5,1,1.0D));  this.add(new JLabel(FIELD_LABEL_LOGGED_OUT_INDICATOR),LayoutHelper.getGBC(0,6,1,1.0D));  this.add(getLoggedOutIndicaterRegexField(),LayoutHelper.getGBC(0,7,1,1.0D));  this.add(new JLabel(),LayoutHelper.getGBC(0,99,1,1.0D,1.0D));}  }
class C{  public XmlHandler addClass(Class<?> clazz,Global global,String... attributes){  Attribute[] listAttributes=new Attribute[attributes.length];  for (int i=attributes.length; i-- > 0; )   listAttributes[i]=new Attribute(attributes[i]);  return addClass(clazz,global,listAttributes);}  }
class C{  public static String toString(int mod){  return java.lang.reflect.Modifier.toString(mod);}  }
class C{  public SymmetricReflexiveAssociation_ createSymmetricReflexiveAssociation_(){  SymmetricReflexiveAssociation_Impl symmetricReflexiveAssociation_=new SymmetricReflexiveAssociation_Impl();  return symmetricReflexiveAssociation_;}  }
class C{  public TDoubleDoubleHashMap(){}  }
class C{  private List<String> extractNameFromListOfNames(String attributeValue){  List<String> nameList=new ArrayList<String>();  Matcher matcher=Pattern.compile(REGEX_PATTERN_TO_EXTRACT_MULTIPLE_NAME).matcher(attributeValue);  while (matcher.find()) {    String nameWithQuotes=matcher.group(1);    Matcher quotesMatcher=Pattern.compile(REGEX_PATTERN_TO_EXTRACT_WITHIN_SINGLE_QUOTATIONS).matcher(nameWithQuotes);    while (quotesMatcher.find()) {      String nameWithoutQuotes=quotesMatcher.group(1);      nameList.add(nameWithoutQuotes);    }  }  return nameList;}  }
class C{  public static byte[] toBytes(int x){  return toBytes(x,new byte[4],0);}  }
class C{  @Override public void updateBinaryStream(int columnIndex,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBinaryStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:21.664 -0500",hash_original_method="E11C938286265122BF52D51A5CD9EED3",hash_generated_method="3F748EF8100EBB2466E608B65108A031") private TextImpl nextTextNode(){  Node nextSibling=getNextSibling();  if (nextSibling == null) {    return null;  }  short nodeType=nextSibling.getNodeType();  return nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE ? (TextImpl)nextSibling : null;}  }
class C{  @Override public V remove(Object key){  if (key == null) {    key=NULL_OBJECT;  }  boolean hashedOk;  int index, next, hash;  Object result, object;  index=next=findIndex(key,elementData);  if (elementData[index] != key) {    return null;  }  result=elementData[index + 1];  int length=elementData.length;  while (true) {    next=(next + 2) % length;    object=elementData[next];    if (object == null) {      break;    }    hash=getModuloHash(object,length);    hashedOk=hash > index;    if (next < index) {      hashedOk=hashedOk || (hash <= next);    } else {      hashedOk=hashedOk && (hash <= next);    }    if (!hashedOk) {      elementData[index]=object;      elementData[index + 1]=elementData[next + 1];      index=next;    }  }  size--;  modCount++;  elementData[index]=null;  elementData[index + 1]=null;  return massageValue(result);}  }
class C{  public Cache(int maxCapacity){  super((maxCapacity < INITIAL_CAPACITY) ? maxCapacity : INITIAL_CAPACITY,LOAD_FACTOR,ACCESS_ORDER);  this.maxCapacity=maxCapacity;}  }
class C{  protected void doTransfers(RaptorState state){  int walkSpeedMillimetersPerSecond=(int)(req.walkSpeed * 1000);  int maxWalkMillimeters=(int)(req.walkSpeed * req.maxWalkTime * 60* 1000);  patternsTouchedThisRound.clear();  for (int stop=stopsTouchedThisRound.nextSetBit(0); stop >= 0; stop=stopsTouchedThisRound.nextSetBit(stop + 1)) {    markPatternsForStop(stop);    int fromTime=state.bestNonTransferTimes[stop];    TIntList transfers=data.transfersForStop.get(stop);    for (int i=0; i < transfers.size(); i+=2) {      int toStop=transfers.get(i);      int distance=transfers.get(i + 1);      if (distance > maxWalkMillimeters)       continue;      int toTime=fromTime + distance / walkSpeedMillimetersPerSecond;      if (toTime < max_time && toTime < state.bestTimes[toStop]) {        state.bestTimes[toStop]=toTime;        state.waitTime[toStop]=state.nonTransferWaitTime[stop];        state.inVehicleTravelTime[toStop]=state.nonTransferInVehicleTravelTime[stop];        state.transferStop[toStop]=stop;        markPatternsForStop(toStop);      }    }  }}  }
class C{  protected void releasePendingBatch(){}  }
class C{  private static String buildUniqueFileName(File directory,String base,String extension,int suffix){  String suffixName="";  if (suffix > 0) {    suffixName+="(" + Integer.toString(suffix) + ")";  }  suffixName+="." + extension;  String baseName=sanitizeFileName(base);  baseName=truncateFileName(directory,baseName,suffixName);  String fullName=baseName + suffixName;  if (!new File(directory,fullName).exists()) {    return fullName;  }  return buildUniqueFileName(directory,base,extension,suffix + 1);}  }
class C{  private static <V,K>Map<V,K> invertMap(Map<K,V> map){  Map<V,K> inv=new HashMap<V,K>();  for (  Entry<K,V> entry : map.entrySet())   inv.put(entry.getValue(),entry.getKey());  return inv;}  }
class C{  protected FlyToOrbitViewAnimator createFlyToOrbitViewAnimator(OrbitView orbitView,Position eyePosition,Angle heading,Angle pitch,Angle roll,long timeToMove,int altitudeMode){  Globe globe=orbitView.getGlobe();  BasicFlyView flyView=new BasicFlyView();  flyView.setGlobe(globe);  flyView.setEyePosition(eyePosition);  flyView.setHeading(heading);  flyView.setPitch(pitch);  Vec4 eyePoint=globe.computePointFromPosition(eyePosition);  Vec4 forward=flyView.getCurrentForwardVector();  Position lookAtPosition=this.computeCenterPosition(eyePosition,forward,pitch,altitudeMode);  double range=eyePoint.distanceTo3(globe.computePointFromPosition(lookAtPosition));  EyePositionAnimator centerAnimator=new EyePositionAnimator(new ScheduledInterpolator(timeToMove),orbitView.getCenterPosition(),lookAtPosition,eyePosition,forward,pitch,OrbitViewPropertyAccessor.createCenterPositionAccessor(orbitView),altitudeMode);  ViewElevationAnimator zoomAnimator=new ViewElevationAnimator(globe,orbitView.getZoom(),range,orbitView.getCenterPosition(),eyePosition,WorldWind.ABSOLUTE,OrbitViewPropertyAccessor.createZoomAccessor(orbitView));  centerAnimator.useMidZoom=zoomAnimator.getUseMidZoom();  AngleAnimator headingAnimator=new AngleAnimator(new ScheduledInterpolator(timeToMove),orbitView.getHeading(),heading,ViewPropertyAccessor.createHeadingAccessor(orbitView));  AngleAnimator pitchAnimator=new AngleAnimator(new ScheduledInterpolator(timeToMove),orbitView.getPitch(),pitch,ViewPropertyAccessor.createPitchAccessor(orbitView));  AngleAnimator rollAnimator=new AngleAnimator(new ScheduledInterpolator(timeToMove),orbitView.getRoll(),roll,ViewPropertyAccessor.createRollAccessor(orbitView));  return new FlyToOrbitViewAnimator(orbitView,new ScheduledInterpolator(timeToMove),altitudeMode,centerAnimator,zoomAnimator,headingAnimator,pitchAnimator,rollAnimator);}  }
class C{  protected Object createElementInfo(){  return new JavaModelInfo();}  }
class C{  public void removeMapElementState(MapElementState state){  if (state instanceof WaypointState) {    Waypoint wp=(Waypoint)((WaypointState)state).getMapElement();    Path path=wp.getPath();    path.removeWaypoint(wp);  } else {    ViewData viewData=state.viewData;    if (viewData != null) {      viewData.close();    }    mapElementStateList.remove(state);    state.dispose();  }}  }
class C{  public static String join(Collection<?> collection,String delimiter){  StringBuilder sb=new StringBuilder();  boolean first=true;  for (  Object value : collection) {    if (!first) {      sb.append(delimiter);    }    sb.append(value);    first=false;  }  return sb.toString();}  }
class C{  @Deprecated public static boolean isArrayByteBase64(final byte[] arrayOctet){  return isBase64(arrayOctet);}  }
class C{  private void assertIteratorOk(final ITuple<?> tuple){  if (!tuple.getKeysRequested())   throw new RuntimeException("keys not reported by itr.");  if (!tuple.getValuesRequested())   throw new RuntimeException("vals not reported by itr.");  if (!compactingMerge && deleteMarkers && ((tuple.flags() & IRangeQuery.DELETED) == 0)) {    throw new RuntimeException("delete markers not reported by itr.");  }  assert !isolatable || (isolatable && ((tuple.flags() & IRangeQuery.DELETED) == 0)) : "version metadata not reported by itr for isolatable index";}  }
class C{  public SimpleInspector(Object object,GUIState state,String name){  this(object,state,name,state.getMaximumPropertiesForInspector());}  }
class C{  @Override public synchronized void afterPropertiesSet(){  int index=0;  Map<String,List<XYDataItem>> stats;  while (true) {    File file=index == 0 ? makeFile() : new File(makeFile().getAbsolutePath() + "." + index);    stats=deserialize(file);    index+=1;    if (stats != null || index >= maxFiles - 1) {      break;    }  }  if (stats != null) {    statsData=stats;  } else {    logger.debug("Stats data file not found. Empty file assumed.");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void consumeAttributes(AttributeHelper attrsHelper) throws ParseException {  url=attrsHelper.consume("url",false);  height=attrsHelper.consumeInteger("height",false);  width=attrsHelper.consumeInteger("width",false);}  }
class C{  public SWFActions tagDefineButton(int id,List buttonRecords) throws IOException {  startTag(TAG_DEFINEBUTTON,id,true);  ButtonRecord.write(out,buttonRecords);  System.out.println("BUTTON");  return new ActionWriter(this,version);}  }
class C{  @Override public void handleScroll(ChartCanvas canvas,ScrollEvent e){}  }
class C{  public boolean isContinuous(){  if (this.size() < 2)   return true;  int senIndex=this.first().idx;  for (  Word w : this) {    if (w.idx != senIndex++)     return false;  }  return true;}  }
class C{  public static Typeface robotoLight(Context context){  sRobotoLight=getFontFromRes(R.raw.roboto_light,context);  return sRobotoLight;}  }
class C{  public TeXParser(boolean isPartial,String parseString,ArrayOfAtoms aoa,boolean firstpass,boolean space){  this(isPartial,parseString,(TeXFormula)aoa,firstpass,space);  arrayMode=true;}  }
class C{  public void findAndUndo(Object obj){}  }
class C{  private void writeVersion(OutputNode node,Object source,Schema schema) throws Exception {  Version version=schema.getRevision();  Label label=schema.getVersion();  if (version != null) {    Double start=revision.getDefault();    Double value=version.revision();    if (revision.compare(value,start)) {      if (label.isRequired()) {        writeAttribute(node,value,label);      }    } else {      writeAttribute(node,value,label);    }  }}  }
class C{  public Object call(int objectid,int methodid,Object[] args) throws RemoteException {  boolean result;  Object rvalue;  String errmsg;  try {    Socket sock=new Socket(servername,port);    OutputStream out=new BufferedOutputStream(sock.getOutputStream());    out.write(rmiCommand);    out.write(endofline);    out.write(endofline);    ObjectOutputStream dout=new ObjectOutputStream(out);    dout.writeInt(objectid);    dout.writeInt(methodid);    writeParameters(dout,args);    dout.flush();    InputStream ins=new BufferedInputStream(sock.getInputStream());    skipHeader(ins);    ObjectInputStream din=new ObjectInputStream(ins);    result=din.readBoolean();    rvalue=null;    errmsg=null;    if (result)     rvalue=din.readObject(); else     errmsg=din.readUTF();    din.close();    dout.close();    sock.close();    if (rvalue instanceof RemoteRef) {      RemoteRef ref=(RemoteRef)rvalue;      rvalue=createProxy(ref.oid,ref.classname);    }  } catch (  ClassNotFoundException e) {    throw new RemoteException(e);  }catch (  IOException e) {    throw new RemoteException(e);  }catch (  Exception e) {    throw new RemoteException(e);  }  if (result)   return rvalue; else   throw new RemoteException(errmsg);}  }
class C{  private void showCompletion(){  this.textEditor.showCompletionProposals();}  }
class C{  public void store(Word val,Offset offset){  this.plus(offset).store(val);}  }
class C{  private OutputStream create0(IgfsPath path,boolean overwrite){  File file=fileForPath(path);  boolean exists=file.exists();  if (exists) {    if (!overwrite)     throw new IgfsPathAlreadyExistsException("Failed to create a file because it already exists: " + path);  } else {    File parent=file.getParentFile();    if (!mkdirs0(parent))     throw new IgfsException("Failed to create parent directory for file (underlying file system " + "returned false): " + path);  }  try {    return new FileOutputStream(file);  } catch (  IOException e) {    throw handleSecondaryFsError(e,"Failed to create file [path=" + path + ", overwrite="+ overwrite+ ']');  }}  }
class C{  private static char[] encodeHex(final byte[] data){  return encodeHex(data,true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public GuacamoleClientTimeoutException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TN4_CLASSIFIER__DECLARED_TYPE_ACCESS_MODIFIER:    return declaredTypeAccessModifier != DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT;case TypesPackage.TN4_CLASSIFIER__DECLARED_PROVIDED_BY_RUNTIME:  return declaredProvidedByRuntime != DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT;case TypesPackage.TN4_CLASSIFIER__DYNAMIZABLE:return dynamizable != DYNAMIZABLE_EDEFAULT;case TypesPackage.TN4_CLASSIFIER__TYPING_STRATEGY:return typingStrategy != TYPING_STRATEGY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private void addMetricsFromAttributes(XmlPullParser parser){  int attrCount=parser.getAttributeCount();  for (int i=0; i < attrCount; i++) {    mMetrics.put(parser.getAttributeName(i),parser.getAttributeValue(i));  }}  }
class C{  public static long copy(FileInputStream in,FileOutputStream out) throws IOException {  FileChannel source=null;  FileChannel destination=null;  try {    source=in.getChannel();    destination=out.getChannel();    return source.transferTo(0,source.size(),destination);  }  finally {    CloseableUtils.close(source);    CloseableUtils.close(destination);  }}  }
class C{  public int hashCode(){  return (new Integer(head.label)).hashCode();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Node textNode;  NamedNodeMap attrList;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=elementList.item(0);  textNode=testAddr.getFirstChild();  attrList=textNode.getAttributes();  assertNull("text_attributes_is_null",attrList);}  }
class C{  public static void refreshViews(QKPreference preference){  refreshViews(preference.getKey());}  }
class C{  public XBeeTurnout(String systemName,String userName,XBeeTrafficController controller){  super(systemName,userName);  tc=controller;  init(systemName);}  }
class C{  @Override public boolean remove(Object arg0){  Element<T> cursor=head;  while (cursor != null && !(arg0 == null ? cursor.entry == null : cursor.entry.equals(arg0))) {    cursor=cursor.next;  }  if (cursor == null) {    return false;  } else {    removeInternal(cursor);    return true;  }}  }
class C{  public void testConstrBigIntegerMathContext(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="1231212478987482988429808779810457634781384757";  int resScale=-6;  BigDecimal result=new BigDecimal(bA,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  protected static double singleVariance(double s,double sS,double weight){  return sS - ((s * s) / weight);}  }
class C{  public void addTimeoutListener(ActionListener listener){  commTimer.addActionListener(listener);}  }
class C{  @SmallTest public void testManagerExists(){  assertNotNull(mCMAudioManager);}  }
class C{  public Button(String text){  this(text,null);}  }
class C{  public boolean saveModel(FDModel model,String filename){  URI uri=FileHelper.createURI(filename);  if (uri.segmentCount() > 1) {    return saveModel(model,uri.lastSegment(),uri.trimSegments(1).toString() + "/");  } else {    return saveModel(model,filename,"");  }}  }
class C{  public void updateVideoTitle(String title){  if (!TextUtils.isEmpty(title)) {    mTitleTextView.setText(title);  }}  }
class C{  public static void generateAtom(XmlWriter writer,IFeed feed,ExtensionProfile extProfile) throws IOException {  if (feed instanceof BaseFeed) {    ((BaseFeed<?,?>)feed).generateAtom(writer,extProfile);  } else {  }}  }
class C{  public RenameFieldProcessor(JavaRefactoringArguments arguments,RefactoringStatus status){  this(null);  RefactoringStatus initializeStatus=initialize(arguments);  status.merge(initializeStatus);}  }
class C{  @Override protected boolean isSuccessful(final Player player){  final int random=Rand.roll1D100();  double karma=player.useKarma(FINDING_PROBABILITY * 10);  if (karma <= 0) {    karma=karma - FINDING_PROBABILITY * 5;  }  karma=karma / 10;  return random <= (FINDING_PROBABILITY + karma) * 100;}  }
class C{  public static void disableLighting(){  RenderHelper.disableStandardItemLighting();  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240.0F,240.0F);}  }
class C{  public int remove(int i1,int i2){  boundsCheck(i1,i2);  int rows=sizes.size(), columns=sizes.get(i1);  if (i1 >= rows || i2 >= columns)   throw new ArrayIndexOutOfBoundsException("LBJ: IVector2D: Can't remove index [" + i1 + ", "+ i2+ "] as it is out of bounds ("+ rows+ ", "+ columns+ ")");  int result=vector[i1][i2];  for (int j=i2 + 1; j < columns; ++j)   vector[i1][j - 1]=vector[i1][j];  sizes.set(i1,columns - 1);  return result;}  }
class C{  public static String joinOptions(String[] optionArray){  String optionString="";  for (  String element : optionArray) {    if (element.equals("")) {      continue;    }    boolean escape=false;    for (int n=0; n < element.length(); n++) {      if (Character.isWhitespace(element.charAt(n))) {        escape=true;        break;      }    }    if (escape) {      optionString+='"' + backQuoteChars(element) + '"';    } else {      optionString+=element;    }    optionString+=" ";  }  return optionString.trim();}  }
class C{  public static void waitForCondition(String condition){  BValue cond=getCond(condition);synchronized (cond) {    if (!cond.v) {      try {        cond.wait();      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public void test_ticket_1105_quads_update3() throws Exception {  new UpdateTestHelper("ticket_1105_quads_update3","ticket_1105_update3.rq","ticket_1105.trig");}  }
class C{  public static URL[] doURLs(Resource[] reses) throws IOException {  List<URL> list=new ArrayList<URL>();  for (int i=0; i < reses.length; i++) {    if (reses[i].isDirectory() || "jar".equalsIgnoreCase(ResourceUtil.getExtension(reses[i],null)))     list.add(doURL(reses[i]));  }  return list.toArray(new URL[list.size()]);}  }
class C{  void postAddChildEvent(ASTNode node,ASTNode child,StructuralPropertyDescriptor property){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.postAddChildEvent(node,child,property);  }  finally {    reenableEvents();  }}  }
class C{  public static String[] listAll(Path dir) throws IOException {  return listAll(dir,null);}  }
class C{  private boolean hasVibratePermission(Context context){  PackageManager pm=context.getPackageManager();  int hasPerm=pm.checkPermission(android.Manifest.permission.VIBRATE,context.getPackageName());  return hasPerm == PackageManager.PERMISSION_GRANTED;}  }
class C{  protected Node newNode(){  return new SVGOMDefinitionSrcElement();}  }
class C{  private void handleMouseWheel(final Event e){  if (lastSelected == SELECTED_KNOB.NONE) {    return;  }  if (lastSelected == SELECTED_KNOB.LOWER) {    lowerValue+=e.count * increment;    checkLowerValue();    redraw();  } else {    upperValue+=e.count * increment;    checkUpperValue();    redraw();  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof ConstantSize)) {    return false;  }  ConstantSize size=(ConstantSize)o;  return this.value == size.value && this.unit == size.unit;}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends Comparable<? super T>> list,T object){  if (list == null) {    throw new NullPointerException("list == null");  }  if (list.isEmpty()) {    return -1;  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends Comparable<? super T>> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-it.next().compareTo(object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=-list.get(mid).compareTo(object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  public void clear(){  modCount++;  for (int i=0; i < size; i++)   elementData[i]=null;  size=0;}  }
class C{  public Yaml(Representer representer,DumperOptions dumperOptions){  this(new Constructor(),representer,dumperOptions,new Resolver());}  }
class C{  public Intent putCharSequenceArrayListExtra(String name,ArrayList<CharSequence> value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putCharSequenceArrayList(name,value);  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SOTHER;}  }
class C{  public SWFText tagDefineText2(int id,Rect bounds,Matrix matrix) throws IOException {  if (tags != null) {    return tags.tagDefineText2(id,bounds,matrix);  }  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DoubleMatrix3D like(int slices,int rows,int columns){  return new DenseDoubleMatrix3D(slices,rows,columns);}  }
class C{  public static Function<String,String> compact(){  return null;}  }
class C{  public Command showStretched(String position,boolean modal){  return showPackedImpl(position,modal,true);}  }
class C{  public void addExceptionIfAbsent(SootClass e){  if (!throwsException(e))   addException(e);}  }
class C{  @Override public List<T> findAll(){  return persistenceService.findAll();}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public HTTPTokener(String string){  super(string);}  }
class C{  @Override public boolean isAscending(){  return true;}  }
class C{  public Task<ClusterRestRep> deactivate(URI id){  return deactivate(id,false);}  }
class C{  private void createAdjacencyLists(int[][] edges,int numberOfVertices){  for (int i=0; i < edges.length; i++) {    addEdge(edges[i][0],edges[i][1]);  }}  }
class C{  public CAskRefreshAction(final JFrame parent,final CDebugPerspectiveModel debugPerspectiveModel){  Preconditions.checkNotNull(parent,"IE01446: Parent argument can not be null");  m_debugPerspectiveModel=Preconditions.checkNotNull(debugPerspectiveModel,"IE01447: Debug perspective model argument can not be null");  m_dialog=new CMemoryRangeDialog(parent);}  }
class C{  @Override public void hide(){  if (contents == null) {    return;  }  final JComponent parent=(JComponent)contents.getParent();  popup.hide();  if (parent != null && parent.getBorder() == SHADOW_BORDER) {    parent.setBorder(oldBorder);    parent.setOpaque(oldOpaque);    oldBorder=null;    if (heavyWeightContainer != null) {      parent.putClientProperty(ShadowPopupFactory.PROP_HORIZONTAL_BACKGROUND,null);      parent.putClientProperty(ShadowPopupFactory.PROP_VERTICAL_BACKGROUND,null);      heavyWeightContainer=null;    }  }  owner=null;  contents=null;  popup=null;  recycle(this);}  }
class C{  @Override public Class returnedClass(){  return String.class;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="DLS_DEAD_LOCAL_STORE") void addThroughPath(Block srcBlock,Block dstBlock,LayoutEditor panel){  layoutConnectivity=true;  if (srcBlock == dstBlock) {    return;  }  if (enableAddRouteLogging) {    log.info("From " + this.getDisplayName() + " Add ThroughPath with panel "+ srcBlock.getDisplayName()+ " "+ dstBlock.getDisplayName());  }  boolean add=true;  for (int i=0; i < throughPaths.size(); i++) {    if (throughPaths.get(i).getSourceBlock() == srcBlock) {      if (throughPaths.get(i).getDestinationBlock() == dstBlock) {        add=false;      }    }  }  if (!add) {    return;  }  if (enableAddRouteLogging) {    log.info(block.getDisplayName() + " Source " + srcBlock.getDisplayName()+ ", dest  "+ dstBlock.getDisplayName());  }  connection=new ConnectivityUtil(panel);  ArrayList<LayoutTurnout> stod=new ArrayList<LayoutTurnout>();  ArrayList<Integer> stodSet=new ArrayList<Integer>();  try {    MDC.put("loggingDisabled",connection.getClass().getCanonicalName());    stod=connection.getTurnoutList(block,srcBlock,dstBlock,true);    stodSet=connection.getTurnoutSettingList();    MDC.remove("loggingDisabled");  } catch (  java.lang.NullPointerException ex) {    MDC.remove("loggingDisabled");    if (enableAddRouteLogging) {      log.error(block.getDisplayName() + " Exception caught while trying to dicover turnout connectivity\nSource " + srcBlock.getDisplayName()+ ", dest  "+ dstBlock.getDisplayName()+ "\n"+ ex.toString());    }    return;  }  if (!connection.isTurnoutConnectivityComplete()) {    layoutConnectivity=false;  }  ArrayList<LayoutTurnout> tmpdtos=new ArrayList<LayoutTurnout>();  ArrayList<Integer> tmpdtosSet=new ArrayList<Integer>();  try {    MDC.put("loggingDisabled",connection.getClass().getName());    tmpdtos=connection.getTurnoutList(block,dstBlock,srcBlock,true);    tmpdtosSet=connection.getTurnoutSettingList();    MDC.remove("loggingDisabled");  } catch (  java.lang.NullPointerException ex) {    MDC.remove("loggingDisabled");    if (enableAddRouteLogging) {      log.error(block.getDisplayName() + " Exception caught while trying to dicover turnout connectivity\nSource " + srcBlock.getDisplayName()+ ", dest  "+ dstBlock.getDisplayName()+ "\n"+ ex.toString());    }    return;  }  if (!connection.isTurnoutConnectivityComplete()) {    layoutConnectivity=false;  }  if ((stod.size() == tmpdtos.size()) && (stodSet.size() == tmpdtosSet.size())) {    ArrayList<LayoutTurnout> dtos=new ArrayList<LayoutTurnout>();    for (int i=tmpdtos.size(); i > 0; i--) {      dtos.add(tmpdtos.get(i - 1));    }    if (enableAddRouteLogging) {      log.info("From " + this.getDisplayName() + " destination size "+ dtos.size()+ " v source size "+ stod.size());      log.info("From " + this.getDisplayName() + " destination setting size "+ tmpdtosSet.size()+ " v source setting size "+ stodSet.size());    }    for (int i=0; i < dtos.size(); i++) {      if (dtos.get(i) != stod.get(i)) {        if (enableAddRouteLogging) {          log.info("not equal will quit " + dtos.get(i) + ", "+ stod.get(i));        }        return;      }    }    ArrayList<Integer> dtosSet=new ArrayList<Integer>();    for (int i=tmpdtosSet.size(); i > 0; i--) {      dtosSet.add(tmpdtosSet.get(i - 1));    }    for (int i=0; i < dtosSet.size(); i++) {      int x=stodSet.get(i);      int y=dtosSet.get(i);      if (x != y) {        if (enableAddRouteLogging) {          log.info(block.getDisplayName() + " not on setting equal will quit " + x+ ", "+ y);        }        return;      } else       if (x == Turnout.UNKNOWN) {        if (enableAddRouteLogging) {          log.info(block.getDisplayName() + " turnout state returned as UNKNOWN");        }        return;      }    }    HashSet<LayoutTurnout> set=new HashSet<LayoutTurnout>();    for (int i=0; i < stod.size(); i++) {      boolean val=set.add(stod.get(i));      if (val == false) {        return;      }    }    addThroughPathPostChecks(srcBlock,dstBlock,stod,stodSet);  } else {    if (enableAddRouteLogging) {      log.info("sizes are not the same therefore, we will do some further checks");    }    ArrayList<LayoutTurnout> maxt;    ArrayList<Integer> maxtSet;    if (stod.size() >= tmpdtos.size()) {      maxt=stod;      maxtSet=stodSet;    } else {      maxt=tmpdtos;      maxtSet=tmpdtosSet;    }    Set<LayoutTurnout> set=new HashSet<LayoutTurnout>(maxt);    if (set.size() == maxt.size()) {      if (enableAddRouteLogging) {        log.info("All turnouts are unique so potentially a valid path");      }      boolean allowAddition=false;      for (int i=0; i < maxt.size(); i++) {        LayoutTurnout turn=maxt.get(i);        if (turn.type == LayoutTurnout.DOUBLE_XOVER) {          allowAddition=true;          if (maxtSet.get(i) == 2) {            maxtSet.set(i,4);          } else {            maxtSet.set(i,2);          }        }      }      if (allowAddition) {        if (enableAddRouteLogging) {          log.info("addition allowed");        }        addThroughPathPostChecks(srcBlock,dstBlock,maxt,maxtSet);      } else       if (enableAddRouteLogging) {        log.info("No double cross-over so not a valid path");      }    }  }}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  public boolean isArray(){  return (m_NodeType == NodeType.ARRAY);}  }
class C{  public static String joinOnDelimiter(Map<String,String> toJoin,char delimiter){  StringBuilder buf=new StringBuilder();  for (Iterator<Map.Entry<String,String>> it=toJoin.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<String,String> e=it.next();    String key=e.getKey();    String value=e.getValue();    if (value.indexOf(delimiter) != -1) {      value=value.replace(String.valueOf(delimiter),"\\" + delimiter);    }    buf.append(key);    buf.append("=");    buf.append(value);    if (it.hasNext()) {      buf.append(delimiter);    }  }  return buf.toString();}  }
class C{  public PaymentInfoCash(double dTotal,double dPaid,double dTendered,double prePayAmount){  this(dTotal,dTendered,dPaid);  this.prePayAmount=prePayAmount;}  }
class C{  @Override public void onPageSelected(int position){}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public UndefModifier createUndefModifierFromString(EDataType eDataType,String initialValue){  UndefModifier result=UndefModifier.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public static byte[] calculateXorCRC32(byte[] message,int offset,int len){  CRC32 checksum=new CRC32();  checksum.update(message,offset,len);  long crc=checksum.getValue();  byte[] xorCRC32=new byte[4];  xorCRC32[0]=(byte)((byte)((crc >> 24) & 0xff) ^ XOR_MASK[0]);  xorCRC32[1]=(byte)((byte)((crc >> 16) & 0xff) ^ XOR_MASK[1]);  xorCRC32[2]=(byte)((byte)((crc >> 8) & 0xff) ^ XOR_MASK[2]);  xorCRC32[3]=(byte)((byte)(crc & 0xff) ^ XOR_MASK[3]);  return xorCRC32;}  }
class C{  public CCSubtitleHandler(){  super(null);  subLangs=new String[]{"CC1","CC2","CC3","CC4","DTVCC1","DTVCC2","DTVCC3","DTVCC4","DTVCC5","DTVCC6"};  display=new char[CC_ROWS][CC_HD_COLS + 1];  memory=new char[CC_ROWS][CC_HD_COLS + 1];  displayFormat=new long[CC_ROWS][CC_HD_COLS + 1];  clearFormat(displayFormat);  currLang="CC1";  debugCC=sage.Sage.getBoolean("cc_debug",false);  for (int i=0; i < translation708G2table.length; i++)   translation708G2table[i]='_';  translation708G2table[0x0]=TRANSPARENT_SPACE_708;  translation708G2table[0x1]=TRANSPARENT_SPACE_708;  translation708G2table[0x5]='\u2026';  translation708G2table[0xa]='\u0160';  translation708G2table[0xc]='\u0152';  translation708G2table[0x10]='\u2588';  translation708G2table[0x11]='\u2018';  translation708G2table[0x12]='\u2019';  translation708G2table[0x13]='\u201C';  translation708G2table[0x14]='\u201D';  translation708G2table[0x15]='\u2022';  translation708G2table[0x19]='\u2122';  translation708G2table[0x1a]='\u0161';  translation708G2table[0x1c]='\u0153';  translation708G2table[0x1d]='\u2120';  translation708G2table[0x1f]='\u0178';  translation708G2table[0x56]='\u215B';  translation708G2table[0x57]='\u212C';  translation708G2table[0x58]='\u212D';  translation708G2table[0x59]='\u212E';  translation708G2table[0x5a]='\u2502';  translation708G2table[0x5b]='\u2510';  translation708G2table[0x5c]='\u2514';  translation708G2table[0x5d]='\u2500';  translation708G2table[0x5e]='\u2518';  translation708G2table[0x5f]='\u250C';}  }
class C{  public CUcontext(){}  }
class C{  public static void drawStringInRect(Graphics g,String aString,int x,int y,int width,int height,int justification){  drawStringInRect(null,g,aString,x,y,width,height,justification);}  }
class C{  public void createCategoryGUIMultiple(Material item,Player player){  String category;switch (item) {case STONE:    category=AdvancedAchievements.MULTIPLE_ACHIEVEMENTS[0];  break;case SMOOTH_BRICK:category=AdvancedAchievements.MULTIPLE_ACHIEVEMENTS[1];break;case BONE:category=AdvancedAchievements.MULTIPLE_ACHIEVEMENTS[2];break;case WORKBENCH:category=AdvancedAchievements.MULTIPLE_ACHIEVEMENTS[3];break;default :category="";break;}YamlManager config=plugin.getPluginConfig();ConfigurationSection categoryConfig=config.getConfigurationSection(category);int totalAchievementsInCategory=0;for (String section : categoryConfig.getKeys(false)) {ConfigurationSection subcategoryConfig=config.getConfigurationSection(category + '.' + section);totalAchievementsInCategory+=subcategoryConfig.getKeys(false).size();}int inventorySize=getClosestGreaterMultipleOf9(totalAchievementsInCategory + 1);Inventory inventory=Bukkit.createInventory(null,inventorySize,ChatColor.translateAlternateColorCodes('&',plugin.getPluginLang().getString("list-gui-title","&5&lAchievements List")));int positionInGUI=0;for (String section : categoryConfig.getKeys(false)) {int statistic;switch (item) {case STONE:statistic=plugin.getPoolsManager().getPlayerBlockPlaceAmount(player,section);break;case SMOOTH_BRICK:statistic=plugin.getPoolsManager().getPlayerBlockBreakAmount(player,section);break;case BONE:statistic=plugin.getPoolsManager().getPlayerKillAmount(player,section);break;case WORKBENCH:statistic=plugin.getPoolsManager().getPlayerCraftAmount(player,section);break;default :statistic=-1;break;}String previousItemDate=null;int previousItemGoal=0;int subcategoryIndex=0;ConfigurationSection subcategoryConfig=config.getConfigurationSection(category + '.' + section);for (String level : subcategoryConfig.getKeys(false)) {if (positionInGUI >= inventorySize - 1) break;int currentItemGoal=Integer.parseInt(level);String achName=config.getString(category + '.' + section+ '.'+ level+ ".Name","");String displayName=config.getString(category + '.' + section+ '.'+ level+ ".DisplayName","");String nameToShowUser;if (Strings.isNullOrEmpty(displayName)) {nameToShowUser=achName;} else {nameToShowUser=displayName;}String achMessage;String goal=config.getString(category + '.' + section+ '.'+ level+ ".Goal","");if (Strings.isNullOrEmpty(goal)) {achMessage=config.getString(category + '.' + section+ '.'+ level+ ".Message","");} else {achMessage=goal;}List<String> rewards=plugin.getReward().getRewardType(category + '.' + section+ '.'+ level);String date=plugin.getDb().getPlayerAchievementDate(player,achName);boolean inelligibleSeriesItem;if (subcategoryIndex == 0 || date != null || previousItemDate != null) {inelligibleSeriesItem=false;} else {if (currentItemGoal > previousItemGoal) inelligibleSeriesItem=true; else inelligibleSeriesItem=false;}createGUIItem(inventory,positionInGUI,level,statistic,nameToShowUser,achMessage,rewards,date,inelligibleSeriesItem);positionInGUI++;previousItemDate=date;previousItemGoal=currentItemGoal;subcategoryIndex++;}}ItemStack achItem=new ItemStack(Material.PAPER);ItemMeta connectionsMeta=achItem.getItemMeta();connectionsMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&',StringEscapeUtils.unescapeJava(plugin.getPluginLang().getString("list-back-message","&7Back"))));achItem.setItemMeta(connectionsMeta);inventory.setItem(positionInGUI,achItem);player.openInventory(inventory);}  }
class C{  public DistributedLogClientBuilder maxRedirects(int redirects){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setMaxRedirects(redirects);  return newBuilder;}  }
class C{  public MemoryChunk(final long address,final byte[] data){  Preconditions.checkArgument(address >= 0,"Chunk addresses can't be less than 0");  Preconditions.checkNotNull(data,"Initial data can't be null");  Preconditions.checkArgument(data.length != 0,"Initial data can't be empty");  m_address=address;  m_data=data;}  }
class C{  public OMScalingIcon(float centerLat,float centerLon,int offsetX,int offsetY,int w,int h,byte[] bytes,Color[] colorTable,int trans,float baseScale){  super(centerLat,centerLon,0f,0f,w,h,bytes,colorTable,trans);  setX(offsetX);  setY(offsetY);  this.baseScale=baseScale;}  }
class C{  @Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException, AdeFlowException {  for (  IAnalyzedMessageSummary ms : analyzedInterval.getAnalyzedMessages()) {    final String messageId=ms.getMessageId();    final Integer[] delta=extractDelta(ms);    PerodicityBounder perodicityBounder=m_lastSeen.get(messageId);    if (perodicityBounder == null) {      perodicityBounder=new PerodicityBounder();      m_lastSeen.put(messageId,perodicityBounder);    }    perodicityBounder.addPoints(delta);  }}  }
class C{  public FeatureTypeLibraryItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static String normalizeByte(String value){  return normalizeIntegerValue(value,"-128","127");}  }
class C{  public DefaultClientWebRequestBuilder contentType(String contentType){  this.httpHeaders.setContentType(MediaType.parseMediaType(contentType));  return this;}  }
class C{  protected AbstractPoolEntry(ClientConnectionOperator connOperator,HttpRoute route){  super();  if (connOperator == null) {    throw new IllegalArgumentException("Connection operator may not be null");  }  this.connOperator=connOperator;  this.connection=connOperator.createConnection();  this.route=route;  this.tracker=null;}  }
class C{  public void testAckedMessageAreConsumed() throws JMSException {  connection.start();  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  Queue queue=session.createQueue(getQueueName());  MessageProducer producer=session.createProducer(queue);  producer.send(session.createTextMessage("Hello"));  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  msg.acknowledge();  session.close();  session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  msg=consumer.receive(1000);  assertNull(msg);  session.close();}  }
class C{  public int compare(Decimal o1,Decimal o2){  int returnVal=CoreUtils.nullSafeComparator(o1.getBigDecimalValue(),o2.getBigDecimalValue());  if (m_ascending.equals(Boolean.FALSE)) {    returnVal=returnVal * -1;  }  return returnVal;}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  public static int hash(float value){  return Float.floatToIntBits(value * 663608941.737f);}  }
class C{  public EnumState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions){  super(id,deferred,entryActions,exitActions);}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  @KnownFailure("Fixed in DonutBurger, boundary checks missing") public void test_unwrap_02() throws SSLException {  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bb,bbA,-1,3);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.unwrap(bb,bbA,0,-3);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.unwrap(bb,bbA,bbA.length + 1,bbA.length);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.unwrap(bb,bbA,0,bbA.length + 1);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }}  }
class C{  public void addProductToken(String pt){  productTokens.add(pt);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  void undent(){  lmargin--;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public static ReviewsFragment newInstance(int productId,String productName,String productPrice){  ReviewsFragment fragment=new ReviewsFragment();  Bundle args=new Bundle();  args.putInt(PRODUCT_ID,productId);  args.putString(PRODUCT_NAME,productName);  args.putString(PRODUCT_PRICE,productPrice);  fragment.setArguments(args);  return fragment;}  }
class C{  public void writeTo(OutputStream outputStream) throws IOException {  outputStream.write(getBytes());}  }
class C{  public DateTime withHourOfDay(int hour){  return withMillis(getChronology().hourOfDay().set(getMillis(),hour));}  }
class C{  @ObjectiveCName("updateMessageWithPeer:withText:withRid:") public Promise<Void> updateMessage(@NotNull Peer peer,@NotNull String text,long rid){  return modules.getMessagesModule().updateMessage(peer,text,rid);}  }
class C{  public static boolean isValidPackageName(String name){  IStatus status=validatePackageName(name);switch (status.getSeverity()) {case Status.WARNING:case Status.OK:    return true;default :  return false;}}  }
class C{  @Override public synchronized void clear() throws IOException {  for (  final blobItem bi : this.blobs) {    bi.blob.clear();    bi.blob.close(false);    HeapWriter.delete(bi.location);  }  this.blobs.clear();}  }
class C{  public Object value(InternalContextAdapter context) throws MethodInvocationException {  Object left=jjtGetChild(0).value(context);  Object right=jjtGetChild(1).value(context);  if (left == null || right == null) {    rsvc.error((left == null ? "Left" : "Right") + " side of range operator [n..m] has null value." + " Operation not possible. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  if (!(left instanceof Integer) || !(right instanceof Integer)) {    rsvc.error((!(left instanceof Integer) ? "Left" : "Right") + " side of range operator is not a valid type. " + "Currently only integers (1,2,3...) and Integer type is supported. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  int l=((Integer)left).intValue();  int r=((Integer)right).intValue();  int num=Math.abs(l - r);  num+=1;  int delta=(l >= r) ? -1 : 1;  ArrayList foo=new ArrayList();  int val=l;  for (int i=0; i < num; i++) {    foo.add(new Integer(val));    val+=delta;  }  return foo;}  }
class C{  @Override public String toString(){  String str="";  if (map.keySet().isEmpty()) {    return "~";  }  List<String> keyList=new ArrayList<String>(map.keySet());  for (  String key : keyList) {    if (map.get(key) == null) {      str+=key + "=null";    } else     if (map.get(key).equals(Boolean.TRUE)) {      str+=key;    } else     if (map.get(key).equals(Boolean.FALSE)) {      str+="!" + key;    } else {      str+=key + "=" + map.get(key);    }    if (!key.equals(keyList.get(map.keySet().size() - 1))) {      str+=" ^ ";    }  }  return str;}  }
class C{  public IsSimpleOp(Geometry geom){  this.inputGeom=geom;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProcess[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public BusinessObjectFormatEntity createBusinessObjectFormatEntity(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String fileType,Integer businessObjectFormatVersion,String businessObjectFormatDescription,Boolean businessObjectFormatLatestVersion,String businessObjectFormatPartitionKey,String partitionKeyGroupName,List<Attribute> attributes,String schemaDelimiterCharacter,String schemaEscapeCharacter,String schemaNullValue,List<SchemaColumn> schemaColumns,List<SchemaColumn> partitionColumns){  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(new BusinessObjectDefinitionKey(namespaceCode,businessObjectDefinitionName));  if (businessObjectDefinitionEntity == null) {    businessObjectDefinitionEntity=businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(namespaceCode,businessObjectDefinitionName,AbstractDaoTest.DATA_PROVIDER_NAME,null);  }  FileTypeEntity fileTypeEntity=fileTypeDao.getFileTypeByCode(fileType);  if (fileTypeEntity == null) {    fileTypeEntity=fileTypeDaoTestHelper.createFileTypeEntity(fileType,null);  }  PartitionKeyGroupEntity partitionKeyGroupEntity=null;  if (StringUtils.isNotBlank(partitionKeyGroupName)) {    partitionKeyGroupEntity=partitionKeyGroupDao.getPartitionKeyGroupByName(partitionKeyGroupName);    if (partitionKeyGroupEntity == null) {      partitionKeyGroupEntity=partitionKeyGroupDaoTestHelper.createPartitionKeyGroupEntity(partitionKeyGroupName);    }  }  return createBusinessObjectFormatEntity(businessObjectDefinitionEntity,businessObjectFormatUsage,fileTypeEntity,businessObjectFormatVersion,businessObjectFormatDescription,businessObjectFormatLatestVersion,businessObjectFormatPartitionKey,partitionKeyGroupEntity,attributes,schemaDelimiterCharacter,schemaEscapeCharacter,schemaNullValue,schemaColumns,partitionColumns);}  }
class C{  public boolean paintRable(Graphics2D g2d){  AffineTransform at=g2d.getTransform();  g2d.transform(getAffine());  GraphicsUtil.drawImage(g2d,getSource());  g2d.setTransform(at);  return true;}  }
class C{  private void assertPivotCountsAreCorrect(SolrParams baseParams,SolrParams pivotParams) throws SolrServerException {  SolrParams initParams=SolrParams.wrapAppended(pivotParams,baseParams);  log.info("Doing full run: {}",initParams);  countNumFoundChecks=0;  NamedList<List<PivotField>> pivots=null;  try {    QueryResponse initResponse=cloudClient.query(initParams);    pivots=initResponse.getFacetPivot();    assertNotNull(initParams + " has null pivots?",pivots);    assertEquals(initParams + " num pivots",initParams.getParams("facet.pivot").length,pivots.size());  } catch (  Exception e) {    throw new RuntimeException("init query failed: " + initParams + ": "+ e.getMessage(),e);  }  try {    for (    Map.Entry<String,List<PivotField>> pivot : pivots) {      final String pivotKey=pivot.getKey();      final int maxDepth=1 + pivotKey.length() - pivotKey.replace(",","").length();      assertTraceOk(pivotKey,baseParams,pivot.getValue());      for (      PivotField constraint : pivot.getValue()) {        int depth=assertPivotCountsAreCorrect(pivotKey,baseParams,constraint);        assertTrue("went too deep: " + depth + ": "+ pivotKey+ " ==> "+ pivot,depth <= maxDepth);      }    }  } catch (  AssertionError e) {    throw new AssertionError(initParams + " ==> " + e.getMessage(),e);  } finally {    log.info("Ending full run (countNumFoundChecks={}): {}",countNumFoundChecks,initParams);  }}  }
class C{  private void applyMuteState(){  if (hasAudio()) {    long now=System.currentTimeMillis();    long lastUnmutedVideo=preferences.getLong(KEY_LAST_UNMUTED_VIDEO,0);    long diff=(now - lastUnmutedVideo) / 1000;    setMuted(diff > 10 * 60);  } else {    videoPlayer.setMuted(true);  }}  }
class C{  private void configure(Member.Type type,CompletableFuture<Void> future){  configureTimeout=cluster.getContext().getThreadContext().schedule(cluster.getContext().getElectionTimeout(),null);  cluster.getContext().getAbstractState().reconfigure(ReconfigureRequest.builder().withIndex(cluster.getConfiguration().index()).withTerm(cluster.getConfiguration().term()).withMember(new ServerMember(type,serverAddress(),clientAddress(),updated)).build()).whenComplete(null);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public static File unitImagesDir(){  return new File(imagesDir(),DEFAULT_DIR_NAME_UNIT_IMAGES);}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  private void cmd_find(){  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  int AD_Table_ID=m_reportEngine.getPrintFormat().getAD_Table_ID();  String title=null;  String tableName=null;  String sql="SELECT t.AD_Tab_ID " + "FROM AD_Tab t" + " INNER JOIN AD_Window w ON (t.AD_Window_ID=w.AD_Window_ID)"+ " INNER JOIN AD_Table tt ON (t.AD_Table_ID=tt.AD_Table_ID) "+ "WHERE tt.AD_Table_ID=? "+ "ORDER BY w.IsDefault DESC, t.SeqNo, ABS (tt.AD_Window_ID-t.AD_Window_ID)";  int AD_Tab_ID=DB.getSQLValue(null,sql,AD_Table_ID);  MClient client=MClient.get(Env.getCtx());  String ASPFilter="";  if (client.isUseASP())   ASPFilter="     AND (   AD_Tab_ID IN ( " + "              SELECT t.AD_Tab_ID " + "                FROM ASP_Tab t, ASP_Window w, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE w.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND t.ASP_Window_ID = w.ASP_Window_ID "+ "                 AND t.IsActive = 'Y' "+ "                 AND w.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND t.ASP_Status = 'S') "+ "        OR AD_Tab_ID IN ( "+ "              SELECT AD_Tab_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = 'Y' "+ "                 AND ce.AD_Tab_ID IS NOT NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = 'S') "+ "       ) "+ "   AND AD_Tab_ID NOT IN ( "+ "          SELECT AD_Tab_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = 'Y' "+ "             AND ce.AD_Tab_ID IS NOT NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = 'H')";  sql="SELECT Name, TableName FROM AD_Tab_v WHERE AD_Tab_ID=? " + ASPFilter;  if (!Env.isBaseLanguage(Env.getCtx(),"AD_Tab"))   sql="SELECT Name, TableName FROM AD_Tab_vt WHERE AD_Tab_ID=?" + " AND AD_Language='" + Env.getAD_Language(Env.getCtx()) + "' "+ ASPFilter;  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Tab_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      title=rs.getString(1);      tableName=rs.getString(2);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  GridField[] findFields=null;  if (tableName != null)   findFields=GridField.createFields(m_ctx,m_WindowNo,0,AD_Tab_ID);  if (findFields == null)   bFind.setEnabled(false); else {    ASearch search=new ASearch(bFind,this,title,AD_Tab_ID,AD_Table_ID,tableName,m_reportEngine,findFields,1);    search=null;    revalidate();  }  cmd_drill();}  }
class C{  protected void startActivityForResult(Intent intent,int code){  activity.startActivityForResult(intent,code);}  }
class C{  boolean unlocked(Object key){  locked.remove(key);  return locked.isEmpty();}  }
class C{  public boolean isEncodeBlanks(){  return this.encodeBlanks;}  }
class C{  public KernelLogisticRegressionOptimization(ExampleSet exampleSet,Kernel kernel,double c,int initType,int maxIterations,int generationsWithoutImprovement,int popSize,int selectionType,double tournamentFraction,boolean keepBest,int mutationType,double crossoverProb,boolean showConvergencePlot,RandomGenerator random,LoggingHandler logging,Operator executingOperator){  super(0,1.0,popSize,exampleSet.size(),initType,maxIterations,generationsWithoutImprovement,selectionType,tournamentFraction,keepBest,mutationType,crossoverProb,showConvergencePlot,false,random,logging,executingOperator);  if (selectionType == NON_DOMINATED_SORTING_SELECTION) {    multiobjective=true;  } else {    multiobjective=false;  }  this.exampleSet=exampleSet;  this.kernel=kernel;  this.kernel.init(this.exampleSet);  this.c=c;  this.label=exampleSet.getAttributes().getLabel();  this.weight=exampleSet.getAttributes().getWeight();  this.ys=new double[exampleSet.size()];  int counter=0;  for (  Example e : exampleSet) {    ys[counter++]=e.getLabel() == label.getMapping().getPositiveIndex() ? 1 : 0;  }}  }
class C{  boolean isValidScheme(String scheme){  for (int i=0; i < scheme.length(); i++) {    char ch=scheme.charAt(i);    if (URIHelper.isAlpha(ch) || URIHelper.isNumeric(ch) || ch == '-') {      continue;    }    return false;  }  return true;}  }
class C{  static String encodeHighLevel(String msg,Compaction compaction,Charset encoding) throws WriterException {  StringBuilder sb=new StringBuilder(msg.length());  if (encoding == null) {    encoding=DEFAULT_ENCODING;  } else   if (!DEFAULT_ENCODING.equals(encoding)) {    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding.name());    if (eci != null) {      encodingECI(eci.getValue(),sb);    }  }  int len=msg.length();  int p=0;  int textSubMode=SUBMODE_ALPHA;  if (compaction == Compaction.TEXT) {    encodeText(msg,p,len,sb,textSubMode);  } else   if (compaction == Compaction.BYTE) {    byte[] bytes=msg.getBytes(encoding);    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);  } else   if (compaction == Compaction.NUMERIC) {    sb.append((char)LATCH_TO_NUMERIC);    encodeNumeric(msg,p,len,sb);  } else {    int encodingMode=TEXT_COMPACTION;    while (p < len) {      int n=determineConsecutiveDigitCount(msg,p);      if (n >= 13) {        sb.append((char)LATCH_TO_NUMERIC);        encodingMode=NUMERIC_COMPACTION;        textSubMode=SUBMODE_ALPHA;        encodeNumeric(msg,p,n,sb);        p+=n;      } else {        int t=determineConsecutiveTextCount(msg,p);        if (t >= 5 || n == len) {          if (encodingMode != TEXT_COMPACTION) {            sb.append((char)LATCH_TO_TEXT);            encodingMode=TEXT_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          textSubMode=encodeText(msg,p,t,sb,textSubMode);          p+=t;        } else {          int b=determineConsecutiveBinaryCount(msg,p,encoding);          if (b == 0) {            b=1;          }          byte[] bytes=msg.substring(p,p + b).getBytes(encoding);          if (bytes.length == 1 && encodingMode == TEXT_COMPACTION) {            encodeBinary(bytes,0,1,TEXT_COMPACTION,sb);          } else {            encodeBinary(bytes,0,bytes.length,encodingMode,sb);            encodingMode=BYTE_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          p+=b;        }      }    }  }  return sb.toString();}  }
class C{  public static String toSQLName(Field field){  if (field.isAnnotationPresent(Column.class)) {    Column annotation=field.getAnnotation(Column.class);    return annotation.name();  }  return toSQLNameDefault(field.getName());}  }
class C{  public void remove(){  Toolkit.getDefaultToolkit().removeAWTEventListener(this);  timer.stop();  this.target=null;}  }
class C{  private void registerDef(Instruction s,BasicBlock b,FieldReference fr){  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);  RVMField f=fr.peekResolvedField();  HeapOperand<Object> H;  if (f == null) {    H=new HeapOperand<Object>(findOrCreateHeapVariable(fr));  } else {    if (heapTypes != null) {      if (!heapTypes.contains(f)) {        return;      }    }    H=new HeapOperand<Object>(findOrCreateHeapVariable(f));  }  H.value.registerDef(b);  HeapOperand<Object>[] Hprime=new HeapOperand[1];  Hprime[0]=H;  Hprime[0].setInstruction(s);  defs.put(s,Hprime);}  }
class C{  private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,int[] codewords,int[] erasureArray,int[] ambiguousIndexes,int[][] ambiguousIndexValues) throws FormatException, ChecksumException {  int[] ambiguousIndexCount=new int[ambiguousIndexes.length];  int tries=100;  while (tries-- > 0) {    for (int i=0; i < ambiguousIndexCount.length; i++) {      codewords[ambiguousIndexes[i]]=ambiguousIndexValues[i][ambiguousIndexCount[i]];    }    try {      return decodeCodewords(codewords,ecLevel,erasureArray);    } catch (    ChecksumException ignored) {    }    if (ambiguousIndexCount.length == 0) {      throw ChecksumException.getChecksumInstance();    }    for (int i=0; i < ambiguousIndexCount.length; i++) {      if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {        ambiguousIndexCount[i]++;        break;      } else {        ambiguousIndexCount[i]=0;        if (i == ambiguousIndexCount.length - 1) {          throw ChecksumException.getChecksumInstance();        }      }    }  }  throw ChecksumException.getChecksumInstance();}  }
class C{  public GridLocation(Settings s){  super(s);  int nodeCount=s.getInt(SimScenario.NROF_HOSTS_S);  s.setSubNameSpace(GRIDLOC_NS);  this.rows=s.getInt(ROWS_S);  this.cols=(nodeCount / this.rows);  this.startCoords=s.getCsvDoubles(LOCATION_S,2);  this.spacing=s.getInt(SPACING_S);  this.offset=s.getDouble(OFFSET_S,0);  s.restoreSubNameSpace();}  }
class C{  public void testConstructorStringRadix10(){  String value="987328901348934898";  int radix=10;  byte rBytes[]={13,-77,-78,103,-103,97,68,-14};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  private static int compareTo(byte[] ip1,byte[] ip2){  if (Arrays.areEqual(ip1,ip2)) {    return 0;  }  if (Arrays.areEqual(max(ip1,ip2),ip1)) {    return 1;  }  return -1;}  }
class C{  public void clear(){  if (GenInputsAbstract.progressinterval == -1)   return;  String status=UtilMDE.rpad("",progresswidth - 1);  System.out.print("\r" + status);  System.out.print("\r");  System.out.flush();}  }
class C{  public SelectionBuilder reset(){  tableName=null;  projectionMap.clear();  selection.setLength(0);  selectionArgs.clear();  groupBy.clear();  return this;}  }
class C{  private void createDBClass() throws AtlasException {  AttributeDefinition[] attributeDefinitions=new AttributeDefinition[]{new AttributeDefinition(AtlasConstants.CLUSTER_NAME_ATTRIBUTE,DataTypes.STRING_TYPE.getName(),Multiplicity.REQUIRED,false,false,true,null),new AttributeDefinition(LOCATION,DataTypes.STRING_TYPE.getName(),Multiplicity.OPTIONAL,false,null),new AttributeDefinition(HiveDataModelGenerator.PARAMETERS,STRING_MAP_TYPE.getName(),Multiplicity.OPTIONAL,false,null),new AttributeDefinition("ownerType",HiveDataTypes.HIVE_PRINCIPAL_TYPE.getName(),Multiplicity.OPTIONAL,false,null)};  HierarchicalTypeDefinition<ClassType> definition=new HierarchicalTypeDefinition<>(ClassType.class,HiveDataTypes.HIVE_DB.getName(),null,ImmutableSet.of(AtlasClient.REFERENCEABLE_SUPER_TYPE,AtlasClient.ASSET_TYPE),attributeDefinitions);  classTypeDefinitions.put(HiveDataTypes.HIVE_DB.getName(),definition);  LOG.debug("Created definition for " + HiveDataTypes.HIVE_DB.getName());}  }
class C{  void pushBaseIndentifier(String baseID){  if (null != baseID) {    int posOfHash=baseID.indexOf('#');    if (posOfHash > -1) {      m_fragmentIDString=baseID.substring(posOfHash + 1);      m_shouldProcess=false;    } else     m_shouldProcess=true;  } else   m_shouldProcess=true;  m_baseIdentifiers.push(baseID);}  }
class C{  public TicketInfo(){  m_sId=UUID.randomUUID().toString();  tickettype=TicketType.NORMAL;  m_iTicketId=0;  m_dDate=new Date();  attributes=new Properties();  m_User=null;  m_Customer=null;  m_sActiveCash=null;  m_aLines=new ArrayList<>();  m_CouponLines=new CouponSet();  payments=new ArrayList<>();  taxes=null;  m_sResponse=null;  oldTicket=false;  multiply=0.0;  m_sharedticket=false;  m_nosc="0";}  }
class C{  public static boolean intersectLineSegmentTriangle(float p0X,float p0Y,float p0Z,float p1X,float p1Y,float p1Z,float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z,float epsilon,Vector3f intersectionPoint){  float dirX=p1X - p0X;  float dirY=p1Y - p0Y;  float dirZ=p1Z - p0Z;  float t=intersectRayTriangle(p0X,p0Y,p0Z,dirX,dirY,dirZ,v0X,v0Y,v0Z,v1X,v1Y,v1Z,v2X,v2Y,v2Z,epsilon);  if (t >= 0.0f && t <= 1.0f) {    intersectionPoint.x=p0X + dirX * t;    intersectionPoint.y=p0Y + dirY * t;    intersectionPoint.z=p0Z + dirZ * t;    return true;  }  return false;}  }
class C{  public void removeAllChildren(){  this.children.clear();}  }
class C{  public void testContinuousMode() throws Exception {  depMode=DeploymentMode.CONTINUOUS;  processTest(false,false);}  }
class C{  public void prepare(){  if (!initialRegion.isZero()) {    setDataEnd(region,cursor);    mcSpace().append(initialRegion);  }  reset();}  }
class C{  public static <T>SortedSet<T> unmodifiableSortedSet(SortedSet<T> s){  return new UnmodifiableSortedSet<>(s);}  }
class C{  public boolean isLast(int AD_WF_Node_ID,int AD_Client_ID){  MWFNode[] nodes=getNodesInOrder(AD_Client_ID);  return AD_WF_Node_ID == nodes[nodes.length - 1].getAD_WF_Node_ID();}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  @Override public final boolean isBound(){  if (self == this) {    return super.isBound();  } else {    return self.isBound();  }}  }
class C{  public boolean isInStudyArea(){  return inStudyArea;}  }
class C{  @Path("{groupId}") @Timed @ExceptionMetered @DELETE public Response deleteGroup(@Auth User user,@PathParam("groupId") LongParam groupId){  logger.info("User '{}' deleting group id={}.",user,groupId);  Optional<Group> group=groupDAO.getGroupById(groupId.get());  if (!group.isPresent()) {    throw new NotFoundException("Group not found.");  }  groupDAO.deleteGroup(group.get());  auditLog.recordEvent(new Event(Instant.now(),EventTag.GROUP_DELETE,user.getName(),group.get().getName()));  return Response.noContent().build();}  }
class C{  static public SPOKeyOrder valueOf(final int index){  return values[index];}  }
class C{  public static String htmlEscapeCharsToString(String source){  return isEmpty(source) ? source : source.replaceAll("&lt;","<").replaceAll("&gt;",">").replaceAll("&amp;","&").replaceAll("&quot;","\"");}  }
class C{  public byte[] initializeUnscrambleData(){  unscrambleKey=new int[4];  unscrambleTmp=new byte[9];  byte[] solution=getSolutionDown();  unscrambleBuf=new byte[solution.length];  return solution;}  }
class C{  private void initTable(){  moneyPile=new CardGroup(top,true);  moneyPileGV=(GridView)findViewById(R.id.moneyPileGV);  moneyPileGV.setAdapter(moneyPile);  moneyPileGV.setOnItemClickListener(this);  moneyPileGV.setOnItemLongClickListener(this);  vpPile=new CardGroup(top,true);  vpPileGV=(GridView)findViewById(R.id.vpPileGV);  vpPileGV.setAdapter(vpPile);  vpPileGV.setOnItemClickListener(this);  vpPileGV.setOnItemLongClickListener(this);  supplyPile=new CardGroup(top,true);  supplyPileGV=(GridView)findViewById(R.id.supplyPileGV);  supplyPileGV.setAdapter(supplyPile);  supplyPileGV.setOnItemClickListener(this);  supplyPileGV.setOnItemLongClickListener(this);  nonSupplyPile=new CardGroup(top,true);  nonSupplyPileGV=(GridView)findViewById(R.id.nonSupplyPileGV);  nonSupplyPileGV.setAdapter(nonSupplyPile);  nonSupplyPileGV.setOnItemClickListener(this);  nonSupplyPileGV.setOnItemLongClickListener(this);  prizePile=new CardGroup(top,true);  prizePileGV=(GridView)findViewById(R.id.prizePileGV);  prizePileGV.setAdapter(prizePile);  prizePileGV.setOnItemClickListener(this);  prizePileGV.setOnItemLongClickListener(this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void put(String key,List<T> value,Bundle bundle){  if (!(value instanceof ArrayList)) {    throw new ClassCastException("ParcelableListSerializer can serialize List only if it's " + "implemented as a " + ArrayList.class.getName() + ", but give value is implemented as "+ value.getClass().getName());  }  bundle.putParcelableArrayList(key,(ArrayList<T>)value);}  }
class C{  public boolean isPartial(){  return ((ConsCell)getTerm()).isPartial();}  }
class C{  private void validateDictionaryFileOffsetWithLastSegmentEntryOffset() throws IOException {  chunkMetaObjectForLastSegmentEntry=getChunkMetaObjectForLastSegmentEntry();  int bytesToTruncate=(int)(chunk_start_offset - chunkMetaObjectForLastSegmentEntry.getEnd_offset());  if (bytesToTruncate > 0) {    LOGGER.info("some inconsistency in dictionary file for column " + this.columnIdentifier);    FileFactory.FileType fileType=FileFactory.getFileType(this.dictionaryFilePath);    CarbonFile carbonFile=FileFactory.getCarbonFile(this.dictionaryFilePath,fileType);    boolean truncateSuccess=carbonFile.truncate(this.dictionaryFilePath,chunkMetaObjectForLastSegmentEntry.getEnd_offset());    if (!truncateSuccess) {      LOGGER.info("Diction file not truncated successfully for column " + this.columnIdentifier);    }  }}  }
class C{  public synchronized void removeSeries(XYSeries series){  mSeries.remove(series);}  }
class C{  public boolean animationsPaused(){  return ctx.getAnimationEngine().isPaused();}  }
class C{  protected void changeTimeBy(long amount,boolean wrapAroundTimeLimits,TimerStatus timeStatus){  long oldTime=getTime();  long newTime;  boolean stopClock=false;  newTime=oldTime + amount;  if (newTime > endTime || newTime < startTime) {    if (wrapAroundTimeLimits) {      newTime=(amount >= 0 ? startTime : endTime);    } else {      newTime=(amount >= 0 ? endTime : startTime);      stopClock=true;    }  }  if (Debug.debugging("clock")) {    Debug.output("Clock " + (stopClock ? ("stopping clock at (" + newTime) : ("changing time by [" + amount + "] to ("+ newTime)) + ") : "+ timeStatus);  }  setTime(newTime,timeStatus);  if (stopClock) {    stopClock();  }}  }
class C{  public boolean equals(String productId,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,BigDecimal selectedAmount){  return equals(productId,reservStart,reservLength,reservPersons,null,null,additionalProductFeatureAndAppls,attributes,prodCatalogId,selectedAmount,configWrapper,itemType,itemGroup,false);}  }
class C{  public static Byte[] toObject(byte[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_BYTE_OBJECT_ARRAY;  }  final Byte[] result=new Byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Byte(array[i]);  }  return result;}  }
class C{  public synchronized final void incrementProgressBy(int diff){  setProgress(mProgress + diff);}  }
class C{  public int hashCode(){  int fhash=(family != null) ? family.hashCode() : 0;  return fhash ^ style ^ size;}  }
class C{  public static boolean isFinished(final Protos.TaskState state){  return Protos.TaskState.TASK_FINISHED.equals(state);}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public static Map<String,Object> createContactMech(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_CREATE");  if (result.size() > 0)   return result;  String contactMechTypeId=(String)context.get("contactMechTypeId");  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_id_generation_failure",locale));  }  GenericValue tempContactMech=delegator.makeValue("ContactMech",UtilMisc.toMap("contactMechId",newCmId,"contactMechTypeId",contactMechTypeId));  toBeStored.add(tempContactMech);  if (!partyId.equals("_NA_")) {    toBeStored.add(delegator.makeValue("PartyContactMech",UtilMisc.toMap("partyId",partyId,"contactMechId",newCmId,"fromDate",now,"roleTypeId",context.get("roleTypeId"),"allowSolicitation",context.get("allowSolicitation"),"extension",context.get("extension"))));  }  if ("POSTAL_ADDRESS".equals(contactMechTypeId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_createContactMech_not_be_used_for_POSTAL_ADDRESS",locale));  } else   if ("TELECOM_NUMBER".equals(contactMechTypeId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_createContactMech_not_be_used_for_TELECOM_NUMBER",locale));  } else {    tempContactMech.set("infoString",context.get("infoString"));  }  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("contactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public PredictiveInfoCalculatorKernel() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(MI_CALCULATOR_KERNEL);}  }
class C{  public JDBCPieDataset(Connection con){  if (con == null) {    throw new NullPointerException("A connection must be supplied.");  }  this.connection=con;}  }
class C{  public static void waitForBridgeAndUIIdle(ReactBridgeIdleSignaler idleSignaler,final ReactContext reactContext,long timeoutMs){  UiThreadUtil.assertNotOnUiThread();  long startTime=SystemClock.uptimeMillis();  waitInner(idleSignaler,timeoutMs);  long timeToWait=Math.max(1,timeoutMs - (SystemClock.uptimeMillis() - startTime));  waitForChoreographer(timeToWait);  waitForJSIdle(reactContext);  timeToWait=Math.max(1,timeoutMs - (SystemClock.uptimeMillis() - startTime));  waitInner(idleSignaler,timeToWait);  timeToWait=Math.max(1,timeoutMs - (SystemClock.uptimeMillis() - startTime));  waitForChoreographer(timeToWait);}  }
class C{  public boolean removeArgument(String arg){  return arguments.remove(arg);}  }
class C{  public ListIterator listIterator(int index){  if (index < 0 || index > count) {    throw new IndexOutOfBoundsException("Index: " + index);  }  return new ListItr(index);}  }
class C{  public FondoVO guardarFondo(FondoVO fondo,int tipoEntidad,String idDescriptorEntidadProductora) throws ActionNotAllowedException {  iniciarTransaccion();  EntidadProductoraVO entidadProductora=new EntidadProductoraVO();  entidadProductora.setTipoentidad(tipoEntidad);  DescriptorVO descriptorEntidadProductora=_descriptorDbEntity.getDescriptor(idDescriptorEntidadProductora);  try {    BeanUtils.copyProperties(entidadProductora,descriptorEntidadProductora);    entidadProductora.setCodigo(fondo.getCodigo());  } catch (  IllegalAccessException iae) {    throw new ArchivoModelException(iae,"crearFondo()","Error creando entidad productora");  }catch (  InvocationTargetException ite) {    throw new ArchivoModelException(ite,"crearFondo()","Error creando entidad productora");  }  FondoVO returnValue=fondo;  if (StringUtils.isNotBlank(fondo.getId()))   returnValue=updateFondo(fondo,entidadProductora); else   returnValue=crearFondo(fondo,entidadProductora);  commit();  return returnValue;}  }
class C{  @Override public void addKeyToDeletedObjectsList(Object object,Map deletedObjects){}  }
class C{  private void ensureCapacity(int minCapacity){  if (minCapacity - buf.length > 0)   grow(minCapacity);}  }
class C{  public int xToLonE7(float x){  return GeoMath.xToLonE7(map.getWidth(),viewBox,x);}  }
class C{  static synchronized void addToCurrentMacro(String id,String actionCommand){  currentMacro.addMacroRecord(new Macro.MacroRecord(id,actionCommand));}  }
class C{  @SuppressWarnings("unchecked") public static <D,T extends D>Class<T> uglyCastIntoSubclass(Class<D> cls){  return (Class<T>)cls;}  }
class C{  public ViewPropertyAnimator x(float value){  animateProperty(X,value);  return this;}  }
class C{  int referenceKind(){  return LambdaToMethod.this.referenceKind(needsBridge() ? bridgeSym : tree.sym);}  }
class C{  private void assertStartsAt(int expected,QueryResponse rsp){  assertEquals(expected,extractDocList(rsp).getStart());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public HtmlCode removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private Map<String,Set<StoragePort>> removeStoragePortSets(Set<String> removalKeys,Map<String,Set<StoragePort>> oldMap){  HashMap<String,Set<StoragePort>> newMap=new HashMap<String,Set<StoragePort>>();  newMap.putAll(oldMap);  for (  String key : removalKeys) {    newMap.remove(key);  }  return newMap;}  }
class C{  public void reset(){  super.reset();  if (null != m_firstWalker) {    m_lastUsedWalker=m_firstWalker;    m_firstWalker.setRoot(m_context);  }}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset,boolean includeInterval){  if (dataset == null) {    return null;  }  Range result=super.findRangeBounds(dataset,includeInterval);  if (result != null) {    if (this.includeBaseInRange) {      result=Range.expandToInclude(result,this.base);    }  }  return result;}  }
class C{  public KerberosIdentityToken clone(){  KerberosIdentityToken result=new KerberosIdentityToken();  result.PolicyId=PolicyId;  result.TicketData=TicketData;  return result;}  }
class C{  public CircleView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  public String formatExportCmd(String dataMover,List<VNXFileExport> exports,Map<String,String> userInfo,String netBios){  if (exports.isEmpty()) {    _log.debug("There is no entry to export");    return null;  }  String mountPoint=entryPathsDiffer(exports);  if (mountPoint == null) {    _log.debug("Single ssh API command is being applied to multiple paths.");    return null;  }  String protocol=entryProtocolsDiffer(exports);  if (protocol == null) {    _log.debug("Single ssh API command is being applied to multiple protocols.");    return null;  }  StringBuilder options=new StringBuilder();  String result=null;  if (protocol.equalsIgnoreCase(VNX_CIFS)) {    result=formatCifsCmd(exports,netBios);  } else {    result=formatNfsCmd(exports,userInfo);  }  options.append(result);  options.append(" ");  StringBuilder cmd=new StringBuilder();  cmd.append(dataMover);  cmd.append(options.toString());  cmd.append(mountPoint);  return cmd.toString();}  }
class C{  @Ignore @Test public void testSetBaseURL() throws ParserConfigurationException, SAXException, MalformedURLException {  ConfigManager configManager=getConfigManager();  try {    URL baseURL2=new URL("http://1.1.1.1/ipt");    configManager.setBaseUrl(baseURL2);    fail();  } catch (  InvalidConfigException e) {  }  try {    URL baseURL2=new URL("http://www.gbif.org");    configManager.setBaseUrl(baseURL2);    fail();  } catch (  InvalidConfigException e) {  }  URL baseURL=new URL("http://ipt.gbif.org");  configManager.setBaseUrl(baseURL);  assertEquals(baseURL.toString(),appConfig.getProperty(AppConfig.BASEURL));}  }
class C{  void internalAddRootEntry(ProjectComparisonEntry entry){  entries.add(entry);}  }
class C{  public String toPlainString(){  return PLAIN_FORMAT.format(this).toString();}  }
class C{  public int lengthDigest(){  return this.length(Constants.SignatureSpec11NS,Constants._TAG_X509DIGEST);}  }
class C{  private ArrayList<String> splitValues(ArrayList<String> values,PresetItem preset,String key){  ArrayList<String> result=new ArrayList<String>();  String delimiter=Matcher.quoteReplacement("\\Q" + preset.getDelimiter(key) + "\\E");  if (values == null) {    return null;  }  for (  String v : values) {    if (v == null) {      return null;    }    for (    String s : v.split(delimiter)) {      result.add(s.trim());    }  }  return result;}  }
class C{  public void fakeSignatures() throws SignatureFakingException {  try {    createFakedCertificates();    for (int i=0; i < signatureValueElements.size(); i++) {      fakeSignature(i);    }  } catch (  CertificateHandlerException e) {    throw new SignatureFakingException(e);  }}  }
class C{  @Override public void registerForEvents(){  if (subscriptions == null)   subscriptions=new CompositeSubscription();  if (!subscriptions.isUnsubscribed()) {    if (homeWrapperSubscription != null) {      subscriptions.add(homeWrapperSubscription);    }  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public PreparedStatementHolder(String key,PreparedStatement preparedStatement,String query){  this.key=key;  this.preparedStatement=preparedStatement;  this.query=query;}  }
class C{  public void addInvitationListener(InvitationListener listener){synchronized (invitationsListeners) {    if (invitationsListeners.size() == 0) {      init();    }    if (!invitationsListeners.contains(listener)) {      invitationsListeners.add(listener);    }  }}  }
class C{  public Node parseText(String text) throws IOException, SAXException {  return parse(new StringReader(text));}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,DERTaggedObject externalData){  this(directReference,indirectReference,dataValueDescriptor,externalData.getTagNo(),externalData.toASN1Primitive());}  }
class C{  @Override public String toString(){  return getClass().getName() + "[value=" + value+ ']';}  }
class C{  public boolean isGenLookAction(){  return kind == GENERAL_LOOK;}  }
class C{  public ExecutionRegion basicGetRegion(){  return region;}  }
class C{  public boolean isNetworkTypeWifi(){  if (checkPermissions("android.permission.INTERNET")) {    ConnectivityManager cManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo info=cManager.getActiveNetworkInfo();    if (info != null && info.isAvailable() && info.getTypeName().equals("WIFI")) {      return true;    } else {      Ln.e("error","Network not wifi");      return false;    }  } else {    Ln.e(" lost  permission","lost----> android.permission.INTERNET");    return false;  }}  }
class C{  private void initialize(){  if (isInitialized)   throw new IllegalStateException("may invoke method initialize() only once");  isInitialized=true;  final IExtensionRegistry registry=RegistryFactory.getRegistry();  if (registry != null) {    final IConfigurationElement[] configElems=registry.getConfigurationElementsFor(RUNNERS_EXTENSION_POINT_ID);    for (    IConfigurationElement elem : configElems) {      try {        final EclipseRunnerDescriptor descriptor=new EclipseRunnerDescriptor(elem);        injector.injectMembers(descriptor);        register(descriptor);      } catch (      Exception ex) {        log.error("Error while reading extensions for extension point " + RUNNERS_EXTENSION_POINT_ID,ex);      }    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String u1(int v){  char[] result=new char[2];  for (int i=0; i < 2; i++) {    result[1 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public static Node selectSingleNode(Node contextNode,String str,Node namespaceNode) throws TransformerException {  NodeIterator nl=selectNodeIterator(contextNode,str,namespaceNode);  return nl.nextNode();}  }
class C{  public void error(Object message,Throwable exception){  log(Level.SEVERE,String.valueOf(message),exception);}  }
class C{  public Socket connect(InetAddress inetadd,int port,int timeout,ConnectionWatcher optionalWatcher,boolean clientSide,int socketBufferSize,boolean sslConnection) throws IOException {  Socket socket=null;  SocketAddress sockaddr=new InetSocketAddress(inetadd,port);  printConfig();  try {    if (sslConnection) {      if (this.sslContext == null) {        throw new GemFireConfigException("SSL not configured correctly, Please look at previous error");      }      SocketFactory sf=this.sslContext.getSocketFactory();      socket=sf.createSocket();      socket.setKeepAlive(ENABLE_TCP_KEEP_ALIVE);      if (socketBufferSize != -1) {        socket.setReceiveBufferSize(socketBufferSize);      }      if (optionalWatcher != null) {        optionalWatcher.beforeConnect(socket);      }      socket.connect(sockaddr,Math.max(timeout,0));      configureClientSSLSocket(socket);      return socket;    } else {      if (clientSide && this.clientSocketFactory != null) {        socket=this.clientSocketFactory.createSocket(inetadd,port);      } else {        socket=new Socket();        socket.setKeepAlive(ENABLE_TCP_KEEP_ALIVE);        if (socketBufferSize != -1) {          socket.setReceiveBufferSize(socketBufferSize);        }        if (optionalWatcher != null) {          optionalWatcher.beforeConnect(socket);        }        socket.connect(sockaddr,Math.max(timeout,0));      }      return socket;    }  }  finally {    if (optionalWatcher != null) {      optionalWatcher.afterConnect(socket);    }  }}  }
class C{  protected void handleDeleteCompletion(Operation op){  op.nestCompletion(null);  handleStop(op);}  }
class C{  public boolean isNodeBlacklisted(final Node node){  return this.isNodeStatusMatching(node,BLACKLIST_NODE_STATUSES);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  boolean doesOccur(QName refName){  return m_refs.contains(refName);}  }
class C{  public static void initStatic(Class genClass){  startInterpreterForClass(genClass);}  }
class C{  public boolean isAllowedToInviteParticipant(ContactId participant) throws RcsPersistentStorageException, RcsGenericException {  try {    return mGroupChatInf.isAllowedToInviteParticipant(participant);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private void doAcquireShared(int arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private synchronized void mergeChild(CharsToNameCanonicalizer child){  if (child.size() > MAX_ENTRIES_FOR_REUSE) {    initTables(DEFAULT_TABLE_SIZE);  } else {    if (child.size() <= size()) {      return;    }    _symbols=child._symbols;    _buckets=child._buckets;    _size=child._size;    _sizeThreshold=child._sizeThreshold;    _indexMask=child._indexMask;  }  _dirty=false;}  }
class C{  void selectType(Environment env,Context ctx,int tm){  if (left.type == Type.tLong) {    type=Type.tLong;  } else   if (left.type.inMask(TM_INTEGER)) {    type=Type.tInt;    left=convert(env,ctx,type,left);  } else {    type=Type.tError;  }  if (right.type.inMask(TM_INTEGER)) {    right=new ConvertExpression(where,Type.tInt,right);  } else {    right=convert(env,ctx,Type.tInt,right);  }}  }
class C{  public void testDisablePhrase(){  Query expected=new TermQuery(new Term("field","\"test\""));  assertEquals(expected,parseKeyword("\"test\"",~PHRASE_OPERATOR));}  }
class C{  public static Collection<Handler> addJavaNoOpLogger(){  Collection<Handler> savedHnds=new ArrayList<>();  Logger log=Logger.getLogger("");  for (  Handler h : log.getHandlers()) {    log.removeHandler(h);    savedHnds.add(h);  }  ConsoleHandler hnd=new ConsoleHandler();  hnd.setLevel(Level.OFF);  log.addHandler(hnd);  return savedHnds;}  }
class C{  public CBreakpointImage(final Color backgroundColor,final Color breakpointColor){  super(16,16,BufferedImage.TYPE_INT_RGB);  Preconditions.checkNotNull(backgroundColor,"IE02021: Background color argument can not be null");  Preconditions.checkNotNull(breakpointColor,"IE02022: Breakpoint color argument can not be null");  final Graphics2D g2d=createGraphics();  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2d.setStroke(DEFAULT_STROKE);  g2d.setColor(backgroundColor);  g2d.fillRect(0,0,getHeight(),getWidth());  g2d.setColor(breakpointColor);  g2d.fillOval(4,4,8,8);  g2d.setColor(Color.BLACK);  g2d.drawOval(4,4,8,8);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Signature copy() throws Exception {  Signature signature=new Signature(this);  for (  Parameter parameter : this) {    signature.add(parameter);  }  return signature;}  }
class C{  private void initComputeProgram(){  glUseProgram(computeProgram);  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  eyeUniform=glGetUniformLocation(computeProgram,"eye");  ray00Uniform=glGetUniformLocation(computeProgram,"ray00");  ray10Uniform=glGetUniformLocation(computeProgram,"ray10");  ray01Uniform=glGetUniformLocation(computeProgram,"ray01");  ray11Uniform=glGetUniformLocation(computeProgram,"ray11");  timeUniform=glGetUniformLocation(computeProgram,"time");  blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor");  bounceCountUniform=glGetUniformLocation(computeProgram,"bounceCount");  IntBuffer params=BufferUtils.createIntBuffer(1);  int loc=glGetUniformLocation(computeProgram,"framebufferImage");  glGetUniformiv(computeProgram,loc,params);  framebufferImageBinding=params.get(0);  glUseProgram(0);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.POINT;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XML","1.0");  assertTrue("throw_True",state);}  }
class C{  private static boolean isDigit(char p_char){  return p_char >= '0' && p_char <= '9';}  }
class C{  public void copyConfigDir(String fromConfig,String toConfig) throws IOException {  copyConfigDir(CONFIGS_ZKNODE + "/" + fromConfig,CONFIGS_ZKNODE + "/" + toConfig,null);}  }
class C{  public PowerlineMenu(SerialSystemConnectionMemo memo){  super();  ResourceBundle rb=ResourceBundle.getBundle("jmri.jmrix.powerline.SystemBundle");  if (memo == null) {    new Exception().printStackTrace();    return;  }  setText(memo.getUserName());  jmri.util.swing.WindowInterface wi=new jmri.util.swing.sdi.JmriJFrameInterface();  for (  Item item : panelItems) {    if (item == null) {      add(new javax.swing.JSeparator());    } else {      PowerlineNamedPaneAction a=new PowerlineNamedPaneAction(rb.getString(item.name),wi,item.load,memo);      add(a);      a.setEnabled(item.enable.equals(ALL));    }  }  setEnabled(memo.getTrafficController() != null);  add(new javax.swing.JSeparator());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.380 -0500",hash_original_method="A84A980EFFBE26E04B3C2E4EFBE3FAD0",hash_generated_method="3FF522729320B6BF649625F844AC9520") public HCSparseArray(int initialCapacity){  initialCapacity=idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  public ObserveRelationContainer(){  this.observeRelations=new ConcurrentHashMap<String,ObserveRelation>();}  }
class C{  public IgniteTxHeuristicCheckedException(String msg){  super(msg);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicSpinnerUI();}  }
class C{  public ActionMode startActionMode(ActionMode.Callback callback){  return mWindow.getDecorView().startActionMode(callback);}  }
class C{  public synchronized void removeGraphListener(GraphListener cl){  m_graphListeners.remove(cl);}  }
class C{  public NecroStaff(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public void put(Buffer buffer){  if (buffer.getLength() <= 2) {    return;  }  byte[] currentRtpPacketData=((byte[])buffer.getData());  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);  if (h264RtpHeaders.getFUI_F()) {    return;  }  if (reassembledData == null) {    timeStamp=buffer.getTimeStamp();    format=buffer.getFormat();    seqNumber=buffer.getSequenceNumber();    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];    reassembledDataHasStart=false;    reassembledDataHasEnd=false;  }  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);  int payloadStartPosition=h264RtpHeaders.getHeaderSize();  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);  }  reassembledDataSize[posSeq]=payloadLength;  reassembledDataFullSize+=payloadLength;  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);  videoOrientation=buffer.getVideoOrientation();}  }
class C{  public boolean isReactive(){  for (  Mounted equip : getMisc()) {    if (equip.getType().hasFlag(MiscType.F_REACTIVE)) {      return true;    }  }  return false;}  }
class C{  private void dynInit(){  pickFormat.addItem(s_none);  String sql=MRole.getDefault().addAccessSQL("SELECT Name FROM AD_ImpFormat","AD_ImpFormat",MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO);  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next())     pickFormat.addItem(rs.getString(1));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  pickFormat.setSelectedIndex(0);  pickFormat.addActionListener(this);  fCharset.setSelectedItem(Ini.getCharset());  fCharset.addActionListener(this);  confirmPanel.getOKButton().setEnabled(false);}  }
class C{  public boolean shouldSelectCell(EventObject event){  return realEditor.shouldSelectCell(event);}  }
class C{  public DateMidnight withMinimumValue(){  return setCopy(getMinimumValue());}  }
class C{  public static void main(String[] args){  Matrix[] data=CSVtoMatrix.load("../machinelearning/src/machinelearning/gaussianprocess/armdata.csv",6,1);}  }
class C{  public double nextDouble(){  return nextDouble(this.mean,this.standardDeviation);}  }
class C{  @Override protected AxisState drawTickMarksAndLabels(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge){  this.internalMarkerWhenTicksOverlap=false;  AxisState ret=super.drawTickMarksAndLabels(g2,cursor,plotArea,dataArea,edge);  if (!this.internalMarkerWhenTicksOverlap) {    return ret;  }  double ol;  FontMetrics fm=g2.getFontMetrics(getTickLabelFont());  if (isVerticalTickLabels()) {    ol=fm.getMaxAdvance();  } else {    ol=fm.getHeight();  }  double il=0;  if (isTickMarksVisible()) {    float xx=(float)valueToJava2D(getRange().getUpperBound(),dataArea,edge);    Line2D mark=null;    g2.setStroke(getTickMarkStroke());    g2.setPaint(getTickMarkPaint());    if (edge == RectangleEdge.LEFT) {      mark=new Line2D.Double(cursor - ol,xx,cursor + il,xx);    } else     if (edge == RectangleEdge.RIGHT) {      mark=new Line2D.Double(cursor + ol,xx,cursor - il,xx);    } else     if (edge == RectangleEdge.TOP) {      mark=new Line2D.Double(xx,cursor - ol,xx,cursor + il);    } else     if (edge == RectangleEdge.BOTTOM) {      mark=new Line2D.Double(xx,cursor + ol,xx,cursor - il);    }    g2.draw(mark);  }  return ret;}  }
class C{  public Builder penaltyDialog(){  return enable(PENALTY_DIALOG);}  }
class C{  @SideEffectFree public void throwing(@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable Throwable thrown){  throw new RuntimeException();}  }
class C{  public Property monthOfYear(){  return new Property(this,getChronology().monthOfYear());}  }
class C{  public void smulh(int size,Register dst,Register src1,Register src2){  assert size == 32 || size == 64;  if (size == 64) {    super.smulh(dst,src1,src2);  } else {    super.smaddl(dst,src1,src2,zr);    lshr(64,dst,dst,32);  }}  }
class C{  public boolean isNonPKIdentityColumnsSupported(){  return nonPKIdentityColumnsSupported;}  }
class C{  public ReflectiveOperationException(Throwable cause){  super(cause);}  }
class C{  protected SpaceEffGraphEdge(SpaceEffGraphNode fromNode,SpaceEffGraphNode toNode){  _toNode=toNode;  _fromNode=fromNode;}  }
class C{  @Nullable public static byte[] serialize(@Nullable Object value){  if (value == null) {    return null;  }  ByteArrayOutputStream objectBytes=new ByteArrayOutputStream();  try (ObjectOutputStream oos=new ObjectOutputStream(objectBytes)){    oos.writeObject(value);  } catch (  IOException e) {    throw new IllegalArgumentException("Unable to serialize: " + value,e);  }  return objectBytes.toByteArray();}  }
class C{  @Override public ArrayNode createArrayNode(){  return _deserializationConfig.getNodeFactory().arrayNode();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:31.271 -0500",hash_original_method="6E38B18258B92FBBE9034AE151B9B0E7",hash_generated_method="38923C15994EF8EE04FB0B3ECEB1DFC6") private boolean checkMetadataId(final int val){  if (val <= ANY || (LAST_SYSTEM < val && val < FIRST_CUSTOM)) {    Log.e(TAG,"Invalid metadata ID " + val);    return false;  }  return true;}  }
class C{  public static Properties removeEmptyValue(Properties properties){  if (properties == null) {    return properties;  }  Enumeration<Object> keys=properties.keys();  while (keys.hasMoreElements()) {    String key=keys.nextElement().toString();    if (properties.getProperty(key) == null || properties.getProperty(key).trim().length() < 1) {      properties.remove(key);    }  }  return properties;}  }
class C{  void invalidate(){  this.valid=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.832 -0500",hash_original_method="42CA0EB350D1B07EC08DFD981A2476E6",hash_generated_method="4BF352DA354F27A8224D77D655FC3EE8") public boolean before(Time that){  return Time.compare(this,that) < 0;}  }
class C{  public SmsPdu(){}  }
class C{  @Override public SelectableChannel selectableChannel(){  if (_s != null) {    return _s.getChannel();  } else {    return null;  }}  }
class C{  private static boolean mightInheritFromException(ClassDescriptor d){  while (d != null) {    try {      if ("java.lang.Exception".equals(d.getDottedClassName())) {        return true;      }      XClass classNameAndInfo=Global.getAnalysisCache().getClassAnalysis(XClass.class,d);      d=classNameAndInfo.getSuperclassDescriptor();    } catch (    CheckedAnalysisException e) {      return true;    }  }  return false;}  }
class C{  @Override public String toString(String field){  StringBuilder buffer=new StringBuilder();  if (!term.field().equals(field)) {    buffer.append(term.field());    buffer.append(":");  }  buffer.append('/');  buffer.append(term.text());  buffer.append('/');  return buffer.toString();}  }
class C{  public static void main(String[] args){  try {    Stemming.useStemmer(new NullStemmer(),args);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean hasScore(){  return score != null;}  }
class C{  public InsertContact secondaryPhoneType(int secondaryPhoneType){  mIntent.putExtra(Insert.SECONDARY_PHONE_TYPE,secondaryPhoneType);  return this;}  }
class C{  private boolean isStyleApplied(int style){  return (selectionStyle & style) != 0;}  }
class C{  public static String toCodeString(Object value){  if (value == null) {    return "null";  }  Type valueType=Type.forClass(value.getClass());  assert TypedOperation.isNonreceiverType(valueType) : "expecting nonreceiver type, have " + valueType;  if (valueType.isString()) {    String escaped=StringEscapeUtils.escapeJava(value.toString());    if (escaped.length() > GenInputsAbstract.string_maxlen) {      throw new Error("String too long, length = " + escaped.length());    }    return "\"" + escaped + "\"";  }  if (valueType.getRuntimeClass().equals(Class.class)) {    return ((Class<?>)value).getName() + ".class";  }  if (valueType.isBoxedPrimitive()) {    valueType=((NonParameterizedType)valueType).toPrimitive();  }  if (valueType.equals(JavaTypes.CHAR_TYPE)) {    if (value.equals(' ')) {      return "' '";    }    return "\'" + StringEscapeUtils.escapeJavaStyleString(value.toString(),true) + "\'";  }  if (valueType.equals(JavaTypes.BOOLEAN_TYPE)) {    return value.toString();  }  String rep;  if (valueType.equals(JavaTypes.DOUBLE_TYPE)) {    Double d=(Double)value;    if (d.isNaN()) {      return "Double.NaN";    } else     if (d.equals(Double.POSITIVE_INFINITY)) {      return "Double.POSITIVE_INFINITY";    } else     if (d.equals(Double.NEGATIVE_INFINITY)) {      return "Double.NEGATIVE_INFINITY";    }    rep=d.toString();    assert rep != null;    rep=rep + "d";  } else   if (valueType.equals(JavaTypes.FLOAT_TYPE)) {    Float f=(Float)value;    if (f.isNaN()) {      return "Float.NaN";    } else     if (f.equals(Float.POSITIVE_INFINITY)) {      return "Float.POSITIVE_INFINITY";    } else     if (f == Float.NEGATIVE_INFINITY) {      return "Float.NEGATIVE_INFINITY";    }    rep=f.toString();    assert rep != null;    rep=rep + "f";  } else   if (valueType.equals(JavaTypes.LONG_TYPE)) {    rep=value.toString() + "L";  } else   if (valueType.equals(JavaTypes.BYTE_TYPE)) {    rep="(byte)" + value.toString();  } else   if (valueType.equals(JavaTypes.SHORT_TYPE)) {    rep="(short)" + value.toString();  } else   if (valueType.equals(JavaTypes.INT_TYPE)) {    rep=value.toString();  } else {    throw new BugInRandoopException("type should be a nonreceiver type: " + valueType);  }  if (rep.charAt(0) == '-') {    rep="(" + rep + ")";  }  return rep;}  }
class C{  public final void testWriteReplace() throws Exception {  MyCertificate c1=new MyCertificate("TEST_TYPE",testEncoding);  Object obj=c1.writeReplace();  assertTrue(obj.toString().contains("java.security.cert.Certificate$CertificateRep"));}  }
class C{  public void test_compressed_timestamp_01d() throws Exception {  new TestHelper("compressed-timestamp-01d","compressed-timestamp-01d.rq","compressed-timestamp.ttl","compressed-timestamp-01.srx").runTest();}  }
class C{  void postCloneNodeEvent(ASTNode node,ASTNode clone){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.postCloneNodeEvent(node,clone);  }  finally {    reenableEvents();  }}  }
class C{  @Override protected void init() throws ConfigurationException, LoggingException {  this.sqlEncoder=new TimedSQLEncoder(logger);  super.sqlEncoder=this.sqlEncoder;}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  @Transient public boolean isOpen(){  if (this.equals(this.getContract().getTradePosition())) {    return true;  }  return false;}  }
class C{  public static _ProjectState fromString(final String value) throws SOAPSerializationException {  return (_ProjectState)Enumeration.fromString(value,_ProjectState.VALUES_TO_INSTANCES);}  }
class C{  public static double[] merge(double[]... x){  int[] xlength_array=new int[x.length];  xlength_array[0]=x[0].length;  for (int i=1; i < x.length; i++)   xlength_array[i]=x[i].length + xlength_array[i - 1];  double[] array=new double[xlength_array[x.length - 1]];  System.arraycopy(x[0],0,array,0,x[0].length);  for (int i=1; i < x.length; i++)   System.arraycopy(x[i],0,array,xlength_array[i - 1],x[i].length);  return array;}  }
class C{  public void changeUser(String userName,String newPassword) throws SQLException {synchronized (getConnectionMutex()) {    checkClosed();    if ((userName == null) || userName.equals("")) {      userName="";    }    if (newPassword == null) {      newPassword="";    }    this.sessionMaxRows=-1;    try {      this.io.changeUser(userName,newPassword,this.database);    } catch (    SQLException ex) {      if (versionMeetsMinimum(5,6,13) && "28000".equals(ex.getSQLState())) {        cleanup(ex);      }      throw ex;    }    this.user=userName;    this.password=newPassword;    if (versionMeetsMinimum(4,1,0)) {      configureClientCharacterSet(true);    }    setSessionVariables();    setupServerForTruncationChecks();  }}  }
class C{  public Complex reciprocal(){  double scale=re * re + im * im;  return new Complex(re / scale,-im / scale);}  }
class C{  private void restoreAutoNumbersFromAdd(Object[] row) throws IOException {  if (_autoNumColumns.isEmpty()) {    return;  }  for (  ColumnImpl col : _autoNumColumns) {    col.getAutoNumberGenerator().restoreLast(col.getRowValue(row));  }}  }
class C{  public Iterator<PDGNode> iterator(){  return new ChildPDGFlowIterator(this.m_nodes);}  }
class C{  public static void reset(){  clockTime=0;}  }
class C{  void close(){  for (  RandomAccessFile raf : rafs)   U.closeQuiet(raf);}  }
class C{  public static AffineTransformation rotationInstance(double theta){  return rotationInstance(Math.sin(theta),Math.cos(theta));}  }
class C{  void put(String key,Object value){  map.put(key,value);}  }
class C{  protected void processPingRequest(SimEvent ev){  InfoPacket pkt=(InfoPacket)ev.getData();  pkt.setTag(CloudSimTags.INFOPKT_RETURN);  pkt.setDestId(pkt.getSrcId());  sendNow(pkt.getSrcId(),CloudSimTags.INFOPKT_RETURN,pkt);}  }
class C{  public TransactionRollbackException(String msg){  super(msg);}  }
class C{  public KMLGroundOverlay(String namespaceURI){  super(namespaceURI);}  }
class C{  @Override protected void importModuleInternal(final String idbFile,final String idaDirectory,final IDatabase database) throws ConfigFileException, IdaException, ExporterException {  CImporterManager.instance().startImporting(database,idbFile);  try {    int exitCode=0;    do {      final String host=getHost(database.getConfiguration().getHost());      final int port=getPort(database.getConfiguration().getHost());      final String user=database.getConfiguration().getUser();      final String password=database.getConfiguration().getPassword();      final String name=database.getConfiguration().getName();      final Process processInfo=createIdaProcess(idaDirectory + File.separatorChar + (idbFile.endsWith("idb") ? IdaHelpers.IDA32_EXECUTABLE : IdaHelpers.IDA64_EXECUTABLE),idbFile,host,port,user,password,name);      try {        exitCode=processInfo.waitFor();        handleExitCode(exitCode);      } catch (      final InterruptedException e) {        CUtilityFunctions.logException(e);        Thread.currentThread().interrupt();      }    } while ((exitCode & 0xFE) == 0xFE);  }  finally {    CImporterManager.instance().finishImporting(database,idbFile);  }}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public UserObject(){  super();}  }
class C{  @Override public void modifiedAdded(final RPObject changes){}  }
class C{  public static void shutdown(){  if (InfoBox != null)   InfoBox.setText("waiting for shutdown process to complete ...");  shallrun=false;}  }
class C{  void handleOneConnection(ServerSocket ss,AtomicBoolean stop,InputStream is,Socket socket,DataInput in,DataOutput out,BufferedOutputStream bos) throws IOException, InterruptedException {  outer:   while (true) {    byte cmd;    while (true) {      if (is.available() > 0) {        break;      }      if (stop.get()) {        return;      }      Thread.sleep(10);    }    try {      cmd=in.readByte();    } catch (    EOFException eofe) {      break;    }switch (cmd) {case CMD_NEW_NRT_POINT:{        long version=in.readVLong();        long newPrimaryGen=in.readVLong();        Thread.currentThread().setName("recv-" + version);        curPrimaryTCPPort=in.readInt();        message("newNRTPoint primaryTCPPort=" + curPrimaryTCPPort + " version="+ version+ " newPrimaryGen="+ newPrimaryGen);        newNRTPoint(newPrimaryGen,version);      }    break;case SimplePrimaryNode.CMD_GET_SEARCHING_VERSION:  if (isCopying()) {    message("top: getSearchingVersion: now wait for finish sync");    while (isCopying() && stop.get() == false) {      Thread.sleep(10);      message("top: curNRTCopy=" + curNRTCopy);    }    message("top: getSearchingVersion: done wait for finish sync");  }if (stop.get() == false) {  out.writeVLong(getCurrentSearchingVersion());} else {  message("top: getSearchingVersion: stop waiting for finish sync: stop is set");}break;case SimplePrimaryNode.CMD_SEARCH:{Thread.currentThread().setName("search");IndexSearcher searcher=mgr.acquire();try {long version=((DirectoryReader)searcher.getIndexReader()).getVersion();int hitCount=searcher.search(new TermQuery(new Term("body","the")),1).totalHits;out.writeVLong(version);out.writeVInt(hitCount);bos.flush();}  finally {mgr.release(searcher);}}continue outer;case SimplePrimaryNode.CMD_SEARCH_ALL:{Thread.currentThread().setName("search all");IndexSearcher searcher=mgr.acquire();try {long version=((DirectoryReader)searcher.getIndexReader()).getVersion();int hitCount=searcher.search(new MatchAllDocsQuery(),1).totalHits;out.writeVLong(version);out.writeVInt(hitCount);bos.flush();}  finally {mgr.release(searcher);}}continue outer;case SimplePrimaryNode.CMD_MARKER_SEARCH:{Thread.currentThread().setName("msearch");int expectedAtLeastCount=in.readVInt();IndexSearcher searcher=mgr.acquire();try {long version=((DirectoryReader)searcher.getIndexReader()).getVersion();int hitCount=searcher.count(new TermQuery(new Term("marker","marker")));if (hitCount < expectedAtLeastCount) {message("marker search: expectedAtLeastCount=" + expectedAtLeastCount + " but hitCount="+ hitCount);TopDocs hits=searcher.search(new TermQuery(new Term("marker","marker")),expectedAtLeastCount);List<Integer> seen=new ArrayList<>();for (ScoreDoc hit : hits.scoreDocs) {Document doc=searcher.doc(hit.doc);seen.add(Integer.parseInt(doc.get("docid").substring(1)));}Collections.sort(seen);message("saw markers:");for (int marker : seen) {message("saw m" + marker);}}out.writeVLong(version);out.writeVInt(hitCount);bos.flush();}  finally {mgr.release(searcher);}}continue outer;case SimplePrimaryNode.CMD_COMMIT:Thread.currentThread().setName("commit");commit();out.writeByte((byte)1);break;case SimplePrimaryNode.CMD_CLOSE:Thread.currentThread().setName("close");ss.close();out.writeByte((byte)1);break outer;case CMD_PRE_COPY_MERGE:Thread.currentThread().setName("merge copy");long newPrimaryGen=in.readVLong();curPrimaryTCPPort=in.readVInt();Map<String,FileMetaData> files=SimpleServer.readFilesMetaData(in);message("done reading files to copy files=" + files.keySet());AtomicBoolean finished=new AtomicBoolean();CopyJob job=launchPreCopyMerge(finished,newPrimaryGen,files);message("done launching copy job files=" + files.keySet());boolean success=false;try {int count=0;while (true) {if (finished.get() || stop.get()) {break;}Thread.sleep(10);count++;if (count == 100) {message("send merge pre copy keep alive... files=" + files.keySet());if (random.nextBoolean()) {out.writeByte((byte)0);count=0;}}}out.writeByte((byte)1);bos.flush();success=true;}  finally {message("done merge copy files=" + files.keySet() + " success="+ success);}break;default :throw new IllegalArgumentException("unrecognized cmd=" + cmd);}bos.flush();break;}}  }
class C{  public VMCAClient(String username,String domain,String password,String server_name){  _username=username;  _domain=domain;  _password=password;  _serverName=server_name;  setEnumFilter(certFilters.ACTIVE_CERTIFICATES);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  @Override protected void testInputFormat(Instances instanceInfo) throws Exception {  getCapabilities(instanceInfo).testWithFail(removeIgnored(instanceInfo));}  }
class C{  public Socket sendBytes(InetAddress senderAddress,InetAddress receiverAddress,int contactPort,String transport,SIPMessage message,boolean retry,MessageChannel messageChannel) throws IOException {  int retry_count=0;  int max_retry=retry ? 2 : 1;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("sendBytes " + transport + " inAddr "+ receiverAddress.getHostAddress()+ " port = "+ contactPort);  }  if (sipStack.isLoggingEnabled() && sipStack.isLogStackTraceOnMessageSend()) {    sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);  }  if (transport.compareToIgnoreCase(TCP) == 0) {    String key=makeKey(receiverAddress,contactPort);    try {      boolean retval=this.ioSemaphore.tryAcquire(10000,TimeUnit.MILLISECONDS);      if (!retval) {        throw new IOException("Could not acquire IO Semaphore after 10 seconds -- giving up ");      }    } catch (    InterruptedException ex) {      throw new IOException("exception in acquiring sem");    }    Socket clientSock=getSocket(key);    try {      while (retry_count < max_retry) {        if (clientSock == null) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logDebug("inaddr = " + receiverAddress);            sipStack.getStackLogger().logDebug("port = " + contactPort);          }          clientSock=sipStack.getNetworkLayer().createSocket(receiverAddress,contactPort,senderAddress);          OutputStream outputStream=clientSock.getOutputStream();          boolean doIssue34727workarround=false;          if (clientSock.getLocalPort() == 5060 || contactPort == 5060)           doIssue34727workarround=true;          updateViaHeaderPort(clientSock.getLocalPort(),clientSock.getLocalAddress(),message);          updateContactHeaderPort(clientSock.getLocalPort(),message);          byte[] bytes=message.encodeAsBytes(transport);          writeChunks(outputStream,bytes,bytes.length,doIssue34727workarround);          putSocket(key,clientSock);          break;        } else {          try {            OutputStream outputStream=clientSock.getOutputStream();            boolean doIssue34727workarround=false;            if (clientSock.getLocalPort() == 5060 || contactPort == 5060)             doIssue34727workarround=true;            updateViaHeaderPort(clientSock.getLocalPort(),clientSock.getLocalAddress(),message);            updateContactHeaderPort(clientSock.getLocalPort(),message);            byte[] bytes=message.encodeAsBytes(transport);            writeChunks(outputStream,bytes,bytes.length,doIssue34727workarround);            break;          } catch (          IOException ex) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logDebug("IOException occured retryCount " + retry_count);            removeSocket(key);            try {              clientSock.close();            } catch (            Exception e) {            }            clientSock=null;            retry_count++;          }        }      }    }  finally {      ioSemaphore.release();    }    if (clientSock == null) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug(this.socketTable.toString());        sipStack.getStackLogger().logError("Could not connect to " + receiverAddress + ":"+ contactPort);      }      throw new IOException("Could not connect to " + receiverAddress + ":"+ contactPort);    } else     return clientSock;  } else   if (transport.compareToIgnoreCase(TLS) == 0) {    String key=makeKey(receiverAddress,contactPort);    try {      boolean retval=this.ioSemaphore.tryAcquire(10000,TimeUnit.MILLISECONDS);      if (!retval)       throw new IOException("Timeout acquiring IO SEM");    } catch (    InterruptedException ex) {      throw new IOException("exception in acquiring sem");    }    Socket clientSock=getSocket(key);    try {      while (retry_count < max_retry) {        if (clientSock == null) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logDebug("inaddr = " + receiverAddress);            sipStack.getStackLogger().logDebug("port = " + contactPort);          }          clientSock=sipStack.getNetworkLayer().createSSLSocket(receiverAddress,contactPort,senderAddress);          SSLSocket sslsock=(SSLSocket)clientSock;          HandshakeCompletedListener listner=new HandshakeCompletedListenerImpl((TLSMessageChannel)messageChannel);          ((TLSMessageChannel)messageChannel).setHandshakeCompletedListener(listner);          sslsock.addHandshakeCompletedListener(listner);          sslsock.setEnabledProtocols(sipStack.getEnabledProtocols());          sslsock.startHandshake();          boolean doIssue34727workarround=false;          if (clientSock.getLocalPort() == 5060 || contactPort == 5060)           doIssue34727workarround=true;          OutputStream outputStream=clientSock.getOutputStream();          updateViaHeaderPort(clientSock.getLocalPort(),clientSock.getLocalAddress(),message);          updateContactHeaderPort(clientSock.getLocalPort(),message);          byte[] bytes=message.encodeAsBytes(transport);          writeChunks(outputStream,bytes,bytes.length,doIssue34727workarround);          putSocket(key,clientSock);          break;        } else {          try {            boolean doIssue34727workarround=false;            if (clientSock.getLocalPort() == 5060 || contactPort == 5060)             doIssue34727workarround=true;            OutputStream outputStream=clientSock.getOutputStream();            updateViaHeaderPort(clientSock.getLocalPort(),clientSock.getLocalAddress(),message);            updateContactHeaderPort(clientSock.getLocalPort(),message);            byte[] bytes=message.encodeAsBytes(transport);            writeChunks(outputStream,bytes,bytes.length,doIssue34727workarround);            break;          } catch (          IOException ex) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logException(ex);            removeSocket(key);            try {              clientSock.close();            } catch (            Exception e) {            }            clientSock=null;            retry_count++;          }        }      }    }  finally {      ioSemaphore.release();    }    if (clientSock == null) {      throw new IOException("Could not connect to " + receiverAddress + ":"+ contactPort);    } else     return clientSock;  } else {    DatagramSocket datagramSock=sipStack.getNetworkLayer().createDatagramSocket();    datagramSock.connect(receiverAddress,contactPort);    updateViaHeaderPort(datagramSock.getLocalPort(),datagramSock.getLocalAddress(),message);    updateContactHeaderPort(datagramSock.getLocalPort(),message);    byte[] bytes=message.encodeAsBytes(transport);    DatagramPacket dgPacket=new DatagramPacket(bytes,0,bytes.length,receiverAddress,contactPort);    datagramSock.send(dgPacket);    datagramSock.close();    return null;  }}  }
class C{  private static ListeningExecutorService createExecutorService(){  return MoreExecutors.listeningDecorator(Executors.newCachedThreadPool(new ThreadFactoryBuilder().setDaemon(true).build()));}  }
class C{  public static Label createLabel(Composite parent,String text,Font font,int hspan){  Label l=new Label(parent,SWT.NONE);  l.setFont(font);  l.setText(text);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  l.setLayoutData(gd);  return l;}  }
class C{  public static void sendMessage(HttpExchange httpExchange,Message message) throws IOException {  String response=new Gson().toJson(message);  httpExchange.sendResponseHeaders(200,response.length());  OutputStream os=httpExchange.getResponseBody();  os.write(response.getBytes());  os.close();}  }
class C{  public static void addRawClassPathEntry(IJavaProject javaProject,IClasspathEntry rawClasspathEntry) throws JavaModelException {  IClasspathEntry[] oldEntries=javaProject.getRawClasspath();  IProgressMonitor monitor=new NullProgressMonitor();  List<IClasspathEntry> newEntries=new ArrayList<IClasspathEntry>(Arrays.asList(oldEntries));  newEntries.add(rawClasspathEntry);  javaProject.setRawClasspath(newEntries.toArray(NO_ICLASSPATH_ENTRIES),monitor);}  }
class C{  @Override public final boolean toKeepaliveStart(){  KeepaliveState oldState;  KeepaliveState newState;  do {    oldState=_state.get();    if (oldState.isAvailable()) {      return false;    }    newState=oldState.toKeepalive();  } while (!_state.compareAndSet(oldState,newState));  return true;}  }
class C{  @Override protected void validate(){  failIf((this.value <= 0 || this.value > 1.0),"Ratio must be a float between 0 and 1");}  }
class C{  @Override public boolean loadWeapon(Mounted mounted,Mounted mountedAmmo){  boolean success=false;  WeaponType wtype=(WeaponType)mounted.getType();  AmmoType atype=(AmmoType)mountedAmmo.getType();  if (mounted.getLocation() != mountedAmmo.getLocation()) {    return success;  }  if (mountedAmmo.isAmmoUsable() && !wtype.hasFlag(WeaponType.F_ONESHOT) && (atype.getAmmoType() == wtype.getAmmoType())&& (atype.getRackSize() == wtype.getRackSize())) {    mounted.setLinked(mountedAmmo);    success=true;  }  return success;}  }
class C{  private void addToFiles(VirtualFile file){  add(file,true);}  }
class C{  public static Collection toCollection(Object o) throws PageException {  if (o instanceof Collection)   return (Collection)o; else   if (o instanceof Node)   return XMLCaster.toXMLStruct((Node)o,false); else   if (o instanceof Map) {    return MapAsStruct.toStruct((Map)o,true);  } else   if (o instanceof ObjectWrap) {    return toCollection(((ObjectWrap)o).getEmbededObject());  } else   if (Decision.isArray(o)) {    return toArray(o);  }  throw new CasterException(o,"collection");}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.PROJECT_DEPENDENCIES;}  }
class C{  public boolean containsWildcards(){  return false;}  }
class C{  public static org.oscm.internal.vo.VOPricedParameter convertToUp(org.oscm.vo.VOPricedParameter oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOPricedParameter newVO=new org.oscm.internal.vo.VOPricedParameter();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setVoParameterDef(convertToUp(oldVO.getVoParameterDef()));  newVO.setPricePerUser(oldVO.getPricePerUser());  newVO.setPricePerSubscription(oldVO.getPricePerSubscription());  newVO.setParameterKey(oldVO.getParameterKey());  newVO.setPricedOptions(convertToUpVOPricedOption(oldVO.getPricedOptions()));  newVO.setRoleSpecificUserPrices(convertToUpVOPricedRole(oldVO.getRoleSpecificUserPrices()));  newVO.setSteppedPrices(convertToUpVOSteppedPrice(oldVO.getSteppedPrices()));  return newVO;}  }
class C{  public boolean isGraphic(){switch (type) {case GRAPHIC:case BANNER:case FANART:case POSTER:case THUMB:case LOGO:case CLEARLOGO:case CLEARART:case SEASON_POSTER:case EXTRAFANART:case EXTRATHUMB:case DISCART:    return true;default :  return false;}}  }
class C{  public void parse(InputSource source) throws TransformerException {  try {    DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();    builderFactory.setNamespaceAware(true);    builderFactory.setValidating(true);    DocumentBuilder parser=builderFactory.newDocumentBuilder();    parser.setErrorHandler(new org.apache.xml.utils.DefaultErrorHandler());    setDocument(parser.parse(source));  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }catch (  ParserConfigurationException pce) {    throw new TransformerException(pce);  }catch (  IOException ioe) {    throw new TransformerException(ioe);  }}  }
class C{  public static int compareLong(long a,long b){  return a == b ? 0 : a < b ? -1 : 1;}  }
class C{  private static final void parseCmdLine(String[] args){  int i=0;  String arg;  while (i < args.length && args[i].startsWith("-")) {    arg=args[i++];    if (arg.equals("-s")) {      if (i < args.length) {        size=Integer.parseInt(args[i++]);      } else {        throw new Error("-l requires the number of levels");      }    } else     if (arg.equals("-m")) {      printMsgs=true;    } else     if (arg.equals("-p")) {      printResults=true;    } else     if (arg.equals("-h")) {      usage();    }  }  if (size == 0)   usage();}  }
class C{  public OptionsBuilder maxTokenLength(int maxTokenLength){  if (maxTokenLength < 1)   throw new IllegalArgumentException("maxTokenLength must be greater than zero");  this.maxTokenLength=maxTokenLength;  return this;}  }
class C{  protected Properties loadFromClassPath(String propertiesFile){  Properties properties=new Properties();  ClassLoader classLoader=this.getClass().getClassLoader();  try {    if (propertiesFile.startsWith("$generator")) {      propertiesFile=propertiesFile.substring("$generator.templatePath/".length());    }    InputStream inputStream=classLoader.getResourceAsStream(propertiesFile);    properties.load(inputStream);  } catch (  IOException ioe) {  }  return properties;}  }
class C{  private boolean typesMatch(Class<V> valueType,Class getterType){  if (getterType != valueType) {    if (getterType.isPrimitive()) {      return (getterType == float.class && valueType == Float.class) || (getterType == int.class && valueType == Integer.class) || (getterType == boolean.class && valueType == Boolean.class)|| (getterType == long.class && valueType == Long.class)|| (getterType == double.class && valueType == Double.class)|| (getterType == short.class && valueType == Short.class)|| (getterType == byte.class && valueType == Byte.class)|| (getterType == char.class && valueType == Character.class);    }    return false;  }  return true;}  }
class C{  @Override public void returnBrokenResource(final Jedis resource){  if (resource != null) {    returnBrokenResourceObject(resource);  }}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public void showMaskEffect(){  if (mImageMask != null) {    showMaskEffect(mImageMask.getEffect());  }}  }
class C{  public int yMin(){  return this.data.readShort(Offset.yMin.offset);}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  if (m_ZeroR != null) {    return m_ZeroR.distributionForInstance(instance);  }  return m_Distribution[whichSubset(instance)];}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  @Override protected void dispatchDraw(Canvas canvas){  super.dispatchDraw(canvas);  if (DEBUG) {    drawConnectorCenters(canvas);  }  drawHighlights(canvas);}  }
class C{  public static boolean validKey(String cacheName,Object key){  UtilCache<?,?> cache=findCache(cacheName);  if (cache != null) {    if (cache.containsKey(key))     return true;  }  return false;}  }
class C{  public boolean isFixed(int row,int column){  if (row < 1 || row > NUM_ROWS || column < 1 || column > NUM_COLS) {    return false;  }  return Board.NUM_ROWS == row || frozen[row - 1][column - 1];}  }
class C{  public Stack.Entry bot(final String stack) throws IOException {  Stack s=getStack(stack);  if (s == null)   return null;  return s.bot();}  }
class C{  public static void show(Context context,int messageResource,Object... args){  show(context,context.getResources().getString(messageResource),args);}  }
class C{  private static int appendArrayTypeSignature(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer){  return appendArrayTypeSignature(string,start,fullyQualifyTypeNames,buffer,false);}  }
class C{  public static boolean checkifStringFitsNoWordwrap(String text,double width,DrawHandler drawer){  StringStyle analyzedText=StringStyle.analyzeFormatLabels(StringStyle.replaceNotEscaped(text));  WordRegion[] words=getCachedWords(analyzedText.getStringWithoutMarkup());  if (words == null) {    return drawer.textWidth(analyzedText.getStringWithoutMarkup()) + endBuffer(drawer) + 0.01 < width;  } else {    WordwrapCacheValue wwValue=getCachedWordwrap(words,width,drawer.getStyleClone(),analyzedText.getFormat());    if (wwValue == null) {      return drawer.textWidth(analyzedText.getStringWithoutMarkup()) + endBuffer(drawer) + 0.01 < width;    } else {      return wwValue.getWrappedLines().length < 2;    }  }}  }
class C{  private int _current(){  if (buf != null) {    return UTF16.charAt(buf,0,buf.length,bufPos);  } else {    int i=pos.getIndex();    return (i < text.length()) ? UTF16.charAt(text,i) : DONE;  }}  }
class C{  private static String hex(char ch){  return Integer.toHexString(ch).toUpperCase();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MethodModel(Method method){  this.method=method;  this.parameters=new ArrayList<>();  analyze();}  }
class C{  public void resetOffset(){  mXInStackInfluence=1.0f;  mYInStackInfluence=1.0f;  mScrollOffset=0.0f;  mXInStackOffset=0.0f;  mYInStackOffset=0.0f;  mXOutOfStack=0.0f;  mYOutOfStack=0.0f;  mDiscardOriginX=0.f;  mDiscardOriginY=0.f;  mDiscardFromClick=false;}  }
class C{  public T viewportSize(String value){  setString(VIEWPORT_SIZE,value);  return (T)this;}  }
class C{  public boolean containsKey(K key){  if (list == null) {    return false;  }  return list.get(key) != null;}  }
class C{  public static int convertMultiByteToInt(int[] bytes){  if (bytes.length > 4) {    throw new RuntimeException("too big");  } else   if (bytes.length == 4 && ((bytes[0] & 0x80) == 0x80)) {    throw new IllegalArgumentException("Java int can't support a four byte value with msb byte greater than 7e");  }  int val=0;  for (int i=0; i < bytes.length; i++) {    if (bytes[i] > 0xFF) {      throw new IllegalArgumentException("Values exceeds byte range: " + bytes[i]);    }    if (i == (bytes.length - 1)) {      val+=bytes[i];    } else {      val+=bytes[i] << ((bytes.length - i - 1) * 8);    }  }  return val;}  }
class C{  public static ResourceEnumerationTaskService.ResourceEnumerationTaskState performResourceEnumeration(VerificationHost host,URI peerURI,EnumSet<TaskOption> options,String resourcePoolLink,String computeDescriptionLink,String parentComputeLink,List<String> tenantLinks) throws Throwable {  ResourceEnumerationTaskState enumerationTaskState=new ResourceEnumerationTaskService.ResourceEnumerationTaskState();  enumerationTaskState.parentComputeLink=parentComputeLink;  enumerationTaskState.enumerationAction=EnumerationAction.START;  enumerationTaskState.adapterManagementReference=UriUtils.buildUri(AWSEnumerationAdapterService.SELF_LINK);  enumerationTaskState.resourcePoolLink=resourcePoolLink;  enumerationTaskState.options=EnumSet.noneOf(TaskOption.class);  if (options != null) {    enumerationTaskState.options=options;  }  if (tenantLinks != null) {    enumerationTaskState.tenantLinks=tenantLinks;  }  URI uri=createServiceURI(host,peerURI,ResourceEnumerationTaskService.FACTORY_LINK);  ResourceEnumerationTaskService.ResourceEnumerationTaskState enumTask=TestUtils.doPost(host,enumerationTaskState,ResourceEnumerationTaskState.class,uri);  return enumTask;}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getNamedItemNS02.class,args);}  }
class C{  public boolean isVmotionEnabled(){  return vmotionEnabled;}  }
class C{  public void updateFile(){  LocoFile df=new LocoFile();  String fullFilename=LocoFile.getFileLocation() + getFileName();  try {    mRootElement=df.rootFromName(fullFilename);  } catch (  JDOMException|IOException e) {    log.error("Exception while loading loco XML file: " + getFileName() + " exception: "+ e);  }  try {    File f=new File(fullFilename);    df.makeBackupFile(LocoFile.getFileLocation() + getFileName());    df.writeFile(f,mRootElement,this.store());  } catch (  Exception e) {    log.error("error during locomotive file output",e);    try {      JOptionPane.showMessageDialog(null,ResourceBundle.getBundle("jmri.jmrit.roster.JmritRosterBundle").getString("ErrorSavingText") + "\n" + e.getMessage(),ResourceBundle.getBundle("jmri.jmrit.roster.JmritRosterBundle").getString("ErrorSavingTitle"),JOptionPane.ERROR_MESSAGE);    } catch (    HeadlessException he) {    }  }}  }
class C{  public CfciRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  public boolean removeAll(){  lock.lock();  try {    cookieJar.clear();    domainIndex.clear();    uriIndex.clear();  }  finally {    lock.unlock();  }  storeCookies();  return true;}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public void keyTyped(GraphicsNodeKeyEvent evt){  dispatchKeyEvent("keypress",evt);}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  void drawDivider(Canvas canvas,Rect bounds,int childIndex){  final Drawable divider=mDivider;  divider.setBounds(bounds);  divider.draw(canvas);}  }
class C{  public boolean containsParameter(){  return (nParameter > 0);}  }
class C{  public boolean isClientAuthenticationRequired(){  return clientAuthenticationRequired;}  }
class C{  public CatalogImageRestRep create(CatalogImageCreateParam input){  CatalogImageRestRep catalogImage=client.post(CatalogImageRestRep.class,input,PathConstants.CATALOG_IMAGE_URL);  return catalogImage;}  }
class C{  private boolean removeWaitingThread(SceKernelThreadInfo thread){  SceKernelMutexInfo info=mutexMap.get(thread.wait.Mutex_id);  if (info == null) {    return false;  }  info.threadWaitingList.removeWaitingThread(thread);  return true;}  }
class C{  public void persist(){  sequenceLoader.persist(sequenceLoadListener,null);}  }
class C{  public void dup(){  mv.visitInsn(Opcodes.DUP);}  }
class C{  FIRTypeII(int numBands,int nHalf){  super(numBands,nHalf,2 * nHalf);}  }
class C{  public static FeatureLabel valueOf(String s,MapFactory mf) throws Exception {  return new FeatureLabel(CollectionUtils.getMapFromString(s,Class.forName("java.lang.String"),Class.forName("java.lang.String"),mf));}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:58.918 -0500",hash_original_method="2C42C184C3EAF19809C332EBF46CD8DC",hash_generated_method="3835A6A016D70AAB4CCE556486752FB7") public final Collection<? extends Certificate> generateCertificates(InputStream inStream) throws CertificateException {  return spiImpl.engineGenerateCertificates(inStream);}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  public void addFacet(String facetName,TreeStructure treeStruct){  Util.notNull("facetName",facetName);  Util.notNull("treeStruct",treeStruct);  if (facets == null) {    facets=new HashMap<String,TreeStructure>();  }  facets.put(facetName,treeStruct);}  }
class C{  public static ComponentGroup encloseHorizontal(Component... cmp){  ComponentGroup c=new ComponentGroup();  c.setHorizontal(true);  for (  Component cc : cmp) {    c.add(cc);  }  return c;}  }
class C{  public Instruction parseMethod(method_info m){  int j;  Code_attribute ca;  ByteCode bc;  Instruction inst, head, tail;  exception_table_entry e;  head=null;  tail=null;  bc=new ByteCode();  ca=m.locate_code_attribute();  if (ca == null)   return null;  j=0;  while (j < ca.code_length) {    inst=bc.disassemble_bytecode(ca.code,j);    inst.originalIndex=j;    if (inst instanceof Instruction_Unknown) {      G.v().out.println("Unknown instruction in \"" + m.toName(constant_pool) + "\" at offset "+ j);      G.v().out.println(" bytecode = " + (((int)(inst.code)) & 0xff));    }    j=inst.nextOffset(j);    if (head == null)     head=inst; else {      tail.next=inst;      inst.prev=tail;    }    tail=inst;  }  bc.build(head);  for (j=0; j < ca.exception_table_length; j++) {    e=ca.exception_table[j];    e.start_inst=bc.locateInst(e.start_pc);    if (e.end_pc == ca.code_length)     e.end_inst=null; else     e.end_inst=bc.locateInst(e.end_pc);    e.handler_inst=bc.locateInst(e.handler_pc);    if (e.handler_inst != null)     e.handler_inst.labelled=true;  }  m.instructions=head;  for (  attribute_info element : ca.attributes) {    if (element instanceof LineNumberTable_attribute) {      LineNumberTable_attribute lntattr=(LineNumberTable_attribute)element;      for (      line_number_table_entry element0 : lntattr.line_number_table) {        element0.start_inst=bc.locateInst(element0.start_pc);      }    }  }  LocalVariableTable_attribute la=ca.findLocalVariableTable();  if (la != null) {    for (    local_variable_table_entry entry : la.local_variable_table) {      entry.start_inst=bc.locateInst(entry.start_pc);      if (entry.start_pc + entry.length < ca.code_length) {        entry.end_inst=bc.locateInst(entry.start_pc + entry.length);      }    }  }  return head;}  }
class C{  public I buildInvocation(Object protocolKey,I invocation) throws ConfigException {  Objects.requireNonNull(invocation);  invocation=buildInvocation(invocation);  LruCache<Object,I> invocationCache=_invocationCache;  if (invocationCache != null) {    I oldInvocation;    oldInvocation=invocationCache.get(protocolKey);    if (oldInvocation != null && !oldInvocation.isModified()) {      return oldInvocation;    }    if (invocation.getURLLength() < _maxURLLength) {      invocationCache.put(protocolKey,invocation);    }  }  return invocation;}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  public Object clone(){  Reference r=new Reference(className,classFactory,classFactoryLocation);  Enumeration<RefAddr> a=getAll();  r.addrs=new Vector<>();  while (a.hasMoreElements())   r.addrs.addElement(a.nextElement());  return r;}  }
class C{  public void reset(){  list.iter();  currentIndex=0;}  }
class C{  public JSONObject putOpt(String key,Object value){  if (key != null && value != null) {    put(key,value);  }  return this;}  }
class C{  public static String encodeX(byte[] a){  if (a == null || a.length == 0) {    return "X''";  }  int outLen=a.length * 2 + 3;  StringBuffer out=new StringBuffer(outLen);  out.append('X');  out.append('\'');  for (int i=0; i < a.length; i++) {    out.append(xdigits[(a[i] >> 4) & 0x0F]);    out.append(xdigits[a[i] & 0x0F]);  }  out.append('\'');  return out.toString();}  }
class C{  public Matrix uminus(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=-A[i][j];    }  }  return X;}  }
class C{  private GlowMetaItem toGlowMeta(ItemMeta meta){  if (meta instanceof GlowMetaItem) {    return (GlowMetaItem)meta;  }  throw new IllegalArgumentException("Item meta " + meta + " was not created by GlowItemFactory");}  }
class C{  @Override public void processIndication(Hashtable<String,String> notification){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  _logger.debug(notification.toString());  CIMStoragePortUpdatableDeviceEvent vEvent;  vEvent=(CIMStoragePortUpdatableDeviceEvent)getApplicationContext().getBean(CIMStoragePortUpdatableDeviceEvent.class.getSimpleName());  vEvent.setIndication(notification);  try {    Boolean updateStatus=vEvent.updateStoragePortOperationalStatus();    _logger.info("StoargePort:{} update Status :{}",vEvent.getNativeGuid(),updateStatus);    getRecordableEventManager().recordEvents(vEvent);    _logger.info("StoragePort Event for {} persisted in db",vEvent.getNativeGuid());  } catch (  Exception e) {    _logger.error("Exception occured while processing StoragePort indication",e);  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  private final static synchronized IdentValue addValue(String ident){  if (ALL_IDENT_VALUES == null) {    ALL_IDENT_VALUES=new HashMap<String,IdentValue>();  }  IdentValue val=new IdentValue(ident);  ALL_IDENT_VALUES.put(ident,val);  return val;}  }
class C{  public Modulo2Equation add(final int variable){  assert !bitVector.getBoolean(variable);  bitVector.set(variable);  isEmpty=false;  return this;}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public String noiseRateTipText(){  return "The noise rate to use.";}  }
class C{  public WrapperQueryBuilder(byte[] source,int offset,int length){  this.source=source;  this.offset=offset;  this.length=length;}  }
class C{  private boolean containsUser(String requestUrl){  return requestUrl.contains(OAuthParameters.XOAUTH_REQUESTOR_ID_KEY);}  }
class C{  public void showNavigationPane(){  if (!contentBorderLayout.getChildren().equals(navigationPaneVBox)) {    contentBorderLayout.setLeft(navigationPaneVBox);    showingNavigationPaneProperty.set(true);    LOG.debug("Showing navigation pane");  }}  }
class C{  public boolean isXmlAttribute(){  return isXmlAttribute;}  }
class C{  public static String readRaw(int id){  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  InputStream inputStream=getContext().getResources().openRawResource(id);  try {    IOUtils.copy(inputStream,outputStream);  } catch (  IOException e) {    return null;  } finally {    IOUtils.closeQuietly(outputStream);    IOUtils.closeQuietly(inputStream);  }  return outputStream.toString();}  }
class C{  private void donatePayPalOnClick(){  Uri.Builder uriBuilder=new Uri.Builder();  uriBuilder.scheme("https").authority("www.paypal.com").path("cgi-bin/webscr");  uriBuilder.appendQueryParameter("cmd","_donations");  uriBuilder.appendQueryParameter("business",mPaypalUser);  uriBuilder.appendQueryParameter("lc","US");  uriBuilder.appendQueryParameter("item_name",mPaypalItemName);  uriBuilder.appendQueryParameter("no_note","1");  uriBuilder.appendQueryParameter("no_shipping","1");  uriBuilder.appendQueryParameter("currency_code",mPaypalCurrencyCode);  Uri payPalUri=uriBuilder.build();  if (mDebug)   Timber.d("Opening the browser with the url: " + payPalUri.toString());  try {    Intent viewIntent=new Intent(Intent.ACTION_VIEW,payPalUri);    startActivity(viewIntent);  } catch (  ActivityNotFoundException e) {    openDialog(android.R.drawable.ic_dialog_alert,R.string.donations__alert_dialog_title,getString(R.string.donations__alert_dialog_no_browser));  }}  }
class C{  private void processElementTranslate(GeneratorSingleCluster cluster,Node cur){  double[] offset=null;  String vstr=((Element)cur).getAttribute(ATTR_VECTOR);  if (vstr != null && vstr.length() > 0) {    offset=parseVector(vstr);  }  if (offset == null) {    throw new AbortException("No translation vector given.");  }  cluster.addTranslation(offset);  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }}  }
class C{  public MarkHalfEdge(Coordinate orig){  super(orig);}  }
class C{  TypeSimplifier(Types typeUtils,String packageName,Set<TypeMirror> types,TypeMirror base){  this.typeUtils=typeUtils;  Set<TypeMirror> typesPlusBase=new TypeMirrorSet(types);  if (base != null) {    typesPlusBase.add(base);  }  Set<TypeMirror> referenced=referencedClassTypes(typeUtils,typesPlusBase);  Set<TypeMirror> defined=nonPrivateDeclaredTypes(typeUtils,base);  this.imports=findImports(typeUtils,packageName,referenced,defined);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public DLockStats(Statistics stats){  this.stats=stats;}  }
class C{  @Override public void process(HashMap<K,V> tuple){  mergedTuple.putAll(tuple);}  }
class C{  public void assignZero(){  int i;  for (i=0; i < blocks; i++) {    value[i]=0x00;  }}  }
class C{  public static int degree(int p){  int result=-1;  while (p != 0) {    result++;    p>>>=1;  }  return result;}  }
class C{  public static TempPageHolder newHolder(TempBufferHolder.Type type){  return new TempPageHolder(type);}  }
class C{  public void popElemTemplateElement(){  m_currentTemplateElements.pop();}  }
class C{  private static void test3() throws Exception {  for (int i=3; i < PLAIN1.length; i++) {    String algo=KEY1.getAlgorithm();    System.out.println("Running test3_" + i + " ("+ algo+ ")");    int MAX_KEYSIZE=Cipher.getMaxAllowedKeyLength(algo);    if (KEY1.getEncoded().length > MAX_KEYSIZE) {      continue;    }    Cipher cipher=Cipher.getInstance(algo + "/CTS/NoPadding","SunJCE");    byte[] plainText=PLAIN1[i];    byte[] cipherText=CIPHER1[i];    byte[] enc=new byte[plainText.length];    cipher.init(Cipher.ENCRYPT_MODE,KEY1,IV1);    int halfInput=plainText.length / 2;    int processed1=cipher.update(plainText,0,halfInput,enc,0);    try {      cipher.doFinal(plainText,halfInput,plainText.length - halfInput,new byte[1],0);      throw new RuntimeException("Expected Exception is not thrown");    } catch (    ShortBufferException sbe) {      int processed2=cipher.doFinal(plainText,halfInput,plainText.length - halfInput,enc,processed1);      if ((processed1 + processed2) != enc.length) {        System.out.println("processed1 = " + processed1);        System.out.println("processed2 = " + processed2);        System.out.println("total length = " + enc.length);        throw new RuntimeException("Encryption length check " + "failed");      }    }    if (Arrays.equals(cipherText,enc) == false) {      System.out.println("plain:  " + toString(plainText));      System.out.println("cipher: " + toString(cipherText));      System.out.println("actual: " + toString(enc));      throw new RuntimeException("Encryption failure for test " + i);    }    cipher.init(Cipher.DECRYPT_MODE,KEY1,IV1);    byte[] dec=new byte[cipher.getOutputSize(cipherText.length)];    processed1=cipher.update(cipherText,0,halfInput,dec,0);    try {      cipher.update(cipherText,halfInput,cipherText.length - halfInput,new byte[1],0);      throw new RuntimeException("Expected Exception is not thrown");    } catch (    ShortBufferException sbe) {      int processed2=cipher.update(cipherText,halfInput,cipherText.length - halfInput,dec,processed1);      int processed3=cipher.doFinal(dec,processed1 + processed2);      if ((processed1 + processed2 + processed3) != dec.length) {        System.out.println("processed1 = " + processed1);        System.out.println("processed2 = " + processed2);        System.out.println("processed3 = " + processed3);        System.out.println("total length = " + dec.length);        throw new RuntimeException("Decryption length check " + "failed");      }    }    if (Arrays.equals(plainText,dec) == false) {      System.out.println("cipher: " + toString(cipherText));      System.out.println("plain:  " + toString(plainText));      System.out.println("actualD: " + toString(dec));      throw new RuntimeException("Decryption failure for test " + i);    }  }}  }
class C{  @Deprecated public static boolean isExceptionSummaryEnabled(){  return proxyFactory.isExceptionSummaryEnabled();}  }
class C{  public static String[] split(String value){  return splitList.split(value.trim(),0);}  }
class C{  private StoragePort createStoragePort(StoragePort port,CIMInstance portInstance,AccessProfile profile,StorageHADomain haDomain,boolean flag,String transportType,StorageSystem device) throws URISyntaxException, IOException {  boolean newPort=false;  if (null == port) {    newPort=true;    port=new StoragePort();    port.setId(URIUtil.createId(StoragePort.class));    if (flag) {      port.setPortNetworkId(WWNUtility.getWWNWithColons(getCIMPropertyValue(portInstance,PORTID)));    }    port.setStorageDevice(profile.getSystemId());    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(_dbClient,port);    port.setNativeGuid(portNativeGuid);    port.setLabel(portNativeGuid);    port.setPortGroup(haDomain.getAdapterName());    port.setStorageHADomain(haDomain.getId());  }  setPortType(port,portInstance);  port.setTransportType(transportType);  port.setPortName(getCIMPropertyValue(portInstance,PORTNAME));  port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());  port.setDiscoveryStatus(DiscoveredDataObject.DiscoveryStatus.VISIBLE.name());  UnsignedInteger16[] operationalStatusCodes=(UnsignedInteger16[])portInstance.getPropertyValue(OPERATIONALSTATUS);  OperationalStatus operationalStatus=getPortOperationalStatus(operationalStatusCodes);  if (OperationalStatus.NOT_OK.equals(operationalStatus)) {    _logger.info("StoragePort {} operationalStatus is NOT_OK. operationalStatusCodes collected from SMI-S :{}",port.getId(),operationalStatusCodes);  } else {    _logger.debug("operationalStatusCodes :{}",operationalStatusCodes);    if (operationalStatusCodes != null && operationalStatusCodes.length > 1 && Arrays.asList(operationalStatusCodes).contains(stopped_code)) {      _logger.info("StoragePort {} operational status is {OK, Stopped}. operationalStatusCodes :{}",port.getId(),operationalStatusCodes);    }  }  port.setOperationalStatus(operationalStatus.name());  String portSpeed=getCIMPropertyValue(portInstance,SPEED);  if (null != portSpeed) {    Long portSpeedInBitsPerSec=Long.parseLong(portSpeed);    Long portSpeedInGbps=portSpeedInBitsPerSec / GB;    port.setPortSpeed(portSpeedInGbps);  }  setCompatibilityByACLXFlag(device,portInstance,port);  if (flag) {    if (newPort) {      _logger.info("Creating port - {}:{}",port.getLabel(),port.getNativeGuid());      _newPortList.add(port);    } else {      _logger.info("Updating port - {}:{}",port.getLabel(),port.getNativeGuid());      _updatePortList.add(port);    }  }  ;  return port;}  }
class C{  protected void submit(O tuple){  getDestination().accept(tuple);}  }
class C{  public void defineFillStyle(Color color) throws IOException {  fillStyles.add(new FillStyle(color));  outstandingChanges=true;}  }
class C{  public boolean addBidirectedEdge(Node node1,Node node2){  return addEdge(Edges.bidirectedEdge(node1,node2));}  }
class C{  public boolean exist(String key){  return mStorage.exist(key);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public Listener<CopycatServer.State> onStateChange(Consumer<CopycatServer.State> listener){  return stateChangeListeners.add(listener);}  }
class C{  @Check public void checkCatchVariable(CatchVariable catchVariable){  if (catchVariable.getDeclaredTypeRef() != null) {    addIssue(getMessageForAST_CATCH_VAR_TYPED(),catchVariable,N4JSPackage.eINSTANCE.getTypedElement_DeclaredTypeRef(),AST_CATCH_VAR_TYPED);  }}  }
class C{  public String toString(){  StringBuffer toString=new StringBuffer().append("Thread Name: ").append(thread.getName()).append(", Alive: ").append(thread.isAlive());  return toString.toString();}  }
class C{  public boolean importData(JComponent c,Transferable t){  HexEditor e=(HexEditor)c;  boolean imported=false;  DataFlavor flavor=getImportFlavor(t.getTransferDataFlavors(),e);  if (flavor != null) {    try {      Object data=t.getTransferData(flavor);      if (flavor.equals(DataFlavor.stringFlavor)) {        String text=(String)data;        byte[] bytes=text.getBytes();        e.replaceSelection(bytes);      }    } catch (    UnsupportedFlavorException ufe) {      ufe.printStackTrace();    }catch (    IOException ioe) {      ioe.printStackTrace();    }  }  return imported;}  }
class C{  private void addCouplings(){  List<PotentialProducer> potentialProducers=(List<PotentialProducer>)producingAttributes.getSelectedAttributes();  List<PotentialConsumer> potentialConsumers=(List<PotentialConsumer>)consumingAttributes.getSelectedAttributes();  if ((potentialProducers.size() == 0) || (potentialConsumers.size() == 0)) {    JOptionPane.showMessageDialog(null,"You must select at least one consuming and producing attribute \n in order to create couplings!","No Attributes Selected Warning",JOptionPane.WARNING_MESSAGE);    return;  }  try {    if (((String)couplingMethodComboBox.getSelectedItem()).equalsIgnoreCase("One to one")) {      desktop.getWorkspace().coupleOneToOne(potentialProducers,potentialConsumers);    } else     if (((String)couplingMethodComboBox.getSelectedItem()).equalsIgnoreCase("One to many")) {      desktop.getWorkspace().coupleOneToMany(potentialProducers,potentialConsumers);    }  } catch (  UmatchedAttributesException e) {    JOptionPane.showMessageDialog(null,e.getMessage(),"Unmatched Attributes",JOptionPane.WARNING_MESSAGE,null);  }}  }
class C{  protected String[] resolveEmbeddedValuesInPatterns(String[] patterns){  if (this.embeddedValueResolver == null) {    return patterns;  } else {    String[] resolvedPatterns=new String[patterns.length];    for (int i=0; i < patterns.length; i++) {      resolvedPatterns[i]=this.embeddedValueResolver.resolveStringValue(patterns[i]);    }    return resolvedPatterns;  }}  }
class C{  DefaultShellFolder(ShellFolder parent,File f){  super(parent,f.getAbsolutePath());}  }
class C{  public void execute(String urlSource,String urlTarget,String user,String password,String serverList) throws SQLException {  process(urlSource,urlTarget,user,password,serverList);}  }
class C{  public HMACT64(byte[] key){  super("HMACT64");  int length=Math.min(key.length,BLOCK_LENGTH);  for (int i=0; i < length; i++) {    ipad[i]=(byte)(key[i] ^ IPAD);    opad[i]=(byte)(key[i] ^ OPAD);  }  for (int i=length; i < BLOCK_LENGTH; i++) {    ipad[i]=IPAD;    opad[i]=OPAD;  }  try {    md5=MessageDigest.getInstance("MD5");  } catch (  Exception ex) {    throw new IllegalStateException(ex.getMessage());  }  engineReset();}  }
class C{  public long run(String[] args) throws Exception {  int reps=Integer.parseInt(args[0]);  CodeSource csrc=getClass().getProtectionDomain().getCodeSource();  String url="jar:" + csrc.getLocation().toString() + ALTROOT;  long start=System.currentTimeMillis();  for (int i=0; i < reps; i++)   RMIClassLoader.loadClass(url,CLASSNAME);  long time=System.currentTimeMillis() - start;  return time;}  }
class C{  @Transactional public void addBroadcastNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_BROADCAST);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=broadcast] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public double eval(double params[]){  return (Math.exp(params[0]));}  }
class C{  public XObject execute(XPathContext xctxt,int context,DTM dtm,int expType) throws javax.xml.transform.TransformerException {  if (m_whatToShow == DTMFilter.SHOW_ALL)   return m_score;  int nodeBit=(m_whatToShow & (0x00000001 << ((dtm.getNodeType(context)) - 1)));switch (nodeBit) {case DTMFilter.SHOW_DOCUMENT_FRAGMENT:case DTMFilter.SHOW_DOCUMENT:    return SCORE_OTHER;case DTMFilter.SHOW_COMMENT:  return m_score;case DTMFilter.SHOW_CDATA_SECTION:case DTMFilter.SHOW_TEXT:return m_score;case DTMFilter.SHOW_PROCESSING_INSTRUCTION:return subPartMatch(dtm.getNodeName(context),m_name) ? m_score : SCORE_NONE;case DTMFilter.SHOW_NAMESPACE:{String ns=dtm.getLocalName(context);return (subPartMatch(ns,m_name)) ? m_score : SCORE_NONE;}case DTMFilter.SHOW_ATTRIBUTE:case DTMFilter.SHOW_ELEMENT:{return (m_isTotallyWild || (subPartMatchNS(dtm.getNamespaceURI(context),m_namespace) && subPartMatch(dtm.getLocalName(context),m_name))) ? m_score : SCORE_NONE;}default :return SCORE_NONE;}}  }
class C{  static public void forceCreationOfNewIndex(boolean increment){  log.info("update decoder index");  File oldfile=new File(FileUtil.getUserFilesPath() + "decoderIndex.xml");  if (oldfile.exists()) {    log.debug("remove existing user decoderIndex.xml file");    if (!oldfile.delete()) {      log.error("Failed to delete old index file");    }    resetInstance();    instance();  }  ArrayList<String> al=new ArrayList<String>();  String[] sp=null;  int i=0;  FileUtil.createDirectory(FileUtil.getUserFilesPath() + DecoderFile.fileLocation);  File fp=new File(FileUtil.getUserFilesPath() + DecoderFile.fileLocation);  if (fp.exists()) {    sp=fp.list();    for (i=0; i < sp.length; i++) {      if (sp[i].endsWith(".xml") || sp[i].endsWith(".XML")) {        al.add(sp[i]);      }    }  } else {    log.warn(FileUtil.getUserFilesPath() + "decoders was missing, though tried to create it");  }  String[] sx=(new File(XmlFile.xmlDir() + DecoderFile.fileLocation)).list();  for (i=0; i < sx.length; i++) {    if (sx[i].endsWith(".xml") || sx[i].endsWith(".XML")) {      if (!al.contains(sx[i])) {        al.add(sx[i]);      }    }  }  Object[] aa=al.toArray();  String sbox[]=new String[al.size()];  for (i=0; i < sbox.length; i++) {    sbox[i]=(String)aa[i];  }  jmri.util.StringUtil.sort(sbox);  DecoderIndexFile index=new DecoderIndexFile();  if (increment) {    index.fileVersion=instance().fileVersion + 2;  } else {    index.fileVersion=instance().fileVersion;  }  try {    index.writeFile("decoderIndex.xml",_instance,sbox);  } catch (  java.io.IOException ex) {    log.error("Error writing new decoder index file: " + ex.getMessage());  }}  }
class C{  public int read(char[] cbuf) throws IOException {  return read(cbuf,0,cbuf.length);}  }
class C{  public FilteredDefinitionSelectionDialog(Shell shell,boolean multi,SpecObj specObj,String[] names){  super(shell,multi);  this.specObj=specObj;  setListLabelProvider(getListLabelProvider());  setDetailsLabelProvider(getDetailLabelProvider());  setSelectionHistory(new DefinitionHistory());  this.names=names;}  }
class C{  private static int orient(double ax,double ay,double bx,double by,double cx,double cy){  double v1=(bx - ax) * (cy - ay);  double v2=(cx - ax) * (by - ay);  if (v1 > v2) {    return 1;  } else   if (v1 < v2) {    return -1;  } else {    return 0;  }}  }
class C{  MultistepExprHolder unlink(MultistepExprHolder itemToRemove){  MultistepExprHolder first=this;  MultistepExprHolder next=this;  MultistepExprHolder prev=null;  while (null != next) {    if (next == itemToRemove) {      if (null == prev)       first=next.m_next; else       prev.m_next=next.m_next;      next.m_next=null;      return first;    }    prev=next;    next=next.m_next;  }  assertion(false,"unlink failed!!!");  return null;}  }
class C{  public ViewPoint[] newArray(int size){  return new ViewPoint[size];}  }
class C{  private boolean stringMatch(String str,OcrResultIterator iter){  OcrResultIterator iterCopy=new OcrResultIterator(iter);  for (int pos=0; pos < str.length(); ++pos) {    if (!charMatch(str.charAt(pos),iterCopy.getCurrentChar()))     return false;    if (pos != str.length() - 1 && !iterCopy.hasNext())     return false;    iterCopy.moveToNext();  }  return true;}  }
class C{  @Override public int compareTo(BytesRef other){  final byte[] aBytes=this.bytes;  int aUpto=this.offset;  final byte[] bBytes=other.bytes;  int bUpto=other.offset;  final int aStop=aUpto + Math.min(this.length,other.length);  while (aUpto < aStop) {    int aByte=aBytes[aUpto++] & 0xff;    int bByte=bBytes[bUpto++] & 0xff;    int diff=aByte - bByte;    if (diff != 0) {      return diff;    }  }  return this.length - other.length;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private static char decodeHexNibble(final char c){  if ('0' <= c && c <= '9') {    return (char)(c - '0');  } else   if ('a' <= c && c <= 'f') {    return (char)(c - 'a' + 10);  } else   if ('A' <= c && c <= 'F') {    return (char)(c - 'A' + 10);  } else {    return Character.MAX_VALUE;  }}  }
class C{  public void writeAsSerializedByteArray(Object v) throws IOException {  ByteBuffer sizeBuf=this.buffer;  int sizePos=sizeBuf.position();  sizeBuf.position(sizePos + 5);  final int preArraySize=size();  DataSerializer.writeObject(v,this);  int arraySize=size() - preArraySize;  sizeBuf.put(sizePos,InternalDataSerializer.INT_ARRAY_LEN);  sizeBuf.putInt(sizePos + 1,arraySize);}  }
class C{  static int applyMaskPenaltyRule3(ByteMatrix matrix){  int numPenalties=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      byte[] arrayY=array[y];      if (x + 6 < width && arrayY[x] == 1 && arrayY[x + 1] == 0 && arrayY[x + 2] == 1 && arrayY[x + 3] == 1 && arrayY[x + 4] == 1 && arrayY[x + 5] == 0 && arrayY[x + 6] == 1 && (isWhiteHorizontal(arrayY,x - 4,x) || isWhiteHorizontal(arrayY,x + 7,x + 11))) {        numPenalties++;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && (isWhiteVertical(array,x,y - 4,y) || isWhiteVertical(array,x,y + 7,y + 11))) {        numPenalties++;      }    }  }  return numPenalties * N3;}  }
class C{  public void uncaughtException(Thread t,Throwable e){  log.info("uncaughtException = " + e.toString());  super.uncaughtException(t,e);}  }
class C{  private void performPolicyBookKeeping(DbClient dbClient,Set<String> policyNames,StorageSystem storageSystem) throws IOException {  log.debug(String.format("SLO policyNames found by discovery for array %s:%n%s",storageSystem.getNativeGuid(),Joiner.on(',').join(policyNames)));  List<AutoTieringPolicy> policiesToUpdate=new ArrayList<>();  URIQueryResultList policiesInDB=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceFASTPolicyConstraint(storageSystem.getId()),policiesInDB);  for (  URI policy : policiesInDB) {    AutoTieringPolicy policyObject=dbClient.queryObject(AutoTieringPolicy.class,policy);    if (policyObject == null || Strings.isNullOrEmpty(policyObject.getVmaxSLO())) {      continue;    }    String policyName=policyObject.getPolicyName();    if (!policyNames.contains(policyName)) {      log.info(String.format("SLO %s no longer exists on array %s, marking associated AutoTieringPolicy %s inactive",policyName,storageSystem.getNativeGuid(),policy));      policyObject.setPolicyEnabled(false);      policyObject.getPools().clear();      policyObject.setInactive(true);      policiesToUpdate.add(policyObject);    }  }  if (!policiesToUpdate.isEmpty()) {    dbClient.updateAndReindexObject(policiesToUpdate);  }}  }
class C{  ListUnboughtHousesAction(final String location){  this.location=location;}  }
class C{  public boolean isDefNoncollider(Node node1,Node node2,Node node3){  List<Edge> edges=getEdges(node2);  boolean circle12=false;  boolean circle32=false;  for (  Edge edge : edges) {    boolean _node1=edge.getDistalNode(node2) == node1;    boolean _node3=edge.getDistalNode(node2) == node3;    if (_node1 && edge.pointsTowards(node1))     return true;    if (_node3 && edge.pointsTowards(node3))     return true;    if (_node1 && edge.getProximalEndpoint(node2) == Endpoint.CIRCLE)     circle12=true;    if (_node3 && edge.getProximalEndpoint(node2) == Endpoint.CIRCLE)     circle32=true;    if (circle12 && circle32 && !isAdjacentTo(node1,node2))     return true;  }  return false;}  }
class C{  @GET @Path("string/illegal-argument") @View("hello.jsp") public String stringIllegalArgumentException(){  throw new IllegalArgumentException("the general error page should be displayed");}  }
class C{  protected HashEntry entryNext(HashEntry entry){  return entry.next;}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public boolean isInline(){  return false;}  }
class C{  private void storeSignatureInRequest(SOAPMessageContext ctx,Signature signature){  assert ctx != null;  assert signature != null;  ServletRequest request=(ServletRequest)ctx.get(MessageContext.SERVLET_REQUEST);  request.setAttribute(WsConstants.SIGNATURE_KEY,signature);}  }
class C{  private Map<SourceLocationTag,List<HotspotModel>> computeSourceLocToHotspotsMap(List<Hotspot> hotspots){  if (hotspots == null)   return null;  Map<SourceLocationTag,List<HotspotModel>> map=new HashMap<SourceLocationTag,List<HotspotModel>>();  for (  Hotspot hot : hotspots) {    for (    ValueBox vb : hot.getHotspots()) {      SourceLocationTag loc=SootUtils.getSourceLocation(vb);      List<HotspotModel> hotspotModels=map.get(loc);      if (hotspotModels == null) {        hotspotModels=new ArrayList<HotspotModel>();        map.put(loc,hotspotModels);      }      HotspotModel hotspotModel=new HotspotModel(hot.getArgumentPosition(),JSAStrings.v().getRegex(vb.getValue()));      hotspotModels.add(hotspotModel);    }  }  return map;}  }
class C{  public static void inZoom(final IdocApplet ui){  FileVO file=(FileVO)ui.getFileVO();  ImageVO imageVO=(ImageVO)file.getListImage().get(file.getImageSelectIndex());  ImageIcon icono=getIcon(imageVO.getImage());  Image img=icono.getImage();  int w=imageVO.getWidth();  int h=imageVO.getHeight();  int wZoom=(int)(w * 0.1);  int hZoom1=(int)(h * 0.1);  img=img.getScaledInstance(w + wZoom,h + hZoom1,java.awt.Image.SCALE_SMOOTH);  ImageIcon icon=new ImageIcon(img);  JLabel jl=new JLabel(icon);  jl.setBounds(1,1,icon.getIconWidth() - 1,icon.getIconHeight() - 1);  try {    BufferedImage buffer=createBufferedImage(img);    ui.crop=new Cropping(buffer);  } catch (  Exception e) {  }  ui.getJScrollPaneIcon().setViewportView(ui.crop);  ui.repaint();  imageVO.setWidth(icon.getIconWidth());  imageVO.setHeight(icon.getIconHeight());}  }
class C{  public List<Object> exec(List<Object> input) throws WarpScriptException {  try {    this.sem.acquire();  } catch (  InterruptedException ie) {    throw new WarpScriptException("Got interrupted while attempting to acquire semaphore.");  }  WarpScriptStack stack=this.stack;  try {    if (null == stack) {      stack=getStack();    }    if (null != this.symbolTable) {      stack.save();      MemoryWarpScriptStack.StackContext context=(MemoryWarpScriptStack.StackContext)stack.peek();      context.symbolTable.putAll(this.symbolTable);      stack.restore();    }    for (int i=input.size() - 1; i >= 0; i--) {      stack.push(input.get(i));    }    try {      stack.exec(this.macro);    } catch (    WarpScriptStopException wsse) {    }    List<Object> output=new ArrayList<Object>();    while (stack.depth() > 0) {      output.add(stack.pop());    }    return output;  }  finally {    if (null != stack) {      stack.clear();    }    this.sem.release();  }}  }
class C{  public static Option file(Path value){  return new FileOption(value);}  }
class C{  public boolean isCurrentlyDouble(int stage){  return stage >= doubleStage;}  }
class C{  @SuppressWarnings({"unchecked"}) private void markProcssed(FacesContext ctx,ResourceDependency dep){  Set<ResourceDependency> dependencies=(Set<ResourceDependency>)RequestStateManager.get(ctx,RequestStateManager.PROCESSED_RESOURCE_DEPENDENCIES);  if (dependencies == null) {    dependencies=new HashSet<>(6);    RequestStateManager.set(ctx,RequestStateManager.PROCESSED_RESOURCE_DEPENDENCIES,dependencies);  }  dependencies.add(dep);}  }
class C{  public static void putInCache(char variant,String url,RsrcIfc rsrc,ConfigData configData){  CacheStructure cache=configData.cache;  HashMap<String,RsrcIfc> rsrcs=cache.rsrcs;  char var=CacheUtils.NON_PAGE_VARIANT;  if (rsrc instanceof PageRsrc || (rsrc instanceof TempRsrc && ((TempRsrc)rsrc).replacer instanceof PageRsrc))   var=variant;  String key=toKey(var,url);  RsrcIfc prev=rsrcs.get(key);  if (prev == rsrc)   return;  if (prev instanceof Rsrc)   cache.rsrcsList.remove((Rsrc)prev);  if (rsrc instanceof Rsrc)   cache.rsrcsList.add((Rsrc)rsrc);  rsrcs.put(key,rsrc);}  }
class C{  public long skip(long n) throws IOException {  if (n > bytesLeft)   n=bytesLeft;  long bytesSkipped=in.skip(n);  bytesLeft-=bytesSkipped;  return bytesSkipped;}  }
class C{  private static VkInstance createInstance(PointerBuffer requiredExtensions){  VkApplicationInfo appInfo=VkApplicationInfo.calloc().sType(VK_STRUCTURE_TYPE_APPLICATION_INFO).pApplicationName(memUTF8("GLFW Vulkan Demo")).pEngineName(memUTF8("")).apiVersion(VK_MAKE_VERSION(1,0,2));  PointerBuffer ppEnabledExtensionNames=memAllocPointer(requiredExtensions.remaining() + 1);  ppEnabledExtensionNames.put(requiredExtensions);  ByteBuffer VK_EXT_DEBUG_REPORT_EXTENSION=memUTF8(VK_EXT_DEBUG_REPORT_EXTENSION_NAME);  ppEnabledExtensionNames.put(VK_EXT_DEBUG_REPORT_EXTENSION);  ppEnabledExtensionNames.flip();  PointerBuffer ppEnabledLayerNames=memAllocPointer(layers.length);  for (int i=0; validation && i < layers.length; i++)   ppEnabledLayerNames.put(layers[i]);  ppEnabledLayerNames.flip();  VkInstanceCreateInfo pCreateInfo=VkInstanceCreateInfo.calloc().sType(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO).pNext(NULL).pApplicationInfo(appInfo).ppEnabledExtensionNames(ppEnabledExtensionNames).ppEnabledLayerNames(ppEnabledLayerNames);  PointerBuffer pInstance=memAllocPointer(1);  int err=vkCreateInstance(pCreateInfo,null,pInstance);  long instance=pInstance.get(0);  memFree(pInstance);  if (err != VK_SUCCESS) {    throw new AssertionError("Failed to create VkInstance: " + translateVulkanResult(err));  }  VkInstance ret=new VkInstance(instance,pCreateInfo);  pCreateInfo.free();  memFree(ppEnabledLayerNames);  memFree(VK_EXT_DEBUG_REPORT_EXTENSION);  memFree(ppEnabledExtensionNames);  memFree(appInfo.pApplicationName());  memFree(appInfo.pEngineName());  appInfo.free();  return ret;}  }
class C{  void ignoreSection(){  ignoreLine();  while (sdePeek() != '*') {    ignoreLine();  }}  }
class C{  public void paintValue(Graphics gfx,Rectangle box){  gfx.drawString(m_Format.toPattern(),box.x,box.y + box.height);}  }
class C{  private boolean isWithinRange(Date fileDate){  for (int i=0; i < dateRangesToRead.size() / 2; i++) {    if (fileDate.compareTo(dateRangesToRead.get(2 * i)) >= 0 && fileDate.compareTo(dateRangesToRead.get(2 * i + 1)) < 0) {      return true;    }  }  return fileDate.compareTo(dateRangesToRead.get(dateRangesToRead.size() - 1)) >= 0 && fileDate.compareTo(prevHour) < 0;}  }
class C{  int parseTimeZone(String source,int ofs) throws ParseException {  char tzSign=source.charAt(0);  if (tzSign == SIGN_NEGATIVE || tzSign == SIGN_POSITIVE) {    source=source.substring(1);    int index=2;    if (source.length() == 3) {      index--;    }    int tzHours=parseNumber(source.substring(0,index),ofs,"timezone",0,23);    int tzMinutes=parseNumber(source.substring(index),ofs,"timezone",0,59);    tzMinutes+=tzHours * 60;    if (tzSign != SIGN_NEGATIVE) {      tzMinutes=-tzMinutes;    }    return tzMinutes;  }  if (source.startsWith(GMT)) {    int index=source.indexOf(':');    if (index != -1) {      source=source.substring(3,index) + source.substring(index + 1);    } else {      source=source.substring(3);    }    return parseTimeZone(source,ofs);  }  for (  String timezone[] : getDateFormatSymbols().getZoneStrings()) {    for (    String z : timezone) {      if (z.equalsIgnoreCase(source)) {        TimeZone tz=TimeZone.getTimeZone(timezone[DateFormatSymbols.ZONE_ID]);        return -(tz.getRawOffset() / MILLIS_TO_MINUTES);      }    }  }  return throwInvalid("timezone",ofs);}  }
class C{  private void enableButtons(){  m_M_AttributeSetInstance_ID=-1;  m_M_AttributeSetInstanceName=null;  m_M_Locator_ID=0;  int row=m_table.getSelectedRow();  boolean enabled=row != -1;  if (enabled) {    Integer ID=m_table.getSelectedRowKey();    if (ID != null) {      m_M_AttributeSetInstance_ID=ID.intValue();      m_M_AttributeSetInstanceName=(String)m_table.getValueAt(row,1);      Object oo=m_table.getValueAt(row,5);      if (oo instanceof KeyNamePair) {        KeyNamePair pp=(KeyNamePair)oo;        m_M_Locator_ID=pp.getKey();      }    }  }  confirmPanel.getButton("Ok").setEnabled(enabled);  log.fine("M_AttributeSetInstance_ID=" + m_M_AttributeSetInstance_ID + " - "+ m_M_AttributeSetInstanceName+ "; M_Locator_ID="+ m_M_Locator_ID);}  }
class C{  public void testAssertVectorEquals_sameVector(){  Vector3 v1=new Vector3(0,0,1);  Vector3 v2=new Vector3(0,0,1);  assertVectorEquals(v1,v2,0.0001f,0.0001f);}  }
class C{  public static List<ConstraintViolation> check(Model model,ProgressMonitor monitor){  return check(model,SPIN.constraint,null,monitor);}  }
class C{  public int recordVariable(CtClass type,String name) throws CompileError {  return gen.recordVariable(type,name,stable);}  }
class C{  public static void discordMessageReceived(Message message){  SpongeDiscord mod=SpongeDiscord.getInstance();  Logger logger=mod.getLogger();  GlobalConfig config=mod.getConfig();  String content=TextUtil.formatDiscordEmoji(message.getContent());  for (  ChannelConfig channelConfig : config.channels) {    if (StringUtils.isNotBlank(channelConfig.discordId) && channelConfig.minecraft != null && StringUtils.isNotBlank(channelConfig.minecraft.chatTemplate) && message.getChannelReceiver().getId().equals(channelConfig.discordId) && !content.contains(TextUtil.SPECIAL_CHAR)) {      String author=message.getAuthor().getName();      Text formattedMessage=TextUtil.formatUrl(String.format(channelConfig.minecraft.chatTemplate.replace("%a",author),content));      logger.info(formattedMessage.toPlain());      Sponge.getServer().getOnlinePlayers().forEach(null);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public PSPCommunicationException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public HttpMultipart(final String subType,final Charset charset,final String boundary,HttpMultipartMode mode){  super();  if (subType == null) {    throw new IllegalArgumentException("Multipart subtype may not be null");  }  if (boundary == null) {    throw new IllegalArgumentException("Multipart boundary may not be null");  }  this.subType=subType;  this.charset=charset != null ? charset : MIME.DEFAULT_CHARSET;  this.boundary=boundary;  this.parts=new ArrayList<FormBodyPart>();  this.mode=mode;}  }
class C{  public Builder withSsl(boolean ssl){  disqueURI.setSsl(ssl);  return this;}  }
class C{  private HttpEntity paramsToEntity(RequestParams params){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(null);      NLog.e(tag,"params : " + params.toString());    }  } catch (  IOException e) {    e.printStackTrace();  }  return entity;}  }
class C{  public void add(Component left,Component right){  add(null,left,null,right,null);}  }
class C{  @Override public void closeElement(){  current=current.getParentNode();}  }
class C{  public static Observable<NetworkServiceDiscoveryInfo> startDiscovery(@NonNull Context context,@NonNull String protocol,boolean needsTxtRecord) throws NsdException {  if (protocol.equalsIgnoreCase(ALL_AVAILABLE_SERVICES)) {    throw new NsdException(NsdException.INVALID_ARGUMENT,protocol,0);  }  return DiscoveryOnSubscribeFactory.from(context,protocol,needsTxtRecord);}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  public TaskResourceRep hostClusterChangeDecline(URI hostId,URI clusterId,URI vCenterDataCenterId,boolean isVcenter,URI eventId){  return null;}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent intent){  if (requestCode == REQUEST_CODE) {    if (resultCode == Activity.RESULT_OK) {      JSONObject obj=new JSONObject();      try {        obj.put(TEXT,intent.getStringExtra("SCAN_RESULT"));        obj.put(FORMAT,intent.getStringExtra("SCAN_RESULT_FORMAT"));        obj.put(CANCELLED,false);      } catch (      JSONException e) {        Log.d(LOG_TAG,"This should never happen");      }      this.callbackContext.success(obj);    } else     if (resultCode == Activity.RESULT_CANCELED) {      JSONObject obj=new JSONObject();      try {        obj.put(TEXT,"");        obj.put(FORMAT,"");        obj.put(CANCELLED,true);      } catch (      JSONException e) {        Log.d(LOG_TAG,"This should never happen");      }      this.callbackContext.success(obj);    } else {      this.callbackContext.error("Unexpected error");    }  }}  }
class C{  public void onSocialLoginSuccess(String accessToken,String backend,Task task){}  }
class C{  @Override public void onReceivedTitle(WebView view,String title){  Log.i(getName(),title);  if (webView.getProgress() == FINISHED && resourceCallback != null) {    resourceCallback.onTransitionToIdle();  }}  }
class C{  public boolean run(byte[] s,int offset,int length){  int p=0;  int l=offset + length;  for (int i=offset; i < l; i++) {    p=step(p,s[i] & 0xFF);    if (p == -1)     return false;  }  return accept[p];}  }
class C{  public void shutdown(){  if (zkUtils != null)   zkUtils.close();  if (kafkaSrv != null)   kafkaSrv.shutdown();  if (zkServer != null) {    try {      zkServer.stop();    } catch (    IOException e) {    }  }  List<String> logDirs=scala.collection.JavaConversions.seqAsJavaList(kafkaCfg.logDirs());  for (  String logDir : logDirs)   U.delete(new File(logDir));}  }
class C{  public Anonymous_state_1_ createAnonymous_state_1_(){  Anonymous_state_1_Impl anonymous_state_1_=new Anonymous_state_1_Impl();  return anonymous_state_1_;}  }
class C{  public void testCreateRenameParentNoClose() throws Exception {  if (dual)   return;  create(igfs,paths(DIR,SUBDIR),null);  IgfsOutputStream os=null;  try {    os=igfs.create(FILE,true);    igfs.rename(SUBDIR,SUBDIR2);    os.close();  }  finally {    U.closeQuiet(os);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static UserProfileConfiguration buildUserProfileConfiguration(){  String[] allAllowedProfileProperties=(String[])ArrayUtils.addAll(PROFILE_PROPERTIES_PROVIDED_BY_THE_PROXY,PROFILE_PROPERTIES_PROVIDED_BY_THE_CLIENT);  final String matchEverythingExceptUnknown="(?!^unknown$).*";  final String fallbackValue="unknown";  final UserProfileConfiguration.ProfileProperty departmentConfig=UserProfileConfiguration.ProfileProperty.with("x-rp-department","department").setUpdateStrategy(UserProfileConfiguration.UpdateStrategy.UPDATE_ALWAYS).setValueToUseIfNoOtherValidValue(fallbackValue).validationRegex(matchEverythingExceptUnknown).setOptional(false).build();  final UserProfileConfiguration.ProfileProperty mailConfig=UserProfileConfiguration.ProfileProperty.with("x-rp-mail","mail").setUpdateStrategy(UserProfileConfiguration.UpdateStrategy.UPDATE_ALWAYS).setValueToUseIfNoOtherValidValue(fallbackValue).validationRegex(matchEverythingExceptUnknown).setOptional(false).build();  final UserProfileConfiguration.ProfileProperty employeeIdConfig=UserProfileConfiguration.ProfileProperty.with("x-rp-employeeid","personalNumber").validationRegex("\\d*{8}").setUpdateStrategy(UserProfileConfiguration.UpdateStrategy.UPDATE_ALWAYS).setValueToUseIfNoOtherValidValue(fallbackValue).setOptional(false).build();  final UserProfileConfiguration.ProfileProperty usernameConfig=UserProfileConfiguration.ProfileProperty.with("x-rp-usr","username").setUpdateStrategy(UserProfileConfiguration.UpdateStrategy.UPDATE_ONLY_IF_PROFILE_VALUE_IS_INVALID).setOptional(false).build();  final UserProfileConfiguration.ProfileProperty fullNameConfig=UserProfileConfiguration.ProfileProperty.with("x-rp-displayname","fullName").setUpdateStrategy(UserProfileConfiguration.UpdateStrategy.UPDATE_ALWAYS).setOptional(false).build();  return UserProfileConfiguration.create().userProfileUriPattern(SERVER_ROOT + "/users/v1/([^/]+)/profile").roleProfilesRoot(SERVER_ROOT + "/roles/v1/").rolePattern(ROLE_PATTERN).addAllowedProfileProperties(allAllowedProfileProperties).addProfileProperty(departmentConfig).addProfileProperty(mailConfig).addProfileProperty(employeeIdConfig).addProfileProperty(usernameConfig).addProfileProperty(fullNameConfig).build();}  }
class C{  PolicyParser.PermissionEntry toPermissionEntry(Permission perm){  String actions=null;  if (perm.getActions() != null && perm.getActions().trim() != "")   actions=perm.getActions();  PolicyParser.PermissionEntry pe=new PolicyParser.PermissionEntry(perm.getClass().getName(),perm.getName(),actions);  return pe;}  }
class C{  public void timeSource(GridClockSource clockSrc){  this.clockSrc=clockSrc;}  }
class C{  protected ASTGraphGraphPattern firstASTGraphGraphAncestor(Node node){  if (node == null)   return null;  if (node instanceof ASTGraphGraphPattern)   return (ASTGraphGraphPattern)node;  return firstASTGraphGraphAncestor(node.jjtGetParent());}  }
class C{  @Override public String toString(){  return cronExpression;}  }
class C{  public AABB(float extent){  this(new Vec3D(),extent);}  }
class C{  public static int posToOrientation(int position){  Preconditions.checkArgument(0 <= position && position < 4);  return POS_TO_ORIENTATION[position];}  }
class C{  public String encodeBody(){  return entityTag;}  }
class C{  public List<LookupResult> lookup(final CharSequence key,int num){  return lookup(key,null,true,num);}  }
class C{  @RequestProcessing(value="/admin/products",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showProducts(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/products.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.PAGE_SIZE;  final int windowSize=Symphonys.WINDOW_SIZE;  final JSONObject requestJSONObject=new JSONObject();  requestJSONObject.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  requestJSONObject.put(Pagination.PAGINATION_PAGE_SIZE,pageSize);  requestJSONObject.put(Pagination.PAGINATION_WINDOW_SIZE,windowSize);  final String name=request.getParameter(Common.NAME);  if (!Strings.isEmptyOrNull(name)) {    requestJSONObject.put(Product.PRODUCT_NAME,name);  }  final Map<String,Class<?>> fields=new HashMap<String,Class<?>>();  fields.put(Keys.OBJECT_ID,String.class);  fields.put(Product.PRODUCT_CATEGORY,String.class);  fields.put(Product.PRODUCT_DESCRIPTION,String.class);  fields.put(Product.PRODUCT_NAME,String.class);  fields.put(Product.PRODUCT_PRICE,Double.class);  fields.put(Product.PRODUCT_IMG_URL,String.class);  fields.put(Product.PRODUCT_COUNT,Integer.class);  fields.put(Product.PRODUCT_STATUS,Integer.class);  final JSONObject result=productQueryService.getProducts(requestJSONObject,fields);  dataModel.put(Product.PRODUCTS,CollectionUtils.jsonArrayToList(result.optJSONArray(Product.PRODUCTS)));  final JSONObject pagination=result.optJSONObject(Pagination.PAGINATION);  final int pageCount=pagination.optInt(Pagination.PAGINATION_PAGE_COUNT);  final JSONArray pageNums=pagination.optJSONArray(Pagination.PAGINATION_PAGE_NUMS);  dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.opt(0));  dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.opt(pageNums.length() - 1));  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,CollectionUtils.jsonArrayToList(pageNums));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public boolean areAllPermissionsGranted(){  return deniedPermissionResponses.isEmpty();}  }
class C{  public void tagJPEGTables(byte[] jpegEncodingData) throws IOException {  if (tags != null) {    tags.tagJPEGTables(jpegEncodingData);  }}  }
class C{  public static void writeBytes(OutputStream os,byte[] buf) throws IOException {  if (buf.length < OP_PUSHDATA1) {    os.write(buf.length);    os.write(buf);  } else   if (buf.length < 256) {    os.write(OP_PUSHDATA1);    os.write(buf.length);    os.write(buf);  } else   if (buf.length < 65536) {    os.write(OP_PUSHDATA2);    os.write(0xFF & (buf.length));    os.write(0xFF & (buf.length >> 8));    os.write(buf);  } else {    throw new RuntimeException("Unimplemented");  }}  }
class C{  @Override public void onVisibilityChange(boolean isVisible){  if (mIsVisible == isVisible) {    return;  }  mEventTracker.recordEvent(isVisible ? Event.ON_DRAWABLE_SHOW : Event.ON_DRAWABLE_HIDE);  mIsVisible=isVisible;  attachOrDetachController();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.602 -0400",hash_original_method="B38C6295CAE53BA65E4DF4CF73E69F95",hash_generated_method="70138DD998A7B872A142DD51EF913EA7") public V put(K key,V value){  final int hash;  int index;  if (key == null) {    hash=0;    index=indexOfNull();  } else {    hash=key.hashCode();    index=indexOf(key,hash);  }  if (index >= 0) {    index=(index << 1) + 1;    final V old=(V)mArray[index];    mArray[index]=value;    return old;  }  index=~index;  if (mSize >= mHashes.length) {    final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);    if (DEBUG)     Log.d(TAG,"put: grow from " + mHashes.length + " to "+ n);    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(n);    if (mHashes.length > 0) {      if (DEBUG)       Log.d(TAG,"put: copy 0-" + mSize + " to 0");      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);      System.arraycopy(oarray,0,mArray,0,oarray.length);    }    freeArrays(ohashes,oarray,mSize);  }  if (index < mSize) {    if (DEBUG)     Log.d(TAG,"put: move " + index + "-"+ (mSize - index)+ " to "+ (index + 1));    System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index);    System.arraycopy(mArray,index << 1,mArray,(index + 1) << 1,(mSize - index) << 1);  }  mHashes[index]=hash;  mArray[index << 1]=key;  mArray[(index << 1) + 1]=value;  mSize++;  return null;}  }
class C{  public InterpreterException(Exception exception,String message,int lineno,int columnno){  this(message,lineno,columnno);  embedded=exception;}  }
class C{  public static double lpow2(long m,int n){  if (m == 0) {    return 0.0;  }  if (m == Long.MIN_VALUE) {    return lpow2(Long.MIN_VALUE >> 1,n + 1);  }  if (m < 0) {    return -lpow2(-m,n);  }  assert (m >= 0);  int bitLength=magnitude(m);  int shift=bitLength - 53;  long exp=1023L + 52 + n+ shift;  if (exp >= 0x7FF) {    return Double.POSITIVE_INFINITY;  }  if (exp <= 0) {    if (exp <= -54) {      return 0.0;    }    return lpow2(m,n + 54) / 18014398509481984L;  }  long bits=(shift > 0) ? (m >> shift) + ((m >> (shift - 1)) & 1) : m << -shift;  if (((bits >> 52) != 1) && (++exp >= 0x7FF)) {    return Double.POSITIVE_INFINITY;  }  bits&=0x000fffffffffffffL;  bits|=exp << 52;  return Double.longBitsToDouble(bits);}  }
class C{  public WorkbookEditorInput(IWorkbook contents){  this(null,contents);}  }
class C{  protected AbstractJmsListener(Delegator delegator){  this.dispatcher=ServiceContainer.getLocalDispatcher("JMSDispatcher",delegator);}  }
class C{  public NumericalToHistogram(){  this(25);}  }
class C{  public double pdf(int k){  if (k < 0)   throw new IllegalArgumentException();  int r=this.n - k;  return Math.exp(this.log_n - Arithmetic.logFactorial(k) - Arithmetic.logFactorial(r) + this.log_p * k + this.log_q * r);}  }
class C{  public void testStringOptions() throws Exception {  DatabaseMetaData dbmd=con.getMetaData();  Assert.assertEquals("getCatalogSeparator",".",dbmd.getCatalogSeparator());  Assert.assertEquals("getCatalogTerm","database",dbmd.getCatalogTerm());  assertNotNull("getDatabaseProductName",dbmd.getDatabaseProductName());  assertNotNull("getDatabaseProductVersion",dbmd.getDatabaseProductVersion());  assertNotNull("getDriverName",dbmd.getDriverName());  assertNotNull("getDriverVersion",dbmd.getDriverVersion());  Assert.assertEquals("getExtraNameCharacters","$#@",dbmd.getExtraNameCharacters());  Assert.assertEquals("getIdentifierQuoteString","\"",dbmd.getIdentifierQuoteString());  Assert.assertEquals("getNumericFunctions","abs,acos,asin,atan,atan2,ceiling,cos,cot,degrees,exp,floor,log,log10,mod,pi,power,radians,rand,round,sign,sin,sqrt,tan",dbmd.getNumericFunctions());  Assert.assertEquals("getProcedureTerm","stored procedure",dbmd.getProcedureTerm());  Assert.assertEquals("getSchemaTerm","owner",dbmd.getSchemaTerm());  Assert.assertEquals("getSearchStringEscape","\\",dbmd.getSearchStringEscape());  Assert.assertEquals("getSQLKeywords","ARITH_OVERFLOW,BREAK,BROWSE,BULK,CHAR_CONVERT,CHECKPOINT,CLUSTERED,COMPUTE,CONFIRM,CONTROLROW,DATA_PGS,DATABASE,DBCC,DISK,DUMMY,DUMP,ENDTRAN,ERRLVL,ERRORDATA,ERROREXIT,EXIT,FILLFACTOR,HOLDLOCK,IDENTITY_INSERT,IF,INDEX,KILL,LINENO,LOAD,MAX_ROWS_PER_PAGE,MIRROR,MIRROREXIT,NOHOLDLOCK,NONCLUSTERED,NUMERIC_TRUNCATION,OFF,OFFSETS,ONCE,ONLINE,OVER,PARTITION,PERM,PERMANENT,PLAN,PRINT,PROC,PROCESSEXIT,RAISERROR,READ,READTEXT,RECONFIGURE,REPLACE,RESERVED_PGS,RETURN,ROLE,ROWCNT,ROWCOUNT,RULE,SAVE,SETUSER,SHARED,SHUTDOWN,SOME,STATISTICS,STRIPE,SYB_IDENTITY,SYB_RESTREE,SYB_TERMINATE,TEMP,TEXTSIZE,TRAN,TRIGGER,TRUNCATE,TSEQUAL,UNPARTITION,USE,USED_PGS,USER_OPTION,WAITFOR,WHILE,WRITETEXT",dbmd.getSQLKeywords());  Assert.assertEquals("getSystemFunctions","database,ifnull,user,convert",dbmd.getSystemFunctions());  Assert.assertEquals("getTimeDateFunctions","curdate,curtime,dayname,dayofmonth,dayofweek,dayofyear,hour,minute,month,monthname,now,quarter,timestampadd,timestampdiff,second,week,year",dbmd.getTimeDateFunctions());  assertNotNull("getURL",dbmd.getURL());  assertNotNull("getUserName",dbmd.getUserName());  if (dbmd.getDatabaseProductName().startsWith("Microsoft")) {    Assert.assertEquals("getStringFunctions","ascii,char,concat,difference,insert,lcase,left,length,locate,ltrim,repeat,replace,right,rtrim,soundex,space,substring,ucase",dbmd.getStringFunctions());  } else {    Assert.assertEquals("getStringFunctions","ascii,char,concat,difference,insert,lcase,length,ltrim,repeat,right,rtrim,soundex,space,substring,ucase",dbmd.getStringFunctions());  }}  }
class C{  public void clearRead(){  _readOffset=0;  _readLength=0;}  }
class C{  public static double digamma(double x){  assert x > 0 : x;  double r, f, t;  r=0;  while (x <= 5) {    r-=1 / x;    x+=1;  }  f=1 / (x * x);  t=f * (-1 / 12.0 + f * (1 / 120.0 + f * (-1 / 252.0 + f * (1 / 240.0 + f * (-1 / 132.0 + f * (691 / 32760.0 + f * (-1 / 12.0 + f * 3617 / 8160.0)))))));  return r + Math.log(x) - 0.5 / x + t;}  }
class C{  private void addSynapseGroupVisible(SynapseGroup synapseGroup){  List<SynapseNode> nodes=new ArrayList<SynapseNode>();  for (  Synapse synapse : synapseGroup.getExcitatorySynapses()) {    addSynapse(synapse);    SynapseNode node=(SynapseNode)objectNodeMap.get(synapse);    canvas.getLayer().addChild(node);    nodes.add(node);  }  for (  Synapse synapse : synapseGroup.getInhibitorySynapses()) {    addSynapse(synapse);    SynapseNode node=(SynapseNode)objectNodeMap.get(synapse);    canvas.getLayer().addChild(node);    nodes.add(node);  }  SynapseGroupNodeVisible synapseGroupNode=new SynapseGroupNodeVisible(this,synapseGroup);  canvas.getLayer().addChild(synapseGroupNode);  objectNodeMap.put(synapseGroup,synapseGroupNode);  if (synapseGroup.hasParentGroup()) {    SubnetworkNode parentNode=(SubnetworkNode)objectNodeMap.get(synapseGroup.getParentGroup());    if (parentNode != null) {      parentNode.addNode(synapseGroupNode);    }  }  for (  SynapseNode node : nodes) {    synapseGroupNode.addSynapseNode(node);  }  synapseGroupNode.lowerToBottom();}  }
class C{  public Asin(){  super(Number.class,Number.class);}  }
class C{  public float[] keys(){  float[] keys=new float[size()];  float[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public void stop(){  if (active) {    active=false;    if (logger.isInfoEnabled())     logger.info(JMX_NAME + " detenido");  }}  }
class C{  public void reset(){  m_next=0;}  }
class C{  @SuppressWarnings("static-access") public String sqlMetadata_closeCharSetTest(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_closeCharSetTest(catalogName,schemaName,s_parameters.CHARSETTABLENAME);}  }
class C{  public static double[][] selectColumns(double matrix[][],Vector<Integer> columns){  double[][] data=new double[matrix.length][columns.size()];  for (int r=0; r < matrix.length; r++) {    for (int cIndex=0; cIndex < columns.size(); cIndex++) {      data[r][cIndex]=matrix[r][columns.elementAt(cIndex).intValue()];    }  }  return data;}  }
class C{  public static int deepHashCode(byte[] array){  int result=1;  for (int i=0; i < array.length; i++) {    result=31 * result + array[i];  }  return result;}  }
class C{  @Override public int hashCode(){  int hash=LangUtils.HASH_SEED;  hash=LangUtils.hashCode(hash,this.defaultPort);  hash=LangUtils.hashCode(hash,this.name);  hash=LangUtils.hashCode(hash,this.layered);  hash=LangUtils.hashCode(hash,this.socketFactory);  return hash;}  }
class C{  int writeBytes(byte[] data,int offset){  maxPos=Math.max(maxPos,offset + data.length);  if (data.length + offset > pngBytes.length) {    pngBytes=resizeByteArray(pngBytes,pngBytes.length + Math.max(1000,data.length));  }  System.arraycopy(data,0,pngBytes,offset,data.length);  return offset + data.length;}  }
class C{  private HttpResponse sendRequest(State state,AndroidHttpClient client,HttpGet request) throws StopRequest {  try {    return client.execute(request);  } catch (  IllegalArgumentException ex) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"while trying to execute request: " + ex.toString(),ex);  }catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while trying to execute request: " + ex.toString(),ex);  }}  }
class C{  private String printOFormat(short x){  String sx=null;  if (x == Short.MIN_VALUE)   sx="100000"; else   if (x < 0) {    String t=Integer.toString((~(-x - 1)) ^ Short.MIN_VALUE,8);switch (t.length()) {case 1:      sx="10000" + t;    break;case 2:  sx="1000" + t;break;case 3:sx="100" + t;break;case 4:sx="10" + t;break;case 5:sx="1" + t;break;}} else sx=Integer.toString((int)x,8);return printOFormat(sx);}  }
class C{  public int numLines(){  int r=header.size();  for (  MeasurementGroup m : groups) {    r+=1 + m.measurements.size();  }  return r;}  }
class C{  public void phaseIU(final int lindex,final int levels[][]){  float rowBC[];  rowBC=calcRowBC(lindex,levels);  isort(levels[lindex],rowBC);}  }
class C{  public int groupCount(){  return parentPattern.capturingGroupCount - 1;}  }
class C{  protected String doIt() throws Exception {  log.info("C_Invoice_ID=" + p_C_Invoice_ID + ", M_Warehouse_ID="+ p_M_Warehouse_ID);  if (p_C_Invoice_ID <= 0)   throw new FillMandatoryException("C_Invoice_ID");  if (p_M_Warehouse_ID == 0)   throw new FillMandatoryException(PARAM_M_Warehouse_ID);  MInvoice invoice=new MInvoice(getCtx(),p_C_Invoice_ID,null);  if (invoice.get_ID() <= 0)   throw new AdempiereException("@NotFound@ @C_Invoice_ID@");  if (!MInvoice.DOCSTATUS_Completed.equals(invoice.getDocStatus()))   throw new AdempiereException("@InvoiceCreateDocNotCompleted@");  for (  MInvoiceLine invoiceLine : invoice.getLines(false)) {    createLine(invoice,invoiceLine);  }  if (m_inout == null)   throw new InvoiceFullyMatchedException();  return m_inout.getDocumentNo();}  }
class C{  public static int previousSetBit(long v,int start){  if (start == -1 || start >= Long.SIZE) {    return -1;  }  long cur=v & (LONG_ALL_BITS >>> start);  if (cur == 0) {    return -1;  }  return Long.SIZE - 1 - Long.numberOfLeadingZeros(cur);}  }
class C{  private void removeItem(ViewGroup container,int position,Object object){  if (container != null && object instanceof View) {    container.removeView((View)object);  }}  }
class C{  public void throwException(){  mv.visitInsn(Opcodes.ATHROW);}  }
class C{  public byte toByteArray()[]{  return count == buf.length ? buf : Utils.copyOf(buf,count);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static double[] multVector(final double[] theVec,final double val){  double[] ret=new double[theVec.length];  for (int i=0; i < theVec.length; i++) {    ret[i]=theVec[i] * val;  }  return ret;}  }
class C{  public void removeAllAttributes(){  this.attributes=null;}  }
class C{  @Override public void onCancel(String callerTag){  ComponentsGetter cg=(ComponentsGetter)getActivity();  cg.getFileOperationsHelper().removeFile(mTargetFile,true);  FileDataStorageManager storageManager=cg.getStorageManager();  boolean containsFavorite=false;  if (mTargetFile.isFolder()) {    Vector<OCFile> files=storageManager.getFolderContent(mTargetFile);    for (    OCFile file : files) {      containsFavorite=file.isFavorite() || containsFavorite;      if (containsFavorite)       break;    }  }  if (mTargetFile.isFavorite() || containsFavorite) {    OCFile folder=null;    if (mTargetFile.isFolder()) {      folder=mTargetFile;    } else {      folder=storageManager.getFileById(mTargetFile.getParentId());    }    folder.setEtag("");    storageManager.saveFile(folder);  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) @Path("/{id}/activate") public TaskResourceRep activate(@PathParam("id") URI id){  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.ACTIVATE_VOLUME_SNAPSHOT);  ArgValidator.checkFieldUriType(id,BlockSnapshot.class,"id");  BlockSnapshot snapshot=(BlockSnapshot)queryResource(id);  Volume parentVolume=_permissionsHelper.getObjectById(snapshot.getParent(),Volume.class);  checkForPendingTasks(Arrays.asList(parentVolume.getTenant().getURI()),Arrays.asList(parentVolume));  StorageSystem device=_dbClient.queryObject(StorageSystem.class,snapshot.getStorageController());  BlockController controller=getController(BlockController.class,device.getSystemType());  String task=UUID.randomUUID().toString();  if (snapshot.getIsSyncActive()) {    op.ready("Snapshot is already active");    _dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),task,op);    return toTask(snapshot,task,op);  }  _dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),task,op);  List<URI> snapshotList=new ArrayList<URI>();  if (!NullColumnValueGetter.isNullURI(snapshot.getConsistencyGroup())) {    List<BlockSnapshot> snapshots=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshot,_dbClient);    for (    BlockSnapshot snap : snapshots) {      snapshotList.add(snap.getId());    }  } else {    snapshotList.add(id);  }  if (snapshot.getEmName() != null) {    throw new ServiceCodeException(API_BAD_REQUEST,"RecoverPoint snapshots cannot be activated.",null);  } else {    controller.activateSnapshot(device.getId(),snapshotList,task);  }  auditOp(OperationTypeEnum.ACTIVATE_VOLUME_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,snapshot.getId().toString(),snapshot.getLabel());  return toTask(snapshot,task,op);}  }
class C{  @Override public boolean isRequired(){  return (Boolean)getStateHelper().eval(PropertyKeys.required,false);}  }
class C{  public void rechazarDocumentoVital(String id){  checkPermission(DocumentosVitalesSecurityManager.EDICION_DOCUMENTOS_VITALES_ACTION);  iniciarTransaccion();  InfoBDocumentoVitalExtVO documentoVital=getDocumentoVital(id);  if ((documentoVital != null) && (documentoVital.getEstadoDocVit() == EstadoDocumentoVital.PENDIENTE_VALIDACION)) {    Locale locale=getServiceClient().getLocale();    AuditoriaDocumentosVitales.auditaRechazoDocumentoVital(locale,this,documentoVital);    documentoVitalDBEntity.deleteDocumentoVital(id);    try {      getGestionDocumentosElectronicosBI().deleteFile(getIdRepEcmDocumentosVitales(documentoVital.getIdRepEcm()),null,documentoVital.getIdFich());    } catch (    Exception e) {      logger.warn("Error al eliminar el fichero [id=" + documentoVital.getIdFich() + "] del documento vital",e);    }  }  commit();}  }
class C{  public TopicMatcher(){  subscriptionsStore=new SubscriptionsStore();  subscriptionsStore.init(new MapBasedSubscriptionStore());}  }
class C{  @Override public void acquire() throws Exception {  Preconditions.checkArgument(ttl == null || TimeUnit.SECONDS.convert(timeout,timeoutUnits) < ttl,"Timeout " + timeout + " must be less than TTL "+ ttl);  RetryPolicy retry=backoffPolicy.duplicate();  retryCount=0;  while (true) {    try {      long curTimeMicros=getCurrentTimeMicros();      MutationBatch m=keyspace.prepareMutationBatch().setConsistencyLevel(consistencyLevel);      fillLockMutation(m,curTimeMicros,ttl);      m.execute();      verifyLock(curTimeMicros);      acquireTime=System.currentTimeMillis();      return;    } catch (    BusyLockException e) {      release();      if (!retry.allowRetry()) {        throw e;      }      retryCount++;    }  }}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  private void createStyles(){  this.redCrossStyle=kmlObjectFactory.createStyleType();  this.redCrossStyle.setId("redCrossStyle");  this.redMinusStyle=kmlObjectFactory.createStyleType();  this.redMinusStyle.setId("redMinusStyle");  this.yellowCrossStyle=kmlObjectFactory.createStyleType();  this.yellowCrossStyle.setId("yellowCrossStyle");  this.yellowMinusStyle=kmlObjectFactory.createStyleType();  this.yellowMinusStyle.setId("yellowMinusStyle");  this.greenCrossStyle=kmlObjectFactory.createStyleType();  this.greenCrossStyle.setId("greenCrossStyle");  this.greenMinusStyle=kmlObjectFactory.createStyleType();  this.greenMinusStyle.setId("greenMinusStyle");  this.greyCrossStyle=kmlObjectFactory.createStyleType();  this.greyCrossStyle.setId("greyCrossStyle");  this.greyMinusStyle=kmlObjectFactory.createStyleType();  this.greyMinusStyle.setId("greyMinusStyle");  byte[] red=new byte[]{(byte)0xFF,(byte)0x0F,(byte)0x0F,(byte)0xBE};  byte[] green=new byte[]{(byte)0xFF,(byte)0x14,(byte)0xDC,(byte)0x0A};  byte[] yellow=new byte[]{(byte)0xFF,(byte)0x14,(byte)0xE6,(byte)0xE6};  byte[] grey=new byte[]{(byte)0xFF,(byte)0x42,(byte)0x42,(byte)0x42};  HashMap<StyleType,byte[]> colors=new HashMap<StyleType,byte[]>();  colors.put(this.redCrossStyle,red);  colors.put(this.redMinusStyle,red);  colors.put(this.yellowCrossStyle,yellow);  colors.put(this.yellowMinusStyle,yellow);  colors.put(this.greenCrossStyle,green);  colors.put(this.greenMinusStyle,green);  colors.put(this.greyCrossStyle,grey);  colors.put(this.greyMinusStyle,grey);  HashMap<StyleType,String> hrefs=new HashMap<StyleType,String>();  hrefs.put(this.redCrossStyle,CROSSICON);  hrefs.put(this.redMinusStyle,MINUSICON);  hrefs.put(this.yellowCrossStyle,CROSSICON);  hrefs.put(this.yellowMinusStyle,MINUSICON);  hrefs.put(this.greenCrossStyle,CROSSICON);  hrefs.put(this.greenMinusStyle,MINUSICON);  hrefs.put(this.greyCrossStyle,CROSSICON);  hrefs.put(this.greyMinusStyle,MINUSICON);  for (  StyleType styleType : new StyleType[]{this.redCrossStyle,this.redMinusStyle,this.yellowCrossStyle,this.yellowMinusStyle,this.greenCrossStyle,this.greenMinusStyle,this.greyCrossStyle,this.greyMinusStyle}) {    IconStyleType icon=kmlObjectFactory.createIconStyleType();    icon.setColor(new byte[]{colors.get(styleType)[0],colors.get(styleType)[1],colors.get(styleType)[2],colors.get(styleType)[3]});    icon.setScale(ICONSCALE);    if (styleType == this.redCrossStyle || styleType == this.redMinusStyle) {      icon.setScale(ICONSCALE);    }    LinkType link=kmlObjectFactory.createLinkType();    link.setHref(hrefs.get(styleType));    icon.setIcon(link);    styleType.setIconStyle(icon);    this.mainDoc.getAbstractStyleSelectorGroup().add(kmlObjectFactory.createStyle(styleType));  }}  }
class C{  public void checkCast(final Type type){  if (!type.equals(OBJECT_TYPE)) {    typeInsn(Opcodes.CHECKCAST,type);  }}  }
class C{  private int attributeMap(String name){  Integer num=map.get(name);  if (num == null) {    return 0;  }  return num.intValue();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_ENUM_DECLARATION;}  }
class C{  public void testCacheDefaultTimezone() throws Exception {  final TimeZone defaultTZ=TimeZone.getDefault();  final TimeZone testTZ1=TimeZone.getTimeZone("GMT-2");  final TimeZone testTZ2=TimeZone.getTimeZone("GMT+2");  createTable("testCacheDefTZ","(test TINYINT, dt DATETIME)");  Properties connProps=new Properties();  connProps.setProperty("useTimezone","true");  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  for (  boolean cacheDefTZ : new boolean[]{true,false}) {    try {      String testMsg="Test case [cacheDefaultTimezone=" + cacheDefTZ + "],";      connProps.setProperty("cacheDefaultTimezone",Boolean.toString(cacheDefTZ));      Connection testConn=getConnectionWithProps(connProps);      PreparedStatement testPstmt=testConn.prepareStatement("INSERT INTO testCacheDefTZ VALUES (?, ?)");      sdf.setTimeZone(testTZ1);      java.sql.Timestamp tsIn=new java.sql.Timestamp(sdf.parse("1998-05-21 12:00:00").getTime());      TimeZone.setDefault(testTZ1);      testPstmt.setBoolean(1,cacheDefTZ);      testPstmt.setTimestamp(2,tsIn);      assertEquals(testMsg,1,testPstmt.executeUpdate());      TimeZone.setDefault(testTZ2);      testPstmt.setBoolean(1,cacheDefTZ);      testPstmt.setTimestamp(2,tsIn);      assertEquals(testMsg,1,testPstmt.executeUpdate());      testPstmt.close();      TimeZone.setDefault(defaultTZ);      Statement testStmt=testConn.createStatement();      ResultSet testRs=testStmt.executeQuery("SELECT * FROM testCacheDefTZ WHERE test = " + cacheDefTZ);      assertTrue(testMsg,testRs.next());      java.sql.Timestamp timestampOut=testRs.getTimestamp(2);      assertTrue(testMsg,testRs.next());      assertEquals(testMsg,cacheDefTZ,timestampOut.equals(testRs.getTimestamp(2)));      assertFalse(testMsg,testRs.next());      testRs=testStmt.executeQuery("SELECT * FROM testCacheDefTZ WHERE test = " + cacheDefTZ);      TimeZone.setDefault(testTZ1);      assertTrue(testMsg,testRs.next());      timestampOut=testRs.getTimestamp(2);      TimeZone.setDefault(testTZ2);      assertTrue(testMsg,testRs.next());      assertEquals(testMsg,timestampOut,testRs.getTimestamp(2));      assertFalse(testMsg,testRs.next());      testRs.close();      testStmt.close();      testConn.close();    }  finally {      TimeZone.setDefault(defaultTZ);    }  }}  }
class C{  @Deprecated public void onSuccess(String content){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  int length;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  length=(int)attributes.getLength();  if (("text/html".equals(getContentType()))) {    assertEquals("htmlLength",2,length);  } else {    assertEquals("length",3,length);  }}  }
class C{  @Override public Object callableStatement_getObject(FilterChain chain,CallableStatementProxy statement,String parameterName) throws SQLException {  Object obj=chain.callableStatement_getObject(statement,parameterName);  if (obj instanceof ResultSetProxy) {    resultSetOpenAfter((ResultSetProxy)obj);  }  return obj;}  }
class C{  public static void putFloatField(Object obj,long fieldOff,float val){  UNSAFE.putFloat(obj,fieldOff,val);}  }
class C{  public static <T,K,L extends List<T>>Window<T,K,L> window(BiFunction<Partition<T,K,L>,T,Boolean> insertionPolicy,BiConsumer<Partition<T,K,L>,T> contentsPolicy,Consumer<Partition<T,K,L>> evictDeterminer,BiConsumer<Partition<T,K,L>,T> triggerPolicy,Function<T,K> keyFunction,Supplier<L> listSupplier){  return new WindowImpl<>(insertionPolicy,contentsPolicy,evictDeterminer,triggerPolicy,keyFunction,listSupplier);}  }
class C{  public ServiceSchemeException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static final int wordToByte(int w){  return w >> 8;}  }
class C{  public final void sendRequest() throws IOException {  if (responseSource != null) {    return;  }  prepareRawRequestHeaders();  initResponseSource();  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache != null) {    responseCache.trackResponse(responseSource);  }  if (requestHeaders.isOnlyIfCached() && responseSource.requiresConnection()) {    if (responseSource == ResponseSource.CONDITIONAL_CACHE) {      Util.closeQuietly(cachedResponseBody);    }    this.responseSource=ResponseSource.CACHE;    this.cacheResponse=GATEWAY_TIMEOUT_RESPONSE;    RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(cacheResponse.getHeaders(),true);    setResponse(new ResponseHeaders(uri,rawResponseHeaders),cacheResponse.getBody());  }  if (responseSource.requiresConnection()) {    sendSocketRequest();  } else   if (connection != null) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  public Tasks<VolumeRestRep> deactivateContinuousCopies(URI id,CopiesParam input,VolumeDeleteTypeEnum type){  URI uri=client.uriBuilder(getContinuousCopiesUrl() + "/deactivate").queryParam("type",type).build(id);  TaskList tasks=client.postURI(TaskList.class,input,uri);  return new Tasks<>(client,tasks.getTaskList(),resourceClass);}  }
class C{  public void addParameter(NameValuePair param) throws IllegalArgumentException {  log.trace("enter PostMethod.addParameter(NameValuePair)");  if (param == null) {    throw new IllegalArgumentException("NameValuePair may not be null");  }  addParameter(param.getName(),param.getValue());}  }
class C{  public Level1Quote(Ticker ticker,QuoteType type,ZonedDateTime timeStamp,BigDecimal value){  super(ticker,type,timeStamp);  this.value=value;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  protected Boolean send() throws PropagationException {  Participant part=getParticipant();  try {    part.commit(onephase_);    return null;  } catch (  RollbackException rb) {    throw new PropagationException(rb,false);  }catch (  HeurMixedException heurm) {    throw new PropagationException(heurm,false);  }catch (  HeurRollbackException heurr) {    throw new PropagationException(heurr,false);  }catch (  Exception e) {    String msg="Unexpected error in commit";    LOGGER.logError(msg,e);    HeurHazardException heurh=new HeurHazardException();    throw new PropagationException(heurh,true);  }}  }
class C{  public void loadConf(URL confURL) throws ConfigurationException {  Configuration loadedConf=new PropertiesConfiguration(confURL);  addConfiguration(loadedConf);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.565 -0500",hash_original_method="3A81668836E1D4D5E6C2DBC8F77E3AE9",hash_generated_method="4CE503B62DAEA49E4CABBB209E73D1EA") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public byte[] encode(byte[] raw){  return toAsciiBytes(raw);}  }
class C{  public static byte[] encode(InetAddress value){  byte[] address=value.getAddress();  if (address.length == 4) {    byte[] mapped=new byte[16];    System.arraycopy(IPV4_PREFIX,0,mapped,0,IPV4_PREFIX.length);    System.arraycopy(address,0,mapped,IPV4_PREFIX.length,address.length);    address=mapped;  } else   if (address.length != 16) {    throw new UnsupportedOperationException("Only IPv4 and IPv6 addresses are supported");  }  return address;}  }
class C{  public final long next(){  assert hasNext();  long result=currentValues[pOff++];  if (pOff == currentCount) {    vOff+=1;    pOff=0;    fillBlock();  }  return result;}  }
class C{  public SnmpTooBigException(int n){  varBindCount=n;}  }
class C{  public static void main(String args[]){  try {    if (args.length == 0) {      showUsageAndExit("Eeze needs some information to work.",-1);    }    Eeze eeze=new Eeze();    eeze.parseArgs(args);    eeze.run(args);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static VideoOrientation parse(byte videoOrientation){  return new VideoOrientation(CameraOptions.convert((videoOrientation & 0x08) >>> 3),Orientation.convert(videoOrientation & 0x07));}  }
class C{  public static Sector fromDegrees(double minLatitude,double maxLatitude,double minLongitude,double maxLongitude){  return new Sector(Angle.fromDegrees(minLatitude),Angle.fromDegrees(maxLatitude),Angle.fromDegrees(minLongitude),Angle.fromDegrees(maxLongitude));}  }
class C{  public void visitAll(TraversalVisitor visitor){  while (!triQueue.isEmpty()) {    QuadEdgeTriangle tri=(QuadEdgeTriangle)triQueue.removeFirst();    process(tri,visitor);  }}  }
class C{  public AsyncPlayer(String tag){  if (tag != null) {    mTag=tag;  } else {    mTag="AsyncPlayer";  }}  }
class C{  public void onSheetShown(){}  }
class C{  public static void main(String[] args){  Adempiere.startup(true);  CLogMgt.setLevel(Level.FINE);  CLogMgt.setLoggerLevel(Level.FINE,null);  CreateAdempiere cc=new CreateAdempiere(Database.DB_POSTGRESQL,"127.0.0.2",5432,"adempiere");  cc.setAdempiereUser("adempiere","adempiere");  cc.setDatabaseName("adempiere","adempiere");  if (!cc.testConnection())   return;  cc.cleanStart();  cc.copy("TableName > 'C_RfQResponseLineQty'",false);}  }
class C{  public static void print(String str){  int space=10 - str.length();  for (int j=0; j < space; j++) {    System.out.print(" ");  }}  }
class C{  public void goStraight(double amount){  if (amount == 0) {    return;  }  if (!isBlocked()) {    double radians=getHeadingRadians();    setX(getX() + (float)(amount * Math.cos(radians)));    setY(getY() - (float)(amount * Math.sin(radians)));  }}  }
class C{  public void print(String content){  consumer.accept(content);}  }
class C{  public void testRetainAll(){  LinkedBlockingDeque q=populatedDeque(SIZE);  LinkedBlockingDeque p=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    boolean changed=q.retainAll(p);    if (i == 0)     assertFalse(changed); else     assertTrue(changed);    assertTrue(q.containsAll(p));    assertEquals(SIZE - i,q.size());    p.remove();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_FOR___TRACE_FOR_1:    return getTrace_for_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void paintSliderThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  @Override public void visit(NodeVisitor v){  if (!v.visit(this)) {    return;  }  result.visit(v);  for (  ArrayComprehensionLoop loop : loops) {    loop.visit(v);  }  if (filter != null) {    filter.visit(v);  }}  }
class C{  public static Clusters serializableInstance(){  return new Clusters();}  }
class C{  public a addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private static long UTCDiff(){synchronized (testCalendar) {    testCalendar.setTimeInMillis(System.currentTimeMillis());    final long zoneOffsetHours=testCalendar.get(Calendar.ZONE_OFFSET);    final long DSTOffsetHours=testCalendar.get(Calendar.DST_OFFSET);    return zoneOffsetHours + DSTOffsetHours;  }}  }
class C{  public QueryIndex(String field,boolean asc){  this(field,QueryIndexType.SORTED,asc);}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + "(" + this.state.name()+ ")";}  }
class C{  public long tryWriteLock(){  long s, next;  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : 0L);}  }
class C{  public String toStringX(Properties ctx){  String in=Msg.getMsg(ctx,"Include");  String ex=Msg.getMsg(ctx,"Exclude");  StringBuffer sb=new StringBuffer();  sb.append(Msg.translate(ctx,"AD_Table_ID")).append("=").append(getTableName(ctx)).append(", ").append(Msg.translate(ctx,"Record_ID")).append("=").append(getRecord_ID()).append(" - ").append(Msg.translate(ctx,"IsDependentEntities")).append("=").append(isDependentEntities()).append(" (").append(Msg.translate(ctx,"IsReadOnly")).append("=").append(super.isReadOnly()).append(") - ").append(isExclude() ? ex : in);  return sb.toString();}  }
class C{  public WriteResponse clone(){  WriteResponse result=new WriteResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public void testDescendingIteratorOrdering(){  final LinkedBlockingDeque q=new LinkedBlockingDeque();  for (int iters=0; iters < 100; ++iters) {    q.add(new Integer(3));    q.add(new Integer(2));    q.add(new Integer(1));    int k=0;    for (Iterator it=q.descendingIterator(); it.hasNext(); ) {      assertEquals(++k,it.next());    }    assertEquals(3,k);    q.remove();    q.remove();    q.remove();  }}  }
class C{  private boolean check(int turn){  lastChatTurns.removeSmaller(turn - TIMEFRAME_IN_TURNS);  return !lastChatTurns.isFull();}  }
class C{  private Annotation[] extract(Annotation label) throws Exception {  Class union=label.annotationType();  Method[] list=union.getDeclaredMethods();  if (list.length != 1) {    throw new UnionException("Annotation '%s' is not a valid union for %s",label,type);  }  Method method=list[0];  Object value=method.invoke(label);  return (Annotation[])value;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:27.754 -0400",hash_original_method="08D0F54B07D5BDD02D87F89A064DB127",hash_generated_method="B451B93FC07355C93F3077E905117FAB") @Override public void close() throws IOException {  if (mAudioRecord != 0) {    try {      AudioRecordStop(mAudioRecord);    }  finally {      try {        AudioRecordDelete(mAudioRecord);      }  finally {        mAudioRecord=0;      }    }  }}  }
class C{  public void addMacro(String macro,String value){  if (macro != null && !macro.isEmpty()) {    setChanged();synchronized (LOCK) {      macroMap.put(macro,value);    }    notifyObservers(this);  }}  }
class C{  private List<String> mapAlignments(SymmetricalWordAlignment s2sPrime,SymmetricalWordAlignment sPrime2tPrime,SymmetricalWordAlignment tPrime2t){  int[] sPrime2sPrimePrime=null;  if (dropUnknownWords && s2sPrime.e().size() != sPrime2tPrime.f().size()) {    Sequence<IString> sPrime=s2sPrime.e();    int srcSize=sPrime.size();    sPrime2sPrimePrime=new int[srcSize];    Arrays.fill(sPrime2sPrimePrime,-1);    Sequence<IString> sPrimePrime=sPrime2tPrime.f();    assert sPrimePrime.size() < sPrime.size();    for (int i=0, tgtSize=sPrimePrime.size(); i < tgtSize; ++i) {      IString tgtToken=sPrimePrime.get(i);      for (int j=i; j < srcSize; ++j) {        if (tgtToken == sPrime.get(j)) {          sPrime2sPrimePrime[j]=i;          break;        }      }    }  }  List<String> alignmentList=new LinkedList<>();  for (int i=0, size=s2sPrime.fSize(); i < size; ++i) {    Set<Integer> alignments=s2sPrime.f2e(i);    for (    int j : alignments) {      if (sPrime2sPrimePrime != null) {        j=sPrime2sPrimePrime[j];        if (j < 0)         continue;      }      Set<Integer> alignments2=sPrime2tPrime.f2e(j);      for (      int k : alignments2) {        Set<Integer> alignments3=tPrime2t.f2e(k);        for (        int q : alignments3) {          alignmentList.add(String.format("%d-%d",i,q));        }      }    }  }  return alignmentList;}  }
class C{  @Override public void addPages(){  super.addPages();  page=new EditFilterWizardPage(filter,filterFields);  addPage(page);}  }
class C{  public DTMAxisIterator reset(){  _sp=_oldsp;  return resetPosition();}  }
class C{  public static boolean eeq(Object left,Object right) throws PageException {  return left == right;}  }
class C{  private void isScrollCompleted(){  if (mCurrentVisibleItemCount > 0 && mCurrentScrollState == SCROLL_STATE_IDLE) {    if (mCellIsMobile && mIsMobileScrolling) {      handleMobileCellScroll();    } else     if (mIsWaitingForScrollFinish) {      touchEventsEnded();    }  }}  }
class C{  private void ensureStaticNoObject(final boolean py3k){  final Collection<PyPresenterTestMemberEntry> members=launchAndGetMembers("StaticOnly");  final Matcher<Iterable<? extends PyPresenterTestMemberEntry>> matcher=Matchers.containsInAnyOrder(new PyPresenterTestMemberEntry("static_method()",true,true,py3k));  compareMembers(members,matcher);}  }
class C{  public static String buildPath(JsonPath jsonPath){  List<String> urlParts=new LinkedList<>();  JsonPath currentJsonPath=jsonPath;  String pathPart;  do {    if (currentJsonPath instanceof RelationshipsPath) {      pathPart=RELATIONSHIP_MARK + SEPARATOR + currentJsonPath.getElementName();    } else     if (currentJsonPath instanceof FieldPath) {      pathPart=currentJsonPath.getElementName();    } else {      pathPart=currentJsonPath.getElementName();      if (currentJsonPath.getIds() != null) {        pathPart+=SEPARATOR + mergeIds(currentJsonPath.getIds());      }    }    urlParts.add(pathPart);    currentJsonPath=currentJsonPath.getParentResource();  } while (currentJsonPath != null);  Collections.reverse(urlParts);  return SEPARATOR + StringUtils.join(SEPARATOR,urlParts) + SEPARATOR;}  }
class C{  @Override public void addEventListener3(IGroupChatListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mGroupChatEventBroadcaster.addGroupChatEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public boolean isRemovingUnknownAssignments(){  return isRemovingUnknown;}  }
class C{  private int scanDirectory(FtpNode path) throws IOException, BadLoginException, InterruptedException {  if (isStopped())   throw new InterruptedException();  logger.info("LIST " + path);  boolean accepted=checkIt(path);  int total=0;  if (accepted)   total++;  if ((!accepted || isForceNavigate()) && !isFile(path)) {    for (int index=0; index < path.getChildrenCount(); index++) {      DrbItem item=path.getChildAt(index);      total+=scanDirectory((FtpNode)item);    }  }  return total;}  }
class C{  public static NamedLocationIdentity mutable(String name){  return create(name,false);}  }
class C{  private void prepareRPConsistencyGroupDataWithDuplicates() throws Exception {  String cg2Name="rpCg3";  BlockConsistencyGroup rpCg=createBlockConsistencyGroup(cg2Name,null,Types.RP.name(),true);  rpConsistencyGroupURI3=rpCg.getId();  addProtectionSetAndVolumes(rpCg,"ps-dup",3);  addProtectionSetAndVolumes(rpCg,"ps-dup",3);  String prefix="ps-dup2-";  ProtectionSet cg2ps1=createProtectionSet(prefix + "ProtectionSet",projectURI);  ProtectionSet cg2ps2=createProtectionSet(prefix + "ProtectionSet",projectURI);  List<Volume> rpCgVolumes=createRpVolumes(prefix + "VolumeA",1,cg2ps1,false);  addVolumesToBlockConsistencyGroup(rpCg.getId(),rpCgVolumes);  addVolumesToProtectionSet(cg2ps1.getId(),rpCgVolumes);  addVolumesToProtectionSet(cg2ps2.getId(),rpCgVolumes);}  }
class C{  public static LogicConstantNode forBoolean(boolean v){  return new LogicConstantNode(v);}  }
class C{  public void testMixedRange() throws Exception {  int upper=10;  String range="1-3,6,8-last";  Range index=getRange(range,upper);  int[] expected=new int[]{0,1,2,5,7,8,9,10};  assertEquals(range,index.getRanges());  assertEquals(expected.length,index.getSelection().length);  for (int i=0; i < expected.length; i++)   assertEquals(expected[i],index.getSelection()[i]);}  }
class C{  public Result filterOnly(ResultLevel level){  Result ret=new Result();  for (  ResultEntry l : this.log) {    if (l.getLevel().compareTo(level) <= 0) {      ret.add(l);    }  }  return ret;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.345 -0500",hash_original_method="57032B96B3878CEC3CD253F707148B38",hash_generated_method="CC234EA5E37E807494135274DD1A4092") public int end(){  return end(0);}  }
class C{  public void checkAndShowIfQualify(){  mPrefEditor.putInt(PREF_KEY_LAUNCH_COUNT,getLaunchCount() + 1);  mPrefEditor.commit();  if (shouldMonitor()) {    if (mInitialThreshold < 0) {      throw new IllegalStateException("Initial threshold has not been specified yet. Did " + "you forget to call setInitialLaunchThreshold?");    }    if (getLaunchCount() == getNextThreshold()) {      FragmentManager manager=mActivity.getSupportFragmentManager();      new RatePromptDialog().show(manager,"id.ridsatrio.filtrate.ratedialog");    }  }}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#startPrefixMapping: " + prefix + ", "+ uri);  if (m_contentHandler != null) {    m_contentHandler.startPrefixMapping(prefix,uri);  }}  }
class C{  public void removeRelationType(String relationTypeName) throws RelationServiceNotRegisteredException, IllegalArgumentException, RelationTypeNotFoundException {  isActive();  if (relationTypeName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"removeRelationType",relationTypeName);  RelationType relType=getRelationType(relationTypeName);  List<String> relIdList=null;synchronized (myRelType2RelIdsMap) {    List<String> relIdList1=myRelType2RelIdsMap.get(relationTypeName);    if (relIdList1 != null) {      relIdList=new ArrayList<String>(relIdList1);    }  }synchronized (myRelType2ObjMap) {    myRelType2ObjMap.remove(relationTypeName);  }synchronized (myRelType2RelIdsMap) {    myRelType2RelIdsMap.remove(relationTypeName);  }  if (relIdList != null) {    for (    String currRelId : relIdList) {      try {        removeRelation(currRelId);      } catch (      RelationNotFoundException exc1) {        throw new RuntimeException(exc1.getMessage());      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"removeRelationType");  return;}  }
class C{  private static int med3(double x[],int a,int b,int c){  return x[a] < x[b] ? x[b] < x[c] ? b : x[a] < x[c] ? c : a : x[b] > x[c] ? b : x[a] > x[c] ? c : a;}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public void updateQuery(final IRI query,final String userName,final boolean shared,final QueryLanguage queryLanguage,final String queryText,final boolean infer,final int rowsPerPage) throws RepositoryException, UpdateExecutionException, MalformedQueryException {  final QueryStringBuilder update=new QueryStringBuilder(UPDATE);  update.replaceURI(QUERY,query);  this.replaceUpdateFields(update,userName,shared,queryLanguage,queryText,infer,rowsPerPage);  this.updateQueryRepository(update.toString());}  }
class C{  public ExpectedExceptionCheckGen(VisibilityPredicate visibility,ExceptionPredicate isExpected){  this.visibility=visibility;  this.isExpected=isExpected;}  }
class C{  public static void reallocate(long memPtr,int cap){  PlatformMemoryUtils.reallocate(memPtr,cap);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void add(String[] titles,double[] values){  add(mCategories.size() + "",titles,values);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildCampfireArea(zone);}  }
class C{  public PdfRendererBuilder useUriResolver(FSUriResolver resolver){  this._resolver=resolver;  return this;}  }
class C{  public static byte[] publicKeyFromPrivate(BigInteger privKey,boolean compressed){  ECPoint point=CURVE.getG().multiply(privKey);  if (compressed)   point=compressPoint(point);  return point.getEncoded();}  }
class C{  public final LC align(String ax,String ay){  if (ax != null)   alignX(ax);  if (ay != null)   alignY(ay);  return this;}  }
class C{  private <Type extends Message>RpcCallback<Type> wrapsCallback(MockCallback<?> callback){  EasyMock.reportMatcher(new WrapsCallback(callback));  return null;}  }
class C{  public <R extends BaseModel,D>R post(String path,D data,Class<R> cls) throws IOException, HttpResponseException {  HttpPost request=new HttpPost(api(path));  if (data != null) {    StringEntity stringEntity=new StringEntity(mapper.writeValueAsString(data),"application/json");    request.setEntity(stringEntity);  }  HttpResponse response=client.execute(request,localContext);  int status=response.getStatusLine().getStatusCode();  try {    if (status < 200 || (status >= 300 && status != 302)) {      throw new HttpResponseException(status,response.getStatusLine().getReasonPhrase());    }    if (cls != null) {      return objectFromResponse(cls,response);    } else {      return null;    }  }  finally {    EntityUtils.consume(response.getEntity());  }}  }
class C{  public void offsetTo(int newLeft,int newTop){  right+=newLeft - left;  bottom+=newTop - top;  left=newLeft;  top=newTop;}  }
class C{  public HttpConnection(final String host,final int port){  this(null,-1,host,null,port,Protocol.getProtocol("http"));}  }
class C{  public static void startBrowser(String url){  s_log.info(url);  contextProvider.showURL(url);}  }
class C{  public double distanceSq(final Double2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  public static double toRadians(double degrees){  return degrees * (PI / 180.0);}  }
class C{  public static Rectangle2D rectangleByRadius(Rectangle2D rect,double radiusW,double radiusH){  ParamChecks.nullNotPermitted(rect,"rect");  double x=rect.getCenterX();  double y=rect.getCenterY();  double w=rect.getWidth() * radiusW;  double h=rect.getHeight() * radiusH;  return new Rectangle2D.Double(x - w / 2.0,y - h / 2.0,w,h);}  }
class C{  private boolean isLeadVdcForGeoUpgrade(){  String localId=drUtil.getLocalVdcShortId();  String strVdcIds=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);  String[] vdcIds=strVdcIds.split(",");  for (  String id : vdcIds) {    if (localId.compareToIgnoreCase(id) > 0) {      log.info("Current VDC {} is greater than {}.",localId,id);      return false;    }  }  log.info("Current VDC {} is the lead in current geo {}",localId,strVdcIds);  return true;}  }
class C{  static public Appendable dumpBlobs(final String namespace,final IIndex ndx){  final StringWriter w=new StringWriter(100 * Bytes.kilobyte32);  DumpLexicon.dumpBlobs(w,true,namespace,ndx);  return w.getBuffer();}  }
class C{  public Vector3f mult(float scalar,Vector3f product){  if (null == product) {    product=new Vector3f();  }  product.x=x * scalar;  product.y=y * scalar;  product.z=z * scalar;  return product;}  }
class C{  public final double doOperation() throws OperatorFailedException {  int index;  if (sampleAll) {    index=tree.getRoot().getNumber();  } else {    do {      index=MathUtils.nextInt(tree.getNodeCount());    } while (tree.isExternal(tree.getNode(index)));  }  double logBackward=rateEvolution.getLogLikelihood();  sampleNode(tree.getNode(index));  double logForward=rateEvolution.getLogLikelihood();  return logBackward - logForward;}  }
class C{  public static boolean accept(final Statement stmt,final ValueExpr condition,final EvaluationStrategy strategy) throws ValueExprEvaluationException, QueryEvaluationException {  final QueryBindingSet bindings=new QueryBindingSet();  bindings.addBinding(SUBJ_VAR.getName(),stmt.getSubject());  bindings.addBinding(PRED_VAR.getName(),stmt.getPredicate());  bindings.addBinding(OBJ_VAR.getName(),stmt.getObject());  if (stmt.getContext() != null) {    bindings.addBinding(CON_VAR.getName(),stmt.getContext());  }  return strategy.isTrue(condition,bindings);}  }
class C{  protected CCPropertyAction(float aDuration,String key,float from,float to){  super(aDuration);  key_=key;  setMethod_=null;  to_=to;  from_=from;}  }
class C{  protected boolean compareFilesInt(InputStream exp,File generated,String excludePtrn){  try (BufferedReader baseReader=new BufferedReader(new InputStreamReader(exp))){    try (BufferedReader generatedReader=new BufferedReader(new FileReader(generated))){      String baseLine;      while ((baseLine=baseReader.readLine()) != null) {        String generatedLine=generatedReader.readLine();        if (!baseLine.equals(generatedLine) && !baseLine.contains(excludePtrn) && !generatedLine.contains(excludePtrn)) {          System.out.println("Generated file: " + generated.toString());          System.out.println("Expected: " + baseLine);          System.out.println("Generated: " + generatedLine);          return false;        }      }      return true;    }   } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  private void drawVerticalAxisTrace(Graphics2D g2,int y){  Rectangle2D dataArea=getScreenDataArea();  g2.setXORMode(Color.orange);  if (((int)dataArea.getMinY() < y) && (y < (int)dataArea.getMaxY())) {    if (this.horizontalTraceLine != null) {      g2.draw(this.horizontalTraceLine);      this.horizontalTraceLine.setLine((int)dataArea.getMinX(),y,(int)dataArea.getMaxX(),y);    } else {      this.horizontalTraceLine=new Line2D.Float((int)dataArea.getMinX(),y,(int)dataArea.getMaxX(),y);    }    g2.draw(this.horizontalTraceLine);  }  g2.setPaintMode();}  }
class C{  public void changeBufferUsage(BufferInfo bufferInfo,final int usage){  GLES20.glDeleteBuffers(1,new int[]{bufferInfo.bufferHandle},0);  createBuffer(bufferInfo,bufferInfo.bufferType,bufferInfo.buffer,bufferInfo.target);}  }
class C{  public boolean nextTo(final Entity entity){  return nextTo(entity,0.25);}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  protected void handleMethodArguments(LIRInstruction op){  if (op instanceof ValueMoveOp) {    ValueMoveOp move=(ValueMoveOp)op;    if (optimizeMethodArgument(move.getInput())) {      StackSlot slot=asStackSlot(move.getInput());      if (DetailedAsserts.getValue()) {        assert op.id() > 0 : "invalid id";        assert allocator.blockForId(op.id()).getPredecessorCount() == 0 : "move from stack must be in first block";        assert isVariable(move.getResult()) : "result of move must be a variable";        if (Debug.isLogEnabled()) {          Debug.log("found move from stack slot %s to %s",slot,move.getResult());        }      }      Interval interval=allocator.intervalFor(move.getResult());      interval.setSpillSlot(slot);      interval.assignLocation(slot);    }  }}  }
class C{  @Override public void clear(){  super.clear();  int[] keys=_set;  float[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  public GroovyCodeSource(Reader reader,String name,String codeBase){  this.name=name;  this.codeSource=createCodeSource(codeBase);  try {    this.scriptText=IOGroovyMethods.getText(reader);  } catch (  IOException e) {    throw new RuntimeException("Impossible to read the text content from that reader, for script: " + name + " with codeBase: "+ codeBase,e);  }}  }
class C{  public RDN(AttributeTypeAndValue[] aAndVs){  this.values=new DERSet(aAndVs);}  }
class C{  @ObjectiveCName("sendCustomJsonMessageWithPeer:withJson:") public void sendCustomJsonMessage(@NotNull Peer peer,@NotNull JsonContent content){  modules.getMessagesModule().sendJson(peer,content);}  }
class C{  protected boolean isBlockedLink(Link l){  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  return (isBlockedPort(n1) || isBlockedPort(n2));}  }
class C{  private void addRulesToOpenNodes(Collection rules,double scoreUpperBound){  if (scoreUpperBound <= this.getPruningScore()) {    return;  }  Iterator it=rules.iterator();  while (it.hasNext()) {    this.openNodes.add(new RuleWithScoreUpperBound((ConjunctiveRuleModel)it.next(),scoreUpperBound));  }}  }
class C{  public void textMode(int mode){  g.textMode(mode);}  }
class C{  public Matrix4d rotateY(double ang){  return rotateY(ang,this);}  }
class C{  public OMGraphic create(String classname,GraphicAttributes ga,DrawingToolRequestor requestor){  return create(classname,ga,requestor,isMask(SHOW_GUI_BEHAVIOR_MASK));}  }
class C{  public void performResumeOperationAsync(final String vmId,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/resume",getBasePath(),vmId);  createObjectAsync(path,null,responseCallback);}  }
class C{  public void onMessage(Message message){  if (!(message instanceof ObjectMessage)) {    logTaskMessageInstanceError(message);    return;  }  logger.logDebug("Received object message from task queue",Log4jLogger.SYSTEM_LOG);  ObjectMessage om=null;  TaskHandler handler=null;  try {    om=(ObjectMessage)message;    Serializable messageObject=om.getObject();    if (!(messageObject instanceof TaskMessage) && !(messageObject instanceof PriceModel)) {      throw new IllegalArgumentException("JMS message did not contain a valid task message");    }    if (messageObject instanceof PriceModel) {      ExternalPriceModelPayload payload=new ExternalPriceModelPayload();      payload.setPriceModel((PriceModel)messageObject);      messageObject=new TaskMessage(ExternalPriceModelHandler.class,payload);    }    handler=TaskHandlerFactory.getInstance().getTaskHandler((TaskMessage)messageObject,createServiceFacade());    ds.setCurrentUserKey(Long.valueOf(((TaskMessage)messageObject).getCurrentUserKey()));    handler.execute();  } catch (  IllegalArgumentException iae) {    logIllegalArgumentExceptionError(iae);  }catch (  IllegalAccessException iace) {    logger.logError(Log4jLogger.SYSTEM_LOG,iace,LogMessageIdentifier.ERROR_CREATE_INSTANCE_FOR_TASK_HANDLER_FAILED);  }catch (  InstantiationException ie) {    logger.logError(Log4jLogger.SYSTEM_LOG,ie,LogMessageIdentifier.ERROR_CREATE_INSTANCE_FOR_TASK_HANDLER_FAILED);  }catch (  Exception e) {    if (handler != null) {      try {        handler.handleError(e);      } catch (      Exception ex) {        TaskErrorHandlingException thex=new TaskErrorHandlingException("Error handling of task message was failed!",ex);        logger.logError(Log4jLogger.SYSTEM_LOG,thex,LogMessageIdentifier.ERROR_HANDLING_MESSAGE_ERROR_FAILED);      }    } else {      TaskErrorHandlingException thex=new TaskErrorHandlingException("Error handling of task message was failed because the handler cannot be found!",e);      logger.logError(Log4jLogger.SYSTEM_LOG,thex,LogMessageIdentifier.ERROR_HANDLING_MESSAGE_ERROR_FAILED_NO_HANDLER);    }  } finally {    ds.setCurrentUserKey(null);  }}  }
class C{  public void add(Character character){  elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private int combineReal(double val,byte[] buf,int off,int len,byte[] mant,int lmant,int shift){  double pos=Math.abs(val);  boolean simple=false;  int minSize;  int maxSize;  if (pos >= ByteFormatter.DEFAULT_SIMPLE_MIN && pos <= ByteFormatter.DEFAULT_SIMPLE_MAX) {    simple=true;  }  int exp=lmant - shift - 1;  int lexp=0;  if (!simple) {    lexp=format(exp,this.tbuf2,0,ByteFormatter.TEMP_BUFFER_SIZE);    minSize=lexp + 2;    maxSize=lexp + lmant + 2;  } else {    if (exp >= 0) {      minSize=exp + 1;      int i;      for (i=0; i < lmant && i <= exp; i++) {        if (mant[i] != (byte)'9') {          break;        }      }      if (i > exp && i < lmant && mant[i] >= (byte)'5') {        minSize++;      }      maxSize=lmant + 1;      if (maxSize <= minSize) {        maxSize=minSize + 1;      }    } else {      minSize=2;      maxSize=1 + Math.abs(exp) + lmant;    }  }  if (val < 0) {    minSize++;  }  if (minSize > len || minSize > buf.length - off) {    truncationFiller(buf,off,len);    return off + len;  }  if (val < 0) {    buf[off]=(byte)'-';    off++;    len--;  }  if (simple) {    return Math.abs(mantissa(mant,lmant,exp,simple,buf,off,len));  } else {    off=mantissa(mant,lmant,0,simple,buf,off,len - lexp - 1);    if (off < 0) {      off=-off;      len-=off;      if (exp == MAXIMUM_SINGLE_DIGIT_INTEGER || exp == MAXIMUM_TWO_DIGIT_INTEGER) {        if (off + len == minSize) {          truncationFiller(buf,off,len);          return off + len;        } else {          off--;        }      }      exp++;      lexp=format(exp,this.tbuf2,0,ByteFormatter.TEMP_BUFFER_SIZE);    }    buf[off]=(byte)'E';    off++;    System.arraycopy(this.tbuf2,0,buf,off,lexp);    return off + lexp;  }}  }
class C{  public CatalogEntryRemovedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Client createClient(ClientConfig config){  try {    config.getProperties().put(HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,createPermissiveHTTPSProperties());  } catch (  Exception ex) {    log.error("Unexpected failure while configuring trusting HTTPS properties",ex);  }  return Client.create(config);}  }
class C{  public List<Todo> list() throws ApiException {  Object postBody=null;  String path="/todo-service/todo".replaceAll("\\{format\\}","json");  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,String> formParams=new HashMap<String,String>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  if (contentType.startsWith("multipart/form-data")) {    boolean hasFields=false;    FormDataMultiPart mp=new FormDataMultiPart();    if (hasFields)     postBody=mp;  } else {  }  try {    String[] authNames=new String[]{};    String response=apiClient.invokeAPI(path,"GET",queryParams,postBody,headerParams,formParams,accept,contentType,authNames);    if (response != null) {      return (List<Todo>)apiClient.deserialize(response,"array",Todo.class);    } else {      return null;    }  } catch (  ApiException ex) {    throw ex;  }}  }
class C{  public static ShoppingCartItem makePurchaseOrderItem(Integer cartLocation,String productId,BigDecimal selectedAmount,BigDecimal quantity,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,GenericValue supplierProduct,Timestamp shipBeforeDate,Timestamp shipAfterDate,Timestamp cancelBackOrderDate) throws CartItemModifyException, ItemNotFoundException {  Delegator delegator=cart.getDelegator();  GenericValue product=null;  try {    product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);  }  if (product == null) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);    String excMsg=UtilProperties.getMessage(resource_error,"item.product_not_found",messageMap,cart.getLocale());    Debug.logWarning(excMsg,module);    throw new ItemNotFoundException(excMsg);  }  ShoppingCartItem newItem=new ShoppingCartItem(product,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,cart.getLocale(),itemType,itemGroup,null);  if ("Y".equals(product.getString("isVirtual"))) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));    String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_virtual",messageMap,cart.getLocale());    Debug.logWarning(excMsg,module);    throw new CartItemModifyException(excMsg);  }  if ("AGGREGATED".equals(product.getString("productTypeId")) || "AGGREGATED_SERVICE".equals(product.getString("productTypeId"))) {    if (configWrapper == null || !configWrapper.isCompleted()) {      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));      String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_not_configured_correctly",messageMap,cart.getLocale());      Debug.logWarning(excMsg,module);      throw new CartItemModifyException(excMsg);    }  }  if (cartLocation == null) {    cart.addItemToEnd(newItem);  } else {    cart.addItem(cartLocation.intValue(),newItem);  }  if (selectedAmount != null) {    newItem.setSelectedAmount(selectedAmount);  }  newItem.setShipBeforeDate(shipBeforeDate != null ? shipBeforeDate : cart.getDefaultShipBeforeDate());  newItem.setShipAfterDate(shipAfterDate != null ? shipAfterDate : cart.getDefaultShipAfterDate());  newItem.setCancelBackOrderDate(cancelBackOrderDate != null ? cancelBackOrderDate : cart.getCancelBackOrderDate());  try {    newItem.setQuantity(quantity,dispatcher,cart,true,false);    cart.setItemShipGroupQty(newItem,quantity,0);  } catch (  CartItemModifyException e) {    cart.removeCartItem(cart.getItemIndex(newItem),dispatcher);    cart.clearItemShipInfo(newItem);    cart.removeEmptyCartItems();    throw e;  }  if (supplierProduct != null) {    newItem.setSupplierProductId(supplierProduct.getString("supplierProductId"));    newItem.setName(getPurchaseOrderItemDescription(product,supplierProduct,cart.getLocale()));    newItem.setBasePrice(supplierProduct.getBigDecimal("lastPrice"));  } else {    newItem.setName(product.getString("internalName"));  }  return newItem;}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (objectToCompare instanceof Tradestrategy) {    Tradestrategy tradestrategy=(Tradestrategy)objectToCompare;    if (this.getContract().equals(tradestrategy.getContract())) {      if (this.getTradingday().getOpen().compareTo(tradestrategy.getTradingday().getOpen()) == 0) {        if (this.getStrategy().getName().equals(tradestrategy.getStrategy().getName())) {          if (this.getPortfolio().getName().equals(tradestrategy.getPortfolio().getName())) {            if (this.getBarSize().equals(tradestrategy.getBarSize())) {              return true;            }          }        }      }    }  }  return false;}  }
class C{  public <T extends IntentionAction & LocalQuickFix>void registerBatchFix(@NotNull T fix,@Nullable TextRange range,@Nullable final HighlightDisplayKey key){  if (range == null) {    range=new TextRange(myStartOffset,myEndOffset);  }  if (myBatchFixes == null) {    myBatchFixes=new ArrayList<QuickFixInfo>();  }  myBatchFixes.add(new QuickFixInfo(fix,range,key));}  }
class C{  @SuppressWarnings("unchecked") protected static boolean sameType(Collection[] cols){  List all=new LinkedList();  for (  Collection col : cols) {    all.addAll(col);  }  if (all.isEmpty())   return true;  Object first=all.get(0);  Class baseClass;  if (first instanceof Number) {    baseClass=Number.class;  } else   if (first == null) {    baseClass=NullObject.class;  } else {    baseClass=first.getClass();  }  for (  Collection col : cols) {    for (    Object o : col) {      if (!baseClass.isInstance(o)) {        return false;      }    }  }  return true;}  }
class C{  @Override public String toString(){  String s="o:" + offset + " p:"+ position+ " c:"+ count;  if (rptGroup >= 0) {    s+=" rpt:" + rptGroup + ",i"+ rptInd;  }  return s;}  }
class C{  private void addTail(DisiWrapper s){  tail[tailSize]=s;  upHeapCost(tail,tailSize);  tailSize+=1;}  }
class C{  public static void collectImports(final IJavaProject project,final ASTNode node,final Collection<ITypeBinding> typeBindings,final Collection<IBinding> staticBindings,final Collection<IBinding> excludeBindings,final boolean declarations){  Assert.isNotNull(project);  Assert.isNotNull(node);  Assert.isNotNull(typeBindings);  Assert.isNotNull(staticBindings);  final Set<SimpleName> types=new HashSet<SimpleName>();  final Set<SimpleName> members=new HashSet<SimpleName>();  ImportReferencesCollector.collect(node,project,null,declarations,types,members);  Name name=null;  IBinding binding=null;  for (final Iterator<SimpleName> iterator=types.iterator(); iterator.hasNext(); ) {    name=iterator.next();    binding=name.resolveBinding();    if (binding instanceof ITypeBinding) {      final ITypeBinding type=(ITypeBinding)binding;      if (excludeBindings == null || !excludeBindings.contains(type))       typeBindings.add(type);    }  }  for (final Iterator<SimpleName> iterator=members.iterator(); iterator.hasNext(); ) {    name=iterator.next();    binding=name.resolveBinding();    if (binding != null && (excludeBindings == null || !excludeBindings.contains(binding)))     staticBindings.add(binding);  }}  }
class C{  private static String readString(Reader reader) throws IOException {  StringWriter writer=new StringWriter();  try {    int i;    while ((i=reader.read()) != -1) {      writer.write(i);    }  }  finally {    try {      reader.close();      writer.close();    } catch (    Exception ex) {      log.warn("Could not close reader/writer: " + ex,ex);    }  }  return writer.toString();}  }
class C{  public DefaultActivityModel(Object owner,String title,String note,int min,int max){  this(owner,title,note,min,max,false);}  }
class C{  public Anonymous_action_2_ createAnonymous_action_2_(){  Anonymous_action_2_Impl anonymous_action_2_=new Anonymous_action_2_Impl();  return anonymous_action_2_;}  }
class C{  public static BlockDirection randomDirection8(Random random){  return DIR8[random.nextInt(DIR8.length)];}  }
class C{  public void addConnectionCallback(OneSheeldConnectionCallback connectionCallback){  if (connectionCallback != null && !connectionCallbacks.contains(connectionCallback))   connectionCallbacks.add(connectionCallback);}  }
class C{  public static XMLTree create(String rootName){  return from(String.format(ROOT_TEMPLATE,rootName,rootName));}  }
class C{  public ConcurrentReaderHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);}  }
class C{  public Boolean rawScores(){  return rawScores;}  }
class C{  private static void cleanUpNullReferences(final MemoizeCache<Object,Object> cache,final ReferenceQueue queue){  while (queue.poll() != null) {  }  cache.cleanUpNullReferences();}  }
class C{  public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  m_Train=new Instances(instances,0,instances.numInstances());  init_m_Attributes();}  }
class C{  public void removeRow(int ind) throws SQLException {  notSupported();}  }
class C{  public void run(){  runWorker(this);}  }
class C{  public static boolean writeMetricsConfig(final Path dir){  if (!metricsEnabled()) {    LOGGER.info("Metrics is not enabled");    return false;  }  String host=System.getenv(STATSD_HOST_ENV);  int port;  try {    port=Integer.parseInt(System.getenv(STATSD_PORT_ENV));  } catch (  NumberFormatException ne) {    LOGGER.error("Failed to parse port parameter",ne);    return false;  }  LOGGER.info("Building {}",CONFIG_FILE);  Map<String,Object> hostMap=new HashMap<>();  hostMap.put("host",host);  hostMap.put("port",port);  List<Object> hostMapList=new ArrayList<>();  hostMapList.add(hostMap);  Map<String,Object> statsdMap=new HashMap<>();  statsdMap.put("period",STATSD_FLUSH_PERIOD);  statsdMap.put("timeunit",STATSD_FLUSH_PERIOD_UNIT);  statsdMap.put("hosts",hostMapList);  List<Object> statsdMapList=new ArrayList<>();  statsdMapList.add(statsdMap);  final Map<String,Object> yamlMap=new HashMap<>();  yamlMap.put("statsd",statsdMapList);  LOGGER.info("Writing {}",CONFIG_FILE);  final Yaml yaml=new Yaml();  final File metricsYaml=dir.resolve(CONFIG_FILE).toFile();  try (BufferedWriter bw=new BufferedWriter(new FileWriter(metricsYaml))){    yaml.dump(yamlMap,bw);  } catch (  IOException ex) {    LOGGER.error("Failed to write configuration",ex);    return false;  }  LOGGER.info("Wrote {}",CONFIG_FILE);  return true;}  }
class C{  public Invocation(){  _classLoader=Thread.currentThread().getContextClassLoader();  _isFiner=log.isLoggable(Level.FINER);}  }
class C{  public static Signature serializableInstance(){  return new Signature("+",true,false,"a");}  }
class C{  public boolean doesMaxRowSizeIncludeBlobs() throws SQLException {  return false;}  }
class C{  boolean deleteSnapshot(String snapshotName){  NaElement elem=new NaElement("snapshot-delete");  elem.addNewChild("volume",name);  elem.addNewChild("snapshot",snapshotName);  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to delete snapshot: " + snapshotName;    log.error(msg,e);    throw new NetAppException(msg,e);  }  return true;}  }
class C{  public static Object ask(ActorRef actor,Object message) throws Exception {  return ask(actor,message,DEFAULT_ASK_TIMEOUT);}  }
class C{  void moveCursorToFolder(Cursor cursor,long folderToFind,int idIndex) throws AssertionError {  if (!cursor.moveToFirst()) {    throw new AssertionError("No folders in the database!");  }  long folder;  do {    folder=cursor.getLong(idIndex);  } while (folder != folderToFind && cursor.moveToNext());  if (cursor.isAfterLast()) {    throw new AssertionError("Folder(id=" + folderToFind + ") holding this bookmark does not exist!");  }}  }
class C{  public SVGBuilder readFromString(String svgData){  this.data=new ByteArrayInputStream(svgData.getBytes());  return this;}  }
class C{  public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType,SerializationConfig config,AnnotatedMember accessor,BeanProperty property) throws JsonMappingException {  JavaType contentType=containerType.getContentType();  AnnotationIntrospector ai=config.getAnnotationIntrospector();  TypeResolverBuilder<?> b=ai.findPropertyContentTypeResolver(config,accessor,containerType);  if (b == null) {    return createTypeSerializer(config,contentType,property);  }  Collection<NamedType> subtypes=config.getSubtypeResolver().collectAndResolveSubtypes(accessor,config,ai);  return b.buildTypeSerializer(config,contentType,subtypes,property);}  }
class C{  public boolean onKeyDown(View view,Editable content,int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {    press(content,CAP);    try {      IPowerManager power=IPowerManager.Stub.asInterface(ServiceManager.getService("power"));      int state=content.getSpanFlags(CAP);      if (state == PRESSED || state == LOCKED) {        power.setKeyboardLight(true,1);      } else {        power.setKeyboardLight(false,1);      }    } catch (    RemoteException doe) {    }    return true;  }  if (keyCode == KeyEvent.KEYCODE_ALT_LEFT || keyCode == KeyEvent.KEYCODE_ALT_RIGHT || keyCode == KeyEvent.KEYCODE_NUM) {    press(content,ALT);    try {      IPowerManager power=IPowerManager.Stub.asInterface(ServiceManager.getService("power"));      int state=content.getSpanFlags(ALT);      if (state == PRESSED || state == LOCKED) {        power.setKeyboardLight(true,2);      } else {        power.setKeyboardLight(false,2);      }    } catch (    RemoteException doe) {    }    return true;  }  if (keyCode == KeyEvent.KEYCODE_SYM) {    press(content,SYM);    return true;  }  return false;}  }
class C{  public void senSegment(String text,List senList){  senList.clear();  String resultStr=senSegment(text);  StringTokenizer senTknr=new StringTokenizer(resultStr,"\n");  while (senTknr.hasMoreTokens()) {    senList.add(senTknr.nextToken());  }}  }
class C{  public void execute(Connection conn) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private void registerLocationListener(){  if (myTracksLocationManager == null) {    Log.e(TAG,"locationManager is null.");    return;  }  try {    long interval=locationListenerPolicy.getDesiredPollingInterval();    myTracksLocationManager.requestLocationUpdates(interval,locationListenerPolicy.getMinDistance(),locationListener);    currentRecordingInterval=interval;  } catch (  RuntimeException e) {    Log.e(TAG,"Could not register location listener.",e);  }}  }
class C{  public static float parseFloat(String text) throws DataParseException {  try {    return Float.parseFloat(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  private void LoadELFProgram(ByteBuffer f,SceModule module,int baseAddress,Elf32 elf,int elfOffset,boolean analyzeOnly) throws IOException {  List<Elf32ProgramHeader> programHeaderList=elf.getProgramHeaderList();  Memory mem=Memory.getInstance();  int i=0;  for (  Elf32ProgramHeader phdr : programHeaderList) {    if (log.isTraceEnabled()) {      log.trace(String.format("ELF Program Header: %s",phdr.toString()));    }    if (phdr.getP_type() == 0x00000001L) {      int fileOffset=(int)phdr.getP_offset();      int memOffset=baseAddress + (int)phdr.getP_vaddr();      if (!Memory.isAddressGood(memOffset)) {        memOffset=(int)phdr.getP_vaddr();        if (!Memory.isAddressGood(memOffset)) {          log.warn(String.format("Program header has invalid memory offset 0x%08X!",memOffset));        }      }      int fileLen=(int)phdr.getP_filesz();      int memLen=(int)phdr.getP_memsz();      if (log.isDebugEnabled()) {        log.debug(String.format("PH#%d: loading program %08X - file %08X - mem %08X",i,memOffset,memOffset + fileLen,memOffset + memLen));        log.debug(String.format("PH#%d:\n%s",i,phdr));      }      f.position(elfOffset + fileOffset);      if (f.position() + fileLen > f.limit()) {        int newLen=f.limit() - f.position();        log.warn(String.format("PH#%d: program overflow clamping len %08X to %08X",i,fileLen,newLen));        fileLen=newLen;      }      if (!analyzeOnly) {        if (memLen > fileLen) {          mem.memset(memOffset + fileLen,(byte)0,memLen - fileLen);        }        mem.copyToMemory(memOffset,f,fileLen);      }      if (memOffset < module.loadAddressLow) {        module.loadAddressLow=memOffset;        if (log.isDebugEnabled()) {          log.debug(String.format("PH#%d: new loadAddressLow %08X",i,module.loadAddressLow));        }      }      if (memOffset + memLen > module.loadAddressHigh) {        module.loadAddressHigh=memOffset + memLen;        if (log.isTraceEnabled()) {          log.trace(String.format("PH#%d: new loadAddressHigh %08X",i,module.loadAddressHigh));        }      }      module.segmentaddr[module.nsegment]=memOffset;      module.segmentsize[module.nsegment]=memLen;      module.nsegment++;    }    i++;  }  if (log.isDebugEnabled()) {    log.debug(String.format("PH alloc consumption %08X (mem %08X)",(module.loadAddressHigh - module.loadAddressLow),module.bss_size));  }}  }
class C{  public DataModel remove(int index){  DataModel removedObject=this.modelList.remove(index);  if (removedObject == this.selectedModel) {    this.selectedModel=null;  }  return removedObject;}  }
class C{  public ObjectMatrix1D viewColumn(int column){  checkColumn(column);  int viewSize=this.rows;  int viewZero=this.rowZero;  int viewStride=this.rowStride;  int[] viewOffsets=this.rowOffsets;  int viewOffset=this.offset + _columnOffset(_columnRank(column));  return new SelectedSparseObjectMatrix1D(viewSize,this.elements,viewZero,viewStride,viewOffsets,viewOffset);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void insertNodes(String pName,String pPath,CatalogTreeNode pParent){  File fp=new File(pPath);  if (!fp.exists()) {    return;  }  String filename=fp.getName();  if (filename.startsWith(".")) {    return;  }  if (filename.equals("CVS")) {    return;  }  if (fp.isDirectory()) {    CatalogTreeNode newElement=new CatalogTreeNode(pName);    insertNodeInto(newElement,pParent,pParent.getChildCount());    String[] sp=fp.list();    for (int i=0; i < sp.length; i++) {      log.debug("Descend into resource: {}",sp[i]);      insertNodes(sp[i],pPath + "/" + sp[i],newElement);    }  } else {    String ext=jmri.util.FileChooserFilter.getFileExtension(fp);    if (!filter(ext)) {      return;    }    int index=filename.indexOf('.');    if (index > 0) {      filename=filename.substring(0,index);    }    pParent.addLeaf(filename,pPath);  }}  }
class C{  public Object doLdapLogin(String user,String passwd,RoomClient currentClient,String SID,String domain){  log.debug("LdapLoginmanagement.doLdapLogin");  HashMap<String,String> configData;  try {    configData=getLdapConfigData(domain);  } catch (  Exception e) {    log.error("Error on LdapAuth : " + e.getMessage());    return null;  }  if (configData == null || configData.size() < 1) {    log.error("Error on LdapLogin : Configurationdata couldnt be retrieved!");    return null;  }  String ldap_url=configData.get(CONFIGKEY_LDAP_URL);  String ldap_server_type=configData.get(CONFIGKEY_LDAP_SERVER_TYPE);  String ldap_admin_dn=configData.get(CONFIGKEY_LDAP_ADMIN_DN);  String ldap_passwd=configData.get(CONFIGKEY_LDAP_ADMIN_PASSWD);  String ldap_search_scope=configData.get(CONFIGKEY_LDAP_SEARCH_SCOPE);  String ldap_fieldname_user_principal=configData.get(CONFIGKEY_LDAP_FIELDNAME_USER_PRINCIPAL);  String ldap_sync_passwd_to_om=configData.get(CONFIGKEY_LDAP_SYNC_PASSWD_OM);  String ldap_user_attr_lastname=configData.get(CONFIGKEY_LDAP_KEY_LASTNAME);  String ldap_user_attr_firstname=configData.get(CONFIGKEY_LDAP_KEY_FIRSTNAME);  String ldap_user_attr_mail=configData.get(CONFIGKEY_LDAP_KEY_MAIL);  String ldap_user_attr_street=configData.get(CONFIGKEY_LDAP_KEY_STREET);  String ldap_user_attr_additional_name=configData.get(CONFIGKEY_LDAP_KEY_ADDITIONAL_NAME);  String ldap_user_attr_fax=configData.get(CONFIGKEY_LDAP_KEY_FAX);  String ldap_user_attr_zip=configData.get(CONFIGKEY_LDAP_KEY_ZIP);  String ldap_user_attr_country=configData.get(CONFIGKEY_LDAP_KEY_COUNTRY);  String ldap_user_attr_town=configData.get(CONFIGKEY_LDAP_KEY_TOWN);  String ldap_user_attr_phone=configData.get(CONFIGKEY_LDAP_KEY_PHONE);  String ldap_user_attr_timezone=configData.get(CONFIGKEY_LDAP_TIMEZONE_NAME);  String ldap_use_lower_case=configData.get(CONFIGKEY_LDAP_USE_LOWER_CASE);  if (ldap_use_lower_case != null && ldap_use_lower_case.equals("true")) {    user=user.toLowerCase();  }  if (ldap_user_attr_lastname == null) {    ldap_user_attr_lastname=LDAP_KEY_LASTNAME;  }  if (ldap_user_attr_firstname == null) {    ldap_user_attr_firstname=LDAP_KEY_FIRSTNAME;  }  if (ldap_user_attr_mail == null) {    ldap_user_attr_mail=LDAP_KEY_MAIL;  }  if (ldap_user_attr_street == null) {    ldap_user_attr_street=LDAP_KEY_STREET;  }  if (ldap_user_attr_additional_name == null) {    ldap_user_attr_additional_name=LDAP_KEY_ADDITIONAL_NAME;  }  if (ldap_user_attr_fax == null) {    ldap_user_attr_fax=LDAP_KEY_FAX;  }  if (ldap_user_attr_zip == null) {    ldap_user_attr_zip=LDAP_KEY_ZIP;  }  if (ldap_user_attr_country == null) {    ldap_user_attr_country=LDAP_KEY_COUNTRY;  }  if (ldap_user_attr_town == null) {    ldap_user_attr_town=LDAP_KEY_TOWN;  }  if (ldap_user_attr_phone == null) {    ldap_user_attr_phone=LDAP_KEY_PHONE;  }  if (ldap_user_attr_timezone == null) {    ldap_user_attr_timezone=LDAP_KEY_TIMEZONE;  }  String ldap_auth_type=configData.get(CONFIGKEY_LDAP_AUTH_TYPE);  if (ldap_auth_type == null)   ldap_auth_type="";  if (!isValidAuthType(ldap_auth_type)) {    log.error("ConfigKey in Ldap Config contains invalid auth type : '" + ldap_auth_type + "' -> Defaulting to "+ LdapAuthBase.LDAP_AUTH_TYPE_SIMPLE);    ldap_auth_type=LdapAuthBase.LDAP_AUTH_TYPE_SIMPLE;  }  String ldap_search_filter="(" + ldap_fieldname_user_principal + "="+ user+ ")";  log.debug("Searching userdata with LDAP Search Filter :" + ldap_search_filter);  ldap_search_scope=ldap_search_scope.replaceAll(":","=");  ldap_admin_dn=ldap_admin_dn.replaceAll(":","=");  LdapAuthBase lAuth=new LdapAuthBase(ldap_url,ldap_admin_dn,ldap_passwd,ldap_auth_type);  log.debug("authenticating admin...");  lAuth.authenticateUser(ldap_admin_dn,ldap_passwd);  log.debug("Checking server type...");  if (ldap_server_type.equalsIgnoreCase("OpenLDAP")) {    String ldapUserDN=user;    log.debug("LDAP server is OpenLDAP");    log.debug("LDAP search base: " + ldap_search_scope);    HashMap<String,String> uidCnDictionary=lAuth.getUidCnHashMap(ldap_search_scope,ldap_search_filter,ldap_fieldname_user_principal);    if (uidCnDictionary.get(user) != null) {      ldapUserDN=uidCnDictionary.get(user) + "," + ldap_search_scope;      log.debug("Authentication with DN: " + ldapUserDN);    }    try {      if (!lAuth.authenticateUser(ldapUserDN,passwd)) {        log.error(ldapUserDN + " not authenticated.");        return new Long(-11);      }    } catch (    Exception e) {      log.error("Error on LdapAuth : " + e.getMessage());      return null;    }  } else {    try {      if (!lAuth.authenticateUser(user,passwd))       return new Long(-11);    } catch (    Exception e) {      log.error("Error on LdapAuth : " + e.getMessage());      return null;    }  }  Users u=null;  try {    u=userManagement.getUserByLogin(user);  } catch (  Exception e) {    log.error("Error retrieving Userdata : " + e.getMessage());  }  if (u == null) {    log.debug("user doesnt exist local -> create new");    List<String> attributes=new ArrayList<String>();    attributes.add(ldap_user_attr_lastname);    attributes.add(ldap_user_attr_firstname);    attributes.add(ldap_user_attr_mail);    attributes.add(ldap_user_attr_street);    attributes.add(ldap_user_attr_additional_name);    attributes.add(ldap_user_attr_fax);    attributes.add(ldap_user_attr_zip);    attributes.add(ldap_user_attr_country);    attributes.add(ldap_user_attr_town);    attributes.add(ldap_user_attr_phone);    attributes.add(ldap_user_attr_timezone);    HashMap<String,String> ldapAttrs=new HashMap<String,String>();    ldapAttrs.put("lastnameAttr",ldap_user_attr_lastname);    ldapAttrs.put("firstnameAttr",ldap_user_attr_firstname);    ldapAttrs.put("mailAttr",ldap_user_attr_mail);    ldapAttrs.put("streetAttr",ldap_user_attr_street);    ldapAttrs.put("additionalNameAttr",ldap_user_attr_additional_name);    ldapAttrs.put("faxAttr",ldap_user_attr_fax);    ldapAttrs.put("zipAttr",ldap_user_attr_zip);    ldapAttrs.put("countryAttr",ldap_user_attr_country);    ldapAttrs.put("townAttr",ldap_user_attr_town);    ldapAttrs.put("phoneAttr",ldap_user_attr_phone);    ldapAttrs.put("phoneAttr",ldap_user_attr_phone);    ldapAttrs.put("timezoneAttr",ldap_user_attr_timezone);    Vector<HashMap<String,String>> result=lAuth.getData(ldap_search_scope,ldap_search_filter,attributes);    if (result == null || result.size() < 1) {      log.error("Error on Ldap request - no result for user " + user);      return new Long(-10);    }    if (result.size() > 1) {      log.error("Error on Ldap request - more than one result for user " + user);      return null;    }    HashMap<String,String> userData=result.get(0);    try {      Long userid;      if (ldap_sync_passwd_to_om != null && ldap_sync_passwd_to_om.equals("no")) {        Random r=new Random();        String token=Long.toString(Math.abs(r.nextLong()),36);        log.debug("Synching Ldap user to OM DB with RANDOM password: " + token);        userid=createUserFromLdapData(userData,token,user,ldapAttrs);      } else {        log.debug("Synching Ldap user to OM DB with password");        userid=createUserFromLdapData(userData,passwd,user,ldapAttrs);      }      log.debug("New User ID : " + userid);      if (currentClient != null) {        currentClient.setUser_id(userid);      }      Boolean bool=sessionManagement.updateUser(SID,userid);      if (bool == null) {        log.error("Error on Updating Session");        return new Long(-1);      } else       if (!bool) {        log.error("Invalid Session Object");        return new Long(-35);      }      Users u2=userManagement.getUserById(userid);      if (u2 == null)       return new Long(-1);      u2.setExternalUserType(EXTERNAL_USER_TYPE_LDAP);      userManagement.refreshUserObject(u2);      log.debug("getUserbyId : " + userid + " : "+ u2.getLogin());      return u2;    } catch (    Exception e) {      log.error("Error on Working Userdata : ",e);      return new Long(-1);    }  } else {    log.debug("User already exists -> Update of current passwd");    if (currentClient != null) {      currentClient.setUser_id(u.getUser_id());    }    Boolean bool=sessionManagement.updateUser(SID,u.getUser_id());    if (bool == null) {      log.error("Error on Updating Session");      return new Long(-1);    } else     if (!bool) {      log.error("Invalid Session Object");      return new Long(-35);    }    if (ldap_sync_passwd_to_om == null || !ldap_sync_passwd_to_om.equals("no")) {      u.setPassword(passwd);    }    try {      userManagement.updateUserObject(u,true);    } catch (    Exception e) {      log.error("Error updating user : " + e.getMessage());      return new Long(-1);    }    return u;  }}  }
class C{  private LocalJoin findLocalJoin(Var subj,List<LocalJoin> vars){  LocalJoin result=null;  if ((!vars.isEmpty()) && vars.get(vars.size() - 1).getVar() == subj) {    result=vars.get(vars.size() - 1);  } else {    for (    LocalJoin local : vars) {      if (subj != null && subj.equals(local.getVar())) {        result=local;        break;      }    }  }  return result;}  }
class C{  public void tabPageLoadFinished(int id){  StripLayoutTab tab=findTabById(id);  if (tab != null)   tab.pageLoadingFinished();}  }
class C{  void initializeBillingDataTypeOptions(){  List<BillingDataType> billingDataTypes=null;  if (model.isSupplierOrReseller()) {    billingDataTypes=Arrays.asList(BillingDataType.values());  } else {    billingDataTypes=Arrays.asList(BillingDataType.RevenueShare);  }  List<SelectItem> billingDataTypeOptions=new SelectItemBuilder(ui).buildSelectItems(billingDataTypes,"BillingDataType");  model.setBillingDataTypeOptions(billingDataTypeOptions);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Decimator(int decimationFactor){  mDecimationFactor=decimationFactor;}  }
class C{  public static void galleryAddPic(Context context,File file){  Intent mediaScanIntent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);  Uri contentUri=Uri.fromFile(file);  mediaScanIntent.setData(contentUri);  context.sendBroadcast(mediaScanIntent);}  }
class C{  public String toString(){  Iterator i=children.iterator();  String ret=head + " ::= ";  while (i.hasNext()) {    GrammarNode node=(GrammarNode)i.next();    String nodeString="";    if (node instanceof GrammarRuleNode)     nodeString=((GrammarRuleNode)node).getHead(); else     if (node instanceof GrammarFunctionNode)     nodeString=((GrammarFunctionNode)node).toString();    ret+=nodeString + (i.hasNext() ? " | " : "");  }  return ret;}  }
class C{  public static Function<JsonObject,String> asString(){  return null;}  }
class C{  public ServiceStateException(ServiceStatus expected,ServiceStatus current){  super("Service operation tried on a service with invalid status",new Object[]{expected.name(),current.name()});}  }
class C{  public boolean removeConflict(final Conflict conflict){  Check.notNull(conflict,"conflict");  Conflict removedConflict;synchronized (conflictLock) {    if (conflicts.containsKey(conflict.getConflictID()) == false) {      return false;    }    removedConflict=conflicts.remove(conflict.getConflictID());    conflictsByLocalPath.remove(removedConflict.getLocalPath());  }synchronized (listenerLock) {    final ConflictCacheListener listener=(ConflictCacheListener)conflictListeners.getListener(REMOVED);    final ConflictCacheEvent e=new ConflictCacheEvent(this,ConflictCacheEvent.REMOVED,removedConflict);    listener.onConflictEvent(e);  }  return true;}  }
class C{  public TermRangeQuery(String field,BytesRef lowerTerm,BytesRef upperTerm,boolean includeLower,boolean includeUpper){  super(new Term(field,lowerTerm),toAutomaton(lowerTerm,upperTerm,includeLower,includeUpper),Integer.MAX_VALUE,true);  this.lowerTerm=lowerTerm;  this.upperTerm=upperTerm;  this.includeLower=includeLower;  this.includeUpper=includeUpper;}  }
class C{  public final Angle multiply(double multiplier){  return Angle.fromDegrees(this.degrees * multiplier);}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  private void strategyNominateFirstValid(PropertyChangeEvent evt){  if (IceMediaStream.PROPERTY_PAIR_VALIDATED.equals(evt.getPropertyName())) {    CandidatePair validPair=(CandidatePair)evt.getSource();    logger.info("Nominate (first valid): " + validPair.toShortString() + ". Local ufrag "+ parentAgent.getLocalUfrag());    parentAgent.nominate(validPair);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  void loadProperties(NamedBean t,Element elem){  Element p=elem.getChild("properties");  if (p == null) {    return;  }  for (  Object next : p.getChildren("property")) {    Element e=(Element)next;    try {      Class<?> cl;      Constructor<?> ctor;      String key=e.getChild("key").getText();      if (!(e.getChild("key").getAttributeValue("class") == null || e.getChild("key").getAttributeValue("class").equals("") || e.getChild("key").getAttributeValue("class").equals("java.lang.String"))) {        log.warn("NamedBean {} property key of invalid non-String type {} not supported",t.getSystemName(),e.getChild("key").getAttributeValue("class"));      }      Object value=null;      if (e.getChild("value") != null) {        cl=Class.forName(e.getChild("value").getAttributeValue("class"));        ctor=cl.getConstructor(new Class<?>[]{String.class});        value=ctor.newInstance(new Object[]{e.getChild("value").getText()});      }      t.setProperty(key,value);    } catch (    ClassNotFoundException|NoSuchMethodException|InstantiationException|IllegalAccessException|java.lang.reflect.InvocationTargetException ex) {      log.error("Error loading properties",ex);    }  }}  }
class C{  protected Anonymous_action_1_Impl(){  super();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:51.418 -0500",hash_original_method="537E0E62A536665037DE9BF93DCC6BC4",hash_generated_method="18FE2AF03DA7E415BB218E6E82E80DAF") public static String toString(int[] oid){  StringBuilder sb=new StringBuilder(3 * oid.length);  for (int i=0; i < oid.length - 1; ++i) {    sb.append(oid[i]);    sb.append('.');  }  sb.append(oid[oid.length - 1]);  return sb.toString();}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 35:{        int temp=zzStartRead;        addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);        addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_DOCUMENTATION);        start=zzMarkedPos;      }case 36:    break;case 28:{    addToken(Token.PREPROCESSOR);  }case 37:break;case 3:{addNullToken();return firstToken;}case 38:break;case 30:{addToken(Token.LITERAL_CHAR);}case 39:break;case 25:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 40:break;case 4:{addToken(Token.WHITESPACE);}case 41:break;case 29:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 42:break;case 22:{addToken(Token.ERROR_CHAR);}case 43:break;case 31:{addToken(Token.ERROR_STRING_DOUBLE);}case 44:break;case 19:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 45:break;case 21:{addToken(Token.RESERVED_WORD);}case 46:break;case 10:{addToken(Token.SEPARATOR);}case 47:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addNullToken();return firstToken;}case 48:break;case 6:{addToken(Token.IDENTIFIER);}case 49:break;case 13:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzEndRead,Token.PREPROCESSOR);addNullToken();return firstToken;}case 50:break;case 8:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 51:break;case 9:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 52:break;case 32:{addToken(Token.DATA_TYPE);}case 53:break;case 2:{addToken(Token.ERROR_IDENTIFIER);}case 54:break;case 23:{addToken(Token.ERROR_CHAR);}case 55:break;case 33:{addToken(Token.LITERAL_BOOLEAN);}case 56:break;case 20:{start=zzMarkedPos - 2;yybegin(VERBATIMSTRING);}case 57:break;case 24:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 58:break;case 14:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 59:break;case 34:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 60:break;case 16:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 61:break;case 18:{addToken(Token.ERROR_NUMBER_FORMAT);}case 62:break;case 27:{start=zzMarkedPos - 3;yybegin(DOCUMENTCOMMENT);}case 63:break;case 17:{start=zzMarkedPos - 2;yybegin(DELIMITEDCOMMENT);}case 64:break;case 7:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 65:break;case 5:{addToken(Token.OPERATOR);}case 66:break;case 26:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.PREPROCESSOR);start=zzMarkedPos;}case 67:break;case 15:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 68:break;case 1:{}case 69:break;case 11:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 70:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case VERBATIMSTRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 365:break;case DOCUMENTCOMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addNullToken();return firstToken;}case 366:break;case YYINITIAL:{addNullToken();return firstToken;}case 367:break;case DELIMITEDCOMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 368:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public OrderPositionSplit(U position,Integer sId){  Assert.notNull(position);  Assert.notNull(sId);  this.splitId=new OrderPositionSplitKey(position,sId);  this.priority=position.getPriority();}  }
class C{  public static LogRecord findByQueryId(String queryId,Date startTime,Date endTime) throws Exception {  log.trace("findByQueryId({}, {}, {})",new Object[]{queryId,startTime,endTime});  try {    assertInitialized();    return (LogRecord)ask(new FindByQueryId(queryId,startTime,endTime));  } catch (  Exception e) {    throw translateException(e);  }}  }
class C{  public boolean isConsumedFromInterface(N4MemberDeclaration element){  return isTaggedAs(Tag.consumedFromInterface,element);}  }
class C{  public FileSendPacket send(File file){  return send(file,null);}  }
class C{  public void onStart(){  mServiceConnection=new PremiumerServiceConnection();  final Intent intent=new Intent("com.android.vending.billing.InAppBillingService.BIND");  intent.setPackage("com.android.vending");  final List<ResolveInfo> list=mContext.getPackageManager().queryIntentServices(intent,0);  if (null == list || list.isEmpty()) {    if (null != mListener) {      mListener.onBillingUnavailable();    }  } else {    mContext.bindService(intent,mServiceConnection,Context.BIND_AUTO_CREATE);  }}  }
class C{  public static boolean isPointer(String str){  return str.equals("Pointer");}  }
class C{  public static String supportsExtension(final String ext){  if (ext == null || ext.isEmpty())   return null;  if (denyExtensionx.containsKey(ext))   return "file extension '" + ext + "' is denied (2)";  final String mimeType=ext2mime.get(ext);  if (mimeType == null)   return "no parser available";  final Set<Parser> idiom=mime2parser.get(mimeType);  assert idiom != null;  if (idiom == null || idiom.isEmpty())   return "no parser available (internal error!)";  return null;}  }
class C{  @SuppressWarnings({"SynchronizationOnLocalVariableOrMethodParameter"}) @Deprecated public static void dumpStack(Thread t,PrintStream s){synchronized (s) {    s.println("Dumping stack trace for thread: " + t);    for (    StackTraceElement trace : t.getStackTrace())     s.println("\tat " + trace);  }}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public void stop() throws IOException {  for (  DispatcherQueue q : getQueues()) {    q.getQueue().stop(DEFAULT_MAX_WAIT_STOP);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.417 -0400",hash_original_method="585F53C650C5C9F5A62C5141A6DD9F48",hash_generated_method="C07F213AFCA9E908CF85DDFB8E610724") public static void writeSwappedInteger(OutputStream output,int value) throws IOException {  output.write((byte)((value >> 0) & 0xff));  output.write((byte)((value >> 8) & 0xff));  output.write((byte)((value >> 16) & 0xff));  output.write((byte)((value >> 24) & 0xff));}  }
class C{  public Maybe<A> maybeReadNext(){  return Maybe.JustWhenTrue(!isEnd(),null);}  }
class C{  public List<Capability> checkCapabilities(){  DevModeRequest.CapabilityExchange.Builder capabilityExchangeBuilder=DevModeRequest.CapabilityExchange.newBuilder();  DevModeRequest.Builder viewerRequestBuilder=DevModeRequest.newBuilder();  viewerRequestBuilder.setRequestType(DevModeRequest.RequestType.CAPABILITY_EXCHANGE);  viewerRequestBuilder.setCapabilityExchange(capabilityExchangeBuilder);  Request.Builder request=buildRequestMessageFromDevModeRequest(viewerRequestBuilder);  Future<Response> responseFuture=transport.executeRequestAsync(request.build());  Response response=waitForResponse(responseFuture);  DevModeResponse.CapabilityExchange capabilityExchangeResponse=response.getDevModeResponse().getCapabilityExchange();  return capabilityExchangeResponse.getCapabilitiesList();}  }
class C{  @Override public int hashCode(){  return this.data.hashCode();}  }
class C{  public static void initialize(Class<?>... classes){  HashSet<Class<?>> classSet=new HashSet<>(Arrays.asList(classes));  MockitoFilter filter=new AllowSet(classSet);  initialize(filter);}  }
class C{  final public MutableString replace(final int start,int end,final char c){  final int length=length();  if (end > length)   end=length;  if (start > end)   throw new StringIndexOutOfBoundsException();  final int newLength=length + 1 - end + start;  if (newLength >= length) {    expand(newLength);    System.arraycopy(array,end,array,start + 1,length - end);    array[start]=c;    hashLength=hashLength < 0 ? -1 : newLength;  } else {    System.arraycopy(array,end,array,start + 1,length - end);    array[start]=c;    if (hashLength < 0) {      setCapacity(newLength);      hashLength=-1;    } else     hashLength=newLength;  }  return this;}  }
class C{  public void updateLocationCache(){  locationCache.clear();  for (  MultiblockComponent comp : components)   addComponentToLocationCache(comp);}  }
class C{  public final boolean isVisualPadding(){  return visualPadding;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.653 -0500",hash_original_method="20FDC2DC66402E55AE5BF59B2D025057",hash_generated_method="FF8D379599B6EB4246A0F64E1BF95C13") public void startPreferenceFragment(Fragment fragment,boolean push){  FragmentTransaction transaction=getFragmentManager().beginTransaction();  transaction.replace(com.android.internal.R.id.prefs,fragment);  if (push) {    transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);    transaction.addToBackStack(BACK_STACK_PREFS);  } else {    transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);  }  transaction.commitAllowingStateLoss();}  }
class C{  public void initDiskCache(){synchronized (mDiskCacheLock) {    if (globalConfig.isDiskCacheEnabled() && (mDiskLruCache == null || mDiskLruCache.isClosed())) {      File diskCacheDir=new File(globalConfig.getDiskCachePath());      if (diskCacheDir.exists() || diskCacheDir.mkdirs()) {        long availableSpace=OtherUtils.getAvailableSpace(diskCacheDir);        long diskCacheSize=globalConfig.getDiskCacheSize();        diskCacheSize=availableSpace > diskCacheSize ? diskCacheSize : availableSpace;        try {          mDiskLruCache=LruDiskCache.open(diskCacheDir,1,1,diskCacheSize);          mDiskLruCache.setFileNameGenerator(globalConfig.getFileNameGenerator());          LogUtils.d("create disk cache success");        } catch (        Throwable e) {          mDiskLruCache=null;          LogUtils.e("create disk cache error",e);        }      }    }  }}  }
class C{  public final ITypeBinding resolveBinding(){  return this.ast.getBindingResolver().resolveType(this);}  }
class C{  public static NestedMappingInfo loadNestedMappingInformation(XML xml,Class<?> targetClass,String nestedMappingPath,Class<?> sourceClass,Class<?> destinationClass,Field configuredField){  boolean isSourceClass=targetClass == sourceClass;  NestedMappingInfo info=new NestedMappingInfo(isSourceClass);  info.setConfiguredClass(isSourceClass ? destinationClass : sourceClass);  info.setConfiguredField(configuredField);  try {    Class<?> nestedClass=targetClass;    String[] nestedFields=nestedFields(nestedMappingPath);    Field field=null;    for (int i=0; i < nestedFields.length; i++) {      String nestedFieldName=nestedFields[i];      boolean elvisOperatorDefined=safeNavigationOperatorDefined(nestedFieldName);      if (elvisOperatorDefined)       nestedFieldName=safeNavigationOperatorFilter(nestedFieldName);      field=retrieveField(nestedClass,nestedFieldName);      if (isNull(field))       Error.inexistentField(nestedFieldName,nestedClass.getSimpleName());      MappedField nestedField=isSourceClass ? checkGetAccessor(xml,nestedClass,field) : checkAccessors(xml,nestedClass,field);      info.addNestedField(new NestedMappedField(nestedField,nestedClass,elvisOperatorDefined));      nestedClass=field.getType();    }  } catch (  MappingException e) {    InvalidNestedMappingException exception=new InvalidNestedMappingException(nestedMappingPath);    exception.getMessages().put(InvalidNestedMappingException.FIELD,e.getMessage());    throw exception;  }  return info;}  }
class C{  @Override public long longValue(){  return value;}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  public Map<String,String> loadConfigProperties(Path confFile) throws IOException {  if (!exists(confFile)) {    throw new FileNotFoundException(format("Configuration file '%s' not found",confFile.toString()));  }  try {    return doLoadCodenvyProperties(confFile);  } catch (  IOException e) {    throw new ConfigException(format("Can't load properties: %s",e.getMessage()),e);  }}  }
class C{  public Text(Text utf8){  set(utf8);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.457 -0500",hash_original_method="E5C5DBED2FC0D18DB80484DB83D94F8A",hash_generated_method="03D37BD64D7EA5A498C29F3157B06CA4") public void cancel(){}  }
class C{  public boolean isSecure(){  return mTlsCipher != null && !mTlsCipher.isEmpty();}  }
class C{  public static KeyPair generateECKeyPair(String curveName,Provider provider) throws CryptoException {  try {    KeyPairGenerator keyPairGen;    if (provider != null) {      keyPairGen=KeyPairGenerator.getInstance(KeyPairType.EC.jce(),provider);    } else {      keyPairGen=KeyPairGenerator.getInstance(KeyPairType.EC.jce(),BOUNCY_CASTLE.jce());    }    keyPairGen.initialize(new ECGenParameterSpec(curveName),SecureRandom.getInstance("SHA1PRNG"));    KeyPair keyPair=keyPairGen.generateKeyPair();    return keyPair;  } catch (  GeneralSecurityException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoGenerateKeypair.exception.message"),KeyPairType.EC),ex);  }}  }
class C{  public void wallsAndGates(int[][] rooms){  Queue<int[]> queue=new LinkedList<>();  for (int i=0; i < rooms.length; i++) {    for (int j=0; j < rooms[i].length; j++) {      if (rooms[i][j] == GATE) {        queue.add(new int[]{i,j});      }    }  }  while (!queue.isEmpty()) {    int[] pos=queue.poll();    int r=pos[0];    int c=pos[1];    if (r > 0 && rooms[r - 1][c] == EMPTY) {      rooms[r - 1][c]=rooms[r][c] + 1;      queue.add(new int[]{r - 1,c});    }    if (r < rooms.length - 1 && rooms[r + 1][c] == EMPTY) {      rooms[r + 1][c]=rooms[r][c] + 1;      queue.add(new int[]{r + 1,c});    }    if (c > 0 && rooms[r][c - 1] == EMPTY) {      rooms[r][c - 1]=rooms[r][c] + 1;      queue.add(new int[]{r,c - 1});    }    if (c < rooms[0].length - 1 && rooms[r][c + 1] == EMPTY) {      rooms[r][c + 1]=rooms[r][c] + 1;      queue.add(new int[]{r,c + 1});    }  }}  }
class C{  public XMLString toLowerCase(){  return new XMLStringDefault(m_str.toLowerCase());}  }
class C{  public void waitUntil(Predicate<OutputFrame> predicate) throws TimeoutException {  waitUntil(predicate,Long.MAX_VALUE);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.693 -0500",hash_original_method="EBFF7E74C490A6457BB1227BB1C69161",hash_generated_method="CFA67350936CB116E605A59CB3576D4B") private boolean isConnectingInOrOut(){  return parent == null || parent == owner.ringingCall || parent.state == CdmaCall.State.DIALING || parent.state == CdmaCall.State.ALERTING;}  }
class C{  public Coordinate findSplitPoint(Segment seg,Coordinate encroachPt){  LineSegment lineSeg=seg.getLineSegment();  double segLen=lineSeg.getLength();  double midPtLen=segLen / 2;  SplitSegment splitSeg=new SplitSegment(lineSeg);  Coordinate projPt=projectedSplitPoint(seg,encroachPt);  double nonEncroachDiam=projPt.distance(encroachPt) * 2 * 0.8;  double maxSplitLen=nonEncroachDiam;  if (maxSplitLen > midPtLen) {    maxSplitLen=midPtLen;  }  splitSeg.setMinimumLength(maxSplitLen);  splitSeg.splitAt(projPt);  return splitSeg.getSplitPoint();}  }
class C{  public UnsupportedEmptyCollection(){  this.perms=new Permissions();  perms.setReadOnly();}  }
class C{  public DBMSEmptyEvent(String id){  this(id,new Timestamp(System.currentTimeMillis()));}  }
class C{  public Quaternionf slerp(Quaternionfc target,float alpha){  return slerp(target,alpha,this);}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  public boolean isAutoRelation(){  return isAutoRelation;}  }
class C{  private void initTreeRootNode(AbstractBURS_TreeNode t,SpaceEffGraphNode treeRoot){  if (t.getChild1() != null) {    if (t.getChild1().isTreeRoot()) {      t.setChild1(Register);    } else {      initTreeRootNode(t.getChild1(),treeRoot);    }  }  if (t.getChild2() != null) {    if (t.getChild2().isTreeRoot()) {      t.setChild2(Register);    } else {      initTreeRootNode(t.getChild2(),treeRoot);    }  }  if (t.dg_node != null) {    t.dg_node.nextSorted=treeRoot;    if (DEBUG)     VM.sysWrite(t.dg_node + " --> " + treeRoot+ "\n");  }  if (t.getChild1() != null || t.getChild2() != null) {    int lchild=(t.getChild1() != null) ? t.getChild1().numRegisters() : 0;    int rchild=(t.getChild2() != null) ? t.getChild2().numRegisters() : 0;    if (lchild == rchild) {      t.setNumRegisters(lchild + 1);    } else {      t.setNumRegisters(Math.max(lchild,rchild));    }    if (DEBUG)     VM.sysWrite("\tnum registers = " + t.numRegisters() + "\n");  }}  }
class C{  public double[][] toArray(){  double[][] result=new double[sizes.size()][];  for (int i=0; i < result.length; ++i) {    result[i]=new double[sizes.get(i)];    System.arraycopy(vector[i],0,result[i],0,result[i].length);  }  return result;}  }
class C{  public static ImppType find(String value){  return enums.find(value);}  }
class C{  public void initializeDefinition(String tableName,boolean isDeferrable,boolean isDeferred){  m_table=tableName;  m_isDeferrable=isDeferrable;  m_isDeferred=isDeferred;  s_logger.log(Level.FINEST,toString());}  }
class C{  protected void initRemoteStack(){  if (this.remoteStack == null && !MemoryControl.shortStatus()) {    ConcurrentLog.info("NoticedURL","opening CrawlerRemoteStacks..");    this.remoteStack=new HostBalancer(new File(this.cachePath,"CrawlerRemoteStacks"),this.coreStack.getOnDemandLimit(),this.coreStack.getExceed134217727());  }}  }
class C{  public Builder addEmail(Email email){  emails.add(email);  return this;}  }
class C{  public void saveEx() throws AdempiereException {  throw new IllegalStateException(EXCEPTION_MSG);}  }
class C{  public String toString(){  return "AnnihilateLogic";}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public StringVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new String[blocksize];}  }
class C{  public BuyClientBuilder customerToken(final CustomerToken customerToken){  this.customerToken=customerToken;  return this;}  }
class C{  @Profile("test") private void disableProtectionCRSF(HttpSecurity http) throws Exception {  http.csrf().disable();}  }
class C{  public void clear(){  long max=Math.max(1,maxMemory / segmentCount);  for (int i=0; i < segmentCount; i++) {    segments[i]=new Segment<V>(max,stackMoveDistance,8,nonResidentQueueSize);  }}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  WeakHashMap map=new WeakHashMap();  map.put(null,"value");  System.gc();  System.gc();  FinalizationTester.induceFinalization();  map.remove("nothing");  assertEquals("null key was removed",1,map.size());}  }
class C{  public static <T>Set<T> toSet(T obj1){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  return theSet;}  }
class C{  public void addAnnotatedType(TypeWithAnnotations type){  addAnnotatedClassNoBidirectionalUpdate(type);  type.addAnnotationNoBidirectionalUpdate(this);}  }
class C{  public void send(Object object){  send(DiscordUtils.GSON.toJson(object));}  }
class C{  public CataclysmicDemographicModel(String name,Parameter N0Parameter,Parameter secondParam,Parameter growthRateParameter,Parameter timeParameter,Type units,boolean useSpike){  super(name);  cataclysm=new CataclysmicDemographic(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  if (useSpike) {    this.N1Parameter=secondParam;    N1Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));    addVariable(N1Parameter);  } else {    this.declineRateParameter=secondParam;    addVariable(declineRateParameter);  }  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.MIN_VALUE,1));  this.timeParameter=timeParameter;  addVariable(timeParameter);  timeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.MIN_VALUE,1));  setUnits(units);}  }
class C{  @SuppressWarnings("unchecked") public boolean containsKey(Object key){  Segment<K,V> s;  HashEntry<K,V>[] tab;  int h=hash(key.hashCode());  long u=(((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;  if ((s=(Segment<K,V>)UNSAFE.getObjectVolatile(segments,u)) != null && (tab=s.table) != null) {    for (HashEntry<K,V> e=(HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE); e != null; e=e.next) {      K k;      if ((k=e.key) == key || (e.hash == h && key.equals(k)))       return true;    }  }  return false;}  }
class C{  public boolean hasTotal(){  return hasExtension(Total.class);}  }
class C{  public final void dropTables() throws AdeException {  logger.trace("-->entry");  dropTables(getAllTablesInReverseDependencyOrder());  logger.trace("<--exit");}  }
class C{  private boolean selectDbConnection(String name){  DatabaseConnection dbcon=ConnectionManager.getDefault().getConnection(name);  if (dbcon == null || dbcon.getJDBCConnection() == null) {    return false;  }  datasourceComboBox.setSelectedItem(dbcon);  if (!dbcon.equals(datasourceComboBox.getSelectedItem())) {    return false;  }  datasourceRadioButton.setSelected(true);  return true;}  }
class C{  public void rediscoverStorageSystems(List<String> storageSystemNativeGuids) throws VPlexApiException {  s_logger.info("Request to rediscover storage systems on VPlex at {}",_baseURI);  _discoveryMgr.rediscoverStorageSystems(storageSystemNativeGuids);}  }
