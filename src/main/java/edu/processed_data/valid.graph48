class C{  private void processAck(RequestEvent r,ServerTransaction tid){  try {    logger.info("Got an ACK!");  } catch (  Exception ex) {    logger.error("unexpected exception",ex);    ChallengeTest.fail("unexpected exception");  }}  }
class C{  public Conditions createConditions(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.CONDITIONS,elem);  if (obj == null) {    return new ConditionsImpl(elem);  } else {    return (Conditions)obj;  }}  }
class C{  @Override public void execute() throws MojoExecutionException, MojoFailureException {  final Locale currentLocale=Locale.forLanguageTag(locale);  final String localeReference=getLocalesAndSubTypesDocumentation(currentLocale);  final File localeReferenceFile=new File(outputDirectory,"sec-locales-subtypes.xml");  try {    writeStringToFile(localeReference,localeReferenceFile);  } catch (  IOException e) {    throw new MojoExecutionException("Failed to write " + localeReferenceFile.getPath());  }}  }
class C{  private void writeMetrics(float wx,float llx,float lly,float urx,float ury,boolean isColor){  this.isColor=isColor;  this.wx=wx;  this.llx=llx;  this.lly=lly;  this.urx=urx;  this.ury=ury;  if (isColor) {    contentStream.getOutputStream().writeFloat(wx).writeSpace().writeFloat(0).writeSpace().writeBytes(d0);  } else {    contentStream.getOutputStream().writeFloat(wx).writeSpace().writeFloat(0).writeSpace().writeFloat(llx).writeSpace().writeFloat(lly).writeSpace().writeFloat(urx).writeSpace().writeFloat(ury).writeSpace().writeBytes(d1);  }}  }
class C{  protected Object createInternalSessionsMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  internalSessions=new InternalSessionsImpl(this,InjectorHolder.getInstance(SessionMonitoringStore.class));  return internalSessions;}  }
class C{  private int convertLocationToColumn(int x,int y){  if (cellWidth > 0) {    if (layoutOrientation == JList.VERTICAL) {      return 0;    }    Insets insets=list.getInsets();    int col;    if (isLeftToRight) {      col=(x - insets.left) / cellWidth;    } else {      col=(list.getWidth() - x - insets.right- 1) / cellWidth;    }    if (col < 0) {      return 0;    } else     if (col >= columnCount) {      return columnCount - 1;    }    return col;  }  return 0;}  }
class C{  @Override public boolean isXpoweredBy(){  return xpoweredBy;}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  Element elem=getElement();  AttributeSet attributes=elem.getAttributes();  URL oldPage=src;  String srcAtt=(String)attributes.getAttribute(HTML.Attribute.SRC);  URL base=((HTMLDocument)elem.getDocument()).getBase();  try {    if (!createdComponent) {      return;    }    Object postData=movePostData(htmlPane,null);    src=new URL(base,srcAtt);    if (oldPage.equals(src) && (src.getRef() == null) && (postData == null)) {      return;    }    htmlPane.setPage(src);    Document newDoc=htmlPane.getDocument();    if (newDoc instanceof HTMLDocument) {      ((HTMLDocument)newDoc).setFrameDocumentState(true);    }  } catch (  MalformedURLException e1) {  }catch (  IOException e2) {  }}  }
class C{  public void invalidateLayout(Container target){  checkContainer(target);  xChildren=null;  yChildren=null;  xTotal=null;  yTotal=null;}  }
class C{  public LDAPConnectionArgumentParser(String mainClassName,LocalizableMessage toolDescription,boolean longArgumentsCaseSensitive,ArgumentGroup argumentGroup,boolean alwaysSSL){  super(mainClassName,toolDescription,longArgumentsCaseSensitive);  addLdapConnectionArguments(argumentGroup,alwaysSSL);  setVersionHandler(new DirectoryServerVersionHandler());}  }
class C{  private void cacheStyle(List styles,SynthStyle style){  BakedArrayList cachedStyles=new BakedArrayList(styles);  _resolvedStyles.put(cachedStyles,style);}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit){  return offer(e);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  void open() throws java.io.IOException {  if (source != null)   return;  if (!channel.isOpen())   throw new IllegalStateException("Channel is closed");  try {    source=new ByteBufferRandomAccessSource(channel.map(FileChannel.MapMode.READ_ONLY,offset,length));  } catch (  java.io.IOException e) {    if (exceptionIsMapFailureException(e))     throw new MapFailedException(e);    throw e;  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public PagedResultsControl(int pageSize,byte[] cookie,boolean criticality) throws IOException {  super(OID,criticality,null);  if (cookie == null) {    cookie=EMPTY_COOKIE;  }  value=setEncodedValue(pageSize,cookie);}  }
class C{  public boolean isRedirectUrlValid(final String url,final T configInfo){  if (StringUtils.isEmpty(url)) {    return false;  }  final Collection<String> patterns=domainExtractor.extractValidDomains(configInfo);  DEBUG.message("RedirectUrlValidator.isRedirectUrlValid: Validating goto URL {} against patterns: {}",url,patterns);  if (url.length() > MAX_URL_LENGTH) {    DEBUG.message("RedirectUrlValidator.isRedirectUrlValid:" + " The url was length {} which is longer than the allowed maximum of {}",url.length(),MAX_URL_LENGTH);    return false;  }  try {    final URI uri=new URI(url);    if (!uri.isAbsolute() && !url.startsWith("//")) {      return true;    }    if (uri.getScheme() != null && !uri.getScheme().equals("http") && !uri.getScheme().equals("https")) {      return false;    }  } catch (  final URISyntaxException urise) {    DEBUG.message("RedirectUrlValidator.isRedirectUrlValid: The goto URL {} is not a valid URI",url,urise);    return false;  }  if (patterns == null || patterns.isEmpty()) {    DEBUG.message("RedirectUrlValidator.isRedirectUrlValid:" + " There are no patterns to validate the URL against, the goto URL {} is considered valid",url);    return true;  }  final URLPatternMatcher patternMatcher=new URLPatternMatcher();  try {    return patternMatcher.match(url,patterns,true);  } catch (  MalformedURLException murle) {    DEBUG.error("RedirectUrlValidator.isRedirectUrlValid: An error occurred while validating goto URL: {}",url,murle);    return false;  }}  }
class C{  public void error(SAXParseException spe) throws SAXParseException {  PolicyManager.debug.error(spe.getMessage() + "\nLine Number in XML file : " + spe.getLineNumber()+ "\nColumn Number in XML file : "+ spe.getColumnNumber());  throw spe;}  }
class C{  @Override public boolean isStretchHeight(){  return true;}  }
class C{  public JsonValue notifyUpdate(Context context,String resourceContainer,String resourceId,JsonValue oldValue,JsonValue newValue) throws SynchronizationException {  if (isSourceObject(resourceContainer,resourceId)) {    if (newValue == null || newValue.getObject() == null) {      newValue=LazyObjectAccessor.rawReadObject(connectionFactory,context,resourceContainer,resourceId);    }    if (oldValue == null || oldValue.getObject() == null || !oldValue.isEqualTo(newValue)) {      return doSourceSync(context,resourceId,newValue,false,oldValue);    } else {      LOGGER.trace("There is nothing to update on {}",resourceContainer + "/" + resourceId);    }  }  return json(null);}  }
class C{  public void test_shuffleLjava_util_ListLjava_util_Random(){  try {    Collections.shuffle(null,new Random(200));    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  ArrayList al=new ArrayList();  al.addAll(ll);  testShuffle(al,"Sequential Access",true);  LinkedList ll2=new LinkedList();  ll2.addAll(ll);  testShuffle(ll2,"Random Access",true);  Mock_ArrayList mal=new Mock_ArrayList();  mal.add("First");  mal.add("Second");  try {    Collections.shuffle(mal,new Random(200));    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public boolean isSandbox(){  return sandbox;}  }
class C{  public int hashCode(){  return subjectRoles.hashCode();}  }
class C{  private Predicates(){  throw new AssertionError("No instances!");}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println("JAXP: " + msg);  }}  }
class C{  private void buildTALoad(MethodVisitor methodVisitor,CodeInfo info,Ins.TALoad TALoad){  buildValueAccess(methodVisitor,info,TALoad.arr(),true);  buildValueAccess(methodVisitor,info,TALoad.index(),true);  Label label=new Label();  methodVisitor.visitLabel(label);  methodVisitor.visitInsn(TALoad.mode());  info.pop(2);  info.push(CodeInfo.Size._1);  VisitLineNumber(methodVisitor,TALoad.line_col(),label);}  }
class C{  public boolean isMember(SSOToken token) throws SSOException {  return (SSOTokenManager.getInstance().isValidToken(token));}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public void removeLayoutComponent(Component component){  for (int counter=0; counter < 3; counter++) {    if (components[counter] == component) {      components[counter]=null;      sizes[counter]=0;      doReset=true;    }  }}  }
class C{  protected MetaMessage(byte[] data){  super(data);  if (data.length >= 3) {    dataLength=data.length - 3;    int pos=2;    while (pos < data.length && (data[pos] & 0x80) != 0) {      dataLength--;      pos++;    }  }}  }
class C{  public boolean isFileSelect(){  return getFieldFlag(FF_FILE_SELECT);}  }
class C{  public void clearBut(TrayPreference... modules){  String selection=null;  String[] selectionArgs=new String[]{};  for (  final TrayPreference module : modules) {    if (module == null) {      continue;    }    String moduleName=module.getModularizedStorage().getModuleName();    selection=SqliteHelper.extendSelection(selection,TrayContract.Preferences.Columns.MODULE + " != ?");    selectionArgs=SqliteHelper.extendSelectionArgs(selectionArgs,new String[]{moduleName});  }  mContext.getContentResolver().delete(mContentUri,selection,selectionArgs);}  }
class C{  public SdpException(String message){  super(message);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS03.class,args);}  }
class C{  public void testEqualsObject(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  Object obj=new Object();  assertFalse(aNumber.equals(obj));}  }
class C{  public boolean isConnected(){  return connectedRS.get().isConnected();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  child=employeeList.item(0);  childName=child.getNodeName();  if (equals("#text",childName)) {    assertEquals("nodeName_w_space","#text",childName);  } else {    assertEqualsAutoCase("element","nodeName_wo_space","em",childName);  }}  }
class C{  public void windowClosed(WindowEvent e){  ((WindowListener)a).windowClosed(e);  ((WindowListener)b).windowClosed(e);}  }
class C{  @Override public boolean is_IntBox(){  if (oct_llx != oct_lx + oct_ly)   return false;  if (oct_lrx != oct_rx - oct_ly)   return false;  if (oct_urx != oct_rx + oct_uy)   return false;  if (oct_ulx != oct_lx - oct_uy)   return false;  return true;}  }
class C{  protected void addIcon(Container top){  Icon sideIcon=getIcon();  if (sideIcon != null) {    JLabel iconLabel=new JLabel(sideIcon);    iconLabel.setName("OptionPane.iconLabel");    iconLabel.setVerticalAlignment(SwingConstants.TOP);    top.add(iconLabel,BorderLayout.BEFORE_LINE_BEGINS);  }}  }
class C{  public static void dumbTradingLogic(String company,int numberOfShares,PortfolioService portfolio,Map<String,Object> quote){  JsonObject json=new JsonObject(quote);  dumbTradingLogic(company,numberOfShares,portfolio,json);}  }
class C{  public BAD_INV_ORDER(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public void toBack(){  moveToBack();}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public CommonAuditHttpAccessAuditFilter(String productName,RequestHandler auditServiceHandler,TimeService time){  this.auditServiceHandler=auditServiceHandler;  this.time=time;}  }
class C{  private void waitWebViewLoad() throws Exception {  onWebView().withNoTimeout().check(webMatches(getCurrentUrl(),containsString(MainFragment.DEFAULT_URL)));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonefalsenocopytext.class,args);}  }
class C{  @Override public final boolean equals(Object socketAddr){  if (this == socketAddr) {    return true;  }  if (!(socketAddr instanceof InetSocketAddress)) {    return false;  }  InetSocketAddress iSockAddr=(InetSocketAddress)socketAddr;  if (port != iSockAddr.port) {    return false;  }  if ((addr == null) && (iSockAddr.addr == null)) {    return hostname.equals(iSockAddr.hostname);  }  if (addr == null) {    return false;  }  return addr.equals(iSockAddr.addr);}  }
class C{  public void updateUI(){  setUI((ProgressBarUI)UIManager.getUI(this));}  }
class C{  public String str(){  if (Double.isNaN(m_val)) {    return "NaN";  } else   if (Double.isInfinite(m_val)) {    if (m_val > 0)     return "Infinity"; else     return "-Infinity";  }  double num=m_val;  String s=Double.toString(num);  int len=s.length();  if (s.charAt(len - 2) == '.' && s.charAt(len - 1) == '0') {    s=s.substring(0,len - 2);    if (s.equals("-0"))     return "0";    return s;  }  int e=s.indexOf('E');  if (e < 0) {    if (s.charAt(len - 1) == '0')     return s.substring(0,len - 1); else     return s;  }  int exp=Integer.parseInt(s.substring(e + 1));  String sign;  if (s.charAt(0) == '-') {    sign="-";    s=s.substring(1);    --e;  } else   sign="";  int nDigits=e - 2;  if (exp >= nDigits)   return sign + s.substring(0,1) + s.substring(2,e)+ zeros(exp - nDigits);  while (s.charAt(e - 1) == '0')   e--;  if (exp > 0)   return sign + s.substring(0,1) + s.substring(2,2 + exp)+ "."+ s.substring(2 + exp,e);  return sign + "0." + zeros(-1 - exp)+ s.substring(0,1)+ s.substring(2,e);}  }
class C{  @Override public void init(int mode,Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {  Utils.checkNotNull(key);  Utils.checkNotNull(params);  int cipherMode=OpenSsl.DECRYPT_MODE;  if (mode == Cipher.ENCRYPT_MODE) {    cipherMode=OpenSsl.ENCRYPT_MODE;  }  byte[] iv;  if (params instanceof IvParameterSpec) {    iv=((IvParameterSpec)params).getIV();  } else {    throw new InvalidAlgorithmParameterException("Illegal parameters");  }  cipher.init(cipherMode,key.getEncoded(),iv);}  }
class C{  public static void deregisterPersistentSearch(){  directoryServer.activePSearches.decrementAndGet();}  }
class C{  public SpdyStream newStream(List<String> requestHeaders,boolean out,boolean in) throws IOException {  int flags=(out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);  int associatedStreamId=0;  int priority=0;  int slot=0;  SpdyStream stream;  int streamId;synchronized (spdyWriter) {synchronized (this) {      if (shutdown) {        throw new IOException("shutdown");      }      streamId=nextStreamId;      nextStreamId+=2;      stream=new SpdyStream(streamId,this,flags,priority,slot,requestHeaders,settings);      if (stream.isOpen()) {        streams.put(streamId,stream);        setIdle(false);      }    }    spdyWriter.synStream(flags,streamId,associatedStreamId,priority,slot,requestHeaders);  }  return stream;}  }
class C{  private void addReconRun(ReconciliationContext reconContext){synchronized (reconRuns) {    if (reconRuns.size() > maxCompletedRuns) {      int completedCount=0;      ListIterator<String> iter=new ArrayList<String>(reconRuns.keySet()).listIterator(reconRuns.size());      while (iter.hasPrevious()) {        String key=iter.previous();        ReconciliationContext aRun=reconRuns.get(key);        if (aRun.getStage().isComplete()) {          ++completedCount;          if (completedCount > maxCompletedRuns) {            reconRuns.remove(key);          }        }      }    }    reconRuns.put(reconContext.getReconId(),reconContext);  }}  }
class C{  public static TestSSLContext create(KeyStore clientKeyStore,char[] clientStorePassword,KeyStore serverKeyStore,char[] serverStorePassword,KeyManager clientKeyManagers,KeyManager serverKeyManagers,TrustManager clientTrustManagers,TrustManager serverTrustManagers,SSLContext clientContext,SSLContext serverContext){  try {    SSLServerSocket serverSocket=(SSLServerSocket)serverContext.getServerSocketFactory().createServerSocket(0);    InetAddress host=InetAddress.getLocalHost();    int port=serverSocket.getLocalPort();    return new TestSSLContext(clientKeyStore,clientStorePassword,serverKeyStore,serverStorePassword,(X509ExtendedKeyManager)clientKeyManagers,(X509ExtendedKeyManager)serverKeyManagers,(X509TrustManager)clientTrustManagers,(X509TrustManager)serverTrustManagers,clientContext,serverContext,serverSocket,host,port);  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected String paramString(){  String defaultCapableString=(defaultCapable ? "true" : "false");  return super.paramString() + ",defaultCapable=" + defaultCapableString;}  }
class C{  public int currentSegment(float[] coords){  if (index >= poly.npoints) {    return SEG_CLOSE;  }  coords[0]=poly.xpoints[index];  coords[1]=poly.ypoints[index];  if (transform != null) {    transform.transform(coords,0,coords,0,1);  }  return (index == 0 ? SEG_MOVETO : SEG_LINETO);}  }
class C{  @Override public boolean hasInterestIn(char value,SearchContext context){  throw new IllegalAccessError("This is the root node");}  }
class C{  public ServletContextLicenseLocator(ServletContext servletContext,Charset charset,String... licenseFiles){  super(charset,licenseFiles);  if (servletContext == null) {    throw new NullPointerException("ServletContext is null");  }  this.servletContext=servletContext;}  }
class C{  public boolean equals(Object object){  if (!(object instanceof Attribute)) {    return false;  }  Attribute val=(Attribute)object;  if (value == null) {    if (val.getValue() == null) {      return name.equals(val.getName());    } else {      return false;    }  }  return ((name.equals(val.getName())) && (value.equals(val.getValue())));}  }
class C{  public BuilderImages<T> useInternalStorage(){  this.config.setUseInternalStorage();  return this;}  }
class C{  public final int size(){  return m_index + 1;}  }
class C{  @Override public Object clone(){  SimpleDateFormat other=(SimpleDateFormat)super.clone();  other.formatData=(DateFormatSymbols)formatData.clone();  return other;}  }
class C{  @Fluent public Job onProgress(Handler<Integer> progressHandler){  this.on("progress",null);  return this;}  }
class C{  public static boolean isIDPInitiatedProfile(String profile){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSLogoutUtil.isIDPInitiatedProfile: proto=" + profile);  }  if ((profile != null) && ((profile.equals(IFSConstants.LOGOUT_IDP_REDIRECT_PROFILE) || (profile.equals(IFSConstants.LOGOUT_IDP_SOAP_PROFILE)) || (profile.equals(IFSConstants.LOGOUT_IDP_GET_PROFILE))))) {    return true;  } else {    return false;  }}  }
class C{  @Override public final int hashCode(){  return holder.hashCode();}  }
class C{  boolean isValidValue(Object value,boolean wantsCCE){  Comparable min=getMinimum();  try {    if (min != null && min.compareTo(value) > 0) {      return false;    }  } catch (  ClassCastException cce) {    if (wantsCCE) {      throw cce;    }    return false;  }  Comparable max=getMaximum();  try {    if (max != null && max.compareTo(value) < 0) {      return false;    }  } catch (  ClassCastException cce) {    if (wantsCCE) {      throw cce;    }    return false;  }  return true;}  }
class C{  public synchronized NSObject[] allObjects(){  return set.toArray(new NSObject[count()]);}  }
class C{  public boolean isCurrency(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].currency;}  }
class C{  static void destroyMBeanUserDatabase(String userDatabase) throws Exception {  ObjectName query=null;  Set<ObjectName> results=null;  query=new ObjectName("Users:type=Group,database=" + userDatabase + ",*");  results=mserver.queryNames(query,null);  for (  ObjectName result : results) {    mserver.unregisterMBean(result);  }  query=new ObjectName("Users:type=Role,database=" + userDatabase + ",*");  results=mserver.queryNames(query,null);  for (  ObjectName result : results) {    mserver.unregisterMBean(result);  }  query=new ObjectName("Users:type=User,database=" + userDatabase + ",*");  results=mserver.queryNames(query,null);  for (  ObjectName result : results) {    mserver.unregisterMBean(result);  }  ObjectName db=new ObjectName("Users:type=UserDatabase,database=" + userDatabase);  if (mserver.isRegistered(db)) {    mserver.unregisterMBean(db);  }}  }
class C{  public MLet(URL[] urls,boolean delegateToCLR){  super(urls);  init(delegateToCLR);}  }
class C{  public void testForkedInviteNonRFC3261(){  shootme.setNonRFC3261(true);  this.shootist.sendInvite();}  }
class C{  public static void expand(JsonValue json){  Iterator<String> iter=json.keys().iterator();  while (iter.hasNext()) {    String key=iter.next();    String expanded=parse(json.get(key));    if (expanded != null) {      json.put(key,expanded);    }  }}  }
class C{  protected Object readResolve() throws InvalidObjectException {  if (this.getClass() != TextAttribute.class) {    throw new InvalidObjectException("subclass didn't correctly implement readResolve");  }  TextAttribute instance=instanceMap.get(getName());  if (instance != null) {    return instance;  } else {    throw new InvalidObjectException("unknown attribute name");  }}  }
class C{  public LogConfigurationException(String message,Throwable cause){  super(message + " (Caused by " + cause+ ")");  this.cause=cause;}  }
class C{  public static boolean isInvalid(int c){  return !isValid(c);}  }
class C{  public ApplicationContextFacade(ApplicationContext context){  super();  this.context=context;  classCache=new HashMap<>();  objectCache=new ConcurrentHashMap<>();  initClassCache();}  }
class C{  public boolean isSuspended(){  return this.suspended;}  }
class C{  public void addActionDecision(ActionDecision actionDecision){  ActionDecision oldDecision=(ActionDecision)actionDecisions.get(actionDecision.getActionName());  if (oldDecision == null) {    actionDecisions.put(actionDecision.getActionName(),actionDecision);  } else {    Set oldValues=oldDecision.getValues();    if ((oldValues == Collections.EMPTY_SET) || (oldValues == null)) {      oldDecision.setValues(actionDecision.getValues());    } else {      oldValues.addAll(actionDecision.getValues());    }    if (actionDecision.getTimeToLive() < oldDecision.getTimeToLive()) {      oldDecision.setTimeToLive(actionDecision.getTimeToLive());    }    PolicyUtils.appendMapToMap(actionDecision.getAdvices(),oldDecision.getAdvices());  }  setTimeToLive();}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public int lineno(){  return lineNumber;}  }
class C{  public McastService(){  properties.setProperty("mcastPort","45564");  properties.setProperty("mcastAddress","228.0.0.4");  properties.setProperty("memberDropTime","3000");  properties.setProperty("mcastFrequency","500");}  }
class C{  public static boolean isFromValidAuthorizedParty(Set<String> acceptedAuthorizedParties,JwtClaimsSet jwtClaims) throws AuthLoginException {  String authorizedPartyClaim=(String)jwtClaims.getClaim(AUTHORIZED_PARTY_CLAIM_KEY);  if (jwtHasAuthorizedPartyClaim(jwtClaims)) {    return acceptedAuthorizedParties.contains(authorizedPartyClaim);  }  logger.error("No authorized party found in JWT claims set.");  return false;}  }
class C{  @Delete(operationDescription=@Operation(description=OAUTH2_USER_APPLICATIONS + DELETE_DESCRIPTION,errors=@ApiError(code=500,description=OAUTH2_USER_APPLICATIONS + DELETE + ERROR_500_DESCRIPTION))) public Promise<ResourceResponse,ResourceException> deleteInstance(Context context,String resourceId){  String userId=contextHelper.getUserId(context);  String realm=contextHelper.getRealm(context);  debug.message("Revoking access to OAuth2 client {} for user {}",resourceId,userId);  try {    oAuth2ProviderSettingsFactory.get(context).revokeConsent(userId,resourceId);    QueryFilter<CoreTokenField> queryFilter=and(getQueryFilter(userId,realm),equalTo(CLIENT_ID.getField(),resourceId));    JsonValue tokens=tokenStore.queryForToken(realm,queryFilter);    if (tokens.asCollection().isEmpty()) {      return new org.forgerock.json.resource.NotFoundException().asPromise();    }    for (    JsonValue token : tokens) {      String tokenId=getAttributeValue(token,ID.getOAuthField());      debug.message("Removing OAuth2 token {} with client {} for user {}",tokenId,resourceId,userId);      tokenStore.delete(realm,tokenId);    }    return getResourceResponse(context,resourceId,tokens).asPromise();  } catch (  InvalidClientException|NotFoundException|ServerException e) {    debug.message("Failed to revoke access to OAuth2 client {} for user {}",resourceId,userId,e);    return new InternalServerErrorException(e).asPromise();  }}  }
class C{  public void testConstrStringExceptionExponentLessIntegerMin(){  String a="-238768.787678287e-214748364767876";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public void treeStructureChanged(TreeModelEvent e){  if (e != null) {    TreePath changedPath=SwingUtilities2.getTreePath(e,getModel());    TreeStateNode changedNode;    changedNode=getNodeForPath(changedPath,false,false);    if (changedNode == root || (changedNode == null && ((changedPath == null && treeModel != null && treeModel.getRoot() == null) || (changedPath != null && changedPath.getPathCount() == 1)))) {      rebuild(true);    } else     if (changedNode != null) {      int nodeIndex, oldRow;      TreeStateNode newNode, parent;      boolean wasExpanded, wasVisible;      int newIndex;      wasExpanded=changedNode.isExpanded();      wasVisible=(changedNode.getRow() != -1);      parent=(TreeStateNode)changedNode.getParent();      nodeIndex=parent.getIndex(changedNode);      if (wasVisible && wasExpanded) {        changedNode.collapse(false);      }      if (wasVisible)       visibleNodes.removeElement(changedNode);      changedNode.removeFromParent();      createNodeAt(parent,nodeIndex);      newNode=(TreeStateNode)parent.getChildAt(nodeIndex);      if (wasVisible && wasExpanded)       newNode.expand(false);      newIndex=newNode.getRow();      if (!isFixedRowHeight() && wasVisible) {        if (newIndex == 0)         updateYLocationsFrom(newIndex); else         updateYLocationsFrom(newIndex - 1);        this.visibleNodesChanged();      } else       if (wasVisible)       this.visibleNodesChanged();    }  }}  }
class C{  public ImportParameters ldifFile(String ldifFile){  this.ldifFile=ldifFile;  return this;}  }
class C{  public ByteString generatePassword() throws DirectoryException {  PasswordGenerator<?> generator=passwordPolicy.getPasswordGenerator();  if (generator == null) {    if (logger.isTraceEnabled()) {      logger.trace("Unable to generate a new password for user %s because no password generator has been defined" + "in the associated password policy.",userDNString);    }    return null;  }  return generator.generatePassword(userEntry);}  }
class C{  private void examineCompletedOperation(UnbindOperation unbindOperation){  assertTrue(unbindOperation.getProcessingStartTime() > 0);  assertTrue(unbindOperation.getProcessingStopTime() > 0);  assertTrue(unbindOperation.getProcessingTime() >= 0);}  }
class C{  @SuppressWarnings("rawtypes") public BeanContextMembershipEvent(BeanContext bc,Collection changes){  super(bc);  if (changes == null)   throw new NullPointerException("BeanContextMembershipEvent constructor:  changes is null.");  children=changes;}  }
class C{  public static Map<String,MappedClass> mappingsFromNodes(Map<String,ClassNode> nodes){  Map<String,MappedClass> mappings=new HashMap<String,MappedClass>();  for (  ClassNode node : nodes.values()) {    mappings=generateClassMapping(node,nodes,mappings);  }  for (  String name : mappings.keySet()) {    mappings=linkMappings(mappings.get(name),mappings);  }  return mappings;}  }
class C{  public BoringLayout replaceOrMake(LayoutContext layoutContext,CharSequence source,TextPaint paint,int outerwidth,Alignment align,float spacingmult,float spacingadd,Metrics metrics,boolean includepad){  replaceWith(source,paint,outerwidth,align,spacingmult,spacingadd);  mEllipsizedWidth=outerwidth;  mEllipsizedStart=0;  mEllipsizedCount=0;  init(layoutContext,source,paint,outerwidth,align,spacingmult,spacingadd,metrics,includepad,true);  return this;}  }
class C{  public synchronized void disableAllAttributes(){  enabledAttributes.removeAllElements();}  }
class C{  public static void putTypeAndFormat(JsonValue jsonSchema,AttributeType attrType){  if (attrType.isPlaceHolder()) {    jsonSchema.put("type","string");    return;  }  final Syntax syntax=attrType.getSyntax();  if (attrType.hasName("userPassword")) {    jsonSchema.put("type","string");    jsonSchema.put("format","password");  } else   if (attrType.hasName("mail")) {    jsonSchema.put("type","string");    jsonSchema.put("format","email");  } else   if (syntax.equals(getBooleanSyntax())) {    jsonSchema.put("type","boolean");  } else   if (syntax.equals(getNumericStringSyntax())) {    jsonSchema.put("type","string");  } else   if (syntax.equals(getIntegerSyntax())) {    jsonSchema.put("type","integer");  } else   if (syntax.equals(getGeneralizedTimeSyntax())) {    jsonSchema.put("type","string");    jsonSchema.put("format","date-time");  } else   if (!syntax.isHumanReadable()) {    jsonSchema.put("type","string");    jsonSchema.put("format","byte");  } else {    jsonSchema.put("type","string");  }}  }
class C{  void saveDevicePrint(String name,Map<String,Object> devicePrint){  try {    List<Map<String,Object>> profiles=devicePrintDao.getProfiles(amIdentity);    String uuid=UUID.randomUUID().toString();    while (profiles.size() >= maxProfilesAllowed) {      DEBUG.message("Removing oldest user profile due to maximum profiles stored quantity");      removeOldestProfile(profiles);    }    long lastSelectedDate=currentTimeMillis();    Map<String,Object> profile=new HashMap<String,Object>();    profile.put("uuid",uuid);    profile.put("name",(name == null || name.isEmpty()) ? generateProfileName(new Date(lastSelectedDate)) : name);    profile.put("selectionCounter",1);    profile.put("lastSelectedDate",lastSelectedDate);    profile.put("devicePrint",devicePrint);    profiles.add(profile);    devicePrintDao.saveProfiles(amIdentity,profiles);  } catch (  Exception e) {    DEBUG.error("Cannot get User's Device Print Profiles attribute. " + e);  }}  }
class C{  @BeforeTest(groups={"cli-realm"}) public void suiteSetup() throws CLIException {  Map<String,Object> env=new HashMap<String,Object>();  env.put(CLIConstants.SYS_PROPERTY_COMMAND_NAME,"amadm");  env.put(CLIConstants.SYS_PROPERTY_DEFINITION_FILES,"com.sun.identity.cli.AccessManager");  env.put(CLIConstants.SYS_PROPERTY_OUTPUT_WRITER,outputWriter);  cmdManager=new CommandManager(env);}  }
class C{  public void test_MultipleUpdatesInOneTables() throws SQLException {  int id=1;  String field="field3";  String selectQuery="SELECT * FROM " + DatabaseCreator.TEST_TABLE1 + " WHERE id="+ id;  Statement statement=conn.createStatement();  ResultSet result=statement.executeQuery(selectQuery);  assertTrue("There is no records with id = " + id,result.next());  result.close();  for (int i=0; i < numThreads; i++) {    threadPool.runTask(createTask7(id,field));  }  threadPool.join();  double expectedVal=id + numThreads;  result=statement.executeQuery(selectQuery);  assertTrue("There is no records with id = " + id,result.next());  result.close();}  }
class C{  public CopiesSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 1) {    throw new IllegalArgumentException("Copies value < 1 specified");  }}  }
class C{  public DTMConfigurationException(String msg,Throwable e){  super(msg,e);}  }
class C{  protected boolean checkCollision(){  if (xPos > WIDTH + 500 || xPos < 0)   return true;  Shape intersection;  intersection=SVGPath.intersect(spriteBounds,stageFloorBase.getSpriteBoundsArray()[Mario.collidingZone]);  if (intersection.getBoundsInParent().getWidth() != -1) {    main.Main.fireballHit.play();    return true;  }  for (int i=0; i < SpriteHandler.getEnemyCast().size(); i++) {    Enemy e=SpriteHandler.getEnemyCast().get(i);    if (e.getSpriteBoundsArray()[5] != null) {      intersection=SVGPath.intersect(spriteBounds,e.getSpriteBoundsArray()[5]);      if (intersection.getBoundsInParent().getWidth() != -1) {        main.Main.fireballIncinerate.play();        e.fireballHit();        Main.updateScore(1000);        return true;      }    }  }  for (  StageBlock block : SpriteHandler.getStageElements()) {    intersection=SVGPath.intersect(spriteBounds,block.getSpriteBounds());    if (intersection.getBoundsInParent().getWidth() != -1) {      main.Main.fireballHit.play();      return true;    }  }  return false;}  }
class C{  ReplicationServerInfo(RSInfo rsInfo,Set<Integer> connectedDSs){  this.rsInfo=new RSInfo(rsInfo.getId(),rsInfo.getServerUrl(),rsInfo.getGenerationId(),rsInfo.getGroupId(),rsInfo.getWeight());  this.protocolVersion=0;  this.baseDN=null;  this.windowSize=0;  this.connectedDSs=connectedDSs;  this.connectedDSNumber=connectedDSs.size();  this.sslEncryption=false;  this.degradedStatusThreshold=-1;  this.serverState=new ServerState();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.MessageAuthenticationElement createMessageAuthenticationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.MessageAuthenticationElementImpl();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportIssuedTokensElement createMustSupportIssuedTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportIssuedTokensElementImpl();}  }
class C{  public JMXServerErrorException(String s,Error err){  super(s);  cause=err;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureValueType createSignatureValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureValueTypeImpl();}  }
class C{  public AMSearchResults searchFilteredRoles(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(FILTERED_ROLE),getSearchFilter(AMObject.FILTERED_ROLE),wildcard,avPairs,searchControl);}  }
class C{  public static void marshal(Object jaxbObject,File xml){  _marshal(jaxbObject,xml);}  }
class C{  public Builder approximateMatchingRule(String approximateMatchingRuleOID){  this.approximateMatchingRuleOID=approximateMatchingRuleOID;  return this;}  }
class C{  public void verifyDS(){  try {    verificationStatus.setDS(VerificationStatus.Verdict.UNKNOWN,ReasonCode.UNKNOWN);    SODFile sod=lds.getSODFile();    X509Certificate docSigningCert=sod.getDocSigningCertificate();    if (docSigningCert == null) {      LOGGER.warning("Could not get document signer certificate from EF.SOd");    }    if (sod.checkDocSignature(docSigningCert)) {      verificationStatus.setDS(VerificationStatus.Verdict.SUCCEEDED,ReasonCode.SIGNATURE_CHECKED);    } else {      verificationStatus.setDS(VerificationStatus.Verdict.FAILED,ReasonCode.SIGNATURE_FAILURE);    }  } catch (  NoSuchAlgorithmException nsae) {    verificationStatus.setDS(VerificationStatus.Verdict.FAILED,ReasonCode.UNSUPPORTED_SIGNATURE_ALGORITHM_FAILURE);    return;  }catch (  Exception e) {    e.printStackTrace();    verificationStatus.setDS(VerificationStatus.Verdict.FAILED,ReasonCode.UNEXPECTED_EXCEPTION_FAILURE);    return;  }}  }
class C{  private static String KD(String secret,String data){  return H(secret + ":" + data);}  }
class C{  public static KeyStoreParameters newKeyStoreParameters(final ConnectionFactory factory,final DN baseDN){  return newKeyStoreParameters(factory,baseDN,defaultOptions());}  }
class C{  public Attribute(AVT avt,Element elem){  m_attribute=avt;  m_owner=elem;}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  String s=in.readUTF();  if (s == null || s.length() == 0) {    byte[] ba=new byte[in.readInt()];    in.readFully(ba);    s=new String(ba);  }  try {    parse(s);  } catch (  MimeTypeParseException e) {    throw new IOException(e.toString());  }}  }
class C{  public void treeNodesRemoved(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    TreeStateNode changedParentNode;    changedIndexs=e.getChildIndices();    changedParentNode=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    if (changedParentNode != null && changedIndexs != null && changedIndexs.length > 0) {      if (changedParentNode.hasBeenExpanded()) {        boolean makeInvisible;        int counter;        int removedRow;        TreeStateNode removedNode;        makeInvisible=((changedParentNode == root && !rootVisible) || (changedParentNode.getRow() != -1 && changedParentNode.isExpanded()));        for (counter=changedIndexs.length - 1; counter >= 0; counter--) {          removedNode=(TreeStateNode)changedParentNode.getChildAt(changedIndexs[counter]);          if (removedNode.isExpanded()) {            removedNode.collapse(false);          }          if (makeInvisible) {            removedRow=removedNode.getRow();            if (removedRow != -1) {              visibleNodes.removeElementAt(removedRow);            }          }          changedParentNode.remove(changedIndexs[counter]);        }        if (changedParentNode.getChildCount() == 0) {          changedParentNode.updatePreferredSize();          if (changedParentNode.isExpanded() && changedParentNode.isLeaf()) {            changedParentNode.collapse(false);          }        }        if (treeSelectionModel != null)         treeSelectionModel.resetRowSelection();        if (!isFixedRowHeight() && (makeInvisible || (changedParentNode.getChildCount() == 0 && changedParentNode.isVisible()))) {          if (changedParentNode == root) {            if (getRowCount() > 0)             getNode(0).setYOrigin(0);            updateYLocationsFrom(0);          } else           updateYLocationsFrom(changedParentNode.getRow());          this.visibleNodesChanged();        } else         if (makeInvisible)         this.visibleNodesChanged();      } else       if (treeModel.getChildCount(changedParentNode.getValue()) == 0) {        changedParentNode.updatePreferredSize();        if (!isFixedRowHeight() && changedParentNode.isVisible())         this.updateYLocationsFrom(changedParentNode.getRow());      }    }  }}  }
class C{  static <T>T find(Class<T> type,String fallbackClassName) throws FactoryConfigurationError {  return find(type,type.getName(),null,fallbackClassName);}  }
class C{  public void testClearBitNegativeOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=150;  byte rBytes[]={-65,-1,-1,-1,-1,-1,-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private boolean checkServerState(UninstallUserData userData) throws UserDataException, ClientException {  boolean cancelled=false;  boolean interactive=parser.isInteractive();  boolean forceOnError=parser.isForceOnError();  UninstallData conf=null;  try {    conf=new UninstallData(Installation.getLocal());  } catch (  Throwable t) {    logger.warn(LocalizableMessage.raw("Error processing task: " + t,t));    throw new UserDataException(Step.CONFIRM_UNINSTALL,getThrowableMsg(INFO_BUG_MSG.get(),t));  }  logger.info(LocalizableMessage.raw("interactive: " + interactive));  logger.info(LocalizableMessage.raw("forceOnError: " + forceOnError));  logger.info(LocalizableMessage.raw("conf.isADS(): " + conf.isADS()));  logger.info(LocalizableMessage.raw("conf.isReplicationServer(): " + conf.isReplicationServer()));  logger.info(LocalizableMessage.raw("conf.isServerRunning(): " + conf.isServerRunning()));  if (conf.isADS() && conf.isReplicationServer()) {    if (conf.isServerRunning()) {      if (interactive) {        try {          println();          if (confirmToUpdateRemote()) {            cancelled=!askForAuthenticationIfNeeded(userData);            if (cancelled) {              println();              cancelled=!confirmToStopServer();            } else {              cancelled=!updateUserUninstallDataWithRemoteServers(userData);              if (cancelled) {                println();                cancelled=!confirmToStopServer();              }            }          } else {            cancelled=!confirmToStopServer();          }        } catch (        ClientException ce) {          throw new UserDataException(null,ce.getMessageObject(),ce);        }      } else {        boolean errorWithRemote=!updateUserUninstallDataWithRemoteServers(userData);        cancelled=errorWithRemote && !parser.isForceOnError();        logger.info(LocalizableMessage.raw("Non interactive mode.  errorWithRemote: " + errorWithRemote));      }    } else     if (interactive) {      println();      try {        if (confirmToUpdateRemoteAndStart()) {          boolean startWorked=startServer(userData.isQuiet());          if (startWorked) {            cancelled=!askForAuthenticationIfNeeded(userData);            if (cancelled) {              println();              cancelled=!confirmToStopServer();            } else {              cancelled=!updateUserUninstallDataWithRemoteServers(userData);              if (cancelled) {                println();                cancelled=!confirmToStopServer();              }            }            userData.setStopServer(true);          } else {            userData.setStopServer(false);            println();            cancelled=!confirmDeleteFiles();          }        } else {          println();          cancelled=!confirmDeleteFiles();        }      } catch (      ClientException ce) {        throw new UserDataException(null,ce.getMessageObject(),ce);      }    } else {      boolean startWorked=startServer(userData.isQuiet());      if (startWorked) {        userData.setStopServer(true);        boolean errorWithRemote=!updateUserUninstallDataWithRemoteServers(userData);        cancelled=errorWithRemote && !parser.isForceOnError();      } else {        cancelled=!forceOnError;        userData.setStopServer(false);      }    }    if (!cancelled || parser.isForceOnError()) {      userData.setStopServer(Installation.getLocal().getStatus().isServerRunning());      logger.info(LocalizableMessage.raw("Must stop the server after confirmations? " + userData.getStopServer()));    }  } else   if (conf.isServerRunning()) {    try {      if (interactive) {        println();        cancelled=!confirmToStopServer();      }      if (!cancelled) {        userData.setStopServer(Installation.getLocal().getStatus().isServerRunning());        logger.info(LocalizableMessage.raw("Must stop the server after confirmations? " + userData.getStopServer()));      }    } catch (    ClientException ce) {      throw new UserDataException(null,ce.getMessageObject(),ce);    }  } else {    userData.setStopServer(false);    if (interactive) {      println();      try {        cancelled=!confirmDeleteFiles();      } catch (      ClientException ce) {        throw new UserDataException(null,ce.getMessageObject(),ce);      }    }  }  logger.info(LocalizableMessage.raw("cancelled: " + cancelled));  return cancelled;}  }
class C{  public int compareTo(BrdTraceInfo p_other){  return p_other.layer - layer;}  }
class C{  public PrefixFileFilter(List<String> prefixes){  this(prefixes,IOCase.SENSITIVE);}  }
class C{  public void init(Instrumentation inst,QueryReporter queryReporter,ConnectorConfiguration configuration){  queryProcessorWrapper=new QueryProcessorWrapper(queryReporter,configuration);  setQueryProcessorIntercepter(inst);  setCassandraDaemonIntercepter(inst);}  }
class C{  public void recycle(){  initial=true;  bytesWritten=0;  charsWritten=0;  bb.recycle();  cb.recycle();  outputCharChunk.setChars(null,0,0);  closed=false;  suspended=false;  doFlush=false;  if (conv != null) {    conv.recycle();    conv=null;  }  enc=null;}  }
class C{  public SQLTransientException(Throwable cause){  super(cause);}  }
class C{  @SuppressWarnings("unused") static <K,V>Promise<Map<K,V>> blockingPromiseMap(final Class<K> keyType,final Class<V> valueType,final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  public static void notifyImportBeginning(Backend<?> backend,LDIFImportConfig config){  for (  ImportTaskListener listener : directoryServer.importTaskListeners) {    try {      listener.processImportBegin(backend,config);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public void testRemainderKnuthOneDigitByOneDigit(){  byte aBytes[]={113,-83,123,-5};  byte bBytes[]={2,-3,-4,-50};  int aSign=1;  int bSign=-1;  byte rBytes[]={2,-9,-14,53};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private final String[] _expandSeenNames(String[] oldShared){  int len=oldShared.length;  String[] newShared;  if (len == 0) {    newShared=_smileBufferRecycler.allocSeenNamesBuffer();    if (newShared == null) {      newShared=new String[SmileBufferRecycler.DEFAULT_NAME_BUFFER_LENGTH];    }  } else   if (len == SmileConstants.MAX_SHARED_NAMES) {    newShared=oldShared;    _seenNameCount=0;  } else {    int newSize=(len == SmileBufferRecycler.DEFAULT_STRING_VALUE_BUFFER_LENGTH) ? 256 : SmileConstants.MAX_SHARED_NAMES;    newShared=new String[newSize];    System.arraycopy(oldShared,0,newShared,0,oldShared.length);  }  return newShared;}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node refChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node insertedNode;  doc1=(Document)load("staff",false);  doc2=(Document)load("staff",true);  newChild=doc1.createElement("newChild");  elementList=doc2.getElementsByTagName("employee");  elementNode=elementList.item(1);  refChild=elementNode.getFirstChild();{    boolean success=false;    try {      insertedNode=elementNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  String[] params={realm,type};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_ALLOWED_OPS",params);  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    IdType idType=convert2IdType(type);    Set ops=amir.getAllowedIdOperations(idType);    String msg=getResourceString("allowed-ops-result");    String[] arg={""};    if ((ops != null) && !ops.isEmpty()) {      for (Iterator i=ops.iterator(); i.hasNext(); ) {        arg[0]=((IdOperation)i.next()).getName();        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));      }    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("get-allowed-ops-no-ops"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_ALLOWED_OPS",params);  } catch (  IdRepoException e) {    String[] args={realm,type,e.getMessage()};    debugError("GetAllowedIdOperations.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ALLOWED_OPS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,e.getMessage()};    debugError("GetAllowedIdOperations.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ALLOWED_OPS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  void updateStats(SearchFilter searchFilter,LocalizableMessage failureMessage){  if (!filterUseEnabled) {    return;  }  FilterStats stats;synchronized (filterToStats) {    stats=filterToStats.get(searchFilter);    if (stats != null) {      stats.update(1,failureMessage);    } else {      stats=new FilterStats();      stats.update(1,failureMessage);      removeLowestHit();      filterToStats.put(searchFilter,stats);    }  }}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  public ChangeTimeHeartbeatMsg(byte[] in,short version) throws DataFormatException {  try {    final ByteArrayScanner scanner=new ByteArrayScanner(in);    final byte msgType=scanner.nextByte();    if (msgType != MSG_TYPE_CT_HEARTBEAT) {      throw new DataFormatException("input is not a valid " + getClass().getSimpleName() + " message: "+ msgType);    }    csn=version >= REPLICATION_PROTOCOL_V7 ? scanner.nextCSN() : scanner.nextCSNUTF8();    if (!scanner.isEmpty()) {      throw new DataFormatException("Did not expect to find more bytes to read for " + getClass().getSimpleName() + " message.");    }  } catch (  RuntimeException e) {    throw new DataFormatException("byte[] is not a valid CT_HEARTBEAT msg");  }}  }
class C{  public ConnectionPoolTimeoutException(String message){  super(message);}  }
class C{  private void continueLogout(boolean isSuccess){  FSUtils.debug.message("Entered FSSingleLogoutHandler::continueLogout");  if (FSLogoutUtil.liveConnectionsExist(userID,metaAlias)) {    FSUtils.debug.message("More liveConnectionsExist");    HashMap providerMap=FSLogoutUtil.getCurrentProvider(userID,metaAlias,ssoToken);    if (providerMap != null) {      FSSessionPartner currentSessionProvider=(FSSessionPartner)providerMap.get(IFSConstants.PARTNER_SESSION);      this.sessionIndex=(String)providerMap.get(IFSConstants.SESSION_INDEX);      if (currentSessionProvider != null) {        String currentEntityId=currentSessionProvider.getPartner();        isCurrentProviderIDPRole=currentSessionProvider.getIsRoleIDP();        ProviderDescriptorType currentDesc=null;        try {          if (isCurrentProviderIDPRole) {            currentDesc=metaManager.getIDPDescriptor(realm,currentEntityId);          } else {            currentDesc=metaManager.getSPDescriptor(realm,currentEntityId);          }        } catch (        Exception e) {          FSUtils.debug.error("FSSingleLogoutHandler:cannot get meta:",e);        }        setRemoteDescriptor(currentDesc);        FSSessionManager sessionManager=FSSessionManager.getInstance(metaAlias);        FSSession session=sessionManager.getSession(sessionManager.getSessionList(userID),sessionIndex);        if (!supportSOAPProfile(remoteDescriptor)) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Single Logout Profile cannot" + " be processed. Verify profile in metadata");          }          String[] data={IFSConstants.LOGOUT_IDP_SOAP_PROFILE};          LogUtil.error(Level.INFO,LogUtil.LOGOUT_PROFILE_NOT_SUPPORTED,data,ssoToken);          return;        }        FSUtils.debug.message("FSSLOHandler, SOAP in case 2");        if ((doIDPSoapProfile(currentEntityId)).getStatus().equalsIgnoreCase(IFSConstants.SAML_SUCCESS) || !isCurrentProviderIDPRole) {          FSLogoutUtil.removeCurrentSessionPartner(metaAlias,currentEntityId,ssoToken,userID);          FSUtils.debug.message("SOAP partner removed, case 3");        }        return;      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Reached else part " + " currentSessionProvider " + "is null. nothing more to broadcast"+ "\nNo more providers, destroy user"+ "session call destroyPrincipalSession");        }        FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,sessionIndex,request,response);        if (response != null) {          returnAfterCompletion();        }        return;      }    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("GetCurrentProvider returns null HashMap" + " Clean session and return" + "\nNo live connections, destroy user"+ "  session call destroyPrincipalSession");      }      FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,sessionIndex,request,response);      if (response != null) {        returnAfterCompletion();      }      return;    }  } else {    FSUtils.debug.message("Reached else part in continuelogout");    if (isSuccess || !isCurrentProviderIDPRole) {      FSUtils.debug.message("No live connections, destroy session");      FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,sessionIndex,request,response);    }    callPostSingleLogoutSuccess(respObj,IFSConstants.LOGOUT_SP_SOAP_PROFILE);    if (response != null) {      returnAfterCompletion();    }    return;  }}  }
class C{  private void parseMinorVersion(String minorVer) throws FSMsgException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutNotification(Element): invalid " + "MinorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("FSLogoutNotification(Element): " + "MinorVersion of the LogoutRequest is too high.");    throw new FSMsgException("requestVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("FSLogoutNotification(Element): " + "MinorVersion of the LogoutRequest is too low.");    throw new FSMsgException("requestVersionTooLow",null);  }}  }
class C{  @Descriptor("Hash the input string.") public void secureHash(CommandSession session,@Parameter(names={"-j","--json"},presentValue="false",absentValue="true") boolean isString,@Parameter(names={"-a","--algorithm"},absentValue="SHA-256") String algorithm,@Descriptor("source string to hash") String stringValue){  try {    CryptoServiceImpl cryptoSvc=(CryptoServiceImpl)CryptoServiceFactory.getInstance();    cryptoSvc.activate(null);    stringValue=stringValue.trim();    JsonValue value=new JsonValue(isString ? stringValue : mapper.readValue(stringValue,Object.class));    JsonValue secure=cryptoSvc.hash(value,algorithm);    StringWriter wr=new StringWriter();    mapper.writerWithDefaultPrettyPrinter().writeValue(wr,secure.getObject());    session.getConsole().println("-----BEGIN HASHED VALUE-----");    session.getConsole().println(wr.toString());    session.getConsole().println("------END HASHED VALUE------");  } catch (  final JsonCryptoException|IOException|GeneralSecurityException e) {    e.printStackTrace();  }}  }
class C{  public boolean managedObjectExists(ManagedObjectPath<?,?> path){  DN targetDN=DNBuilder.create(path);  try {    return configRepository.getEntry(targetDN) != null;  } catch (  ConfigException e) {    return false;  }}  }
class C{  protected void drawCheckAppearance(float width,float height,String value){  PdfStream streamOn=new PdfStream().makeIndirect(getDocument());  PdfCanvas canvasOn=new PdfCanvas(streamOn,new PdfResources(),getDocument());  Rectangle rect=new Rectangle(0,0,width,height);  PdfFormXObject xObjectOn=new PdfFormXObject(rect);  PdfFormXObject xObjectOff=new PdfFormXObject(rect);  drawBorder(canvasOn,xObjectOn,width,height);  drawCheckBox(canvasOn,width,height,(float)DEFAULT_FONT_SIZE,true);  PdfStream streamOff=new PdfStream().makeIndirect(getDocument());  PdfCanvas canvasOff=new PdfCanvas(streamOff,new PdfResources(),getDocument());  drawBorder(canvasOff,xObjectOff,width,height);  drawCheckBox(canvasOff,width,height,(float)DEFAULT_FONT_SIZE,false);  PdfWidgetAnnotation widget=getWidgets().get(0);  xObjectOn.getPdfObject().getOutputStream().writeBytes(streamOn.getBytes());  xObjectOn.getResources().addFont(getDocument(),getFont());  setDefaultAppearance(generateDefaultAppearanceString(font,fontSize == 0 ? (float)DEFAULT_FONT_SIZE : fontSize,color,xObjectOn.getResources()));  xObjectOff.getPdfObject().getOutputStream().writeBytes(streamOff.getBytes());  xObjectOff.getResources().addFont(getDocument(),getFont());  PdfDictionary normalAppearance=new PdfDictionary();  normalAppearance.put(new PdfName(value),xObjectOn.getPdfObject());  normalAppearance.put(new PdfName("Off"),xObjectOff.getPdfObject());  PdfDictionary mk=new PdfDictionary();  mk.put(PdfName.CA,new PdfString(text));  widget.getPdfObject().put(PdfName.MK,mk);  widget.setNormalAppearance(normalAppearance);}  }
class C{  ID2Entry(TreeName name,DataConfig dataConfig) throws StorageRuntimeException {  super(name);  this.dataConfig=dataConfig;}  }
class C{  public Hashtable(){  this(11,0.75f);}  }
class C{  public void addFavorite(){  AddFavoriteDialog dialogFragment=((AddFavoriteDialog)getFragmentManager().findFragmentByTag(ADD_FAVORITE));  if (null == dialogFragment) {    return;  }  Dialog dialog=dialogFragment.getDialog();  if (null == dialog) {    return;  }  EditText editText=(EditText)dialog.findViewById(R.id.dlg_add_station_name_text);  if (null == editText) {    return;  }  String newName=editText.getText().toString().trim();  if (0 != newName.length()) {    mDlgStationName=newName;  }  FmRadioStation.updateStationToDb(mContext,mDlgStationName,FmRadioStation.STATION_TYPE_FAVORITE,mDlgStationFreq);  mAdapter.notifyDataSetChanged();}  }
class C{  public void remove(int childIndex){  MutableTreeNode child=(MutableTreeNode)getChildAt(childIndex);  children.removeElementAt(childIndex);  child.setParent(null);}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  protected synchronized void removeAttributeSetAt(int index){  int numAttrs=attrs.length;  AttributeSet[] newAttrs=new AttributeSet[numAttrs - 1];  if (numAttrs > 0) {    if (index == 0) {      System.arraycopy(attrs,1,newAttrs,0,numAttrs - 1);    } else     if (index < (numAttrs - 1)) {      System.arraycopy(attrs,0,newAttrs,0,index);      System.arraycopy(attrs,index + 1,newAttrs,index,numAttrs - index - 1);    } else {      System.arraycopy(attrs,0,newAttrs,0,numAttrs - 1);    }  }  attrs=newAttrs;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  B64InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new B64InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public boolean isSecure(){  return false;}  }
class C{  protected SizeRequirements calculateMajorAxisRequirements(int axis,SizeRequirements r){  SizeRequirements req=super.calculateMajorAxisRequirements(axis,r);  req.maximum=Integer.MAX_VALUE;  return req;}  }
class C{  public void removeFirst(){  if (hlist.size() != 0)   hlist.remove(0);}  }
class C{  Clause buildNumericValueClause(String propTable,String operand,String placeholder){  return where(propTable + ".proptype = 'java.lang.Integer'").or(propTable + ".proptype = 'java.lang.Double'").and("CAST(" + propTable + ".propvalue AS DECIMAL) "+ operand+ " ${"+ placeholder+ "}");}  }
class C{  @Override public boolean isOutboundDone(){  return isOutboundDone;}  }
class C{  @BeforeGroups(groups="needRunningServer") public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode05.class,args);}  }
class C{  protected void forwardToErrorPage(Request request,HttpServletResponse response,LoginConfig config) throws IOException {  String errorPage=config.getErrorPage();  if (errorPage == null || errorPage.length() == 0) {    String msg=sm.getString("formAuthenticator.noErrorPage",context.getName());    log.warn(msg);    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,msg);    return;  }  RequestDispatcher disp=context.getServletContext().getRequestDispatcher(config.getErrorPage());  try {    if (context.fireRequestInitEvent(request)) {      disp.forward(request.getRequest(),response);      context.fireRequestDestroyEvent(request);    }  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    String msg=sm.getString("formAuthenticator.forwardErrorFail");    log.warn(msg,t);    request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,t);    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,msg);  }}  }
class C{  public ChildLocator(){  lastAlloc=new Rectangle();  childAlloc=new Rectangle();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenodens02.class,args);}  }
class C{  private void skip(int numSymbols){  index+=numSymbols;}  }
class C{  public final void remove(AwtreeNodeLeaf[] p_entries){  if (p_entries == null)   return;  for (int index=0; index < p_entries.length; ++index) {    remove_leaf(p_entries[index]);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS01.class,args);}  }
class C{  private Entry createBackendEntry(String backendID,boolean enabled,DN... baseDNs) throws Exception {  assertNotNull(baseDNs);  assertFalse(baseDNs.length == 0);  ArrayList<String> lines=new ArrayList<>();  lines.add("dn: ds-cfg-backend-id=" + backendID + ",cn=Backends,cn=config");  lines.add("objectClass: top");  lines.add("objectClass: ds-cfg-backend");  lines.add("objectClass: ds-cfg-memory-backend");  lines.add("ds-cfg-backend-id: " + backendID);  lines.add("ds-cfg-java-class: org.opends.server.backends.MemoryBackend");  lines.add("ds-cfg-enabled: " + enabled);  lines.add("ds-cfg-writability-mode: enabled");  for (  DN dn : baseDNs) {    lines.add("ds-cfg-base-dn: " + dn);  }  String[] lineArray=new String[lines.size()];  lines.toArray(lineArray);  return TestCaseUtils.makeEntry(lineArray);}  }
class C{  private PlaPointFloat calc_door_right_corner(ArtBacktrackElement p_to_info){  ExpandRoomComplete from_room=p_to_info.door.other_room_complete(p_to_info.next_room);  if (from_room == null)   return null;  PlaPointFloat pole=from_room.get_shape().centre_of_gravity();  ShapeTile curr_to_door_shape=p_to_info.door.get_shape();  int right_most_corner_no=curr_to_door_shape.index_of_right_most_corner(pole);  return curr_to_door_shape.corner_approx(right_most_corner_no);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedatabegining.class,args);}  }
class C{  public Builder ruleID(final int ruleID){  this.ruleID=ruleID;  return this;}  }
class C{  public boolean isAbsolute(){  return fs.isAbsolute(this);}  }
class C{  public boolean isServiceIdentifier(){  return (isServiceIdentifier);}  }
class C{  public StatementEvent(PooledConnection con,PreparedStatement statement){  super(con);  this.statement=statement;  this.exception=null;}  }
class C{  final int internalNextInt(int origin,int bound){  if (origin < bound) {    int n=bound - origin;    if (n > 0) {      return nextInt(n) + origin;    } else {      int r;      do {        r=nextInt();      } while (r < origin || r >= bound);      return r;    }  } else {    return nextInt();  }}  }
class C{  private static String escapeHtml(String rawString){  StringBuilder buffer=new StringBuilder();  for (int i=0; i < rawString.length(); i++) {    escapeChar(buffer,rawString.charAt(i));  }  return buffer.toString();}  }
class C{  public void from_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("from_any",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.from_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_short",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_short(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected void error(String msg) throws javax.xml.transform.TransformerException {  error(msg,null);}  }
class C{  static MatchingRuleImpl collationGreaterThanMatchingRule(Locale locale){  return new CollationGreaterThanMatchingRuleImpl(locale);}  }
class C{  static <T>ReplayPromise<Void> allReplay(final Duration timeout,final long time,final List<Promise<T>> promises){  return allReplay(timeout,time,promises.toArray(new Promise[promises.size()]));}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public static Name of(final String... parts){  Reject.ifTrue(parts.length == 0);  Name name=null;  for (  String part : parts) {    name=new Name(name,part);  }  return name;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element ownerElement;  String ownerElementName;  Attr attr;  Attr newAttr;  doc=(Document)load("staffNS",false);  element=doc.createElement("root");  attr=doc.createAttributeNS("http://www.w3.org/DOM/L1","L1:att");  newAttr=element.setAttributeNodeNS(attr);  ownerElement=attr.getOwnerElement();  ownerElementName=ownerElement.getNodeName();  assertEqualsIgnoreCase("attrgetownerelement02","root",ownerElementName);}  }
class C{  public void testDivideRoundHalfEvenPos1(){  String a="92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static boolean isSupportedControl(String controlOID){  return DirectoryServer.isSupportedControl(controlOID);}  }
class C{  public final void testGetFormat(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  PKCS8EncodedKeySpec meks=new PKCS8EncodedKeySpec(encodedKey);  assertEquals("PKCS#8",meks.getFormat());}  }
class C{  public ServerManagedObjectChangeListenerAdaptor(ConfigurationChangeListener<? super T> listener){  this.listener=listener;}  }
class C{  public static GenericBindRequest unmodifiableGenericBindRequest(final GenericBindRequest request){  if (request instanceof UnmodifiableGenericBindRequestImpl) {    return request;  }  return new UnmodifiableGenericBindRequestImpl(request);}  }
class C{  public static boolean isID3v23FrameIdentifier(String identifier){  return identifier.length() >= 4 && ID3v23Frames.getInstanceOf().getIdToValueMap().containsKey(identifier.substring(0,4));}  }
class C{  public long tryConvertToOptimisticRead(long stamp){  long a=stamp & ABITS, m, s, next;  WNode h;  U.loadFence();  for (; ; ) {    if (((s=state) & SBITS) != (stamp & SBITS))     break;    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break;      return s;    } else     if (m == WBIT) {      if (a != m)       break;      state=next=(s+=WBIT) == 0L ? ORIGIN : s;      if ((h=whead) != null && h.status != 0)       release(h);      return next;    } else     if (a == 0L || a >= WBIT)     break; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,next=s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return next & SBITS;      }    } else     if ((next=tryDecReaderOverflow(s)) != 0L)     return next & SBITS;  }  return 0L;}  }
class C{  public static Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_First(field2,orderByComparator);}  }
class C{  public static MPEGFrameHeader parseMPEGHeader(ByteBuffer bb) throws InvalidAudioFrameException {  int position=bb.position();  bb.get(header,0,HEADER_SIZE);  bb.position(position);  MPEGFrameHeader frameHeader=new MPEGFrameHeader(header);  return frameHeader;}  }
class C{  public String paramString(){  String typeStr;switch (id) {case INTERNAL_FRAME_OPENED:    typeStr="INTERNAL_FRAME_OPENED";  break;case INTERNAL_FRAME_CLOSING:typeStr="INTERNAL_FRAME_CLOSING";break;case INTERNAL_FRAME_CLOSED:typeStr="INTERNAL_FRAME_CLOSED";break;case INTERNAL_FRAME_ICONIFIED:typeStr="INTERNAL_FRAME_ICONIFIED";break;case INTERNAL_FRAME_DEICONIFIED:typeStr="INTERNAL_FRAME_DEICONIFIED";break;case INTERNAL_FRAME_ACTIVATED:typeStr="INTERNAL_FRAME_ACTIVATED";break;case INTERNAL_FRAME_DEACTIVATED:typeStr="INTERNAL_FRAME_DEACTIVATED";break;default :typeStr="unknown type";}return typeStr;}  }
class C{  private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){  int penalty=0;  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();  byte[][] array=matrix.getArray();  for (int i=0; i < iLimit; i++) {    int numSameBitCells=0;    int prevBit=-1;    for (int j=0; j < jLimit; j++) {      int bit=isHorizontal ? array[i][j] : array[j][i];      if (bit == prevBit) {        numSameBitCells++;      } else {        if (numSameBitCells >= 5) {          penalty+=N1 + (numSameBitCells - 5);        }        numSameBitCells=1;        prevBit=bit;      }    }    if (numSameBitCells >= 5) {      penalty+=N1 + (numSameBitCells - 5);    }  }  return penalty;}  }
class C{  public void updateConfig(RadiusServiceConfig config){  this.config=config;}  }
class C{  public void flushBuffer() throws IOException {  if (count > 0) {    m_os.write(m_outputBytes,0,count);    count=0;  }}  }
class C{  private List<String> toList(String[] array){  List<String> ret=new ArrayList<String>();  if (array != null && array.length > 0) {    ret.addAll(Arrays.asList(array));  }  return ret;}  }
class C{  private boolean compareListsOfAttributeAssignmentExpression(List<AttributeAssignmentExpression> list1,List<AttributeAssignmentExpression> list2){  if (list1.size() != list2.size()) {    return false;  }  for (  AttributeAssignmentExpression aae : list1) {    boolean found=false;    for (    AttributeAssignmentExpression otherAae : list2) {      if (checkEqualAttributeAssignmentExpressions(aae,otherAae)) {        found=true;        break;      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  public boolean isStatusAttribute(){  return (isStatusAttribute);}  }
class C{  public void replaceSubject(String name,Subject subject,boolean exclusive) throws NameNotFoundException {  users.replaceSubject(name,subject,exclusive);}  }
class C{  private void checkNoAntennaDialogInOnResume(){  if (mIsNeedShowNoAntennaDlg && mService != null && !mService.isAntennaAvailable() && !FmRadioUtils.isFmShortAntennaSupport()) {    Log.w(TAG,"Need to show no antenna dialog for plug out earphone in onPause state");    dismissNoAntennaDialog();    showNoAntennaDialog();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textindexsizeerrnegativeoffset.class,args);}  }
class C{  private void expungeStaleEntries(){  for (Object x; (x=queue.poll()) != null; ) {synchronized (queue) {      @SuppressWarnings("unchecked") Entry<K,V> e=(Entry<K,V>)x;      int i=indexFor(e.hash,table.length);      Entry<K,V> prev=table[i];      Entry<K,V> p=prev;      while (p != null) {        Entry<K,V> next=p.next;        if (p == e) {          if (prev == e)           table[i]=next; else           prev.next=next;          e.value=null;          size--;          break;        }        prev=p;        p=next;      }    }  }}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  protected void parsePathParameters(org.apache.coyote.Request req,Request request){  req.decodedURI().toBytes();  ByteChunk uriBC=req.decodedURI().getByteChunk();  int semicolon=uriBC.indexOf(';',0);  if (semicolon == -1) {    return;  }  String enc=connector.getURIEncodingLower();  if (enc == null) {    enc="iso-8859-1";  }  Charset charset=null;  try {    charset=B2CConverter.getCharsetLower(enc);  } catch (  UnsupportedEncodingException e1) {    log.warn(sm.getString("coyoteAdapter.parsePathParam",enc));  }  if (log.isDebugEnabled()) {    log.debug(sm.getString("coyoteAdapter.debug","uriBC",uriBC.toString()));    log.debug(sm.getString("coyoteAdapter.debug","semicolon",String.valueOf(semicolon)));    log.debug(sm.getString("coyoteAdapter.debug","enc",enc));  }  while (semicolon > -1) {    int start=uriBC.getStart();    int end=uriBC.getEnd();    int pathParamStart=semicolon + 1;    int pathParamEnd=ByteChunk.findBytes(uriBC.getBuffer(),start + pathParamStart,end,new byte[]{';','/'});    String pv=null;    if (pathParamEnd >= 0) {      if (charset != null) {        pv=new String(uriBC.getBuffer(),start + pathParamStart,pathParamEnd - pathParamStart,charset);      }      byte[] buf=uriBC.getBuffer();      for (int i=0; i < end - start - pathParamEnd; i++) {        buf[start + semicolon + i]=buf[start + i + pathParamEnd];      }      uriBC.setBytes(buf,start,end - start - pathParamEnd + semicolon);    } else {      if (charset != null) {        pv=new String(uriBC.getBuffer(),start + pathParamStart,(end - start) - pathParamStart,charset);      }      uriBC.setEnd(start + semicolon);    }    if (log.isDebugEnabled()) {      log.debug(sm.getString("coyoteAdapter.debug","pathParamStart",String.valueOf(pathParamStart)));      log.debug(sm.getString("coyoteAdapter.debug","pathParamEnd",String.valueOf(pathParamEnd)));      log.debug(sm.getString("coyoteAdapter.debug","pv",pv));    }    if (pv != null) {      int equals=pv.indexOf('=');      if (equals > -1) {        String name=pv.substring(0,equals);        String value=pv.substring(equals + 1);        request.addPathParameter(name,value);        if (log.isDebugEnabled()) {          log.debug(sm.getString("coyoteAdapter.debug","equals",String.valueOf(equals)));          log.debug(sm.getString("coyoteAdapter.debug","name",name));          log.debug(sm.getString("coyoteAdapter.debug","value",value));        }      }    }    semicolon=uriBC.indexOf(';',semicolon);  }}  }
class C{  public PolicyReferralEditViewBean(){  super("PolicyReferralEdit",DEFAULT_DISPLAY_URL);}  }
class C{  private static void processDataRequests(String xmlBaseDir) throws SMSException, SSOException, IOException, PolicyException {  SetupProgress.reportStart("configurator.progress.configure.system",null);  SSOToken ssoToken=getAdminSSOToken();  try {    Map map=ServicesDefaultValues.getDefaultValues();    String hostname=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_HOST);    ConfigureData configData=new ConfigureData(xmlBaseDir,servletCtx,hostname,ssoToken);    configData.configure();    SetupProgress.reportEnd("emb.done",null);  } catch (  SMSException e) {    Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.processDataRequests",e);    throw e;  }catch (  SSOException e) {    Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.processDataRequests",e);    throw e;  }catch (  IOException e) {    Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.processDataRequests",e);    throw e;  }}  }
class C{  public ClientFaultException(final SAML2IdentityProviderAdapter idpAdapter,final String messageCode){  super(idpAdapter,messageCode,null);}  }
class C{  public void test_execCreatedJarWithManifest() throws IOException, InterruptedException {  File jarFile=File.createTempFile("cts_dalvikExecTest_",".jar");  jarFile.deleteOnExit();  Manifest manifest=new Manifest();  Attributes attrs=manifest.getMainAttributes();  attrs.put(Attributes.Name.MANIFEST_VERSION,"3.1415962");  attrs.put(Attributes.Name.MAIN_CLASS,"dalvikExecTest.HelloWorld");  attrs.put(Attributes.Name.CLASS_PATH,jarFile.getName());  JarOutputStream jarOut=new JarOutputStream(new FileOutputStream(jarFile),manifest);  jarOut.putNextEntry(new JarEntry("classes.dex"));  Streams.copy(Support_Resources.getResourceStream("cts_dalvikExecTest_classes.dex"),jarOut);  jarOut.putNextEntry(new JarEntry("dalvikExecTest/myResource"));  jarOut.write("This Resource contains some text.".getBytes());  jarOut.close();  String res;  res=execDalvik(jarFile.getAbsolutePath(),"dalvikExecTest.HelloWorld");  assertEquals("Hello Android World!","Hello Android World!\n",res);  res=execDalvik(jarFile.getAbsolutePath(),"dalvikExecTest.ResourceDumper");  assertTrue("Android Resource Dumper started",res.contains("Android Resource Dumper started"));  assertTrue("This Resource contains some text.",res.contains("This Resource contains some text."));  JarFile jarIn=new JarFile(jarFile);  manifest=jarIn.getManifest();  attrs=manifest.getMainAttributes();  assertEquals("MANIFEST_VERSION must match!","3.1415962",attrs.get(Attributes.Name.MANIFEST_VERSION));  assertEquals("MAIN_CLASS must match!","dalvikExecTest.HelloWorld",attrs.get(Attributes.Name.MAIN_CLASS));  assertEquals("CLASS_PATH must match!",jarFile.getName(),attrs.get(Attributes.Name.CLASS_PATH));}  }
class C{  public SIPHeader parse() throws ParseException {  headerName(TokenTypes.PROXY_AUTHORIZATION);  ProxyAuthorization proxyAuth=new ProxyAuthorization();  super.parse(proxyAuth);  return proxyAuth;}  }
class C{  public boolean isLeapYear(){  return IsoChronology.INSTANCE.isLeapYear(year);}  }
class C{  public Vector<Object> toValuesVector(){  final Vector<Object> values=new Vector<Object>();  for (  final JKTableColumnValue value : this.columnsValues) {    values.add(value);  }  return values;}  }
class C{  private IdentityMapper loadMapper(String className,IdentityMapperCfg configuration,boolean initialize) throws InitializationException {  try {    IdentityMapperCfgDefn definition=IdentityMapperCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends IdentityMapper> mapperClass=propertyDefinition.loadClass(className,IdentityMapper.class);    IdentityMapper mapper=mapperClass.newInstance();    if (initialize) {      mapper.initializeIdentityMapper(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!mapper.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_IDMAPPER_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return mapper;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_IDMAPPER_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public static void verifyCategoryForValue(Class<?> category,Attribute attribute){  if (!category.equals(attribute.getCategory())) {    throw new IllegalArgumentException();  }}  }
class C{  protected void deployWARs(File appBase,String[] files){  if (files == null)   return;  ExecutorService es=host.getStartStopExecutor();  List<Future<?>> results=new ArrayList<>();  for (int i=0; i < files.length; i++) {    if (files[i].equalsIgnoreCase("META-INF"))     continue;    if (files[i].equalsIgnoreCase("WEB-INF"))     continue;    File war=new File(appBase,files[i]);    if (files[i].toLowerCase(Locale.ENGLISH).endsWith(".war") && war.isFile() && !invalidWars.contains(files[i])) {      ContextName cn=new ContextName(files[i],true);      if (isServiced(cn.getName())) {        continue;      }      if (deploymentExists(cn.getName())) {        DeployedApplication app=deployed.get(cn.getName());        boolean unpackWAR=unpackWARs;        if (unpackWAR && host.findChild(cn.getName()) instanceof StandardContext) {          unpackWAR=((StandardContext)host.findChild(cn.getName())).getUnpackWAR();        }        if (!unpackWAR && app != null) {          File dir=new File(appBase,cn.getBaseName());          if (dir.exists()) {            if (!app.loggedDirWarning) {              log.warn(sm.getString("hostConfig.deployWar.hiddenDir",dir.getAbsoluteFile(),war.getAbsoluteFile()));              app.loggedDirWarning=true;            }          } else {            app.loggedDirWarning=false;          }        }        continue;      }      if (!validateContextPath(appBase,cn.getBaseName())) {        log.error(sm.getString("hostConfig.illegalWarName",files[i]));        invalidWars.add(files[i]);        continue;      }      results.add(es.submit(new DeployWar(this,cn,war)));    }  }  for (  Future<?> result : results) {    try {      result.get();    } catch (    Exception e) {      log.error(sm.getString("hostConfig.deployWar.threaded.error"),e);    }  }}  }
class C{  public NTLMEngineException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected final Class<?> findSystemClass(String className) throws ClassNotFoundException {  return Class.forName(className,false,getSystemClassLoader());}  }
class C{  public LDAPMessage(int messageID,ProtocolOp protocolOp,List<Control> controls){  this.messageID=messageID;  this.protocolOp=protocolOp;  this.controls=controls;}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.OrganizationDisplayNameType createOrganizationDisplayNameType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.OrganizationDisplayNameTypeImpl();}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  private AciBody(String verision,String name,int startPos,List<PermBindRulePair> permBindRulePairs){  this.version=verision;  this.name=name;  this.startPos=startPos;  this.permBindRulePairs=permBindRulePairs;}  }
class C{  public InvalidityDate(byte[] encoding) throws IOException {  super(encoding);  date=(Date)ASN1.decode(encoding);}  }
class C{  public final void testEqualsObject03(){  assertFalse(new ECFieldFp(BigInteger.valueOf(23L)).equals(new Object()));}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {  flushPending();  if (m_doIndent && !m_isprevtext) {    try {      outputLineSep();    } catch (    IOException e) {      throw new SAXException(e);    }  }  flushWriter();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String name;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(1);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  name=streetAttr.getNodeName();  assertEquals("nodeName","street",name);  name=streetAttr.getName();  assertEquals("name","street",name);}  }
class C{  @Override public Descriptor clone(){  return this;}  }
class C{  public void handleTblBootstrapResOffHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SMDiscoveryBootstrapRefOffEditViewBean vb=(SMDiscoveryBootstrapRefOffEditViewBean)getViewBean(SMDiscoveryBootstrapRefOffEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.populateValues((String)getDisplayFieldValue(TBL_BOOTSTRAP_RES_OFF_HREF_ACTION));    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public NameIDMappingRequest createNameIDMappingRequest(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEIDMAPPING_REQ,elem);  if (obj == null) {    return new NameIDMappingRequestImpl(elem);  } else {    return (NameIDMappingRequest)obj;  }}  }
class C{  public boolean isReadOnly(){  return readOnly;}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return text != null ? buffer.append(Integer.toString(code)).append(SP).append(agent).append(SP).append(DOUBLE_QUOTE).append(text).append(DOUBLE_QUOTE) : buffer.append(Integer.toString(code)).append(SP).append(agent);}  }
class C{  private int optimize_item_autoroute(BrdActionThread p_thread,int p_max_pass_count,int p_ripup_costs,boolean p_with_prefered_directions){  BatchAutorouter router_instance=new BatchAutorouter(p_thread,p_with_prefered_directions,p_ripup_costs);  int curr_pass_no=1;  while (!p_thread.is_stop_requested() && curr_pass_no <= p_max_pass_count) {    int unrouted_count=router_instance.autoroute_pass(curr_pass_no);    if (unrouted_count <= 0)     break;    p_thread.hdlg.itera_settings.autoroute_settings.pass_no_inc();    ++curr_pass_no;  }  router_instance.remove_tails();  return curr_pass_no;}  }
class C{  public void testReaderNonBlocking() throws IOException {  Pipe.SourceChannel sourceChannel=createNonBlockingChannel("abc".getBytes("UTF-8"));  try {    Channels.newReader(sourceChannel,"UTF-8").read();    fail();  } catch (  IllegalBlockingModeException expected) {  }}  }
class C{  protected void decrypt(long position,byte[] buffer,int offset,int length) throws IOException {  ByteBuffer inByteBuffer=getBuffer();  ByteBuffer outByteBuffer=getBuffer();  CipherState state=null;  try {    state=getCipherState();    byte[] iv=getInitIV().clone();    resetCipher(state,position,iv);    byte padding=getPadding(position);    inByteBuffer.position(padding);    int n=0;    while (n < length) {      int toDecrypt=Math.min(length - n,inByteBuffer.remaining());      inByteBuffer.put(buffer,offset + n,toDecrypt);      decrypt(state,inByteBuffer,outByteBuffer,padding);      outByteBuffer.get(buffer,offset + n,toDecrypt);      n+=toDecrypt;      padding=postDecryption(state,inByteBuffer,position + n,iv);    }  }  finally {    returnBuffer(inByteBuffer);    returnBuffer(outByteBuffer);    returnCipherState(state);  }}  }
class C{  public PersistedQueue(final File queueEnvPath,final String queueName,final int cacheSize){  queueEnvPath.mkdirs();  final EnvironmentConfig dbEnvConfig=new EnvironmentConfig();  dbEnvConfig.setTransactional(false);  dbEnvConfig.setAllowCreate(true);  this.dbEnv=new Environment(queueEnvPath,dbEnvConfig);  DatabaseConfig dbConfig=new DatabaseConfig();  dbConfig.setTransactional(false);  dbConfig.setAllowCreate(true);  dbConfig.setDeferredWrite(true);  this.queueDatabase=dbEnv.openDatabase(null,queueName,dbConfig);  this.queueName=queueName;  this.cacheSize=cacheSize;  this.opsCounter=0;}  }
class C{  public AMGroup createStaticGroup(String name,Map attributes,Map serviceNameAndAttrs) throws AMException, SSOException {  return createGroup(name,attributes,serviceNameAndAttrs,AMObject.STATIC_GROUP);}  }
class C{  public boolean hasNewSubSchema(){  if (newSubSchemas == null) {    return false;  }  return !newSubSchemas.isEmpty();}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  private boolean publish(ReplicationMsg msg,boolean recoveryMsg,boolean retryOnFailure){  boolean done=false;  while (!done && !shutdown) {    if (connectionError) {      if (logger.isTraceEnabled()) {        debugInfo("publish(): Publishing a message is not possible due to" + " existing connection error.");      }      return false;    }    try {      Session currentSession;      Semaphore currentWindowSemaphore;synchronized (connectPhaseLock) {        currentSession=connectedRS.get().session;        currentWindowSemaphore=sendWindow;      }      if (!recoveryMsg & connectRequiresRecovery) {        return false;      }      boolean credit;      if (msg instanceof UpdateMsg) {        credit=currentWindowSemaphore.tryAcquire(500,TimeUnit.MILLISECONDS);      } else {        credit=true;      }      if (credit) {synchronized (connectPhaseLock) {          final Session session=connectedRS.get().session;          if (session != null && session == currentSession) {            session.publish(msg);            done=true;          }        }      }      if (!credit && currentWindowSemaphore.availablePermits() == 0) {synchronized (connectPhaseLock) {          Session session=connectedRS.get().session;          if (session != null) {            session.publish(new WindowProbeMsg());          }        }      }    } catch (    IOException e) {      if (logger.isTraceEnabled()) {        debugInfo("publish(): IOException caught: " + stackTraceToSingleLineString(e));      }      if (!retryOnFailure) {        return false;      }synchronized (connectPhaseLock) {        try {          connectPhaseLock.wait(100);        } catch (        InterruptedException ignored) {          if (logger.isTraceEnabled()) {            debugInfo("publish(): InterruptedException caught 1: " + stackTraceToSingleLineString(ignored));          }        }      }    }catch (    InterruptedException ignored) {      if (logger.isTraceEnabled()) {        debugInfo("publish(): InterruptedException caught 2: " + stackTraceToSingleLineString(ignored));      }    }  }  return true;}  }
class C{  void notifyWidgetSizeChanged(Launcher launcher){  AppWidgetResizeFrame.updateWidgetSizeRanges(hostView,launcher,spanX,spanY);  mHasNotifiedInitialWidgetSizeChanged=true;}  }
class C{  public synchronized void registerService(String serviceName,boolean createTemplate,boolean activate) throws AMException, SSOException {  if (debug.messageEnabled()) {    debug.message("AMOrganizationImpl.registerService(" + serviceName + ", "+ createTemplate+ ", "+ activate+ ")");  }  try {    dsServices.registerService(super.token,super.entryDN,serviceName);  } catch (  AMException le) {    if (!le.getErrorCode().equalsIgnoreCase("464")) {      throw le;    }  }  Set serviceStatus=getAttribute(SERVICE_STATUS_ATTRIBUTE);  if (!serviceStatus.equals(Collections.EMPTY_SET)) {    Iterator iter=serviceStatus.iterator();    while (iter.hasNext()) {      String status=(String)iter.next();      if (status.equalsIgnoreCase(serviceName)) {        Set services=com.sun.identity.sm.ServiceManager.servicesAssignedByDefault();        if (services != null && !services.isEmpty()) {          for (Iterator items=services.iterator(); items.hasNext(); ) {            String dService=(String)items.next();            if (serviceName.toLowerCase().equals(dService.toLowerCase())) {              return;            }          }        } else {          Object args[]={serviceName};          throw new AMException(AMSDKBundle.getString("464",args,super.locale),"464",args);        }      }    }  } else {    serviceStatus=new HashSet();  }  serviceStatus.add(serviceName);  setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);  try {    store();  } catch (  AMException le) {    try {      Set objectClass=getAttribute("objectclass");      if (debug.messageEnabled()) {        debug.message("object class=" + objectClass);      }      if (!objectClass.contains("sunManagedOrganization")) {        objectClass.add("sunManagedOrganization");        setAttribute("objectclass",objectClass);        setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);        store();      } else {        throw le;      }    } catch (    Exception e) {      if (debug.messageEnabled()) {        debug.message("error adding objectclass",e);      }      throw le;    }  }  if (createTemplate) {    try {      if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.POLICY)) {        createTemplate(AMTemplate.POLICY_TEMPLATE,serviceName,null);      }      if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.DYNAMIC)) {        createTemplate(AMTemplate.DYNAMIC_TEMPLATE,serviceName,null);      }    } catch (    SMSException smsex) {      throw new AMException(AMSDKBundle.getString("451",super.locale),"451");    }  }}  }
class C{  Entry(Object key,V value,ReferenceQueue<Object> queue,int hash,Entry<K,V> next){  super(key,queue);  this.value=value;  this.hash=hash;  this.next=next;}  }
class C{  private void interruptIdleWorkers(){  interruptIdleWorkers(false);}  }
class C{  private void returnToSource(){  FSUtils.debug.message("Entered FSFedTerminationHandler::returnToSource");  try {    StringBuffer finalReturnURL=new StringBuffer();    String retURL=remoteDescriptor.getFederationTerminationServiceReturnURL();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Redirecting to : " + retURL);    }    resetFederateCookie();    FSUtils.debug.message("Checking retURL for null value");    if (retURL == null || retURL.length() < 1) {      FSUtils.debug.error("Return URL is null");      FSServiceUtils.showErrorPage(response,error_page_url,IFSConstants.TERMINATION_INVALID_REDIRECT_URL,IFSConstants.METADATA_ERROR);      return;    } else {      finalReturnURL.append(retURL);      if (!(relayState == null || relayState.length() < 1)) {        char delimiter;        if (retURL.indexOf(IFSConstants.QUESTION_MARK) < 0) {          delimiter=IFSConstants.QUESTION_MARK;        } else {          delimiter=IFSConstants.AMPERSAND;        }        finalReturnURL.append(delimiter).append(RELAY_STATE).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(relayState));      }      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Now sendRedirecting to : " + finalReturnURL.toString());      }      response.sendRedirect(finalReturnURL.toString());      return;    }  } catch (  IOException e) {    FSUtils.debug.error("Unable to get LRURL. No location to redirect." + " processing completed",e);  }  FSUtils.debug.message("After exception calling response.sendError");  FSServiceUtils.showErrorPage(response,error_page_url,IFSConstants.TERMINATION_INVALID_REDIRECT_URL,IFSConstants.METADATA_ERROR);  return;}  }
class C{  public void dragOver(DropTargetDragEvent dtde){}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public String toNamespacedString(){  return (_namespaceURI != null ? ("{" + _namespaceURI + "}"+ _localName) : _localName);}  }
class C{  public ASN1Explicit(int tagNumber,ASN1Type type){  this(CLASS_CONTEXTSPECIFIC,tagNumber,type);}  }
class C{  public static boolean isUnix(){  return (isSolaris() || isHPUX() || isLinux()|| isAIX()|| isOSX());}  }
class C{  public void testGcdFirstZERO(){  byte bBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  int bSign=1;  byte rBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static boolean copy(File src,File dest){  boolean result=true;  String files[]=null;  if (src.isDirectory()) {    files=src.list();    result=dest.mkdir();  } else {    files=new String[1];    files[0]="";  }  if (files == null) {    files=new String[0];  }  for (int i=0; (i < files.length) && result; i++) {    File fileSrc=new File(src,files[i]);    File fileDest=new File(dest,files[i]);    if (fileSrc.isDirectory()) {      result=copy(fileSrc,fileDest);    } else {      try (FileChannel ic=(new FileInputStream(fileSrc)).getChannel();FileChannel oc=(new FileOutputStream(fileDest)).getChannel()){        ic.transferTo(0,ic.size(),oc);      } catch (      IOException e) {        log.error(sm.getString("expandWar.copy",fileSrc,fileDest),e);        result=false;      }    }  }  return result;}  }
class C{  public boolean checkDependencies(Operation op,LDAPUpdateMsg msg){  if (op instanceof ModifyOperation) {    return checkDependencies((ModifyOperation)op);  } else   if (op instanceof DeleteOperation) {    return checkDependencies((DeleteOperation)op);  } else   if (op instanceof AddOperation) {    return checkDependencies((AddOperation)op);  } else   if (op instanceof ModifyDNOperationBasis) {    return checkDependencies((ModifyDNMsg)msg);  } else {    return true;  }}  }
class C{  void addNamedDestination(String key,PdfObject value){  addNameToNameTree(key,value,PdfName.Dests);}  }
class C{  public static Set<WebXml> orderWebFragments(WebXml application,Map<String,WebXml> fragments,ServletContext servletContext){  Set<WebXml> orderedFragments=new LinkedHashSet<>();  boolean absoluteOrdering=(application.getAbsoluteOrdering() != null);  boolean orderingPresent=false;  if (absoluteOrdering) {    orderingPresent=true;    Set<String> requestedOrder=application.getAbsoluteOrdering();    for (    String requestedName : requestedOrder) {      if (WebXml.ORDER_OTHERS.equals(requestedName)) {        for (        Entry<String,WebXml> entry : fragments.entrySet()) {          if (!requestedOrder.contains(entry.getKey())) {            WebXml fragment=entry.getValue();            if (fragment != null) {              orderedFragments.add(fragment);            }          }        }      } else {        WebXml fragment=fragments.get(requestedName);        if (fragment != null) {          orderedFragments.add(fragment);        } else {          log.warn(sm.getString("webXml.wrongFragmentName",requestedName));        }      }    }  } else {    for (    WebXml fragment : fragments.values()) {      Iterator<String> before=fragment.getBeforeOrdering().iterator();      while (before.hasNext()) {        orderingPresent=true;        String beforeEntry=before.next();        if (!beforeEntry.equals(ORDER_OTHERS)) {          WebXml beforeFragment=fragments.get(beforeEntry);          if (beforeFragment == null) {            before.remove();          } else {            beforeFragment.addAfterOrdering(fragment.getName());          }        }      }      Iterator<String> after=fragment.getAfterOrdering().iterator();      while (after.hasNext()) {        orderingPresent=true;        String afterEntry=after.next();        if (!afterEntry.equals(ORDER_OTHERS)) {          WebXml afterFragment=fragments.get(afterEntry);          if (afterFragment == null) {            after.remove();          } else {            afterFragment.addBeforeOrdering(fragment.getName());          }        }      }    }    for (    WebXml fragment : fragments.values()) {      if (fragment.getBeforeOrdering().contains(ORDER_OTHERS)) {        makeBeforeOthersExplicit(fragment.getAfterOrdering(),fragments);      }      if (fragment.getAfterOrdering().contains(ORDER_OTHERS)) {        makeAfterOthersExplicit(fragment.getBeforeOrdering(),fragments);      }    }    Set<WebXml> beforeSet=new HashSet<>();    Set<WebXml> othersSet=new HashSet<>();    Set<WebXml> afterSet=new HashSet<>();    for (    WebXml fragment : fragments.values()) {      if (fragment.getBeforeOrdering().contains(ORDER_OTHERS)) {        beforeSet.add(fragment);        fragment.getBeforeOrdering().remove(ORDER_OTHERS);      } else       if (fragment.getAfterOrdering().contains(ORDER_OTHERS)) {        afterSet.add(fragment);        fragment.getAfterOrdering().remove(ORDER_OTHERS);      } else {        othersSet.add(fragment);      }    }    decoupleOtherGroups(beforeSet);    decoupleOtherGroups(othersSet);    decoupleOtherGroups(afterSet);    orderFragments(orderedFragments,beforeSet);    orderFragments(orderedFragments,othersSet);    orderFragments(orderedFragments,afterSet);  }  Set<WebXml> containerFragments=new LinkedHashSet<>();  for (  WebXml fragment : fragments.values()) {    if (!fragment.getWebappJar()) {      containerFragments.add(fragment);      orderedFragments.remove(fragment);    }  }  if (servletContext != null) {    List<String> orderedJarFileNames=null;    if (orderingPresent) {      orderedJarFileNames=new ArrayList<>();      for (      WebXml fragment : orderedFragments) {        orderedJarFileNames.add(fragment.getJarName());      }    }    servletContext.setAttribute(ServletContext.ORDERED_LIBS,orderedJarFileNames);  }  if (containerFragments.size() > 0) {    Set<WebXml> result=new LinkedHashSet<>();    if (containerFragments.iterator().next().getDelegate()) {      result.addAll(containerFragments);      result.addAll(orderedFragments);    } else {      result.addAll(orderedFragments);      result.addAll(containerFragments);    }    return result;  } else {    return orderedFragments;  }}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {  return xmlString;}  }
class C{  public PrepareNotSupported(String message){  super(message);}  }
class C{  public PluginResult.PostResponse invokePostResponseModifyPlugins(PostResponseModifyOperation modifyOperation){  PluginResult.PostResponse result=null;  for (  DirectoryServerPlugin p : postResponseModifyPlugins) {    if (isInternalOperation(modifyOperation,p)) {      continue;    }    try {      result=p.doPostResponse(modifyOperation);    } catch (    Exception e) {      logException(modifyOperation,p,e,ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(modifyOperation,p,ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostResponse.continueOperationProcessing();  }  return result;}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof ServicePermission))   return false;  ServicePermission np=(ServicePermission)permission;  int desired=np.getMask();  if (desired == 0) {    for (    Permission p : perms) {      ServicePermission sp=(ServicePermission)p;      if (sp.impliesIgnoreMask(np)) {        return true;      }    }    return false;  }  int effective=0;  int needed=desired;synchronized (this) {    int len=perms.size();    for (int i=0; i < len; i++) {      ServicePermission x=(ServicePermission)perms.get(i);      if (((needed & x.getMask()) != 0) && x.impliesIgnoreMask(np)) {        effective|=x.getMask();        if ((effective & desired) == desired)         return true;        needed=(desired ^ effective);      }    }  }  return false;}  }
class C{  public boolean excludeDN(){  return excludeDN;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementwrongdocumenterr.class,args);}  }
class C{  public static boolean isJson(String json){  if (json == null || json.equals("")) {    return false;  }  json=json.trim();  if ("{".equals(json.substring(0,1)) && "}".equals(json.substring(json.length() - 1))) {    return true;  } else {    return false;  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  public void closeOpenPosition(final int position){  if (recyclerView == null) {    return;  }  RecyclerView.ViewHolder holder=recyclerView.findViewHolderForAdapterPosition(position);  if (holder instanceof SwipeOpenViewHolder) {    if (((SwipeOpenViewHolder)holder).getViewHolder().itemView.getParent() != null) {      closeOpenHolder((SwipeOpenViewHolder)holder);      recyclerView.invalidate();    }  }  openedPositions.remove(position);}  }
class C{  @Override protected Parcelable onSaveInstanceState(){  Bundle bundle=new Bundle();  bundle.putBoolean("isRippling",isRippling);  bundle.putParcelable("superState",super.onSaveInstanceState());  return bundle;}  }
class C{  public Node previousNode() throws DOMException {  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_CANNOT_ITERATE,null));  if ((m_next - 1) > 0) {    m_next--;    return this.elementAt(m_next);  } else   return null;}  }
class C{  protected RMIConnection makeClient(String connectionId,Subject subject) throws IOException {  if (connectionId == null)   throw new NullPointerException("Null connectionId");  RMIConnection client=new RMIConnectionImpl(this,connectionId,getDefaultClassLoader(),subject,env);  IIOPHelper.exportObject(client);  return client;}  }
class C{  public SQLRecoverableException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public final void testGetTrustedCer02() throws Exception {  PublicKey pk=new TestKeyPair(keyAlg).getPublic();  TrustAnchor ta=new TrustAnchor(validCaNameRfc2253,pk,null);  assertNull("null1",ta.getTrustedCert());  X500Principal x500p=new X500Principal(validCaNameRfc2253);  ta=new TrustAnchor(x500p,pk,null);  assertNull("null2",ta.getTrustedCert());  X509Certificate cert=new TestCertUtils.TestX509Certificate(x500p,x500p);  TrustAnchor ta2=new TrustAnchor(cert,null);  assertSame(cert,ta2.getTrustedCert());}  }
class C{  public Reference(String className,RefAddr addr,String factory,String factoryLocation){  this(className,addr);  classFactory=factory;  classFactoryLocation=factoryLocation;}  }
class C{  public SOAPException(Throwable cause){  super(cause.toString());  initCause(cause);}  }
class C{  public static byte[] stringToByteArray(String input){  char chars[]=input.toCharArray();  byte bytes[]=new byte[chars.length];  for (int i=0; i < chars.length; i++) {    bytes[i]=(byte)chars[i];  }  return bytes;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("OrganizationParser.parse");  Organization organization=new Organization();  try {    headerName(TokenTypes.ORGANIZATION);    String value=this.lexer.getRest();    organization.setOrganization(value.trim());    return organization;  }  finally {    if (debug)     dbg_leave("OrganizationParser.parse");  }}  }
class C{  public static Subject createAMIdentitySubject(PolicyManager pm,AMIdentity user) throws PolicyException {  SubjectTypeManager mgr=pm.getSubjectTypeManager();  Subject subject=mgr.getSubject("AMIdentitySubject");  Set<String> set=new HashSet<String>();  set.add(user.getUniversalId());  subject.setValues(set);  return subject;}  }
class C{  public boolean isExclusive(){  return exclusive;}  }
class C{  public MbrEntry addMember(Member member){  MbrEntry entry=new MbrEntry(member);synchronized (membersLock) {    if (!map.containsKey(member)) {      map.put(member,entry);      Member results[]=new Member[members.length + 1];      System.arraycopy(members,0,results,0,members.length);      results[members.length]=member;      Arrays.sort(results,memberComparator);      members=results;    }  }  return entry;}  }
class C{  private boolean serviceHasSubSchema(SSOToken token,String serviceName,SchemaType schemaType) throws SMSException, SSOException {  boolean schemaTypeFlg=false;  try {    ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);    Set types=ssm.getSchemaTypes();    if (debug.messageEnabled()) {      debug.message("AMServiceUtils.serviceHasSubSchema() " + "SchemaTypes types for " + serviceName + " are: "+ types);    }    schemaTypeFlg=types.contains(schemaType);  } catch (  ServiceNotFoundException ex) {    if (debug.warningEnabled()) {      debug.warning("AMServiceUtils.serviceHasSubSchema() " + "Service does not exist : " + serviceName);    }  }  return (schemaTypeFlg);}  }
class C{  public static void deleteContents(File dir) throws IOException {  File[] files=dir.listFiles();  if (files != null) {    for (    File file : files) {      if (file.isDirectory()) {        deleteContents(file);      }      file.delete();    }  }}  }
class C{  public boolean hasMAXEVENTS(){  return fieldSetFlags()[1];}  }
class C{  public FormView(Element elem){  super(elem);}  }
class C{  public OAuth2Exception(final int statusCode,final String error,final String description,final UrlLocation parameterLocation){  super(description);  this.statusCode=statusCode;  this.error=error;  this.parameterLocation=parameterLocation;}  }
class C{  public void testSubtractEqualScaleNegNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-10;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="1.231212478987482241196379486791669716433397522230419E+61";  int cScale=-10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.subtract(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public boolean isAnyOriginAllowed(){  return anyOriginAllowed;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  Node appendedChild;  doc=(Document)load("staff",true);  rootNode=doc.getDocumentElement();  newChild=doc.createAttribute("newAttribute");{    boolean success=false;    try {      appendedChild=rootNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public SdpException(Throwable rootCause){  super(rootCause.getLocalizedMessage());}  }
class C{  public void update(AttributeType attr,Schema schema){  String n=attr.getNameOrOID();  titlePanel.setDetails(LocalizableMessage.raw(n));  name.setText(n);  AttributeType superior=attr.getSuperiorType();  n=superior != null ? superior.getNameOrOID() : null;  parent.setText(n);  oid.setText(attr.getOID());  origin.setText(StandardObjectClassPanel.getOrigin(attr).toString());  n=attr.getDescription();  if (n == null) {    n=NOT_APPLICABLE.toString();  }  description.setText(n);  n=attr.getUsage() != null ? attr.getUsage().toString() : NOT_APPLICABLE.toString();  usage.setText(n);  Set<String> aliases=getAliases(attr);  if (!aliases.isEmpty()) {    n=Utilities.getStringFromCollection(aliases,", ");  } else {    n=NOT_APPLICABLE.toString();  }  this.aliases.setText(n);  syntax.setText(Utilities.getSyntaxText(attr.getSyntax()));  JLabel[] labels={approximate,equality,ordering,substring};  MatchingRule[] rules={attr.getApproximateMatchingRule(),attr.getEqualityMatchingRule(),attr.getOrderingMatchingRule(),attr.getSubstringMatchingRule()};  for (int i=0; i < labels.length; i++) {    if (rules[i] != null) {      labels[i].setText(Utilities.getMatchingRuleText(rules[i]));    } else {      labels[i].setText(NOT_APPLICABLE.toString());    }  }  type.setText(getTypeValue(attr).toString());  Comparator<String> lowerCaseComparator=new LowerCaseComparator();  SortedSet<String> requiredByOcs=new TreeSet<>(lowerCaseComparator);  for (  ObjectClass oc : schema.getObjectClasses()) {    if (oc.getRequiredAttributes().contains(attr)) {      requiredByOcs.add(oc.getNameOrOID());    }  }  DefaultListModel<String> model=(DefaultListModel<String>)requiredBy.getModel();  model.clear();  for (  String oc : requiredByOcs) {    model.addElement(oc);  }  SortedSet<String> optionalByOcs=new TreeSet<>(lowerCaseComparator);  for (  ObjectClass oc : schema.getObjectClasses()) {    if (oc.getOptionalAttributes().contains(attr)) {      optionalByOcs.add(oc.getNameOrOID());    }  }  model=(DefaultListModel<String>)optionalBy.getModel();  model.clear();  for (  String oc : optionalByOcs) {    model.addElement(oc);  }}  }
class C{  protected void updateSize(){  validCachedPreferredSize=false;  tree.treeDidChange();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.UriNamedClaimTypesOfferedType createUriNamedClaimTypesOfferedType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.UriNamedClaimTypesOfferedTypeImpl();}  }
class C{  public void testAddCertificate1() throws Exception {  Identity i=new IdentityStub("iii");  PublicKeyStub pk1=new PublicKeyStub("kkk","fff",new byte[]{1,2,3,4,5});  i.setPublicKey(pk1);  CertificateStub c1=new CertificateStub("fff",null,null,pk1);  i.addCertificate(c1);  assertSame(c1,i.certificates()[0]);  try {    i.addCertificate(new CertificateStub("ccc",null,null,new PublicKeyStub("k2","fff",new byte[]{6,7,8,9,0})));    fail("KeyManagementException should be thrown");  } catch (  KeyManagementException ok) {  }}  }
class C{  public void writeExif(Bitmap bmap,String exifOutFileName) throws FileNotFoundException, IOException {  if (bmap == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    bmap.compress(Bitmap.CompressFormat.JPEG,90,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public List<T> load(Class<T> serviceType) throws IOException {  String configFile=SERVICES + serviceType.getName();  LinkedHashSet<String> applicationServicesFound=new LinkedHashSet<>();  LinkedHashSet<String> containerServicesFound=new LinkedHashSet<>();  ClassLoader loader=servletContext.getClassLoader();  @SuppressWarnings("unchecked") List<String> orderedLibs=(List<String>)servletContext.getAttribute(ServletContext.ORDERED_LIBS);  if (orderedLibs != null) {    for (    String lib : orderedLibs) {      URL jarUrl=servletContext.getResource(LIB + lib);      if (jarUrl == null) {        continue;      }      String base=jarUrl.toExternalForm();      URL url;      if (base.endsWith("/")) {        url=new URL(base + configFile);      } else {        url=JarFactory.getJarEntryURL(jarUrl,configFile);      }      try {        parseConfigFile(applicationServicesFound,url);      } catch (      FileNotFoundException e) {      }    }    loader=context.getParentClassLoader();  }  Enumeration<URL> resources;  if (loader == null) {    resources=ClassLoader.getSystemResources(configFile);  } else {    resources=loader.getResources(configFile);  }  while (resources.hasMoreElements()) {    parseConfigFile(containerServicesFound,resources.nextElement());  }  if (containerSciFilterPattern != null) {    Iterator<String> iter=containerServicesFound.iterator();    while (iter.hasNext()) {      if (containerSciFilterPattern.matcher(iter.next()).find()) {        iter.remove();      }    }  }  containerServicesFound.addAll(applicationServicesFound);  if (containerServicesFound.isEmpty()) {    return Collections.emptyList();  }  return loadServices(serviceType,containerServicesFound);}  }
class C{  private boolean hitBorder(int from,int offset){  int spanCount=getSpanCount();  if (Math.abs(offset) == 1) {    int spanIndex=from % spanCount;    int newSpanIndex=spanIndex + offset;    return newSpanIndex < 0 || newSpanIndex >= spanCount;  } else {    int newPos=from + offset;    return newPos < 0 && newPos >= spanCount;  }}  }
class C{  @Override public Set<DefaultPooledObjectInfo> listAllObjects(){  final Set<DefaultPooledObjectInfo> result=new HashSet<>(allObjects.size());  for (  final PooledObject<T> p : allObjects.values()) {    result.add(new DefaultPooledObjectInfo(p));  }  return result;}  }
class C{  void storeInitialText(){  try {    initialText=getText(0,getLength());  } catch (  BadLocationException e) {  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenodenomodificationallowederrEE.class,args);}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void testUpdate7(){  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2='1' WHERE id < ( SELECT COUNT(*) FROM "+ DatabaseCreator.TEST_TABLE2+ " WHERE finteger > 15)";  try {    int num=statement.executeUpdate(updateQuery);    int expectedUpdated=4;    assertEquals("Not all records in the database were updated",expectedUpdated,num);    String selectQuery="SELECT id, field2 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public void GetInstance02(int mode) throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, InvalidAlgorithmParameterException {  try {    KeyPairGenerator.getInstance(null,mProv.getName());    fail("NullPointerException or KeyStoreException must be thrown");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    try {      KeyPairGenerator.getInstance(alg,prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(alg).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    for (int j=1; j < invalidValues.length; j++) {      try {        KeyPairGenerator.getInstance(alg,invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(alg).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  KeyPairGenerator kpG;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    kpG=KeyPairGenerator.getInstance(alg,mProv.getName());    assertEquals("Incorrect algorithm",kpG.getAlgorithm().toUpperCase(),(mode <= 2 ? resAlg : alg).toUpperCase());    assertEquals("Incorrect provider",kpG.getProvider().getName(),mProv.getName());    checkResult(kpG,mode);  }}  }
class C{  public String transformX509ToSAML2(SAML2SubjectConfirmation subjectConfirmation,String stsClientCertHeaderName,X509Certificate clientCertificate,X509Certificate hokProofCert) throws IOException {  X509TokenState tokenState=new X509TokenState();  RestSTSTokenTranslationInvocationState invocationState=RestSTSTokenTranslationInvocationState.builder().inputTokenState(tokenState.toJson()).outputTokenState(buildSAML2TokenCreationState(subjectConfirmation,hokProofCert).toJson()).build();  return invokeTokenTranslation(invocationState.toJson().toString(),stsClientCertHeaderName,clientCertificate);}  }
class C{  public RemoteSession(HttpSession session){  super();  debug=Debug.getInstance("remoteSession");  this.session=(HttpSession)session;  creationTime=session.getCreationTime();  id=session.getId();  lastAccessedTime=session.getLastAccessedTime();  maxInactiveInterval=session.getMaxInactiveInterval();  isNew=session.isNew();  internalAttributes=new HashMap();  Enumeration aNames=getAttributeNames();  while (aNames.hasMoreElements()) {    String attributeName=(String)aNames.nextElement();    if (isSerializable(getAttribute(attributeName)) && !attributeName.equals("LoginCallbacks") && !attributeName.equals("AuthContext")) {      internalAttributes.put(attributeName,getAttribute(attributeName));      internalAttributeNames.add(attributeName);      debug.message("adding attr=" + attributeName + ", "+ getAttribute(attributeName));    }  }}  }
class C{  public synchronized int available(){  return count - pos;}  }
class C{  public void addRule(Guid guid,String filter) throws UMSException {  DataLayer.getInstance().addAttributeValue(_principal,_mappingGuid,guid.getDn(),filter);}  }
class C{  private boolean removePendingRequest(final RequestContextImpl<?,?> requestContext){  return pendingRequests.remove(requestContext.getMessageID()) != null;}  }
class C{  public static String decrypt(String s) throws GeneralSecurityException {  if (s.startsWith(__CRYPT))   s=s.substring(__CRYPT.length());  Cipher cipher=Cipher.getInstance(CRYPT_ALGORITHM);  cipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(NON_SECRET_KEY,CRYPT_ALGORITHM));  return new String(cipher.doFinal(hexStringToByteArray(s)));}  }
class C{  public void shutdown() throws IllegalMonitorStateException {  if (acquireValidLock()) {    try {      shutdownCalled=true;      List<ShutdownPriority> priorities=ShutdownPriority.getPriorities();      for (      ShutdownPriority i : priorities) {        for (Iterator<ShutdownListener> j=listeners[i.getIntValue() - 1].iterator(); j.hasNext(); ) {          j.next().shutdown();          j.remove();        }      }      if (appSSOTokenDestroyer != null) {        appSSOTokenDestroyer.shutdown();        appSSOTokenDestroyer=null;      }      instance=null;    } catch (    RuntimeException t) {      Debug.getInstance("amUtil").error("Error during shutdown",t);      throw t;    } finally {      releaseLockAndNotify();    }  } else {    throw new IllegalMonitorStateException("Failed to acquire lock during shutdown.");  }}  }
class C{  public CallInfoHeader createCallInfoHeader(URI callInfo){  if (callInfo == null)   throw new NullPointerException("null arg callInfo");  CallInfo c=new CallInfo();  c.setInfo(callInfo);  return c;}  }
class C{  protected String deployInternal(String config,ContextName cn,String war,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.deploy(printWriter,config,cn,war,false,smClient);  return stringWriter.toString();}  }
class C{  public void isActive() throws RelationServiceNotRegisteredException {  if (myMBeanServer == null) {    String excMsg="Relation Service not registered in the MBean Server.";    throw new RelationServiceNotRegisteredException(excMsg);  }  return;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  protected IdServicesDecorator(final IdServices delegate){  Reject.ifNull(delegate);  this.delegate=delegate;}  }
class C{  public INTF_REPOS(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  private void initialize(GSSAPISASLMechanismHandlerCfg config) throws UnknownHostException, IOException, InitializationException {  configEntryDN=config.dn();  DN identityMapperDN=config.getIdentityMapperDN();  identityMapper=DirectoryServer.getIdentityMapper(identityMapperDN);  serverFQDN=getFQDN(config);  logger.error(INFO_GSSAPI_SERVER_FQDN,serverFQDN);  saslProps=new HashMap<>();  saslProps.put(Sasl.QOP,getQOP(config));  saslProps.put(Sasl.REUSE,"false");  String configFileName=configureLoginConfFile(config);  System.setProperty(JAAS_PROPERTY_CONFIG_FILE,configFileName);  System.setProperty(JAAS_PROPERTY_SUBJECT_CREDS_ONLY,"false");  getKdcRealm(config);}  }
class C{  public final void testGetAlgorithmsLjava_lang_String(){  String[] servicesNames={"Signature","MessageDigest","Cipher","Mac","KeyStore"};  String[] invalidServiceNames={"Rubbish","",null};  for (int i=0; i < servicesNames.length; i++) {    Set<String> algs=Security.getAlgorithms(servicesNames[i]);    assertTrue("no services with specified name: " + servicesNames[i],algs.size() > 0);  }  for (int i=0; i < invalidServiceNames.length; i++) {    Set<String> algs=Security.getAlgorithms(invalidServiceNames[i]);    assertTrue("services with specified name: " + invalidServiceNames[i],algs.size() == 0);  }}  }
class C{  public final void testDSAParameterSpec(){  AlgorithmParameterSpec aps=new DSAParameterSpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"));  assertTrue(aps instanceof DSAParameterSpec);}  }
class C{  public void init(PrivateKey key){  try {    if (signature != null) {      signature.initSign(key);    } else     if (cipher != null) {      cipher.init(Cipher.ENCRYPT_MODE,key);    }  } catch (  InvalidKeyException e) {    throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid private key",e));  }}  }
class C{  public boolean hasIcons(){  return mContent.getShortcutsAndWidgets().getChildCount() > 1;}  }
class C{  protected DN readDN(LinkedList<StringBuilder> lines) throws LDIFException {  if (lines.isEmpty()) {    return null;  }  StringBuilder line=lines.remove();  lastEntryHeaderLines.add(line);  int colonPos=line.indexOf(":");  if (colonPos <= 0) {    LocalizableMessage message=ERR_LDIF_NO_ATTR_NAME.get(lastEntryLineNumber,line);    logToRejectWriter(lines,message);    throw new LDIFException(message,lastEntryLineNumber,true);  }  String attrName=toLowerCase(line.substring(0,colonPos));  if (attrName.equals("version")) {    return readDN(lines);  } else   if (!attrName.equals("dn")) {    LocalizableMessage message=ERR_LDIF_NO_DN.get(lastEntryLineNumber,line);    logToRejectWriter(lines,message);    throw new LDIFException(message,lastEntryLineNumber,true);  }  if (colonPos == line.length() - 1) {    return DN.rootDN();  }  String dn=readValue(line,colonPos,lines);  return decodeDN(dn,lines,line);}  }
class C{  private PlaPointInt border_point(PlaPointInt p_point,PlaDirection p_dir){  int result_x;  int result_y;  if (p_dir == PlaDirection.RIGHT) {    result_x=Math.min(oct_rx,oct_urx - p_point.v_y);    result_x=Math.min(result_x,oct_lrx + p_point.v_y);    result_y=p_point.v_y;  } else   if (p_dir == PlaDirection.LEFT) {    result_x=Math.max(oct_lx,oct_ulx + p_point.v_y);    result_x=Math.max(result_x,oct_llx - p_point.v_y);    result_y=p_point.v_y;  } else   if (p_dir == PlaDirection.UP) {    result_x=p_point.v_x;    result_y=Math.min(oct_uy,p_point.v_x - oct_ulx);    result_y=Math.min(result_y,oct_urx - p_point.v_x);  } else   if (p_dir == PlaDirection.DOWN) {    result_x=p_point.v_x;    result_y=Math.max(oct_ly,oct_llx - p_point.v_x);    result_y=Math.max(result_y,p_point.v_x - oct_lrx);  } else   if (p_dir == PlaDirection.RIGHT45) {    result_x=(int)(Math.ceil(0.5 * (p_point.v_x - p_point.v_y + oct_urx)));    result_x=Math.min(result_x,oct_rx);    result_x=Math.min(result_x,p_point.v_x - p_point.v_x + oct_uy);    result_y=p_point.v_y - p_point.v_x + result_x;  } else   if (p_dir == PlaDirection.UP45) {    result_x=(int)(Math.floor(0.5 * (p_point.v_x + p_point.v_y + oct_ulx)));    result_x=Math.max(result_x,oct_lx);    result_x=Math.max(result_x,p_point.v_x + p_point.v_y - oct_uy);    result_y=p_point.v_y + p_point.v_x - result_x;  } else   if (p_dir == PlaDirection.LEFT45) {    result_x=(int)(Math.floor(0.5 * (p_point.v_x - p_point.v_y + oct_llx)));    result_x=Math.max(result_x,oct_lx);    result_x=Math.max(result_x,p_point.v_x - p_point.v_y + oct_ly);    result_y=p_point.v_y - p_point.v_x + result_x;  } else   if (p_dir == PlaDirection.DOWN45) {    result_x=(int)(Math.ceil(0.5 * (p_point.v_x + p_point.v_y + oct_lrx)));    result_x=Math.min(result_x,oct_rx);    result_x=Math.min(result_x,p_point.v_x + p_point.v_y - oct_ly);    result_y=p_point.v_y + p_point.v_x - result_x;  } else {    throw new IllegalArgumentException("IntOctagon.border_point: unexpected 45 degree direction");  }  return new PlaPointInt(result_x,result_y);}  }
class C{  public AckMsg sendNewFakeUpdate() throws Exception {  DeleteMsg delMsg=new DeleteMsg(baseDN,gen.newCSN(),UUID.randomUUID().toString());  delMsg.setAssured(isAssured);  delMsg.setAssuredMode(assuredMode);  delMsg.setSafeDataLevel(safeDataLevel);  session.publish(delMsg);  ReplicationMsg replMsg=session.receive();  if (replMsg instanceof ErrorMsg) {    replMsg=session.receive();  }  return (AckMsg)replMsg;}  }
class C{  public DsnRectangle(DsnLayer p_layer,double[] p_coor){  super(p_layer);  coor=p_coor;}  }
class C{  public InvalidSearchControlsException(String msg){  super(msg);}  }
class C{  private void ensureSingleTokenInRequest(AccessTokenVerifier.TokenState headerToken,AccessTokenVerifier.TokenState queryToken) throws InvalidRequestException {  if (headerToken.isValid() && queryToken.isValid()) {    logger.error("Access Token provided in both query and header in request");    throw new InvalidRequestException("Access Token cannot be provided in both query and header");  }}  }
class C{  public FilterExprIteratorSimple(){  super(null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("core","2.0");  assertTrue("throw_True",state);}  }
class C{  public MaterialBarcodeScannerBuilder withFlashLightEnabledByDefault(){  mFlashEnabledByDefault=true;  return this;}  }
class C{  public void createParentTreeEntryForPage(PdfPage page){  Map<Integer,PdfMcr> mcrs=getPageMarkedContentReferences(page);  if (mcrs == null) {    return;  }  pageToPageMcrs.remove(page.getPdfObject().getIndirectReference());  updateStructParentTreeEntries(page.getStructParentIndex(),mcrs);}  }
class C{  public PatternSyntaxException(String desc,String regex,int index){  this.desc=desc;  this.pattern=regex;  this.index=index;}  }
class C{  public static String upperFirst(String input){  if (input == null) {    throw new IllegalArgumentException("input can't be null");  }  return head(input).map(null).map(null).get();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  String piValue;  doc=(Document)load("staff",true);  testList=doc.getChildNodes();  piNode=testList.item(0);  piNode.setNodeValue("Something different");  piValue=piNode.getNodeValue();  assertEquals("nodeValue","Something different",piValue);  piValue=((ProcessingInstruction)piNode).getData();  assertEquals("data","Something different",piValue);}  }
class C{  public Object retry(int retryCountLimit,int retryWaitTime,Closure<?> c) throws InterruptedException {  for (int i=0; retryCountLimit < 0 || i <= retryCountLimit; i++) {    try {      return c.call();    } catch (    Exception e) {      if (i >= 0 && i >= retryCountLimit) {        throw e;      }      Thread.sleep(retryWaitTime);    }  }  return null;}  }
class C{  public CoinTile genTile(float[] coords,int stageZone){  return new CoinTile(stageZone,coords[0],coords[1],(float)1.5 * REL_HEIGHT,hitCoins,stageContainer,tile0,tile1,tile2,tile3,tile4);}  }
class C{  public boolean removeArgument(final Argument argument){  obfuscatedArgs.remove(argument);  return args.remove(argument);}  }
class C{  protected static boolean isUnderRootSuffix(String objDN){  if ((objDN == null) || (objDN.length() == 0)) {    return true;  }  DN rootDN=DN.valueOf(rootSuffix);  DN objectDN=DN.valueOf(objDN);  return rootDN.equals(objectDN) || rootDN.equals(objectDN.parent());}  }
class C{  private void putBackDefaultAggregationDefinitionFromTargetEnabled(){  TestCfg.removeConstraint(aggregationPropertyDefinitionTargetMustBeEnabled.getSourceConstraint());  TestCfg.addPropertyDefinition(aggregationPropertyDefinitionDefault);  TestCfg.addConstraint(aggregationPropertyDefinitionDefault.getSourceConstraint());}  }
class C{  public Locator2Impl(){}  }
class C{  public boolean visitVariableRef(ExpressionOwner owner,Variable var){  m_refs.addElement(var.getQName());  return true;}  }
class C{  @Override public boolean isSigned(){  return (signature != null);}  }
class C{  private boolean needFirstLengthByteState(final boolean throwEofException) throws IOException {  if (reader.remaining() <= 0) {    if (throwEofException) {      final LocalizableMessage message=ERR_ASN1_TRUNCATED_LENGTH_BYTE.get();      throw DecodeException.fatalError(message);    }    return false;  }  int readByte=reader.readByte();  peekLength=(readByte & 0x7F);  if (peekLength != readByte) {    int lengthBytesNeeded=peekLength;    if (lengthBytesNeeded > 4) {      final LocalizableMessage message=ERR_ASN1_INVALID_NUM_LENGTH_BYTES.get(lengthBytesNeeded);      throw DecodeException.fatalError(message);    }    peekLength=0x00;    if (reader.remaining() < lengthBytesNeeded) {      if (throwEofException) {        final LocalizableMessage message=ERR_ASN1_TRUNCATED_LENGTH_BYTES.get(lengthBytesNeeded);        throw DecodeException.fatalError(message);      }      return false;    }    while (lengthBytesNeeded > 0) {      readByte=reader.readByte();      peekLength=(peekLength << 8) | (readByte & 0xFF);      lengthBytesNeeded--;    }  }  if (maxElementSize > 0 && peekLength > maxElementSize) {    final LocalizableMessage message=ERR_LDAP_CLIENT_DECODE_MAX_REQUEST_SIZE_EXCEEDED.get(peekLength,maxElementSize);    throw DecodeException.fatalError(message);  }  state=ASN1.ELEMENT_READ_STATE_NEED_VALUE_BYTES;  return true;}  }
class C{  private void subtreeDelete(DN entryDN){  entryMap.remove(entryDN);  Set<DN> childDNSet=childDNs.remove(entryDN);  if (childDNSet != null) {    for (    DN childDN : childDNSet) {      subtreeDelete(childDN);    }  }}  }
class C{  public JavaDiscoveryContext(Service service,ApiaryConfig apiaryConfig){  super(service,apiaryConfig);}  }
class C{  public FramedAppleTalkNetworkAttribute(byte[] octets){  super(octets);  networkNumber=OctetUtils.toIntVal(octets);}  }
class C{  static String conditionTypeName(Condition condition){  if (condition == null) {    return (null);  }  String name=null;  String className=condition.getClass().getName();  Iterator items=PolicyManager.getPluginSchemaNames(CONDITION).iterator();  while (items.hasNext()) {    String pluginName=(String)items.next();    PluginSchema ps=PolicyManager.getPluginSchema(CONDITION,pluginName);    if (className.equals(ps.getClassName())) {      name=pluginName;      break;    }  }  return (name);}  }
class C{  public static void checkRethrow(final Throwable t){  if (t instanceof ThreadDeath) {    throw (ThreadDeath)t;  }  if (t instanceof VirtualMachineError) {    throw (VirtualMachineError)t;  }}  }
class C{  @SuppressWarnings("deprecation") protected void processStyledAttributes(@NonNull TypedArray a){  mOvalDimmedLayer=a.getBoolean(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_oval_dimmed_layer,DEFAULT_OVAL_DIMMED_LAYER);  mDimmedColor=a.getColor(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_dimmed_color,getResources().getColor(R.color.gallery_default_ucrop_color_default_dimmed));  mDimmedStrokePaint.setColor(mDimmedColor);  mDimmedStrokePaint.setStyle(Paint.Style.STROKE);  mDimmedStrokePaint.setStrokeWidth(1);  initCropFrameStyle(a);  mShowCropFrame=a.getBoolean(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_show_frame,DEFAULT_SHOW_CROP_FRAME);  initCropGridStyle(a);  mShowCropGrid=a.getBoolean(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_show_grid,DEFAULT_SHOW_CROP_GRID);}  }
class C{  private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  public Duration plusHours(long hoursToAdd){  return plus(Math.multiplyExact(hoursToAdd,SECONDS_PER_HOUR),0);}  }
class C{  public void test_doOutput() throws Throwable {  setUpStoreProperties();  SSLServerSocket ss=(SSLServerSocket)getContext().getServerSocketFactory().createServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  connection.setSSLSocketFactory(getContext().getSocketFactory());  connection.setDoOutput(true);  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  connection.connect();}  }
class C{  private static void initializeConfigProperties() throws SecurityException, IOException {  List<String> dataFiles=getTagSwapConfigFiles();  String origpath="@BASE_DIR@";  Map map=ServicesDefaultValues.getDefaultValues();  String basedir=(String)map.get("BASE_DIR");  String deployuri=(String)map.get("SERVER_URI");  String newpath=basedir;  try {    File fhm=new File(basedir + deployuri + "/"+ SMS_STR);    fhm.mkdirs();  } catch (  SecurityException e) {    System.err.println("TestInstaller.initializeConfigProperties");    throw e;  }  for (  String file : dataFiles) {    InputStreamReader fin=new InputStreamReader(new FileInputStream(file));    StringBuffer sbuf=new StringBuffer();    char[] cbuf=new char[1024];    int len;    while ((len=fin.read(cbuf)) > 0) {      sbuf.append(cbuf,0,len);    }    FileWriter fout=null;    int idx=file.lastIndexOf("/");    String absFile=(idx != -1) ? file.substring(idx + 1) : file;    try {      fout=new FileWriter(basedir + "/" + absFile);      String inpStr=sbuf.toString();      fout.write(ServicesDefaultValues.tagSwap(inpStr));    } catch (    IOException e) {      System.err.println("TestInstaller.initializeConfigProperties");      throw e;    } finally {      if (fin != null) {        try {          fin.close();        } catch (        Exception ex) {        }      }      if (fout != null) {        try {          fout.close();        } catch (        Exception ex) {        }      }    }  }}  }
class C{  public SQLWarning(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);  DriverManager.println("SQLWarning: reason(" + reason + ") SQLState("+ SQLState+ ") vendor code("+ vendorCode+ ")");}  }
class C{  public CallerStationIdAttribute(byte[] octets){  super(octets);  str=new String(octets,2,octets.length - 2);}  }
class C{  private static void write_clearance_rules(DsnWriteScopeParameter p_par,int p_layer,int p_cl_class,int p_max_cl_class,int p_default_clearance) throws java.io.IOException {  freert.rules.ClearanceMatrix cl_matrix=p_par.board.brd_rules.clearance_matrix;  for (int i=p_cl_class; i < p_max_cl_class; ++i) {    int curr_board_clearance=cl_matrix.value_at(p_cl_class,i,p_layer);    if (curr_board_clearance == p_default_clearance) {      continue;    }    double curr_clearance=p_par.coordinate_transform.board_to_dsn(curr_board_clearance);    p_par.file.new_line();    p_par.file.write("(clear ");    p_par.file.write((new Double(curr_clearance)).toString());    p_par.file.write(" (type ");    p_par.identifier_type.write(cl_matrix.get_name(p_cl_class),p_par.file);    p_par.file.write("_");    p_par.identifier_type.write(cl_matrix.get_name(i),p_par.file);    p_par.file.write("))");  }}  }
class C{  public static void createOrReplacePolicies(PolicyManager pm,InputStream xmlPolicies,boolean replace) throws PolicyException, SSOException {  try {    DocumentBuilder builder=XMLUtils.getSafeDocumentBuilder(true);    builder.setErrorHandler(new ValidationErrorHandler());    Element topElement=builder.parse(xmlPolicies).getDocumentElement();    NodeList childElements=topElement.getChildNodes();    int len=childElements.getLength();    for (int i=0; i < len; i++) {      Node node=childElements.item(i);      if ((node != null) && (node.getNodeType() == Node.ELEMENT_NODE)) {        if (replace) {          pm.replacePolicy(new Policy(pm,node));        } else {          pm.addPolicy(new Policy(pm,node));        }      }    }  } catch (  IOException e) {    throw new PolicyException(ResBundleUtils.rbName,"xml_parsing_error",null,e);  }catch (  SAXException e) {    throw new PolicyException(ResBundleUtils.rbName,"xml_parsing_error",null,e);  }catch (  ParserConfigurationException e) {    throw new PolicyException(ResBundleUtils.rbName,"xml_parsing_error",null,e);  }}  }
class C{  public boolean equals(Object o1){  if (o1 instanceof StringComparator)   return (true); else   return (false);}  }
class C{  public static byte[] ASCIIHexDecode(byte[] in){  ByteArrayOutputStream out=new ByteArrayOutputStream();  boolean first=true;  int n1=0;  for (int k=0; k < in.length; ++k) {    int ch=in[k] & 0xff;    if (ch == '>')     break;    if (PdfTokenizer.isWhitespace(ch))     continue;    int n=ByteBuffer.getHex(ch);    if (n == -1)     throw new PdfException(PdfException.IllegalCharacterInAsciihexdecode);    if (first)     n1=n; else     out.write((byte)((n1 << 4) + n));    first=!first;  }  if (!first)   out.write((byte)(n1 << 4));  return out.toByteArray();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  encryptPasswordAttributes(attributeValues);  String[] params={serverName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_SERVER_CONFIG",params);    if (serverName.equals(DEFAULT_SVR_CONFIG)) {      try {        ServerConfiguration.setServerInstance(adminSSOToken,ServerConfiguration.DEFAULT_SERVER_CONFIG,attributeValues);      } catch (      UnknownPropertyNameException ex) {        outputWriter.printlnMessage(ex.getL10NMessage(getCommandManager().getLocale()));        outputWriter.printlnMessage("");      }      outputWriter.printlnMessage(MessageFormat.format(getResourceString("update-server-config-succeeded"),(Object[])params));    } else {      if (ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {        try {          ServerConfiguration.setServerInstance(adminSSOToken,serverName,attributeValues);        } catch (        UnknownPropertyNameException ex) {          outputWriter.printlnMessage(getResourceString("update-server-config-unknown"));          outputWriter.printlnMessage("");        }        outputWriter.printlnMessage(MessageFormat.format(getResourceString("update-server-config-succeeded"),(Object[])params));      } else {        outputWriter.printlnMessage(MessageFormat.format(getResourceString("update-server-config-does-not-exists"),(Object[])params));      }    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_UPDATE_SERVER_CONFIG",params);  } catch (  ConfigurationException e) {    String[] args={serverName,e.getMessage()};    debugError("UpdateServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IOException e) {    String[] args={serverName,e.getMessage()};    debugError("UpdateServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("UpdateServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("UpdateServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void handleTblButtonAddRequest(RequestInvocationEvent event){  AgentAddViewBean vb=(AgentAddViewBean)getViewBean(AgentAddViewBean.class);  String hiddenType=getRequestContext().getRequest().getParameter("agenttype");  if ((hiddenType != null) && (hiddenType.trim().length() > 0)) {    setPageSessionAttribute(PG_SESSION_SUPERCEDE_AGENT_TYPE,hiddenType);  } else {    setPageSessionAttribute(PG_SESSION_SUPERCEDE_AGENT_TYPE,getDisplayIDType());  }  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public static void main(String[] args) throws Exception {  Server server=buildNormalServer(args[0],args[1],Integer.parseInt(args[2]));  server.start();}  }
class C{  public Enumeration breadthFirstEnumeration(){  return new BreadthFirstEnumeration(this);}  }
class C{  String constructComponentName(){synchronized (List.class) {    return base + nameCounter++;  }}  }
class C{  @Override public void connect() throws IOException {  openSocket();}  }
class C{  public static void access(Level level,String msgid,String data[],Object session,Map props){  if (logger != null) {    try {      logger.access(level,msgid,data,session,props);    } catch (    LogException le) {      SAML2Utils.debug.error("LogUtil.access: Couldn't write log:",le);    }  }}  }
class C{  public static ParsedNdefMessage parse(NdefMessage message){  return new ParsedNdefMessage(getRecords(message));}  }
class C{  private static void initAuthenticationService(){  SSOToken token=getAdminToken();  try {    ServiceSchemaManager scm=new ServiceSchemaManager(ISAuthConstants.AUTH_SERVICE_NAME,token);    ServiceSchema schema=scm.getGlobalSchema();    Set<String> authenticators=(Set<String>)schema.getAttributeDefaults().get(ISAuthConstants.AUTHENTICATORS);    for (    String module : authenticators) {      int index=module.lastIndexOf(".");      if (index != -1) {        module=module.substring(index + 1);      }      if (!module.equals(ISAuthConstants.APPLICATION_MODULE)) {        AUTH_TYPES.add(module);      }      String serviceName=MODULE_SERVICE_NAMES.get(module);      if (serviceName == null) {        serviceName=AuthUtils.getModuleServiceName(module);        try {          new ServiceSchemaManager(serviceName,token);          MODULE_SERVICE_NAMES.put(module,serviceName);        } catch (        Exception e) {          GLOBAL_MODULE_NAMES.add(module);          AUTH_TYPES.remove(module);        }      }    }    if (DEBUG.messageEnabled()) {      DEBUG.message("Global module names: " + GLOBAL_MODULE_NAMES);      DEBUG.message("moduleServiceNames: " + MODULE_SERVICE_NAMES);    }  } catch (  Exception smse) {    String installTime=SystemProperties.get(AdminTokenAction.AMADMIN_MODE);    if ((installTime != null) && installTime.equalsIgnoreCase("false")) {      DEBUG.error("Failed to get module types",smse);    }  }}  }
class C{  public OAuth2Request create(Request request){  HttpServletRequest httpRequest=ServletUtils.getRequest(request);  OAuth2Request o2request=getOAuth2Request(httpRequest);  if (o2request == null) {    o2request=new OAuth2Request(jacksonRepresentationFactory,request);    addClientRegistrationToOAuth2Request(httpRequest,o2request);    setOauth2RequestAttributeOnHttpRequest(httpRequest,o2request);  }  return o2request;}  }
class C{  private void retrieveCompletedOperationElements(DeleteOperation deleteOperation) throws Exception {  assertTrue(deleteOperation.getProcessingStartTime() > 0);  assertTrue(deleteOperation.getProcessingStopTime() >= deleteOperation.getProcessingStartTime());  assertTrue(deleteOperation.getProcessingTime() >= 0);}  }
class C{  public boolean isTokenBased(){  return tokenBased;}  }
class C{  protected AdminClientException(LocalizableMessage message){  super(message);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedSupportingTokensElement createSignedSupportingTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedSupportingTokensElementImpl();}  }
class C{  public LifecycleEvent(Lifecycle lifecycle,String type,Object data){  super(lifecycle);  this.type=type;  this.data=data;}  }
class C{  private Logical(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Node notationNode;  String notationValue;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=notations.getNamedItem("notation1");  assertNotNull("notationNotNull",notationNode);  notationValue=notationNode.getNodeValue();  assertNull("nodeValue",notationValue);}  }
class C{  public void closeFrame(JInternalFrame f){  JDesktopPane d=f.getDesktopPane();  if (d == null) {    return;  }  boolean findNext=f.isSelected();  Container c=f.getParent();  JInternalFrame nextFrame=null;  if (findNext) {    nextFrame=d.getNextFrame(f);    try {      f.setSelected(false);    } catch (    PropertyVetoException e2) {    }  }  if (c != null) {    c.remove(f);    c.repaint(f.getX(),f.getY(),f.getWidth(),f.getHeight());  }  removeIconFor(f);  if (f.getNormalBounds() != null)   f.setNormalBounds(null);  if (wasIcon(f))   setWasIcon(f,null);  if (nextFrame != null) {    try {      nextFrame.setSelected(true);    } catch (    PropertyVetoException e2) {    }  } else   if (findNext && d.getComponentCount() == 0) {    d.requestFocus();  }}  }
class C{  protected void startAnimationTimer(){  if (animator == null) {    animator=new Animator();  }  animator.start(getRepaintInterval());}  }
class C{  public void acceptAll(){  for (  License license : licenses) {    license.accept();  }}  }
class C{  public final void println(final Style msgStyle,final LocalizableMessage msg,final int indent){  if (!isQuiet()) {switch (msgStyle) {case TITLE:      out.println();    out.println(">>>> " + wrapText(msg,MAX_LINE_WIDTH,indent));  out.println();break;case SUBTITLE:out.println(wrapText(msg,MAX_LINE_WIDTH,indent));out.println();break;case NOTICE:out.println(wrapText("* " + msg,MAX_LINE_WIDTH,indent));break;case ERROR:out.println();out.println(wrapText("** " + msg,MAX_LINE_WIDTH,indent));out.println();break;case WARNING:out.println(wrapText("[!] " + msg,MAX_LINE_WIDTH,indent));break;default :out.println(wrapText(msg,MAX_LINE_WIDTH,indent));break;}}}  }
class C{  protected int findByte(byte value,int pos){  for (int i=pos; i < tail; i++) {    if (buffer[i] == value) {      return i;    }  }  return -1;}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getContext(),getRequest(),getResponse());}  }
class C{  public CCGlobalMapList(ContainerView parent,CCEditableListModelInterface model,String name){  super(parent,model,name);}  }
class C{  public FSFederationTerminationNotification(String requestId,String providerID,NameIdentifier nameId) throws FSMsgException {  int length=0;  int i=0;  setIssueInstant(newDate());  if ((respondWiths != null) && (respondWiths != Collections.EMPTY_LIST)) {    length=respondWiths.size();    for (i=0; i < length; i++) {      Object temp=respondWiths.get(i);      if (!(temp instanceof String)) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSFederationTerminationNotification:" + "wrong input for RespondWith");        }        throw new FSMsgException("wrongInput",null);      }    }    this.respondWiths=respondWiths;  }  if ((requestId != null) && (requestId.length() != 0)) {    requestID=requestId;  } else {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSFederationTerminationNotification: " + "couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  this.providerId=providerID;  this.nameIdentifier=nameId;}  }
class C{  public void test_getPrimeP(){  assertEquals("invalid prime P",Util.rsaCrtParam.getPrimeP(),key.getPrimeP());}  }
class C{  protected ASN1TypeCollection(int tagNumber,ASN1Type[] type){  super(tagNumber);  this.type=type;  this.OPTIONAL=new boolean[type.length];  this.DEFAULT=new Object[type.length];}  }
class C{  private Class<?> findClassDalvik(String name) throws ClassNotFoundException {  if (mDexFile == null) {synchronized (FancyLoader.class) {      Constructor ctor;      try {        ctor=mDexClass.getConstructor(new Class[]{String.class});      } catch (      NoSuchMethodException nsme) {        throw new ClassNotFoundException("getConstructor failed",nsme);      }      try {        mDexFile=ctor.newInstance(DEX_FILE);      } catch (      InstantiationException ie) {        throw new ClassNotFoundException("newInstance failed",ie);      }catch (      IllegalAccessException iae) {        throw new ClassNotFoundException("newInstance failed",iae);      }catch (      InvocationTargetException ite) {        throw new ClassNotFoundException("newInstance failed",ite);      }    }  }  Method meth;  try {    meth=mDexClass.getMethod("loadClass",new Class[]{String.class,ClassLoader.class});  } catch (  NoSuchMethodException nsme) {    throw new ClassNotFoundException("getMethod failed",nsme);  }  try {    meth.invoke(mDexFile,name,this);  } catch (  IllegalAccessException iae) {    throw new ClassNotFoundException("loadClass failed",iae);  }catch (  InvocationTargetException ite) {    throw new ClassNotFoundException("loadClass failed",ite.getCause());  }  return null;}  }
class C{  public DSTModifyResponse modify(java.util.List items) throws DSTException, InteractionRedirectException {  DSTUtils.debug.message("DSTClient:modify:init:");  if (items == null) {    DSTUtils.debug.message("DSTClient:modify:null values");    throw new DSTException(DSTUtils.bundle.getString("nullInputParams"));  }  DSTModify modify=null;  if (isEncryptedResourceID) {    modify=new DSTModify(encryptedResourceID,items,null);  } else {    modify=new DSTModify(resourceID,items,null);  }  List request=new ArrayList();  request.add(DSTUtils.parseXML(modify.toString(true,true)));  List response=sendMessage(request);  if (response == null || response.size() == 0) {    DSTUtils.debug.message("DSTClient:modify: response is null");    return null;  }  return new DSTModifyResponse((Element)response.get(0));}  }
class C{  protected char charAt(String value,int index){  if (index < 0 || index >= value.length()) {    return Character.MIN_VALUE;  }  return value.charAt(index);}  }
class C{  protected void installDefaults(){  LookAndFeel.installColorsAndFont(header,"TableHeader.background","TableHeader.foreground","TableHeader.font");  LookAndFeel.installProperty(header,"opaque",Boolean.TRUE);}  }
class C{  public VendorSpecificAttribute(int identifier,String text){  super(VendorSpecificAttribute.toOctets(identifier,text));  id=identifier;  str=new String(super.getOctets(),6,super.getOctets().length - 6,StandardCharsets.UTF_8);}  }
class C{  public OctetStreamData(InputStream octetStream){  if (octetStream == null) {    throw new NullPointerException("octetStream is null");  }  this.octetStream=octetStream;}  }
class C{  public void removeAttribute(String name){synchronized (names) {    names.remove(name);  }}  }
class C{  public static boolean processLogoutResponse(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String samlResponse,String relayState) throws SAML2Exception, SessionException {  String method="processLogoutResponse : ";  if (debug.messageEnabled()) {    debug.message(method + "samlResponse : " + samlResponse);    debug.message(method + "relayState : " + relayState);  }  String rmethod=request.getMethod();  String binding=SAML2Constants.HTTP_REDIRECT;  if (rmethod.equals("POST")) {    binding=SAML2Constants.HTTP_POST;  }  String metaAlias=SAML2MetaUtils.getMetaAliasByUri(request.getRequestURI());  String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));  String idpEntityID=sm.getEntityByMetaAlias(metaAlias);  if (!SAML2Utils.isIDPProfileBindingSupported(realm,idpEntityID,SAML2Constants.SLO_SERVICE,binding)) {    debug.error("SLO service binding " + binding + " is not supported:"+ idpEntityID);    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  LogoutResponse logoutRes=null;  if (rmethod.equals("POST")) {    logoutRes=LogoutUtil.getLogoutResponseFromPost(samlResponse,response);  } else   if (rmethod.equals("GET")) {    String decodedStr=SAML2Utils.decodeFromRedirect(samlResponse);    if (decodedStr == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nullDecodedStrFromSamlResponse"));    }    logoutRes=ProtocolFactory.getInstance().createLogoutResponse(decodedStr);  }  if (logoutRes == null) {    if (debug.messageEnabled()) {      debug.message("IDPSingleLogout:processLogoutResponse: logoutRes " + "is null");    }    return false;  }  String spEntityID=logoutRes.getIssuer().getValue();  Issuer resIssuer=logoutRes.getIssuer();  String requestId=logoutRes.getInResponseTo();  SAML2Utils.verifyResponseIssuer(realm,idpEntityID,resIssuer,requestId);  boolean needToVerify=SAML2Utils.getWantLogoutResponseSigned(realm,idpEntityID,SAML2Constants.IDP_ROLE);  if (debug.messageEnabled()) {    debug.message(method + "metaAlias : " + metaAlias);    debug.message(method + "realm : " + realm);    debug.message(method + "idpEntityID : " + idpEntityID);    debug.message(method + "spEntityID : " + spEntityID);  }  if (needToVerify) {    boolean valid=false;    if (rmethod.equals("POST")) {      valid=LogoutUtil.verifySLOResponse(logoutRes,realm,spEntityID,idpEntityID,SAML2Constants.IDP_ROLE);    } else {      String queryString=request.getQueryString();      valid=SAML2Utils.verifyQueryString(queryString,realm,SAML2Constants.IDP_ROLE,spEntityID);    }    if (!valid) {      debug.error("Invalid signature in SLO Response.");      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInResponse"));    }    IDPSSODescriptorElement idpsso=sm.getIDPSSODescriptor(realm,idpEntityID);    String loc=null;    if (idpsso != null) {      List sloList=idpsso.getSingleLogoutService();      if (sloList != null && !sloList.isEmpty()) {        loc=LogoutUtil.getSLOResponseServiceLocation(sloList,binding);        if (loc == null || (loc.length() == 0)) {          loc=LogoutUtil.getSLOServiceLocation(sloList,binding);        }      }    }    if (!SAML2Utils.verifyDestination(logoutRes.getDestination(),loc)) {      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidDestination"));    }  }  boolean doRelayState=processLogoutResponse(request,response,out,logoutRes,relayState,metaAlias,idpEntityID,spEntityID,realm,binding);  Map logoutResponseMap=(Map)IDPCache.logoutResponseCache.get(requestId);  if ((logoutResponseMap != null) && (!logoutResponseMap.isEmpty())) {    LogoutResponse logoutResp=(LogoutResponse)logoutResponseMap.get("LogoutResponse");    String location=(String)logoutResponseMap.get("Location");    String spEntity=(String)logoutResponseMap.get("spEntityID");    String idpEntity=(String)logoutResponseMap.get("idpEntityID");    if (logoutResp != null && location != null && spEntity != null && idpEntity != null) {      LogoutUtil.sendSLOResponse(response,request,logoutResp,location,relayState,"/",spEntity,SAML2Constants.SP_ROLE,idpEntity,binding);      return true;    }  }  return doRelayState;}  }
class C{  private final boolean shouldCollectText(){  return collectText[stackTop];}  }
class C{  public Object eval(Reader reader) throws ScriptException {  return eval(reader,context);}  }
class C{  @Override public void write(String str) throws IOException {  try {    int len=0;    if (str != null) {      len=str.length();    }    beforeWrite(len);    out.write(str);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  private static boolean writeModify(LDIFWriter writer,Entry sourceEntry,Entry targetEntry,Collection<String> ignoreAttrs,boolean singleValueChanges) throws IOException {  LinkedList<Modification> modifications=new LinkedList<>();  LinkedHashSet<ObjectClass> sourceClasses=new LinkedHashSet<>(sourceEntry.getObjectClasses().keySet());  LinkedHashSet<ObjectClass> targetClasses=new LinkedHashSet<>(targetEntry.getObjectClasses().keySet());  Iterator<ObjectClass> sourceClassIterator=sourceClasses.iterator();  while (sourceClassIterator.hasNext()) {    ObjectClass sourceClass=sourceClassIterator.next();    if (targetClasses.remove(sourceClass)) {      sourceClassIterator.remove();    }  }  if (!sourceClasses.isEmpty()) {    modifications.add(new Modification(DELETE,toObjectClassAttribute(sourceClasses)));  }  if (!targetClasses.isEmpty()) {    modifications.add(new Modification(ADD,toObjectClassAttribute(targetClasses)));  }  LinkedHashSet<AttributeType> sourceTypes=new LinkedHashSet<>(sourceEntry.getUserAttributes().keySet());  Iterator<AttributeType> sourceTypeIterator=sourceTypes.iterator();  while (sourceTypeIterator.hasNext()) {    AttributeType type=sourceTypeIterator.next();    List<Attribute> sourceAttrs=sourceEntry.getUserAttribute(type);    List<Attribute> targetAttrs=targetEntry.getUserAttribute(type);    sourceEntry.removeAttribute(type);    if (targetAttrs == null) {      for (      Attribute a : sourceAttrs) {        modifications.add(new Modification(DELETE,a));      }    } else {      targetEntry.removeAttribute(type);      for (      Attribute sourceAttr : sourceAttrs) {        Attribute targetAttr=null;        Iterator<Attribute> attrIterator=targetAttrs.iterator();        while (attrIterator.hasNext()) {          Attribute a=attrIterator.next();          if (a.getAttributeDescription().equals(sourceAttr.getAttributeDescription())) {            targetAttr=a;            attrIterator.remove();            break;          }        }        if (targetAttr == null) {          modifications.add(new Modification(DELETE,sourceAttr));        } else {          Attribute addedValues=minusAttribute(targetAttr,sourceAttr);          if (!addedValues.isEmpty()) {            modifications.add(new Modification(ADD,addedValues));          }          Attribute deletedValues=minusAttribute(sourceAttr,targetAttr);          if (!deletedValues.isEmpty()) {            modifications.add(new Modification(DELETE,deletedValues));          }        }      }      for (      Attribute targetAttr : targetAttrs) {        modifications.add(new Modification(ADD,targetAttr));      }    }  }  for (  AttributeType type : targetEntry.getUserAttributes().keySet()) {    for (    Attribute a : targetEntry.getUserAttribute(type)) {      modifications.add(new Modification(ADD,a));    }  }  if (!ignoreAttrs.isEmpty()) {    ListIterator<Modification> modIter=modifications.listIterator();    while (modIter.hasNext()) {      String name=modIter.next().getAttribute().getAttributeDescription().getNameOrOID().toLowerCase();      if (ignoreAttrs.contains(name)) {        modIter.remove();      }    }  }  if (modifications.isEmpty()) {    return false;  }  if (singleValueChanges) {    for (    Modification m : modifications) {      Attribute a=m.getAttribute();      if (a.isEmpty()) {        writer.writeModifyChangeRecord(sourceEntry.getName(),newLinkedList(m));      } else {        LinkedList<Modification> attrMods=new LinkedList<>();        for (        ByteString v : a) {          AttributeBuilder builder=new AttributeBuilder(a.getAttributeDescription());          builder.add(v);          Attribute attr=builder.toAttribute();          attrMods.clear();          attrMods.add(new Modification(m.getModificationType(),attr));          writer.writeModifyChangeRecord(sourceEntry.getName(),attrMods);        }      }    }  } else {    writer.writeModifyChangeRecord(sourceEntry.getName(),modifications);  }  return true;}  }
class C{  final Node<K,V> removeNode(int hash,Object key,Object value,boolean matchValue,boolean movable){  Node<K,V>[] tab;  Node<K,V> p;  int n, index;  if ((tab=table) != null && (n=tab.length) > 0 && (p=tab[index=(n - 1) & hash]) != null) {    Node<K,V> node=null, e;    K k;    V v;    if (p.hash == hash && ((k=p.key) == key || (key != null && key.equals(k))))     node=p; else     if ((e=p.next) != null) {      if (p instanceof TreeNode)       node=((TreeNode<K,V>)p).getTreeNode(hash,key); else {        do {          if (e.hash == hash && ((k=e.key) == key || (key != null && key.equals(k)))) {            node=e;            break;          }          p=e;        } while ((e=e.next) != null);      }    }    if (node != null && (!matchValue || (v=node.value) == value || (value != null && value.equals(v)))) {      if (node instanceof TreeNode)       ((TreeNode<K,V>)node).removeTreeNode(this,tab,movable); else       if (node == p)       tab[index]=node.next; else       p.next=node.next;      ++modCount;      --size;      afterNodeRemoval(node);      return node;    }  }  return null;}  }
class C{  public Environment createEnvironment(String xml) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ENVIRONMENT,xml);  if (obj == null) {    return new EnvironmentImpl(xml);  } else {    return (Environment)obj;  }}  }
class C{  public static void main(String[] args){  String[] word={"Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen","Twenty","Twenty-One","Twenty-Two","Twenty-Three","Twenty-Four","Twenty-Five","Twenty-Six","Twenty-Seven","Twenty-Eight","Twenty-Nine","Thirty","Thirty-One","Thirty-Two","Thirty-Three","Thirty-Four","Thirty-Five","Thirty-Six","Thirty-Seven","Thirty-Eight","Thirty-Nine"};  DTMStringPool pool=new DTMStringPool();  System.out.println("If no complaints are printed below, we passed initial test.");  for (int pass=0; pass <= 1; ++pass) {    int i;    for (i=0; i < word.length; ++i) {      int j=pool.stringToIndex(word[i]);      if (j != i)       System.out.println("\tMismatch populating pool: assigned " + j + " for create "+ i);    }    for (i=0; i < word.length; ++i) {      int j=pool.stringToIndex(word[i]);      if (j != i)       System.out.println("\tMismatch in stringToIndex: returned " + j + " for lookup "+ i);    }    for (i=0; i < word.length; ++i) {      String w=pool.indexToString(i);      if (!word[i].equals(w))       System.out.println("\tMismatch in indexToString: returned" + w + " for lookup "+ i);    }    pool.removeAllElements();    System.out.println("\nPass " + pass + " complete\n");  }}  }
class C{  public void hitToPoint(TextHitInfo hit,Point2D point){  if (hit == null || point == null) {    throw new NullPointerException((hit == null ? "hit" : "point") + " can't be null");  }  ensureCache();  checkTextHit(hit);  float adv=0;  float off=0;  int ix=hit.getCharIndex();  boolean leading=hit.isLeadingEdge();  boolean ltr;  if (ix == -1 || ix == textLine.characterCount()) {    ltr=textLine.isDirectionLTR();    adv=(ltr == (ix == -1)) ? 0 : lineMetrics.advance;  } else {    ltr=textLine.isCharLTR(ix);    adv=textLine.getCharLinePosition(ix,leading);    off=textLine.getCharYPosition(ix);  }  point.setLocation(adv,off);  LayoutPath lp=textLine.getLayoutPath();  if (lp != null) {    lp.pathToPoint(point,ltr != leading,point);  }}  }
class C{  public void clearChoices(){  if (mCheckedStates != null) {    mCheckedStates.clear();  }  if (mCheckedIdStates != null) {    mCheckedIdStates.clear();  }  mCheckedCount=0;  updateOnScreenCheckedViews();}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof Size2DSyntax && this.x == ((Size2DSyntax)object).x && this.y == ((Size2DSyntax)object).y);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.InclusiveC14NElement createInclusiveC14NElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.InclusiveC14NElementImpl();}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String digestOID) throws IllegalArgumentException {  addSigner(key,cert,getEncOID(key,digestOID),digestOID);}  }
class C{  public int hashCode(){  int result=17;  if (isDestroyed()) {    return result;  }  result=result * 37 + Arrays.hashCode(getEncoded());  result=result * 37 + endTime.hashCode();  result=result * 37 + client.hashCode();  result=result * 37 + server.hashCode();  result=result * 37 + sessionKey.hashCode();  if (authTime != null) {    result=result * 37 + authTime.hashCode();  }  if (startTime != null) {    result=result * 37 + startTime.hashCode();  }  if (renewTill != null) {    result=result * 37 + renewTill.hashCode();  }  result=result * 37 + Arrays.hashCode(clientAddresses);  return result * 37 + Arrays.hashCode(flags);}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public DialogTimeoutEvent(Object source,Dialog dialog,Reason reason){  super(source);  m_dialog=dialog;  m_reason=reason;}  }
class C{  XSLTElementProcessor popProcessor(){  return (XSLTElementProcessor)m_processors.pop();}  }
class C{  public boolean hasAgeEnd(){  return fieldSetFlags()[1];}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AffiliateMemberElement createAffiliateMemberElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AffiliateMemberElementImpl(value);}  }
class C{  public Set<Map<ServerProperty,Object>> readServerRegistry() throws ADSContextException {  Set<Map<ServerProperty,Object>> result=new HashSet<>();  SearchRequest request=newSearchRequest(getServerContainerDN(),SINGLE_LEVEL,objectClassPresent());  try (ConnectionEntryReader entryReader=connectionWrapper.getConnection().search(request)){    while (entryReader.hasNext()) {      SearchResultEntry sr=entryReader.readEntry();      Map<ServerProperty,Object> properties=makePropertiesFromServerAttrs(sr);      Object keyId=properties.get(ServerProperty.INSTANCE_KEY_ID);      if (keyId != null) {        SearchRequest request2=newSearchRequest(getInstanceKeysContainerDN(),SINGLE_LEVEL,Filter.valueOf("(ds-cfg-key-id=" + keyId + ")"),"ds-cfg-public-key-certificate;binary");        try (ConnectionEntryReader entryReader2=connectionWrapper.getConnection().search(request2)){          boolean found=false;          while (entryReader2.hasNext()) {            SearchResultEntry certEntry=entryReader2.readEntry();            Attribute certAttr=certEntry.getAttribute("ds-cfg-public-key-certificate;binary");            properties.put(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE,certAttr.firstValue().toByteArray());            found=true;          }          if (!found) {            logger.warn(LocalizableMessage.raw("Could not find public key for " + properties));          }        } catch (        EntryNotFoundException x) {          logger.warn(LocalizableMessage.raw("Could not find public key for " + properties));        }      }      result.add(properties);    }    return result;  } catch (  EntryNotFoundException x) {    throw new ADSContextException(ErrorType.BROKEN_INSTALL);  }catch (  AuthorizationException x) {    throw new ADSContextException(ErrorType.ACCESS_PERMISSION);  }catch (  IOException x) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }}  }
class C{  protected boolean needToUnescapeXMLSpecialCharacters(String hostEntityID,String remoteEntityID,String realm){  return true;}  }
class C{  void notify(final LocalizableMessage message) throws ClientException {  try {    handler.handle(new Callback[]{new TextOutputCallback(TextOutputCallback.INFORMATION,message.toString())});  } catch (  final Exception e) {    throw new ClientException(ReturnCode.ERROR_UNEXPECTED,ERR_UPGRADE_DISPLAY_NOTIFICATION_ERROR.get(e.getMessage()));  }}  }
class C{  public void testConstrCharMathContext(){  char[] biCA="12345678901234567890123456789012345.0E+10".toCharArray();  char[] nbiCA="-12345678901234567890123456789012345.E+10".toCharArray();  BigDecimal bd;  MathContext mc;  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(biCA,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+44",bd.toString());  bd=new BigDecimal(nbiCA,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+44",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(biCA,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+44",bd.toString());  bd=new BigDecimal(nbiCA,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+44",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(biCA,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+44",bd.toString());  bd=new BigDecimal(nbiCA,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+44",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(biCA,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbiCA,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  public ProductService retrieveProductsByPage(int page,Handler<AsyncResult<List<Product>>> resultHandler){  delegate.retrieveProductsByPage(page,resultHandler);  return this;}  }
class C{  public void incrementTotalReadRecordCount(){  totalReadRecordCount++;  totalRequests++;}  }
class C{  public TypeMismatch(){  super();}  }
class C{  LinkedEntry(K key,V value,int hash,HashMapEntry<K,V> next,LinkedEntry<K,V> nxt,LinkedEntry<K,V> prv){  super(key,value,hash,next);  this.nxt=nxt;  this.prv=prv;}  }
class C{  public static ECPoint.F2m tau(ECPoint.F2m p){  if (p.isInfinity()) {    return p;  }  ECFieldElement x=p.getX();  ECFieldElement y=p.getY();  return new ECPoint.F2m(p.getCurve(),x.square(),y.square(),p.isCompressed());}  }
class C{  void tokenize(String pat) throws javax.xml.transform.TransformerException {  tokenize(pat,null);}  }
class C{  public boolean add(Attribute attribute){  Object oldAttribute=attrMap.put(attribute.getCategory(),AttributeSetUtilities.verifyAttributeValue(attribute,myInterface));  return (!attribute.equals(oldAttribute));}  }
class C{  public SubjectDecision evaluate(String realm,SubjectAttributesManager mgr,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  boolean satified=hasPrincipal(subject,getID()) ^ isExclusive();  return new SubjectDecision(satified,Collections.EMPTY_MAP);}  }
class C{  @Override public synchronized void reset() throws IOException {  try {    in.reset();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  @Override public void forceResort(){  updateDataArray();  fireTableDataChanged();}  }
class C{  @Override protected void shutdown(){  Arrays.fill(mac_write_secret,(byte)0);  Arrays.fill(mac_read_secret,(byte)0);  super.shutdown();}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  static Promise<Void> promiseNotify(){  return new BasePromise<>();}  }
class C{  public MessageFactoryImpl(){}  }
class C{  public boolean startsWith(XMLString prefix){  return startsWith(prefix,0);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsu.TimestampType createTimestampType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsu.impl.TimestampTypeImpl();}  }
class C{  private void addFilterLogcatEntry(String logcatEntry){  if ((TextUtils.isEmpty(mLogPriorityLevel) || (!TextUtils.isEmpty(mLogPriorityLevel) && priorityLevelConditionForFiltering(logcatEntry))) && (TextUtils.isEmpty(mLogFilterText) || (!TextUtils.isEmpty(mLogFilterText) && logcatEntry.toLowerCase().contains(mLogFilterText.toLowerCase())))) {    mFilteredLogcatData.add(logcatEntry);  }}  }
class C{  private static DsnNetId read_net_id(JflexScanner p_scanner){  try {    int subnet_number=0;    p_scanner.yybegin(DsnFileScanner.NAME);    Object next_token=p_scanner.next_token();    if (!(next_token instanceof String)) {      System.out.println("Wiring:read_net_id: String expected");      return null;    }    String net_name=(String)next_token;    next_token=p_scanner.next_token();    if (next_token instanceof Integer) {      subnet_number=(Integer)next_token;      next_token=p_scanner.next_token();    }    if (next_token != DsnKeyword.CLOSED_BRACKET) {      System.out.println("Wiring.read_net_id: closing bracket expected");    }    return new DsnNetId(net_name,subnet_number);  } catch (  java.io.IOException e) {    System.out.println("DsnFile.read_string_scope: IO error scanning file");    return null;  }}  }
class C{  private boolean hasImageSyntax(String attrName){  Schema schema=getInfo().getServerDescriptor().getSchema();  return Utilities.hasImageSyntax(attrName,schema);}  }
class C{  public void aggregate(ConfigChangeResult other){  if (other.getResultCode() != ResultCode.SUCCESS) {    setResultCodeIfSuccess(other.getResultCode());    messages.addAll(other.getMessages());  }}  }
class C{  public final void testSetMessageDigest(){  for (int ii=0; ii < algorithmName.length; ii++) {    try {      DigestInputStream dis=new DigestInputStream(null,null);      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      dis.setMessageDigest(md);      assertTrue(dis.getMessageDigest() == md);      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public CombinatorialNameGenerator(final CombinatorialNameGeneratorBuilder builder,final boolean usesMiddles){  final int totalBeginnings=builder.getBeginnings().size();  final int totalEndings=builder.getEndings().size();  beginnings=builder.getBeginnings().toArray(new String[totalBeginnings]);  endings=builder.getEndings().toArray(new String[totalEndings]);  if (usesMiddles) {    final int totalMiddles=builder.getMiddles().size();    middles=builder.getMiddles().toArray(new String[totalMiddles]);  } else {    middles=null;  }}  }
class C{  public void testSecretKeyFactory02() throws NoSuchAlgorithmException {  try {    SecretKeyFactory.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SecretKeyFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException was not thrown as expected");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public Certificate engineGetCertificate(String alias){  if (alias == null) {    throw new IllegalArgumentException("null alias passed to getCertificate.");  }  Certificate c=(Certificate)certs.get(alias);  if (c == null) {    String id=(String)localIds.get(alias);    if (id != null) {      c=(Certificate)keyCerts.get(id);    } else {      c=(Certificate)keyCerts.get(alias);    }  }  return c;}  }
class C{  public ReadOnlyBufferException(){}  }
class C{  public void addCollection(SecurityCollection collection){  if (collection == null)   return;  collection.setEncoding(getEncoding());  SecurityCollection results[]=new SecurityCollection[collections.length + 1];  for (int i=0; i < collections.length; i++)   results[i]=collections[i];  results[collections.length]=collection;  collections=results;}  }
class C{  public static File writeDataToTempFile(final byte[] data,final String suffix){  try {    File file=File.createTempFile("jk-",suffix);    return writeDataToFile(data,file);  } catch (  IOException e) {    JKExceptionUtil.handle(e);    return null;  }}  }
class C{  public boolean isReal(){  return type == REAL;}  }
class C{  public boolean removeDatabases(){  return removeDatabasesArg.isPresent();}  }
class C{  public XBoolean(boolean b){  super();  m_val=b;}  }
class C{  private String stripTags(String string){  return string.replaceAll("<[^>]*>","");}  }
class C{  private static void writeFully(WritableByteChannel ch,ByteBuffer bb) throws IOException {  if (ch instanceof SelectableChannel) {    SelectableChannel sc=(SelectableChannel)ch;synchronized (sc.blockingLock()) {      if (!sc.isBlocking())       throw new IllegalBlockingModeException();      writeFullyImpl(ch,bb);    }  } else {    writeFullyImpl(ch,bb);  }}  }
class C{  private boolean isNeverExpires(){  return getExpiryTime() == defaultExpireTime();}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="district";  String qualifiedName="emp:district";  Document doc;  Attr newAttribute;  NodeList elementList;  Element testAddr;  Attr districtAttr;  String attrValue;  doc=(Document)load("staffNS",true);  newAttribute=doc.createAttributeNS(namespaceURI,qualifiedName);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  districtAttr=testAddr.setAttributeNodeNS(newAttribute);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","",attrValue);}  }
class C{  boolean is_layer_dependent(){  int compare_value=layer[0];  for (int index=1; index < layer_structure.size(); ++index) {    if (layer[index] != compare_value) {      return true;    }  }  return false;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZONE_OFFSET_TYPE,this);}  }
class C{  private boolean hasNextInetSocketAddress(){  return socketAddresses != null;}  }
class C{  boolean casNext(Node<K,V> cmp,Node<K,V> val){  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);}  }
class C{  public SetNextNamingRule(String methodName,String paramType){  this.methodName=methodName;  this.paramType=paramType;}  }
class C{  public void deleteField(String id){  super.doDeleteTagField(new FrameAndSubId(id,null));}  }
class C{  public void testEngineGenerateCertPathLJava_util_List02(){  CertificateFactorySpi certFactorySpi=new extCertificateFactorySpi();  List<Certificate> list=new ArrayList<Certificate>();  try {    certFactorySpi.engineGenerateCertPath(list);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  public boolean hasMcid(int mcid){  return hasMcid(mcid,false);}  }
class C{  public static String createCnonce(){  String cnonce;  MessageDigest md5Helper=createMessageDigest("MD5");  cnonce=Long.toString(System.currentTimeMillis());  cnonce=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(cnonce)));  return cnonce;}  }
class C{  public void removeNodeFromParent(MutableTreeNode node){  MutableTreeNode parent=(MutableTreeNode)node.getParent();  if (parent == null)   throw new IllegalArgumentException("node does not have a parent.");  int[] childIndex=new int[1];  Object[] removedArray=new Object[1];  childIndex[0]=parent.getIndex(node);  parent.remove(childIndex[0]);  removedArray[0]=node;  nodesWereRemoved(parent,childIndex,removedArray);}  }
class C{  private static String jsdocifyProtoMarkdownLinks(String comment){  StringBuffer sb=new StringBuffer();  Matcher m=CommentPatterns.PROTO_LINK_PATTERN.matcher(comment);  if (!m.find()) {    return comment;  }  do {    m.appendReplacement(sb,String.format("{@link %s}",m.group(1)));  } while (m.find());  m.appendTail(sb);  return sb.toString();}  }
class C{  public void putValue(String key,Object newValue){  Object oldValue=null;  if (key == "enabled") {    if (newValue == null || !(newValue instanceof Boolean)) {      newValue=false;    }    oldValue=enabled;    enabled=(Boolean)newValue;  } else {    if (arrayTable == null) {      arrayTable=new ArrayTable();    }    if (arrayTable.containsKey(key))     oldValue=arrayTable.get(key);    if (newValue == null) {      arrayTable.remove(key);    } else {      arrayTable.put(key,newValue);    }  }  firePropertyChange(key,oldValue,newValue);}  }
class C{  public ResponseProviderTypeManager(PolicyManager pm){  this.pm=pm;  token=pm.token;  java.util.Locale loc;  try {    String lstr=token.getProperty("Locale");    loc=com.sun.identity.shared.locale.Locale.getLocale(lstr);  } catch (  SSOException ex) {    debug.error("ResponseProviderTypeManager:Unable to retreive " + "locale from SSOToken",ex);    loc=Locale.getDefaultLocale();  }  if (debug.messageEnabled()) {    debug.message("ResponseProviderTypeManager locale=" + loc + "\tI18nFileName = "+ ResBundleUtils.rbName);  }  rb=amCache.getResBundle(ResBundleUtils.rbName,loc);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.soap.EnvelopeElement createEnvelopeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.soap.impl.EnvelopeElementImpl();}  }
class C{  private <T>Object refer(MotanReferer reference,Class<?> referenceClass){  String interfaceName;  if (!void.class.equals(reference.interfaceClass())) {    interfaceName=reference.interfaceClass().getName();  } else   if (referenceClass.isInterface()) {    interfaceName=referenceClass.getName();  } else {    throw new IllegalStateException("The @Reference undefined interfaceClass or interfaceName, and the property type " + referenceClass.getName() + " is not a interface.");  }  String key=reference.group() + "/" + interfaceName+ ":"+ reference.version();  RefererConfigBean<T> referenceConfig=referenceConfigs.get(key);  if (referenceConfig == null) {    referenceConfig=new RefererConfigBean<T>();    referenceConfig.setBeanFactory(beanFactory);    if (void.class.equals(reference.interfaceClass()) && referenceClass.isInterface()) {      referenceConfig.setInterface((Class<T>)referenceClass);    } else     if (!void.class.equals(reference.interfaceClass())) {      referenceConfig.setInterface((Class<T>)reference.interfaceClass());    }    if (beanFactory != null) {      if (reference.protocol() != null && reference.protocol().length() > 0) {        List<ProtocolConfig> protocolConfigs=SpringBeanUtil.getMultiBeans(beanFactory,reference.protocol(),SpringBeanUtil.COMMA_SPLIT_PATTERN,ProtocolConfig.class);        referenceConfig.setProtocols(protocolConfigs);      }      if (reference.directUrl() != null && reference.directUrl().length() > 0) {        referenceConfig.setDirectUrl(reference.directUrl());      }      if (reference.basicReferer() != null && reference.basicReferer().length() > 0) {        BasicRefererInterfaceConfig biConfig=beanFactory.getBean(reference.basicReferer(),BasicRefererInterfaceConfig.class);        if (biConfig != null) {          referenceConfig.setBasicReferer(biConfig);        }      }      if (reference.client() != null && reference.client().length() > 0) {      }      if (reference.registry() != null && reference.registry().length() > 0) {        List<RegistryConfig> registryConfigs=SpringBeanUtil.getMultiBeans(beanFactory,reference.registry(),SpringBeanUtil.COMMA_SPLIT_PATTERN,RegistryConfig.class);        referenceConfig.setRegistries(registryConfigs);      }      if (reference.extConfig() != null && reference.extConfig().length() > 0) {        referenceConfig.setExtConfig(beanFactory.getBean(reference.extConfig(),ExtConfig.class));      }      if (reference.application() != null && reference.application().length() > 0) {        referenceConfig.setApplication(reference.application());      }      if (reference.module() != null && reference.module().length() > 0) {        referenceConfig.setModule(reference.module());      }      if (reference.group() != null && reference.group().length() > 0) {        referenceConfig.setGroup(reference.group());      }      if (reference.version() != null && reference.version().length() > 0) {        referenceConfig.setVersion(reference.version());      }      if (reference.proxy() != null && reference.proxy().length() > 0) {        referenceConfig.setProxy(reference.proxy());      }      if (reference.filter() != null && reference.filter().length() > 0) {        referenceConfig.setFilter(reference.filter());      }      if (reference.actives() > 0) {        referenceConfig.setActives(reference.actives());      }      if (reference.async()) {        referenceConfig.setAsync(reference.async());      }      if (reference.mock() != null && reference.mock().length() > 0) {        referenceConfig.setMock(reference.mock());      }      if (reference.shareChannel()) {        referenceConfig.setShareChannel(reference.shareChannel());      }      if (reference.throwException()) {        referenceConfig.setThrowException(reference.throwException());      }      if (reference.requestTimeout() > 0) {        referenceConfig.setRequestTimeout(reference.requestTimeout());      }      if (reference.register()) {        referenceConfig.setRegister(reference.register());      }      if (reference.accessLog()) {        referenceConfig.setAccessLog("true");      }      if (reference.check()) {        referenceConfig.setCheck("true");      }      if (reference.retries() > 0) {        referenceConfig.setRetries(reference.retries());      }      if (reference.usegz()) {        referenceConfig.setUsegz(reference.usegz());      }      if (reference.mingzSize() > 0) {        referenceConfig.setMingzSize(reference.mingzSize());      }      if (reference.codec() != null && reference.codec().length() > 0) {        referenceConfig.setCodec(reference.codec());      }      if (reference.mean() != null && reference.mean().length() > 0) {        referenceConfig.setMean(reference.mean());      }      if (reference.p90() != null && reference.p90().length() > 0) {        referenceConfig.setP90(reference.p90());      }      if (reference.p99() != null && reference.p99().length() > 0) {        referenceConfig.setP99(reference.p99());      }      if (reference.p999() != null && reference.p999().length() > 0) {        referenceConfig.setP999(reference.p999());      }      if (reference.errorRate() != null && reference.errorRate().length() > 0) {        referenceConfig.setErrorRate(reference.errorRate());      }      try {        referenceConfig.afterPropertiesSet();      } catch (      RuntimeException e) {        throw (RuntimeException)e;      }catch (      Exception e) {        throw new IllegalStateException(e.getMessage(),e);      }    }    referenceConfigs.putIfAbsent(key,referenceConfig);    referenceConfig=referenceConfigs.get(key);  }  return referenceConfig.getRef();}  }
class C{  public LineNumberFormatter(File file,List<LineNumberPosition> lineNumberPositions,EnumSet<LineNumberOption> options){  _file=file;  _positions=lineNumberPositions;  _options=(options == null ? EnumSet.noneOf(LineNumberOption.class) : options);}  }
class C{  public static int mainDelete(String[] args){  return mainDelete(args,true,System.out,System.err);}  }
class C{  public TreePath addSuffix(DN suffixDn,DN parentSuffixDn) throws IllegalArgumentException {  SuffixNode parentNode;  if (parentSuffixDn != null) {    parentNode=findSuffixNode(parentSuffixDn,rootNode);    if (parentNode == null) {      throw new IllegalArgumentException("Invalid suffix dn " + parentSuffixDn);    }  } else {    parentNode=rootNode;  }  int index=findChildNode(parentNode,suffixDn);  if (index >= 0) {    throw new IllegalArgumentException("Duplicate suffix dn " + suffixDn);  }  index=-(index + 1);  SuffixNode newNode=new SuffixNode(suffixDn);  treeModel.insertNodeInto(newNode,parentNode,index);  startRefreshNode(newNode,null,true);  return new TreePath(treeModel.getPathToRoot(newNode));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonegetparentnull.class,args);}  }
class C{  public void decompile(String root,String packege,String className){  start=System.currentTimeMillis();  log="";  source="";  File workingDir=new File(root + "/" + packege);  final String classPathStr=new File(workingDir,className).getAbsolutePath();  boolean includeLineNumbers=false;  boolean stretchLines=false;  if (ClassUtil.isDebug()) {    includeLineNumbers=true;    stretchLines=true;  }  DecompilationOptions decompilationOptions=new DecompilationOptions();  DecompilerSettings settings=DecompilerSettings.javaDefaults();  settings.setTypeLoader(new com.strobel.assembler.InputTypeLoader());  settings.setForceExplicitImports(true);  decompilationOptions.setSettings(settings);  decompilationOptions.setFullDecompilation(true);  MetadataSystem metadataSystem=new NoRetryMetadataSystem(decompilationOptions.getSettings().getTypeLoader());  metadataSystem.setEagerMethodLoadingEnabled(false);  TypeReference type=metadataSystem.lookupType(classPathStr);  TypeDefinition resolvedType;  if ((type == null) || ((resolvedType=type.resolve()) == null)) {    System.err.printf("!!! ERROR: Failed to load class %s.\n",new Object[]{classPathStr});    return;  }  DeobfuscationUtilities.processType(resolvedType);  String property="java.io.tmpdir";  String tempDir=System.getProperty(property);  File classFile=new File(tempDir,System.currentTimeMillis() + className);  Writer writer=null;  try {    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(classFile)));    PlainTextOutput output=new PlainTextOutput(writer);    output.setUnicodeOutputEnabled(decompilationOptions.getSettings().isUnicodeOutputEnabled());    TypeDecompilationResults results=decompilationOptions.getSettings().getLanguage().decompileType(resolvedType,output,decompilationOptions);    writer.flush();    writer.close();    writer=null;    List lineNumberPositions=results.getLineNumberPositions();    if (includeLineNumbers || stretchLines) {      EnumSet lineNumberOptions=EnumSet.noneOf(LineNumberFormatter.LineNumberOption.class);      if (includeLineNumbers) {        lineNumberOptions.add(LineNumberFormatter.LineNumberOption.LEADING_COMMENTS);      }      if (stretchLines) {        lineNumberOptions.add(LineNumberFormatter.LineNumberOption.STRETCHED);      }      LineNumberFormatter lineFormatter=new LineNumberFormatter(classFile,lineNumberPositions,lineNumberOptions);      lineFormatter.reformatFile();    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  source=UnicodeUtil.decode(FileUtil.getContent(classFile));  classFile.delete();  Pattern wp=Pattern.compile("/\\*.+?\\*/",Pattern.DOTALL);  Matcher m=wp.matcher(source);  while (m.find()) {    if (m.group().matches("/\\*\\s*\\d*\\s*\\*/"))     continue;    String group=m.group();    group=group.replace("/*","");    group=group.replace("*/","");    group=group.replace("*","");    if (log.length() > 0)     log+="\n";    log+=group;    source=source.replace(m.group(),"");  }  time=System.currentTimeMillis() - start;}  }
class C{  private static void updateDataTypeClassNameChanges(SQLiteDatabase db){  DataTypeDbAdapter dataTypeDbAdapter=new DataTypeDbAdapter(db);  Cursor cursor;  long id;  cursor=dataTypeDbAdapter.fetchAll(OmniText.DB_NAME,null);  cursor.moveToFirst();  id=getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);  dataTypeDbAdapter.update(id,null,OmniText.class.getName());  cursor.close();  cursor=dataTypeDbAdapter.fetchAll(OmniPhoneNumber.DB_NAME,null);  cursor.moveToFirst();  id=getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);  dataTypeDbAdapter.update(id,null,OmniPhoneNumber.class.getName());  cursor.close();  cursor=dataTypeDbAdapter.fetchAll(OmniDayOfWeek.DB_NAME,null);  cursor.moveToFirst();  id=getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);  dataTypeDbAdapter.update(id,null,OmniDayOfWeek.class.getName());  cursor.close();  cursor=dataTypeDbAdapter.fetchAll(OmniTimePeriod.DB_NAME,null);  cursor.moveToFirst();  id=getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);  dataTypeDbAdapter.update(id,null,OmniTimePeriod.class.getName());  cursor.close();  cursor=dataTypeDbAdapter.fetchAll(OmniDate.DB_NAME,null);  cursor.moveToFirst();  id=getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);  dataTypeDbAdapter.update(id,null,OmniDate.class.getName());  cursor.close();  cursor=dataTypeDbAdapter.fetchAll(OmniArea.DB_NAME,null);  cursor.moveToFirst();  id=getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);  dataTypeDbAdapter.update(id,null,OmniArea.class.getName());  cursor.close();  cursor=dataTypeDbAdapter.fetchAll(OmniPasswordInput.DB_NAME,null);  cursor.moveToFirst();  id=getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);  dataTypeDbAdapter.update(id,null,OmniPasswordInput.class.getName());  cursor.close();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.StatementElement createStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.StatementElementImpl();}  }
class C{  @Override public Foo remove(Serializable primaryKey) throws NoSuchFooException {  Session session=null;  try {    session=openSession();    Foo foo=(Foo)session.get(FooImpl.class,primaryKey);    if (foo == null) {      if (_log.isDebugEnabled()) {        _log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);      }      throw new NoSuchFooException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);    }    return remove(foo);  } catch (  NoSuchFooException nsee) {    throw nsee;  }catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  try {    writeNormalizedChars(ch,start,length,m_lineSepUse);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  void addRemotePolicyListener(SSOToken appToken,String serviceName,String notificationURL){  addRemotePolicyListener(appToken,serviceName,notificationURL,false);}  }
class C{  public void deleteField(ID3v24FieldKey id3v24FieldKey) throws KeyNotFoundException {  if (id3v24FieldKey == null) {    throw new KeyNotFoundException();  }  super.doDeleteTagField(new FrameAndSubId(id3v24FieldKey.getFrameId(),id3v24FieldKey.getSubId()));}  }
class C{  public boolean isVorbisCommentHeader(byte[] headerData){  String vorbis=Utils.getString(headerData,VorbisHeader.FIELD_CAPTURE_PATTERN_POS,VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH,"ISO-8859-1");  return !(headerData[VorbisHeader.FIELD_PACKET_TYPE_POS] != VorbisPacketType.COMMENT_HEADER.getType() || !vorbis.equals(VorbisHeader.CAPTURE_PATTERN));}  }
class C{  Name(int index,BasicType type){  this(index,type,null,null);}  }
class C{  public boolean before(String userDefinedValue) throws IllegalArgumentException {  try {    return value.before(getDate(userDefinedValue));  } catch (  DataTypeValidationException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  @Override public STypeDef type(){  return classClassDef;}  }
class C{  public void dirtyCache(String dn,int eventType,boolean cosType,boolean aciChange,Set attrNames){  CacheBlock cb;  String origdn=dn;  dn=LDAPUtils.formatToRFC(dn);switch (eventType) {case PersistentSearchChangeType.ADDED:    cb=(CacheBlock)sdkCache.get(dn);  if (cb != null) {    cb.setExists(true);  }if (cosType) {  removeCachedAttributes(dn,attrNames);}break;case PersistentSearchChangeType.REMOVED:cb=(CacheBlock)sdkCache.remove(dn);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(dn,attrNames);}break;case PersistentSearchChangeType.RENAMED:cb=(CacheBlock)sdkCache.remove(dn);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(dn,attrNames);}break;case PersistentSearchChangeType.MODIFIED:cb=(CacheBlock)sdkCache.get(dn);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(dn,attrNames);} else if (aciChange) {clearCachedEntries(dn);}break;}if (getDebug().messageEnabled()) {getDebug().message("CachedRemoteServicesImpl.dirtyCache(): " + "Cache dirtied because of Event Notification. Parameters" + " - eventType: " + eventType + ", cosType: "+ cosType+ ", aciChange: "+ aciChange+ ", fullDN: "+ origdn+ "; rfcDN ="+ dn);}}  }
class C{  public MessageRefEntry(final String msgPropKey,final Integer ordinal,final String formatString){  this.formatString=formatString;  this.ordinal=ordinal;  xmlId=getXmlId(msgPropKey);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  private boolean checkIsSubClass(String target){  TypeElement type=element;  while (true) {    if (type == null) {      return false;    } else     if (target.equals(type.getQualifiedName().toString())) {      return true;    }    type=getParentClass(type);  }}  }
class C{  public int size(){  return count.get();}  }
class C{  public FrameBodyWOAR(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void println(){  javaLine++;  writer.println("");}  }
class C{  public UserRegistrationBuilder(){  subjectTranslations=new HashMap<>();  messageTranslations=new HashMap<>();}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  protected final void endOfInput() throws IOException {  if (state != STATE_READING_RESPONSE_BODY)   throw new IllegalStateException("state: " + state);  detachTimeout(timeout);  state=STATE_CLOSED;  if (streamAllocation != null) {    streamAllocation.streamFinished(Http1xStream.this);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.AbsXPathElement createAbsXPathElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.AbsXPathElementImpl();}  }
class C{  public ResultImpl(String xml) throws XACMLException {  Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);  if (document != null) {    Element rootElement=document.getDocumentElement();    processElement(rootElement);    makeImmutable();  } else {    XACMLSDKUtils.debug.error("ResultImpl.processElement(): invalid XML input");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("errorObtainingElement"));  }}  }
class C{  @Post public Representation createClient(Representation entity) throws OAuth2RestletException {  final OAuth2Request request=requestFactory.create(getRequest());  final ChallengeResponse authHeader=getRequest().getChallengeResponse();  final String accessToken=authHeader != null ? authHeader.getRawValue() : null;  try {    final String deploymentUrl=getRequest().getHostRef().toString() + "/" + getRequest().getResourceRef().getSegments().get(0);    final JsonValue registration=clientRegistrationService.createRegistration(accessToken,deploymentUrl,request);    setStatus(Status.SUCCESS_CREATED);    return jacksonRepresentationFactory.create(registration.asMap());  } catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);  }}  }
class C{  public void testLjava_lang_StringLjava_security_Provider() throws Exception {  try {    TrustManagerFactory.getInstance(null,mProv);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      TrustManagerFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  TrustManagerFactory tmf;  for (int i=0; i < validValues.length; i++) {    tmf=TrustManagerFactory.getInstance(validValues[i],mProv);    assertTrue("Not instanceof TrustManagerFactory object",tmf instanceof TrustManagerFactory);    assertEquals("Incorrect algorithm",tmf.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",tmf.getProvider(),mProv);    checkResult(tmf);  }}  }
class C{  public boolean beginContentStaticTextMessageDisplay(ChildDisplayEvent event){  return ((ErrorMessage != null) && (ErrorMessage.length() > 0));}  }
class C{  @Override public void clearWhiteList(){  SharedPreferences.Editor editor=sharedPreferences.edit();  editor.remove(KEY_WHITELIST);  editor.commit();}  }
class C{  public boolean disableReplicationServer(){  return disableReplicationServer;}  }
class C{  public java.lang.String toString(){  return toString(true,false);}  }
class C{  public void initializeSchema() throws InitializationException, ConfigException {  schemaHandler.initialize(serverContext);  schemaHandler.detectChangesOnInitialization();  compressedSchema=new DefaultCompressedSchema(serverContext);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DSTDate createDSTDate() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DSTDateImpl();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.KeyInfoType createKeyInfoType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.KeyInfoTypeImpl();}  }
class C{  private void initSkinLoader(){  SkinManager.getInstance().init(this);  SkinManager.getInstance().load();}  }
class C{  private void searchIndexed(ReadableTransaction txn,long[] entryIDReorderedSet,boolean candidatesAreInScope,SearchOperation searchOperation,PagedResultsControl pageRequest) throws DirectoryException, CanceledOperationException {  SearchScope searchScope=searchOperation.getScope();  DN aBaseDN=searchOperation.getBaseDN();  boolean manageDsaIT=isManageDsaITOperation(searchOperation);  boolean continueSearch=true;  Long beginEntryID=null;  if (pageRequest != null && pageRequest.getCookie().length() != 0) {    try {      beginEntryID=pageRequest.getCookie().toLong();    } catch (    Exception e) {      logger.traceException(e);      throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_INVALID_PAGED_RESULTS_COOKIE.get(pageRequest.getCookie().toHexString()),e);    }  } else   if (!manageDsaIT) {    continueSearch=dn2uri.returnSearchReferences(txn,searchOperation);  }  int lookthroughLimit=searchOperation.getClientConnection().getLookthroughLimit();  if (lookthroughLimit > 0 && entryIDReorderedSet.length > lookthroughLimit) {    searchOperation.setResultCode(ResultCode.ADMIN_LIMIT_EXCEEDED);    searchOperation.appendErrorMessage(NOTE_LOOKTHROUGH_LIMIT_EXCEEDED.get(lookthroughLimit));    continueSearch=false;  }  if (continueSearch) {    final SearchFilter filter=searchOperation.getFilter();    for (int i=findStartIndex(beginEntryID,entryIDReorderedSet); i < entryIDReorderedSet.length; i++) {      EntryID entryID=new EntryID(entryIDReorderedSet[i]);      Entry entry;      try {        entry=getEntry(txn,entryID);      } catch (      Exception e) {        logger.traceException(e);        continue;      }      if (entry != null && isInScope(candidatesAreInScope,searchScope,aBaseDN,entry) && (manageDsaIT || entry.getReferralURLs() == null) && filter.matchesEntry(entry)) {        if (isPageFull(searchOperation,pageRequest)) {          addPagedResultsControl(searchOperation,pageRequest,entryID.toByteString());          return;        }        if (!searchOperation.returnEntry(entry,null)) {          break;        }      }    }    searchOperation.checkIfCanceled(false);  }  if (searchOperation.getEntriesSent() == 0 && searchOperation.getReferencesSent() == 0) {    final Entry baseEntry=fetchBaseEntry(txn,aBaseDN,searchScope);    if (!manageDsaIT) {      dn2uri.checkTargetForReferral(baseEntry,searchScope);    }  }  addPagedResultsControl(searchOperation,pageRequest,null);}  }
class C{  public static void embedBasicPatterns(int version,ByteMatrix matrix) throws WriterException {  embedPositionDetectionPatternsAndSeparators(matrix);  embedDarkDotAtLeftBottomCorner(matrix);  maybeEmbedPositionAdjustmentPatterns(version,matrix);  embedTimingPatterns(matrix);}  }
class C{  DeleteMsg(PostOperationDeleteOperation operation){  super((OperationContext)operation.getAttachment(SYNCHROCONTEXT),operation.getEntryDN());  try {    isSubtreeDelete=operation.getRequestControl(SubtreeDeleteControl.DECODER) != null;  } catch (  Exception e) {  }}  }
class C{  public boolean hasNameOrOID(final String value){  return hasName(value) || getOID().equals(value);}  }
class C{  public WindowSurface(EglCore eglCore,Surface surface,boolean releaseSurface){  super(eglCore);  createWindowSurface(surface);  mSurface=surface;  mReleaseSurface=releaseSurface;}  }
class C{  public static byte[] flattenBitmap(Bitmap bitmap){  int size=bitmap.getWidth() * bitmap.getHeight() * 4;  ByteArrayOutputStream out=new ByteArrayOutputStream(size);  try {    bitmap.compress(Bitmap.CompressFormat.PNG,100,out);    out.flush();    out.close();    return out.toByteArray();  } catch (  IOException e) {    Log.w(TAG,"Could not write bitmap");    return null;  }}  }
class C{  static private String generateTokenID(String resource){  if (StringUtils.isBlank(resource)) {    return null;  }  return Hash.hash(resource + RandomStringUtils.randomAlphanumeric(32));}  }
class C{  int updateChildOffsets(float targetOffset){  int n=getViewCount();  int targetIndex=n - 1;  int pos=lastValidOffset.getChildView().getStartOffset();  int startIndex=getViewIndex(pos,Position.Bias.Forward);  float start=lastValidOffset.getMajorOffset();  float lastOffset=start;  for (int i=startIndex; i < n; i++) {    ChildState cs=getChildState(i);    cs.setMajorOffset(lastOffset);    lastOffset+=cs.getMajorSpan();    if (targetOffset < lastOffset) {      targetIndex=i;      lastValidOffset=cs;      break;    }  }  return targetIndex;}  }
class C{  public int hashCode(){  return this.getName().hashCode();}  }
class C{  public boolean isReverseAxes(){  return m_iterator.isReverse();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodechildnodesappendchild.class,args);}  }
class C{  public PlaPointFloat right_tangential_point(PlaPointFloat p_to_point,double p_distance){  if (p_to_point == null)   return null;  PlaPointFloat[] tangent_points=tangential_points(p_to_point,p_distance);  if (tangent_points.length < 2)   return null;  if (p_to_point.side_of(this,tangent_points[0]) == PlaSide.ON_THE_RIGHT)   return tangent_points[0]; else   return tangent_points[1];}  }
class C{  private boolean isAConnectionHandler(ObjectName name){  String Rdn2=name.getKeyProperty("Rdn2");  String Rdn3=name.getKeyProperty("Rdn3");  if ((Rdn3 == null) || (Rdn3.length() == 0)) {    if ((Rdn2.contains("Connection_Handler")) && (!(Rdn2.endsWith("_Statistics")))) {      return true;    }  }  return false;}  }
class C{  private Base64(){}  }
class C{  @DataProvider(name="testSafeReadOneRSComplexPrecommitProvider") private Object[][] testSafeReadOneRSComplexPrecommitProvider(){  return new Object[][]{{DEFAULT_GID,DEFAULT_GENID,REPLY_OK_DS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{DEFAULT_GID,DEFAULT_GENID,TIMEOUT_DS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{DEFAULT_GID,DEFAULT_GENID,REPLAY_ERROR_DS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{DEFAULT_GID,DEFAULT_GENID,REPLY_OK_DS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO},{DEFAULT_GID,DEFAULT_GENID,REPLY_OK_DS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,DS_TIMEOUT_RS_SCENARIO_SAFE_READ},{DEFAULT_GID,DEFAULT_GENID,REPLY_OK_DS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,DS_WRONG_STATUS_RS_SCENARIO_SAFE_READ},{DEFAULT_GID,DEFAULT_GENID,REPLY_OK_DS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,DS_REPLAY_ERROR_RS_SCENARIO_SAFE_READ},{OTHER_GID,DEFAULT_GENID,REPLY_OK_DS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{DEFAULT_GID,DEFAULT_GENID,REPLY_OK_DS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO}};}  }
class C{  private void reduce_trace_shapes_at_tie_pins(Collection<BrdItem> p_item_list,int p_own_net_no,AwtreeShapeSearch p_autoroute_tree){  for (  BrdItem curr_item : p_item_list) {    if (!(curr_item instanceof BrdAbitPin))     continue;    BrdAbitPin curr_tie_pin=(BrdAbitPin)curr_item;    if (curr_tie_pin.net_count() <= 1)     continue;    Collection<BrdItem> pin_contacts=curr_item.get_normal_contacts();    for (    BrdItem curr_contact : pin_contacts) {      if (!(curr_contact instanceof BrdTracep))       continue;      if (curr_contact.contains_net(p_own_net_no))       continue;      p_autoroute_tree.reduce_trace_shape_at_tie_pin(curr_tie_pin,(BrdTracep)curr_contact);    }  }}  }
class C{  public URI(String scheme,String userInfo,String host,int port,String path,String query,String fragment) throws URISyntaxException {  if (scheme == null && userInfo == null && host == null && path == null && query == null && fragment == null) {    this.path="";    return;  }  if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {    throw new URISyntaxException(path,"Relative path");  }  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (userInfo != null || host != null || port != -1) {    uri.append("//");  }  if (userInfo != null) {    USER_INFO_ENCODER.appendEncoded(uri,userInfo);    uri.append('@');  }  if (host != null) {    if (host.indexOf(':') != -1 && host.indexOf(']') == -1 && host.indexOf('[') == -1) {      host="[" + host + "]";    }    uri.append(host);  }  if (port != -1) {    uri.append(':');    uri.append(port);  }  if (path != null) {    PATH_ENCODER.appendEncoded(uri,path);  }  if (query != null) {    uri.append('?');    ALL_LEGAL_ENCODER.appendEncoded(uri,query);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),true);}  }
class C{  public void printTag(PrintWriter aWriter,int indent,Object bean,StoreDescription aDesc) throws Exception {  aWriter.print("<");  aWriter.print(aDesc.getTag());  if (aDesc.isAttributes() && bean != null)   printAttributes(aWriter,indent,bean,aDesc);  aWriter.println("/>");}  }
class C{  private static CopyOption[] convertMoveToCopyOptions(CopyOption... options) throws AtomicMoveNotSupportedException {  int len=options.length;  CopyOption[] newOptions=new CopyOption[len + 2];  for (int i=0; i < len; i++) {    CopyOption option=options[i];    if (option == StandardCopyOption.ATOMIC_MOVE) {      throw new AtomicMoveNotSupportedException(null,null,"Atomic move between providers is not supported");    }    newOptions[i]=option;  }  newOptions[len]=LinkOption.NOFOLLOW_LINKS;  newOptions[len + 1]=StandardCopyOption.COPY_ATTRIBUTES;  return newOptions;}  }
class C{  void updateLabelsForDeletedResourceSet(ResourceSetDescription resourceSet){  JsonValue labels=resourceSet.getDescription().get(OAuth2Constants.ResourceSets.LABELS);  if (!labels.isNull() && labels.size() > 0) {    updateLabels(resourceSet,Collections.<String>emptySet(),labels.asCollection(String.class));  }}  }
class C{  public void componentShown(ComponentEvent e){  ((ComponentListener)a).componentShown(e);  ((ComponentListener)b).componentShown(e);}  }
class C{  public static void main(String argv[]){  if (argv.length < 1 || argv.length > 2) {    System.err.println("Usage: BSDMD5Crypt password salt");    System.exit(1);  }  try {    if (argv.length == 2) {      System.out.println(BSDMD5Crypt.crypt(ByteString.valueOfUtf8(argv[0]),argv[1]));    } else {      System.out.println(BSDMD5Crypt.crypt(ByteString.valueOfUtf8(argv[0])));    }  } catch (  Exception e) {    System.err.println(e.getMessage());    System.exit(1);  }  System.exit(0);}  }
class C{  public static char[] toAsciiChars(byte[] raw){  if (raw == null || raw.length == 0) {    return EMPTY_CHAR_ARRAY;  }  char[] l_ascii=new char[raw.length << 3];  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if ((raw[ii] & BITS[bits]) == 0) {        l_ascii[jj - bits]='0';      } else {        l_ascii[jj - bits]='1';      }    }  }  return l_ascii;}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {  String str=str();  lh.comment(str.toCharArray(),0,str.length());}  }
class C{  public SessionTimeoutAttribute(int timeout){  super(OctetUtils.toOctets(AttributeType.SESSION_TIMEOUT,timeout));  this.timeout=timeout;}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,int bufSize){  Tailer tailer=new Tailer(file,listener,delayMillis,end,bufSize);  Thread thread=new Thread(tailer);  thread.setDaemon(true);  thread.start();  return tailer;}  }
class C{  @Override public void accept(int value){  ++count;  sum+=value;  min=Math.min(min,value);  max=Math.max(max,value);}  }
class C{  public static String fixValue(String value){  if (value != null && !value.equals("")) {    final String[] words=value.toLowerCase().split("_");    value="";    for (    final String word : words) {      if (word.length() > 1) {        value+=word.substring(0,1).toUpperCase() + word.substring(1) + " ";      } else {        value=word;      }    }  }  if (value.contains("\\n")) {    value=value.replace("\\n",System.getProperty("line.separator"));  }  return value;}  }
class C{  public DiskSpaceMonitor(){}  }
class C{  public void modifySite(String siteName,String primaryURL,Set failoverURLs) throws AMConsoleException {  try {    SSOToken ssoToken=getUserSSOToken();    String[] param={siteName};    logEvent("ATTEMPT_MODIFY_SITE",param);    SiteConfiguration.setSitePrimaryURL(ssoToken,siteName,primaryURL);    SiteConfiguration.setSiteSecondaryURLs(ssoToken,siteName,failoverURLs);    logEvent("SUCCEED_MODIFY_SITE",param);  } catch (  ConfigurationException e) {    String[] params={siteName,e.getMessage()};    logEvent("CONFIGURATION_EXCEPTION_MODIFY_SITE",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] params={siteName,e.getMessage()};    logEvent("SMS_EXCEPTION_MODIFY_SITE",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] params={siteName,e.getMessage()};    logEvent("SSO_EXCEPTION_MODIFY_SITE",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  private void shapeNonContextually(char[] text,int start,int count){  int base;  char minDigit='0';  if (shapingRange != null) {    base=shapingRange.getDigitBase();    minDigit+=shapingRange.getNumericBase();  } else {    base=bases[key];    if (key == ETHIOPIC_KEY) {      minDigit++;    }  }  for (int i=start, e=start + count; i < e; ++i) {    char c=text[i];    if (c >= minDigit && c <= '\u0039') {      text[i]=(char)(c + base);    }  }}  }
class C{  public byte[] encode(byte[] pArray){  return encodeBase64(pArray,false);}  }
class C{  @Override public synchronized void markAbandoned(){  state=PooledObjectState.ABANDONED;}  }
class C{  private boolean collide(int scale,boolean checkElements){  Shape intersection;  intersection=SVGPath.intersect(spriteBoundsArray[scale],SpriteHandler.getCurrentCast().get(0).getSpriteBoundsArray()[zone]);  if (intersection.getBoundsInParent().getWidth() != -1)   return true;  if (checkElements)   for (  StageBlock block : SpriteHandler.getStageElements()) {    intersection=SVGPath.intersect(super.getSpriteBoundsArray()[scale],block.getSpriteBounds());    if (intersection.getBoundsInParent().getWidth() != -1)     return true;  }  return false;}  }
class C{  public void skippedEntity(String name) throws SAXException {  if (contentHandler != null) {    contentHandler.skippedEntity(name);  }}  }
class C{  public IllegalAccessException(String s){  super(s);}  }
class C{  public XObject execute(XPathContext xctxt,int contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  xctxt.pushNamespaceContext(namespaceContext);  xctxt.pushCurrentNodeAndExpression(contextNode,contextNode);  XObject xobj=null;  try {    xobj=m_mainExp.execute(xctxt);  } catch (  TransformerException te) {    te.setLocator(this.getLocator());    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.error(te);    } else     throw te;  }catch (  Exception e) {    while (e instanceof org.apache.xml.utils.WrappedRuntimeException) {      e=((org.apache.xml.utils.WrappedRuntimeException)e).getException();    }    String msg=e.getMessage();    if (msg == null || msg.length() == 0) {      msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);    }    TransformerException te=new TransformerException(msg,getLocator(),e);    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.fatalError(te);    } else     throw te;  } finally {    xctxt.popNamespaceContext();    xctxt.popCurrentNodeAndExpression();  }  return xobj;}  }
class C{  public void testConstructorSignBytesNegative3(){  byte aBytes[]={-12,56,100};  int aSign=-1;  byte rBytes[]={-1,11,-57,-100};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  @Override public void write(String str) throws IOException {  out.write(str);}  }
class C{  public static Step fromCursor(Cursor cursor){  Step step=new Step();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeInstructionsTable.PHOTO_COLUMN)) {      step.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeInstructionsTable.DESCRIPTION_COLUMN)) {      step.setDescription(cursor.getString(c));    }  }  return step;}  }
class C{  public Object put(String key,Object value){  final int len=key.length();  if (len > m_charBuffer.length) {    m_charBuffer=new char[len];  }  Node node=m_Root;  for (int i=0; i < len; i++) {    Node nextNode=node.m_nextChar[Character.toLowerCase(key.charAt(i))];    if (nextNode != null) {      node=nextNode;    } else {      for (; i < len; i++) {        Node newNode=new Node();        if (m_lowerCaseOnly) {          node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode;        } else {          node.m_nextChar[Character.toUpperCase(key.charAt(i))]=newNode;          node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode;        }        node=newNode;      }      break;    }  }  Object ret=node.m_Value;  node.m_Value=value;  return ret;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,malformedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(action).toString();}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer xml=new StringBuffer();  if ((newID != null) && (newID.length() > 0)) {    String NS="";    String NSP="";    if (declareNS) {      NS=SAML2Constants.PROTOCOL_DECLARE_STR;    }    if (includeNSPrefix) {      NSP=SAML2Constants.PROTOCOL_PREFIX;    }    xml.append("<").append(NSP).append(elementName);    xml.append(NS).append(">");    xml.append(newID);    xml.append("</").append(NSP).append(elementName).append(">");  }  return xml.toString();}  }
class C{  public long longValue(){  return longValue;}  }
class C{  AttributeListAdapter(){}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",null);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  public static void siteAndServerInfo(SSOServerInfo svrInfo){  agentSvrInfo=svrInfo;}  }
class C{  public PropertyValueEditor(ConsoleApplication app,ManagementContext context){  this.app=app;  this.context=context;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.SecurityHeaderType createSecurityHeaderType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.SecurityHeaderTypeImpl();}  }
class C{  public boolean isExplicitPolicyRequired(){  return explicitPolicyRequired;}  }
class C{  public final long readLong() throws IOException {  readFully(scratch,0,SizeOf.LONG);  return Memory.peekLong(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  @Override public String toStringImpl(){  return username;}  }
class C{  public static void main(String[] args){  new SetupLauncher(args).launch();}  }
class C{  private void checkOffsetOrImageTag(ExifTag tag){  if (tag.getComponentCount() == 0) {    return;  }  short tid=tag.getTagId();  int ifd=tag.getIfd();  if (tid == TAG_EXIF_IFD && checkAllowed(ifd,ExifInterface.TAG_EXIF_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_EXIF) || isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_EXIF,tag.getValueAt(0));    }  } else   if (tid == TAG_GPS_IFD && checkAllowed(ifd,ExifInterface.TAG_GPS_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_GPS)) {      registerIfd(IfdId.TYPE_IFD_GPS,tag.getValueAt(0));    }  } else   if (tid == TAG_INTEROPERABILITY_IFD && checkAllowed(ifd,ExifInterface.TAG_INTEROPERABILITY_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_INTEROPERABILITY,tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT)) {    if (isThumbnailRequested()) {      registerCompressedImage(tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT_LENGTH && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT_LENGTH)) {    if (isThumbnailRequested()) {      mJpegSizeTag=tag;    }  } else   if (tid == TAG_STRIP_OFFSETS && checkAllowed(ifd,ExifInterface.TAG_STRIP_OFFSETS)) {    if (isThumbnailRequested()) {      if (tag.hasValue()) {        for (int i=0; i < tag.getComponentCount(); i++) {          if (tag.getDataType() == ExifTag.TYPE_UNSIGNED_SHORT) {            registerUncompressedStrip(i,tag.getValueAt(i));          } else {            registerUncompressedStrip(i,tag.getValueAt(i));          }        }      } else {        mCorrespondingEvent.put(tag.getOffset(),new ExifTagEvent(tag,false));      }    }  } else   if (tid == TAG_STRIP_BYTE_COUNTS && checkAllowed(ifd,ExifInterface.TAG_STRIP_BYTE_COUNTS) && isThumbnailRequested() && tag.hasValue()) {    mStripSizeTag=tag;  }}  }
class C{  private boolean unlockBackend(Backend<?> backend){  try {    String lockFile=LockFileManager.getBackendLockFileName(backend);    StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.releaseLock(lockFile,failureReason)) {      logger.warn(WARN_RESTOREDB_CANNOT_UNLOCK_BACKEND,backend.getBackendID(),failureReason);      return false;    }  } catch (  Exception e) {    logger.warn(WARN_RESTOREDB_CANNOT_UNLOCK_BACKEND,backend.getBackendID(),getExceptionMessage(e));    return false;  }  return true;}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  address.encode(retval);  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty()) {    retval=retval.append(SEMICOLON);    retval=this.parameters.encode(retval);  }  return retval;}  }
class C{  public StateInteractive left_button_clicked(PlaPointFloat p_location){  return this;}  }
class C{  public <C extends ConfigurationClient,S extends Configuration>R visitAggregation(AggregationPropertyDefinition<C,S> pd,P p){  return visitUnknown(pd,p);}  }
class C{  ResultIterable queryTarget() throws SynchronizationException {  ResultIterable result=getReconHandler().queryTarget();  setTargets(result);  return result;}  }
class C{  public String toXMLString(){  StringBuilder xmlsb=new StringBuilder(200);  xmlsb.append("<").append(PolicyNotification.POLICY_CHANGE).append(" ");  xmlsb.append(SERVICE_NAME).append("=\"").append(serviceName).append("\" ");  xmlsb.append(POLICY_CHANGE_TYPE).append("=\"").append(changeType).append("\">").append(CRLF);  if (resourceNames != null) {    for (Iterator iter=resourceNames.iterator(); iter.hasNext(); ) {      String resName=(String)iter.next();      xmlsb.append("<").append(RESOURCE_NAME).append(">");      xmlsb.append(XMLUtils.escapeSpecialCharacters(resName));      xmlsb.append("</").append(RESOURCE_NAME).append(">").append(CRLF);    }  }  xmlsb.append("</").append(PolicyNotification.POLICY_CHANGE).append(">").append(CRLF);  return xmlsb.toString();}  }
class C{  public void testSetDefaultSSLSocketFactory() throws Throwable {  SSLContext ctx=getContext();  SSLServerSocket ss=(SSLServerSocket)ctx.getServerSocketFactory().createServerSocket(0);  SSLSocketFactory socketFactory=(SSLSocketFactory)ctx.getSocketFactory();  HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);  assertSame("Default SSLSocketFactory differs from expected",socketFactory,HttpsURLConnection.getDefaultSSLSocketFactory());  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  TestHostnameVerifier hnv_late=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv_late);  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  assertTrue("Hostname verification was not done",hnv.verified);  assertFalse("Hostname verification should not be done by this verifier",hnv_late.verified);  assertSame("Default SSLSocketFactory should be used",HttpsURLConnection.getDefaultSSLSocketFactory(),connection.getSSLSocketFactory());  connection.connect();}  }
class C{  public static ComponentUI createUI(JComponent x){  if (x == null) {    throw new NullPointerException("Must pass in a non-null component");  }  return new MetalMenuBarUI();}  }
class C{  protected final ConfigurationRepository createConfigRepositoryWithEntries(final Entry... entries) throws Exception {  ConfigurationRepository configRepository=mock(ConfigurationRepository.class);  for (  Entry entry : entries) {    when(configRepository.getEntry(entry.getName())).thenReturn(entry);    when(configRepository.hasEntry(entry.getName())).thenReturn(true);  }  return configRepository;}  }
class C{  public OAuth2ErrorException(final String error,final String errorDescription,final Throwable cause){  this(newAuthorizationServerError(error,errorDescription),cause);}  }
class C{  public void installBundle(Path path) throws UpdateException {  try {    if (systemBundleContext.getBundles().length > 1) {      Files.copy(path,getBundlePath(systemBundleContext.getBundles()[1]).getParent().resolve(path.getFileName()),StandardCopyOption.REPLACE_EXISTING);      systemBundleContext.installBundle(path.toUri().toString());    } else {      throw new UpdateException("Unable to install bundle " + path.toUri().toString() + ", cannot resolve path to running installation");    }  } catch (  IOException|BundleException e) {    throw new UpdateException("Cannot install bundle " + path.toUri().toString(),e);  }}  }
class C{  public FrameBodyTDAT(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  static public PrintWriter log(Throwable xcpt,PrintWriter out){  out.println("-----------");  out.println(xcpt.toString());  out.println("Stack Trace:");  out.print(getStackTrace(xcpt));  out.println("-----------");  out.flush();  return out;}  }
class C{  public SimpleHttpClientResponse(Integer statusCode,String reasonPhrase,Map<String,String> headers,String messageBody,Map<String,String> cookies){  this.statusCode=statusCode;  this.reasonPhrase=reasonPhrase;  this.headers=headers;  this.messageBody=messageBody;  this.cookies=cookies;}  }
class C{  public void consume(){  consumed=true;}  }
class C{  public void removeNotify(){  super.removeNotify();  firePropertyChange("ancestor",getParent(),null);  unregisterWithKeyboardManager();  deregisterNextFocusableComponent();  if (getCreatedDoubleBuffer()) {    RepaintManager.currentManager(this).resetDoubleBuffer();    setCreatedDoubleBuffer(false);  }  if (autoscrolls) {    Autoscroller.stop(this);  }}  }
class C{  public static String wrapText(final String text,final int width){  return wrapText(text,width,0);}  }
class C{  @Override public void store(PrintWriter aWriter,int indent,Object aElement) throws Exception {  StoreDescription elementDesc=getRegistry().findDescription(aElement.getClass());  if (elementDesc != null) {    if (log.isDebugEnabled())     log.debug(sm.getString("factory.storeTag",elementDesc.getTag(),aElement));    getStoreAppender().printIndent(aWriter,indent + 2);    if (!elementDesc.isChildren()) {      getStoreAppender().printTag(aWriter,indent,aElement,elementDesc);    } else {      getStoreAppender().printOpenTag(aWriter,indent + 2,aElement,elementDesc);      storeChildren(aWriter,indent + 2,aElement,elementDesc);      getStoreAppender().printIndent(aWriter,indent + 2);      getStoreAppender().printCloseTag(aWriter,elementDesc);    }  } else   log.warn(sm.getString("factory.storeNoDescriptor",aElement.getClass()));}  }
class C{  public void writeDeleteRequest(final int messageID,final DeleteRequest request) throws IOException {  logger.trace("ENCODE LDAP DELETE REQUEST(messageID=%d, request=%s)",messageID,request);  writeMessageHeader(messageID);{    writer.writeOctetString(LDAP.OP_TYPE_DELETE_REQUEST,request.getName().toString());  }  writeMessageFooter(request.getControls());}  }
class C{  public InvalidPropertiesFormatException(String message){  super(message);}  }
class C{  public static boolean isOlderThan(String otherVersion){  return toLong(getVersion()) < toLong(otherVersion);}  }
class C{  public int doEndTag() throws JspException {  return SKIP_BODY;}  }
class C{  public static List<SearchResultEntry> findReferences(ClassNode node,MethodNode method){  List<SearchResultEntry> results=findChildren(node);  List<Reference> references=new ArrayList<Reference>();  for (  ClassNode cn : VisualizerWindow.instance.getNodes().values()) {    references.addAll(ReferenceUtils.getReferences(node,method,cn));  }  for (  Reference reference : references) {    results.add(new SearchResultEntry(reference.getNode(),reference.getMethod(),OpUtils.getIndex(reference.getAin())));  }  return results;}  }
class C{  public HeaderIterator iterator(final String name){  return new BasicListHeaderIterator(this.headers,name);}  }
class C{  public void updatePEPConfig(String realm,String entityName,String location,Map attrValues) throws AMConsoleException {  String[] params={realm,entityName,"SAMLv2","XACML PEP"};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",params);  String role=EntityModel.POLICY_ENFORCEMENT_POINT_DESCRIPTOR;  try {    SAML2MetaManager saml2Manager=getSAML2MetaManager();    EntityConfigElement entityConfig=saml2Manager.getEntityConfig(realm,entityName);    if (entityConfig == null) {      throw new AMConsoleException("invalid.xacml.configuration");    }    XACMLAuthzDecisionQueryConfigElement pepEntityConfig=saml2Manager.getPolicyEnforcementPointConfig(realm,entityName);    if (pepEntityConfig == null) {      throw new AMConsoleException("invalid.xacml.configuration");    } else {      updateBaseConfig(pepEntityConfig,attrValues,role);    }    saml2Manager.setEntityConfig(realm,entityConfig);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",params);  } catch (  SAML2MetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"SAMLv2","XACML PEP",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }catch (  JAXBException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"SAMLv2","XACML PEP",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public long tryConsume(){  do {    final long now=ticker.read();    final State currentState=state.get();    final State newState;    if (currentState == null || isExpired(now)) {      newState=new State(capacity - 1,now);    } else {      long timestampLastRefill=currentState.timestampLastRefill;      long counter=currentState.counter;      long newTokens=tokensThatCanBeAdded(now,currentState);      if (newTokens > 0) {        newTokens=Math.min(newTokens,capacity - currentState.counter);        counter+=newTokens;        timestampLastRefill=currentState.timestampLastRefill + newTokens * nanosToWaitForNextToken;      }      if (counter <= 0) {        long delayForNextRetry=(currentState.timestampLastRefill + this.nanosToWaitForNextToken) - now;        return Math.max(1,delayForNextRetry);      }      counter--;      newState=new State(counter,timestampLastRefill);    }    if (state.compareAndSet(currentState,newState)) {      return 0;    }  } while (true);}  }
class C{  public static boolean delete(File dir,boolean logFailure){  boolean result;  if (dir.isDirectory()) {    result=deleteDir(dir,logFailure);  } else {    if (dir.exists()) {      result=dir.delete();    } else {      result=true;    }  }  if (logFailure && !result) {    log.error(sm.getString("expandWar.deleteFailed",dir.getAbsolutePath()));  }  return result;}  }
class C{  public void restoreState(int index,PdfCanvas cb){  int pops;  if (index < 0)   pops=Math.min(-index,savedStates.size()); else   pops=Math.max(savedStates.size() - index,0);  if (pops == 0)   return;  MetaState state=null;  while (pops-- != 0) {    cb.restoreState();    state=savedStates.pop();  }  setMetaState(state);}  }
class C{  public ShapeTileSimplex to_simplex(){  ArrayList<PlaLineInt> line_arr=new ArrayList<PlaLineInt>(4);  if (end_point().side_of(start) == PlaSide.ON_THE_RIGHT)   line_arr.add(start.opposite()); else   line_arr.add(start);  line_arr.add(middle);  line_arr.add(middle.opposite());  if (start_point().side_of(end) == PlaSide.ON_THE_RIGHT)   line_arr.add(end.opposite()); else   line_arr.add(end);  return new ShapeTileSimplex(line_arr);}  }
class C{  private ThreadLocalMap(ThreadLocalMap parentMap){  Entry[] parentTable=parentMap.table;  int len=parentTable.length;  setThreshold(len);  table=new Entry[len];  for (int j=0; j < len; j++) {    Entry e=parentTable[j];    if (e != null) {      @SuppressWarnings("unchecked") ThreadLocal<Object> key=(ThreadLocal<Object>)e.get();      if (key != null) {        Object value=key.childValue(e.value);        Entry c=new Entry(key,value);        int h=key.threadLocalHashCode & (len - 1);        while (table[h] != null)         h=nextIndex(h,len);        table[h]=c;        size++;      }    }  }}  }
class C{  private static void rdf_ParseTypeOtherPropertyElement() throws XMPException {  throw new XMPException("ParseTypeOther property element not allowed",BADXMP);}  }
class C{  public ClientDetectionException(String msg){  super(msg);  fillInStackTrace();}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    ComponentOrientation last=target.getComponentOrientation();    ComponentOrientation next;    if (last == ComponentOrientation.RIGHT_TO_LEFT)     next=ComponentOrientation.LEFT_TO_RIGHT; else     next=ComponentOrientation.RIGHT_TO_LEFT;    target.setComponentOrientation(next);    target.repaint();  }}  }
class C{  private static void extractFileFromZip(ZipInputStream zipInput,File targetFile) throws IOException {  try (BufferedOutputStream outputStream=new BufferedOutputStream(new FileOutputStream(targetFile))){    int bytesRead=0;    byte[] bytes=new byte[BUFFER_SIZE];    while ((bytesRead=zipInput.read(bytes)) != -1) {      outputStream.write(bytes,0,bytesRead);    }  } }  }
class C{  private JSONArray readArray() throws JSONException {  JSONArray result=new JSONArray();  boolean hasTrailingSeparator=false;  while (true) {switch (nextCleanInternal()) {case -1:      throw syntaxError("Unterminated array");case ']':    if (hasTrailingSeparator) {      result.put(null);    }  return result;case ',':case ';':result.put(null);hasTrailingSeparator=true;continue;default :pos--;}result.put(nextValue());switch (nextCleanInternal()) {case ']':return result;case ',':case ';':hasTrailingSeparator=true;continue;default :throw syntaxError("Unterminated array");}}}  }
class C{  public int executeUpdateDelete(){  acquireReference();  try {    return getSession().executeForChangedRowCount(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public RSeqParser(String rseq){  super(rseq);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int p0=getStartOffset();  int p1=getEndOffset();  if ((pos >= p0) && (pos <= p1)) {    Rectangle r=a.getBounds();    if (pos == p1) {      r.x+=r.width;    }    r.width=0;    return r;  }  return null;}  }
class C{  public static void sleep(int ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException ie) {    System.err.println("sleep was interrupted");  }}  }
class C{  protected boolean verifyResponseSignature(SOAPMessage msg,boolean isIDP){  FSUtils.debug.message("Entered FSNameRegistrationHandler::verifyResponseSignature");  try {    X509Certificate cert=KeyUtil.getVerificationCert(remoteDescriptor,remoteEntityId,isIDP);    if (cert == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Registration.verifyResponseSignature" + "couldn't obtain this site's cert .");      }      throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT));    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("NameRegistration.verifyResponseSignature" + ": Provider's cert is found.");    }    XMLSignatureManager manager=XMLSignatureManager.getInstance();    Document doc=(Document)FSServiceUtils.createSOAPDOM(msg);    return manager.verifyXMLSignature(doc,cert);  } catch (  SAMLException e) {    FSUtils.debug.error("Error in verifying response ",e);    return false;  }}  }
class C{  public E remove(int index){  rangeCheck(index);  modCount++;  E oldValue=elementData(index);  int numMoved=size - index - 1;  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);  elementData[--size]=null;  return oldValue;}  }
class C{  static ReplicationServerInfo newInstance(ReplicationMsg msg) throws IllegalArgumentException {  if (msg instanceof ReplServerStartMsg) {    return new ReplicationServerInfo((ReplServerStartMsg)msg);  } else   if (msg instanceof ReplServerStartDSMsg) {    return new ReplicationServerInfo((ReplServerStartDSMsg)msg);  }  throw new IllegalArgumentException("Unexpected PDU type: " + msg.getClass().getName() + ":\n"+ msg);}  }
class C{  public void testConstructor_StringIInetAddressI() throws Exception {  int sport=startServer("Cons String,I,InetAddress,I");  int[] invalidPort={-1,Integer.MIN_VALUE,65536,Integer.MAX_VALUE};  SSLSocket ssl=getSSLSocket(InetAddress.getLocalHost().getHostName(),sport,InetAddress.getLocalHost(),0);  assertNotNull(ssl);  assertEquals(sport,ssl.getPort());  try {    getSSLSocket(InetAddress.getLocalHost().getHostName(),8081,InetAddress.getLocalHost(),8082);    fail();  } catch (  IOException expected) {  }  for (int i=0; i < invalidPort.length; i++) {    try {      getSSLSocket(InetAddress.getLocalHost().getHostName(),invalidPort[i],InetAddress.getLocalHost(),0);      fail();    } catch (    IllegalArgumentException expected) {    }    try {      getSSLSocket(InetAddress.getLocalHost().getHostName(),sport,InetAddress.getLocalHost(),invalidPort[i]);      fail();    } catch (    IllegalArgumentException expected) {    }  }  try {    getSSLSocket("bla-bla",sport,InetAddress.getLocalHost(),0);    fail();  } catch (  UnknownHostException expected) {  }}  }
class C{  @Deprecated public static void track(File file,Object marker,FileDeleteStrategy deleteStrategy){  theInstance.track(file,marker,deleteStrategy);}  }
class C{  public boolean containsAttributes(AttributeSet attrs){  boolean result=true;  Enumeration names=attrs.getAttributeNames();  while (result && names.hasMoreElements()) {    Object name=names.nextElement();    result=attrs.getAttribute(name).equals(getAttribute(name));  }  return result;}  }
class C{  protected void CreateNewStringIndex(int Font){  String fdFontName=fonts[Font].name + "-OneRange";  if (fdFontName.length() > 127)   fdFontName=fdFontName.substring(0,127);  String extraStrings="Adobe" + "Identity" + fdFontName;  int origStringsLen=stringOffsets[stringOffsets.length - 1] - stringOffsets[0];  int stringsBaseOffset=stringOffsets[0] - 1;  byte stringsIndexOffSize;  if (origStringsLen + extraStrings.length() <= 0xff)   stringsIndexOffSize=1; else   if (origStringsLen + extraStrings.length() <= 0xffff)   stringsIndexOffSize=2; else   if (origStringsLen + extraStrings.length() <= 0xffffff)   stringsIndexOffSize=3; else   stringsIndexOffSize=4;  OutputList.addLast(new UInt16Item((char)(stringOffsets.length - 1 + 3)));  OutputList.addLast(new UInt8Item((char)stringsIndexOffSize));  for (  int stringOffset : stringOffsets)   OutputList.addLast(new IndexOffsetItem(stringsIndexOffSize,stringOffset - stringsBaseOffset));  int currentStringsOffset=stringOffsets[stringOffsets.length - 1] - stringsBaseOffset;  currentStringsOffset+="Adobe".length();  OutputList.addLast(new IndexOffsetItem(stringsIndexOffSize,currentStringsOffset));  currentStringsOffset+="Identity".length();  OutputList.addLast(new IndexOffsetItem(stringsIndexOffSize,currentStringsOffset));  currentStringsOffset+=fdFontName.length();  OutputList.addLast(new IndexOffsetItem(stringsIndexOffSize,currentStringsOffset));  OutputList.addLast(new RangeItem(buf,stringOffsets[0],origStringsLen));  OutputList.addLast(new StringItem(extraStrings));}  }
class C{  final Vector processQNAMESRNU(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nQNames=tokenizer.countTokens();  Vector qnames=new Vector(nQNames);  String defaultURI=handler.getNamespaceForPrefix("");  for (int i=0; i < nQNames; i++) {    String tok=tokenizer.nextToken();    if (tok.indexOf(':') == -1) {      qnames.addElement(new QName(defaultURI,tok));    } else {      qnames.addElement(new QName(tok,handler));    }  }  return qnames;}  }
class C{  public SuffixFileFilter(String[] suffixes){  this(suffixes,IOCase.SENSITIVE);}  }
class C{  public Set createRoles(Set roleNames) throws AMException, SSOException {  Iterator iter=roleNames.iterator();  Set roles=new HashSet();  while (iter.hasNext()) {    StringBuilder roleDNSB=new StringBuilder();    roleDNSB.append(AMNamingAttrManager.getNamingAttr(ROLE)).append("=").append((String)iter.next()).append(",").append(super.entryDN);    AMRoleImpl roleImpl=new AMRoleImpl(super.token,roleDNSB.toString());    roleImpl.create();    roles.add(roleImpl);  }  return roles;}  }
class C{  public static void unexportObject(Remote obj) throws NoSuchObjectException {  if (proDelegate != null) {    proDelegate.unexportObject(obj);  }}  }
class C{  protected DsnKeyword(String p_name){  name=p_name;}  }
class C{  public static final byte[] longToUint64Bytes(long l){  byte[] result=new byte[8];  result[0]=(byte)(l >>> 56);  result[1]=(byte)(l >>> 48);  result[2]=(byte)(l >>> 40);  result[3]=(byte)(l >>> 32);  result[4]=(byte)(l >>> 24);  result[5]=(byte)(l >>> 16);  result[6]=(byte)(l >>> 8);  result[7]=(byte)(l);  return result;}  }
class C{  protected void drawMultiLineTextAppearance(Rectangle rect,PdfFont font,float fontSize,String value,PdfFormXObject appearance){  PdfStream stream=new PdfStream().makeIndirect(getDocument());  PdfResources resources=appearance.getResources();  PdfCanvas canvas=new PdfCanvas(stream,resources,getDocument());  setDefaultAppearance(generateDefaultAppearanceString(font,fontSize,color,resources));  float width=rect.getWidth();  float height=rect.getHeight();  List<String> strings=font.splitString(value,fontSize,width - 6);  drawBorder(canvas,appearance,width,height);  canvas.beginVariableText().saveState().rectangle(3,3,width - 6,height - 6).clip().newPath();  Canvas modelCanvas=new Canvas(canvas,getDocument(),new Rectangle(3,0,Math.max(0,width - 6),Math.max(0,height - 2)));  modelCanvas.setProperty(Property.APPEARANCE_STREAM_LAYOUT,true);  for (int index=0; index < strings.size(); index++) {    Boolean isFull=modelCanvas.getRenderer().getPropertyAsBoolean(Property.FULL);    if (Boolean.TRUE.equals(isFull)) {      break;    }    Paragraph paragraph=new Paragraph(strings.get(index)).setFont(font).setFontSize(fontSize).setMargins(0,0,0,0).setMultipliedLeading(1);    paragraph.setProperty(Property.FORCED_PLACEMENT,true);    if (color != null) {      paragraph.setFontColor(color);    }    PdfArray indices=getPdfObject().getAsArray(PdfName.I);    if (indices != null && indices.size() > 0) {      for (      PdfObject ind : indices) {        if (!ind.isNumber())         continue;        if (((PdfNumber)ind).getValue() == index) {          paragraph.setBackgroundColor(new DeviceRgb(10,36,106));          paragraph.setFontColor(Color.LIGHT_GRAY);        }      }    }    modelCanvas.add(paragraph);  }  canvas.restoreState().endVariableText();  appearance.getPdfObject().setData(stream.getBytes());}  }
class C{  public static void addSubConfiguration(String serviceName,String svcConfigName,String subConfigName,String subConfigID,Map attrValues,int priority) throws UpgradeException {  String classMethod="UpgradeUtils:addSubConfiguration";  try {    ServiceConfigManager scm=new ServiceConfigManager(serviceName,ssoToken);    ServiceConfig sc=scm.getGlobalConfig(null);    if (sc != null) {      sc.addSubConfig(subConfigName,subConfigID,priority,attrValues);    } else {      debug.error(classMethod + "Error adding sub cofiguration " + subConfigName);      throw new UpgradeException("Error adding subconfig");    }  } catch (  SSOException ssoe) {    throw new UpgradeException("invalid sso token");  }catch (  SMSException sm) {    debug.error(classMethod + "Error loading subconfig",sm);    throw new UpgradeException("error adding subconfig");  }}  }
class C{  public void run(){  m_hasBeenReset=false;  try {    try {      transformNode(m_doc);    } catch (    Exception e) {      if (null != m_transformThread)       postExceptionFromThread(e); else       throw new RuntimeException(e.getMessage());    } finally {      if (m_inputContentHandler instanceof TransformerHandlerImpl) {        ((TransformerHandlerImpl)m_inputContentHandler).clearCoRoutine();      }    }  } catch (  Exception e) {    if (null != m_transformThread)     postExceptionFromThread(e); else     throw new RuntimeException(e.getMessage());  }}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  private static String translateOSNameToFolderName(String osName){  if (osName.contains("Windows")) {    return "Windows";  } else   if (osName.contains("Mac")) {    return "Mac";  } else   if (osName.contains("Linux")) {    return "Linux";  } else   if (osName.contains("AIX")) {    return "AIX";  } else {    return osName.replaceAll("\\W","");  }}  }
class C{  public QRCallbackBuilder withUriPath(String path){  this.path=path;  return this;}  }
class C{  public ReplicationServer(ReplicationServerCfg cfg,DSRSShutdownSync dsrsShutdownSync) throws ConfigException {  this(cfg,dsrsShutdownSync,new ECLEnabledDomainPredicate());}  }
class C{  public void clearCachedState(){  _autoCommitCached=null;  _readOnlyCached=null;  if (_conn instanceof DelegatingConnection) {    ((DelegatingConnection<?>)_conn).clearCachedState();  }}  }
class C{  private int insertIndexForLayer(Component comp,int layer,int position){  int i, count, curLayer;  int layerStart=-1;  int layerEnd=-1;  int componentCount=getComponentCount();  ArrayList<Component> compList=new ArrayList<Component>(componentCount);  for (int index=0; index < componentCount; index++) {    if (getComponent(index) != comp) {      compList.add(getComponent(index));    }  }  count=compList.size();  for (i=0; i < count; i++) {    curLayer=getLayer(compList.get(i));    if (layerStart == -1 && curLayer == layer) {      layerStart=i;    }    if (curLayer < layer) {      if (i == 0) {        layerStart=0;        layerEnd=0;      } else {        layerEnd=i;      }      break;    }  }  if (layerStart == -1 && layerEnd == -1)   return count;  if (layerStart != -1 && layerEnd == -1)   layerEnd=count;  if (layerEnd != -1 && layerStart == -1)   layerStart=layerEnd;  if (position == -1)   return layerEnd;  if (position > -1 && layerStart + position <= layerEnd)   return layerStart + position;  return layerEnd;}  }
class C{  public void removeTargetAttributes(){  _targetAttributes=null;}  }
class C{  public ProxyAuthenticateHeader createProxyAuthenticateHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("bad scheme arg");  ProxyAuthenticate p=new ProxyAuthenticate();  p.setScheme(scheme);  return p;}  }
class C{  private ReplServerStartMsg sendStartToRemote() throws IOException {  ReplServerStartMsg outReplServerStartMsg=createReplServerStartMsg();  send(outReplServerStartMsg);  return outReplServerStartMsg;}  }
class C{  public void delete(AbstractTag mp3tag) throws FileNotFoundException, IOException {  RandomAccessFile raf=new RandomAccessFile(this.file,"rw");  mp3tag.delete(raf);  raf.close();  if (mp3tag instanceof ID3v1Tag) {    id3v1tag=null;  }  if (mp3tag instanceof AbstractID3v2Tag) {    id3v2tag=null;  }}  }
class C{  public static int countByField2(boolean field2){  return getPersistence().countByField2(field2);}  }
class C{  public RxGalleryFinal cropFreeStyleCropEnabled(boolean enabled){  configuration.setFreestyleCropEnabled(enabled);  return this;}  }
class C{  public boolean removeAll(Collection<?> c){  boolean modified=false;  for (  Object e : c)   if (remove(e))   modified=true;  return modified;}  }
class C{  public JobStateReasons(int initialCapacity){  super(initialCapacity);}  }
class C{  @Override public int hashCode(){switch (filterType) {case AND:case OR:    int hashCode=0;  for (  SearchFilter filterComp : filterComponents) {    hashCode+=filterComp.hashCode();  }return hashCode;case NOT:return notComponent.hashCode();case EQUALITY:return typeAndAssertionHashCode();case SUBSTRING:return substringHashCode();case GREATER_OR_EQUAL:return typeAndAssertionHashCode();case LESS_OR_EQUAL:return typeAndAssertionHashCode();case PRESENT:return getAttributeType().hashCode();case APPROXIMATE_MATCH:return typeAndAssertionHashCode();case EXTENSIBLE_MATCH:return extensibleHashCode();default :return 1;}}  }
class C{  public java.lang.String toString(String ns){  StringBuffer sb=new StringBuffer(1000);  sb.append("<EncryptedResourceID xmlns=\"").append(ns).append("\">");  if (data != null) {    sb.append(XMLUtils.print(data));  }  if (key != null) {    sb.append(XMLUtils.print(key));  }  sb.append("</EncryptedResourceID>");  return sb.toString();}  }
class C{  public boolean hasSameRules(TimeZone other){  if (this == other) {    return true;  }  if (!(other instanceof SimpleTimeZone)) {    return false;  }  SimpleTimeZone that=(SimpleTimeZone)other;  return rawOffset == that.rawOffset && useDaylight == that.useDaylight && (!useDaylight || (dstSavings == that.dstSavings && startMode == that.startMode && startMonth == that.startMonth && startDay == that.startDay && startDayOfWeek == that.startDayOfWeek && startTime == that.startTime && startTimeMode == that.startTimeMode && endMode == that.endMode && endMonth == that.endMonth && endDay == that.endDay && endDayOfWeek == that.endDayOfWeek && endTime == that.endTime && endTimeMode == that.endTimeMode && startYear == that.startYear));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue02.class,args);}  }
class C{  public void ancestorMoved(HierarchyEvent e){}  }
class C{  public void update(Graphics g){  g.clearRect(0,0,width,height);  paint(g);}  }
class C{  public boolean isCompatibleSampleModel(SampleModel sm){  if (!(sm instanceof SinglePixelPackedSampleModel)) {    return false;  }  if (numComponents != sm.getNumBands()) {    return false;  }  if (sm.getTransferType() != transferType) {    return false;  }  SinglePixelPackedSampleModel sppsm=(SinglePixelPackedSampleModel)sm;  int[] bitMasks=sppsm.getBitMasks();  if (bitMasks.length != maskArray.length) {    return false;  }  int maxMask=(int)((1L << DataBuffer.getDataTypeSize(transferType)) - 1);  for (int i=0; i < bitMasks.length; i++) {    if ((maxMask & bitMasks[i]) != (maxMask & maskArray[i])) {      return false;    }  }  return true;}  }
class C{  public void handleTblButtonAddRequest(RequestInvocationEvent event){  RMRealmAddViewBean vb=(RMRealmAddViewBean)getViewBean(RMRealmAddViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public boolean isPending(){  return data.get(ATTR_PENDING).asBoolean();}  }
class C{  public boolean isLoggingEnabled(int logLevel){  return this.needsLogging && logLevel <= traceLevel;}  }
class C{  @Override public int available() throws IOException {  if (pos == -1) {    return tail - head - pad;  }  return pos - head;}  }
class C{  @Override public void destroyObject(final PooledObject<PooledConnectionAndInfo> p) throws Exception {  doDestroyObject(p.getObject());}  }
class C{  static <T>T newInstance(Class<T> type,String className,ClassLoader cl,boolean doFallback,boolean useBSClsLoader) throws FactoryConfigurationError {  assert type != null;  if (System.getSecurityManager() != null) {    if (className != null && className.startsWith(DEFAULT_PACKAGE)) {      cl=null;      useBSClsLoader=true;    }  }  try {    Class<?> providerClass=getProviderClass(className,cl,doFallback,useBSClsLoader);    if (!type.isAssignableFrom(providerClass)) {      throw new ClassCastException(className + " cannot be cast to " + type.getName());    }    Object instance=providerClass.newInstance();    if (debug) {      dPrint("created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return type.cast(instance);  } catch (  ClassNotFoundException x) {    throw new FactoryConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new FactoryConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public static boolean isFileOlder(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() < timeMillis;}  }
class C{  @SuppressWarnings("deprecation") private static void modifyGmailAndTwitterParam(SQLiteDatabase db){  DataTypeDbAdapter dataTypeDbAdapter=new DataTypeDbAdapter(db);  long dataTypeIdAccount=dataTypeDbAdapter.insert(OmniUserAccount.DB_NAME,OmniUserAccount.class.getName());  modifyActionToSupportUserAccount(db,DbHelper.AppName.EMAIL,SendGmailAction.ACTION_NAME,SendGmailAction.PARAM_USERNAME,SendGmailAction.PARAM_PASSWORD,SendGmailAction.PARAM_USER_ACCOUNT,dataTypeIdAccount);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node entRef;  Node entElement;  Node entElementText;  Text splitNode;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=gender.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementText=entElement.getFirstChild();  assertNotNull("entElementTextNotNull",entElementText);{    boolean success=false;    try {      splitNode=((Text)entElementText).splitText(2);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public void destroy(){  config=null;}  }
class C{  public FileReader(File file) throws FileNotFoundException {  super(new FileInputStream(file));}  }
class C{  public boolean isActive(){  return active;}  }
class C{  @Override public void lifecycleEvent(LifecycleEvent event){  container=event.getLifecycle();  if (container instanceof Context) {    namingResources=((Context)container).getNamingResources();    token=((Context)container).getNamingToken();  } else   if (container instanceof Server) {    namingResources=((Server)container).getGlobalNamingResources();    token=((Server)container).getNamingToken();  } else {    return;  }  if (Lifecycle.CONFIGURE_START_EVENT.equals(event.getType())) {    if (initialized)     return;    try {      Hashtable<String,Object> contextEnv=new Hashtable<>();      namingContext=new NamingContext(contextEnv,getName());      ContextAccessController.setSecurityToken(getName(),token);      ContextAccessController.setSecurityToken(container,token);      ContextBindings.bindContext(container,namingContext,token);      if (log.isDebugEnabled()) {        log.debug("Bound " + container);      }      namingContext.setExceptionOnFailedWrite(getExceptionOnFailedWrite());      ContextAccessController.setWritable(getName(),token);      try {        createNamingContext();      } catch (      NamingException e) {        log.error(sm.getString("naming.namingContextCreationFailed",e));      }      namingResources.addPropertyChangeListener(this);      if (container instanceof Context) {        ContextAccessController.setReadOnly(getName());        try {          ContextBindings.bindClassLoader(container,token,((Context)container).getLoader().getClassLoader());        } catch (        NamingException e) {          log.error(sm.getString("naming.bindFailed",e));        }      }      if (container instanceof Server) {        org.apache.naming.factory.ResourceLinkFactory.setGlobalContext(namingContext);        try {          ContextBindings.bindClassLoader(container,token,this.getClass().getClassLoader());        } catch (        NamingException e) {          log.error(sm.getString("naming.bindFailed",e));        }        if (container instanceof StandardServer) {          ((StandardServer)container).setGlobalNamingContext(namingContext);        }      }    }  finally {      initialized=true;    }  } else   if (Lifecycle.CONFIGURE_STOP_EVENT.equals(event.getType())) {    if (!initialized)     return;    try {      ContextAccessController.setWritable(getName(),token);      ContextBindings.unbindContext(container,token);      if (container instanceof Context) {        ContextBindings.unbindClassLoader(container,token,((Context)container).getLoader().getClassLoader());      }      if (container instanceof Server) {        namingResources.removePropertyChangeListener(this);        ContextBindings.unbindClassLoader(container,token,this.getClass().getClassLoader());      }      ContextAccessController.unsetSecurityToken(getName(),token);      ContextAccessController.unsetSecurityToken(container,token);      if (!objectNames.isEmpty()) {        Collection<ObjectName> names=objectNames.values();        Registry registry=Registry.getRegistry(null,null);        for (        ObjectName objectName : names) {          registry.unregisterComponent(objectName);        }      }      javax.naming.Context global=getGlobalNamingContext();      if (global != null) {        ResourceLinkFactory.deregisterGlobalResourceAccess(global);      }    }  finally {      objectNames.clear();      namingContext=null;      envCtx=null;      compCtx=null;      initialized=false;    }  }}  }
class C{  public static LocPathIterator createUnionIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {  UnionPathIterator upi=new UnionPathIterator(compiler,opPos);  int nPaths=upi.m_exprs.length;  boolean isAllChildIterators=true;  for (int i=0; i < nPaths; i++) {    LocPathIterator lpi=upi.m_exprs[i];    if (lpi.getAxis() != Axis.CHILD) {      isAllChildIterators=false;      break;    } else {      if (HasPositionalPredChecker.check(lpi)) {        isAllChildIterators=false;        break;      }    }  }  if (isAllChildIterators) {    UnionChildIterator uci=new UnionChildIterator();    for (int i=0; i < nPaths; i++) {      PredicatedNodeTest lpi=upi.m_exprs[i];      uci.addNodeTest(lpi);    }    return uci;  } else   return upi;}  }
class C{  private boolean insert_door_ok_test(ExpandRoomObstacle p_room,PlaLineInt p_door_line){  if (p_door_line == null) {    System.err.println("SortedRoomNeighbours.insert_door_ok_test: p_door_line is null");    return false;  }  BrdItem curr_item=p_room.get_item();  if (!(curr_item instanceof BrdTracep))   return true;  int room_index=p_room.get_index_in_item();  BrdTracep curr_trace=(BrdTracep)curr_item;  if (room_index != 0 && room_index != curr_trace.tile_shape_count() - 1)   return true;  PlaLineInt curr_trace_line=curr_trace.polyline().plaline(room_index + 1);  return curr_trace_line.is_parallel(p_door_line);}  }
class C{  protected synchronized void releaseBeanContextResources(){  Object[] bcssc;  super.releaseBeanContextResources();synchronized (children) {    if (children.isEmpty())     return;    bcssc=children.values().toArray();  }  for (int i=0; i < bcssc.length; i++) {    ((BCSSChild)bcssc[i]).revokeAllDelegatedServicesNow();  }  proxy=null;}  }
class C{  private void validateEntry(SSOToken token,CacheBlock cb) throws AMException {  if (!cb.hasExpiredAndUpdated() && !cb.isExists()) {    String dn=cb.getEntryDN();    boolean isPresent=super.doesEntryExists(token,dn);    if (debug.messageEnabled()) {      debug.message("CachedDirectoryServicesImpl.validateEntry():" + " DN " + dn + " got from DS & exists: "+ isPresent);    }    if (isPresent) {      String rfcDN=LDAPUtils.formatToRFC(dn);      cb=new CacheBlock(rfcDN,isPresent);      sdkCache.put(rfcDN,cb);    } else {      String locale=CommonUtils.getUserLocale(token);      Object args[]={dn};      throw new AMException(AMSDKBundle.getString("461",args,locale),"461",args);    }  }}  }
class C{  public MediaDescription createMediaDescription(String media,int port,int numPorts,String transport,int[] staticRtpAvpTypes) throws IllegalArgumentException, SdpException {  MediaDescriptionImpl mediaDescriptionImpl=new MediaDescriptionImpl();  MediaField mediaImpl=new MediaField();  mediaImpl.setMediaType(media);  mediaImpl.setMediaPort(port);  mediaImpl.setPortCount(numPorts);  mediaImpl.setProtocol(transport);  mediaDescriptionImpl.setMedia(mediaImpl);  Vector payload=new Vector();  for (int i=0; i < staticRtpAvpTypes.length; i++)   payload.add(new Integer(staticRtpAvpTypes[i]).toString());  mediaImpl.setMediaFormats(payload);  return mediaDescriptionImpl;}  }
class C{  private String[] processName(String qName,boolean isAttribute,boolean useException) throws SAXException {  String parts[]=nsSupport.processName(qName,nameParts,isAttribute);  if (parts == null) {    if (useException)     throw makeException("Undeclared prefix: " + qName);    reportError("Undeclared prefix: " + qName);    parts=new String[3];    parts[0]=parts[1]="";    parts[2]=qName.intern();  }  return parts;}  }
class C{  @Override public Object invoke(ELContext context,Object base,Object method,Class<?>[] paramTypes,Object[] params){  if (base instanceof LazyMap && ((LazyMap)base).containsKey(method)) {    context.setPropertyResolved(true);    FunctionClosure function=(FunctionClosure)((LazyMap)base).get(method);    return function.doCall(params);  }  return null;}  }
class C{  public Block next(){  scan();  if (currentBlock <= -1) {    throw new NoSuchElementException();  } else {    return blockQueue[currentBlock--];  }}  }
class C{  protected void Literal() throws javax.xml.transform.TransformerException {  int last=m_token.length() - 1;  char c0=m_tokenChar;  char cX=m_token.charAt(last);  if (((c0 == '\"') && (cX == '\"')) || ((c0 == '\'') && (cX == '\''))) {    int tokenQueuePos=m_queueMark - 1;    m_ops.m_tokenQueue.setElementAt(null,tokenQueuePos);    Object obj=new XString(m_token.substring(1,last));    m_ops.m_tokenQueue.setElementAt(obj,tokenQueuePos);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),tokenQueuePos);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();  } else {    error(XPATHErrorResources.ER_PATTERN_LITERAL_NEEDS_BE_QUOTED,new Object[]{m_token});  }}  }
class C{  void add(ByteString addedValue,AttributeType attrType,CSN csn){  update(csn,new AttrValueHistorical(addedValue,attrType,csn,null));}  }
class C{  public void logout() throws SessionException {  try {    SessionOperations operation=sessionOperationStrategy.getOperation(this.getID());    operation.logout(this);    sessionCache.removeSID(sessionID);  } catch (  Exception e) {    throw new SessionException(e);  }}  }
class C{  public static boolean containsMissingMessage(TlsContext tlsContext){  return (getMissingMessagePosition(tlsContext) != -1);}  }
class C{  public CompareResponseProtocolOp(int resultCode){  this.resultCode=resultCode;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  String attrName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  attrName=domesticAttr.getNodeName();  assertEquals("namednodemapGetNamedItemAssert","domestic",attrName);}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name","entity-creation-attributes"}) @Test(groups={"api"}) public void verifyExistence(String parentRealm,String idType,String entityName,String createAttributes) throws Exception {  Object[] params={parentRealm,idType,entityName,createAttributes};  entering("verifyExistence",params);  try {    Map values=CollectionUtils.parseStringToMap(createAttributes);    IdType type=IdUtils.getType(idType);    AMIdentity a=createIdentity(parentRealm,type,entityName + "exist",values);    assert a.isExists();    AMIdentityRepository repo=new AMIdentityRepository(getAdminSSOToken(),parentRealm);    IdSearchResults results=repo.searchIdentities(type,entityName + "exist",new IdSearchControl());    Set resultSets=results.getSearchResults();    assert resultSets.size() == 1;    deleteIdentity(parentRealm,type,entityName + "exist");    resultSets=repo.searchIdentities(type,entityName + "exist",new IdSearchControl()).getSearchResults();    assert resultSets.isEmpty();  } catch (  Exception e) {    log(Level.SEVERE,"verifyExistence",e.getMessage(),params);    e.printStackTrace();    throw e;  } finally {    exiting("verifyExistence");  }}  }
class C{  public boolean canShutdown(DN baseDN){  return !replicaOfflineMsgs.contains(baseDN) || System.currentTimeMillis() - stopInstanceTimestamp.get() > 5000;}  }
class C{  public boolean isLazy(){  return mLazy;}  }
class C{  public void testUnsupportedCallbackException03(){  UnsupportedCallbackException ucE=new UnsupportedCallbackException(null,null);  assertNull("getMessage() must return null.",ucE.getMessage());  assertNull("getCallback() must return null.",ucE.getCallback());}  }
class C{  public static Class<?>[] toClassesFromObjects(final Object[] params){  final Class<?>[] classes=new Class<?>[params.length];  int i=0;  for (  final Object object : params) {    if (object != null) {      classes[i++]=object.getClass();    } else {      classes[i++]=Object.class;    }  }  return classes;}  }
class C{  private String methodDesc(STypeDef returnType,List<STypeDef> parameters){  StringBuilder desc=new StringBuilder();  desc.append("(");  for (  STypeDef t : parameters) {    desc.append(typeToDesc(t));  }  desc.append(")").append(typeToDesc(returnType));  return desc.toString();}  }
class C{  public String toString(){  StringBuffer retBuffer=new StringBuffer();  retBuffer.append(getClass().getName() + " " + Integer.toString(hashCode()));  if (path != null)   retBuffer.append(" path " + path);  if (childIndices != null) {    retBuffer.append(" indices [ ");    for (int counter=0; counter < childIndices.length; counter++)     retBuffer.append(Integer.toString(childIndices[counter]) + " ");    retBuffer.append("]");  }  if (children != null) {    retBuffer.append(" children [ ");    for (int counter=0; counter < children.length; counter++)     retBuffer.append(children[counter] + " ");    retBuffer.append("]");  }  return retBuffer.toString();}  }
class C{  public synchronized NSObject anyObject(){  if (set.isEmpty())   return null; else   return set.iterator().next();}  }
class C{  long count() throws ChangelogException {  return log.getNumberOfRecords();}  }
class C{  private void init(String publicId,String systemId,int lineNumber,int columnNumber){  this.publicId=publicId;  this.systemId=systemId;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  @Override public String toString(){  String r=this.getClass().getName() + "\n";  String format="\t{0} = {1}\n";  for (  CoreTokenField field : getAttributeNames()) {    Object value;    if (field.equals(CoreTokenField.EXPIRY_DATE)) {      DateFormat dateFormat=DateFormat.getInstance();      Date date=getExpiryTimestamp().getTime();      value=dateFormat.format(date);    } else     if (field.equals(CoreTokenField.BLOB)) {      value=Long.toString(getBlob().length) + " bytes";    } else {      value=String.valueOf(getAttribute(field));    }    if (value == null) {      value="[null]";    }    r+=MessageFormat.format(format,field.toString(),value);  }  return r;}  }
class C{  BasicType parameterType(int n){  return parameter(n).type;}  }
class C{  private Template templateWithAnyAttribute(){  Template template=mock(Template.class);  when(template.hasAttribute(any(AttributeType.class))).thenReturn(true);  return template;}  }
class C{  public static QrSegment makeBytes(byte[] data){  if (data == null)   throw new NullPointerException();  return new QrSegment(Mode.BYTE,data.length,data,data.length * 8);}  }
class C{  void compute(){  if (random.nextBoolean()) {    value=value + random.nextInt(variation);    ask=value + random.nextInt(variation / 2);    bid=value + random.nextInt(variation / 2);  } else {    value=value - random.nextInt(variation);    ask=value - random.nextInt(variation / 2);    bid=value - random.nextInt(variation / 2);  }  if (value <= 0) {    value=1.0;  }  if (ask <= 0) {    ask=1.0;  }  if (bid <= 0) {    bid=1.0;  }  if (random.nextBoolean()) {    int shareVariation=random.nextInt(100);    if (shareVariation > 0 && share + shareVariation < stocks) {      share+=shareVariation;    } else     if (shareVariation < 0 && share + shareVariation > 0) {      share+=shareVariation;    }  }}  }
class C{  public static String surround(final String value,final String prefix,final String suffix){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  String _prefix=Optional.ofNullable(prefix).orElse("");  return append(_prefix,value,Optional.ofNullable(suffix).orElse(_prefix));}  }
class C{  public String toString(){  return val + " in (" + generateValueList()+ ")";}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_octet);}  }
class C{  public static boolean match(String name){  if (osName.equalsIgnoreCase(name)) {    return true;  } else {    String winPrefix=name.substring(0,3);    if (osName.toLowerCase().contains(winPrefix.toLowerCase())) {      return true;    }  }  return false;}  }
class C{  @Override public void handleMessage(SoapMessage message) throws Fault {  boolean isReq=MessageUtils.isRequestor(message);  boolean isOut=MessageUtils.isOutbound(message);  if (isReq != isOut) {    assertTokens(message);    return;  }  if (isReq) {    addToken(message);  } else {    processToken(message);  }}  }
class C{  private void generateXmlProlog(Node.Nodes page){  String omitXmlDecl=pageInfo.getOmitXmlDecl();  if ((omitXmlDecl != null && !JspUtil.booleanValue(omitXmlDecl)) || (omitXmlDecl == null && page.getRoot().isXmlSyntax() && !pageInfo.hasJspRoot() && !ctxt.isTagFile())) {    String cType=pageInfo.getContentType();    String charSet=cType.substring(cType.indexOf("charset=") + 8);    out.printil("out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"" + charSet + "\\\"?>\\n\");");  }  String doctypeName=pageInfo.getDoctypeName();  if (doctypeName != null) {    String doctypePublic=pageInfo.getDoctypePublic();    String doctypeSystem=pageInfo.getDoctypeSystem();    out.printin("out.write(\"<!DOCTYPE ");    out.print(doctypeName);    if (doctypePublic == null) {      out.print(" SYSTEM \\\"");    } else {      out.print(" PUBLIC \\\"");      out.print(doctypePublic);      out.print("\\\" \\\"");    }    out.print(doctypeSystem);    out.println("\\\">\\n\");");  }}  }
class C{  public static String fixDesc(String description,Map<String,MappedClass> oldNamestoClasses){  if (description == null || description.length() == 0 || isPrimitive(description)) {    return description;  }  if (description.contains("L") && description.contains(";")) {    if (description.startsWith("(") || (description.startsWith("L") || description.startsWith("[")) && description.endsWith(";")) {      String regex="(?<=[L])[^;]*(?=;)";      Pattern p=Pattern.compile(regex);      Matcher m=p.matcher(Pattern.quote(description));      for (int i=0; i < m.groupCount(); i++) {        String found=m.group(i);        description=description.replace(found,fixDesc(found,oldNamestoClasses));      }      return description;    }  } else {    MappedClass mc=oldNamestoClasses.get(description);    if (mc == null) {      return description;    }    return mc.getNewName();  }  return description;}  }
class C{  @Override public int compareTo(Object o) throws ClassCastException {  ProfileStackFrame f=(ProfileStackFrame)o;  long thisCount=getTotalCount();  long thatCount=f.getTotalCount();  if (thisCount > thatCount) {    return -1;  } else   if (thisCount < thatCount) {    return 1;  }  int value=className.compareTo(f.className);  if (value == 0) {    value=methodName.compareTo(f.methodName);  }  return value;}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public PWResetSuccessModelImpl(){  super();}  }
class C{  @Override public boolean iTableExists(IndexIdentifier indexId){  String iTableName=Utils.calculateITableName(indexId);  logger.info("Checking for existance of iTable: " + iTableName);  return iTableExists(iTableName);}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  protected boolean checkQuotaAndPerformAction(InternalSession internalSession){  boolean reject=false;  int sessionCount=-1;  if (internalSession.getIsSessionUpgrade()) {    return false;  }  int quota=getSessionQuota(internalSession);  Map sessions=null;  try {    sessions=InjectorHolder.getInstance(SessionCount.class).getAllSessionsByUUID(internalSession.getUUID());  } catch (  Exception e) {    if (InjectorHolder.getInstance(SessionServiceConfig.class).isDenyLoginIfDBIsDown()) {      if (debug.messageEnabled()) {        debug.message("SessionConstraint." + "checkQuotaAndPerformAction: " + "denyLoginIfDBIsDown=true => "+ "The session repository internalSession down and "+ "the login request will be rejected. ");      }      return true;    } else {      if (debug.messageEnabled()) {        debug.message("SessionConstraint." + "checkQuotaAndPerformAction: " + "denyLoginIfDBIsDown=false => "+ "The session repository internalSession down and "+ "there will be no constraint checking.");      }      return false;    }  }  if (sessions != null) {    sessionCount=sessions.size();  }  if (sessionCount >= quota) {    reject=getQuotaExhaustionAction().action(internalSession,sessions);    if (debug.messageEnabled()) {      debug.message("SessionConstraint." + "checkQuotaAndPerformAction: " + "Session quota exhausted.");    }  }  return reject;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.ServiceDescriptionElement createServiceDescriptionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.ServiceDescriptionElementImpl();}  }
class C{  public Rectangle board_to_screen(ShapeTileBox p_box){  Point2D corner_1=board_to_screen(p_box.box_ll.to_float());  Point2D corner_2=board_to_screen(p_box.box_ur.to_float());  double ll_x=Math.min(corner_1.getX(),corner_2.getX());  double ll_y=Math.min(corner_1.getY(),corner_2.getY());  double dx=Math.abs(corner_2.getX() - corner_1.getX());  double dy=Math.abs(corner_2.getY() - corner_1.getY());  Rectangle result=new Rectangle((int)Math.floor(ll_x),(int)Math.floor(ll_y),(int)Math.ceil(dx),(int)Math.ceil(dy));  return result;}  }
class C{  static MethodHandle bindCaller(MethodHandle mh,Class<?> hostClass){  return BindCaller.bindCaller(mh,hostClass);}  }
class C{  @SuppressWarnings("unchecked") private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  initialize();  HeadIndex<K,V> h=head;  Node<K,V> basepred=h.node;  ArrayList<Index<K,V>> preds=new ArrayList<Index<K,V>>();  for (int i=0; i <= h.level; ++i)   preds.add(null);  Index<K,V> q=h;  for (int i=h.level; i > 0; --i) {    preds.set(i,q);    q=q.down;  }  for (; ; ) {    Object k=s.readObject();    if (k == null)     break;    Object v=s.readObject();    if (v == null)     throw new NullPointerException();    K key=(K)k;    V val=(V)v;    int rnd=ThreadLocalRandom.current().nextInt();    int j=0;    if ((rnd & 0x80000001) == 0) {      do {        ++j;      } while (((rnd>>>=1) & 1) != 0);      if (j > h.level)       j=h.level + 1;    }    Node<K,V> z=new Node<K,V>(key,val,null);    basepred.next=z;    basepred=z;    if (j > 0) {      Index<K,V> idx=null;      for (int i=1; i <= j; ++i) {        idx=new Index<K,V>(z,idx,null);        if (i > h.level)         h=new HeadIndex<K,V>(h.node,h,idx,i);        if (i < preds.size()) {          preds.get(i).right=idx;          preds.set(i,idx);        } else         preds.add(idx);      }    }  }  head=h;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfNumber makeIndirect(PdfDocument document){  return (PdfNumber)super.makeIndirect(document);}  }
class C{  public boolean hasDelay(){  return delay != -1;}  }
class C{  public void addAttributeValue(String value) throws SAMLException {  if (value == null || value.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("addAttributeValue: Input is null");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  StringBuffer sb=new StringBuffer(300);  sb.append("<").append(SAMLConstants.ASSERTION_PREFIX).append("AttributeValue").append(SAMLConstants.assertionDeclareStr).append(">").append(value).append("</").append(SAMLConstants.ASSERTION_PREFIX).append("AttributeValue>");  try {    Element ele=XMLUtils.toDOMDocument(sb.toString().trim(),SAMLUtilsCommon.debug).getDocumentElement();    if (_attributeValue == null) {      _attributeValue=new ArrayList();    }    if (!(_attributeValue.add(ele))) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("Attribute: failed to " + "add to the attribute value list.");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("addListError"));    }  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("addAttributeValue error",e);    throw new SAMLRequesterException("Exception in addAttributeValue" + e.getMessage());  }}  }
class C{  public void flush(){  rootRenderer.flush();}  }
class C{  public void deleteEntityConfig(String realm,String entityId) throws SAML2MetaException {  if (entityId == null) {    return;  }  if (realm == null) {    realm="/";  }  String[] objs={entityId,realm};  try {    Map oldAttrs=configInst.getConfiguration(realm,entityId);    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);    if (oldValues == null || oldValues.isEmpty()) {      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG,objs,null);      throw new SAML2MetaException("entity_config_not_exist",objs);    }    removeFromCircleOfTrust(realm,entityId);    Set attr=new HashSet();    attr.add(ATTR_ENTITY_CONFIG);    configInst.deleteConfiguration(realm,entityId,attr);    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_DELETED,objs,null);    SAML2MetaCache.putEntityConfig(realm,entityId,null);  } catch (  ConfigurationException e) {    debug.error("SAML2MetaManager.deleteEntityConfig:",e);    String[] data={e.getMessage(),entityId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_CONFIG,data,null);    throw new SAML2MetaException(e);  }}  }
class C{  @Override public int read(CharBuffer target) throws IOException {  try {    beforeRead(target != null ? target.length() : 0);    int n=in.read(target);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public boolean isMXBean(){  return isMXBean;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument03.class,args);}  }
class C{  public BeanContextSupport(BeanContext peer,Locale lcle,boolean dTime,boolean visible){  super(peer);  locale=lcle != null ? lcle : Locale.getDefault();  designTime=dTime;  okToUseGui=visible;  initialize();}  }
class C{  public boolean hasArrayIndexedField(JsonPointer fieldIndexPointer){  return fieldIndexPointer.size() == 2 && hasField(fieldIndexPointer.parent()) && fieldIndexPointer.leaf().matches("[0-9]+") && getField(fieldIndexPointer.parent()).isArray();}  }
class C{  public CCMapList(ContainerView parent,CCEditableListModelInterface model,String name){  super(parent,model,name);}  }
class C{  public Map<ObjectName,List<String>> findAssociatedMBeans(ObjectName mbeanName,String relationTypeName,String roleName) throws IllegalArgumentException {  if (mbeanName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"findAssociatedMBeans",new Object[]{mbeanName,relationTypeName,roleName});  Map<String,List<String>> relId2RoleNamesMap=findReferencingRelations(mbeanName,relationTypeName,roleName);  Map<ObjectName,List<String>> result=new HashMap<ObjectName,List<String>>();  for (  String currRelId : relId2RoleNamesMap.keySet()) {    Map<ObjectName,List<String>> objName2RoleNamesMap;    try {      objName2RoleNamesMap=getReferencedMBeans(currRelId);    } catch (    RelationNotFoundException exc) {      throw new RuntimeException(exc.getMessage());    }    for (    ObjectName currObjName : objName2RoleNamesMap.keySet()) {      if (!(currObjName.equals(mbeanName))) {        List<String> currRelIdList=result.get(currObjName);        if (currRelIdList == null) {          currRelIdList=new ArrayList<String>();          currRelIdList.add(currRelId);          result.put(currObjName,currRelIdList);        } else {          currRelIdList.add(currRelId);        }      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"findAssociatedMBeans");  return result;}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.CorrelationElement createCorrelationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.CorrelationElementImpl();}  }
class C{  private static KeywordBindRule decode(String expr,EnumBindRuleKeyword keyword,EnumBindRuleType op) throws AciException {switch (keyword) {case USERDN:    return UserDN.decode(expr,op);case ROLEDN:  throw new AciException(WARN_ACI_SYNTAX_ROLEDN_NOT_SUPPORTED.get(expr));case GROUPDN:return GroupDN.decode(expr,op);case IP:return IP.decode(expr,op);case DNS:return DNS.decode(expr,op);case DAYOFWEEK:return DayOfWeek.decode(expr,op);case TIMEOFDAY:return TimeOfDay.decode(expr,op);case AUTHMETHOD:return AuthMethod.decode(expr,op);case USERATTR:return UserAttr.decode(expr,op);case SSF:return SSF.decode(expr,op);default :throw new AciException(WARN_ACI_SYNTAX_INVALID_BIND_RULE_KEYWORD.get(keyword));}}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.REPLACES_TO);    Replaces replaces=new Replaces();    this.lexer.SPorHT();    String callId=lexer.byteStringNoSemicolon();    this.lexer.SPorHT();    super.parse(replaces);    replaces.setCallId(callId);    return replaces;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public void testDivideRoundHalfDownNeg1(){  String a="-92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="-1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public boolean isDeclared(String uri,String localName){  int index=getIndex(uri,localName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: local=" + localName + ", namespace="+ uri);  return declared[index];}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignatureElement createSignatureElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureElementImpl();}  }
class C{  public TagField createField(VorbisCommentFieldKey vorbisCommentFieldKey,String value) throws KeyNotFoundException, FieldDataInvalidException {  if (vorbisCommentFieldKey.equals(VorbisCommentFieldKey.COVERART)) {    throw new UnsupportedOperationException(ErrorMessage.ARTWORK_CANNOT_BE_CREATED_WITH_THIS_METHOD.getMsg());  }  return tag.createField(vorbisCommentFieldKey,value);}  }
class C{  public Object[] toArray(){  Object[] a;  final ReentrantLock lock=this.lock;  lock.lock();  try {    final int count=this.count;    a=new Object[count];    int n=items.length - takeIndex;    if (count <= n)     System.arraycopy(items,takeIndex,a,0,count); else {      System.arraycopy(items,takeIndex,a,0,n);      System.arraycopy(items,0,a,n,count - n);    }  }  finally {    lock.unlock();  }  return a;}  }
class C{  public PlaSegmentInt(ShapeSegments p_shape,int p_no){  int line_count=p_shape.border_line_count();  if (p_no == 0) {    start=p_shape.border_line(line_count - 1);  } else {    start=p_shape.border_line(p_no - 1);  }  middle=p_shape.border_line(p_no);  if (p_no == line_count - 1) {    end=p_shape.border_line(0);  } else {    end=p_shape.border_line(p_no + 1);  }  start_point=middle.intersection(start,"should never happen");  end_point=middle.intersection(end,"should never happen");}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  int n=getViewCount();  Object key=(axis == X_AXIS) ? CSS.Attribute.WIDTH : CSS.Attribute.HEIGHT;  for (int i=0; i < n; i++) {    View v=getView(i);    int min=(int)v.getMinimumSpan(axis);    int max;    AttributeSet a=v.getAttributes();    CSS.LengthValue lv=(CSS.LengthValue)a.getAttribute(key);    if ((lv != null) && lv.isPercentage()) {      min=Math.max((int)lv.getValue(targetSpan),min);      max=min;    } else {      max=(int)v.getMaximumSpan(axis);    }    if (max < targetSpan) {      float align=v.getAlignment(axis);      offsets[i]=(int)((targetSpan - max) * align);      spans[i]=max;    } else {      offsets[i]=0;      spans[i]=Math.max(min,targetSpan);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(15,", Esquire");  childData=child.getData();  assertEquals("characterdataInsertDataEndAssert","Margaret Martin, Esquire",childData);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  private void initializeTable(int capacity){  this.table=new Object[capacity * 2];  this.mask=table.length - 1;  this.clean=0;  this.maximumLoad=capacity * 2 / 3;}  }
class C{  public synchronized void dragOver(DropTargetDragEvent dtde){  if (!active)   return;  if (dtListener != null && active)   dtListener.dragOver(dtde);  updateAutoscroll(dtde.getLocation());}  }
class C{  public NoSuchElementException(){  super();}  }
class C{  public static ListSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,OptionalRelationDefinition<?,?> r) throws ArgumentException {  return new ListSubCommandHandler(parser,p,r,r.getName(),r.getUserFriendlyName());}  }
class C{  private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){  final String value=sequence.toString();  for (int i=0; i < value.length(); i++) {    final char c=value.charAt(i);    if (MAP_2_NULL.contains(c)) {      continue;    }    if (MAP_2_SPACE.contains(c)) {      if (canMapToSpace(buffer,trim)) {        buffer.append(SPACE_CHAR);      }      continue;    }    if (foldCase) {      final String mapping=CASE_MAP_TABLE.get(c);      if (mapping != null) {        buffer.append(mapping);        continue;      }    }    buffer.append(c);  }}  }
class C{  public void execute(){  acquireReference();  try {    getSession().execute(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public PrintException(Exception e){  super(e);}  }
class C{  public CredentialHandlerRuleSet(String prefix){  this.namespaceURI=null;  this.prefix=prefix;}  }
class C{  public void testIsParityAdjusted(){  try {    DESKeySpec.isParityAdjusted(null,1);    fail("Should raise an InvalidKeyException " + "in case of null byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  byte[] key={1,2,3,4,5,6,7,8};  try {    DESKeySpec.isParityAdjusted(key,1);    fail("Should raise an InvalidKeyException " + "in case of short byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  byte[] key_not_pa={1,2,3,4,5,6,7,8};  try {    assertFalse("Method returns true when false is expected.",DESKeySpec.isParityAdjusted(key_not_pa,0));  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {    fail("Unexpected InvalidKeyException was thrown.");  }  byte[] key_pa={(byte)128,(byte)131,(byte)133,(byte)134,(byte)137,(byte)138,(byte)140,(byte)143};  try {    assertTrue("Method returns false when true is expected.",DESKeySpec.isParityAdjusted(key_pa,0));  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {    fail("Unexpected InvalidKeyException was thrown.");  }}  }
class C{  private void printCurrency(Currency c){  System.out.println();  System.out.println(c.getCurrencyCode());  System.out.println(c.getSymbol());  System.out.println(c.getDefaultFractionDigits());}  }
class C{  public PluginResult.PostOperation invokePostOperationAbandonPlugins(PostOperationAbandonOperation abandonOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  for (  DirectoryServerPlugin p : postOperationAbandonPlugins) {    if (isInternalOperation(abandonOperation,p)) {      continue;    }    try {      result=p.doPostOperation(abandonOperation);    } catch (    Exception e) {      logException(abandonOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(abandonOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public BigInt(byte[] data){  places=(byte[])data.clone();}  }
class C{  public SQLNonTransientException(String reason){  super(reason,null,0);}  }
class C{  protected Set<String> policiesEligibleForUpgrade(String appName,String realm) throws UpgradeException {  try {    return DataStore.getInstance().search(getAdminSubject(),realm,MessageFormat.format(POLICY_SEARCH,appName),0,false,false);  } catch (  EntitlementException ee) {    throw new UpgradeException("Policy search failed for application " + appName + " in realm "+ realm,ee);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509Certificate createX509DataTypeX509Certificate() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509CertificateImpl();}  }
class C{  @Override public void onOptionsMenuClosed(final Menu menu){  delegate.onOptionsMenuClosed(menu);}  }
class C{  protected T childValue(T parentValue){  return parentValue;}  }
class C{  protected BooleanControl(Type type,boolean initialValue){  this(type,initialValue,"true","false");}  }
class C{  public ChunkedOutputStream(final SessionOutputBuffer out,int bufferSize) throws IOException {  super();  this.cache=new byte[bufferSize];  this.out=out;}  }
class C{  public final void draw(Graphics p_graphics){  if (r_board == null)   return;  r_board.draw(p_graphics,gdi_context);  if (ratsnest != null)   ratsnest.draw(p_graphics,gdi_context);  if (clearance_violations != null)   clearance_violations.draw(p_graphics,gdi_context);  if (interactive_state != null)   interactive_state.draw(p_graphics);  if (interactive_action_thread != null)   interactive_action_thread.draw(p_graphics);}  }
class C{  protected SAML2SDKUtils(){}  }
class C{  void modifyEntry(WriteableTransaction txn,Entry before,Entry after,List<Modification> mods) throws StorageRuntimeException {  DN entryDN=before.getName();  for (  Modification mod : mods) {    Attribute modAttr=mod.getAttribute();    AttributeType modAttrType=modAttr.getAttributeDescription().getAttributeType();    if (modAttrType.equals(referralType)) {      Attribute a=mod.getAttribute();switch (mod.getModificationType().asEnum()) {case ADD:        if (a != null) {          update(txn,entryDN,toStrings(a));        }      break;case DELETE:    if (a == null || a.isEmpty()) {      delete(txn,entryDN);    } else {      delete(txn,entryDN,toStrings(a));    }  break;case INCREMENT:break;case REPLACE:delete(txn,entryDN);if (a != null) {update(txn,entryDN,toStrings(a));}break;}}}}  }
class C{  protected ChangeListener createChangeListener(){  return new ModelListener();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.EncryptedResourceIDElement createEncryptedResourceIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.EncryptedResourceIDElementImpl();}  }
class C{  public MapCursor addCursor(MapCursor cursor){  cursors.add(cursor);  return cursor;}  }
class C{  public void endDTD() throws SAXException {  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.endDTD();}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.getCamera().stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.EntityDescriptorElement createEntityDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.EntityDescriptorElementImpl();}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  removePageSessionAttribute(PROPERTY_ATTRIBUTE);  populateValues=true;  forwardTo();}  }
class C{  public void performPostAdd(ServerManagedObject<?> managedObject) throws ConfigException {}  }
class C{  static List<File> tidyDatabaseList(List<File> databaseFiles){  Set<File> originalAsSet=new HashSet<File>(databaseFiles);  List<File> tidiedList=new ArrayList<File>();  for (  File databaseFile : databaseFiles) {    String databaseFilename=databaseFile.getPath();    String sansSuffix=removeSuffix(databaseFilename,UNINTERESTING_FILENAME_SUFFIXES);    if (sansSuffix.equals(databaseFilename) || !originalAsSet.contains(new File(sansSuffix))) {      tidiedList.add(databaseFile);    }  }  return tidiedList;}  }
class C{  public FrameBodyIPLS(byte textEncoding,String text){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,textEncoding);  setText(text);}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.DigestValueElement createDigestValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.DigestValueElementImpl();}  }
class C{  public TimeStampParser(String timeStamp){  super(timeStamp);}  }
class C{  public ImmutableList<A> appendList(final ListBuffer<A> x){  return appendList(x.toList());}  }
class C{  public ModelMBeanInfoSupport(String className,String description,ModelMBeanAttributeInfo[] attributes,ModelMBeanConstructorInfo[] constructors,ModelMBeanOperationInfo[] operations,ModelMBeanNotificationInfo[] notifications){  this(className,description,attributes,constructors,operations,notifications,null);}  }
class C{  private void changeGroupPos(int iPress,int iPrepare,List<Integer> iTotal){  Point pPress=listViews.get(iPress).getPoint();  Point pPrepare=listViews.get(iPrepare).getPoint();  int ixPress=pPress.x;  int iyPress=pPress.y;  int iWidth=listViews.get(iPress).getWidthNum();  int iHeight=listViews.get(iPress).getHeightNum();  int ixPrepare=pPrepare.x;  int iyPrepare=pPrepare.y;  DetailView detailView=listViews.get(iPress);  detailView.setPoint(new Point(ixPrepare,iyPrepare));  listViews.set(iPress,detailView);  for (int i=0; i < iTotal.size(); ++i) {    int iViewWaitChange=iTotal.get(i);    detailView=listViews.get(iViewWaitChange);    Point pTemp=detailView.getPoint();    if (pTemp.x < ixPress || pTemp.x >= ixPress + iWidth) {      if (pTemp.x < ixPress) {        pTemp.x+=iWidth;      } else       pTemp.x-=iWidth;    }    if (pTemp.y < iyPress || pTemp.y >= iyPress + iHeight) {      if (pTemp.y < iyPress)       pTemp.y+=iHeight; else       pTemp.y-=iHeight;    }    detailView.setPoint(pTemp);  }}  }
class C{  public void removeRelation(String relationId) throws RelationServiceNotRegisteredException, IllegalArgumentException, RelationNotFoundException {  isActive();  if (relationId == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"removeRelation",relationId);  Object result=getRelation(relationId);  if (result instanceof ObjectName) {    List<ObjectName> obsRefList=new ArrayList<ObjectName>();    obsRefList.add((ObjectName)result);    updateUnregistrationListener(null,obsRefList);  }  sendRelationRemovalNotification(relationId,null);  List<ObjectName> refMBeanList=new ArrayList<ObjectName>();  List<ObjectName> nonRefObjNameList=new ArrayList<ObjectName>();synchronized (myRefedMBeanObjName2RelIdsMap) {    for (    ObjectName currRefObjName : myRefedMBeanObjName2RelIdsMap.keySet()) {      Map<String,List<String>> relIdMap=myRefedMBeanObjName2RelIdsMap.get(currRefObjName);      if (relIdMap.containsKey(relationId)) {        relIdMap.remove(relationId);        refMBeanList.add(currRefObjName);      }      if (relIdMap.isEmpty()) {        nonRefObjNameList.add(currRefObjName);      }    }    for (    ObjectName currRefObjName : nonRefObjNameList) {      myRefedMBeanObjName2RelIdsMap.remove(currRefObjName);    }  }synchronized (myRelId2ObjMap) {    myRelId2ObjMap.remove(relationId);  }  if (result instanceof ObjectName) {synchronized (myRelMBeanObjName2RelIdMap) {      myRelMBeanObjName2RelIdMap.remove((ObjectName)result);    }  }  String relTypeName;synchronized (myRelId2RelTypeMap) {    relTypeName=myRelId2RelTypeMap.get(relationId);    myRelId2RelTypeMap.remove(relationId);  }synchronized (myRelType2RelIdsMap) {    List<String> relIdList=myRelType2RelIdsMap.get(relTypeName);    if (relIdList != null) {      relIdList.remove(relationId);      if (relIdList.isEmpty()) {        myRelType2RelIdsMap.remove(relTypeName);      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"removeRelation");  return;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public static String formatTime(Date date){  return JKFormatUtil.formatDate(date,"hh:mm");}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfName makeIndirect(PdfDocument document){  return (PdfName)super.makeIndirect(document);}  }
class C{  public final void testGetSaltLength(){  PSSParameterSpec pssps=new PSSParameterSpec(20);  assertEquals(20,pssps.getSaltLength());}  }
class C{  static public void fail(String message){  throw new AssertionFailedError(message);}  }
class C{  public static String gensalt(int log_rounds,SecureRandom random){  StringBuilder sb=new StringBuilder();  byte rnd[]=new byte[BCRYPT_SALT_LEN];  random.nextBytes(rnd);  sb.append("$2a$");  if (log_rounds < 10) {    sb.append("0");  }  if (log_rounds > 30) {    throw new IllegalArgumentException("log_rounds exceeds maximum (30)");  }  sb.append(Integer.toString(log_rounds));  sb.append("$");  sb.append(encode_base64(rnd,rnd.length));  return sb.toString();}  }
class C{  @Override public Object clone(){  RuleBasedCollator clone=(RuleBasedCollator)super.clone();  return clone;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node entRef;  Element entElement;  Attr newAttr;  int nodeType;  Attr badAttr;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=gender.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  newAttr=doc.createAttribute("newAttr");{    boolean success=false;    try {      badAttr=entElement.setAttributeNode(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public Observable<JsonObject> retrieveProductPriceObservable(String productId){  io.vertx.rx.java.ObservableFuture<JsonObject> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveProductPrice(productId,resultHandler.toHandler());  return resultHandler;}  }
class C{  public void testUpdate1() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("UPDATE " + DatabaseCreator.PARENT_TABLE + " SET id = 4 WHERE id = 3");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapsetnameditemwithnewvalue.class,args);}  }
class C{  public void init(FilterConfig filterConfig) throws ServletException {  setFilterConfig(filterConfig);  servletCtx=filterConfig.getServletContext();  configFile=System.getProperty("openssoclient.config.folder");  if (configFile == null || configFile.length() == 0) {    configFile=System.getProperty("user.home");  }  configFile=configFile + File.separator + SetupClientWARSamples.CLIENT_WAR_CONFIG_TOP_DIR+ File.separator+ SetupClientWARSamples.getNormalizedRealPath(servletCtx)+ "AMConfig.properties";  File file=new File(configFile);  if (file.exists()) {    setAMConfigProperties(configFile);  }}  }
class C{  public void reset(){  System.arraycopy(IV,0,cfbV,0,IV.length);  cipher.reset();}  }
class C{  public List<String> calculateImports(){  List<String> stdlibResult=new ArrayList<>();  List<String> thirdPartyResult=new ArrayList<>();  List<String> appResult=new ArrayList<>();  for (  PythonImport protoImport : stringImports.values()) {switch (protoImport.type()) {case STDLIB:      stdlibResult.add(protoImport.importString());    break;case THIRD_PARTY:  thirdPartyResult.add(protoImport.importString());break;case APP:appResult.add(protoImport.importString());break;}}Collections.sort(stdlibResult);Collections.sort(thirdPartyResult);Collections.sort(appResult);List<String> all=new ArrayList<>();if (stdlibResult.size() > 0) {all.addAll(stdlibResult);all.add("");}if (thirdPartyResult.size() > 0) {all.addAll(thirdPartyResult);all.add("");}all.addAll(appResult);return all;}  }
class C{  @Override public void destroyModuleState(){  validatedUserID=null;}  }
class C{  public Bidi createLineBidi(int lineStart,int lineLimit){  AttributedString astr=new AttributedString("");  Bidi newBidi=new Bidi(astr.getIterator());  return bidiBase.setLine(this,bidiBase,newBidi,newBidi.bidiBase,lineStart,lineLimit);}  }
class C{  public void run(){  if (Debug.messageEnabled()) {    Debug.message(tableName + ":DBHandler:TimeBufferingTask.run() called");  }  nonBlockingFlush();}  }
class C{  public static SearchRequest newSearchRequest(final DN name,final SearchScope scope,final Filter filter,final String... attributeDescriptions){  return Requests.newSearchRequest(name,scope,filter,attributeDescriptions).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  protected void registerListeners(){  component.addMouseListener(this);  component.addMouseMotionListener(this);}  }
class C{  public void next(){  index++;}  }
class C{  public void resetSyntax(){  for (int i=0; i < 256; i++) {    tokenTypes[i]=0;  }}  }
class C{  public boolean isIdentity(){  return (state == APPLY_IDENTITY || (getType() == TYPE_IDENTITY));}  }
class C{  public MLet(){  this(new URL[0]);}  }
class C{  protected DataSource createDataSourceInstance() throws SQLException {  final PoolingDataSource<PoolableConnection> pds=new PoolingDataSource<>(connectionPool);  pds.setAccessToUnderlyingConnectionAllowed(isAccessToUnderlyingConnectionAllowed());  return pds;}  }
class C{  private static void storePPDSMap(Map config){  IDPPUtils.debug.message("IDPPServiceManager:storePPDSMap:Init");  ppDSMap=new HashMap();  Set set=(Set)config.get(ppDSMapAttributeKey);  if (set == null || set.isEmpty()) {    IDPPUtils.debug.message("IDPPServiceManager:attribute map is empty");    return;  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("IDPPServiceManager:storePPDSMap: set of" + "attributes in DS:" + set);  }  Iterator iter=set.iterator();  while (iter.hasNext()) {    String attr=(String)iter.next();    if (attr.indexOf("=") == -1) {      if (IDPPUtils.debug.messageEnabled()) {        IDPPUtils.debug.message("IDPPServiceManager:storePPDSMap:" + "Entry does not have = sign. Ignoring:" + attr);      }      continue;    }    StringTokenizer st=new StringTokenizer(attr,"=");    if (st.countTokens() > 2) {      if (IDPPUtils.debug.messageEnabled()) {        IDPPUtils.debug.message("IDPPServiceManager:storePPDSMap:" + "Entry is invalid . Ignoring:" + attr);      }      continue;    }    ppDSMap.put((String)st.nextToken(),(String)st.nextToken());  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("IDPPServiceManager:storePPDSMap: mapped" + "attributes:" + ppDSMap);  }}  }
class C{  private static int read(InputStream input) throws IOException {  int value=input.read();  if (-1 == value) {    throw new EOFException("Unexpected EOF reached");  }  return value;}  }
class C{  public static JavacErrorDetail createJavacError(String fname,Node.Nodes page,StringBuilder errMsgBuf,int lineNum,JspCompilationContext ctxt) throws JasperException {  JavacErrorDetail javacError;  ErrorVisitor errVisitor=new ErrorVisitor(lineNum);  page.visit(errVisitor);  Node errNode=errVisitor.getJspSourceNode();  if ((errNode != null) && (errNode.getStart() != null)) {    if (errVisitor.getJspSourceNode() instanceof Node.Scriptlet || errVisitor.getJspSourceNode() instanceof Node.Declaration) {      javacError=new JavacErrorDetail(fname,lineNum,errNode.getStart().getFile(),errNode.getStart().getLineNumber() + lineNum - errVisitor.getJspSourceNode().getBeginJavaLine(),errMsgBuf,ctxt);    } else {      javacError=new JavacErrorDetail(fname,lineNum,errNode.getStart().getFile(),errNode.getStart().getLineNumber(),errMsgBuf,ctxt);    }  } else {    javacError=new JavacErrorDetail(fname,lineNum,errMsgBuf);  }  return javacError;}  }
class C{  public SessionRequestParser(Document xmlDoc){  document=xmlDoc;}  }
class C{  public SSLConnectionException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  private int readRecordLength(final int distanceToBlockStart) throws IOException {  final ByteStringBuilder lengthBytes=new ByteStringBuilder(SIZE_OF_RECORD_SIZE);  if (distanceToBlockStart > 0 && distanceToBlockStart < SIZE_OF_RECORD_SIZE) {    lengthBytes.appendBytes(reader,distanceToBlockStart);    reader.skipBytes(SIZE_OF_BLOCK_OFFSET);    lengthBytes.appendBytes(reader,SIZE_OF_RECORD_SIZE - distanceToBlockStart);  } else {    if (distanceToBlockStart == 0) {      reader.skipBytes(SIZE_OF_BLOCK_OFFSET);    }    lengthBytes.appendBytes(reader,SIZE_OF_RECORD_SIZE);  }  return lengthBytes.toByteString().toInt();}  }
class C{  public static QueryExp between(ValueExp v1,ValueExp v2,ValueExp v3){  return new BetweenQueryExp(v1,v2,v3);}  }
class C{  @Override public boolean isExpired(){  return !isNeverExpires() && super.isExpired();}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_name_atv)   m_name_atv.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.StrictElement createStrictElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.StrictElementImpl();}  }
class C{  public void accept(final MethodVisitor mv){  AbstractInsnNode insn=first;  while (insn != null) {    insn.accept(mv);    insn=insn.next;  }}  }
class C{  @Inject public OldPolicyConditionMigrationUpgradeStep(PrivilegedAction<SSOToken> adminTokenAction,@DataLayer(ConnectionType.DATA_LAYER) ConnectionFactory connectionFactory){  super(adminTokenAction,connectionFactory);  this.conditionUpgrader=new PolicyConditionUpgrader(new PolicyConditionUpgradeMap());}  }
class C{  public void permitDenied(Request request,Response response) throws IOException, ServletException {}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public void change_side(int p_component_no,PlaPointInt p_pole){  BrdComponent curr_component=get(p_component_no);  undo_list.save_for_undo(curr_component);  curr_component.change_side(p_pole);}  }
class C{  public static boolean isHtml(InputStream inputStream) throws IOException {  byte[] firstBytes=peekFirstNotEmptyBytes(inputStream,32);  if (firstBytes == null || firstBytes[0] != Chars.TAG_OPEN) {    return false;  }  for (  String htmlMarker : HTML_MARKERS) {    if (findStringIgnoreCase(firstBytes,1,htmlMarker)) {      return true;    }  }  return false;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclRefElement createAuthnContextDeclRefElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextDeclRefElementImpl();}  }
class C{  private void assertBlockedLongerThanTimeout(long startTime,long endTime,int TIMEOUT){  assertTrue(endTime - startTime >= TIMEOUT);}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  public synchronized Enumeration keys(){  return new Enumerator(KEYS,false);}  }
class C{  private void tuneToStation(final int station){  refreshImageButton(false);  refreshActionMenuItem(false);  refreshPopupMenuItem(false);  refreshActionMenuPower(false);  mService.tuneStationAsync(FmRadioUtils.computeFrequency(station));  if (!mIsPlaying) {    startAnimation();  }}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  cot=getStringOptionValue(FedCLIConstants.ARGUMENT_COT);  entityID=getStringOptionValue(FedCLIConstants.ARGUMENT_ENTITY_ID);  spec=FederationManager.getIDFFSubCommandSpecification(rc);  String[] params={realm,cot,entityID,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_COT_MEMBER",params);  try {    CircleOfTrustManager cotManager=new CircleOfTrustManager(ssoToken);    cotManager.removeCircleOfTrustMember(realm,cot,spec,entityID);    Object[] objs={cot,entityID,realm};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("remove-circle-of-trust-member-succeeded"),objs));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_REMOVE_COT_MEMBER",params);  } catch (  COTException e) {    debugWarning("RemoveCircleOfTrustMembers.handleRequest",e);    String[] args={realm,cot,entityID,spec,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_COT_MEMBER",args);    throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private void updateUiWidgets(){  if (addressRequested) {    progressBar.setVisibility(ProgressBar.VISIBLE);    fetchAddressButton.setEnabled(false);  } else {    progressBar.setVisibility(ProgressBar.GONE);    fetchAddressButton.setEnabled(true);  }}  }
class C{  public void replaceAttributeSchema(String attrName,Node attributeSchemaNode) throws SSOException, SMSException {  replaceChildNode(SMSUtils.SCHEMA_ATTRIBUTE,attrName,attributeSchemaNode);}  }
class C{  private FieldInfo createFieldInfo(Field field,Type containerType,Method method){  String example="";  TypeInfo typeInfo=createTypeInfo(field,method);  if (typeInfo.kind() == Field.Kind.TYPE_STRING) {    String fieldPattern=apiaryConfig.getFieldPattern().get(containerType.getName(),field.getName());    String stringFormat=apiaryConfig.getStringFormat(containerType.getName(),field.getName());    example=typeNameGenerator.getFieldPatternExample(fieldPattern);    if (!Strings.isNullOrEmpty(example)) {      example="ex: " + example;    } else {      example=typeNameGenerator.getStringFormatExample(stringFormat);    }  }  return FieldInfo.newBuilder().name(field.getName()).type(typeInfo).example(example).description(Strings.nullToEmpty(apiaryConfig.getDescription(method.getRequestTypeUrl(),field.getName()))).build();}  }
class C{  public boolean isSelected(){  return getModel().isSelected();}  }
class C{  public FileAlterationObserver(File directory){  this(directory,(FileFilter)null);}  }
class C{  public static void main(final String[] args){  parseArgs(args);  connect();}  }
class C{  public final boolean isFatalEnabled(){  return false;}  }
class C{  @Override void validateMethod(Request request) throws OAuth2RestletException {  if (!(Method.POST.equals(request.getMethod()) || Method.GET.equals(request.getMethod()))) {    throw new OAuth2RestletException(405,"method_not_allowed","Required Method: GET or POST found: " + request.getMethod().getName(),null);  }}  }
class C{  private Builder(Event35Log other){  super(Event35Log.SCHEMA$);  if (isValidValue(fields()[0],other.version)) {    this.version=data().deepCopy(fields()[0].schema(),other.version);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.MAX_EVENTS)) {    this.MAX_EVENTS=data().deepCopy(fields()[1].schema(),other.MAX_EVENTS);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.eventCount)) {    this.eventCount=data().deepCopy(fields()[2].schema(),other.eventCount);    fieldSetFlags()[2]=true;  }  if (isValidValue(fields()[3],other.events)) {    this.events=data().deepCopy(fields()[3].schema(),other.events);    fieldSetFlags()[3]=true;  }}  }
class C{  public void addExcludedSubtree(GeneralSubtree subtree){  GeneralName base=subtree.getBase();switch (base.getTagNo()) {case 1:    excludedSubtreesEmail=unionEmail(excludedSubtreesEmail,extractNameAsString(base));  break;case 2:excludedSubtreesDNS=unionDNS(excludedSubtreesDNS,extractNameAsString(base));break;case 4:excludedSubtreesDN=unionDN(excludedSubtreesDN,(ASN1Sequence)base.getName().toASN1Primitive());break;case 6:excludedSubtreesURI=unionURI(excludedSubtreesURI,extractNameAsString(base));break;case 7:excludedSubtreesIP=unionIP(excludedSubtreesIP,ASN1OctetString.getInstance(base.getName()).getOctets());break;}}  }
class C{  public NSNumber(String text){  if (text == null)   throw new IllegalArgumentException("The given string is null and cannot be parsed as number.");  try {    long l=Long.parseLong(text);    doubleValue=longValue=l;    type=INTEGER;  } catch (  Exception ex) {    try {      doubleValue=Double.parseDouble(text);      longValue=Math.round(doubleValue);      type=REAL;    } catch (    Exception ex2) {      try {        boolValue=text.toLowerCase().equals("true") || text.toLowerCase().equals("yes");        if (!boolValue && !(text.toLowerCase().equals("false") || text.toLowerCase().equals("no"))) {          throw new Exception("not a boolean");        }        type=BOOLEAN;        doubleValue=longValue=boolValue ? 1 : 0;      } catch (      Exception ex3) {        throw new IllegalArgumentException("The given string neither represents a double, an int nor a boolean value.");      }    }  }}  }
class C{  public Marshaller createMarshaller() throws JAXBException {  return new MarshallerImpl(this);}  }
class C{  public boolean validateURL(){  boolean returnVal=false;  String primaryURL=toString("port");  if ((primaryURL == null) || (primaryURL.trim().isEmpty())) {    writeToResponse(getLocalizedString("missing.primary.url"));    returnVal=true;  } else {    try {      URL hostURL=new URL(primaryURL);      if ((hostURL.getHost() == null) || (hostURL.getHost().trim().isEmpty())) {        writeToResponse(getLocalizedString("missing.host.name"));        returnVal=true;      } else       if ((hostURL.getPath() == null) || (hostURL.getPath().trim().isEmpty()) || (hostURL.getPath().trim().equalsIgnoreCase("/"))) {        writeToResponse(getLocalizedString("primary.url.no.uri"));        returnVal=true;      } else {        getContext().setSessionAttribute(SessionAttributeNames.LB_PRIMARY_URL,primaryURL);        writeToResponse("ok");      }    } catch (    MalformedURLException m) {      writeToResponse(getLocalizedString("primary.url.is.invalid"));      returnVal=true;    }  }  setPath(null);  return returnVal;}  }
class C{  public boolean checkError(){  if (out != null) {    flush();  }  if (out instanceof java.io.PrintWriter) {    PrintWriter pw=(PrintWriter)out;    return pw.checkError();  } else   if (psOut != null) {    return psOut.checkError();  }  return trouble;}  }
class C{  public List<String> methodDocComment(MessageType msg){  StringBuilder attributesBuilder=new StringBuilder();  for (  Field field : msg.getFields()) {    attributesBuilder.append(fieldAttributeComment(field));  }  String attributes=attributesBuilder.toString().trim();  List<String> content=defaultComments(msg);  if (!Strings.isNullOrEmpty(attributes)) {    return ImmutableList.<String>builder().addAll(content).addAll(convertToCommentedBlock(attributes)).build();  }  return content;}  }
class C{  public LDAPModification(ModificationType modificationType,RawAttribute attribute){  this.modificationType=modificationType;  this.attribute=attribute;}  }
class C{  public byte readByte(){  final byte b=sequence.byteAt(pos);  pos++;  return b;}  }
class C{  public void insert_longlong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_longlong",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_longlong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (contentHandler != null) {    contentHandler.endPrefixMapping(prefix);  }}  }
class C{  public DatatypeConfigurationException(){  super();}  }
class C{  public InvalidAttributeValueException(){  super();}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  ServicesModel model=(ServicesModel)getModel();  String serviceName=(String)getDisplayFieldValue(ATTR_SERVICE_LIST);  serviceName=serviceName.trim();  if (serviceName.length() > 0) {    SCUtils utils=new SCUtils(serviceName,model);    String propertiesViewBeanURL=utils.getServiceDisplayURL();    if ((propertiesViewBeanURL != null) && (propertiesViewBeanURL.trim().length() > 0)) {      String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);      if (curRealm == null) {        curRealm=AMModelBase.getStartDN(getRequestContext().getRequest());      }      try {        String pageTrailID=(String)getPageSessionAttribute(PG_SESSION_PAGE_TRAIL_ID);        propertiesViewBeanURL+="?ServiceName=" + serviceName + "&Location="+ stringToHex(curRealm)+ "&Template=true&Op="+ AMAdminConstants.OPERATION_ADD+ "&"+ PG_SESSION_PAGE_TRAIL_ID+ "="+ pageTrailID;        HttpServletResponse response=getRequestContext().getResponse();        backTrail();        response.sendRedirect(propertiesViewBeanURL);      } catch (      UnsupportedEncodingException e) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());        forwardTo();      }catch (      IOException e) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());        forwardTo();      }    } else {      ServicesAddViewBean vb=(ServicesAddViewBean)getViewBean(ServicesAddViewBean.class);      setPageSessionAttribute(ServicesAddViewBean.SERVICE_NAME,serviceName);      unlockPageTrailForSwapping();      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","services.missing.servicename");    forwardTo();  }}  }
class C{  public boolean isCli(){  return cliArg.isPresent();}  }
class C{  private void stopAnimation(){  mAnimImage.setVisibility(View.INVISIBLE);  mAnimImage.setAnimation(null);}  }
class C{  public Observable<Void> initializePersistenceObservable(){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  initializePersistence(resultHandler.toHandler());  return resultHandler;}  }
class C{  public static StringArgument skippedImportFileArgument() throws ArgumentException {  return StringArgument.builder("skipFile").description(INFO_GENERAL_DESCRIPTION_SKIPPED_FILE.get()).valuePlaceholder(INFO_SKIP_FILE_PLACEHOLDER.get()).buildArgument();}  }
class C{  private void validateChrono(TemporalAccessor temporal){  Objects.requireNonNull(temporal,"temporal");  Chronology temporalChrono=temporal.query(TemporalQueries.chronology());  if (temporalChrono != null && chrono.equals(temporalChrono) == false) {    throw new DateTimeException("Chronology mismatch, expected: " + chrono.getId() + ", actual: "+ temporalChrono.getId());  }}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType createBaseIDAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("\n<<<<<<< BEGIN SDK CACHE CONTENTS >>>>>>>>");  if (!sdkCache.isEmpty()) {    Enumeration cacheKeys=sdkCache.keys();    while (cacheKeys.hasMoreElements()) {      String key=(String)cacheKeys.nextElement();      CacheBlock cb=(CacheBlock)sdkCache.get(key);      sb.append("\nSDK Cache Block: ").append(key);      sb.append(cb.toString());    }  } else {    sb.append("<empty>");  }  sb.append("\n<<<<<<< END SDK CACHE CONTENTS >>>>>>>>");  return sb.toString();}  }
class C{  public LineSignatureValidator(byte[] channelSecret){  this.secretKeySpec=new SecretKeySpec(channelSecret,HASH_ALGORITHM);}  }
class C{  public String toString(){  return getClass().getName() + "[type=" + type+ ",index0="+ index0+ ",index1="+ index1+ "]";}  }
class C{  public static final byte[] encodeUrl(BitSet urlsafe,byte[] bytes){  if (bytes == null) {    return null;  }  if (urlsafe == null) {    urlsafe=WWW_FORM_URL;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b < 0) {      b=256 + b;    }    if (urlsafe.get(b)) {      if (b == ' ') {        b='+';      }      buffer.write(b);    } else {      buffer.write('%');      char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));      char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));      buffer.write(hex1);      buffer.write(hex2);    }  }  return buffer.toByteArray();}  }
class C{  public FSPreLoginException(String msg){  super(msg);}  }
class C{  public int nextInteger() throws DecodeException {  if (!hasNext(GSER_INTEGER)) {    final LocalizableMessage msg=WARN_GSER_NO_VALID_INTEGER.get(gserValue.substring(pos,length));    throw DecodeException.error(msg);  }  return Integer.valueOf(next(GSER_INTEGER)).intValue();}  }
class C{  public boolean shouldReInitialize(){  for (  DN domainDN : eclDisabledDomains) {    if (predicate.isECLEnabledDomain(domainDN)) {      eclDisabledDomains.clear();      return true;    }  }  return false;}  }
class C{  protected void deploy(PrintWriter writer,String config,ContextName cn,String war,boolean update,StringManager smClient){  if (config != null && config.length() == 0) {    config=null;  }  if (war != null && war.length() == 0) {    war=null;  }  if (debug >= 1) {    if (config != null && config.length() > 0) {      if (war != null) {        log("install: Installing context configuration at '" + config + "' from '"+ war+ "'");      } else {        log("install: Installing context configuration at '" + config + "'");      }    } else {      if (cn != null) {        log("install: Installing web application '" + cn + "' from '"+ war+ "'");      } else {        log("install: Installing web application from '" + war + "'");      }    }  }  if (!validateContextName(cn,writer,smClient)) {    return;  }  @SuppressWarnings("null") String name=cn.getName();  String baseName=cn.getBaseName();  String displayPath=cn.getDisplayName();  Context context=(Context)host.findChild(name);  if (context != null && !update) {    writer.println(smClient.getString("managerServlet.alreadyContext",displayPath));    return;  }  if (config != null && (config.startsWith("file:"))) {    config=config.substring("file:".length());  }  if (war != null && (war.startsWith("file:"))) {    war=war.substring("file:".length());  }  try {    if (isServiced(name)) {      writer.println(smClient.getString("managerServlet.inService",displayPath));    } else {      addServiced(name);      try {        if (config != null) {          if (!configBase.mkdirs() && !configBase.isDirectory()) {            writer.println(smClient.getString("managerServlet.mkdirFail",configBase));            return;          }          File localConfig=new File(configBase,baseName + ".xml");          if (localConfig.isFile() && !localConfig.delete()) {            writer.println(smClient.getString("managerServlet.deleteFail",localConfig));            return;          }          copy(new File(config),localConfig);        }        if (war != null) {          File localWar;          if (war.endsWith(".war")) {            localWar=new File(host.getAppBaseFile(),baseName + ".war");          } else {            localWar=new File(host.getAppBaseFile(),baseName);          }          if (localWar.exists() && !ExpandWar.delete(localWar)) {            writer.println(smClient.getString("managerServlet.deleteFail",localWar));            return;          }          copy(new File(war),localWar);        }        check(name);      }  finally {        removeServiced(name);      }    }    writeDeployResult(writer,smClient,name,displayPath);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log("ManagerServlet.install[" + displayPath + "]",t);    writer.println(smClient.getString("managerServlet.exception",t.toString()));  }}  }
class C{  public static String printUnsignedInt(long val){  if (theConverter == null)   initConverter();  return theConverter.printUnsignedInt(val);}  }
class C{  @DataProvider public Object[][] partialDateTimeValues(){  SimpleDateFormat sdf=new SimpleDateFormat("YYYYMMddHHmmssZ");  GregorianCalendar c=new GregorianCalendar(TimeZone.getTimeZone("UTC"));  c.setLenient(false);  c.clear();  sdf.setCalendar(c);  c.set(Calendar.HOUR_OF_DAY,23);  c.set(Calendar.MINUTE,0);  c.set(Calendar.SECOND,0);  long time1=c.getTimeInMillis();  String format1=sdf.format(c.getTime());  c.set(Calendar.HOUR_OF_DAY,00);  c.set(Calendar.MINUTE,59);  c.set(Calendar.SECOND,59);  long time2=c.getTimeInMillis();  String format2=sdf.format(c.getTime());  return new Object[][]{{time1,format1,"0s"},{time1,format1,"0m"},{time1,format1,"23h"},{time2,format2,"59m59s"},{time2,format2,"0h59m59s"},{time2,format2,"01D01M"}};}  }
class C{  public void test_ConstructorLjava_lang_ObjectLjava_lang_ref_ReferenceQueue(){  ReferenceQueue rq=new ReferenceQueue();  bool=new Boolean(true);  try {    SoftReference sr=new SoftReference(bool,rq);    assertTrue("Initialization failed.",((Boolean)sr.get()).booleanValue());  } catch (  Exception e) {    fail("Exception during test : " + e.getMessage());  }  boolean exception=false;  try {    new SoftReference(bool,null);  } catch (  NullPointerException e) {    exception=true;  }  assertTrue("Should not throw NullPointerException",!exception);}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo updateFoo(Foo foo){  return fooPersistence.update(foo);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static void logExtendedResponse(ExtendedOperation extendedOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logExtendedResponse(extendedOperation);  }}  }
class C{  public PdfCanvas clip(){  contentStream.getOutputStream().writeBytes(W);  return this;}  }
class C{  public static String removeBinaryAttributeFlag(String attributeName){  if (isBinaryAttribute(attributeName)) {    return attributeName.substring(0,attributeName.lastIndexOf(BINARY_FLAG));  } else {    return attributeName;  }}  }
class C{  public void update(Graphics g,JComponent c){  paint(g,c);}  }
class C{  public ValidationResult isFileValid(String filename,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  if (isStringValid(filename)) {    File file=new File(filename);    if (file.exists() && file.isFile()) {      returnMessage=LocalizedMessage.get(LOC_VA_MSG_VAL_FILE,new Object[]{filename});      validRes=ValidationResultStatus.STATUS_SUCCESS;    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_IN_VAL_FILE,new Object[]{filename});  }  Debug.log("FileSystemValidator : Is File : " + filename + " valid ? "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  public static final IndexCreatedEvent createTestIndexCreationStatus(){  IndexCreatedEvent toReturn=new IndexCreatedEvent(UUID.randomUUID(),new Date(),new Date(),createTestIndexOneField(),1000,0);  toReturn.calculateValues();  return toReturn;}  }
class C{  public static boolean isShouldHideInput(View v,MotionEvent event){  if (v != null && (v instanceof EditText)) {    int[] l={0,0};    v.getLocationInWindow(l);    int left=l[0], top=l[1], bottom=top + v.getHeight(), right=left + v.getWidth();    return !(event.getX() > left && event.getX() < right && event.getY() > top && event.getY() < bottom);  }  return false;}  }
class C{  public String type(){  return type;}  }
class C{  public void runTest() throws Throwable {  Document doc;  CDATASection newCDATASectionNode;  String newCDATASectionValue;  String newCDATASectionName;  int newCDATASectionType;  doc=(Document)load("staff",true);  newCDATASectionNode=doc.createCDATASection("This is a new CDATASection node");  newCDATASectionValue=newCDATASectionNode.getNodeValue();  assertEquals("nodeValue","This is a new CDATASection node",newCDATASectionValue);  newCDATASectionName=newCDATASectionNode.getNodeName();  assertEquals("nodeName","#cdata-section",newCDATASectionName);  newCDATASectionType=(int)newCDATASectionNode.getNodeType();  assertEquals("nodeType",4,newCDATASectionType);}  }
class C{  public boolean checkEnvironment(PrintWriter pw){  if (null != pw)   outWriter=pw;  Hashtable hash=getEnvironmentHash();  boolean environmentHasErrors=writeEnvironmentReport(hash);  if (environmentHasErrors) {    logMsg("# WARNING: Potential problems found in your environment!");    logMsg("#    Check any 'ERROR' items above against the Xalan FAQs");    logMsg("#    to correct potential problems with your classes/jars");    logMsg("#    http://xml.apache.org/xalan-j/faq.html");    if (null != outWriter)     outWriter.flush();    return false;  } else {    logMsg("# YAHOO! Your environment seems to be OK.");    if (null != outWriter)     outWriter.flush();    return true;  }}  }
class C{  public DecodingException(Throwable cause){  super(cause);}  }
class C{  public ResourceAccessStatement(ResourceID resourceID,ProxySubject proxySubject,SessionContext sessionContext,Subject subject) throws SAMLException {  if (subject == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("ResourceAccessStatement: should" + " contain one subject.");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));  } else {    this._subject=subject;  }  _resourceID=resourceID;  _proxySubject=proxySubject;  _sessionContext=sessionContext;}  }
class C{  public static <I,M,E extends Exception>List<M> transformList(final Collection<I> values,final Function<I,M,E> mapper) throws E {  Reject.ifNull(values,mapper);  final List<M> newList=new ArrayList<M>(values.size());  for (  I value : values) {    newList.add(mapper.apply(value));  }  return newList;}  }
class C{  public void replace(int offset,int length,View[] views){  super.replace(offset,length,views);  invalidateGrid();}  }
class C{  public boolean implies(Permission permission){synchronized (this) {    Permission p=permsMap.get(permission);    if (p == null) {      for (      Permission p_ : permsMap.values()) {        if (p_.implies(permission))         return true;      }      return false;    } else {      return true;    }  }}  }
class C{  Vector processSIMPLEPATTERNLIST(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");    int nPatterns=tokenizer.countTokens();    Vector patterns=new Vector(nPatterns);    for (int i=0; i < nPatterns; i++) {      XPath pattern=handler.createMatchPatternXPath(tokenizer.nextToken(),owner);      patterns.addElement(pattern);    }    return patterns;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  private String nextAT() throws IOException {  hasQE=false;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if (pos == chars.length) {    return null;  }  beg=pos;  pos++;  for (; pos < chars.length && chars[pos] != '=' && chars[pos] != ' '; pos++) {  }  if (pos >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  end=pos;  if (chars[pos] == ' ') {    for (; pos < chars.length && chars[pos] != '=' && chars[pos] == ' '; pos++) {    }    if (chars[pos] != '=' || pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }  }  pos++;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if ((end - beg > 4) && (chars[beg + 3] == '.') && (chars[beg] == 'O' || chars[beg] == 'o')&& (chars[beg + 1] == 'I' || chars[beg + 1] == 'i')&& (chars[beg + 2] == 'D' || chars[beg + 2] == 'd')) {    beg+=4;  }  return new String(chars,beg,end - beg);}  }
class C{  public void printCloseTag(PrintWriter aWriter,StoreDescription aDesc) throws Exception {  aWriter.print("</");  aWriter.print(aDesc.getTag());  aWriter.println(">");}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public void clear(){  Arrays.fill(elements,0);  size=0;}  }
class C{  @Deprecated public static boolean allowAttributeNameExceptions(){  return directoryServer.allowAttributeNameExceptions;}  }
class C{  public boolean containsExtensionElementURI(String uri){  if (null == m_ExtensionElementURIs)   return false;  return m_ExtensionElementURIs.contains(uri);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretChallengeResponseType createSharedSecretChallengeResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretChallengeResponseTypeImpl();}  }
class C{  public InitializationBuilder requireUserPlugins(PluginType... plugins){  Collections.addAll(subSystemsToInitialize,SubSystem.USER_PLUGINS);  this.pluginTypes.addAll(Arrays.asList(plugins));  return this;}  }
class C{  public static String applySuccessfulBackgroundToHtml(String html){  return DIV_OPEN_SUCCESSFUL_BACKGROUND + html + DIV_CLOSE;}  }
class C{  public void runLogin(){  Thread thread=Thread.currentThread();  String logFailedMessage=bundle.getString("loginFailed");  String logFailedError=null;  AuthenticationFailureReason failureReason=null;  AMAccountLockout amAccountLockout;  boolean loginSuccess=false;  try {    loginContext.login();    Subject subject=loginContext.getSubject();    authContext.getLoginState().setSubject(subject);    if (!authContext.getLoginState().isAuthValidForInternalUser()) {      if (debug.warningEnabled()) {        debug.warning("AMLoginContext.runLogin():auth failed, " + "using invalid realm name for internal user");      }      logFailedMessage=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_MODULE_DENIED,AuthUtils.ERROR_MESSAGE);      logFailedError="MODULEDENIED";      failureReason=MODULE_DENIED;      throw new AuthException(AMAuthErrorCode.AUTH_MODULE_DENIED,null);    }    debug.message("user authentication successful");    debug.message("searchUserProfile for Subject :");    boolean profileState=authContext.getLoginState().searchUserProfile(subject,indexType,indexName);    authContext.getLoginState().saveSubjectState();    loginSuccess=true;    if (!profileState) {      debug.error("Profile not found ");      logFailedMessage=bundle.getString("noUserProfile");      logFailedError="NOUSERPROFILE";      failureReason=NO_USER_PROFILE;      authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_PROFILE_ERROR);      isFailed=true;    } else {      amAccountLockout=new AMAccountLockout(authContext.getLoginState());      if (amAccountLockout.isLockedOut()) {        debug.message("User locked out!!");        logFailedMessage=bundle.getString("lockOut");        logFailedError="LOCKEDOUT";        failureReason=LOCKED_OUT;        authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_USER_LOCKED);        isFailed=true;      } else {        boolean accountExpired=false;        if (!authContext.getLoginState().ignoreProfile()) {          accountExpired=amAccountLockout.isAccountExpired();        }        if (accountExpired) {          debug.message("Account expired!!");          logFailedMessage=bundle.getString("accountExpired");          logFailedError="ACCOUNTEXPIRED";          failureReason=ACCOUNT_EXPIRED;          authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_ACCOUNT_EXPIRED);          isFailed=true;        } else {          if (debug.messageEnabled()) {            debug.message("authContext is : " + authContext);            debug.message("authContext.getLoginState() is : " + authContext.getLoginState());          }          updateLoginState(indexType,indexName,configName,orgDN);          boolean sessionActivated=authContext.getLoginState().activateSession(subject);          if (sessionActivated) {            authContext.getLoginState().logSuccess();            auditor.auditLoginSuccess(authContext.getLoginState());            if (amAccountLockout.isLockoutEnabled()) {              amAccountLockout.resetPasswdLockout(authContext.getLoginState().getUserUniversalId(authContext.getLoginState().getUserDN()),true);            }            loginStatus.setStatus(LoginStatus.AUTH_SUCCESS);            authContext.getLoginState().persistSession();            debug.message("login success");          } else {            logFailedMessage=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_MAX_SESSION_REACHED,AuthUtils.ERROR_MESSAGE);            logFailedError="MAXSESSIONREACHED";            failureReason=MAX_SESSION_REACHED;            throw new AuthException(AMAuthErrorCode.AUTH_MAX_SESSION_REACHED,null);          }        }      }    }  } catch (  InvalidPasswordException ipe) {    String failedUserId=ipe.getTokenId();    if (failedUserId == null) {      failedUserId=authContext.getLoginState().getFailureTokenId();    }    if (debug.messageEnabled()) {      debug.message("Invalid Password : failedUserId " + failedUserId);      debug.message("Invalid Password : Exception ",ipe);    }    if (failedUserId != null) {      amAccountLockout=new AMAccountLockout(authContext.getLoginState());      accountLocked=amAccountLockout.isLockedOut(failedUserId);      if ((!accountLocked) && (amAccountLockout.isLockoutEnabled())) {        amAccountLockout.invalidPasswd(failedUserId);        checkWarningCount(amAccountLockout);        accountLocked=amAccountLockout.isAccountLocked(failedUserId);      }    }    logFailedMessage=bundle.getString("invalidPasswd");    logFailedError="INVALIDPASSWORD";    failureReason=INVALID_PASSWORD;    if (accountLocked) {      authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_USER_LOCKED);      if (failedUserId != null) {        authContext.getLoginState().logFailed(failedUserId,"LOCKEDOUT");      } else {        authContext.getLoginState().logFailed("LOCKEDOUT");      }      auditor.auditLoginFailure(authContext.getLoginState(),LOCKED_OUT);    } else {      authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_LOGIN_FAILED);    }    isFailed=true;    authContext.setLoginException(ipe);  }catch (  AuthErrorCodeException e) {    if (debug.messageEnabled()) {      debug.message(e.getMessage());    }    isFailed=true;    java.util.Locale locale=com.sun.identity.shared.locale.Locale.getLocale(authContext.getLoginState().getLocale());    authContext.getLoginState().setModuleErrorMessage(e.getL10NMessage(locale));    authContext.getLoginState().setErrorCode(e.getAuthErrorCode());    authContext.setLoginException(e);  }catch (  MessageLoginException me) {    if (debug.messageEnabled()) {      debug.message("LOGINFAILED MessageAuthLoginException....");      debug.message("Exception ",me);    }    java.util.Locale locale=com.sun.identity.shared.locale.Locale.getLocale(authContext.getLoginState().getLocale());    authContext.getLoginState().setModuleErrorMessage(me.getL10NMessage(locale));    authContext.getLoginState().setErrorMessage(me.getL10NMessage(locale));    isFailed=true;    authContext.setLoginException(me);  }catch (  AuthLoginException le) {    authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_LOGIN_FAILED);    if (AMAuthErrorCode.AUTH_MODULE_DENIED.equals(le.getMessage())) {      if (debug.warningEnabled()) {        debug.warning("AMLoginContext.runLogin():auth failed, using invalid auth module name for internal user");      }      logFailedMessage=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_MODULE_DENIED,AuthUtils.ERROR_MESSAGE);      logFailedError="MODULEDENIED";      failureReason=MODULE_DENIED;      authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_MODULE_DENIED);    } else     if (AMAuthErrorCode.AUTH_TIMEOUT.equals(le.getMessage())) {      debug.message("LOGINFAILED Error Timed Out....");    } else     if (ISAuthConstants.EXCEED_RETRY_LIMIT.equals(le.getErrorCode())) {      debug.message("LOGINFAILED ExceedRetryLimit");    } else {      debug.message("LOGINFAILED Error....");    }    if (debug.messageEnabled()) {      debug.message("Exception : ",le);    }    isFailed=true;    if (authContext.getLoginState().isTimedOut()) {      logFailedMessage=bundle.getString("loginTimeout");      logFailedError="LOGINTIMEOUT";      failureReason=LOGIN_TIMEOUT;      authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_TIMEOUT);    } else     if (ISAuthConstants.EXCEED_RETRY_LIMIT.equals(le.getErrorCode())) {      authContext.getLoginState().setErrorMessage(exceedRetryLimit);      authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_USER_LOCKED_IN_DS);    } else     if (ISAuthConstants.SERVER_UNWILLING.equals(le.getErrorCode())) {      authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_ERROR);    }    authContext.setLoginException(le);  }catch (  AuthException e) {    if (debug.messageEnabled()) {      debug.message("Exception : " + e.getMessage());    }    isFailed=true;    authContext.getLoginState().setErrorCode(e.getErrorCode());    authContext.getLoginState().logFailed(bundle.getString("loginFailed"));    logFailedError=null;    authContext.setLoginException(new AuthLoginException(BUNDLE_NAME,"loginFailed",null,e));  }catch (  Exception e) {    debug.message("Error during login.. ");    if (debug.messageEnabled()) {      debug.message("Exception ",e);    }    isFailed=true;    authContext.getLoginState().setErrorCode(AMAuthErrorCode.AUTH_ERROR);    authContext.getLoginState().logFailed(bundle.getString("loginFailed"));    logFailedError=null;    authContext.setLoginException(new AuthLoginException(BUNDLE_NAME,"loginFailed",null,e));  }catch (  DSAMECallbackHandlerError error) {    debug.message("Caught error returned from DSAMEHandler");    return;  }  debug.message("Came to before if Failed loop");  if (isFailed) {    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }      if (authImpl != null) {        authImpl.incSsoServerAuthenticationFailureCount();      }    }    if (loginSuccess) {      authContext.getLoginState().setFailureModuleList(getSuccessModuleString(orgDN));    } else {      authContext.getLoginState().setFailureModuleList(getFailureModuleList(orgDN));    }    authContext.getLoginState().logFailed(logFailedMessage,logFailedError);    auditor.auditLoginFailure(authContext.getLoginState(),failureReason);    setErrorMsgAndTemplate();    loginStatus.setStatus(LoginStatus.AUTH_FAILED);    if (indexType == IndexType.USER) {      if (debug.messageEnabled()) {        debug.message("Set failureId in user based auth " + indexName);      }      authContext.getLoginState().setFailedUserId(indexName);    }  } else {    if (debug.messageEnabled()) {      debug.message("AMLoginContext.runLogin: calling incSsoServerAuthenticationSuccessCount");    }    if (MonitoringUtil.isRunning()) {      if (authImpl == null) {        authImpl=Agent.getAuthSvcMBean();      }    }    if (authImpl != null && !authContext.getLoginState().isNoSession()) {      authImpl.incSsoServerAuthenticationSuccessCount();    }  }  if (debug.messageEnabled()) {    debug.message("finished...login notify all threads\n" + "AMLoginContext:LoginStatus: " + loginStatus.getStatus());  }  if (isPureJAAS()) {    authThread.removeFromHash(thread,"timeoutHash");    authContext.getLoginState().setReceivedCallback(null,this);  }  isFailed=false;  nullifyUsedVars();}  }
class C{  public void printStackTrace(){  super.printStackTrace();  if (cause != null) {    cause.printStackTrace();  }}  }
class C{  public NO_MEMORY(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public FactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public int hashCode(){  int hashCode=0;  if (context == null)   return hashCode;  for (int i=0; i < context.length; i++) {    if (context[i] != null)     hashCode^=context[i].hashCode();  }  return hashCode;}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){  RepaintManager.currentManager(SunToolkit.targetToAppContext(this)).addDirtyRegion(this,x,y,width,height);}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject expr1=m_left.execute(xctxt);  if (!expr1.bool()) {    XObject expr2=m_right.execute(xctxt);    return expr2.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;  } else   return XBoolean.S_TRUE;}  }
class C{  public RealmLookupException(String errorCode,String realm){  super(IdRepoBundle.BUNDLE_NAME,errorCode,new Object[]{realm});  this.realm=realm;}  }
class C{  public boolean isLogEnabled(){  if (logger == null) {    return false;  } else {    return logger.isLogEnabled();  }}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  Stylesheet thisSheet=handler.getStylesheet();  WhitespaceInfoPaths paths=new WhitespaceInfoPaths(thisSheet);  setPropertiesFromAttributes(handler,rawName,attributes,paths);  Vector xpaths=paths.getElements();  for (int i=0; i < xpaths.size(); i++) {    WhiteSpaceInfo wsi=new WhiteSpaceInfo((XPath)xpaths.elementAt(i),true,thisSheet);    wsi.setUid(handler.nextUid());    thisSheet.setStripSpaces(wsi);  }  paths.clearElements();}  }
class C{  public ValidationMessage[] validate(PageData thePage){  TagLibraryValidator tlv=getTagLibraryValidator();  if (tlv == null)   return null;  String uri=getURI();  if (uri.startsWith("/")) {    uri=URN_JSPTLD + uri;  }  return tlv.validate(getPrefixString(),uri,thePage);}  }
class C{  public TableModelEvent(TableModel source,int firstRow,int lastRow,int column){  this(source,firstRow,lastRow,column,UPDATE);}  }
class C{  @Override public String toString(){  return String.format("name=%s, StoreLocation=%s, size=%s bytes, isFormField=%s, FieldName=%s",getName(),getStoreLocation(),Long.valueOf(getSize()),Boolean.valueOf(isFormField()),getFieldName());}  }
class C{  public static byte[] decode(String s){  return decode(s,NO_OPTIONS);}  }
class C{  public void printAll(Graphics g){  setFlag(IS_PRINTING_ALL,true);  try {    print(g);  }  finally {    setFlag(IS_PRINTING_ALL,false);  }}  }
class C{  @Override protected Object clone() throws CloneNotSupportedException {  throw new CloneNotSupportedException();}  }
class C{  public String createWebappLoader(String parent) throws Exception {  WebappLoader loader=new WebappLoader();  ObjectName pname=new ObjectName(parent);  Container container=getParentContainerFromParent(pname);  if (container instanceof Context) {    ((Context)container).setLoader(loader);  }  ObjectName oname=MBeanUtils.createObjectName(pname.getDomain(),loader);  return (oname.toString());}  }
class C{  public boolean hasMoreElements(){  return hasMoreTokens();}  }
class C{  public boolean addElement(Object obj){synchronized (nextTurn[containerNeeded - 1]) {    return nextTurn[containerNeeded - 1].add(obj);  }}  }
class C{  private void processInternalException(SSOToken token,UMSException ue,String defaultErrorCode) throws AMException {  try {    LdapException lex=(LdapException)ue.getRootCause();    if (lex != null) {switch (lex.getResult().getResultCode().asEnum()) {case CONSTRAINT_VIOLATION:        throw new AMException(ue.getMessage(),"19",ue);case TIME_LIMIT_EXCEEDED:      throw new AMException(token,"3",ue);case SIZE_LIMIT_EXCEEDED:    throw new AMException(token,"4",ue);case NOT_ALLOWED_ON_RDN:  throw new AMException(token,"967",ue);case ADMIN_LIMIT_EXCEEDED:throw new AMException(token,"968",ue);default :throw new AMException(token,defaultErrorCode,ue);}} else {throw new AMException(token,defaultErrorCode,ue);}} catch (RuntimeException ex) {if (debug.messageEnabled()) {debug.message("Unknown exception in process " + "internal exception",ex);}throw new AMException(token,defaultErrorCode);}}  }
class C{  public XMLDecoder(InputStream in,Object owner,ExceptionListener exceptionListener){  this(in,owner,exceptionListener,null);}  }
class C{  @Override public boolean onOptionsItemSelected(final MenuItem item){  return delegate.onOptionsItemSelected(item);}  }
class C{  public FancyLoader(ClassLoader parent){  super(parent);  try {    mDexClass=parent.loadClass("dalvik.system.DexFile");  } catch (  ClassNotFoundException cnfe) {  }}  }
class C{  public DataOutputStream(OutputStream out){  super(out);}  }
class C{  public boolean lockedDueToMaximumResetAge(){  if (passwordPolicy.getMaxPasswordResetAge() <= 0L) {    if (logger.isTraceEnabled()) {      logger.trace("Returning false for user %s because there is no maximum reset age.",userDNString);    }    return false;  }  if (!mustChangePassword()) {    if (logger.isTraceEnabled()) {      logger.trace("Returning false for user %s because the user's password has not been reset.",userDNString);    }    return false;  }  long maxResetTime=getPasswordChangedTime() + 1000L * passwordPolicy.getMaxPasswordResetAge();  boolean locked=maxResetTime < currentTime;  if (logger.isTraceEnabled()) {    logger.trace("Returning %b for user %s after comparing the current and max reset times.",locked,userDNString);  }  return locked;}  }
class C{  public static void invalid(){  getInstance().invalidate();  if (debug.messageEnabled()) {    debug.message("AdminTokenAction:invalid called");  }}  }
class C{  public boolean keepProcessingLine(){  return keepProcessingLine;}  }
class C{  public static void stop(JComponent c){  sharedInstance._stop(c);}  }
class C{  @Override public void onActivityResult(final int requestCode,final int resultCode,final Intent data){  delegate.onActivityResult(requestCode,resultCode,data);}  }
class C{  public static void appendToList(List<String> list,String[] array){  if ((array != null) && (array.length > 0)) {    for (int i=0; i < array.length; i++) {      list.add(array[i]);    }  }}  }
class C{  public void refresh(){  this.initialize();}  }
class C{  private ResourceType createTypeFromXml(final String typeName,final NodeList childNodes){  ResourceType resourceType=new ResourceType(typeName);  for (int i=0; i < childNodes.getLength(); i++) {    Node childNode=childNodes.item(i);    if ("url".equals(childNode.getNodeName())) {      String url=childNode.getNodeName().trim();      resourceType.setUrl(url);    }    if ("directory".equals(childNode.getNodeName())) {      String url=childNode.getNodeName().trim();      resourceType.setPath(url);    }    if ("maxSize".equals(childNode.getNodeName())) {      resourceType.setMaxSize(childNode.getNodeName().trim());    }    if ("allowedExtensions".equals(childNode.getNodeName())) {      resourceType.setAllowedExtensions(childNode.getNodeName().trim());    }    if ("deniedExtensions".equals(childNode.getNodeName())) {      resourceType.setDeniedExtensions(childNode.getNodeName().trim());    }  }  return resourceType;}  }
class C{  public void handleTblBootstrapResOffButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SMDiscoveryBootstrapRefOffAddViewBean vb=(SMDiscoveryBootstrapRefOffAddViewBean)getViewBean(SMDiscoveryBootstrapRefOffAddViewBean.class);    removePageSessionAttribute(SMDiscoveryBootstrapRefOffAddViewBean.PROPERTY_ATTRIBUTE);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public boolean isCanceled(){  return isCanceled;}  }
class C{  protected static void sendErrorPage(HttpServletRequest request,HttpServletResponse response,String providerAlias){  try {    String retURL="";    String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);    if (metaManager != null) {      String hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);      String hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);      BaseConfigType hostedConfig=null;      if (hostedEntityId != null && IFSConstants.IDP.equalsIgnoreCase(hostedRole)) {        hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);      } else       if (hostedEntityId != null && IFSConstants.SP.equalsIgnoreCase(hostedRole)) {        hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);      }      retURL=FSServiceUtils.getLogoutDonePageURL(request,hostedConfig,providerAlias);      if (retURL == null || retURL.length() < 1) {        FSServiceUtils.showErrorPage(response,FSServiceUtils.getErrorPageURL(request,hostedConfig,providerAlias),IFSConstants.LOGOUT_FAILED,IFSConstants.METADATA_ERROR);      } else {        StringBuffer finalReturnURL=new StringBuffer();        finalReturnURL.append(retURL);        char delimiter;        if (retURL.indexOf(IFSConstants.QUESTION_MARK) < 0) {          delimiter=IFSConstants.QUESTION_MARK;        } else {          delimiter=IFSConstants.AMPERSAND;        }        finalReturnURL.append(delimiter).append(IFSConstants.LOGOUT_STATUS).append(IFSConstants.EQUAL_TO).append(IFSConstants.LOGOUT_FAILURE);        response.sendRedirect(finalReturnURL.toString());      }      return;    } else {      FSUtils.debug.error("Meta manager instance is null");      response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("failedToReadDataStore"));      return;    }  } catch (  IOException ex) {    FSUtils.debug.error("FSSingleLogoutServlet: IOException caught:",ex);    return;  }catch (  IDFFMetaException e) {    FSUtils.debug.error("FSSingleLogoutServlet:IDFFMetaException:",e);    return;  }}  }
class C{  private void encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int x0=BytesTo32Bits(src,srcIndex) ^ gSubKeys[INPUT_WHITEN];  int x1=BytesTo32Bits(src,srcIndex + 4) ^ gSubKeys[INPUT_WHITEN + 1];  int x2=BytesTo32Bits(src,srcIndex + 8) ^ gSubKeys[INPUT_WHITEN + 2];  int x3=BytesTo32Bits(src,srcIndex + 12) ^ gSubKeys[INPUT_WHITEN + 3];  int k=ROUND_SUBKEYS;  int t0, t1;  for (int r=0; r < ROUNDS; r+=2) {    t0=Fe32_0(x0);    t1=Fe32_3(x1);    x2^=t0 + t1 + gSubKeys[k++];    x2=x2 >>> 1 | x2 << 31;    x3=(x3 << 1 | x3 >>> 31) ^ (t0 + 2 * t1 + gSubKeys[k++]);    t0=Fe32_0(x2);    t1=Fe32_3(x3);    x0^=t0 + t1 + gSubKeys[k++];    x0=x0 >>> 1 | x0 << 31;    x1=(x1 << 1 | x1 >>> 31) ^ (t0 + 2 * t1 + gSubKeys[k++]);  }  Bits32ToBytes(x2 ^ gSubKeys[OUTPUT_WHITEN],dst,dstIndex);  Bits32ToBytes(x3 ^ gSubKeys[OUTPUT_WHITEN + 1],dst,dstIndex + 4);  Bits32ToBytes(x0 ^ gSubKeys[OUTPUT_WHITEN + 2],dst,dstIndex + 8);  Bits32ToBytes(x1 ^ gSubKeys[OUTPUT_WHITEN + 3],dst,dstIndex + 12);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public static int rgbFromCmyk(float[] cmyk){  float cyan=cmyk[0];  float magenta=cmyk[1];  float yellow=cmyk[2];  float black=cmyk[3];  int red=(int)((1.0f - Math.min(1.0f,cyan * (1.0f - black) + black)) * 255);  int green=(int)((1.0f - Math.min(1.0f,magenta * (1.0f - black) + black)) * 255);  int blue=(int)((1.0f - Math.min(1.0f,yellow * (1.0f - black) + black)) * 255);  return ((0xff & red) << 16) + ((0xff & green) << 8) + (0xff & blue);}  }
class C{  public IIOImage(RenderedImage image,List<? extends BufferedImage> thumbnails,IIOMetadata metadata){  if (image == null) {    throw new IllegalArgumentException("image == null!");  }  this.image=image;  this.raster=null;  this.thumbnails=thumbnails;  this.metadata=metadata;}  }
class C{  private AttributeSet removeHTMLTags(AttributeSet old,AttributeSet attr){  if (!(attr instanceof LargeConversionSet) && !(attr instanceof SmallConversionSet)) {    Enumeration names=attr.getAttributeNames();    while (names.hasMoreElements()) {      Object key=names.nextElement();      if (key instanceof StyleConstants) {        HTML.Tag tag=HTML.getTagForStyleConstantsKey((StyleConstants)key);        if (tag != null && old.isDefined(tag)) {          old=super.removeAttribute(old,tag);        }      }    }  }  return old;}  }
class C{  private void processMenuKeyEvent(MenuKeyEvent e){switch (e.getID()) {case KeyEvent.KEY_PRESSED:    fireMenuKeyPressed(e);  break;case KeyEvent.KEY_RELEASED:fireMenuKeyReleased(e);break;case KeyEvent.KEY_TYPED:fireMenuKeyTyped(e);break;default :break;}}  }
class C{  public static int sizeOfObject(){  return 4;}  }
class C{  @Override public String toString(){  return "DecimalStyle[" + zeroDigit + positiveSign+ negativeSign+ decimalSeparator+ "]";}  }
class C{  public final void testRead01() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        assertTrue("retval",((byte)dis.read() == myMessage[i]));      }      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  @Override public boolean isRemote(){  return isRemote;}  }
class C{  private Node tryAppend(Node s,boolean haveData){  for (Node t=tail, p=t; ; ) {    Node n, u;    if (p == null && (p=head) == null) {      if (casHead(null,s))       return s;    } else     if (p.cannotPrecede(haveData))     return null; else     if ((n=p.next) != null)     p=p != t && t != (u=tail) ? (t=u) : (p != n) ? n : null; else     if (!p.casNext(null,s))     p=p.next; else {      if (p != t) {        while ((tail != t || !casTail(t,s)) && (t=tail) != null && (s=t.next) != null && (s=s.next) != null && s != t)         ;      }      return p;    }  }}  }
class C{  private boolean conditionCH0(String value,int index){  if (index != 0) {    return false;  } else   if (!contains(value,index + 1,5,"HARAC","HARIS") && !contains(value,index + 1,3,"HOR","HYM","HIA","HEM")) {    return false;  } else   if (contains(value,0,5,"CHORE")) {    return false;  } else {    return true;  }}  }
class C{  private String pathInEnumFile(EnumType enumType){  List<String> path=new LinkedList<>();  path.add(enumType.getSimpleName());  ProtoElement elt=enumType.getParent();  while (elt.getParent() != null) {    path.add(0,elt.getSimpleName());    elt=elt.getParent();  }  return Joiner.on(".").join(path);}  }
class C{  public FrameBodyTPE2(){}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  public WebappLoader(){  this(null);}  }
class C{  public GoverningStructureRuleVirtualAttributeProvider(){  super();}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    StyledEditorKit kit=getStyledEditorKit(editor);    MutableAttributeSet attr=kit.getInputAttributes();    boolean italic=(StyleConstants.isItalic(attr)) ? false : true;    SimpleAttributeSet sas=new SimpleAttributeSet();    StyleConstants.setItalic(sas,italic);    setCharacterAttributes(editor,sas,false);  }}  }
class C{  public boolean replicateSchema(){  return replicateSchema;}  }
class C{  public static Foo create(long fooId){  return getPersistence().create(fooId);}  }
class C{  public String toString(){  return getClass().getName();}  }
class C{  public void addNodes(NodeList nodelist){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null != nodelist) {    int nChildren=nodelist.getLength();    for (int i=0; i < nChildren; i++) {      Node obj=nodelist.item(i);      if (null != obj) {        addElement(obj);      }    }  }}  }
class C{  public Set createGroupContainers(Set groupContainerNames) throws AMException, SSOException {  Iterator iter=groupContainerNames.iterator();  Set groupContainers=new HashSet();  while (iter.hasNext()) {    String groupContainerDN=AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER) + "=" + ((String)iter.next())+ ","+ entryDN;    AMGroupContainerImpl groupContainerImpl=new AMGroupContainerImpl(token,groupContainerDN);    groupContainerImpl.create();    groupContainers.add(groupContainerImpl);  }  return groupContainers;}  }
class C{  @Override public void onMapReady(GoogleMap googleMap){  mMap=googleMap;  LatLng sydney=new LatLng(-34,151);  mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));  mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));}  }
class C{  public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || this.getClass() != o.getClass()) {    return false;  }  return Arrays.equals(oid,((ObjectIdentifier)o).oid);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  Node secondChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  textNode=doc.createTextNode("");  retval=titleAttr.appendChild(textNode);  ((Element)testNode).normalize();  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Yesterday",value);  secondChild=firstChild.getNextSibling();  assertNull("secondChildIsNull",secondChild);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  validateData();  StringBuffer xml=new StringBuffer(300);  xml.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xml.append(SAML2Constants.ECP_PREFIX);  }  xml.append(REQUEST);  if (declareNS) {    xml.append(SAML2Constants.SPACE).append(SAML2Constants.ECP_DECLARE_STR).append(SAML2Constants.SPACE).append(SAML2Constants.SOAP_ENV_DECLARE_STR);  }  xml.append(SAML2Constants.SPACE).append(SAML2Constants.SOAP_ENV_PREFIX).append(SAML2Constants.MUST_UNDERSTAND).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(mustUnderstand.toString()).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.SOAP_ENV_PREFIX).append(SAML2Constants.ACTOR).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(actor).append(SAML2Constants.QUOTE);  if (providerName != null) {    xml.append(SAML2Constants.SPACE).append(SAML2Constants.PROVIDER_NAME).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(providerName).append(SAML2Constants.QUOTE);  }  if (isPassive != null) {    xml.append(SAML2Constants.SPACE).append(SAML2Constants.ISPASSIVE).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(isPassive.toString()).append(SAML2Constants.QUOTE);  }  xml.append(SAML2Constants.END_TAG).append(SAML2Constants.NEWLINE).append(issuer.toXMLString(includeNSPrefix,declareNS));  if (idpList != null) {    xml.append(SAML2Constants.NEWLINE).append(idpList.toXMLString(includeNSPrefix,declareNS));  }  xml.append(SAML2Constants.NEWLINE).append(SAML2Constants.ECP_END_TAG).append(REQUEST).append(SAML2Constants.END_TAG);  return xml.toString();}  }
class C{  public static void copyToClipboard(String text){  final StringSelection stringSelection=new StringSelection(text);  final Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();  clipboard.setContents(stringSelection,stringSelection);}  }
class C{  @Override public Writer append(CharSequence csq,int start,int end) throws IOException {  try {    beforeWrite(end - start);    out.append(csq,start,end);    afterWrite(end - start);  } catch (  IOException e) {    handleIOException(e);  }  return this;}  }
class C{  public FullFrameRect(Texture2dProgram program){  mProgram=program;}  }
class C{  ByteStringBuilder toNormalizedByteString(final ByteStringBuilder builder){switch (size()) {case 0:    if (this == MIN_VALUE) {      builder.appendByte(NORMALIZED_RDN_SEPARATOR);    } else {      builder.appendByte(NORMALIZED_AVA_SEPARATOR);    }  break;case 1:builder.appendByte(NORMALIZED_RDN_SEPARATOR);getFirstAVA().toNormalizedByteString(builder);break;default :builder.appendByte(NORMALIZED_RDN_SEPARATOR);Iterator<AVA> it=getSortedAvas();it.next().toNormalizedByteString(builder);while (it.hasNext()) {builder.appendByte(NORMALIZED_AVA_SEPARATOR);it.next().toNormalizedByteString(builder);}break;}return builder;}  }
class C{  public static String decode(String encoded,AMEncryption encr){  if (checkCaller()) {    try {      ISSecurityPermission isp=new ISSecurityPermission("access","adminpassword");      if (securityManager != null) {        securityManager.checkPermission(isp);      }    } catch (    SecurityException e) {      Debug debug=Debug.getInstance("amSDK");      debug.error("Security Alert: Unauthorized access to " + "Encoding/Decoding password utility: Returning NULL",e);      return null;    }  }  if (encoded == null || encoded.length() == 0) {    return (null);  }  byte[] encData=null;  encData=Base64.decode(encoded.trim());  if (encData == null) {    return null;  }  byte[] rawData=encr.decrypt(encData);  if (rawData == null) {    return (null);  }  String answer=null;  try {    answer=new String(rawData,"utf-8");  } catch (  UnsupportedEncodingException uue) {    Debug debug=Debug.getInstance("amSDK");    debug.error("Crypt:: Unsupported encoding UTF-8",uue);    answer=new String(rawData);  }  return (answer);}  }
class C{  protected void scanResourcePaths(String startPath) throws IOException, SAXException {  boolean found=false;  Set<String> dirList=context.getResourcePaths(startPath);  if (dirList != null) {    for (    String path : dirList) {      if (path.startsWith("/WEB-INF/classes/")) {      } else       if (path.startsWith("/WEB-INF/lib/")) {      } else       if (path.endsWith("/")) {        scanResourcePaths(path);      } else       if (path.startsWith("/WEB-INF/tags/")) {        if (path.endsWith("/implicit.tld")) {          found=true;          parseTld(path);        }      } else       if (path.endsWith(TLD_EXT)) {        found=true;        parseTld(path);      }    }  }  if (found) {    if (log.isDebugEnabled()) {      log.debug(Localizer.getMessage("jsp.tldCache.tldInResourcePath",startPath));    }  } else {    if (log.isDebugEnabled()) {      log.debug(Localizer.getMessage("jsp.tldCache.noTldInResourcePath",startPath));    }  }}  }
class C{  public E peek(){  if (isEmpty()) {    return null;  }  return elements[0];}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LCommentElement createLCommentElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LCommentElementImpl();}  }
class C{  public final CertPathBuilderResult build(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  return builderSpi.engineBuild(params);}  }
class C{  public Line(float x1,float y1,float x2,float y2){  p1=new Point(x1,y1);  p2=new Point(x2,y2);}  }
class C{  public final boolean equals(Object anObject){  if (anObject instanceof AWTKeyStroke) {    AWTKeyStroke ks=(AWTKeyStroke)anObject;    return (ks.keyChar == keyChar && ks.keyCode == keyCode && ks.onKeyRelease == onKeyRelease && ks.modifiers == modifiers);  }  return false;}  }
class C{  public static void doAsPrivilege(final String methodName,final Servlet targetObject) throws Exception {  doAsPrivilege(methodName,targetObject,null,null,null);}  }
class C{  public void addChild(PdfLayer childLayer){  if (childLayer.parent != null)   throw new IllegalArgumentException("Illegal argument: childLayer");  childLayer.parent=this;  if (children == null)   children=new ArrayList<>();  children.add(childLayer);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement1;  Element newElement2;  String attribute1;  String attribute2;  String nodeName1;  String nodeName2;  doc=(Document)load("hc_staff",true);  newElement1=doc.createElement("ACRONYM");  newElement2=doc.createElement("acronym");  newElement1.setAttribute("lang","EN");  newElement2.setAttribute("title","Dallas");  attribute1=newElement1.getAttribute("lang");  attribute2=newElement2.getAttribute("title");  assertEquals("attrib1","EN",attribute1);  assertEquals("attrib2","Dallas",attribute2);  nodeName1=newElement1.getNodeName();  nodeName2=newElement2.getNodeName();  assertEqualsAutoCase("element","nodeName1","ACRONYM",nodeName1);  assertEqualsAutoCase("element","nodeName2","acronym",nodeName2);}  }
class C{  public IndexCreatedEvent status(UUID id){  logger.debug("Checking index creation status: " + id.toString());  IndexCreatedEvent toReturn=statusRepo.read(id);  return toReturn;}  }
class C{  public void initialize(){  Thread athread=new Thread(new InitializeThread());  athread.setName(classname + "initialize");  athread.setPriority(Thread.MIN_PRIORITY);  athread.start();}  }
class C{  public FREE_MEM(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public void fireHyperlinkUpdate(HyperlinkEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == HyperlinkListener.class) {      ((HyperlinkListener)listeners[i + 1]).hyperlinkUpdate(e);    }  }}  }
class C{  public LongAccumulator(LongBinaryOperator accumulatorFunction,long identity){  this.function=accumulatorFunction;  base=this.identity=identity;}  }
class C{  private final void stop(){  logMessage(thread.getName() + " received stop() request.");  stopped=true;  thread.interrupt();}  }
class C{  public PotionEffect(PotionEffectType type,int duration,int amplifier,boolean ambient,boolean particles,Color color){  Validate.notNull(type,"effect type cannot be null");  this.type=type;  this.duration=duration;  this.amplifier=amplifier;  this.ambient=ambient;  this.particles=particles;  this.color=color;}  }
class C{  public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){  updateChildren(e,a);  Rectangle alloc=((a != null) && isAllocationValid()) ? getInsideAllocation(a) : null;  int pos=e.getOffset();  View v=getViewAtPosition(pos,alloc);  if (v != null) {    v.removeUpdate(e,alloc,f);  }}  }
class C{  protected void fireStartEntity(String name) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name);  }}  }
class C{  public DelegationViewBean(){  super("Delegation");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public void clear(){  al.clear();}  }
class C{  public synchronized void reset(){  count=0;}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  private void enforceClientIP(final String storedClientIP) throws AuthLoginException {  final String clientIP=ClientUtils.getClientIPAddress(getHttpServletRequest());  if (storedClientIP == null || storedClientIP.isEmpty()) {    DEBUG.message("Client IP not stored when persistent cookie was issued.");    throw new AuthLoginException(AUTH_RESOURCE_BUNDLE_NAME,"authFailedClientIPDifferent",null);  } else   if (clientIP == null || clientIP.isEmpty()) {    DEBUG.message("Client IP could not be retrieved from request.");    throw new AuthLoginException(AUTH_RESOURCE_BUNDLE_NAME,"authFailedClientIPDifferent",null);  } else   if (!storedClientIP.equals(clientIP)) {    DEBUG.message("Client IP not the same, original: " + storedClientIP + ", request: "+ clientIP);    throw new AuthLoginException(AUTH_RESOURCE_BUNDLE_NAME,"authFailedClientIPDifferent",null);  }}  }
class C{  public void append(NSString s){  append(s.getContent());}  }
class C{  public Area createTransformedArea(AffineTransform t){  Area a=new Area(this);  a.transform(t);  return a;}  }
class C{  public Response serveFile(String uri,Properties header,Properties params){  Response res=null;  String handler=null;  String key=null;  String fileName=null;  if (uri.indexOf('?') >= 0)   uri=uri.substring(0,uri.indexOf('?'));  if (uri.charAt(0) == '/')   uri=uri.substring(1);  int indexFilename=uri.lastIndexOf('/') + 1;  if ((indexFilename != 0) && (indexFilename < uri.length())) {    fileName=uri.substring(indexFilename);    uri=uri.substring(0,indexFilename - 1);  } else {    return new Response(HTTP_FORBIDDEN,"Forbidden.");  }  String[] parts=uri.split("!");  if ((parts.length == 0) || (parts.length > 2)) {    return new Response(HTTP_FORBIDDEN,"Forbidden.");  }  handler=parts[0];  if (parts.length == 2) {    key=parts[1];    if (key.length() < 43) {      showText("Invalid link");      return new Response(HTTP_NOTFOUND,"Error 404, file not found.");    }  }  MegaNode node=megaApi.getNodeByHandle(MegaApiAndroid.base64ToHandle(handler));  if (node == null) {    node=megaApiFolder.getNodeByHandle(MegaApiAndroid.base64ToHandle(handler));    if (node == null) {      showText("File not found");      return new Response(HTTP_NOTFOUND,"Error 404, file not found.");    } else {      folderLink=true;    }  } else {    folderLink=false;  }  try {    fileName=URLDecoder.decode(fileName,"UTF-8");  } catch (  UnsupportedEncodingException e) {  }  String nodeName=node.getName();  if (fileName.compareTo(nodeName) != 0) {    int extensionIndex=nodeName.lastIndexOf('.');    if (extensionIndex < 0)     return new Response(HTTP_NOTFOUND,"Error 404, file not found.");    if (fileName.length() <= extensionIndex) {      return new Response(HTTP_NOTFOUND,"Error 404, file not found.");    }    String baseName=fileName.substring(0,extensionIndex + 1);    if (folderLink) {      node=megaApiFolder.getChildNode(megaApiFolder.getParentNode(node),fileName);    } else {      node=megaApi.getChildNode(megaApi.getParentNode(node),fileName);    }    if ((node == null) || !node.getName().startsWith(baseName))     return new Response(HTTP_NOTFOUND,"Error 404, file not found.");    showText("SUBTITLE found!");  }  String etag=handler;  long startFrom=0;  long endAt=-1;  String range=header.getProperty("range");  if (range != null) {    if (range.startsWith("bytes=")) {      range=range.substring("bytes=".length());      int minus=range.indexOf('-');      try {        if (minus > 0) {          startFrom=Long.parseLong(range.substring(0,minus));          endAt=Long.parseLong(range.substring(minus + 1));        }      } catch (      NumberFormatException nfe) {      }    }  }  long fileLen=node.getSize();  if (range != null && startFrom >= 0) {    if (startFrom >= fileLen) {      res=new Response(HTTP_RANGE_NOT_SATISFIABLE,"");      res.addHeader("Content-Range","bytes 0-0/" + fileLen);      res.addHeader("ETag",etag);    } else {      if (endAt < 0)       endAt=fileLen - 1;      long newLen=endAt - startFrom + 1;      if (newLen < 0)       newLen=0;      final long dataLen=newLen;      res=new Response(node,HTTP_PARTIALCONTENT,key,startFrom,endAt);      res.addHeader("Content-Length","" + dataLen);      res.addHeader("Content-Range","bytes " + startFrom + "-"+ endAt+ "/"+ fileLen);      res.addHeader("ETag",etag);    }  } else {    if (etag.equals(header.getProperty("if-none-match")))     res=new Response(HTTP_NOTMODIFIED,""); else {      res=new Response(node,HTTP_OK,key,0,fileLen - 1);      res.addHeader("Content-Length","" + fileLen);      res.addHeader("ETag",etag);    }  }  res.addHeader("Accept-Ranges","bytes");  return res;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String04() throws Exception {  for (  String validValue : getValidValues()) {    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(validValue,getDefaultProviderName());    assertTrue("Not TrustManagerFactory object",trustMF instanceof TrustManagerFactory);    assertEquals("Invalid algorithm",trustMF.getAlgorithm(),validValue);    assertEquals("Invalid provider",trustMF.getProvider(),getDefaultProvider());  }}  }
class C{  private long toLong(){  assert (intLen <= 2) : "this MutableBigInteger exceeds the range of long";  if (intLen == 0)   return 0;  long d=value[offset] & LONG_MASK;  return (intLen == 2) ? d << 32 | (value[offset + 1] & LONG_MASK) : d;}  }
class C{  public MLet(URL[] urls,ClassLoader parent,boolean delegateToCLR){  super(urls,parent);  init(delegateToCLR);}  }
class C{  public WildcardFileFilter(String[] wildcards,IOCase caseSensitivity){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard array must not be null");  }  this.wildcards=new String[wildcards.length];  System.arraycopy(wildcards,0,this.wildcards,0,wildcards.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public InitializationException(LocalizableMessage message){  super(message);}  }
class C{  private void parseMinorVersion(String minorVer) throws FSMsgException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFederationTerminationNotification(Element): " + "invalid MinorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion != IFSConstants.FF_12_PROTOCOL_MINOR_VERSION && minorVersion != IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      FSUtils.debug.error("FSFedTerminationNot(Element):" + " MinorVersion of the Response is too high.");      throw new FSMsgException("responseVersionTooHigh",null);    } else {      FSUtils.debug.error("FSFedTerminationNot(Element): " + " MinorVersion of the Response is too low:" + minorVersion);      throw new FSMsgException("responseVersionTooLow",null);    }  }}  }
class C{  public String toString(){  return attrSchema.toString();}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public void signalStatusChange(ServerStatus newStatus){  try {    connectedRS.get().session.publish(new ChangeStatusMsg(ServerStatus.INVALID_STATUS,newStatus));  } catch (  IOException ex) {    logger.error(ERR_EXCEPTION_SENDING_CS,getBaseDN(),getServerId(),ex.getLocalizedMessage() + " " + stackTraceToSingleLineString(ex));  }}  }
class C{  public final void testIdentityScopeString(){  is=new IdentityScopeStub("Aleksei Semenov");  assertNotNull(is);  assertEquals("Aleksei Semenov",is.getName());}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public void sendStatus(){  write(Constants.HTTP_11_BYTES);  headerBuffer[pos++]=Constants.SP;  int status=response.getStatus();switch (status) {case 200:    write(Constants._200_BYTES);  break;case 400:write(Constants._400_BYTES);break;case 404:write(Constants._404_BYTES);break;default :write(status);}headerBuffer[pos++]=Constants.SP;headerBuffer[pos++]=Constants.CR;headerBuffer[pos++]=Constants.LF;}  }
class C{  @Override public String toSQL(){  return sb.toString();}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  protected byte[] BuildNewFile(int Font){  OutputList=new LinkedList<>();  CopyHeader();  BuildIndexHeader(1,1,1);  OutputList.addLast(new UInt8Item((char)(1 + fonts[Font].name.length())));  OutputList.addLast(new StringItem(fonts[Font].name));  BuildIndexHeader(1,2,1);  OffsetItem topdictIndex1Ref=new IndexOffsetItem(2);  OutputList.addLast(topdictIndex1Ref);  IndexBaseItem topdictBase=new IndexBaseItem();  OutputList.addLast(topdictBase);  OffsetItem charsetRef=new DictOffsetItem();  OffsetItem charstringsRef=new DictOffsetItem();  OffsetItem fdarrayRef=new DictOffsetItem();  OffsetItem fdselectRef=new DictOffsetItem();  OffsetItem privateRef=new DictOffsetItem();  if (!fonts[Font].isCID) {    OutputList.addLast(new DictNumberItem(fonts[Font].nstrings));    OutputList.addLast(new DictNumberItem(fonts[Font].nstrings + 1));    OutputList.addLast(new DictNumberItem(0));    OutputList.addLast(new UInt8Item((char)12));    OutputList.addLast(new UInt8Item((char)30));    OutputList.addLast(new DictNumberItem(fonts[Font].nglyphs));    OutputList.addLast(new UInt8Item((char)12));    OutputList.addLast(new UInt8Item((char)34));  }  seek(topdictOffsets[Font]);  while (getPosition() < topdictOffsets[Font + 1]) {    int p1=getPosition();    getDictItem();    int p2=getPosition();    if ("Encoding".equals(key) || "Private".equals(key) || "FDSelect".equals(key)|| "FDArray".equals(key)|| "charset".equals(key)|| "CharStrings".equals(key)) {    } else {      OutputList.addLast(new RangeItem(buf,p1,p2 - p1));    }  }  CreateKeys(fdarrayRef,fdselectRef,charsetRef,charstringsRef);  OutputList.addLast(new IndexMarkerItem(topdictIndex1Ref,topdictBase));  if (fonts[Font].isCID)   OutputList.addLast(getEntireIndexRange(stringIndexOffset)); else   CreateNewStringIndex(Font);  OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewGSubrsIndex)),0,NewGSubrsIndex.length));  if (fonts[Font].isCID) {    OutputList.addLast(new MarkerItem(fdselectRef));    if (fonts[Font].fdselectOffset >= 0)     OutputList.addLast(new RangeItem(buf,fonts[Font].fdselectOffset,fonts[Font].FDSelectLength)); else     CreateFDSelect(fdselectRef,fonts[Font].nglyphs);    OutputList.addLast(new MarkerItem(charsetRef));    OutputList.addLast(new RangeItem(buf,fonts[Font].charsetOffset,fonts[Font].CharsetLength));    if (fonts[Font].fdarrayOffset >= 0) {      OutputList.addLast(new MarkerItem(fdarrayRef));      Reconstruct(Font);    } else     CreateFDArray(fdarrayRef,privateRef,Font);  } else {    CreateFDSelect(fdselectRef,fonts[Font].nglyphs);    CreateCharset(charsetRef,fonts[Font].nglyphs);    CreateFDArray(fdarrayRef,privateRef,Font);  }  if (fonts[Font].privateOffset >= 0) {    IndexBaseItem PrivateBase=new IndexBaseItem();    OutputList.addLast(PrivateBase);    OutputList.addLast(new MarkerItem(privateRef));    OffsetItem Subr=new DictOffsetItem();    CreateNonCIDPrivate(Font,Subr);    CreateNonCIDSubrs(Font,PrivateBase,Subr);  }  OutputList.addLast(new MarkerItem(charstringsRef));  OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewCharStringsIndex)),0,NewCharStringsIndex.length));  int[] currentOffset=new int[1];  currentOffset[0]=0;  for (  Item item : OutputList) {    item.increment(currentOffset);  }  for (  Item item : OutputList) {    item.xref();  }  int size=currentOffset[0];  byte[] b=new byte[size];  for (  Item item : OutputList) {    item.emit(b);  }  return b;}  }
class C{  public void testFloatValueBug2482(){  String a="2147483649";  float result=2.14748365E9f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  public Templates newTemplates(Source source) throws TransformerConfigurationException {  String baseID=source.getSystemId();  if (null != baseID) {    baseID=SystemIDResolver.getAbsoluteURI(baseID);  }  if (source instanceof DOMSource) {    DOMSource dsource=(DOMSource)source;    Node node=dsource.getNode();    if (null != node)     return processFromNode(node,baseID); else {      String messageStr=XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_DOMSOURCE_INPUT,null);      throw new IllegalArgumentException(messageStr);    }  }  TemplatesHandler builder=newTemplatesHandler();  builder.setSystemId(baseID);  try {    InputSource isource=SAXSource.sourceToInputSource(source);    isource.setSystemId(baseID);    XMLReader reader=null;    if (source instanceof SAXSource)     reader=((SAXSource)source).getXMLReader();    if (null == reader) {      try {        javax.xml.parsers.SAXParserFactory factory=javax.xml.parsers.SAXParserFactory.newInstance();        factory.setNamespaceAware(true);        if (m_isSecureProcessing) {          try {            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);          } catch (          org.xml.sax.SAXException se) {          }        }        javax.xml.parsers.SAXParser jaxpParser=factory.newSAXParser();        reader=jaxpParser.getXMLReader();      } catch (      javax.xml.parsers.ParserConfigurationException ex) {        throw new org.xml.sax.SAXException(ex);      }catch (      javax.xml.parsers.FactoryConfigurationError ex1) {        throw new org.xml.sax.SAXException(ex1.toString());      }catch (      NoSuchMethodError ex2) {      }catch (      AbstractMethodError ame) {      }    }    if (null == reader)     reader=XMLReaderFactory.createXMLReader();    reader.setContentHandler(builder);    reader.parse(isource);  } catch (  org.xml.sax.SAXException se) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(new TransformerException(se));      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    } else {      throw new TransformerConfigurationException(se.getMessage(),se);    }  }catch (  Exception e) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(new TransformerException(e));        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    } else {      throw new TransformerConfigurationException(e.getMessage(),e);    }  }  return builder.getTemplates();}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public int readBERLength(){  int newPos=pos + 1;  if (newPos > sequence.length()) {    throw new IndexOutOfBoundsException();  }  int length=sequence.byteAt(pos) & 0x7F;  if (length != sequence.byteAt(pos)) {    final int numLengthBytes=length;    newPos=pos + 1 + numLengthBytes;    if (numLengthBytes > 4 || newPos > sequence.length()) {      throw new IndexOutOfBoundsException();    }    length=0x00;    for (int i=pos + 1; i < newPos; i++) {      length=length << 8 | sequence.byteAt(i) & 0xFF;    }  }  pos=newPos;  return length;}  }
class C{  private static void modifyActionToSupportUserAccount(SQLiteDatabase db,String appName,String actionName,String usernameParamName,String passwordParamName,String userAccountParamName,long dataTypeIdAccount){  RegisteredAppDbAdapter appDbAdapter=new RegisteredAppDbAdapter(db);  Cursor cursor=appDbAdapter.fetchAll(appName,"",true);  cursor.moveToFirst();  long appID=CursorHelper.getLongFromCursor(cursor,RegisteredAppDbAdapter.KEY_APPID);  cursor.close();  RegisteredActionDbAdapter actionDbAdapter=new RegisteredActionDbAdapter(db);  cursor=actionDbAdapter.fetchAll(actionName,appID);  cursor.moveToFirst();  long actionId=CursorHelper.getLongFromCursor(cursor,RegisteredActionDbAdapter.KEY_ACTIONID);  cursor.close();  RegisteredActionParameterDbAdapter actionParameterDbAdapter=new RegisteredActionParameterDbAdapter(db);  cursor=actionParameterDbAdapter.fetchAll(usernameParamName,actionId,null);  cursor.moveToFirst();  long paramID=CursorHelper.getLongFromCursor(cursor,RegisteredActionParameterDbAdapter.KEY_ACTIONPARAMETERID);  actionParameterDbAdapter.update(paramID,userAccountParamName,null,dataTypeIdAccount);  cursor.close();  RuleActionParameterDbAdapter ruleActionParamDb=new RuleActionParameterDbAdapter(db);  cursor=ruleActionParamDb.fetchAll(null,paramID,null);  if (cursor.moveToLast()) {    String username=CursorHelper.getStringFromCursor(cursor,RuleActionParameterDbAdapter.KEY_RULEACTIONPARAMETERDATA);    appDbAdapter.update(appID,null,null,null,null,username,null);  }  cursor.close();  cursor=actionParameterDbAdapter.fetchAll(passwordParamName,actionId,null);  cursor.moveToFirst();  paramID=CursorHelper.getLongFromCursor(cursor,RegisteredActionParameterDbAdapter.KEY_ACTIONPARAMETERID);  actionParameterDbAdapter.delete(paramID);  cursor.close();  cursor=ruleActionParamDb.fetchAll(null,paramID,null);  if (cursor.moveToLast()) {    String password=CursorHelper.getStringFromCursor(cursor,RuleActionParameterDbAdapter.KEY_RULEACTIONPARAMETERDATA);    appDbAdapter.update(appID,null,null,null,null,null,password);    do {      ruleActionParamDb.delete(CursorHelper.getLongFromCursor(cursor,RuleActionParameterDbAdapter.KEY_RULEACTIONPARAMETERID));    } while (cursor.moveToPrevious());  }  cursor.close();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node streetAttr;  String attrName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  streetAttr=attributes.getNamedItem("class");  assertInstanceOf("typeAssert",Attr.class,streetAttr);  attrName=streetAttr.getNodeName();  assertEqualsAutoCase("attribute","nodeName","class",attrName);  attrName=((Attr)streetAttr).getName();  assertEqualsAutoCase("attribute","name","class",attrName);}  }
class C{  @Override public void sendError(int sc) throws IOException {  this._getHttpServletResponse().sendError(sc);}  }
class C{  public static byte[] toBytes(boolean bool,byte[] data,int offset){  data[offset]=(byte)(bool ? 1 : 0);  return data;}  }
class C{  Object processNMTOKEN(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      if ((avt.isSimple()) && (!XML11Char.isXML11ValidNmtoken(value))) {        handleError(handler,XSLTErrorResources.INVALID_NMTOKEN,new Object[]{name,value},null);        return null;      }      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    if (!XML11Char.isXML11ValidNmtoken(value)) {      handleError(handler,XSLTErrorResources.INVALID_NMTOKEN,new Object[]{name,value},null);      return null;    }  }  return value;}  }
class C{  private String generateAliasMap(Node.CustomTag n,String tagHandlerVar){  TagVariableInfo[] tagVars=n.getTagVariableInfos();  String aliasMapVar=null;  boolean aliasSeen=false;  for (int i=0; i < tagVars.length; i++) {    String nameFrom=tagVars[i].getNameFromAttribute();    if (nameFrom != null) {      String aliasedName=n.getAttributeValue(nameFrom);      if (aliasedName == null)       continue;      if (!aliasSeen) {        out.printin("java.util.HashMap ");        aliasMapVar=tagHandlerVar + "_aliasMap";        out.print(aliasMapVar);        out.println(" = new java.util.HashMap();");        aliasSeen=true;      }      out.printin(aliasMapVar);      out.print(".put(");      out.print(quote(tagVars[i].getNameGiven()));      out.print(", ");      out.print(quote(aliasedName));      out.println(");");    }  }  return aliasMapVar;}  }
class C{  public AttributedString(String text){  if (text == null) {    throw new NullPointerException();  }  this.text=text;}  }
class C{  private static void printVersion(OutputStream outputStream) throws IOException {  outputStream.write(PRINTABLE_VERSION_STRING.getBytes());  String extensionInformation=ConfigurationFramework.getPrintableExtensionInformation(getServerRoot(),getInstanceRoot());  if (extensionInformation != null) {    outputStream.write(extensionInformation.getBytes());  }}  }
class C{  public static ArrayList<String> arrayToList(String... stringArray){  if (stringArray == null) {    return null;  }  ArrayList<String> stringList=new ArrayList<>(stringArray.length);  Collections.addAll(stringList,stringArray);  return stringList;}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("AddRequest(dn=");  buffer.append(dn);  buffer.append(", attrs={");  if (!attributes.isEmpty()) {    Iterator<RawAttribute> iterator=attributes.iterator();    iterator.next().toString(buffer);    while (iterator.hasNext()) {      buffer.append(", ");      iterator.next().toString(buffer);    }  }  buffer.append("})");}  }
class C{  public static AnalyzerResponse containsAlertAfterMissingMessage(TlsContext tlsContext){  int position=getMissingMessagePosition(tlsContext);  if (position == -1) {    return AnalyzerResponse.NO_MODIFICATION;  } else {    ProtocolMessage pm=getNextProtocolMessageFromPeer(tlsContext,position);    if (pm != null && pm.getProtocolMessageType() == ProtocolMessageType.ALERT) {      return AnalyzerResponse.ALERT;    } else {      return AnalyzerResponse.NO_ALERT;    }  }}  }
class C{  public String str(){  return (m_obj != null) ? m_obj.toString() : "";}  }
class C{  public void ensureExceptionThrownIfOptionIsUnsupportedOnOS(int option){  if (!getOptionIsSupported(option)) {    fail("Failed to throw exception for unsupported socket option: " + getSocketOptionString(option));  }}  }
class C{  @DataProvider(name="createDeleteData") public Object[][] createDeleteData(){  Attribute eattr1=Attributes.create("description","eav description");  Attribute eattr2=Attributes.create("namingcontexts","eav naming contexts");  List<Attribute> entryAttrList=newArrayList(eattr1,eattr2);  return new Object[][]{{"dc=example,dc=com",false,AssuredMode.SAFE_DATA_MODE,(byte)0,null},{"dc=delete,dc=an,dc=entry,dc=with,dc=a,dc=long dn",true,AssuredMode.SAFE_READ_MODE,(byte)1,entryAttrList},{"o=group,dc=example,dc=com",true,AssuredMode.SAFE_READ_MODE,(byte)3,entryAttrList}};}  }
class C{  public static String encode(byte[] a){  if (a == null || a.length == 0) {    return "x";  }  int[] cnt=new int[256];  for (int i=0; i < a.length; i++) {    cnt[a[i] & 0xff]++;  }  int shift=1;  int nEscapes=a.length;  for (int i=1; i < 256; i++) {    if (i == '\'') {      continue;    }    int sum=cnt[i] + cnt[(i + 1) & 0xff] + cnt[(i + '\'') & 0xff];    if (sum < nEscapes) {      nEscapes=sum;      shift=i;      if (nEscapes == 0) {        break;      }    }  }  int outLen=a.length + nEscapes + 1;  StringBuffer out=new StringBuffer(outLen);  out.append((char)shift);  for (int i=0; i < a.length; i++) {    char c=(char)((a[i] - shift) & 0xff);    if (c == 0) {      out.append((char)1);      out.append((char)1);    } else     if (c == 1) {      out.append((char)1);      out.append((char)2);    } else     if (c == '\'') {      out.append((char)1);      out.append((char)3);    } else {      out.append(c);    }  }  return out.toString();}  }
class C{  @Override public ValidationMessage[] validate(String prefix,String uri,PageData page){  System.out.println("---------- Prefix=" + prefix + " URI="+ uri+ "----------");  InputStream is=page.getInputStream();  while (true) {    try {      int ch=is.read();      if (ch < 0)       break;      System.out.print((char)ch);    } catch (    IOException e) {      break;    }  }  System.out.println();  System.out.println("-----------------------------------------------");  return (null);}  }
class C{  public JKXmlException(Throwable cause){  super(cause);}  }
class C{  public MalformedChallengeException(String message,Throwable cause){  super(message,cause);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  String nsPrefix="";  String nsDeclaration="";  if (includeNSPrefix) {    nsPrefix=XACMLConstants.XACML_NS_PREFIX + ":";  }  if (declareNS) {    nsDeclaration=XACMLConstants.XACML_NS_DECLARATION;  }  sb.append("<").append(nsPrefix).append(XACMLConstants.OBLIGATION);  if (declareNS) {    sb.append(" ").append(nsDeclaration);  }  if (obligationId != null) {    sb.append(" ").append(XACMLConstants.OBLIGATION_ID).append("=").append(XACMLSDKUtils.quote(obligationId.toString()));  }  if (fulfillOn != null) {    sb.append(" ").append(XACMLConstants.FULFILL_ON).append("=").append(XACMLSDKUtils.quote(fulfillOn));  }  sb.append(">\n");  int length=0;  if (attributeAssignments != null) {    length=attributeAssignments.size();    for (int i=0; i < length; i++) {      Element elem=(Element)attributeAssignments.get(i);      sb.append(XMLUtils.print(elem));    }  }  sb.append("</").append(nsPrefix).append(XACMLConstants.OBLIGATION).append(">\n");  return sb.toString();}  }
class C{  @Override public synchronized void mark(int readlimit){  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  mark=position;  this.readlimit=readlimit;}  }
class C{  @Override public void sendMessage(ChannelMessage message,Member[] destination) throws ChannelException {  MultiPointSender sender=getTransport();  sender.sendMessage(destination,message);}  }
class C{  public static void removeAll(){  getPersistence().removeAll();}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().updateFoo(foo);}  }
