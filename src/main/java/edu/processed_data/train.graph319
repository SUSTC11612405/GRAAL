class C{  protected void appendDetail(StringBuffer buffer,String fieldName,short value){  buffer.append(value);}  }
class C{  public boolean isActiveNetworkMetered(){  try {    return mService.isActiveNetworkMetered();  } catch (  RemoteException e) {    return false;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.812 -0400",hash_original_method="EEFDACC2C301B42650B1064C3D4059CC",hash_generated_method="E96997EF41B5EE4DD2D315BC127B1E7A") @Override public void close() throws IOException {  eof=false;  position=0;  mark=-1;}  }
class C{  public CompactConcurrentHashSet2(Collection<? extends V> m){  this.sizeCtl=DEFAULT_CAPACITY;  addAll(m);}  }
class C{  static boolean same(final ASTNode n1,final ASTNode n2){  return n1 == n2 || n1 != null && n2 != null && n1.getNodeType() == n2.getNodeType() && body(n1).equals(body(n2));}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @Override @Deprecated public void dismissFragment(int animationIn,int animationOut){  getNavigationManager().popFragment(animationIn,animationOut);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.718 -0400",hash_original_method="03D0FDA651EE7341EA30E6AEE8095C69",hash_generated_method="642AA1525A0152FEA4F6CCADF27D64F1") public void debug(Object message){}  }
class C{  protected void moveRandomly(OMScalingIcon point,double factor,Projection proj){  double hor=Math.random() - .5;  double vert=Math.random() - .5;  Point2D mapPoint=proj.forward(point.getLat(),point.getLon());  mapPoint.setLocation(mapPoint.getX() + (hor * factor),mapPoint.getY() + (vert * factor));  Point2D llp=proj.inverse(mapPoint);  point.setLat(llp.getY());  point.setLon(llp.getX());}  }
class C{  public void addAttributes(AttributeSet attributes){  Enumeration names=attributes.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    addAttribute(name,attributes.getAttribute(name));  }}  }
class C{  @Override public boolean dragTo(String obj,int destX,int destY,int steps) throws UiObjectNotFoundException, NotImplementedException {  return dragTo(getUiObject(obj),destX,destY,steps);}  }
class C{  public static void assertThrowsCompletionException(final Consumer<Void> consumer,final Class<?> exceptionClass){  try {    consumer.accept(null);  } catch (  final CompletionException completionEx) {    final Throwable ex=completionEx.getCause();    if (ex.getClass() == exceptionClass) {      return;    }    Assert.fail(String.format("unexpected exception of type %s was thrown",ex.getClass()));  }  Assert.fail(String.format("expected exception of type %s was not thrown",exceptionClass));}  }
class C{  boolean collides(final Rectangle2D shape){  if (collision != null) {    return collision.collides(shape);  }  return false;}  }
class C{  public boolean hasWhen(){  return hasValue();}  }
class C{  private void cmd_deleteSelection(){  m_frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  if (ADialog.ask(getWindowNo(),m_frame,"DeleteSelection")) {    int records=deleteSelection();    setStatusLine(Msg.getMsg(Env.getCtx(),"Deleted") + records,false);  }  m_frame.setCursor(Cursor.getDefaultCursor());  bDelete.setSelected(false);  executeQuery();  ;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.454 -0500",hash_original_method="CE7634279B030B3367B24B82DE682EB0",hash_generated_method="E794DC69B772C88CA8008EEA960D60CF") public boolean hasWindow(){  return mWindow.getTaintBoolean();}  }
class C{  private Long interpretLong(Object v){  if (v == null) {    return null;  } else   if (v instanceof Number) {    return ((Number)v).longValue();  } else   if (v instanceof String) {    return Longs.tryParse((String)v);  } else {    return null;  }}  }
class C{  public boolean isEmbedded(){  Object oo=get_Value(COLUMNNAME_IsEmbedded);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  public void mapDatasetToDomainAxes(int index,List axisIndices){  ParamChecks.requireNonNegative(index,"index");  checkAxisIndices(axisIndices);  Integer key=new Integer(index);  this.datasetToDomainAxesMap.put(key,new ArrayList(axisIndices));  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));}  }
class C{  public void rollback(int taskId){  ConcurrentLinkedQueue<ReplDBMSEvent> queue=taskQueues.get(taskId);synchronized (queue) {    if (queue.size() > 0) {      queue.clear();    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tApplies a Markov Blanket correction to the network structure, \n" + "\tafter a network structure is learned. This ensures that all \n" + "\tnodes in the network are part of the Markov blanket of the \n"+ "\tclassifier node.","mbc",0,"-mbc"));  newVector.addElement(new Option("\tScore type (BAYES, BDeu, MDL, ENTROPY and AIC)","S",1,"-S [BAYES|MDL|ENTROPY|AIC|CROSS_CLASSIC|CROSS_BAYES]"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public static boolean isProjectResourceCreatable(User user,Project project,ResourceType resourceType){  if (user == null || user.isAnonymous()) {    return false;  }  if (user.isSiteManager() || OrganizationUser.isAdmin(project.organization,user) || user.isMemberOf(project)|| isAllowedIfGroupMember(project,user)) {    return true;  }  if (!project.isPublic()) {    return false;  }switch (resourceType) {case ISSUE_POST:case BOARD_POST:case ISSUE_COMMENT:case NONISSUE_COMMENT:case FORK:case COMMIT_COMMENT:case REVIEW_COMMENT:    return true;default :  return false;}}  }
class C{  public static boolean writeToFile(String filename,Object obj,boolean append){  return writeToFile(filename,obj.toString(),append);}  }
class C{  public void applyInferredType(final AnnotatedTypeMirror type,final Set<AnnotationMirror> inferredSet,final TypeMirror inferredTypeMirror){  if (inferredSet == null) {    return;  }  for (  final AnnotationMirror top : hierarchy.getTopAnnotations()) {    AnnotationMirror inferred=hierarchy.findAnnotationInHierarchy(inferredSet,top);    apply(type,inferred,inferredTypeMirror,top);  }}  }
class C{  private void loadDefaultProperties(){  try {    InputStream readStream=GeneralUtil.openStreamFromClasspath(new DefaultCSSMarker(),SF_FILE_NAME);    if (readStream == null) {      System.err.println("WARNING: Flying Saucer: No configuration files found in classpath using URL: " + SF_FILE_NAME + ", resorting to hard-coded fallback properties.");      this.properties=newFallbackProperties();    } else {      try {        this.properties=new Properties();        this.properties.load(readStream);      }  finally {        readStream.close();      }    }  } catch (  RuntimeException rex) {    throw rex;  }catch (  Exception ex) {    throw new RuntimeException("Could not load properties file for configuration.",ex);  }  info("Configuration loaded from " + SF_FILE_NAME);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.remote_service_binding);  Button button=(Button)findViewById(R.id.bind);  button.setOnClickListener(mBindListener);  button=(Button)findViewById(R.id.unbind);  button.setOnClickListener(mUnbindListener);  mKillButton=(Button)findViewById(R.id.kill);  mKillButton.setOnClickListener(mKillListener);  mKillButton.setEnabled(false);  mCallbackText=(TextView)findViewById(R.id.callback);  mCallbackText.setText("Not attached.");}  }
class C{  public final CharBuffer append(byte[] buf,int offset,int len){  int length=length();  ensureCapacity(length + len);  char[] buffer=buffer();  for (; len > 0; len--) {    buffer[length++]=(char)(buf[offset++] & 0xff);  }  length(length);  return this;}  }
class C{  @Timeout @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW) public void handleTimer(Timer timer){  List<ServiceInstance> result;synchronized (TIMER_LOCK) {    result=instanceDAO.getInstancesInWaitingState();    if (result.isEmpty() || configService.isAPPSuspend()) {      appTimerServiceBean.cancelTimers();      logger.info("Timer canceled.");      return;    }  }  final String ERROR_TIMER="Error occured during timer handling";  try {    doHandleSystems(result,ProvisioningStatus.getWaitingForCreation());  } catch (  Throwable e) {    logger.error(ERROR_TIMER,e);  }  try {    doHandleSystems(result,ProvisioningStatus.getWaitingForModification());  } catch (  Throwable e) {    logger.error(ERROR_TIMER,e);  }  try {    doHandleSystems(result,ProvisioningStatus.getWaitingForActivation());  } catch (  Throwable e) {    logger.error(ERROR_TIMER,e);  }  try {    doHandleSystems(result,ProvisioningStatus.getWaitingForDeactivation());  } catch (  Throwable e) {    logger.error(ERROR_TIMER,e);  }  try {    doHandleSystems(result,ProvisioningStatus.getWaitingForDeletion());  } catch (  Throwable e) {    logger.error(ERROR_TIMER,e);  }  try {    doHandleSystems(result,ProvisioningStatus.getWaitingForOperation());  } catch (  Throwable e) {    logger.error(ERROR_TIMER,e);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRequestType[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void update(String oldPassword,String password,boolean encrypted,boolean logoutUser){  PasswordUpdateParam param=new PasswordUpdateParam();  param.setOldPassword(oldPassword);  if (encrypted) {    param.setEncPassword(password);  } else {    param.setPassword(password);  }  client.putURI(String.class,param,client.uriBuilder(PASSWORD_URL).queryParam("logout_user",logoutUser).build());}  }
class C{  public ResourceAttributes(){  super();}  }
class C{  private Builder(com.linkedin.camus.example.records.DummyLog2 other){  super(com.linkedin.camus.example.records.DummyLog2.SCHEMA$);  if (isValidValue(fields()[0],other.id)) {    this.id=(java.lang.Long)data().deepCopy(fields()[0].schema(),other.id);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.name)) {    this.name=(java.lang.CharSequence)data().deepCopy(fields()[1].schema(),other.name);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.muchoStuff)) {    this.muchoStuff=(java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)data().deepCopy(fields()[2].schema(),other.muchoStuff);    fieldSetFlags()[2]=true;  }}  }
class C{  public Stacking(int folds,Classifier aggregatingClassifier,List<Classifier> baseClassifiers){  if (baseClassifiers.size() < 2)   throw new IllegalArgumentException("base classifiers must contain at least 2 elements, not " + baseClassifiers.size());  setFolds(folds);  this.aggregatingClassifier=aggregatingClassifier;  this.baseClassifiers=baseClassifiers;  boolean allRegressors=aggregatingClassifier instanceof Regressor;  for (  Classifier cl : baseClassifiers)   if (!(cl instanceof Regressor))   allRegressors=false;  if (allRegressors) {    aggregatingRegressor=(Regressor)aggregatingClassifier;    baseRegressors=(List)baseClassifiers;  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardContourToolTipGenerator)) {    return false;  }  StandardContourToolTipGenerator that=(StandardContourToolTipGenerator)obj;  if (this.valueForm != null) {    return this.valueForm.equals(that.valueForm);  }  return false;}  }
class C{  public Entry createEntryQuotation(User user,Entry source,String quotation,String note,Long createTime,boolean isAdmin,Errors errors){  return createEntry(user,source,DbLogic.Constants.quotation,null,quotation,note,createTime,createTime,null,null,false,false,false,false,false,isAdmin,errors);}  }
class C{  public long readLongGamma() throws IOException {  int preComp;  if ((fill >= 16 || refill() >= 16) && (preComp=GAMMA[current >> (fill - 16) & 0xFFFF]) != 0) {    readBits+=preComp >> 16;    fill-=preComp >> 16;    return preComp & 0xFFFF;  }  final int msb=readUnary();  return ((1L << msb) | readLong(msb)) - 1;}  }
class C{  void grantLock(InternalDistributedMember owner,long newLeaseExpireTime,int lockId,RemoteThread remoteThread){  Assert.assertTrue(remoteThread != null);  checkDestroyed();  basicGrantLock(owner,newLeaseExpireTime,lockId,remoteThread);}  }
class C{  public UF6(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  protected void sequence_S_Solve(ISerializationContext context,S_Solve semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean checkAbsolute(LocPathIterator path){  m_isAbs=true;  path.callVisitors(null,this);  return m_isAbs;}  }
class C{  public Shadow(int width,int height){  if (((EGL10)EGLContext.getEGL()).eglGetCurrentContext().equals(EGL10.EGL_NO_CONTEXT)) {    throw new IllegalStateException("There is no EGLContext");  }  mFBOIds=new int[1];  mDepthMap=new int[1];  GLES20.glGenFramebuffers(1,mFBOIds,0);  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,mFBOIds[0]);  GLES20.glGenTextures(1,mDepthMap,0);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mDepthMap[0]);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_DEPTH_COMPONENT,width,height,0,GLES20.GL_DEPTH_COMPONENT,GLES20.GL_UNSIGNED_SHORT,null);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,0);  GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_DEPTH_ATTACHMENT,GLES20.GL_TEXTURE_2D,mDepthMap[0],0);  if (GLES20.glCheckFramebufferStatus(GLES20.GL_FRAMEBUFFER) != GLES20.GL_FRAMEBUFFER_COMPLETE) {    throw new RuntimeException("Create GL Framebuffer of shadow failed.");  }  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);}  }
class C{  protected SVGOMFEOffsetElement(){}  }
class C{  public boolean canBeLongAddress(int address){  return (address >= 1);}  }
class C{  public void testBlockingStub() throws Exception {  FooRequest fooRequest=FooRequest.newBuilder().build();  BarRequest barRequest=BarRequest.newBuilder().build();  BlockingRpcChannel mockChannel=control.createMock(BlockingRpcChannel.class);  TestService.BlockingInterface stub=TestService.newBlockingStub(mockChannel);  FooResponse fooResponse=FooResponse.newBuilder().build();  BarResponse barResponse=BarResponse.newBuilder().build();  EasyMock.expect(mockChannel.callBlockingMethod(EasyMock.same(fooDescriptor),EasyMock.same(mockController),EasyMock.same(fooRequest),EasyMock.same(FooResponse.getDefaultInstance()))).andReturn(fooResponse);  EasyMock.expect(mockChannel.callBlockingMethod(EasyMock.same(barDescriptor),EasyMock.same(mockController),EasyMock.same(barRequest),EasyMock.same(BarResponse.getDefaultInstance()))).andReturn(barResponse);  control.replay();  assertSame(fooResponse,stub.foo(mockController,fooRequest));  assertSame(barResponse,stub.bar(mockController,barRequest));  control.verify();}  }
class C{  public ProjectPrivilegeExample(ProjectPrivilegeObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getUserId() != null) {    criteria.andUserIdEqualTo(sample.getUserId());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getIsAdmin() != null) {    criteria.andIsAdminEqualTo(sample.getIsAdmin());  }}  }
class C{  public static int negHalfWidth(int min,int max){  if (min > max) {    throw new IllegalArgumentException("min [" + min + "] must be <= max ["+ max+ "]");  }  int mean=meanLow(min,max);  return min - mean - ((min ^ max) & 1);}  }
class C{  public void close(){}  }
class C{  public boolean isDataConnected(){  ConnectivityManager connectMan=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=connectMan.getActiveNetworkInfo();  return activeNetworkInfo != null && activeNetworkInfo.isConnectedOrConnecting();}  }
class C{  public SlidingCategoryDataset(CategoryDataset underlying,int firstColumn,int maxColumns){  this.underlying=underlying;  this.firstCategoryIndex=firstColumn;  this.maximumCategoryCount=maxColumns;}  }
class C{  public CharSequence subSequence(int start,int end){  if (_length < start || start < 0 || end < start)   throw new StringIndexOutOfBoundsException();  return new String(_buffer,_offset + start,end - start);}  }
class C{  public int next(){  int node=_currentNode;  int expType;  int nodeType=_nodeType;  int startID=_startNodeID;  if (nodeType >= DTM.NTYPES) {    while (node != NULL && node != startID && _exptype(node) != nodeType) {      node=_nextsib(node);    }  } else {    while (node != NULL && node != startID) {      expType=_exptype(node);      if (expType < DTM.NTYPES) {        if (expType == nodeType) {          break;        }      } else {        if (m_expandedNameTable.getType(expType) == nodeType) {          break;        }      }      node=_nextsib(node);    }  }  if (node == DTM.NULL || node == _startNodeID) {    _currentNode=NULL;    return NULL;  } else {    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public static <S extends HasRowHoverHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    RowHoverEvent event=new RowHoverEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public boolean prefixTest(SparseItemset other){  if (indices.length != other.indices.length) {    throw new AbortException("PrefixTest is only valid for itemsets of the same length!");  }  for (int k=indices.length - 2; k >= 0; k--) {    if (indices[k] != other.indices[k]) {      return false;    }  }  return true;}  }
class C{  protected void block(){  lock.block();}  }
class C{  public void newSourceCode(String name,String code){  if (debug) {    if (this.outputFolder != null && this.outputFolder.canWrite()) {      File f=new File(this.outputFolder + File.separator + name+ ".java");      try (FileWriter writer=new FileWriter(f)){        writer.write(code);        writer.flush();        writer.close();      } catch (      Exception ex) {        Logger.getLogger(getClass().getName()).log(Level.SEVERE,"failed to write source file",ex);      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void saveStatus(){  logger.info("Store instance status snapshots");  File root=new File(new File(this.rootPath),STORAGE_DIR);  File objFile=new File(root,OBJ_FILE_NAME);  storeObject(objFile);}  }
class C{  public void showExpandableItems(List<ExpandableItem> expandableItems){  validateExpandableItems(expandableItems);  reset();  setExpandableItems(expandableItems);  renderExpandableItems();  hookListeners();  bringChildsToFront(expandableItems);}  }
class C{  private Struct toStruct(Attributes att){  int len=att.getLength();  Struct sct=new StructImpl();  for (int i=0; i < len; i++) {    sct.setEL(att.getQName(i),att.getValue(i));  }  return sct;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public static int throwCoin(){  return rand.nextInt(2) + 1;}  }
class C{  public int currentPc(){  return getSize();}  }
class C{  private Map<String,String> processZip(String inpath,File output) throws IOException {  String[] algorithms=cfgManager.getDownloadConfiguration().getChecksumAlgorithms().split(",");  int compressionLevel=cfgManager.getDownloadConfiguration().getCompressionLevel();  FileOutputStream fOut=null;  BufferedOutputStream bOut=null;  ZipArchiveOutputStream tOut=null;  MultipleDigestOutputStream dOut=null;  try {    fOut=new FileOutputStream(output);    if ((algorithms != null) && (algorithms.length > 0)) {      try {        dOut=new MultipleDigestOutputStream(fOut,algorithms);        bOut=new BufferedOutputStream(dOut);      } catch (      NoSuchAlgorithmException e) {        LOGGER.error("Problem computing checksum algorithms.",e);        dOut=null;        bOut=new BufferedOutputStream(fOut);      }    } else     bOut=new BufferedOutputStream(fOut);    tOut=new ZipArchiveOutputStream(bOut);    tOut.setLevel(compressionLevel);    addFileToZip(tOut,inpath,"");  }  finally {    try {      tOut.finish();      tOut.close();      bOut.close();      if (dOut != null)       dOut.close();      fOut.close();    } catch (    Exception e) {      LOGGER.error("Exception raised during ZIP stream close",e);    }  }  if (dOut != null) {    Map<String,String> checksums=new HashMap<String,String>();    for (    String algorithm : algorithms) {      String chk=dOut.getMessageDigestAsHexadecimalString(algorithm);      if (chk != null)       checksums.put(algorithm,chk);    }    return checksums;  }  return null;}  }
class C{  public Bitmap fetchBitmapData(ImageTask imageTask,ImageResizer imageResizer){  Bitmap bitmap=null;  if (mImageFileProvider != null) {    FileInputStream inputStream=null;    String fileCacheKey=imageTask.getFileCacheKey();    ImageReuseInfo reuseInfo=imageTask.getImageReuseInfo();    if (DEBUG) {      Log.d(TAG,String.format(MSG_FETCH_BEGIN,imageTask));      Log.d(TAG,String.format(MSG_FETCH_BEGIN_IDENTITY_KEY,imageTask,imageTask.getIdentityKey()));      Log.d(TAG,String.format(MSG_FETCH_BEGIN_FILE_CACHE_KEY,imageTask,fileCacheKey));      Log.d(TAG,String.format(MSG_FETCH_BEGIN_ORIGIN_URL,imageTask,imageTask.getOriginUrl()));      Log.d(TAG,String.format(MSG_FETCH_BEGIN_IDENTITY_URL,imageTask,imageTask.getIdentityUrl()));    }    inputStream=mImageFileProvider.getInputStream(fileCacheKey);    if (inputStream == null) {      if (reuseInfo != null && reuseInfo.getReuseSizeList() != null && reuseInfo.getReuseSizeList().length > 0) {        if (DEBUG) {          Log.d(TAG,String.format(MSG_FETCH_TRY_REUSE,imageTask));        }        final String[] sizeKeyList=reuseInfo.getReuseSizeList();        for (int i=0; i < sizeKeyList.length; i++) {          String size=sizeKeyList[i];          final String key=imageTask.generateFileCacheKeyForReuse(size);          inputStream=mImageFileProvider.getInputStream(key);          if (inputStream != null) {            if (DEBUG) {              Log.d(TAG,String.format(MSG_FETCH_REUSE_SUCCESS,imageTask,size));            }            break;          } else {            if (DEBUG) {              Log.d(TAG,String.format(MSG_FETCH_REUSE_FAIL,imageTask,size,key));            }          }        }      }    } else {      if (DEBUG) {        Log.d(TAG,String.format(MSG_FETCH_HIT_DISK_CACHE,imageTask));      }    }    if (imageTask.getStatistics() != null) {      imageTask.getStatistics().afterFileCache(inputStream != null);    }    if (inputStream == null) {      String url=imageResizer.getRemoteUrl(imageTask);      if (DEBUG) {        Log.d(TAG,String.format(MSG_FETCH_DOWNLOAD,imageTask,url));      }      inputStream=mImageFileProvider.downloadAndGetInputStream(fileCacheKey,url);      if (imageTask.getStatistics() != null) {        imageTask.getStatistics().afterDownload();      }      if (inputStream == null) {        Log.e(TAG,imageTask + " download fail: " + fileCacheKey);      }    }    if (inputStream != null) {      try {        bitmap=decodeSampledBitmapFromDescriptor(inputStream.getFD(),imageTask,imageResizer);      } catch (      IOException e) {        e.printStackTrace();      }    } else {      Log.e(TAG,imageTask + " fetch bitmap fail. file cache key: " + fileCacheKey);    }  }  return bitmap;}  }
class C{  public CircleDrawer rotateRegistration(float regX,float regY){  setRotateRegistration(regX,regY);  return this;}  }
class C{  public MemStatementList(){  this(4);}  }
class C{  @Override public void onReceive(Context context,Intent intent){  getOps().getVideoList();}  }
class C{  public static String implodeList(List<? extends XPathPartInterface> list){  return implodeList(list,"","","");}  }
class C{  public TKEYRecord(Name name,int dclass,long ttl,Name alg,Date timeInception,Date timeExpire,int mode,int error,byte[] key,byte other[]){  super(name,Type.TKEY,dclass,ttl);  this.alg=checkName("alg",alg);  this.timeInception=timeInception;  this.timeExpire=timeExpire;  this.mode=checkU16("mode",mode);  this.error=checkU16("error",error);  this.key=key;  this.other=other;}  }
class C{  @Override protected void waitForCompletion(final WebDriver driver){  final String testResultId="qunit-testresult-caja-guest-0___";  if (driver.findElements(By.id(testResultId)).size() == 0) {    super.waitForCompletion(driver);    return;  }  WebElement statusElement=driver.findElement(By.id(testResultId));  String currentStatus=statusElement.getText();  String lastStatus=null;  int limit=30;  for (int chances=limit; chances > 0; --chances) {    if (currentStatus.startsWith("Tests completed")) {      break;    }    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {    }    statusElement=driver.findElement(By.id(testResultId));    lastStatus=currentStatus;    currentStatus=statusElement.getText();    if (!lastStatus.equals(currentStatus)) {      chances=limit;    }  }}  }
class C{  public static GraphRequest newUploadStagingResourceWithImageRequest(AccessToken accessToken,Uri imageUri,Callback callback) throws FileNotFoundException {  if (Utility.isFileUri(imageUri)) {    return newUploadStagingResourceWithImageRequest(accessToken,new File(imageUri.getPath()),callback);  } else   if (!Utility.isContentUri(imageUri)) {    throw new FacebookException("The image Uri must be either a file:// or content:// Uri");  }  GraphRequest.ParcelableResourceWithMimeType<Uri> resourceWithMimeType=new GraphRequest.ParcelableResourceWithMimeType<>(imageUri,"image/png");  Bundle parameters=new Bundle(1);  parameters.putParcelable(STAGING_PARAM,resourceWithMimeType);  return new GraphRequest(accessToken,MY_STAGING_RESOURCES,parameters,HttpMethod.POST,callback);}  }
class C{  private StyledText createSuffixText(){  StyledText styledText=new StyledText(this,SWT.TRANSPARENT);  styledText.setText("");  styledText.setForeground(INACTIVE_COLOR);  styledText.setBackground(getDisplay().getSystemColor(SWT.COLOR_TRANSPARENT));  styledText.setEditable(false);  styledText.setEnabled(false);  styledText.setLeftMargin(0);  return styledText;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public void onReceive(Object message){  logger.debug(message.toString());}  }
class C{  public <E extends Layout,AE extends VLArray<E>,EE extends Layout>Class<AE> genVLAImpl(final Class<E> elementInterfaceClass,final Class<EE> enclosingClass){  return genVLAImpl(elementInterfaceClass,null,enclosingClass);}  }
class C{  private boolean isPlaceholder(int index,char aChar){  return (getPlaceholderCharacter() == aChar);}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.171 -0400",hash_original_method="25CA2BBAEF47FC63779AD366F2A04877",hash_generated_method="31969416E31E775B745662D6F0A13C00") private void walk(File directory,int depth,Collection<T> results) throws IOException {  checkIfCancelled(directory,depth,results);  if (handleDirectory(directory,depth,results)) {    handleDirectoryStart(directory,depth,results);    int childDepth=depth + 1;    if (depthLimit < 0 || childDepth <= depthLimit) {      checkIfCancelled(directory,depth,results);      File[] childFiles=filter == null ? directory.listFiles() : directory.listFiles(filter);      childFiles=filterDirectoryContents(directory,depth,childFiles);      if (childFiles == null) {        handleRestricted(directory,childDepth,results);      } else {        for (        File childFile : childFiles) {          if (childFile.isDirectory()) {            walk(childFile,childDepth,results);          } else {            checkIfCancelled(childFile,childDepth,results);            handleFile(childFile,childDepth,results);            checkIfCancelled(childFile,childDepth,results);          }        }      }    }    handleDirectoryEnd(directory,depth,results);  }  checkIfCancelled(directory,depth,results);}  }
class C{  public static void main(String[] args){  weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Logging started");  weka.gui.SplashWindow.splash(ClassLoader.getSystemResource("weka/gui/beans/icons/splash.jpg"));  weka.gui.SplashWindow.invokeMain("weka.gui.beans.KnowledgeFlowApp",args);  weka.gui.SplashWindow.disposeSplash();}  }
class C{  public static Response createBindingErrorResponse(char errorCode,String reasonPhrase,char[] unknownAttributes) throws IllegalArgumentException {  Response bindingErrorResponse=new Response();  bindingErrorResponse.setMessageType(Message.BINDING_ERROR_RESPONSE);  UnknownAttributesAttribute unknownAttributesAttribute=null;  ErrorCodeAttribute errorCodeAttribute=AttributeFactory.createErrorCodeAttribute(errorCode,reasonPhrase);  bindingErrorResponse.putAttribute(errorCodeAttribute);  if (unknownAttributes != null) {    unknownAttributesAttribute=AttributeFactory.createUnknownAttributesAttribute();    for (int i=0; i < unknownAttributes.length; i++) {      unknownAttributesAttribute.addAttributeID(unknownAttributes[i]);    }    bindingErrorResponse.putAttribute(unknownAttributesAttribute);  }  return bindingErrorResponse;}  }
class C{  public WideSelectionTreeUI(final boolean wideSelection,@NotNull Condition<Integer> wideSelectionCondition){  myWideSelection=wideSelection;  myWideSelectionCondition=wideSelectionCondition;}  }
class C{  private boolean areUnmergedFiles(){  LOG.info("areUnmergedFiles: checking if there are unmerged files...");  GitConflictResolver.Params params=new GitConflictResolver.Params();  params.setErrorNotificationTitle("Update was not started");  params.setMergeDescription("Unmerged files detected. These conflicts must be resolved before update.");  return !new GitMergeCommittingConflictResolver(myProject,myGit,myMerger,GitUtil.getRootsFromRepositories(myRepositories),params,false).merge();}  }
class C{  private static Class<?>[] types(Object... values){  if (values == null) {    return new Class[0];  }  Class<?>[] result=new Class[values.length];  for (int i=0; i < values.length; i++) {    Object value=values[i];    result[i]=value == null ? NULL.class : value.getClass();  }  return result;}  }
class C{  protected NativePointerObject(NativePointerObject other){  this.nativePointer=other.nativePointer;}  }
class C{  public SAX2DTM2(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean buildIdIndex,boolean newNameTable){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);  int shift;  for (shift=0; (blocksize>>>=1) != 0; ++shift)   ;  m_blocksize=1 << shift;  m_SHIFT=shift;  m_MASK=m_blocksize - 1;  m_buildIdIndex=buildIdIndex;  m_values=new Vector(32,512);  m_maxNodeIndex=1 << DTMManager.IDENT_DTM_NODE_BITS;  m_exptype_map0=m_exptype.getMap0();  m_nextsib_map0=m_nextsib.getMap0();  m_firstch_map0=m_firstch.getMap0();  m_parent_map0=m_parent.getMap0();}  }
class C{  private static long parseTfdt(ParsableByteArray tfdt){  tfdt.setPosition(Atom.HEADER_SIZE);  int fullAtom=tfdt.readInt();  int version=Atom.parseFullAtomVersion(fullAtom);  return version == 1 ? tfdt.readUnsignedLongToLong() : tfdt.readUnsignedInt();}  }
class C{  void loadUrlNow(String url){  if (LOG.isLoggable(LOG.DEBUG) && !url.startsWith("javascript:")) {    LOG.d(TAG,">>> loadUrlNow()");  }  if (url.startsWith("file://") || url.startsWith("javascript:") || url.startsWith("about:")|| internalWhitelist.isUrlWhiteListed(url)) {    super.loadUrl(url);  }}  }
class C{  @Override public void reorderNodes(ASTJoinGroupPartition partition){  final ASTTypeBasedNodeClassifier nodeClassifier=new ASTTypeBasedNodeClassifier(new Class<?>[]{NamedSubqueryInclude.class,StatementPatternNode.class,ZeroLengthPathNode.class,PropertyPathUnionNode.class,ArbitraryLengthPathNode.class,SubqueryRoot.class,ServiceNode.class,GraphPatternGroup.class},partition.nonOptionalNonMinusNodes);  final List<ServiceNode> runFirstSNs=new LinkedList<ServiceNode>();  final List<ServiceNode> runLastSNs=new LinkedList<ServiceNode>();  for (  ServiceNode sn : nodeClassifier.get(ServiceNode.class)) {    if (sn.getResponsibleServiceFactory().getServiceOptions().isRunFirst()) {      runFirstSNs.add(sn);    } else {      runLastSNs.add(sn);    }  }  final List<IGroupMemberNode> ordered=new LinkedList<IGroupMemberNode>();  ordered.addAll(runFirstSNs);  ordered.addAll(nodeClassifier.get(NamedSubqueryInclude.class));  ordered.addAll(nodeClassifier.get(StatementPatternNode.class));  ordered.addAll(nodeClassifier.get(GraphPatternGroup.class));  ordered.addAll(nodeClassifier.get(ZeroLengthPathNode.class));  ordered.addAll(nodeClassifier.get(PropertyPathUnionNode.class));  ordered.addAll(nodeClassifier.get(ArbitraryLengthPathNode.class));  ordered.addAll(nodeClassifier.get(SubqueryRoot.class));  ordered.addAll(runLastSNs);  ordered.addAll(nodeClassifier.getUnclassifiedNodes());  partition.replaceNonOptionalNonMinusNodesWith(ordered,false);}  }
class C{  public static final void randomSeed(IntGrid2D d,HyperCycleParameters p){  final int maxN=p.states;  int x;  int y;  int w=d.getWidth();  int h=d.getHeight();  int cell=0;  for (y=0; y < h; y++) {    for (x=0; x < w; x++) {      cell=p.r.nextInt(maxN);      if (cell == 1) {        cell=p.r.nextInt(maxN);        if (cell == 1) {          cell=p.r.nextInt(maxN);        }      }      d.set(x,y,cell);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void printStackTrace(){  super.printStackTrace();}  }
class C{  @Override public ReadQuery buildSelectionQueryForDirectCollectionKeyMapping(ContainerPolicy containerPolicy){  ReadAllQuery query=new ReadAllQuery();  query.setReferenceClass(referenceClass);  query.setDescriptor(getReferenceDescriptor());  query.setContainerPolicy(containerPolicy);  return query;}  }
class C{  public SequenceExceptionError(ExecutableSequence testSequence,int position,Throwable exception){  super("Exception thrown before end of sequence",exception);  this.testSequence=testSequence;  this.position=position;  this.e=exception;}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  private void cyclicCircularGradientFillRaster(int[] pixels,int off,int adjust,int x,int y,int w,int h){  final double constC=-(radiusSq) + (centerX * centerX) + (centerY * centerY);  double A;  double B;  double C;  double slope;  double yintcpt;  double solutionX;  double solutionY;  final float constX=(a00 * x) + (a01 * y) + a02;  final float constY=(a10 * x) + (a11 * y) + a12;  final float precalc2=2 * centerY;  final float precalc3=-2 * centerX;  float X;  float Y;  float g;  float det;  float currentToFocusSq;  float intersectToFocusSq;  float deltaXSq;  float deltaYSq;  int indexer=off;  int i, j;  int pixInc=w + adjust;  for (j=0; j < h; j++) {    X=(a01 * j) + constX;    Y=(a11 * j) + constY;    for (i=0; i < w; i++) {      if (((X - focusX) > -0.000001f) && ((X - focusX) < 0.000001f)) {        solutionX=focusX;        solutionY=centerY;        solutionY+=(Y > focusY) ? trivial : -trivial;      } else {        slope=(Y - focusY) / (X - focusX);        yintcpt=Y - (slope * X);        A=(slope * slope) + 1;        B=precalc3 + (-2 * slope * (centerY - yintcpt));        C=constC + (yintcpt * (yintcpt - precalc2));        det=(float)Math.sqrt((B * B) - (4 * A * C));        solutionX=-B;        solutionX+=(X < focusX) ? -det : det;        solutionX=solutionX / (2 * A);        solutionY=(slope * solutionX) + yintcpt;      }      deltaXSq=(float)solutionX - focusX;      deltaXSq=deltaXSq * deltaXSq;      deltaYSq=(float)solutionY - focusY;      deltaYSq=deltaYSq * deltaYSq;      intersectToFocusSq=deltaXSq + deltaYSq;      deltaXSq=X - focusX;      deltaXSq=deltaXSq * deltaXSq;      deltaYSq=Y - focusY;      deltaYSq=deltaYSq * deltaYSq;      currentToFocusSq=deltaXSq + deltaYSq;      g=(float)Math.sqrt(currentToFocusSq / intersectToFocusSq);      pixels[indexer + i]=indexIntoGradientsArrays(g);      X+=a00;      Y+=a10;    }    indexer+=pixInc;  }}  }
class C{  public NavigationCommands(WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  private CnATreeElement replaceEntityInCache(CnATreeElement element){  CacheObject cachedObject=cache.getCachedObject(element);  if (cachedObject != null) {    CnATreeElement cachedElement=cachedObject.getElement();    cachedElement.setEntity(element.getEntity());    cache.addObject(new CacheObject(cachedElement,cachedObject.isChildrenPropertiesLoaded(),cachedObject.getHasChildren()));    return cachedElement;  } else {    return element;  }}  }
class C{  protected void sequence_ArrayTypeRef_ParameterizedTypeRefNominal(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean isVolatile(int flags){  return (flags & AccVolatile) != 0;}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,null);}  }
class C{  @Override public void writeValueDelete(Object value){  System.out.println("delete");  Object[] customer=(Object[])value;  m_oId=customer[0];  m_jTaxID.setText((String)customer[1]);  m_jSearchkey.setText((String)customer[2]);  m_jName.setText((String)customer[3]);  m_jNotes.setText((String)customer[4]);  m_jVisible.setSelected(((Boolean)customer[5]));  jcard.setText((String)customer[6]);  txtMaxdebt.setText(Formats.CURRENCY.formatValue(customer[7]));  txtCurdate.setText(Formats.DATE.formatValue(customer[8]));  txtCurdebt.setText(Formats.CURRENCY.formatValue(customer[9]));  txtFirstName.setText(Formats.STRING.formatValue(customer[10]));  txtLastName.setText(Formats.STRING.formatValue(customer[11]));  txtEmail.setText(Formats.STRING.formatValue(customer[12]));  txtPhone.setText(Formats.STRING.formatValue(customer[13]));  txtPhone2.setText(Formats.STRING.formatValue(customer[14]));  txtFax.setText(Formats.STRING.formatValue(customer[15]));  txtAddress.setText(Formats.STRING.formatValue(customer[16]));  txtAddress2.setText(Formats.STRING.formatValue(customer[17]));  txtPostal.setText(Formats.STRING.formatValue(customer[18]));  txtCity.setText(Formats.STRING.formatValue(customer[19]));  txtRegion.setText(Formats.STRING.formatValue(customer[20]));  txtCountry.setText(Formats.STRING.formatValue(customer[21]));  m_CategoryModel.setSelectedKey(customer[22]);  m_jImage.setImage((BufferedImage)customer[23]);  j_mDOB.setText(Formats.DATE.formatValue(customer[24]));  txtDiscount.setText(Formats.PERCENT.formatValue(customer[25]));  m_jTaxID.setEnabled(false);  m_jSearchkey.setEnabled(false);  m_jName.setEnabled(false);  m_jNotes.setEnabled(false);  txtMaxdebt.setEnabled(false);  txtCurdebt.setEnabled(false);  txtDiscount.setEnabled(false);  txtCurdate.setEnabled(false);  m_jVisible.setEnabled(false);  jcard.setEnabled(false);  txtFirstName.setEnabled(false);  txtLastName.setEnabled(false);  txtEmail.setEnabled(false);  txtPhone.setEnabled(false);  txtPhone2.setEnabled(false);  txtFax.setEnabled(false);  m_jImage.setEnabled(true);  j_mDOB.setEnabled(false);  txtAddress.setEnabled(false);  txtAddress2.setEnabled(false);  txtPostal.setEnabled(false);  txtCity.setEnabled(false);  txtRegion.setEnabled(false);  txtCountry.setEnabled(false);  m_jCategory.setEnabled(false);  jButton2.setEnabled(false);  jButton3.setEnabled(false);}  }
class C{  public Matrix4x4 rotateAroundAxis(ReadonlyVec3D axis,double theta){  double x, y, z, s, c, t, tx, ty;  x=axis.x();  y=axis.y();  z=axis.z();  s=Math.sin(theta);  c=Math.cos(theta);  t=1 - c;  tx=t * x;  ty=t * y;  TEMP.set(tx * x + c,tx * y + s * z,tx * z - s * y,0,tx * y - s * z,ty * y + c,ty * z + s * x,0,tx * z + s * y,ty * z - s * x,t * z * z + c,0,0,0,0,1);  return this.multiplySelf(TEMP);}  }
class C{  public void recycle(){  for (  AccessibilityNodeInfoCompat subtree : mNodeTreeMap.keySet()) {    subtree.recycle();  }  mNodeTreeMap.clear();}  }
class C{  public GetResponseMessage(GetResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetValues()) {    List<VersionedValue> __this__values=new ArrayList<VersionedValue>();    for (    VersionedValue other_element : other.values) {      __this__values.add(new VersionedValue(other_element));    }    this.values=__this__values;  }  if (other.isSetError()) {    this.error=new SyncError(other.error);  }}  }
class C{  @Override public void changedConnection(Connection con){  if (this.energy != null && con.isUp() && !con.isInitiator(getHost())) {    this.energy.reduceDiscoveryEnergy();  }}  }
class C{  protected int resolveLevelForTypeOrEnclosingTypes(char[] simpleNamePattern,char[] qualificationPattern,TypeBinding binding){  if (binding == null)   return INACCURATE_MATCH;  if (binding instanceof ReferenceBinding) {    ReferenceBinding type=(ReferenceBinding)binding;    while (type != null) {      int level=resolveLevelForType(type);      if (level != IMPOSSIBLE_MATCH)       return level;      type=type.enclosingType();    }  }  return IMPOSSIBLE_MATCH;}  }
class C{  @Override public void onCreate(){  super.onCreate();  initialize();}  }
class C{  @Deprecated public static String replace(String source,String find,String repl){  return source.replace(find,repl);}  }
class C{  boolean removeEq(Object o){  for (int i=0; i < size; i++) {    if (o == queue[i]) {      removeAt(i);      return true;    }  }  return false;}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public Subscription then(final PromiseObserverBuilder<T> builder){  return then(builder.build());}  }
class C{  public AttributeConverter removeAttributeConverter(final Class<?> clazz){  return this.converters.remove(clazz.getCanonicalName());}  }
class C{  public boolean hasMixedManagedClasses(){  Department d=null;  for (  Class_ c : getClasses()) {    if (d == null)     d=c.getManagingDept(); else     if (!d.equals(c.getManagingDept()))     return true;  }  return false;}  }
class C{  public boolean isInterfaceEnabled(){  return params.isInterfaceEnabled;}  }
class C{  public InputDialog(Window owner,String key,String text,Object... arguments){  this(owner,key,text,null,arguments);}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockExplode(EntityExplodeEvent event){  Match match=Cardinal.getMatch(event.getWorld());  if (match == null) {    return;  }  Collection<AppliedRegion> regions=get(match,ApplyType.BLOCK,ApplyType.BLOCK_BREAK);  Iterator<Block> blockIterator=event.blockList().iterator();  while (blockIterator.hasNext()) {    Block evaluating=blockIterator.next();    for (    AppliedRegion reg : regions) {      if (apply(reg,evaluating.getLocation(),null,event,event,evaluating)) {        if (event.isCancelled()) {          event.setCancelled(false);          blockIterator.remove();        }        break;      }    }  }}  }
class C{  private ArrayList<Cluster> defineClustersRANDOM(Random random) throws Exception {  ArrayList<Cluster> clusters=new ArrayList<Cluster>(m_NumClusters);  double diffInstNum=m_MaxInstNum - m_MinInstNum;  double minInstNum=m_MinInstNum;  double diffRadius=m_MaxRadius - m_MinRadius;  Cluster cluster;  for (int i=0; i < m_NumClusters; i++) {    int instNum=(int)(random.nextDouble() * diffInstNum + minInstNum);    double radius=(random.nextDouble() * diffRadius) + m_MinRadius;    cluster=new Cluster(instNum,radius,random);    clusters.add(cluster);  }  return clusters;}  }
class C{  @Override public boolean storesUpperCaseIdentifiers() throws SQLException {  debugCodeCall("storesUpperCaseIdentifiers");  String m=getMode();  return !m.equals("MySQL");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public FatalErrorException(String str){  super("Fatal Error : " + str);}  }
class C{  public SignatureVisitor visitSuperclass(){  return this;}  }
class C{  private void douglasPeuckerRecurse(int i1,int i2,LatLong[] P,double epsilon){  if (i1 == i2)   return;  if (i1 < 0 || i2 < 0)   return;  double dmax=0;  int index=0;  LatLong A=P[i1];  LatLong B=P[i2];  for (int i=i1; i != i2; ) {    if (++i >= P.length)     i=0;    double d=P[i].distanceToLineSegment(A,B);    if (d > dmax) {      index=i;      dmax=d;    }  }  if (dmax > epsilon) {    douglasPeuckerRecurse(i1,index,P,epsilon);    if (isOnBoundingBox(P[index]))     points.add(P[index]);    douglasPeuckerRecurse(index,i2,P,epsilon);  } else {    points.add(P[i1]);  }}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  OutputNode parent=node.getParent();  Mode mode=node.getMode();  if (!node.isCommitted()) {    node.remove();  }  write(parent,source,mode);}  }
class C{  public void testAutomata() throws IOException {  assertAutomatonHits(0,Automata.makeEmpty());  assertAutomatonHits(0,Automata.makeEmptyString());  assertAutomatonHits(2,Automata.makeAnyChar());  assertAutomatonHits(3,Automata.makeAnyString());  assertAutomatonHits(2,Automata.makeString("doc"));  assertAutomatonHits(1,Automata.makeChar('a'));  assertAutomatonHits(2,Automata.makeCharRange('a','b'));  assertAutomatonHits(2,Automata.makeDecimalInterval(1233,2346,0));  assertAutomatonHits(1,Automata.makeDecimalInterval(0,2000,0));  assertAutomatonHits(2,Operations.union(Automata.makeChar('a'),Automata.makeChar('b')));  assertAutomatonHits(0,Operations.intersection(Automata.makeChar('a'),Automata.makeChar('b')));  assertAutomatonHits(1,Operations.minus(Automata.makeCharRange('a','b'),Automata.makeChar('a'),DEFAULT_MAX_DETERMINIZED_STATES));}  }
class C{  public void peekUnboxed(GPR reg,int idx){  asm.emitLAddr(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_ADDRESS + (idx << LOG_BYTES_IN_STACKSLOT),FP);}  }
class C{  public boolean isExternal(){  return !hasChildren();}  }
class C{  private void drawTicks(Canvas canvas,double min,double max,double minAngle,double maxAngle,int centerX,int centerY,double longRadius,double shortRadius,double ticks,Paint paint,boolean labels){  for (double i=min; i <= max; i+=ticks) {    double angle=getAngleForValue(i,minAngle,maxAngle,min,max);    double sinValue=Math.sin(angle);    double cosValue=Math.cos(angle);    int x1=Math.round(centerX + (float)(shortRadius * sinValue));    int y1=Math.round(centerY + (float)(shortRadius * cosValue));    int x2=Math.round(centerX + (float)(longRadius * sinValue));    int y2=Math.round(centerY + (float)(longRadius * cosValue));    canvas.drawLine(x1,y1,x2,y2,paint);    if (labels) {      paint.setTextAlign(Align.LEFT);      if (x1 <= x2) {        paint.setTextAlign(Align.RIGHT);      }      String text=i + "";      if (Math.round(i) == (long)i) {        text=(long)i + "";      }      canvas.drawText(text,x1,y1,paint);    }  }}  }
class C{  public int doStartTag() throws JspException {  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();  Properties ctx=JSPEnv.getCtx(request);  WebSessionCtx wsc=WebSessionCtx.get(request);  HttpSession session=pageContext.getSession();  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu != null && wu.isLoggedIn()) {    if (ctx != null) {      WebInfo info=(WebInfo)session.getAttribute(WebInfo.NAME);      if (info == null || wu.getAD_User_ID() != info.getAD_User_ID()) {        info=new WebInfo(ctx,wu);        session.setAttribute(WebInfo.NAME,info);      }    }    JspWriter out=pageContext.getOut();    HtmlCode html=new HtmlCode();    if (wu.isCustomer() || wu.isVendor())     menuBPartner(html,wsc.wstore);    if (wu.isSalesRep())     menuSalesRep(html,wsc.wstore);    if (wu.isEmployee() || wu.isSalesRep())     menuUser(html,wu.isEmployee(),wsc.wstore);    menuAll(html,wsc.wstore);    html.output(out);  } else {    if (CLogMgt.isLevelFiner())     log.fine("No WebUser");    if (session.getAttribute(WebInfo.NAME) == null)     session.setAttribute(WebInfo.NAME,WebInfo.getGeneral());  }  return (SKIP_BODY);}  }
class C{  public static <I,A>Parser<I,A> chainr(Parser<I,A> p,Parser<I,BinaryOperator<A>> op,A x){  return or(chainr1(p,op),retn(x));}  }
class C{  private void loadPinCodeActivity(){  Intent intent=new Intent(AlreadyRegisteredActivity.this,PinCodeActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());  startActivity(intent);}  }
class C{  public Boolean read(String value){  return Boolean.valueOf(value);}  }
class C{  public static ObjectReference fromObject(Object obj){  return null;}  }
class C{  protected String[] split(String s){  List a=new ArrayList(8);  StringBuffer sb;  int i=0;  int len=s.length();  while (i < len) {    char c=s.charAt(i++);    if (XMLUtilities.isXMLSpace(c)) {      continue;    }    sb=new StringBuffer();    sb.append(c);    while (i < len) {      c=s.charAt(i++);      if (XMLUtilities.isXMLSpace(c)) {        a.add(sb.toString());        break;      }      sb.append(c);    }    if (i == len) {      a.add(sb.toString());    }  }  return (String[])a.toArray(new String[a.size()]);}  }
class C{  public boolean isAcceptDiners(){  Object oo=get_Value(COLUMNNAME_AcceptDiners);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("information about package") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:49.327 -0500",hash_original_method="28CAE1EAC4906E828B7AB10B1D04EBA6",hash_generated_method="EA73B7A27ACDD8CB3869132A9DA3CA2A") public Drawable loadIcon(PackageManager pm){  if (icon != 0) {    Drawable dr=pm.getDrawable(packageName,icon,getApplicationInfo());    if (dr != null) {      return dr;    }  }  return loadDefaultIcon(pm);}  }
class C{  public StatusBar(boolean showMemory){  super(new BorderLayout());  add(createInfoPanel(),BorderLayout.WEST);  if (showMemory) {    add(createMemoryStatus(),BorderLayout.CENTER);    JPanel iconPanel=new JPanel(new BorderLayout());    iconPanel.add(new JLabel(new AngledLinesWindowsCornerIcon()),BorderLayout.SOUTH);    add(iconPanel,BorderLayout.EAST);  } else {    setBackground(Color.WHITE);  }}  }
class C{  @Override public void onAction(ActionType at){  if (at == null) {    at=action;  }  if (isReleased()) {    return;  }  if (at.getActionCode().equals(this.action.getActionCode())) {    at.send(at.fillTargetInfo(entity));  } else {    super.onAction(at);  }}  }
class C{  @Override public double totalEstimatedQuantity(final Long woActivityId,Long mbHeaderId,final Long activityId,final WorkOrder workOrder){  Date currentTimestamp=null;  MBHeader mbHeader=null;  if (mbHeaderId == null) {    mbHeaderId=-1l;    currentTimestamp=new Date();  } else {    mbHeader=persistenceService.find(" from MBHeader where id = ?",mbHeaderId);    currentTimestamp=mbHeader.getCreatedDate();  }  Object[] params=null;  Double estQuantity=null;  params=new Object[]{workOrder,woActivityId,activityId};  estQuantity=(Double)genericService.findByNamedQuery("totalEstimatedQuantity",params);  Double estQuantityRE=null;  if (workOrder.getParent() != null)   params=new Object[]{currentTimestamp,workOrder.getParent(),workOrder.getParent(),activityId}; else   params=new Object[]{currentTimestamp,workOrder,workOrder,activityId};  estQuantityRE=(Double)genericService.findByNamedQuery("totalEstimatedQuantityForRE",params);  if (estQuantity != null && estQuantityRE != null)   estQuantity=estQuantity + estQuantityRE;  if (estQuantity == null && estQuantityRE != null)   estQuantity=estQuantityRE;  if (estQuantity == null)   return 0.0d; else   return estQuantity.doubleValue();}  }
class C{  @Override public void mergeAndOutputTransformationMetadata(Iterator<DistinctValue> values,String outputDir,int colID,FileSystem fs,TfUtils agents) throws IOException {  double min=Double.MAX_VALUE;  double max=-Double.MAX_VALUE;  int nbins=0;  DistinctValue val=new DistinctValue();  String w=null;  double d;  while (values.hasNext()) {    val.reset();    val=values.next();    w=val.getWord();    if (w.startsWith(MIN_PREFIX)) {      d=UtilFunctions.parseToDouble(w.substring(MIN_PREFIX.length()));      if (d < min)       min=d;    } else     if (w.startsWith(MAX_PREFIX)) {      d=UtilFunctions.parseToDouble(w.substring(MAX_PREFIX.length()));      if (d > max)       max=d;    } else     if (w.startsWith(NBINS_PREFIX)) {      nbins=(int)UtilFunctions.parseToLong(w.substring(NBINS_PREFIX.length()));    } else     throw new RuntimeException("MVImputeAgent: Invalid prefix while merging map output: " + w);  }  double binwidth=(max - min) / nbins;  writeTfMtd(colID,Double.toString(min),Double.toString(max),Double.toString(binwidth),Integer.toString(nbins),outputDir,fs,agents);}  }
class C{  public static String complexBlockStates(String blockstateName,Map<String,String> values){  String string="{ \n" + "  \"variants\": { \n";  int i=0;  int size=values.entrySet().size();  for (  Object o : values.entrySet()) {    i++;    Map.Entry pair=(Map.Entry)o;    string+=String.format("    \"%s=%s\":{ \"model\":%s }" + (i < size ? "," : "") + " \n",blockstateName,pair.getKey(),pair.getValue());  }  string+="  } \n" + "}";  return string;}  }
class C{  public LengthConstraint(int length,String errorMessage){  this.length=length;  this.errorMessage=errorMessage;}  }
class C{  @NamespacePermission(fields="#request.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public JobDefinition createJobDefinition(JobDefinitionCreateRequest request,boolean enforceAsync) throws Exception {  validateJobDefinitionCreateRequest(request);  if (enforceAsync) {    assertFirstTaskIsAsync(activitiHelper.constructBpmnModelFromXmlAndValidate(request.getActivitiJobXml()));  }  NamespaceEntity namespaceEntity=namespaceDaoHelper.getNamespaceEntity(request.getNamespace());  JobDefinitionEntity jobDefinitionEntity=jobDefinitionDao.getJobDefinitionByAltKey(request.getNamespace(),request.getJobName());  if (jobDefinitionEntity != null) {    throw new AlreadyExistsException("Unable to create job definition with name \"" + request.getJobName() + "\" because it already exists for namespace \""+ request.getNamespace()+ "\".");  }  ProcessDefinition processDefinition=createProcessDefinition(request.getNamespace(),request.getJobName(),request.getActivitiJobXml());  jobDefinitionEntity=createOrUpdateJobDefinitionEntity(null,namespaceEntity,request.getJobName(),request.getDescription(),processDefinition.getId(),request.getParameters(),request.getS3PropertiesLocation());  jobDefinitionEntity=jobDefinitionDao.saveAndRefresh(jobDefinitionEntity);  return createJobDefinitionFromEntity(jobDefinitionEntity);}  }
class C{  public dl addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  editor.reset(aTarget);  aTarget.addChildren(getPage(),FeedbackPanel.class);  List<SourceDocument> listOfSourceDocuements=getListOfDocs();  int currentDocumentIndex=listOfSourceDocuements.indexOf(bModel.getDocument());  if (currentDocumentIndex == listOfSourceDocuements.size() - 1) {    aTarget.appendJavaScript("alert('This is the last document!')");    return;  }  bModel.setDocumentName(listOfSourceDocuements.get(currentDocumentIndex + 1).getName());  bModel.setDocument(listOfSourceDocuements.get(currentDocumentIndex + 1));  try {    loadDocumentAction(aTarget);    setCurationSegmentBeginEnd();    update(aTarget);  } catch (  UIMAException e) {    error(ExceptionUtils.getRootCause(e));  }catch (  ClassNotFoundException e) {    error(ExceptionUtils.getRootCause(e));  }catch (  IOException e) {    error(ExceptionUtils.getRootCause(e));  }catch (  BratAnnotationException e) {    aTarget.addChildren(getPage(),FeedbackPanel.class);    error(e.getMessage());  }catch (  Exception e) {    aTarget.addChildren(getPage(),FeedbackPanel.class);    error(e.getMessage());  }  finish.setModelObject(bModel);  aTarget.add(finish.setOutputMarkupId(true));  aTarget.add(documentNamePanel);  annotator.bratRenderLater(aTarget);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.545 -0500",hash_original_method="FC94B7D2EC96B1E145D19814C89754EC",hash_generated_method="81AB3B8E692922C831C8601B8B7A83B1") static TextLine recycle(TextLine tl){  tl.mText=null;  tl.mPaint=null;  tl.mDirections=null;  tl.mMetricAffectingSpanSpanSet.recycle();  tl.mCharacterStyleSpanSet.recycle();  tl.mReplacementSpanSpanSet.recycle();synchronized (sCached) {    for (int i=0; i < sCached.length; ++i) {      if (sCached[i] == null) {        sCached[i]=tl;        break;      }    }  }  return null;}  }
class C{  @Override public void remove(){  materialize();  m_removed=true;  GPOEntry entry=m_headEntry;  while (entry != null) {    clearReverseLinkSetEntries(entry);    entry.removeAll(this);    entry=entry.m_next;  }  entry=m_headLinkEntry;  while (entry != null) {    entry.removeAll(this);    entry=entry.m_next;  }  dirty();}  }
class C{  public void method4(@ExpectedDeprecation(false) Object method4_param0,Object method4_param1){}  }
class C{  public void animateY(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  private void processPorts(Draft2Job parentJob,Draft2Job job,List<? extends ApplicationPort> ports) throws Draft2Exception {  for (  ApplicationPort port : ports) {    String prefix=job.getId().substring(job.getId().lastIndexOf(Draft2SchemaHelper.PORT_ID_SEPARATOR) + 1) + Draft2SchemaHelper.PORT_ID_SEPARATOR;    setScatter(job,prefix,port);    if (parentJob != null) {      setScatter(parentJob,prefix,port);    }    if (parentJob != null && parentJob.getApp().isWorkflow()) {      Draft2Workflow workflowApp=(Draft2Workflow)parentJob.getApp();      processDataLinks(workflowApp.getDataLinks(),port,job,true);    }    if (job != null && job.getApp().isWorkflow()) {      Draft2Workflow workflowApp=(Draft2Workflow)job.getApp();      processDataLinks(workflowApp.getDataLinks(),port,job,false);    }  }}  }
class C{  public T caseTypeArgument(TypeArgument object){  return null;}  }
class C{  public DrawerBuilder withSliderBackgroundDrawableRes(@DrawableRes int sliderBackgroundDrawableRes){  this.mSliderBackgroundDrawableRes=sliderBackgroundDrawableRes;  return this;}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceDirective_();}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public int fib(int n,int[] res){  if (n == 0)   return 0;  if (n == 1)   return 1;  if (res[n] == 0)   res[n]=fib(n - 1,res) + fib(n - 2,res);  return res[n];}  }
class C{  public static <T>T loadSpringBean(String springXmlPath,String beanName) throws IgniteException {  try {    return IgnitionEx.loadSpringBean(springXmlPath,beanName);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  private static String addKeyIdCheckToWhereStatement(String whereStatement,long id){  String newWhereStatement;  if (TextUtils.isEmpty(whereStatement))   newWhereStatement=""; else   newWhereStatement=whereStatement + " AND ";  return newWhereStatement + " _id = " + "'"+ id+ "'";}  }
class C{  protected ActionFakeDefinitionImpl(){  super();}  }
class C{  static long toData(XAtom[] atoms){  long data=unsafe.allocateMemory(getAtomSize() * atoms.length);  for (int i=0; i < atoms.length; i++) {    if (atoms[i] != null) {      atoms[i].putAtom(data + i * getAtomSize());    }  }  return data;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  private int calculateVersionRank(MigrationVersion version){  Statement statement=QueryBuilder.select().column("version").column("version_rank").from(keyspace.getName(),tableName);  statement.setConsistencyLevel(this.consistencyLevel);  ResultSet versionRows=session.execute(statement);  List<MigrationVersion> migrationVersions=new ArrayList<>();  HashMap<String,MigrationMetaHolder> migrationMetaHolders=new HashMap<>();  for (  Row versionRow : versionRows) {    migrationVersions.add(MigrationVersion.fromVersion(versionRow.getString("version")));    migrationMetaHolders.put(versionRow.getString("version"),new MigrationMetaHolder(versionRow.getInt("version_rank")));  }  Collections.sort(migrationVersions);  BatchStatement batchStatement=new BatchStatement();  PreparedStatement preparedStatement=cachePs.prepare("UPDATE " + keyspace.getName() + "."+ tableName+ " SET version_rank = ?"+ " WHERE version = ?;");  for (int i=0; i < migrationVersions.size(); i++) {    if (version.compareTo(migrationVersions.get(i)) < 0) {      for (int z=i; z < migrationVersions.size(); z++) {        String migrationVersionStr=migrationVersions.get(z).getVersion();        batchStatement.add(preparedStatement.bind(migrationMetaHolders.get(migrationVersionStr).getVersionRank() + 1,migrationVersionStr));        batchStatement.setConsistencyLevel(this.consistencyLevel);      }      return i + 1;    }  }  session.execute(batchStatement);  return migrationVersions.size() + 1;}  }
class C{  public void quitarUsuariosDeGrupo(String[] idGrupo,String[] idUsuario) throws ActionNotAllowedException {  checkPermission(ControlAccesoSecurityManager.MODIFICACION_GRUPO);  Locale locale=getServiceClient().getLocale();  List gruposVO=getGrupos(idGrupo);  LoggingEvent event1=AuditUsuarios.getLogginEventDeasignacionGrupo(this);  AuditUsuarios.addDataLogInfoGrupos(locale,event1,gruposVO);  int nGrupos=idGrupo.length;  iniciarTransaccion();  for (int i=0; i < nGrupos; i++)   grupoUsuarioDBEntity.removeGrupoUsuario(idGrupo[i],idUsuario);  commit();}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArray(String key,CharSequence[] value){  bundle.putCharSequenceArray(key,value);  return this;}  }
class C{  protected boolean drawRightBorder(Component c,Graphics g,int x,int y,int width,int height){  Rectangle borderRect=new Rectangle(width - getBorderInsets(c).right,0,getBorderInsets(c).right,height);  if (!g.getClipBounds().intersects(borderRect)) {    return false;  }  int startX=width - getBorderInsets(c).right;  int startY=BORDER_SIZE;  g.setColor(frameColor);  g.fillRect(startX + 1,startY,2,height - 1);  g.setColor(frameShadow);  g.fillRect(startX + 3,startY,2,height - 1);  g.setColor(frameHighlight);  g.drawLine(startX,startY,startX,height - 1);  return true;}  }
class C{  protected void processReturnUpdate(){  if (hasReturnUpdate()) {    getLogger().logWarningMessage(MetadataLogger.IGNORE_RETURN_UPDATE_ANNOTATION,getAnnotatedElement());  }}  }
class C{  public ViewPropertyAnimator scaleY(float value){  animateProperty(SCALE_Y,value);  return this;}  }
class C{  public Matrix4x3d shadow(double lightX,double lightY,double lightZ,double lightW,Matrix4x3dc planeTransform){  return shadow(lightX,lightY,lightZ,lightW,planeTransform,this);}  }
class C{  public int hashCode(){  return value.hashCode();}  }
class C{  private void createChildren(){  if (m_module.isLoaded()) {    for (    final INaviFunction function : m_module.getContent().getFunctionContainer().getFunctions()) {      if (function.getType() != FunctionType.IMPORT) {        add(new CFunctionIconNode(function));      }    }  }}  }
class C{  public long maxLatency(){  final String value=this.map.get("max-latency");  final long msec;  if (value == null) {    msec=Long.MAX_VALUE;  } else {    msec=Long.parseLong(value);  }  return msec;}  }
class C{  void trackHorizontalMotionScroll(int deltaX){  if (getChildCount() == 0) {    return;  }  boolean toLeft=deltaX < 0;  int limitedDeltaX=0;  if (isScrollCycle()) {    limitedDeltaX=deltaX;  } else {    limitedDeltaX=getHorizontalLimitedMotionScrollAmount(toLeft,deltaX);  }  if (limitedDeltaX != deltaX) {    mFlingRunnable.endFling(false);    onFinishedMovement();  }  offsetChildrenLeftAndRight(limitedDeltaX);  detachHorizontalOffScreenChildren(toLeft);  if (toLeft) {    fillToGalleryRight();  } else {    fillToGalleryLeft();  }  mRecycler.clear();  setHorizontalSelectionToCenterChild();  final View selChild=mSelectedChild;  if (selChild != null) {    final int childLeft=selChild.getLeft();    final int childCenter=selChild.getWidth() / 2;    final int galleryCenter=getWidth() / 2;    mSelectedCenterOffset=childLeft + childCenter - galleryCenter;  }  onScrollChanged(0,0,0,0);  invalidate();}  }
class C{  public static void resetDimensionConstants(Context context){  Resources res=context.getResources();  final float pxToDp=1.0f / res.getDisplayMetrics().density;  sStackedTabVisibleSize=res.getDimensionPixelOffset(R.dimen.stacked_tab_visible_size) * pxToDp;  sStackBufferWidth=res.getDimensionPixelOffset(R.dimen.stack_buffer_width) * pxToDp;  sStackBufferHeight=res.getDimensionPixelOffset(R.dimen.stack_buffer_height) * pxToDp;}  }
class C{  public SerialLight(String systemName,String userName){  super(systemName,userName);  initializeLight(systemName);}  }
class C{  private void storeInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE),index);}  }
class C{  void abortWithError(String msg,Element e){  reportError(msg,e);  throw new AbortProcessingException();}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.654 -0500",hash_original_method="5B8AFE9B6B91DF83BE42F6862D2EF06A",hash_generated_method="6566F84799167FB9F34667EB26111658") private void doTargetRefresh(SIPMessage sipMessage){  ContactList contactList=sipMessage.getContactHeaders();  if (contactList != null) {    Contact contact=(Contact)contactList.getFirst();    this.setRemoteTarget(contact);  }}  }
class C{  public void testMT() throws Exception {  tryMT(2);}  }
class C{  @SuppressWarnings("unchecked") public static <E>void serialize(E object,OutputStream os) throws IOException {  mapperFor((Class<E>)object.getClass()).serialize(object,os);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof SamplingXYLineRenderer)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  SamplingXYLineRenderer that=(SamplingXYLineRenderer)obj;  if (!ShapeUtilities.equal(this.legendLine,that.legendLine)) {    return false;  }  return true;}  }
class C{  static void testMove(Path dir1,Path dir2,boolean supportsLinks) throws IOException {  Path source, target, entry;  boolean sameDevice=getFileStore(dir1).equals(getFileStore(dir2));  source=createSourceFile(dir1);  target=getTargetFile(dir2);  moveAndVerify(source,target);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  createFile(target);  try {    moveAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(target);  createDirectory(target);  try {    moveAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(source);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  moveAndVerify(source,target,REPLACE_EXISTING);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  createFile(target);  moveAndVerify(source,target,REPLACE_EXISTING);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  createDirectory(target);  moveAndVerify(source,target,REPLACE_EXISTING);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  createDirectory(target);  entry=target.resolve("foo");  createFile(entry);  try {    moveAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(entry);  delete(source);  delete(target);  source=createSourceFile(dir1);  target=getTargetFile(dir1);  moveAndVerify(source,target,ATOMIC_MOVE);  delete(target);  if (!sameDevice) {    source=createSourceFile(dir1);    target=getTargetFile(dir2);    try {      moveAndVerify(source,target,ATOMIC_MOVE);      throw new RuntimeException("AtomicMoveNotSupportedException expected");    } catch (    AtomicMoveNotSupportedException x) {    }    delete(source);  }  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  moveAndVerify(source,target);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  createFile(target);  try {    moveAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(target);  createDirectory(target);  try {    moveAndVerify(source,target);    throw new RuntimeException("FileAlreadyExistsException expected");  } catch (  FileAlreadyExistsException x) {  }  delete(source);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  moveAndVerify(source,target,REPLACE_EXISTING);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  createFile(target);  moveAndVerify(source,target,REPLACE_EXISTING);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  createDirectory(target);  moveAndVerify(source,target,REPLACE_EXISTING);  delete(target);  source=createSourceDirectory(dir1);  target=getTargetFile(dir2);  createDirectory(target);  entry=target.resolve("foo");  createFile(entry);  try {    moveAndVerify(source,target,REPLACE_EXISTING);    throw new RuntimeException("DirectoryNotEmptyException expected");  } catch (  DirectoryNotEmptyException x) {  }  delete(entry);  delete(source);  delete(target);  source=createSourceDirectory(dir1);  createFile(source.resolve("foo"));  target=getTargetFile(dir1);  moveAndVerify(source,target);  delete(target.resolve("foo"));  delete(target);  if (!sameDevice) {    source=createSourceDirectory(dir1);    createFile(source.resolve("foo"));    target=getTargetFile(dir2);    try {      moveAndVerify(source,target);      throw new RuntimeException("IOException expected");    } catch (    IOException x) {    }    delete(source.resolve("foo"));    delete(source);  }  source=createSourceDirectory(dir1);  createFile(source.resolve("foo"));  target=getTargetFile(dir1);  moveAndVerify(source,target,ATOMIC_MOVE);  delete(target.resolve("foo"));  delete(target);  if (supportsLinks) {    Path tmp=createSourceFile(dir1);    source=dir1.resolve("link");    createSymbolicLink(source,tmp);    target=getTargetFile(dir2);    moveAndVerify(source,target);    delete(target);    delete(tmp);  }  if (supportsLinks) {    source=dir1.resolve("link");    createSymbolicLink(source,dir2);    target=getTargetFile(dir2);    moveAndVerify(source,target);    delete(target);  }  if (supportsLinks) {    Path tmp=Paths.get("doesnotexist");    source=dir1.resolve("link");    createSymbolicLink(source,tmp);    target=getTargetFile(dir2);    moveAndVerify(source,target);    delete(target);  }  if (supportsLinks) {    source=dir1.resolve("link");    createSymbolicLink(source,dir2);    target=getTargetFile(dir2);    createFile(target);    try {      moveAndVerify(source,target);      throw new RuntimeException("FileAlreadyExistsException expected");    } catch (    FileAlreadyExistsException x) {    }    delete(source);    delete(target);  }  if (supportsLinks) {    source=dir1.resolve("link");    createSymbolicLink(source,dir2);    target=getTargetFile(dir2);    createFile(target);    moveAndVerify(source,target,REPLACE_EXISTING);    delete(target);  }  if (supportsLinks) {    source=dir1.resolve("link");    createSymbolicLink(source,dir2);    target=getTargetFile(dir2);    createDirectory(target);    moveAndVerify(source,target,REPLACE_EXISTING);    delete(target);  }  if (supportsLinks) {    source=dir1.resolve("link");    createSymbolicLink(source,dir2);    target=getTargetFile(dir2);    createDirectory(target);    entry=target.resolve("foo");    createFile(entry);    try {      moveAndVerify(source,target);      throw new RuntimeException("FileAlreadyExistsException expected");    } catch (    FileAlreadyExistsException x) {    }    delete(entry);    delete(source);    delete(target);  }  if (supportsLinks) {    source=dir1.resolve("link");    createSymbolicLink(source,dir1);    target=getTargetFile(dir2);    createFile(target);    moveAndVerify(source,target,REPLACE_EXISTING);    delete(target);  }  source=createSourceFile(dir1);  target=getTargetFile(dir2);  try {    move(null,target);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException x) {  }  try {    move(source,null);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException x) {  }  try {    move(source,target,(CopyOption[])null);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException x) {  }  try {    CopyOption[] opts={REPLACE_EXISTING,null};    move(source,target,opts);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException x) {  }  delete(source);  source=createSourceFile(dir1);  target=getTargetFile(dir2);  try {    move(source,target,new CopyOption(){    });  } catch (  UnsupportedOperationException x) {  }  try {    move(source,target,REPLACE_EXISTING,new CopyOption(){    });  } catch (  UnsupportedOperationException x) {  }  delete(source);}  }
class C{  public boolean isInParamTag(){  return (this.flags & (PARAM_TAG | IN_PARAM_TAG)) != 0;}  }
class C{  public ExecutionTargetException(SaaSApplicationException appException){  super(appException,appException.getMessageParams());  setMessageKey(appException.getMessageKey());}  }
class C{  public int viewToModel(GlyphView v,float x,float y,Shape a,Position.Bias[] biasReturn){  Rectangle2D alloc=(a instanceof Rectangle2D) ? (Rectangle2D)a : a.getBounds2D();  TextHitInfo hit=layout.hitTestChar(x - (float)alloc.getX(),0);  int pos=hit.getInsertionIndex();  if (pos == v.getEndOffset()) {    pos--;  }  biasReturn[0]=hit.isLeadingEdge() ? Position.Bias.Forward : Position.Bias.Backward;  return pos + v.getStartOffset();}  }
class C{  static String formatTime(long millis){  String s=new java.sql.Time(java.sql.Time.valueOf("0:0:0").getTime() + millis).toString() + "." + ("" + (1000 + (millis % 1000))).substring(1);  if (s.startsWith("00:")) {    s=s.substring(3);  }  return s;}  }
class C{  public StartExecParams withDetach(boolean detach){  this.detach=detach;  return this;}  }
class C{  public int compare(Candidate<?> c1,Candidate<?> c2){  return CandidatePrioritizer.compareCandidates(c1,c2);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static CachableRed convertToLsRGB(CachableRed src){  ColorModel cm=src.getColorModel();  ColorSpace cs=cm.getColorSpace();  if (cs == ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB))   return src;  return new Any2LsRGBRed(src);}  }
class C{  void appletStop(){  panel.sendEvent(AppletPanel.APPLET_STOP);}  }
class C{  public static LangString valueOf(String label,String language){  return new LangString(label,language);}  }
class C{  public void initialize(){  if (isClosed.get()) {    logger.info("Initialing Parallel Client Resources: actor system, HttpClientStore, Task Manager ....");    ActorConfig.createAndGetActorSystem();    httpClientStore.init();    tcpSshPingResourceStore.init();    ParallelTaskManager.getInstance();    isClosed.set(false);    logger.info("Parallel Client Resources has been initialized.");  } else {    logger.debug("NO OP. Parallel Client Resources has already been initialized.");  }}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Bound named(String name){  return new Bound(name);}  }
class C{  private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < TEXT_BASIC_SET_CHARS.length) {          char textChar=TEXT_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(textChar + 128));            upperShift=false;          } else {            result.append(textChar);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (cValue < TEXT_SHIFT3_SET_CHARS.length) {char textChar=TEXT_SHIFT3_SET_CHARS[cValue];if (upperShift) {result.append((char)(textChar + 128));upperShift=false;} else {result.append(textChar);}shift=0;} else {throw FormatException.getFormatInstance();}break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  @Override public void operate(Population population){  super.operate(population);  this.temperature-=delta;}  }
class C{  public static void doDefaultLayout(Composite parent,DialogField[] editors,boolean labelOnTop){  doDefaultLayout(parent,editors,labelOnTop,0,0);}  }
class C{  private boolean calculatePL(){  if (m_M_Product_ID == 0)   return false;  if (m_M_PriceList_ID == 0) {    log.log(Level.SEVERE,"No PriceList");    Trace.printStack();    return false;  }  String sql="SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd," + " bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList," + " bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,"+ " p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID,p.M_Product_Category_ID,pl.EnforcePriceLimit "+ "FROM M_Product p"+ " INNER JOIN M_ProductPrice pp ON (p.M_Product_ID=pp.M_Product_ID)"+ " INNER JOIN  M_PriceList_Version pv ON (pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID)"+ " INNER JOIN M_Pricelist pl ON (pv.M_PriceList_ID=pl.M_PriceList_ID) "+ "WHERE pv.IsActive='Y'"+ " AND pp.IsActive='Y'"+ " AND p.M_Product_ID=?"+ " AND pv.M_PriceList_ID=?"+ " ORDER BY pv.ValidFrom DESC";  m_calculated=false;  if (m_PriceDate == null)   m_PriceDate=new Timestamp(System.currentTimeMillis());  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    pstmt.setInt(2,m_M_PriceList_ID);    rs=pstmt.executeQuery();    while (!m_calculated && rs.next()) {      Timestamp plDate=rs.getTimestamp(5);      if (plDate == null || !m_PriceDate.before(plDate)) {        m_PriceStd=rs.getBigDecimal(1);        if (rs.wasNull())         m_PriceStd=Env.ZERO;        m_PriceList=rs.getBigDecimal(2);        if (rs.wasNull())         m_PriceList=Env.ZERO;        m_PriceLimit=rs.getBigDecimal(3);        if (rs.wasNull())         m_PriceLimit=Env.ZERO;        m_C_UOM_ID=rs.getInt(4);        m_C_Currency_ID=rs.getInt(6);        m_M_Product_Category_ID=rs.getInt(7);        m_enforcePriceLimit="Y".equals(rs.getString(8));        log.fine("M_PriceList_ID=" + m_M_PriceList_ID + "("+ plDate+ ")"+ " - "+ m_PriceStd);        m_calculated=true;        break;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    m_calculated=false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (!m_calculated)   log.finer("Not found (PL)");  return m_calculated;}  }
class C{  protected void calcMinMax(List<? extends DataSet<?>> dataSets){  if (dataSets == null || dataSets.size() < 1) {    mYMax=0f;    mYMin=0f;  } else {    mYMin=dataSets.get(0).getYMin();    mYMax=dataSets.get(0).getYMax();    for (int i=0; i < dataSets.size(); i++) {      if (dataSets.get(i).getYMin() < mYMin)       mYMin=dataSets.get(i).getYMin();      if (dataSets.get(i).getYMax() > mYMax)       mYMax=dataSets.get(i).getYMax();    }    T firstLeft=getFirstLeft();    if (firstLeft != null) {      mLeftAxisMax=firstLeft.getYMax();      mLeftAxisMin=firstLeft.getYMin();      for (      DataSet<?> dataSet : dataSets) {        if (dataSet.getAxisDependency() == AxisDependency.LEFT) {          if (dataSet.getYMin() < mLeftAxisMin)           mLeftAxisMin=dataSet.getYMin();          if (dataSet.getYMax() > mLeftAxisMax)           mLeftAxisMax=dataSet.getYMax();        }      }    }    T firstRight=getFirstRight();    if (firstRight != null) {      mRightAxisMax=firstRight.getYMax();      mRightAxisMin=firstRight.getYMin();      for (      DataSet<?> dataSet : dataSets) {        if (dataSet.getAxisDependency() == AxisDependency.RIGHT) {          if (dataSet.getYMin() < mRightAxisMin)           mRightAxisMin=dataSet.getYMin();          if (dataSet.getYMax() > mRightAxisMax)           mRightAxisMax=dataSet.getYMax();        }      }    }    handleEmptyAxis(firstLeft,firstRight);  }}  }
class C{  public void put(double val){  n+=1.;  if (m1 == Double.POSITIVE_INFINITY || m1 == Double.NEGATIVE_INFINITY) {    m1+=val;    return;  }  final double delta=val - m1;  m1+=delta / n;}  }
class C{  public void rejoinGroupChatAsPartOfSendOperation(String chatId) throws PayloadException, NetworkException {  mChatService.rejoinGroupChatAsPartOfSendOperation(chatId);}  }
class C{  public byte[] toByteArray(){  int numBytes=(preamble.getPreambleLongs() << 3) + fields.numBytesToSerialize();  byte[] retVal=new byte[numBytes];  fields.intoByteArray(retVal,preamble.intoByteArray(retVal,0));  return retVal;}  }
class C{  public EdgeListGraph(List<Node> nodes){  this();  if (nodes == null) {    throw new NullPointerException();  }  for (  Object variable : nodes) {    if (!addNode((Node)variable)) {      throw new IllegalArgumentException();    }  }  for (  Node node : nodes) {    namesHash.put(node.getName(),node);  }}  }
class C{  public String globalInfo(){  return "Writes to a database (tested with MySQL, InstantDB, HSQLDB).";}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BESpinnerUI();}  }
class C{  public final boolean isFatalEnabled(){  return false;}  }
class C{  private static RegExp compile(CharacterClass... regexPattern){  List<String> ss=from(regexPattern);  String pattern=ListHelper.join(ss,"|");  return RegExp.compile(pattern,"g");}  }
class C{  public boolean isAllowReturnToStagingEnabled(){  return _allowCarsReturnStaging;}  }
class C{  public Compactor majorIndex(long index){  this.majorIndex=Math.max(this.majorIndex,index);  return this;}  }
class C{  private MaterialMenuInflater(Context context,MenuInflater inflater){  mContext=context;  mInflater=inflater;  mDefaultColor=getDefaultColor();}  }
class C{  public static String join(int[] self,String separator){  StringBuilder buffer=new StringBuilder();  boolean first=true;  if (separator == null)   separator="";  for (  int next : self) {    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(next);  }  return buffer.toString();}  }
class C{  public <T>Command addRequiredArgument(String argument,Class<T> type){  if (!this.optionalArguments.isEmpty()) {    LLibrary.LOGGER.error("Please register required arguments before optional ones! Skipping argument " + argument + " with type "+ type+ ".");    return this;  }  IArgumentParser<T> argumentParser=CommandHandler.INSTANCE.getParserForType(type);  if (argumentParser != null) {    this.requiredArguments.put(argument,argumentParser);  } else {    LLibrary.LOGGER.error("Unable to find argument parser for type " + type + ". Skipping argument.");  }  return this;}  }
class C{  public UTF8Reader(InputStream inputStream,int size){  fInputStream=inputStream;  fBuffer=new byte[size];}  }
class C{  public void centerViewAt(Coord loc){  JScrollPane sp=main.getPlayFieldScroll();  Coord gLoc=this.field.getGraphicsPosition(loc);  int midX, midY;  updateView();  midX=(int)gLoc.getX() - sp.getViewport().getWidth() / 2;  midY=(int)gLoc.getY() - sp.getViewport().getHeight() / 2;  sp.getHorizontalScrollBar().setValue(midX);  sp.getVerticalScrollBar().setValue(midY);}  }
class C{  protected void firePathLeafStateChanged(TreePath path){  fireTreeStructureChanged(path);}  }
class C{  private void interpolate(double alpha){  mCurrentState.position=mCurrentState.position * alpha + mPreviousState.position * (1 - alpha);  mCurrentState.velocity=mCurrentState.velocity * alpha + mPreviousState.velocity * (1 - alpha);}  }
class C{  @Override public final boolean delete(DBIDRef id){  throw new NotImplementedException();}  }
class C{  @Override protected void forceInsertAttributeAt(int position){  int index=locateIndex(position);  m_NumAttributes++;  if ((index >= 0) && (m_Indices[index] == position)) {    int[] tempIndices=new int[m_Indices.length + 1];    double[] tempValues=new double[m_AttValues.length + 1];    System.arraycopy(m_Indices,0,tempIndices,0,index);    System.arraycopy(m_AttValues,0,tempValues,0,index);    tempIndices[index]=position;    tempValues[index]=Utils.missingValue();    for (int i=index; i < m_Indices.length; i++) {      tempIndices[i + 1]=m_Indices[i] + 1;      tempValues[i + 1]=m_AttValues[i];    }    m_Indices=tempIndices;    m_AttValues=tempValues;  } else {    int[] tempIndices=new int[m_Indices.length + 1];    double[] tempValues=new double[m_AttValues.length + 1];    System.arraycopy(m_Indices,0,tempIndices,0,index + 1);    System.arraycopy(m_AttValues,0,tempValues,0,index + 1);    tempIndices[index + 1]=position;    tempValues[index + 1]=Utils.missingValue();    for (int i=index + 1; i < m_Indices.length; i++) {      tempIndices[i + 1]=m_Indices[i] + 1;      tempValues[i + 1]=m_AttValues[i];    }    m_Indices=tempIndices;    m_AttValues=tempValues;  }}  }
class C{  public Skyline(Tree tree,double epsilon){  this(new TreeIntervals(tree),1.0,epsilon);}  }
class C{  public void start(Vertx vertx,ServicePublisher publisher,JsonObject configuration,Future<Void> future){  delegate.start((io.vertx.core.Vertx)vertx.getDelegate(),(io.vertx.servicediscovery.spi.ServicePublisher)publisher.getDelegate(),configuration,(io.vertx.core.Future<java.lang.Void>)future.getDelegate());}  }
class C{  public void mousePressed(MouseEvent event){  if (event == null || event.isConsumed())   return;  if (this.parent != null)   this.parent.mousePressed(event);}  }
class C{  public NumericRange(int begin){  init(new int[]{begin,-1});}  }
class C{  static boolean doesMenuBarBorderToolBar(JMenuBar c){  JToolBar tb=(JToolBar)MetalToolBarUI.findRegisteredComponentOfType(c,JToolBar.class);  if (tb != null && tb.getOrientation() == JToolBar.HORIZONTAL) {    JRootPane rp=SwingUtilities.getRootPane(c);    Point point=new Point(0,0);    point=SwingUtilities.convertPoint(c,point,rp);    int menuX=point.x;    int menuY=point.y;    point.x=point.y=0;    point=SwingUtilities.convertPoint(tb,point,rp);    return (point.x == menuX && menuY + c.getHeight() == point.y && c.getWidth() == tb.getWidth());  }  return false;}  }
class C{  public List<String> updateDeletionStatus(List<String> loadIds,LoadMetadataDetails[] listOfLoadFolderDetailsArray,List<String> invalidLoadIds){  for (  String loadId : loadIds) {    boolean loadFound=false;    for (    LoadMetadataDetails loadMetadata : listOfLoadFolderDetailsArray) {      if (loadId.equalsIgnoreCase(loadMetadata.getLoadName())) {        if (!CarbonCommonConstants.MARKED_FOR_DELETE.equals(loadMetadata.getLoadStatus())) {          loadFound=true;          loadMetadata.setLoadStatus(CarbonCommonConstants.MARKED_FOR_DELETE);          loadMetadata.setModificationOrdeletionTimesStamp(readCurrentTime());          LOG.info("LoadId " + loadId + " Marked for Delete");        }        break;      }    }    if (!loadFound) {      LOG.audit("Delete load by Id is failed. No matching load id found.");      invalidLoadIds.add(loadId);      return invalidLoadIds;    }  }  return invalidLoadIds;}  }
class C{  public static boolean isConnected(Context context){  ConnectivityManager conn=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo info=conn.getActiveNetworkInfo();  return (info != null && info.isConnected());}  }
class C{  void addTypeArguments(List<? extends Tree> typeArguments,Indent plusIndent){  if (typeArguments == null || typeArguments.isEmpty()) {    return;  }  token("<");  builder.open(plusIndent);  boolean first=true;  for (  Tree typeArgument : typeArguments) {    if (!first) {      token(",");      builder.breakToFill(" ");    }    scan(typeArgument,null);    first=false;  }  builder.close();  token(">");}  }
class C{  public static void scale(double[] a,double b){  for (int i=0; i < a.length; i++) {    a[i]=a[i] * b;  }}  }
class C{  public static ArrayModifiableDBIDs newArray(){  return DBIDFactory.FACTORY.newArray();}  }
class C{  @Nullable public static DomainApplicationIndex load(String fullyQualifiedDomainName){  return ofy().load().type(DomainApplicationIndex.class).id(fullyQualifiedDomainName).now();}  }
class C{  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  String name=(String)ois.readObject();  if (name == null) {    this.rawClass=null;    this.type=null;    return;  }  this.rawClass=getClass(name);  Boolean isParameterized=(Boolean)ois.readObject();  if (isParameterized) {    GenericClass ownerType=(GenericClass)ois.readObject();    @SuppressWarnings("unchecked") List<GenericClass> parameterClasses=(List<GenericClass>)ois.readObject();    Type[] parameterTypes=new Type[parameterClasses.size()];    for (int i=0; i < parameterClasses.size(); i++)     parameterTypes[i]=parameterClasses.get(i).getType();    this.type=new ParameterizedTypeImpl(rawClass,parameterTypes,ownerType.getType());  } else {    this.type=addTypeParameters(rawClass);  }}  }
class C{  @Override public String toString(){  return JsonUtil.toJson(data);}  }
class C{  public static boolean removeUsername(UUID uuid){  checkNotNull(uuid);  if (!loaded) {    load();  }  if (map.remove(uuid) != null) {    return true;  }  return false;}  }
class C{  protected void close() throws IOException {  shutdownEntry();  if (connection.isOpen())   connection.close();}  }
class C{  public boolean isCallableConstructor(){  return false;}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 3:case 2:case 1:    return true;default :  break;}return false;}  }
class C{  public boolean isEndTagOptional(){  return optionalEndTag_;}  }
class C{  private static synchronized String makeDateStringGnuStep(Date date){  return sdfGnuStep.format(date);}  }
class C{  public static void initMinAvrScore(final CFlags flags){  flags.registerOptional(FILTER_AVR_FLAG,Double.class,"Float","if set, fail variants with AVR scores below this value").setCategory(CommonFlagCategories.REPORTING);}  }
class C{  public byte[] toBytes(){  ByteBuffer geometryByteBuffer=data.toByteBuffer();  geometryByteBuffer.rewind();  int size=12 + geometryByteBuffer.capacity();  ByteBuffer buf=ByteBuffer.allocate(size);  buf.order(ByteOrder.LITTLE_ENDIAN);  buf.rewind();  buf.putInt(ByteSwapper.swap(recordNumber));  buf.putInt(ByteSwapper.swap(contentLength));  buf.putInt(getIntFromShapeType(shapeType));  byte[] bytes=geometryByteBuffer.array();  for (int i=0; i < bytes.length; i++) {    buf.put(bytes[i]);  }  return buf.array();}  }
class C{  public Ref readRef() throws SQLException {  return (Ref)getNextAttribute();}  }
class C{  public PKCS9Attribute(ObjectIdentifier oid,Object value) throws IllegalArgumentException {  init(oid,value);}  }
class C{  @Override public boolean add(IInterval e){  checkInterval(e);  return root.insert(e);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testKeyPairGenerator07() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  Provider provider=null;  for (int i=0; i < algs.length; i++) {    try {      KeyPairGenerator.getInstance(algs[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  void handleF10KeyPress(KeyEvent event){  int keyState=event.getModifiers();  if (((keyState & InputEvent.ALT_MASK) != 0) || ((keyState & InputEvent.SHIFT_MASK) != 0) || ((keyState & InputEvent.CTRL_MASK) != 0)) {    return;  }  grabInput();  selectItem(getFirstSelectableItem(),true);}  }
class C{  public int insert(Database database,String shardName,int channelNumber) throws SQLException {  shardId.setValue(shardName);  channel.setValue(channelNumber);  return database.insert(channelTable);}  }
class C{  public void createDatabaseEntitiesForStoragePolicyTesting(String storagePolicyNamespace,List<String> storagePolicyRuleTypes,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,List<String> fileTypes,List<String> storageNames,List<String> destinationStorageNames){  NamespaceEntity storagePolicyNamespaceEntity=namespaceDao.getNamespaceByCd(storagePolicyNamespace);  if (storagePolicyNamespaceEntity == null) {    namespaceDaoTestHelper.createNamespaceEntity(storagePolicyNamespace);  }  if (!CollectionUtils.isEmpty(storagePolicyRuleTypes)) {    for (    String storagePolicyRuleType : storagePolicyRuleTypes) {      if (storagePolicyRuleTypeDao.getStoragePolicyRuleTypeByCode(storagePolicyRuleType) == null) {        storagePolicyRuleTypeDaoTestHelper.createStoragePolicyRuleTypeEntity(storagePolicyRuleType,AbstractServiceTest.DESCRIPTION);      }    }  }  BusinessObjectDefinitionEntity businessObjectDefinitionEntity;  if (StringUtils.isNotBlank(businessObjectDefinitionName)) {    businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(new BusinessObjectDefinitionKey(businessObjectDefinitionNamespace,businessObjectDefinitionName));    if (businessObjectDefinitionEntity == null) {      businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionNamespace,businessObjectDefinitionName,AbstractServiceTest.DATA_PROVIDER_NAME,AbstractServiceTest.BDEF_DESCRIPTION);    }  }  if (!CollectionUtils.isEmpty(fileTypes)) {    for (    String businessObjectFormatFileType : fileTypes) {      fileTypeDaoTestHelper.createFileTypeEntity(businessObjectFormatFileType);    }  }  if (!CollectionUtils.isEmpty(storageNames)) {    for (    String storageName : storageNames) {      if (storageDao.getStorageByName(storageName) == null) {        storageDaoTestHelper.createStorageEntity(storageName,StoragePlatformEntity.S3,Arrays.asList(new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),AbstractServiceTest.S3_BUCKET_NAME),new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KEY_PREFIX_VELOCITY_TEMPLATE),AbstractServiceTest.S3_KEY_PREFIX_VELOCITY_TEMPLATE),new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX),Boolean.TRUE.toString()),new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE),Boolean.TRUE.toString())));      }    }  }  if (!CollectionUtils.isEmpty(destinationStorageNames)) {    for (    String destinationStorageName : destinationStorageNames) {      if (storageDao.getStorageByName(destinationStorageName) == null) {        storageDaoTestHelper.createStorageEntity(destinationStorageName,StoragePlatformEntity.GLACIER,configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),AbstractServiceTest.S3_BUCKET_NAME_2);      }    }  }}  }
class C{  public String pickupCar(Car car,boolean isManifest,boolean isTwoColumnTrack){  StringBuffer buf=new StringBuffer();  String[] format;  if (isManifest && !isTwoColumnTrack) {    format=Setup.getPickupManifestMessageFormat();  } else   if (!isManifest && !isTwoColumnTrack) {    format=Setup.getPickupSwitchListMessageFormat();  } else   if (isManifest && isTwoColumnTrack) {    format=Setup.getPickupTwoColumnByTrackManifestMessageFormat();  } else {    format=Setup.getPickupTwoColumnByTrackSwitchListMessageFormat();  }  for (  String attribute : format) {    String s=getCarAttribute(car,attribute,PICKUP,!LOCAL);    buf.append(s);  }  return buf.toString();}  }
class C{  static List<String> formatTasks(Iterator<Entity> tasks){  List<String> strings=new ArrayList<>();  while (tasks.hasNext()) {    Entity task=tasks.next();    if (task.getBoolean("done")) {      strings.add(String.format("%d : %s (done)",task.key().id(),task.getString("description")));    } else {      strings.add(String.format("%d : %s (created %s)",task.key().id(),task.getString("description"),task.getDateTime("created")));    }  }  return strings;}  }
class C{  @Override public boolean equals(Object o){  return (o.getClass() == getClass() && ((PlaidItem)o).id == id);}  }
class C{  public static String formatCsv(Number nr){  if (nr == null) {    return "";  }  return nr.toString();}  }
class C{  public boolean isWillingToRelocate(){  Object oo=get_Value(COLUMNNAME_IsWillingToRelocate);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ParameterizedBuiltin(HashMap<String,Lop> paramLops,OperationTypes op,DataType dt,ValueType vt){  super(Lop.Type.ParameterizedBuiltin,dt,vt);  _operation=op;  for (  Lop lop : paramLops.values()) {    this.addInput(lop);    lop.addOutput(this);  }  _inputParams=paramLops;  boolean breaksAlignment=false;  boolean aligner=false;  boolean definesMRJob=false;  lps.addCompatibility(JobType.INVALID);  lps.setProperties(inputs,ExecType.CP,ExecLocation.ControlProgram,breaksAlignment,aligner,definesMRJob);}  }
class C{  public DistributedLogClientBuilder thriftmux(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setThriftMux(enabled);  return newBuilder;}  }
class C{  public BlobStoreIndexShardSnapshot(String snapshot,long indexVersion,List<FileInfo> indexFiles,long startTime,long time,int numberOfFiles,long totalSize){  assert snapshot != null;  assert indexVersion >= 0;  this.snapshot=snapshot;  this.indexVersion=indexVersion;  this.indexFiles=Collections.unmodifiableList(new ArrayList<>(indexFiles));  this.startTime=startTime;  this.time=time;  this.numberOfFiles=numberOfFiles;  this.totalSize=totalSize;}  }
class C{  public static void addMetallurgicInfuserRecipe(InfuseType infuse,int amount,ItemStack input,ItemStack output){  addRecipe(Recipe.METALLURGIC_INFUSER,new MetallurgicInfuserRecipe(new InfusionInput(infuse,amount,input),output));}  }
class C{  @Override public Element store(Object o){  getInstance(o);  Element e=new Element("connection");  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  public boolean isInExludedWorld(Player player){  if (excludedWorldSet.isEmpty())   return false;  return excludedWorldSet.contains(player.getWorld().getName());}  }
class C{  public IndentingWriter(Writer out){  this(out,4);}  }
class C{  public final void init(AlgorithmParameterSpec genParamSpec,SecureRandom random) throws InvalidAlgorithmParameterException {  paramGenSpi.engineInit(genParamSpec,random);}  }
class C{  public static boolean hasTimerData(InvocationSequenceData data){  return null != data.getTimerData();}  }
class C{  public IconPanel(final String text,final JComponent additionalComponent){  super(new BorderLayout());  if (ACCEPT_IMAGE == null) {    try {      ACCEPT_IMAGE=new ImageIcon(CallResolverDialog.class.getResource("accept.png").toURI().toURL());      BULLET_IMAGE=new ImageIcon(CallResolverDialog.class.getResource("bullet_blue.png").toURI().toURL());    } catch (    MalformedURLException|URISyntaxException e) {      e.printStackTrace();    }  }  textLabel=new JLabel(text);  textLabel.setEnabled(false);  add(textLabel);  if (additionalComponent != null) {    this.additionalComponent=additionalComponent;    add(additionalComponent,BorderLayout.EAST);  }  setPreferredSize(new Dimension(200,20));}  }
class C{  public void deleteAsync(final String diskId,final FutureCallback<Task> responseCallback) throws IOException {  deleteObjectAsync(diskId,responseCallback);}  }
class C{  protected void onEmptyDbCreated(){  Utilities.getPrefs(mContext).edit().putBoolean(EMPTY_DATABASE_CREATED,true).commit();  ManagedProfileHeuristic.processAllUsers(Collections.<UserHandleCompat>emptyList(),mContext);}  }
class C{  public StringEncoderComparator(){}  }
class C{  public static NumericEntityEscaper above(final int codepoint){  return outsideOf(0,codepoint);}  }
class C{  public HashCodeBuilder append(final boolean[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final boolean element : array) {      append(element);    }  }  return this;}  }
class C{  public ByteRasterLocation(double latitude,double longitude,String name,byte bytearr[]){  super(latitude,longitude,name,getIconRaster(latitude,longitude,bytearr));  if (location instanceof OMRaster) {    setHorizontalLabelBuffer((((OMRaster)location).getWidth() / 2) + SPACING);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isReliable(){  return true;}  }
class C{  public int copyLinesFrom(MOrder otherOrder,boolean counter,boolean copyASI){  if (isProcessed() || isPosted() || otherOrder == null)   return 0;  MOrderLine[] fromLines=otherOrder.getLines(false,null);  int count=0;  for (int i=0; i < fromLines.length; i++) {    MOrderLine line=new MOrderLine(this);    PO.copyValues(fromLines[i],line,getAD_Client_ID(),getAD_Org_ID());    line.setC_Order_ID(getC_Order_ID());    line.setQtyDelivered(Env.ZERO);    line.setQtyInvoiced(Env.ZERO);    line.setQtyReserved(Env.ZERO);    line.setDateDelivered(null);    line.setDateInvoiced(null);    line.setOrder(this);    line.set_ValueNoCheck("C_OrderLine_ID",I_ZERO);    if (!copyASI) {      line.setM_AttributeSetInstance_ID(0);      line.setS_ResourceAssignment_ID(0);    }    if (counter)     line.setRef_OrderLine_ID(fromLines[i].getC_OrderLine_ID()); else     line.setRef_OrderLine_ID(0);    line.setLink_OrderLine_ID(0);    if (getC_BPartner_ID() != otherOrder.getC_BPartner_ID())     line.setTax();    line.setProcessed(false);    if (line.save(get_TrxName()))     count++;    if (counter) {      fromLines[i].setRef_OrderLine_ID(line.getC_OrderLine_ID());      fromLines[i].save(get_TrxName());    }  }  if (fromLines.length != count)   log.log(Level.SEVERE,"Line difference - From=" + fromLines.length + " <> Saved="+ count);  return count;}  }
class C{  static String scanString(IXMLReader reader,char entityChar,IXMLEntityResolver entityResolver) throws IOException, XMLParseException {  StringBuffer result=new StringBuffer();  int startingLevel=reader.getStreamLevel();  char delim=reader.read();  if ((delim != '\'') && (delim != '"')) {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"delimited string");  }  for (; ; ) {    String str=XMLUtil.read(reader,entityChar);    char ch=str.charAt(0);    if (ch == entityChar) {      if (str.charAt(1) == '#') {        result.append(XMLUtil.processCharLiteral(str));      } else {        XMLUtil.processEntity(str,reader,entityResolver);      }    } else     if (ch == '&') {      reader.unread(ch);      str=XMLUtil.read(reader,'&');      if (str.charAt(1) == '#') {        result.append(XMLUtil.processCharLiteral(str));      } else {        result.append(str);      }    } else     if (reader.getStreamLevel() == startingLevel) {      if (ch == delim) {        break;      } else       if ((ch == 9) || (ch == 10) || (ch == 13)) {        result.append(' ');      } else {        result.append(ch);      }    } else {      result.append(ch);    }  }  return result.toString();}  }
class C{  public void insert(float sample){  mBuffer[mBufferPointer]=sample;  mBufferPointer++;  mBufferPointer=mBufferPointer % mBufferSize;}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){  return new XYBarRendererState(info);}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    r.run();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.327 -0500",hash_original_method="BBC7B52EA680791B1ED24327B6650764",hash_generated_method="2090B7A89F94B4327FE79244B9EB4BB6") public static void dumpCurrentRow(Cursor cursor,StringBuilder sb){  String[] cols=cursor.getColumnNames();  sb.append("" + cursor.getPosition() + " {\n");  int length=cols.length;  for (int i=0; i < length; i++) {    String value;    try {      value=cursor.getString(i);    } catch (    SQLiteException e) {      value="<unprintable>";    }    sb.append("   " + cols[i] + '='+ value+ "\n");  }  sb.append("}\n");}  }
class C{  public static void trimIndentation(String[] lines,int tabWidth,int indentWidth,boolean considerFirstLine){  String[] toDo=new String[lines.length];  int minIndent=Integer.MAX_VALUE;  for (int i=considerFirstLine ? 0 : 1; i < lines.length; i++) {    String line=lines[i];    if (containsOnlyWhitespaces(line))     continue;    toDo[i]=line;    int indent=computeIndentUnits(line,tabWidth,indentWidth);    if (indent < minIndent) {      minIndent=indent;    }  }  if (minIndent > 0) {    for (int i=considerFirstLine ? 0 : 1; i < toDo.length; i++) {      String s=toDo[i];      if (s != null)       lines[i]=trimIndent(s,minIndent,tabWidth,indentWidth); else {        String line=lines[i];        int indent=computeIndentUnits(line,tabWidth,indentWidth);        if (indent > minIndent)         lines[i]=trimIndent(line,minIndent,tabWidth,indentWidth); else         lines[i]=trimLeadingTabsAndSpaces(line);      }    }  }}  }
class C{  public boolean hasAnyCapability(String... capabilities){  for (  DeviceService service : services.values()) {    if (service.hasAnyCapability(capabilities))     return true;  }  return false;}  }
class C{  protected void updateCurrentConverter(){  String[] extensions;  Object newConverter;  if (getFileFilter() == null) {    return;  }  if (!isAcceptAllFileFilterUsed()) {    extensions=((ExtensionFileFilter)getFileFilter()).getExtensions();    if (m_DialogType == LOADER_DIALOG) {      newConverter=ConverterUtils.getLoaderForExtension(extensions[0]);    } else {      newConverter=ConverterUtils.getSaverForExtension(extensions[0]);    }    try {      if (m_CurrentConverter == null) {        m_CurrentConverter=newConverter;      } else {        if (!m_CurrentConverter.getClass().equals(newConverter.getClass())) {          m_CurrentConverter=newConverter;        }      }    } catch (    Exception e) {      m_CurrentConverter=null;      e.printStackTrace();    }  } else {    m_CurrentConverter=null;  }}  }
class C{  public static List<LibraryLocation> gatherAllLibraries(String[] dirPaths){  List<LibraryLocation> libraries=new ArrayList<LibraryLocation>();  for (int i=0; i < dirPaths.length; i++) {    File extDir=new File(dirPaths[i]);    if (extDir.isDirectory()) {      String[] names=extDir.list(fgArchiveFilter);      if (names != null) {        for (int j=0; j < names.length; j++) {          File jar=new File(extDir,names[j]);          if (jar.isFile()) {            try {              IPath libPath=new Path(jar.getCanonicalPath());              IPath sourcePath=Path.EMPTY;              IPath packageRoot=Path.EMPTY;              URL javadocLocation=null;              URL indexLocation=null;              LibraryLocation library=new LibraryLocation(libPath,sourcePath,packageRoot,javadocLocation,indexLocation);              libraries.add(library);            } catch (            IOException e) {              Launching.log(e);            }          }        }      }    }  }  return libraries;}  }
class C{  private View moveSelection(View oldSel,View newSel,int delta,int childrenLeft,int childrenRight){  int fadingEdgeLength=getHorizontalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  View sel;  final int leftSelectionPixel=getLeftSelectionPixel(childrenLeft,fadingEdgeLength,selectedPosition);  final int rightSelectionPixel=getRightSelectionPixel(childrenLeft,fadingEdgeLength,selectedPosition);  if (delta > 0) {    oldSel=makeAndAddView(selectedPosition - 1,oldSel.getLeft(),true,mListPadding.top,false);    final int dividerWidth=mDividerWidth;    sel=makeAndAddView(selectedPosition,oldSel.getRight() + dividerWidth,true,mListPadding.top,true);    if (sel.getRight() > rightSelectionPixel) {      int spaceBefore=sel.getLeft() - leftSelectionPixel;      int spaceAfter=sel.getRight() - rightSelectionPixel;      int halfHorizontalSpace=(childrenRight - childrenLeft) / 2;      int offset=Math.min(spaceBefore,spaceAfter);      offset=Math.min(offset,halfHorizontalSpace);      oldSel.offsetLeftAndRight(-offset);      sel.offsetLeftAndRight(-offset);    }    if (!mStackFromRight) {      fillLeft(mSelectedPosition - 2,sel.getLeft() - dividerWidth);      adjustViewsLeftOrRight();      fillRight(mSelectedPosition + 1,sel.getRight() + dividerWidth);    } else {      fillRight(mSelectedPosition + 1,sel.getRight() + dividerWidth);      adjustViewsLeftOrRight();      fillLeft(mSelectedPosition - 2,sel.getLeft() - dividerWidth);    }  } else   if (delta < 0) {    if (newSel != null) {      sel=makeAndAddView(selectedPosition,newSel.getLeft(),true,mListPadding.top,true);    } else {      sel=makeAndAddView(selectedPosition,oldSel.getLeft(),false,mListPadding.top,true);    }    if (sel.getLeft() < leftSelectionPixel) {      int spaceBefore=leftSelectionPixel - sel.getLeft();      int spaceAfter=rightSelectionPixel - sel.getRight();      int halfHorizontalSpace=(childrenRight - childrenLeft) / 2;      int offset=Math.min(spaceBefore,spaceAfter);      offset=Math.min(offset,halfHorizontalSpace);      sel.offsetLeftAndRight(offset);    }    fillBeforeAndAfter(sel,selectedPosition);  } else {    int oldLeft=oldSel.getLeft();    sel=makeAndAddView(selectedPosition,oldLeft,true,mListPadding.top,true);    if (oldLeft < childrenLeft) {      int newRight=sel.getRight();      if (newRight < childrenLeft + 20) {        sel.offsetLeftAndRight(childrenLeft - sel.getLeft());      }    }    fillBeforeAndAfter(sel,selectedPosition);  }  return sel;}  }
class C{  FileDownloadingHandler(String urlPath,File downloadFile){  this.urlPath=urlPath;  this.downloadFile=downloadFile;}  }
class C{  public Texture(PGraphicsOpenGL pg,int width,int height,Object params){  this.pg=pg;  pgl=pg.pgl;  context=pgl.createEmptyContext();  colorBuffer=false;  glName=0;  init(width,height,(Parameters)params);}  }
class C{  public static int randomInt(int max){  return randomInt(0,max);}  }
class C{  protected void doNewState(int oldState,int newState){  SerialNode mNode=SerialAddress.getNodeFromSystemName(getSystemName());  if (mNode != null) {    if (newState == ON) {      mNode.setOutputBit(mBit,false);    } else     if (newState == OFF) {      mNode.setOutputBit(mBit,true);    } else {      log.warn("illegal state requested for Light: " + getSystemName());    }  }}  }
class C{  protected void appendCyclicObject(final StringBuffer buffer,final String fieldName,final Object value){  ObjectUtils.identityToString(buffer,value);}  }
class C{  public Object clone() throws CloneNotSupportedException {  return (ObjectStack)super.clone();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.526 -0500",hash_original_method="90FE3D951CADE6238FC04DAF938292E8",hash_generated_method="1DB46AD9CA62F7D83BB5C1D680DE0E09") public final Message obtainMessage(int what,int arg1,int arg2){  if (mSmHandler == null)   return null;  return Message.obtain(mSmHandler,what,arg1,arg2);}  }
class C{  public MalformedChallengeException(){  super();}  }
class C{  @Override public V put(@NotNull K key,@NotNull V value){  int hash=getHashingStrategy().computeHashCode(key);  return put(key,hash,value,false);}  }
class C{  public static Stringtable load(Module module) throws FileNotFoundException {  VirtualFile stringtableXmlVf=PluginUtil.findFileInModuleByName("stringtable.xml",module,XmlFileType.INSTANCE,true);  if (stringtableXmlVf == null) {    throw new FileNotFoundException("stringtable.xml wasn't found");  }  Stringtable instance=new Stringtable(stringtableXmlVf,module);  return instance;}  }
class C{  private static final String toXml(Transform t){  StringBuilder sb=new StringBuilder();  sb.append("<Transform>").append(XmlGenerator.toXml(t.getTranslation(),"Translation")).append("<Rotation>").append(Math.toDegrees(t.getRotation())).append("</Rotation>").append("</Transform>");  return sb.toString();}  }
class C{  short readShort() throws IOException {  mDexFile.readFully(tmpBuf,0,2);  if (isBigEndian) {    return (short)((tmpBuf[1] & 0xff) | ((tmpBuf[0] & 0xff) << 8));  } else {    return (short)((tmpBuf[0] & 0xff) | ((tmpBuf[1] & 0xff) << 8));  }}  }
class C{  private NullUtil(){  instanceNotAllowed(getClass());}  }
class C{  public SAXParserMMImpl(SymbolTable symbolTable,XMLGrammarPool grammarPool){  super((XMLParserConfiguration)ObjectFactory.createObject("org.apache.xerces.xni.parser.XMLParserConfiguration","org.apache.xerces.parsers.XML11ConfigurationMMImpl"));  fConfiguration.addRecognizedFeatures(RECOGNIZED_FEATURES);  fConfiguration.setFeature(NOTIFY_BUILTIN_REFS,true);  fConfiguration.addRecognizedProperties(RECOGNIZED_PROPERTIES);  if (symbolTable != null) {    fConfiguration.setProperty(SYMBOL_TABLE,symbolTable);  }  if (grammarPool != null) {    fConfiguration.setProperty(XMLGRAMMAR_POOL,grammarPool);  }}  }
class C{  public EnumRowStatus() throws IllegalArgumentException {  this(unspecified);}  }
class C{  public ZebraJTree(java.util.Hashtable<?,?> value){  super(value);}  }
class C{  protected void addRoomPref(HttpServletRequest request,PreferencesForm frm,ActionMessages errors){  List lst=frm.getRoomPrefs();  if (frm.checkPrefs(lst)) {    for (int i=0; i < Constants.PREF_ROWS_ADDED; i++) {      frm.addToRoomPrefs(Preference.BLANK_PREF_VALUE,Preference.BLANK_PREF_VALUE);    }    request.setAttribute(HASH_ATTR,HASH_RM_PREF);  } else {    errors.add("roomPrefs",new ActionMessage("errors.generic",MSG.errorInvalidRoomPreference()));    saveErrors(request,errors);  }}  }
class C{  @Override public void addClassAnnotation(char[] buffer,int offset,int length){}  }
class C{  private boolean moveTypeUp(List<Entity> copy,int index,int indexOfSameType,boolean forceIt){  if (!forceIt) {    for (int i=index - 1; i > indexOfSameType; i--) {      if (dependsOn(copy,index,i)) {        return false;      }    }  }  LOG.debug("Moving " + copy.get(index) + " at "+ index+ " up to "+ copy.get(indexOfSameType)+ " at "+ (indexOfSameType + 1));  copy.add(indexOfSameType + 1,copy.remove(index));  return true;}  }
class C{  public void hideConfidentialFields(){  setCreatedDate(null);  setLastModifiedDate(null);  password=null;  verificationCode=null;  forgotPasswordCode=null;  if (!editable)   email=null;  log.debug("Hid confidential fields for user: " + this);}  }
class C{  public MinioException(){  super();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.386 -0500",hash_original_method="D5329B07F2A83D8B781C7C8F5FD2D30A",hash_generated_method="99C56485AD9D5B0DEEDA3A46BA4195ED") private boolean rehash(){  if (tombstones + size < maximumLoad) {    return false;  }  int capacity=table.length >> 1;  int newCapacity=capacity;  if (size > (capacity >> 1)) {    newCapacity=capacity * 2;  }  Object[] oldTable=this.table;  initializeTable(newCapacity);  this.tombstones=0;  if (size == 0) {    return true;  }  for (int i=oldTable.length - 2; i >= 0; i-=2) {    Object k=oldTable[i];    if (k == null || k == TOMBSTONE) {      continue;    }    @SuppressWarnings("unchecked") Reference<ThreadLocal<?>> reference=(Reference<ThreadLocal<?>>)k;    ThreadLocal<?> key=reference.get();    if (key != null) {      add(key,oldTable[i + 1]);    } else {      size--;    }  }  return true;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void write(OutputNode node,Object object) throws Exception {  Class real=object.getClass();  Label label=group.getLabel(real);  if (label == null) {    throw new UnionException("Value of %s not declared in %s with annotation %s",real,type,group);  }  write(node,object,label);}  }
class C{  @Override public void onEnable(){  this.smartLogger=new SmartLogger();  UltraCosmeticsData.init(this);  if (!UltraCosmeticsData.get().checkServerVersion()) {    return;  }  this.playerManager=new UltraPlayerManager(this);  getSmartLogger().write("-------------------------------------------------------------------");  getSmartLogger().write("UltraCosmetics v" + getDescription().getVersion() + " is loading... (server: "+ UltraCosmeticsData.get().getServerVersion().getName()+ ")");  getSmartLogger().write("Thanks for having downloaded it!");  getSmartLogger().write("Plugin by iSach.");  getSmartLogger().write("Link: http://bit.ly/UltraCosmetics");  setUpConfig();  UltraCosmeticsData.get().initModule();  try {    MetricsLite metrics=new MetricsLite(this);    metrics.start();  } catch (  IOException e) {    System.out.println("Couldn't send data to Metrics :(");  }  new MessageManager();  registerListeners();  commandManager=new CommandManager(this);  commandManager.registerCommands(this);  UltraCosmeticsData.get().initConfigFields();  new CosmeticManager(this).setupCosmeticsConfigs();  if (!Bukkit.getPluginManager().isPluginEnabled("LibsDisguises")) {    getSmartLogger().write("");    getSmartLogger().write("Morphs require Lib's Disguises!");    getSmartLogger().write("");    getSmartLogger().write("Morphs disabled.");    getSmartLogger().write("");  }  setupEconomy();  if (!UltraCosmeticsData.get().usingFileStorage()) {    getSmartLogger().write("");    getSmartLogger().write("Connecting to MySQL database...");    this.mySqlConnectionManager=new MySqlConnectionManager(this);    mySqlConnectionManager.start();    getSmartLogger().write("Connected to MySQL database.");    getSmartLogger().write("");  }  playerManager.initPlayers();  new FallDamageManager().runTaskTimerAsynchronously(this,0,1);  new InvalidWorldChecker(this).runTaskTimerAsynchronously(this,0,5);  this.menus=new Menus(this);  try {    config.save(file);  } catch (  IOException e) {    e.printStackTrace();  }  if (SettingsManager.getConfig().getBoolean("Check-For-Updates")) {    this.updateChecker=new UpdateManager(this);    updateChecker.start();    updateChecker.checkForUpdate();  }  getSmartLogger().write("UltraCosmetics successfully finished loading and is now enabled!");  getSmartLogger().write("-------------------------------------------------------------------");}  }
class C{  public final void onPause(){  mChronosListener.onPause();}  }
class C{  public T caseProperty(Property object){  return null;}  }
class C{  public void preExecute() throws QueryException {  lastQueryNanos=System.nanoTime();  if (this.currentProtocol != null && this.currentProtocol.isClosed()) {    preAutoReconnect();  }}  }
class C{  public boolean hasConfidence(){  return getConfidence().getConfidenceType() != TransactionConfidence.ConfidenceType.UNKNOWN;}  }
class C{  public PdfRendererBuilder testMode(boolean mode){  this._testMode=mode;  return this;}  }
class C{  public int stringWidth(String str){  if (str == null || str.length() == 0) {    return 0;  }  if (str == " ") {    return 5;  }  return Display.impl.stringWidth(font,str);}  }
class C{  void incAccess(){  incAccess(1);}  }
class C{  @Override public int numberOfClusters() throws Exception {  return m_Clusterer.numberOfClusters();}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public Boolean isAutoVmotion(){  return autoVmotion;}  }
class C{  public MysqlDriverManagerDataSource(String url){  setUrl(url);}  }
class C{  public StrBuilder replaceAll(StrMatcher matcher,String replaceStr){  return replace(matcher,replaceStr,0,size,-1);}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){  for (  ValueAxis rangeAxis : this.rangeAxes.values()) {    if (rangeAxis == null) {      continue;    }    if (useAnchor) {      double sourceY=source.getY();      if (this.orientation.isHorizontal()) {        sourceY=source.getX();      }      double anchorY=rangeAxis.java2DToValue(sourceY,info.getDataArea(),getRangeAxisEdge());      rangeAxis.resizeRange2(factor,anchorY);    } else {      rangeAxis.resizeRange(factor);    }  }}  }
class C{  @SuppressWarnings("unused") private ServiceCall<Void> upgradeCustomization(String customizationId){  Validator.notNull(customizationId,"customizationId cannot be null");  RequestBuilder requestBuilder=RequestBuilder.post(String.format(PATH_UPGRADE,customizationId));  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getVoid());}  }
class C{  @HLEFunction(nid=0x5F32BEAA,version=150) public int sceKernelReferVTimerStatus(@CheckArgument("checkVTimerID") int vtimerUid,TPointer infoAddr){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  sceKernelVTimerInfo.write(infoAddr);  return 0;}  }
class C{  @Before public void before(){  final String file=this.getClass().getResource("/org/takes/http/keystore").getFile();  final String password="abc123";  System.setProperty("javax.net.ssl.keyStore",file);  System.setProperty("javax.net.ssl.keyStorePassword",password);  System.setProperty("javax.net.ssl.trustStore",file);  System.setProperty("javax.net.ssl.trustStorePassword",password);}  }
class C{  public boolean hasDependants(String columnName){  return m_depOnField.containsKey(columnName);}  }
class C{  public void addColumn(String header){  WListItemRenderer renderer=(WListItemRenderer)getItemRenderer();  renderer.addColumn(Util.cleanAmp(header));  getModel().addColumn();  return;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode04.class,args);}  }
class C{  protected void forwardCommandChangeToLayout(int s){  if ((s & Turnout.CLOSED) != 0) {    if ((s & Turnout.THROWN) != 0) {      log.error("Cannot command both CLOSED and THROWN " + s);      return;    } else {      sendMessage(true ^ getInverted());    }  } else {    sendMessage(false ^ getInverted());  }}  }
class C{  public PcdRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public LaunchOption(Version version,Authenticator authenticator,MinecraftDirectory minecraftDir){  Objects.requireNonNull(version);  Objects.requireNonNull(authenticator);  Objects.requireNonNull(minecraftDir);  this.version=version;  this.authenticator=authenticator;  this.minecraftDirectory=minecraftDir;  this.runtimeDirectory=minecraftDir;  this.javaEnvironment=JavaEnvironment.current();}  }
class C{  public static AlbumsFragment newInstance(){  return new AlbumsFragment();}  }
class C{  public static RelationalOpExpression isNotNull(Expression expression){  return new RelationalOpExpression(expression,"is not",null);}  }
class C{  public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {  fVersion=version;  fStandalone="yes".equals(standalone);}  }
class C{  @RequestMapping(value="/application/{applicationName}",method=RequestMethod.GET) public @ResponseBody List<Message> listMessagesForApplication(@PathVariable final String applicationName) throws ServiceException, CheckException {  if (logger.isDebugEnabled()) {    logger.info("--CALL LIST APPLICATION ACTIONS--");    logger.debug("applicationName = " + applicationName);  }  User user=authentificationUtils.getAuthentificatedUser();  return messageService.listByApp(user,applicationName,10);}  }
class C{  public MultithreadConcurrentQueue(final int capacity){  int c=1;  while (c < capacity)   c<<=1;  size=c;  mask=size - 1L;  buffer=(E[])new Object[size];}  }
class C{  private static int base64toInt(char c,byte[] alphaToInt){  int result=alphaToInt[c];  if (result < 0)   throw new IllegalArgumentException("Illegal character " + c);  return result;}  }
class C{  public Exit createExit(){  ExitImpl exit=new ExitImpl();  return exit;}  }
class C{  public void testCanHandleOneOrMore() throws Exception {  Dtd dtd=new Dtd("http://java.sun.com/dtd/web-app_2_3.dtd");  List<DescriptorTag> elementOrder=dtd.getElementOrder("security-constraint");  assertEquals(4,elementOrder.size());  DescriptorTag tag=elementOrder.get(1);  assertEquals("web-resource-collection",tag.getTagName());  assertTrue(tag.isMultipleAllowed());}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n;  int numRecs;  ShapeType shapeType;  double distanceTolerance=0;  BoundingBox[] boundingBoxes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  distanceTolerance=Double.parseDouble(args[2]);  if (distanceTolerance < 0) {    showFeedback("The buffer size has not been set properly.");    return;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYLINE && shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only operates on shapefiles of a POLYLINE or POLYGON shape type.");      return;    }    numRecs=input.getNumberOfRecords();    boundingBoxes=new BoundingBox[numRecs];    AttributeTable table=input.getAttributeTable();    ShapeFile output=new ShapeFile(outputFile,shapeType,table.getAllFields());    output.setProjectionStringFromOtherShapefile(input);    ArrayList<com.vividsolutions.jts.geom.Geometry> geoms=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    int oldProgress=-1;    n=0;    for (    ShapeFileRecord record : input.records) {      int recNum=record.getRecordNumber();      double[][] points=record.getGeometry().getPoints();      double minX=Double.POSITIVE_INFINITY;      double maxX=Double.NEGATIVE_INFINITY;      double minY=Double.POSITIVE_INFINITY;      double maxY=Double.NEGATIVE_INFINITY;      for (i=0; i < points.length; i++) {        if (points[i][0] < minX) {          minX=points[i][0];        }        if (points[i][0] > maxX) {          maxX=points[i][0];        }        if (points[i][1] < minY) {          minY=points[i][1];        }        if (points[i][1] > maxY) {          maxY=points[i][1];        }      }      boundingBoxes[recNum - 1]=new BoundingBox(minX,minY,maxX,maxY);      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTS=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTS.length; a++) {          recJTS[a].setUserData(recNum);          geoms.add(recJTS[a]);        }      }      progress=(int)(100f * n / (numRecs - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    n=0;    oldProgress=-1;    int numGeoms=geoms.size();    int recNum1, recNum2;    for (i=0; i < numGeoms; i++) {      recNum1=(int)geoms.get(i).getUserData() - 1;      for (j=i + 1; j < numGeoms; j++) {        recNum2=(int)geoms.get(j).getUserData() - 1;        if (boundingBoxes[recNum1].near(boundingBoxes[recNum2],distanceTolerance * 10)) {          com.vividsolutions.jts.geom.Geometry[] geomsResult=GeometrySnapper.snap(geoms.get(i),geoms.get(j),distanceTolerance);          geomsResult[0].setUserData(recNum1 + 1);          geomsResult[1].setUserData(recNum2 + 1);          geoms.set(i,geomsResult[0]);          geoms.set(j,geomsResult[1]);        }      }      progress=(int)(100f * n / (numGeoms - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    n=0;    oldProgress=-1;    for (    com.vividsolutions.jts.geom.Geometry g : geoms) {      int recNum=(int)g.getUserData();      if (g instanceof com.vividsolutions.jts.geom.Polygon && shapeType.getBaseType() == ShapeType.POLYGON) {        com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[p.getNumInteriorRing() + 1];        Coordinate[] coords=p.getExteriorRing().getCoordinates();        if (Topology.isClockwisePolygon(coords)) {          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }        } else {          for (i=coords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }        }        for (int b=0; b < p.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          coords=p.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Geometry wbGeometry;        if (shapeType == ShapeType.POLYGON) {          wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        } else         if (shapeType == ShapeType.POLYGONZ) {          PolygonZ pz=(PolygonZ)input.getRecord(recNum).getGeometry();          double[] zArray=pz.getzArray();          double[] mArray=pz.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolygonZ(parts,pl.getPointsArray(),zArray,mArray);        } else {          PolygonM pm=(PolygonM)input.getRecord(recNum).getGeometry();          double[] mArray=pm.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolygonM(parts,pl.getPointsArray(),mArray);        }        output.addRecord(wbGeometry,table.getRecord(recNum - 1));      } else       if (g instanceof com.vividsolutions.jts.geom.LineString && shapeType.getBaseType() == ShapeType.POLYLINE) {        com.vividsolutions.jts.geom.LineString p=(com.vividsolutions.jts.geom.LineString)g;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts={0};        Coordinate[] coords=p.getCoordinates();        for (i=0; i < coords.length; i++) {          pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Geometry wbGeometry;        if (shapeType == ShapeType.POLYLINE) {          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());        } else         if (shapeType == ShapeType.POLYLINEZ) {          PolyLineZ pz=(PolyLineZ)input.getRecord(recNum).getGeometry();          double[] zArray=pz.getzArray();          double[] mArray=pz.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLineZ(parts,pl.getPointsArray(),zArray,mArray);        } else {          PolyLineM pm=(PolyLineM)input.getRecord(recNum).getGeometry();          double[] mArray=pm.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLineM(parts,pl.getPointsArray(),mArray);        }        output.addRecord(wbGeometry,table.getRecord(recNum - 1));      }      progress=(int)(100f * n / (numGeoms - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){  for (  ValueAxis yAxis : this.rangeAxes.values()) {    if (yAxis == null) {      continue;    }    if (useAnchor) {      double sourceY=source.getY();      if (this.orientation == PlotOrientation.HORIZONTAL) {        sourceY=source.getX();      }      double anchorY=yAxis.java2DToValue(sourceY,info.getDataArea(),getRangeAxisEdge());      yAxis.resizeRange2(factor,anchorY);    } else {      yAxis.resizeRange(factor);    }  }}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawBackground(0);  drawCenteredString(fontRendererObj,"Zoom Manager",width / 2,40,0xffffff);  drawString(fontRendererObj,"Zoom Level: " + WurstClient.INSTANCE.options.zoom.level + " x normal",width / 2 - 75,height / 4 + 44,0xcccccc);  super.drawScreen(par1,par2,par3);}  }
class C{  public PhotographerChatAction(StendhalRPZone zone){  this.zone=zone;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_Add:    return stateVector[0] == State.main_region_Add;case main_region_Multiply:  return stateVector[0] == State.main_region_Multiply;case main_region_Divide:return stateVector[0] == State.main_region_Divide;case main_region_Modulo:return stateVector[0] == State.main_region_Modulo;case main_region_Shift:return stateVector[0] == State.main_region_Shift;case main_region_boolean_And:return stateVector[0] == State.main_region_boolean_And;case main_region_boolean_Or:return stateVector[0] == State.main_region_boolean_Or;case main_region_boolean_Xor:return stateVector[0] == State.main_region_boolean_Xor;case main_region_Subtract:return stateVector[0] == State.main_region_Subtract;default :return false;}}  }
class C{  public String completePasswordRecovery(){  final String userId=this.model.getUserId();  final String newPassword=this.model.getNewPassword();  final boolean changePassword=this.getPasswordRecoveryService().completePasswordRecovery(userId,newPassword);  if (changePassword) {    this.addMessage(null,FacesMessage.SEVERITY_INFO,INFO_RECOVERPASSWORD_SUCCESS);    return OUTCOME_SUCCESS;  }  this.addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_USER_PWD_RESET);  return OUTCOME_ERROR;}  }
class C{  public ButtonRow(String[] labelKeys,String[] toolTipKeys,EventListener[] listeners,int orientation,int glue){  this(labelKeys,toolTipKeys,listeners,null,orientation,glue);}  }
class C{  private void updateState(){  final long duration=RadioUtils.duration();  if (duration > 0) {    final long pos=RadioUtils.position();    int progress=(int)(mProgressBar.getMax() * pos / duration);    mProgressBar.setProgress(progress);  } else {    mProgressBar.setProgress(0);  }  mPlayPauseButton.updateState();}  }
class C{  public Certificate engineGenerateCertificate(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    inStream.mark(1);    if (inStream.read() == '-') {      return getCertificate(decodePEM(inStream,CERT_BOUND_SUFFIX));    } else {      inStream.reset();      return getCertificate(inStream);    }  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  public void currentIndividual(String rmiClientIdentifier,Chromosome individual){  if (backend == null)   return;  logger.debug("Received individual");  bestIndividual.put(rmiClientIdentifier,(TestSuiteChromosome)individual);  for (  ChromosomeOutputVariableFactory<?> v : variableFactories.values()) {    setOutputVariable(v.getVariable((TestSuiteChromosome)individual));  }  for (  SequenceOutputVariableFactory<?> v : sequenceOutputVariableFactories.values()) {    v.update((TestSuiteChromosome)individual);  }}  }
class C{  @Override public void onInit(List<? extends IndexCommit> commits){  onCommit(commits);}  }
class C{  public void testSocket_Block_ActionsAfterConnect() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.connect(localAddr1);  DatagramSocket s=this.channel1.socket();  assertSocketActionAfterConnect(s);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMDefsElement(prefix,(AbstractDocument)doc);}  }
class C{  public static void registerConfig(){  Config.registerSelf(SocketCommandProcessor.class);  port=Config.parms.getInt("cmd_p");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StaticSentence(Session s,ISQLBuilderStatic sentence){  this(s,sentence,null,null);}  }
class C{  public void flushBuffer() throws IOException {  if (count > 0) {    m_os.write(m_outputBytes,0,count);    count=0;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void likeAll(Recommendation start){  if (!likeAllInProgress) {    likeAllInProgress=true;    like(start);  }}  }
class C{  @SuppressWarnings("unused") private static boolean isAppropriateWeight(float f){  boolean result=false;  if (f <= 1f && f >= 0)   result=true;  return result;}  }
class C{  void deleteLocalDevice(VolumeInfo deviceInfo) throws VPlexApiException {  String deviceName=VPlexApiConstants.DEVICE_PREFIX + deviceInfo.getVolumeName();  deleteLocalDevice(deviceName);}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667f3bcc908L;  H2=0xbb67ae8584caa73bL;  H3=0x3c6ef372fe94f82bL;  H4=0xa54ff53a5f1d36f1L;  H5=0x510e527fade682d1L;  H6=0x9b05688c2b3e6c1fL;  H7=0x1f83d9abfb41bd6bL;  H8=0x5be0cd19137e2179L;}  }
class C{  public static Iterator createShape3D(Shape shape,double baselineHeight,Color color,boolean filled){  int bufferSize=DEFAULT_NPOINTS_BUFFER_SIZE;  double[] data=expandArrayD(bufferSize,null);  int dataIndex=0;  int refreshCounter=bufferSize;  int[] stripCount=new int[1];  stripCount[0]=0;  PathIterator pi2=shape.getPathIterator(null);  float flatness=.25f;  FlatteningPathIterator pi=new FlatteningPathIterator(pi2,flatness);  double[] coords=new double[6];  double pntx=0;  double pnty=0;  double pntz=baselineHeight;  HashSet set=new HashSet();  Shape3D shape3D=null;  Debug.message("3detail","OMGraphicUtil.createShape3D(): figuring out coordinates");  while (!pi.isDone()) {    int type=pi.currentSegment(coords);switch (type) {case PathIterator.SEG_MOVETO:      if (dataIndex != 0) {        shape3D=createShape3D(data,dataIndex,stripCount,color,filled);        if (shape3D != null) {          set.add(shape3D);        }        data=expandArrayD(bufferSize,null);        dataIndex=0;      }case PathIterator.SEG_LINETO:    pntx=coords[0];  pnty=coords[1];if (Debug.debugging("3detail")) {  Debug.output("Shape coordinates: " + pntx + ", "+ pnty);}if (dataIndex >= data.length) {data=expandArrayD(bufferSize,data);refreshCounter=bufferSize;}data[dataIndex++]=pntx;data[dataIndex++]=pntz;data[dataIndex++]=pnty;stripCount[0]++;refreshCounter-=3;break;default :Debug.message("3detail","Shape coordinates: " + coords[0] + ", "+ coords[1]+ " rounding out SEG_CLOSE");}pi.next();}if (dataIndex != 0) {shape3D=createShape3D(data,dataIndex,stripCount,color,filled);if (shape3D != null) {set.add(shape3D);}}return set.iterator();}  }
class C{  public static X509Certificate createCertificateFromBytes(byte[] certBytes){  X509Certificate cert=null;  CertificateFactory certFactory;  try {    certFactory=CertificateFactory.getInstance("X.509");    InputStream in=new ByteArrayInputStream(certBytes);    cert=(X509Certificate)certFactory.generateCertificate(in);  } catch (  CertificateException e) {    logger.warn("Excpetion caught in CryptCore." + "createCertificateFromBytes, returning null",e);  }  return cert;}  }
class C{  public boolean dereference(K key){  Pair<V,Integer> refValue=refMap.get(key);  if (refValue == null) {    throw new IllegalStateException("Key value not found in collection");  }  int refCounter=refValue.getSecond();  if (refCounter < 1) {    throw new IllegalStateException("Unexpected reference counter value " + refValue.getSecond() + " encountered for key "+ key);  }  if (refCounter == 1) {    refMap.remove(key);    return true;  }  refValue.setSecond(refCounter - 1);  return false;}  }
class C{  private void stop(){  Log.d(LOG_TAG,"## stop(): the service is stopped");  if (mIsForeground) {    stopForeground(true);  }  if (mSessions != null) {    for (    MXSession session : mSessions) {      if (session.isAlive()) {        session.stopEventStream();        session.getDataHandler().removeListener(mEventsListener);        session.getDataHandler().getCallsManager().removeListener(mCallsManagerListener);      }    }  }  mMatrixIds=null;  mSessions=null;  setServiceState(StreamAction.STOP);  mActiveEventStreamService=null;}  }
class C{  public void writeField(String name,char value) throws java.io.IOException {  writeField(name,new Character(value).toString());}  }
class C{  @Deprecated public static synchronized boolean registerHandler(UrlInterceptHandler handler){  if (!getHandlers().contains(handler)) {    getHandlers().addFirst(handler);    return true;  } else {    return false;  }}  }
class C{  public void removeAssignedVirtualArrays(Set<String> virtualArrayURIs){  if ((virtualArrayURIs != null) && (!virtualArrayURIs.isEmpty()) && (_assignedVirtualArrays != null)) {    HashSet<String> removeVirtualArrays=new HashSet<String>();    removeVirtualArrays.addAll(virtualArrayURIs);    _assignedVirtualArrays.removeAll(removeVirtualArrays);    updateVirtualArrayTags();  }}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException {  b=new double[in.readInt()];  for (int p=0; p < b.length; p++) {    b[p]=in.readDouble();  }}  }
class C{  public InvalidSyntaxException(String msg,String filter,Throwable cause){  super(msg,cause);  this.filter=filter;}  }
class C{  public static CollectionProcessingEngine createCpe(String name) throws BaleenException {  return createCpe(name,getCpeYamlResource());}  }
class C{  public static boolean isName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;}  }
class C{  public Thread connect() throws IOException {  this.running=true;  this.readyState=WEBSOCKET_STATE_CONNECTING;  socketChannel=SocketChannel.open();  socketChannel.configureBlocking(false);  socketChannel.connect(new InetSocketAddress(uri.getHost(),port));  System.setProperty("java.net.preferIPv4Stack","true");  System.setProperty("java.net.preferIPv6Addresses","false");  selector=Selector.open();  socketChannel.register(selector,SelectionKey.OP_CONNECT);  Log.v("websocket","Starting a new thread to manage data reading/writing");  Thread th=new Thread(this);  th.start();  return th;}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (m_listenees.containsKey(eventName)) {    return false;  }  return true;}  }
class C{  public static KindName typeKindName(Type t){  if (t.hasTag(TYPEVAR) || t.hasTag(CLASS) && (t.tsym.flags() & COMPOUND) != 0)   return KindName.BOUND; else   if (t.hasTag(PACKAGE))   return KindName.PACKAGE; else   if ((t.tsym.flags_field & ANNOTATION) != 0)   return KindName.ANNOTATION; else   if ((t.tsym.flags_field & INTERFACE) != 0)   return KindName.INTERFACE; else   return KindName.CLASS;}  }
class C{  public static String format(String pattern,Object... arguments){  String msg=pattern;  if (arguments != null) {    for (int index=0; index < arguments.length; index++) {      msg=msg.replaceAll("\\{" + (index + 1) + "\\}",String.valueOf(arguments[index]));    }  }  return msg;}  }
class C{  public static void enable(CComboBox comboBox){  enable(comboBox,true);}  }
class C{  @Override protected void internalRender(GL10 gl,PLIRenderer renderer){  PLITexture previewTexture=this.getPreviewTextures()[0];  PLITexture[] textures=this.getTextures();  PLITexture frontTexture=textures[PLSpherical2FaceOrientation.PLSpherical2FaceOrientationFront.ordinal()];  PLITexture backTexture=textures[PLSpherical2FaceOrientation.PLSpherical2FaceOrientationBack.ordinal()];  PLITexture leftTexture=textures[PLSpherical2FaceOrientation.PLSpherical2FaceOrientationLeft.ordinal()];  PLITexture rightTexture=textures[PLSpherical2FaceOrientation.PLSpherical2FaceOrientationRight.ordinal()];  boolean frontTextureIsValid=(frontTexture != null && frontTexture.getTextureId(gl) != 0);  boolean backTextureIsValid=(backTexture != null && backTexture.getTextureId(gl) != 0);  boolean leftTextureIsValid=(leftTexture != null && leftTexture.getTextureId(gl) != 0);  boolean rightTextureIsValid=(rightTexture != null && rightTexture.getTextureId(gl) != 0);  if (frontTextureIsValid || backTextureIsValid || leftTextureIsValid|| rightTextureIsValid|| (previewTexture != null && previewTexture.getTextureId(gl) != 0)) {    gl.glEnable(GL10.GL_TEXTURE_2D);    GLUquadric quadratic=this.getQuadric();    float radius=PLConstants.kPanoramaRadius;    int halfDivs=this.getDivs() / 2, quarterDivs=halfDivs / 2;    if (previewTexture != null) {      if (frontTextureIsValid && backTextureIsValid && leftTextureIsValid&& rightTextureIsValid)       this.removePreviewTextureAtIndex(0,true); else {        int previewDivs=this.getPreviewDivs();        gl.glBindTexture(GL10.GL_TEXTURE_2D,previewTexture.getTextureId(gl));        GLUES.gluSphere(gl,quadratic,radius,previewDivs,previewDivs);      }    }    if (frontTextureIsValid) {      gl.glBindTexture(GL10.GL_TEXTURE_2D,frontTexture.getTextureId(gl));      GLUES.glu3DArc(gl,quadratic,PLConstants.kPI8,-PLConstants.kPI16,false,radius,quarterDivs,quarterDivs);    }    if (backTextureIsValid) {      gl.glBindTexture(GL10.GL_TEXTURE_2D,backTexture.getTextureId(gl));      GLUES.glu3DArc(gl,quadratic,PLConstants.kPI8,-PLConstants.kPI16,true,radius,quarterDivs,quarterDivs);    }    if (leftTextureIsValid) {      gl.glBindTexture(GL10.GL_TEXTURE_2D,leftTexture.getTextureId(gl));      GLUES.gluHemisphere(gl,quadratic,false,radius,halfDivs,halfDivs);    }    if (rightTextureIsValid) {      gl.glBindTexture(GL10.GL_TEXTURE_2D,rightTexture.getTextureId(gl));      GLUES.gluHemisphere(gl,quadratic,true,radius,halfDivs,halfDivs);    }    gl.glDisable(GL10.GL_TEXTURE_2D);  }}  }
class C{  private void processParameter(TechnicalProduct techProduct,Product product,String qName,Attributes atts){  String type=getMandatoryValue(atts,ATTRIBUTE_TYPE);  String id=atts.getValue(ATTRIBUTE_ID);  String value=getMandatoryValue(atts,ATTRIBUTE_VALUE);  if (isBlank(type) || isBlank(id) || isBlank(value)|| techProduct == null || product == null) {    return;  }  ParameterDefinition paramDef=null;  if (type.equals(ParameterType.PLATFORM_PARAMETER.toString()) && id.equals(PlatformParameterIdentifiers.CONCURRENT_USER)) {    paramDef=getPlatformParamDef(id);  } else   if (type.equals(ParameterType.PLATFORM_PARAMETER.toString()) && id.equals(PlatformParameterIdentifiers.NAMED_USER)) {    paramDef=getPlatformParamDef(id);  } else   if (type.equals(ParameterType.PLATFORM_PARAMETER.toString()) && id.equals(PlatformParameterIdentifiers.PERIOD)) {    paramDef=getPlatformParamDef(id);  } else   if (type.equals(ParameterType.SERVICE_PARAMETER.toString())) {    List<ParameterDefinition> paramDefs=techProduct.getParameterDefinitions();    paramDef=findParam(paramDefs,id);  } else {    addError(qName,"Unknown parameter definition type '" + type + "'");  }  if (paramDef != null) {    ParameterSet parameterSet=product.getParameterSet();    if (parameterSet == null) {      parameterSet=new ParameterSet();      persist(parameterSet);      product.setParameterSet(parameterSet);    }    Parameter parameter=new Parameter();    parameter.setParameterSet(parameterSet);    parameter.setParameterDefinition(paramDef);    parameter.setValue(value);    persist(parameter);  } else {    addError(qName,"Unknown parameter definition type:'" + type + "' id:'"+ id+ "'");  }}  }
class C{  public AbstractApiServlet(Logger logger,Metrics metrics){  this.logger=logger;  this.metrics=metrics;  this.mapper=new ObjectMapper();  mapper.enable(SerializationFeature.INDENT_OUTPUT);}  }
class C{  public void chainSwing(AdvancedModelRenderer[] boxes,float speed,float degree,double rootOffset,float swing,float swingAmount){  float offset=this.calculateChainOffset(rootOffset,boxes);  for (int index=0; index < boxes.length; index++) {    boxes[index].rotateAngleY+=this.calculateChainRotation(speed,degree,swing,swingAmount,offset,index);  }}  }
class C{  private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {  int quietCount=this.narrowLineWidth * 10;  quietCount=quietCount < startPattern ? quietCount : startPattern;  for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {    if (row.get(i)) {      break;    }    quietCount--;  }  if (quietCount != 0) {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public void score(int s){  score=s;}  }
class C{  private JSONWriter append(String s) throws JSONException {  if (s == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(s);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  public List<T> sort(){  Set<Node<T>> visited=new OrderedHashSet<Node<T>>();  ArrayList<T> sorted=new ArrayList<T>();  while (visited.size() < nodes.size()) {    Node<T> n=null;    for (    Node<T> tNode : nodes.values()) {      n=tNode;      if (!visited.contains(n))       break;    }    if (n != null) {      DFS(n,visited,sorted);    }  }  return sorted;}  }
class C{  public GrayFilter(boolean b,int p){  brighter=b;  percent=p;  canFilterIndexColorModel=true;}  }
class C{  public int height(){  return height(root);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendSelfPatch(buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  public void addAttachment(DataSource dataSource){  if (dataSource == null)   return;  if (m_attachments == null)   m_attachments=new ArrayList<Object>();  m_attachments.add(dataSource);}  }
class C{  public boolean isSelectedAsDefault(){  return selectedAsDefault;}  }
class C{  public static boolean asBoolean(GroovyResultSet grs){  return true;}  }
class C{  public DOMXMLSignatureFactory(){}  }
class C{  public StringBuilder append(String x){  int l=x.length();  ensureCapacity(l);  System.arraycopy(x.chars,0,buffer,length,l);  length+=l;  return this;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  fullyLock();  try {    s.defaultWriteObject();    for (Node<E> p=head.next; p != null; p=p.next)     s.writeObject(p.item);    s.writeObject(null);  }  finally {    fullyUnlock();  }}  }
class C{  public static IntIndex createIndex(final long length){  if (length < 0) {    throw new NegativeArraySizeException("Negative length=" + length);  }  if (length <= IntIndex.MAX_LENGTH) {    return new IntArray(length);  } else {    return new IntChunks(length);  }}  }
class C{  public IntArray2D(int rows,int columns,int noData){  this.rows=rows;  this.columns=columns;  this.noData=noData;  numCells=rows * columns;  data=new int[numCells];  for (int i=0; i < numCells; i++) {    data[i]=noData;  }}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public static final String nameForDaemon(final CassandraDaemonTask daemon){  return nameForDaemon(daemon.getName());}  }
class C{  private void endFormals(){  if (hasFormals) {    hasFormals=false;    buf.append('>');  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.shapePaint=SerialUtilities.readPaint(stream);  this.shapeStroke=SerialUtilities.readStroke(stream);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getYear();}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForJavaScriptBlockTag instance=new ForJavaScriptBlockTag();  String value="'\"\0";  String expected="\\'\\\"\\x00";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  void reset(){  setX(0.0f);  setY(0.0f);  LOGGER.trace("Reset touch point");}  }
class C{  private static boolean containsAnnoOfType(List<Attribute.Compound> annos,Type type){  for (  Attribute.Compound anno : annos) {    if (anno.type.tsym == type.tsym)     return true;  }  return false;}  }
class C{  public String provideNetworkType(){  return "unknown";}  }
class C{  private void adaptTitleColor(){  if (titleTextView != null && titleColor != -1) {    titleTextView.setTextColor(titleColor);  }}  }
class C{  public static void startObservationsAndOrdersSync(){  ContentResolver.cancelSync(getAccount(),Contracts.CONTENT_AUTHORITY);  Bundle b=new Bundle();  b.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  b.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  b.putBoolean(SyncPhase.SYNC_OBSERVATIONS.name(),true);  b.putBoolean(SyncPhase.SYNC_ORDERS.name(),true);  LOG.i("Requesting incremental observations / orders sync");  ContentResolver.requestSync(getAccount(),Contracts.CONTENT_AUTHORITY,b);}  }
class C{  @SuppressLint("NewApi") static private void findSupportedColorFormats(String mimeType){  SparseArray<ArrayList<String>> softwareCodecs=new SparseArray<ArrayList<String>>();  SparseArray<ArrayList<String>> hardwareCodecs=new SparseArray<ArrayList<String>>();  if (sSoftwareCodecs.containsKey(mimeType)) {    return;  }  Log.v(TAG,"Searching supported color formats for mime type \"" + mimeType + "\"...");  for (int j=MediaCodecList.getCodecCount() - 1; j >= 0; j--) {    MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(j);    if (!codecInfo.isEncoder())     continue;    String[] types=codecInfo.getSupportedTypes();    for (int i=0; i < types.length; i++) {      if (types[i].equalsIgnoreCase(mimeType)) {        MediaCodecInfo.CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(mimeType);        boolean software=false;        for (int k=0; k < SOFTWARE_ENCODERS.length; k++) {          if (codecInfo.getName().equalsIgnoreCase(SOFTWARE_ENCODERS[i])) {            software=true;          }        }        for (int k=0; k < capabilities.colorFormats.length; k++) {          int format=capabilities.colorFormats[k];          if (software) {            if (softwareCodecs.get(format) == null)             softwareCodecs.put(format,new ArrayList<String>());            softwareCodecs.get(format).add(codecInfo.getName());          } else {            if (hardwareCodecs.get(format) == null)             hardwareCodecs.put(format,new ArrayList<String>());            hardwareCodecs.get(format).add(codecInfo.getName());          }        }      }    }  }  StringBuilder e=new StringBuilder();  e.append("Supported color formats on this phone: ");  for (int i=0; i < softwareCodecs.size(); i++)   e.append(softwareCodecs.keyAt(i) + ", ");  for (int i=0; i < hardwareCodecs.size(); i++)   e.append(hardwareCodecs.keyAt(i) + (i == hardwareCodecs.size() - 1 ? "." : ", "));  Log.v(TAG,e.toString());  sSoftwareCodecs.put(mimeType,softwareCodecs);  sHardwareCodecs.put(mimeType,hardwareCodecs);  return;}  }
class C{  private void decodeCredentials(byte[] bytes) throws AuthenticationException {  byte[] user=null;  byte[] pass=null;  int end=bytes.length;  for (int i=bytes.length - 1; i >= 0; i--) {    if (bytes[i] == NUL) {      if (pass == null)       pass=Arrays.copyOfRange(bytes,i + 1,end); else       if (user == null)       user=Arrays.copyOfRange(bytes,i + 1,end);      end=i;    }  }  if (null == user)   throw new AuthenticationException("Authentication ID must not be null");  if (null == pass)   throw new AuthenticationException("Password must not be null");  username=new String(user,StandardCharsets.UTF_8);  password=new String(pass,StandardCharsets.UTF_8);}  }
class C{  public static void pullDown(){  if (instance != null) {    if (instance.executor != null) {      instance.executor.shutdownNow();      instance.executor=null;    }  }}  }
class C{  private Object readResolve() throws ObjectStreamException {  return cctx.grid().affinity(cctx.cache().name());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__BODY:    return getBody();case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__FLAGS:  return getFlags();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int size(){  return n;}  }
class C{  public static EntityIterator newEntityIterator(Cursor cursor){  return new EntityIteratorImpl(cursor);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ANNOTATION___GET_ANNOTATED_ELEMENT:    return getAnnotatedElement();}return super.eInvoke(operationID,arguments);}  }
class C{  public Task detachIso(String vmId) throws IOException {  String path=String.format("%s/%s/detach_iso",getBasePath(),vmId);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,path,null);  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  private String concatStrings(String repeatedToken,int repeatedTimes){  String result="";  for (int i=0; i < repeatedTimes; i++) {    result+=repeatedToken;  }  return result;}  }
class C{  public QuadBuilder addVertex(Vec3d pos,float u,float v){  this.vertices.add(new Vertex(pos,u,v,this.sprite,this.switchUV,this.transformation,this.color,this.normal));  return this;}  }
class C{  @Override public boolean showContextMenu(){  if (isPressed() && mSelectedPosition >= 0) {    int index=mSelectedPosition - mFirstPosition;    View v=getChildAt(index);    return dispatchLongPress(v,mSelectedPosition,mSelectedRowId);  }  return false;}  }
class C{  private static int firstWhitespaceToRight(IDocument document,int position){  int length=document.getLength();  Assert.isTrue(position >= 0);  Assert.isTrue(position <= length);  try {    while (position < length) {      char ch=document.getChar(position);      if (Character.isWhitespace(ch))       return position;      position++;    }    return position;  } catch (  BadLocationException e) {  }  return -1;}  }
class C{  public StringBuilder mapping(boolean makeDest,MappingType mtd,MappingType mts){  StringBuilder sb=new StringBuilder();  if (isNullSetting(makeDest,mtd,mts,sb))   return sb;  if (makeDest)   sb.append(newInstance(destination,stringOfSetDestination));  for (  ASimpleOperation simpleOperation : simpleOperations)   sb.append(setOperation(simpleOperation,mtd,mts).write());  for (  AComplexOperation complexOperation : complexOperations)   sb.append(setOperation(complexOperation,mtd,mts).write(makeDest));  return sb;}  }
class C{  public Name(){  super(KEY);}  }
class C{  @Override public void readXML(String fileName) throws IOException, DocumentException {  readXML(new File(fileName));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrchildnodes1.class,args);}  }
class C{  public static void sendLog(){  if (Display.getInstance().getProperty("cloudServerURL",null) != null) {    sendLogLegacy();    return;  }  try {    if (!Display.isInitialized()) {      return;    }    if (!instance.logDirty) {      return;    }    instance.logDirty=false;    long devId=getUniqueDeviceId();    if (devId < 0) {      Dialog.show("Send Log Error","Device Not Registered: Sending a log from an unregistered device is impossible","OK",null);      return;    }    ConnectionRequest r=new ConnectionRequest();    r.setPost(false);    MultipartRequest m=new MultipartRequest();    m.setUrl("https://crashreport.codenameone.com/CrashReporterEmail/sendCrashReport");    byte[] read=Util.readInputStream(Storage.getInstance().createInputStream("CN1Log__$"));    m.addArgument("i","" + devId);    m.addArgument("u",Display.getInstance().getProperty("built_by_user",""));    m.addArgument("p",Display.getInstance().getProperty("package_name",""));    m.addArgument("v",Display.getInstance().getProperty("AppVersion","0.1"));    m.addData("log",read,"text/plain");    m.setFailSilently(true);    NetworkManager.getInstance().addToQueueAndWait(m);  } catch (  Throwable ex) {    ex.printStackTrace();  }}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof Assignment) {    return map.equals(((Assignment)o).map);  }  return false;}  }
class C{  public static void append(Path file,Writer writer,String charset) throws IOException {  appendBuffered(file,writer,charset,false);}  }
class C{  public SpiderHtmlFormParser(SpiderParam param){  super();  if (param == null) {    throw new IllegalArgumentException("Parameter param must not be null.");  }  this.param=param;}  }
class C{  @Override public void onChanged(OAuth2Credentials credentials) throws IOException {  UserCredentials userCredentials=(UserCredentials)credentials;  storeCredentials(userId,userCredentials);}  }
class C{  protected void addToChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_toChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_toChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__TO_CHANNELS,true,false,true,null,null,null));}  }
class C{  protected void sendTestMessage(NceMessage m,NceListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  public void testGetters5(){  LayoutBuilder b=builder().setText("This is a longer test").setIncludePad(true).setWidth(150);  b.paint.setTextSize(36);  FontMetricsInt fmi=b.paint.getFontMetricsInt();  if (fmi.leading == 0) {    Log.i("TG5","leading is 0, skipping test");    return;  }  Layout l=b.build();  assertVertMetrics(l,fmi.top - fmi.ascent,fmi.bottom - fmi.descent,fmi.top,fmi.descent,fmi.ascent,fmi.descent,fmi.ascent,fmi.bottom);}  }
class C{  private void renderForeground(final ExecutionUnit process,final Graphics2D g2,boolean printing){  if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {switch (RapidMinerGUI.getDragHighlighteMode()) {case FULL:case BORDER:      drawDragBorder(process,g2);    break;case NONE:default :  break;}}}  }
class C{  public Not(){  super("not",1);}  }
class C{  public void testStringToMove() throws ChessParseError {  Position pos=TextIO.readFEN("r4rk1/2pn3p/2q1q1n1/8/2q2p2/6R1/p4PPP/1R4K1 b - - 0 1");  Move mNe5=new Move(Position.getSquare(3,6),Position.getSquare(4,4),Piece.EMPTY);  Move m=TextIO.stringToMove(pos,"Ne5");  assertEquals(mNe5,m);  m=TextIO.stringToMove(pos,"ne");  assertEquals(mNe5,m);  m=TextIO.stringToMove(pos,"N");  assertEquals(null,m);  Move mQc6e4=new Move(Position.getSquare(2,5),Position.getSquare(4,3),Piece.EMPTY);  m=TextIO.stringToMove(pos,"Qc6-e4");  assertEquals(mQc6e4,m);  m=TextIO.stringToMove(pos,"Qc6e4");  assertEquals(mQc6e4,m);  m=TextIO.stringToMove(pos,"Qce4");  assertEquals(null,m);  m=TextIO.stringToMove(pos,"Q6e4");  assertEquals(null,m);  Move maxb1Q=new Move(Position.getSquare(0,1),Position.getSquare(1,0),Piece.BQUEEN);  m=TextIO.stringToMove(pos,"axb1Q");  assertEquals(maxb1Q,m);  m=TextIO.stringToMove(pos,"axb1Q#");  assertEquals(maxb1Q,m);  m=TextIO.stringToMove(pos,"axb1Q+");  assertEquals(maxb1Q,m);  Move mh5=new Move(Position.getSquare(7,6),Position.getSquare(7,4),Piece.EMPTY);  m=TextIO.stringToMove(pos,"h5");  assertEquals(mh5,m);  m=TextIO.stringToMove(pos,"h7-h5");  assertEquals(mh5,m);  m=TextIO.stringToMove(pos,"h");  assertEquals(null,m);  pos=TextIO.readFEN("r1b1k2r/1pqpppbp/p5pn/3BP3/8/2pP4/PPPBQPPP/R3K2R w KQkq - 0 12");  m=TextIO.stringToMove(pos,"bxc3");  assertEquals(TextIO.getSquare("b2"),m.from);  m=TextIO.stringToMove(pos,"Bxc3");  assertEquals(TextIO.getSquare("d2"),m.from);  m=TextIO.stringToMove(pos,"bxc");  assertEquals(TextIO.getSquare("b2"),m.from);  m=TextIO.stringToMove(pos,"Bxc");  assertEquals(TextIO.getSquare("d2"),m.from);  pos=TextIO.readFEN("5k2/p1pQn3/1p2Bp1r/8/4P1pN/2N5/PPP2PPP/R3K2R w KQ - 0 16");  Move kCastle=new Move(Position.getSquare(4,0),Position.getSquare(6,0),Piece.EMPTY);  Move qCastle=new Move(Position.getSquare(4,0),Position.getSquare(2,0),Piece.EMPTY);  m=TextIO.stringToMove(pos,"o");  assertEquals(null,m);  m=TextIO.stringToMove(pos,"o-o");  assertEquals(kCastle,m);  m=TextIO.stringToMove(pos,"O-O");  assertEquals(kCastle,m);  m=TextIO.stringToMove(pos,"0-0");  assertEquals(kCastle,m);  m=TextIO.stringToMove(pos,"O-O-O");  assertEquals(qCastle,m);  m=TextIO.stringToMove(pos,"o-o-o");  assertEquals(qCastle,m);  m=TextIO.stringToMove(pos,"0-0-0");  assertEquals(qCastle,m);  pos.setPiece(Position.getSquare(5,1),Piece.EMPTY);  pos.setPiece(Position.getSquare(5,5),Piece.EMPTY);  m=TextIO.stringToMove(pos,"o");  assertEquals(null,m);  m=TextIO.stringToMove(pos,"o-o");  assertEquals(kCastle,m);  m=TextIO.stringToMove(pos,"o-o-o");  assertEquals(qCastle,m);  m=TextIO.stringToMove(pos,"o-o+");  assertEquals(kCastle,m);  pos=TextIO.readFEN("1r3r2/2kP2Rp/p1bN1p2/2p5/5P2/2P5/P5PP/3R2K1 w - -");  m=TextIO.stringToMove(pos,"d8=Q+");  Move m2=TextIO.stringToMove(pos,"d8Q");  assertEquals(m2,m);  pos=TextIO.readFEN(TextIO.startPosFEN);  Move nullMove=new Move(0,0,0);  m=TextIO.stringToMove(pos,"--");  assertEquals(nullMove,m);  pos=TextIO.readFEN(TextIO.startPosFEN);  Move mNf3=new Move(TextIO.getSquare("g1"),TextIO.getSquare("f3"),Piece.EMPTY);  assertEquals(mNf3,TextIO.stringToMove(pos,"Ngf3"));  assertEquals(mNf3,TextIO.stringToMove(pos,"Ng1f3"));  assertEquals(mNf3,TextIO.stringToMove(pos,"Ng1-f3"));  assertEquals(mNf3,TextIO.stringToMove(pos,"g1f3"));  assertEquals(mNf3,TextIO.stringToMove(pos,"N1f3"));  assertEquals(mNf3,TextIO.stringToMove(pos,"Ngf"));  assertEquals(mNf3,TextIO.stringToMove(pos,"Nf"));}  }
class C{  public static BaggageMessage parse(byte[] bytes){  if (bytes != null) {    try {      return BaggageMessage.parseFrom(bytes);    } catch (    InvalidProtocolBufferException e) {    }  }  return null;}  }
class C{  @TargetApi(11) public static void enableStrictMode(){  if (Utils.hasGingerbread()) {    StrictMode.ThreadPolicy.Builder threadPolicyBuilder=new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog();    StrictMode.VmPolicy.Builder vmPolicyBuilder=new StrictMode.VmPolicy.Builder().detectAll().penaltyLog();    if (Utils.hasHoneycomb()) {      threadPolicyBuilder.penaltyFlashScreen();    }    StrictMode.setThreadPolicy(threadPolicyBuilder.build());    StrictMode.setVmPolicy(vmPolicyBuilder.build());  }}  }
class C{  @Override public void updateBlob(String columnLabel,InputStream x) throws SQLException {  updateBlob(columnLabel,x,-1);}  }
class C{  public static double logPdf(double x,double mu,double sigma){  return -0.5 * log(2 * PI) - log(sigma) + -pow(x - mu,2) / (2 * sigma * sigma);}  }
class C{  public AsyncResult RegisterServerAsync(RegisterServerRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void test_setEndRuleIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,1,0);  st.setEndRule(Calendar.NOVEMBER,20,0);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime(new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime()));  assertTrue("StartRule improperly set3",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  try {    st.setEndRule(13,20,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(1,32,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(1,30,10);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public void ignoreUnknownElements(final Pattern pattern){  if (fieldAliasingMapper == null) {    throw new InitializationException("No " + FieldAliasingMapper.class.getName() + " available");  }  fieldAliasingMapper.addFieldsToIgnore(pattern);}  }
class C{  public void compileProjects(List<File> pProjectRoots,List<File> projectLocationsToCompile,IssueAcceptor issueAcceptor) throws N4JSCompileException {  compileProjects(pProjectRoots,projectLocationsToCompile,Collections.emptyList(),issueAcceptor);}  }
class C{  public boolean isCompatible(){  return compatible;}  }
class C{  public static synchronized void manageZoom(final JFreeChartPlotEngine engine){  if (dialog == null) {    dialog=new ManageZoomDialog();  }  dialog.setChartEngine(engine);  dialog.showDialog();}  }
class C{  public static String reverse(String str){  if (str == null) {    return null;  }  return new StringBuilder(str).reverse().toString();}  }
class C{  public static String toClassName(String uri) throws NullPointerException {  uri=uri.substring("urn:zest:type:".length());  uri=denormalizeURIToClass(uri);  return uri;}  }
class C{  public void add(int index,ExceptionTable table,int offset){  int len=table.size();  while (--len >= 0) {    ExceptionTableEntry e=(ExceptionTableEntry)table.entries.get(len);    add(index,e.startPc + offset,e.endPc + offset,e.handlerPc + offset,e.catchType);  }}  }
class C{  public static int decodePositionZ(long pos){  return (int)(pos << 38 >> 38);}  }
class C{  public Iterable<SSTableReader> init(Set<SSTableReader> sstables){  return tracker.update(Collections.<SSTableReader>emptySet(),sstables);}  }
class C{  public BOVWBuilder(IndexReader reader,LireFeature lireFeature,int numDocsForVocabulary){  this.numDocsForVocabulary=numDocsForVocabulary;  this.reader=reader;  this.lireFeature=lireFeature;}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[4];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    pts[0]=l.getLimit();    pts[2]=l.getLimit();    mTrans.pointValuesToPixel(pts);    pts[1]=mViewPortHandler.contentTop();    pts[3]=mViewPortHandler.contentBottom();    limitLinePath.moveTo(pts[0],pts[1]);    limitLinePath.lineTo(pts[2],pts[3]);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      float xOffset=l.getLineWidth();      float add=Utils.convertDpToPixel(4f);      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      float yOffset=Utils.calcTextHeight(mLimitLinePaint,label) + add / 2f;      if (l.getLabelPosition() == LimitLine.LimitLabelPosition.POS_RIGHT) {        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentBottom() - add,mLimitLinePaint);      } else {        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentTop() + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  @Override public TodoObject copy(){  return new TodoObject(this);}  }
class C{  private static Map<String,LinkedHashMap<String,IgniteBiTuple<String,Boolean>>> convertGrpsMap(Map<String,LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>>> base){  Map<String,LinkedHashMap<String,IgniteBiTuple<String,Boolean>>> res=new LinkedHashMap<>(base.size());  for (  Map.Entry<String,LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>>> e : base.entrySet()) {    LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>> intBase=e.getValue();    LinkedHashMap<String,IgniteBiTuple<String,Boolean>> intRes=new LinkedHashMap<>(intBase.size());    for (    Map.Entry<String,IgniteBiTuple<Class<?>,Boolean>> intE : intBase.entrySet()) {      IgniteBiTuple<Class<?>,Boolean> val=intE.getValue();      intRes.put(intE.getKey(),new IgniteBiTuple<>(U.compact(val.get1().getName()),val.get2()));    }    res.put(e.getKey(),intRes);  }  return res;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.819 -0500",hash_original_method="5BA084DE43D12B9C920D3018364BFA70",hash_generated_method="6A078938F9D0B82BA0C58C5BBF2270CD") protected void deflate() throws IOException {  int byteCount;  while ((byteCount=def.deflate(buf)) != 0) {    out.write(buf,0,byteCount);  }}  }
class C{  protected RequiredRuntimeLibrariesImpl(){  super();}  }
class C{  protected CharType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public void initialize(){  final boolean allowMulti=true;  LOGGER.debug("Setting allow_multi={} for namespace={}",allowMulti,NAMESPACE);  final StoreBucketProperties storeBucketProperties=new StoreBucketProperties.Builder(NAMESPACE).withAllowMulti(allowMulti).build();  try {    client.execute(storeBucketProperties);  } catch (  InterruptedException e) {    LOGGER.warn(String.format("Unable to set allow_multi=%s for namespace=%s",allowMulti,NAMESPACE),e);    Thread.currentThread().interrupt();  }catch (  ExecutionException e) {    LOGGER.error(String.format("Unable to set allow_multi=%s for namespace=%s",allowMulti,NAMESPACE),e);  }}  }
class C{  public boolean containsSubjectName(){  return this.lengthSubjectName() > 0;}  }
class C{  public double[] RGBtoIHS(double r,double g,double b){  double[] ret=new double[3];  double i, h, s;  double minRGB=b;  i=r + g + b;  if (g < minRGB) {    minRGB=g;  }  if (r < minRGB) {    minRGB=r;  }  if (i == 3) {    h=0;  } else   if (b == minRGB) {    h=(g - b) / (i - 3 * b);  } else   if (r == minRGB) {    h=(b - r) / (i - 3 * r) + 1;  } else {    h=(r - g) / (i - 3 * g) + 2;  }  if (h <= 1) {    s=(i - 3 * b) / i;  } else   if (h <= 2) {    s=(i - 3 * r) / i;  } else {    s=(i - 3 * g) / i;  }  ret[0]=i;  ret[1]=h;  ret[2]=s;  return ret;}  }
class C{  private InputStreamReader createReader(InputStream is,String encoding) throws UnsupportedEncodingException {  InputStreamReader r;  if (encoding != null) {    r=new InputStreamReader(is,encoding);  } else {    r=new InputStreamReader(is);  }  return r;}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  private void ensureValidPosition(){  int length=component.getDocument().getLength();  if (dot > length || mark > length) {    handleSetDot(length,Position.Bias.Forward);  }}  }
class C{  public CloneFailedException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public Name(String name){  super(name);}  }
class C{  public static String gridEventName(int type){  String name=GRID_EVT_NAMES.get(type);  return name != null ? name : Integer.toString(type);}  }
class C{  public void onFailed(CaptureFailure failure){}  }
class C{  private boolean isEmailValid(String email){  return email.contains("@");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.754 -0500",hash_original_method="65D07AA1ACA3F409200AC5EFDF123AC8",hash_generated_method="4674FA6F6A3412B85ACB310AC9769419") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public Object encode(Object object) throws EncoderException {  try {    byte[] byteArray=object instanceof String ? ((String)object).getBytes() : (byte[])object;    return encodeHex(byteArray);  } catch (  ClassCastException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  protected void evaluteResult(Database db,Clustering<?> c,Clustering<?> refc){  ClusterContingencyTable contmat=new ClusterContingencyTable(selfPairing,noiseSpecialHandling);  contmat.process(refc,c);  ScoreResult sr=new ScoreResult(contmat);  sr.addHeader(c.getLongName());  db.getHierarchy().add(c,sr);}  }
class C{  public AccountExpiredException(String msg){  super(msg);}  }
class C{  public NibbleArray(byte[] data){  this.data=data;}  }
class C{  public void trackSuccess(){  backoff=params.initial;  retryTime=Utils.currentTimeMillis();}  }
class C{  public static boolean isSourceType(ClassSymbol clazz){  return (clazz.sourcefile != null && clazz.sourcefile.getClass().getName().equals("com.sun.tools.javac.file.RegularFileObject"));}  }
class C{  @Override public void onMissing(FaceDetector.Detections<Face> detectionResults){  mOverlay.remove(mEyesGraphic);}  }
class C{  void showClass(String className){  PrintWriter pw=log.getWriter(WriterKind.NOTICE);  pw.println("javac: show class: " + className);  URL url=getClass().getResource('/' + className.replace('.','/') + ".class");  if (url == null)   pw.println("  class not found"); else {    pw.println("  " + url);    try {      final String algorithm="MD5";      byte[] digest;      MessageDigest md=MessageDigest.getInstance(algorithm);      DigestInputStream in=new DigestInputStream(url.openStream(),md);      try {        byte[] buf=new byte[8192];        int n;        do {          n=in.read(buf);        } while (n > 0);        digest=md.digest();      }  finally {        in.close();      }      StringBuilder sb=new StringBuilder();      for (      byte b : digest)       sb.append(String.format("%02x",b));      pw.println("  " + algorithm + " checksum: "+ sb);    } catch (    Exception e) {      pw.println("  cannot compute digest: " + e);    }  }}  }
class C{  protected void uninstallListeners(JSeparator s){}  }
class C{  protected void subtractPromotionValue(final Map<String,Object> context,final BigDecimal amount){  final String promoCode=getPromotionCode(context);  final Total total=getTotal(context);  final BigDecimal orderAmountOff;  if (MoneyUtils.isFirstBiggerThanSecond(amount,total.getSubTotal())) {    orderAmountOff=total.getSubTotal();  } else {    orderAmountOff=amount;  }  setTotal(context,total.add(new TotalImpl(MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,true,promoCode,orderAmountOff.negate(),MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,false,null,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO)));}  }
class C{  public Iterator<Resource> resourceIterator(){  return resourceList.iterator();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== Sequence ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("data_definition = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.data_definition[0],this.data_definition[1],this.data_definition[2],this.data_definition[3],this.data_definition[4],this.data_definition[5],this.data_definition[6],this.data_definition[7],this.data_definition[8],this.data_definition[9],this.data_definition[10],this.data_definition[11],this.data_definition[12],this.data_definition[13],this.data_definition[14],this.data_definition[15]));  sb.append(String.format("duration = %d%n",this.duration));  sb.append(this.structural_components.toString());  return sb.toString();}  }
class C{  public static void closeQuietly(LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  protected void init(Coords coords,IBoard board,int nType){  position=coords;  type=nType;  Building bldg=board.getBuildingAt(position);  if (bldg == null) {    throw new IllegalArgumentException("The coordinates, " + position.getBoardNum() + ", do not contain a building.");  }  id=BuildingTarget.coordsToId(coords);  StringBuffer buff=new StringBuffer();  buff.append("Hex ").append(position.getBoardNum()).append(" of ").append(bldg.getName());switch (nType) {case Targetable.TYPE_BLDG_IGNITE:    buff.append(Messages.getString("BuildingTarget.Ignite"));  break;case Targetable.TYPE_BUILDING:buff.append(Messages.getString("BuildingTarget.Collapse"));break;case Targetable.TYPE_BLDG_TAG:buff.append(Messages.getString("BuildingTarget.Tag"));break;}name=buff.toString();IHex targetHex=board.getHex(position);elevation=Math.max(-targetHex.depth(),targetHex.terrainLevel(Terrains.BRIDGE_ELEV));height=targetHex.terrainLevel(Terrains.BLDG_ELEV);if (height <= 0) {height=0;} else {height--;}}  }
class C{  public JCIdent Ident(Symbol sym){  return (JCIdent)new JCIdent((sym.name != names.empty) ? sym.name : sym.flatName(),sym).setPos(pos).setType(sym.type);}  }
class C{  private void checkIfDone(){  if (notRepliedYet.isEmpty() || (pendingRemovals != null && pendingRemovals.containsAll(notRepliedYet))) {    logger.debug("All anticipated view responses received - notifying waiting thread");    waiting=false;    notifyAll();  } else {    logger.debug("Still waiting for these view replies: {}",notRepliedYet);  }}  }
class C{  private static HashSet<Register> findOrCreateSplitSet(HashMap<BasicBlockPair,HashSet<Register>> map,BasicBlock b1,BasicBlock b2){  BasicBlockPair pair=new BasicBlockPair(b1,b2);  HashSet<Register> set=map.get(pair);  if (set == null) {    set=new HashSet<Register>(5);    map.put(pair,set);  }  return set;}  }
class C{  public static void hide(Context context,View view){  if (context != null && view != null) {    InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    imm.hideSoftInputFromWindow(view.getWindowToken(),0);  } else {    Log.w(TAG,"hide called with null parameter: " + context + " "+ view);  }}  }
class C{  public DoubleMatrix1D viewColumn(int column){  return viewDice().viewRow(column);}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  private void onAccess(){  ctx.itHolder().checkWeakQueue();  checkRemoved();}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public void close() throws IOException {  if (this.lexer != null) {    this.lexer.close();  }}  }
class C{  public boolean canAdminBbs_ThisMethodShouldBeChanged(User user){  String fakeAdminPrincipal=User.decidePrincipalFromLocal(FAKE_ADMIN_EMAIL_THIS_CONSTANT_SHOULD_BE_DELETED);  if (user.getPrincipal().equals(fakeAdminPrincipal)) {    return true;  }  return false;}  }
class C{  public BinaryReaderExImpl reader(BinaryInputStream stream){  assert stream != null;  return new BinaryReaderExImpl(ctx,stream,null,true);}  }
class C{  @Override public void transform(AffineTransform tx){  super.transform(tx);  for (  Figure f : children) {    f.transform(tx);  }  invalidate();}  }
class C{  protected void determineUnusedIndices(Instances data){  Vector<Integer> indices;  int i;  int n;  boolean covered;  indices=new Vector<Integer>();  for (i=0; i < data.numAttributes(); i++) {    if (i == data.classIndex()) {      continue;    }    covered=false;    for (n=0; n < getRanges().length; n++) {      if (getRanges()[n].isInRange(i)) {        covered=true;        break;      }    }    if (!covered) {      indices.add(new Integer(i));    }  }  m_IndicesUnused=new int[indices.size()];  for (i=0; i < indices.size(); i++) {    m_IndicesUnused[i]=indices.get(i).intValue();  }  if (getDebug()) {    System.out.println("Unused indices: " + Utils.arrayToString(m_IndicesUnused));  }}  }
class C{  public void deleteAttributeAt(int columnIndex,boolean notify){  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {    if (!m_IgnoreChanges) {      addUndoPoint();    }    m_Data.deleteAttributeAt(columnIndex - 1);    if (notify) {      notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));    }  }}  }
class C{  public final boolean post(@NonNull Runnable r){  return mExec.post(wrapRunnable(r));}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  public static void nioCopy(File source,File target,FilenameFilter filter,boolean replaceIfExists) throws IOException {  copy(source,target,filter,true,replaceIfExists);}  }
class C{  private void publishRoutes(List<SessionInfoDto> validSessions){  AppLogger.getLogger().Info("MediaBrowserRouteProvider: Build RouteDescriptors");  List<MediaRouteDescriptor> routes=new ArrayList<>();  for (  SessionInfoDto session : validSessions) {    MediaRouteDescriptor routeDescriptor=new MediaRouteDescriptor.Builder(session.getId(),session.getDeviceName()).setDescription(session.getClient()).addControlFilters(getControlFiltersFromSessionInfo(session)).setPlaybackStream(AudioManager.STREAM_MUSIC).setPlaybackType(MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE).setVolumeHandling(MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE).setVolumeMax(0).setVolume(0).build();    if (routeDescriptor != null) {      AppLogger.getLogger().Info("MediaBrowserRouteProvider: Adding RouteDescriptor");      routes.add(routeDescriptor);    } else {      AppLogger.getLogger().Info("MediaBrowserRouteProvider: Error building RouteDescriptor");    }  }  AppLogger.getLogger().Info("MediaBrowserRouteProvider: " + String.valueOf(routes.size()) + " routes added");  MediaRouteProviderDescriptor providerDescriptor=new MediaRouteProviderDescriptor.Builder().addRoutes(routes).build();  if (providerDescriptor == null) {    AppLogger.getLogger().Info("MediaBrowserRouteProvider: Error building ProviderDescriptor");  }  setDescriptor(providerDescriptor);  AppLogger.getLogger().Info("MediaBrowserRouteProvider: ProviderDescriptor published");}  }
class C{  private void grow(int minCapacity){  int oldCapacity=elementData.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity - minCapacity < 0) {    newCapacity=minCapacity;  }  if (newCapacity - MAX_ARRAY_SIZE > 0) {    newCapacity=hugeCapacity(minCapacity);  }  elementData=Arrays.copyOf(elementData,newCapacity);}  }
class C{  public boolean calendarExists(Connection conn,String calendarName) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_CALENDAR_EXISTENCE));    ps.setString(1,calendarName);    rs=ps.executeQuery();    if (rs.next()) {      return true;    } else {      return false;    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public void done() throws IOException {  printer.flush();}  }
class C{  static List<List<File>> partition(final int binCount,final File... files){  final File[] sort=Arrays.copyOf(files,files.length);  return binThem(binCount,sort);}  }
class C{  protected void addForeignKeyConstraint(TableDefinition sourceTableDef,TableDefinition targetTableDef,List<String> fkFields,List<String> targetFields,boolean cascadeOnDelete){  if (!this.generateFKConstraints) {    return;  }  assert fkFields.size() > 0 && fkFields.size() == targetFields.size();  List<String> fkFieldNames=fkFields;  List<String> targetFieldNames=targetFields;  if (fkFields.size() > 1) {    boolean resolved=false;    boolean error=false;    Map<String,String> targetToFkField=new LinkedHashMap<>();    for (int index=0; index < fkFields.size(); index++) {      String targetField=targetFields.get(index);      if (targetToFkField.containsKey(targetField)) {        error=true;        break;      }      targetToFkField.put(targetField,fkFields.get(index));    }    List<String> orderedFkFields=new ArrayList<>(fkFields.size());    List<String> orderedTargetFields=new ArrayList<>(targetFields.size());    if (!error) {      resolved=true;      for (      String pkField : targetTableDef.getPrimaryKeyFieldNames()) {        String fkField=targetToFkField.get(pkField);        if (fkField == null) {          resolved=false;          break;        }        orderedFkFields.add(fkField);        orderedTargetFields.add(pkField);      }    }    if (!error && !resolved) {      for (      UniqueKeyConstraint uniqueConstraint : targetTableDef.getUniqueKeys()) {        orderedFkFields.clear();        orderedTargetFields.clear();        resolved=true;        for (        String ukField : uniqueConstraint.getSourceFields()) {          String fkField=targetToFkField.get(ukField);          if (fkField == null) {            resolved=false;            break;          }          orderedFkFields.add(fkField);          orderedTargetFields.add(ukField);        }        if (resolved) {          break;        }      }    }    if (resolved) {      fkFieldNames=orderedFkFields;      targetFieldNames=orderedTargetFields;    }  }  ForeignKeyConstraint constraint=((JPAMTableDefinition)sourceTableDef).buildForeignKeyConstraint(fkFieldNames,targetFieldNames,targetTableDef,this.databasePlatform);  constraint.setShouldCascadeOnDelete(cascadeOnDelete);  sourceTableDef.addForeignKeyConstraint(constraint);}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,tex);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  public DoubleLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public String deleteTranslations() throws SaaSApplicationException {  try {    getBrandManagementService().deleteAllMessageProperties(getMarketplaceBean().getMarketplaceId());  } catch (  SaaSApplicationException e) {    marketplaceBean.checkMarketplaceDropdownAndMenuVisibility(e);    throw e;  }  resetBundles();  resetInputs();  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_SHOP_TRANSLATIONS_DELETED);  return null;}  }
class C{  public boolean hasText(){  return fieldSetFlags()[14];}  }
class C{  private boolean addLinkToStructure(Map<NodePortTuple,Set<Link>> s,Link l){  boolean result1=false, result2=false;  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  if (s.get(n1) == null) {    s.put(n1,new HashSet<Link>());  }  if (s.get(n2) == null) {    s.put(n2,new HashSet<Link>());  }  result1=s.get(n1).add(l);  result2=s.get(n2).add(l);  return (result1 || result2);}  }
class C{  public SVGGroupFigure(){  SVGAttributeKeys.setDefaults(this);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.112 -0500",hash_original_method="E77F68EE2D3DB39201883D122D0ED2C1",hash_generated_method="BD0599F28851807EB8394F23663BDC66") public MalformedChallengeException(String message){  super(message);}  }
class C{  public static int ECONNRESET(){  return Errno.ECONNRESET.intValue();}  }
class C{  public TST(){}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public int numLevelsForResolution(double radiansPerPixel){  if (radiansPerPixel <= 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSetConfig","setNumLevelsForResolution","invalidResolution"));  }  double degreesPerPixel=Math.toDegrees(radiansPerPixel);  double firstLevelDegreesPerPixel=this.firstLevelDelta / Math.min(this.tileWidth,this.tileHeight);  double level=Math.log(firstLevelDegreesPerPixel / degreesPerPixel) / Math.log(2);  int levelNumber=(int)Math.ceil(level);  return levelNumber + 1;}  }
class C{  private static boolean addToEvaluator(ArrayDeque<FilterValueSetParam> remainingParameters,FilterHandle filterCallback,EventEvaluator eventEvaluator,ArrayDeque<EventTypeIndexBuilderIndexLookupablePair> treePathInfo,FilterServiceGranularLockFactory lockFactory){  if (eventEvaluator instanceof FilterHandleSetNode) {    FilterHandleSetNode node=(FilterHandleSetNode)eventEvaluator;    addToNode(remainingParameters,filterCallback,node,treePathInfo,lockFactory);    return true;  }  FilterParamIndexBase nextIndex=(FilterParamIndexBase)eventEvaluator;  FilterValueSetParam parameter=IndexHelper.findParameter(remainingParameters,nextIndex);  if (parameter != null) {    remainingParameters.remove(parameter);    treePathInfo.add(new EventTypeIndexBuilderIndexLookupablePair(nextIndex,parameter.getFilterForValue()));    addToIndex(remainingParameters,filterCallback,nextIndex,parameter.getFilterForValue(),treePathInfo,lockFactory);    return true;  }  return false;}  }
class C{  private static boolean isForm(UIComponent component){  return (component instanceof UIForm || (component.getFamily() != null && component.getFamily().endsWith("Form")));}  }
class C{  @SuppressWarnings({"NullableProblems"}) public void testValuePropagation() throws Exception {  initStore(1);  try {    for (int i=0; i < CACHE_SIZE * 2; i++)     store.write(new CacheEntryImpl<>(i,"val" + i));    U.sleep(200);    for (int i=0; i < CACHE_SIZE; i++) {      String val=delegate.load(i);      assertNotNull("Value for [key= " + i + "] was not written in store",val);      assertEquals("Invalid value [key=" + i + "]","val" + i,val);    }    U.sleep(FLUSH_FREQUENCY + 300);    for (int i=CACHE_SIZE; i < CACHE_SIZE * 2; i++) {      String val=delegate.load(i);      assertNotNull("Value for [key= " + i + "] was not written in store",val);      assertEquals("Invalid value [key=" + i + "]","val" + i,val);    }  }  finally {    shutdownStore();  }}  }
class C{  synchronized public void nextBytes(byte[] bytes){  fillData(bytes);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public boolean isIncludeInLuceneIndex(final ProductSku entity,final boolean checkInventory){  return entity != null && productInterceptor.isIncludeInLuceneIndex(entity.getProduct(),checkInventory);}  }
class C{  @Override @NotNull public String toString(){  return "Database [dialect=" + dialect + ", allowImplicitTransactions="+ allowImplicitTransactions+ ']';}  }
class C{  @SuppressWarnings("unchecked") private static void addToStringMethod(ClassNode classNode,List<TupleSchemaRegistry.SQLFieldInfo> fieldList) throws JSONException {  MethodNode toStringNode=new MethodNode(Opcodes.ACC_PUBLIC,"toString","()Ljava/lang/String;",null,null);  toStringNode.visitAnnotation("Ljava/lang/Override;",true);  toStringNode.instructions.add(new TypeInsnNode(Opcodes.NEW,"java/lang/StringBuilder"));  toStringNode.instructions.add(new InsnNode(Opcodes.DUP));  toStringNode.instructions.add(new LdcInsnNode(classNode.name + "{"));  toStringNode.instructions.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,"java/lang/StringBuilder","<init>","(Ljava/lang/String;)V",false));  toStringNode.instructions.add(new VarInsnNode(Opcodes.ASTORE,1));  toStringNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  for (int i=0; i < fieldList.size(); i++) {    TupleSchemaRegistry.SQLFieldInfo info=fieldList.get(i);    String fieldName=info.getColumnName();    String fieldType=info.getType().getJavaType().getName();    String fieldJavaType=getJavaType(fieldType);    if (i != 0) {      toStringNode.instructions.add(new LdcInsnNode(", "));      toStringNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false));    }    toStringNode.instructions.add(new LdcInsnNode(fieldName + "="));    toStringNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false));    toStringNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));    toStringNode.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName,fieldJavaType));    if (fieldJavaType.equals(Character.toString(typeIdentifierShort)) || fieldJavaType.equals(Character.toString(typeIdentifierByte))) {      fieldJavaType="I";    }    Character pchar=PRIMITIVE_TYPES.get(fieldType);    if (pchar == null) {      fieldJavaType="Ljava/lang/Object;";    }    toStringNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/StringBuilder","append","(" + fieldJavaType + ")Ljava/lang/StringBuilder;",false));  }  toStringNode.instructions.add(new LdcInsnNode("}"));  toStringNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false));  toStringNode.instructions.add(new InsnNode(Opcodes.POP));  toStringNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  toStringNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/StringBuilder","toString","()Ljava/lang/String;",false));  toStringNode.instructions.add(new InsnNode(Opcodes.ARETURN));  classNode.methods.add(toStringNode);}  }
class C{  public static void main(String[] argv){  runClassifier(new MultilayerPerceptron(),argv);}  }
class C{  public static ApplicationConfig fromJson(String jsonString){  ApplicationConfig config=new ApplicationConfig();  try {    JsonNode json=new ObjectMapper().readTree(jsonString);    config.setContentConfig(ContentConfig.fromJson(json));    if (json.has(JsonKeys.STORE_PACKAGE_IDENTIFIER)) {      config.setStoreIdentifier(json.get(JsonKeys.STORE_PACKAGE_IDENTIFIER).asText());    } else {      config.setStoreIdentifier("");    }    config.jsonString=jsonString;  } catch (  Exception e) {    Log.d("CHCP","Failed to convert json string into application config",e);    config=null;  }  return config;}  }
class C{  public void dispose() throws IOException {  buffer=null;  super.dispose();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String04() throws NoSuchProviderException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  KeyManagerFactory kMF;  for (int i=0; i < validValues.length; i++) {    kMF=KeyManagerFactory.getInstance(validValues[i],defaultProviderName);    assertNotNull("No KeyManagerFactory created",kMF);    assertEquals("Incorrect algorithm",kMF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",kMF.getProvider().getName(),defaultProviderName);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public void validateConfiguration() throws ConfigurationException {  log.info("Initializing DrInternodeAuthenticator");  CoordinatorClient coordinatorClient=DbServiceImpl.instance.getCoordinator();  DrUtil drUtil=new DrUtil(coordinatorClient);  Site localSite=drUtil.getLocalSite();  isStandbyDegraded=localSite.getState().equals(SiteState.STANDBY_DEGRADED) || localSite.getState().equals(SiteState.STANDBY_DEGRADING);  isStandbyPaused=localSite.getState().equals(SiteState.STANDBY_PAUSING) || localSite.getState().equals(SiteState.STANDBY_PAUSED);  isActiveDegraded=localSite.getState().equals(SiteState.ACTIVE_DEGRADED);  Collection<String> nodeAddrList=localSite.getHostIPv4AddressMap().values();  if (!localSite.isUsingIpv4()) {    nodeAddrList=localSite.getHostIPv6AddressMap().values();  }  for (  String nodeAddr : nodeAddrList) {    try {      localAddresses.add(InetAddress.getByName(nodeAddr));    } catch (    UnknownHostException e) {      log.error("Invalid IP address {}",nodeAddr);    }  }}  }
class C{  public static void writeTextFile(final File file,final String text) throws IOException {  Preconditions.checkNotNull(file,"Error: file argument can not be null");  Preconditions.checkNotNull(text,"Error: text argument can not be null");  try (BufferedWriter writer=new BufferedWriter(new FileWriter(file))){    writer.write(text);  } }  }
class C{  public Iterator elementKeys(){  return _elementOrder.iterator();}  }
class C{  public FBServiceManager(){  this(GDSFactory.getDefaultGDSType());}  }
class C{  public static <T,PT extends Procedure<? super T>>void forEach(Iterable<T> iterable,ProcedureFactory<PT> procedureFactory,Combiner<PT> combiner,int minForkSize,int taskCount){  FJIterate.forEach(iterable,procedureFactory,combiner,minForkSize,taskCount,FJIterate.FORK_JOIN_POOL);}  }
class C{  public SQLTransientConnectionException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public Set<K> keys(){synchronized (this) {    return new HashSet<K>(index.keySet());  }}  }
class C{  public ShortArrayCodeOutput(int maxSize){  if (maxSize < 0) {    throw new IllegalArgumentException("maxSize < 0");  }  this.array=new short[maxSize];}  }
class C{  public static void main(String[] args){  char[] w=new char[501];  PorterStemmer s=new PorterStemmer();  for (int i=0; i < args.length; i++)   try {    FileInputStream in=new FileInputStream(args[i]);    try {      while (true) {        int ch=in.read();        if (Character.isLetter((char)ch)) {          int j=0;          while (true) {            ch=Character.toLowerCase((char)ch);            w[j]=(char)ch;            if (j < 500)             j++;            ch=in.read();            if (!Character.isLetter((char)ch)) {              for (int c=0; c < j; c++)               s.add(w[c]);              s.stem();{                String u;                u=s.toString();                System.out.print(u);              }              break;            }          }        }        if (ch < 0)         break;        System.out.print((char)ch);      }    } catch (    IOException e) {      System.out.println("error reading " + args[i]);      break;    }  } catch (  FileNotFoundException e) {    System.out.println("file " + args[i] + " not found");    break;  }}  }
class C{  void preInit(XCreateWindowParams params){  state_lock=new StateLock();  embedded=Boolean.TRUE.equals(params.get(EMBEDDED));  visible=Boolean.TRUE.equals(params.get(VISIBLE));  Object parent=params.get(PARENT);  if (parent instanceof XBaseWindow) {    parentWindow=(XBaseWindow)parent;  } else {    Long parentWindowID=(Long)params.get(PARENT_WINDOW);    if (parentWindowID != null) {      parentWindow=XToolkit.windowToXWindow(parentWindowID);    }  }  Long eventMask=(Long)params.get(EVENT_MASK);  if (eventMask != null) {    long mask=eventMask.longValue();    mask|=XConstants.SubstructureNotifyMask;    params.put(EVENT_MASK,mask);  }  screen=-1;}  }
class C{  public static Uri withAppendedId(Uri contentUri,long id){  return appendId(contentUri.buildUpon(),id).build();}  }
class C{  public AbScrollTextView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public static void prepareAreaFormat(int chip,RSyntaxTextArea listingArea){  listingArea.setEditable(false);  listingArea.setFont(new Font(Font.MONOSPACED,Font.PLAIN,11));  listingArea.setCodeFoldingEnabled(true);  listingArea.setAntiAliasingEnabled(true);  listingArea.setMarkOccurrences(true);  listingArea.setMarkOccurrencesColor(Color.GREEN);  listingArea.setCurrentLineHighlightColor(new Color(255,255,0,64));  AbstractTokenMakerFactory atmf=(AbstractTokenMakerFactory)TokenMakerFactory.getDefaultInstance();  if (chip == Constants.CHIP_FR) {    atmf.putMapping("text/frasm","com.nikonhacker.gui.component.sourceCode.syntaxHighlighter.AssemblerFrTokenMaker");  } else {    atmf.putMapping("text/txasm","com.nikonhacker.gui.component.sourceCode.syntaxHighlighter.AssemblerTxTokenMaker");  }  TokenMakerFactory.setDefaultInstance(atmf);  SyntaxScheme ss=listingArea.getSyntaxScheme();  Style functionStyle=ss.getStyle(Token.FUNCTION);  Style addressStyle=(Style)functionStyle.clone();  ss.setStyle(Token.LITERAL_NUMBER_HEXADECIMAL,addressStyle);  addressStyle.foreground=Color.BLACK;  Style instructionStyle=(Style)functionStyle.clone();  ss.setStyle(Token.ANNOTATION,instructionStyle);  instructionStyle.foreground=Color.LIGHT_GRAY;  Style variableStyle=ss.getStyle(Token.VARIABLE);  variableStyle.foreground=new Color(155,22,188);  Style reservedWordStyle=ss.getStyle(Token.RESERVED_WORD);  reservedWordStyle.foreground=new Color(0,0,255);  Style reservedWord2Style=ss.getStyle(Token.RESERVED_WORD_2);  reservedWord2Style.foreground=new Color(0,150,150);  if (chip == Constants.CHIP_FR) {    listingArea.setSyntaxEditingStyle("text/frasm");  } else {    listingArea.setSyntaxEditingStyle("text/txasm");  }  RSyntaxTextAreaHighlighter rSyntaxTextAreaHighlighter=new RSyntaxTextAreaHighlighter();  listingArea.setHighlighter(rSyntaxTextAreaHighlighter);}  }
class C{  public RecentFilesHandler(String propsFile,M menu){  super(propsFile,menu);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCIES__PROJECT_DEPENDENCIES:    getProjectDependencies().clear();  return;}super.eUnset(featureID);}  }
class C{  public boolean equalsT(Vector3 v){  return (x - 1E-5 > v.x && v.x < x + 1E-5) && (y - 1E-5 > v.y && v.y < y + 1E-5) && (z - 1E-5 > v.z && v.z < z + 1E-5);}  }
class C{  public BatchInsert(){}  }
class C{  protected Automaton convertAutomaton(Automaton a){  return a;}  }
class C{  public static Index of(int unsigned){  return (unsigned >= 0) & (unsigned < INSTANCES.length) ? INSTANCES[unsigned] : new Index(unsigned);}  }
class C{  public GridCacheMvccCandidate addNearLocal(GridCacheEntryEx parent,UUID nodeId,@Nullable UUID otherNodeId,long threadId,GridCacheVersion ver,long timeout,boolean tx,boolean implicitSingle){  GridCacheMvccCandidate cand=new GridCacheMvccCandidate(parent,nodeId,otherNodeId,null,threadId,ver,timeout,true,false,tx,implicitSingle,true,false,null);  add0(cand);  return cand;}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  return new ImmutableCollections.MapN<K,V>(k1,v1,k2,v2,k3,v3);}  }
class C{  public void drawPolyline(int xPoints[],int yPoints[],int nPoints){  g.drawPolyline(xPoints,yPoints,nPoints);}  }
class C{  @Override public void run(){  boolean lastAcquireFailed=false;  while (!halted.get()) {    try {synchronized (sigLock) {        while (paused && !halted.get()) {          try {            sigLock.wait(1000L);          } catch (          InterruptedException ignore) {          }        }        if (halted.get()) {          break;        }      }      int availThreadCount=qsRsrcs.getThreadPool().blockForAvailableThreads();      if (availThreadCount > 0) {        List<OperableTrigger> triggers=null;        long now=System.currentTimeMillis();        clearSignaledSchedulingChange();        try {          triggers=qsRsrcs.getJobStore().acquireNextTriggers(now + idleWaitTime,Math.min(availThreadCount,qsRsrcs.getMaxBatchSize()),qsRsrcs.getBatchTimeWindow());          lastAcquireFailed=false;          if (log.isDebugEnabled())           log.debug("batch acquisition of " + (triggers == null ? 0 : triggers.size()) + " triggers");        } catch (        JobPersistenceException jpe) {          if (!lastAcquireFailed) {            qs.notifySchedulerListenersError("An error occurred while scanning for the next triggers to fire.",jpe);          }          lastAcquireFailed=true;          continue;        }catch (        RuntimeException e) {          if (!lastAcquireFailed) {            getLog().error("quartzSchedulerThreadLoop: RuntimeException " + e.getMessage(),e);          }          lastAcquireFailed=true;          continue;        }        if (triggers != null && !triggers.isEmpty()) {          now=System.currentTimeMillis();          long triggerTime=triggers.get(0).getNextFireTime().getTime();          long timeUntilTrigger=triggerTime - now;          while (timeUntilTrigger > 2) {synchronized (sigLock) {              if (halted.get()) {                break;              }              if (!isCandidateNewTimeEarlierWithinReason(triggerTime,false)) {                try {                  now=System.currentTimeMillis();                  timeUntilTrigger=triggerTime - now;                  if (timeUntilTrigger >= 1)                   sigLock.wait(timeUntilTrigger);                } catch (                InterruptedException ignore) {                }              }            }            if (releaseIfScheduleChangedSignificantly(triggers,triggerTime)) {              break;            }            now=System.currentTimeMillis();            timeUntilTrigger=triggerTime - now;          }          if (triggers.isEmpty())           continue;          List<TriggerFiredResult> bndles=new ArrayList<TriggerFiredResult>();          boolean goAhead=true;synchronized (sigLock) {            goAhead=!halted.get();          }          if (goAhead) {            try {              List<TriggerFiredResult> res=qsRsrcs.getJobStore().triggersFired(triggers);              if (res != null)               bndles=res;            } catch (            SchedulerException se) {              qs.notifySchedulerListenersError("An error occurred while firing triggers '" + triggers + "'",se);              for (int i=0; i < triggers.size(); i++) {                qsRsrcs.getJobStore().releaseAcquiredTrigger(triggers.get(i));              }              continue;            }          }          for (int i=0; i < bndles.size(); i++) {            TriggerFiredResult result=bndles.get(i);            TriggerFiredBundle bndle=result.getTriggerFiredBundle();            Exception exception=result.getException();            if (exception instanceof RuntimeException) {              getLog().error("RuntimeException while firing trigger " + triggers.get(i),exception);              qsRsrcs.getJobStore().releaseAcquiredTrigger(triggers.get(i));              continue;            }            if (bndle == null) {              qsRsrcs.getJobStore().releaseAcquiredTrigger(triggers.get(i));              continue;            }            JobRunShell shell=null;            try {              shell=qsRsrcs.getJobRunShellFactory().createJobRunShell(bndle);              shell.initialize(qs);            } catch (            SchedulerException se) {              qsRsrcs.getJobStore().triggeredJobComplete(triggers.get(i),bndle.getJobDetail(),CompletedExecutionInstruction.SET_ALL_JOB_TRIGGERS_ERROR);              continue;            }            if (qsRsrcs.getThreadPool().runInThread(shell) == false) {              getLog().error("ThreadPool.runInThread() return false!");              qsRsrcs.getJobStore().triggeredJobComplete(triggers.get(i),bndle.getJobDetail(),CompletedExecutionInstruction.SET_ALL_JOB_TRIGGERS_ERROR);            }          }          continue;        }      } else {        continue;      }      long now=System.currentTimeMillis();      long waitTime=now + getRandomizedIdleWaitTime();      long timeUntilContinue=waitTime - now;synchronized (sigLock) {        try {          if (!halted.get()) {            if (!isScheduleChanged()) {              sigLock.wait(timeUntilContinue);            }          }        } catch (        InterruptedException ignore) {        }      }    } catch (    RuntimeException re) {      getLog().error("Runtime error occurred in main trigger firing loop.",re);    }  }  qs=null;  qsRsrcs=null;}  }
class C{  public void testVerifyCommitRecordIndex(){  final Properties properties=new Properties(getProperties());  properties.setProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE,"100");  final Journal store=(Journal)getStore(properties);  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    for (int r=0; r < 10; r++) {      ArrayList<Long> addrs=new ArrayList<Long>();      for (int i=0; i < 100; i++) {        addrs.add(bs.write(randomData(45)));      }      store.commit();      for (      long addr : addrs) {        bs.delete(addr);      }      store.commit();      Thread.currentThread().sleep(200);    }    final String fname=bs.getStore().getStoreFile().getAbsolutePath();    store.close();    VerifyCommitRecordIndex.main(new String[]{fname});  } catch (  InterruptedException e) {  } finally {    store.destroy();  }}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public List<String> blpop(final int timeout,final String... keys){  checkIsInMulti();  List<String> args=new ArrayList<String>();  for (  String arg : keys) {    args.add(arg);  }  args.add(String.valueOf(timeout));  client.blpop(args.toArray(new String[args.size()]));  client.setTimeoutInfinite();  final List<String> multiBulkReply=client.getMultiBulkReply();  client.rollbackTimeout();  return multiBulkReply;}  }
class C{  public FilterRequest(Request request,Filter filter){  this.request=request;  this.fFilter=filter;}  }
class C{  protected void writeSVGToOutput(SVGGraphics2D svgGenerator,Element svgRoot,TranscoderOutput output) throws TranscoderException {  Document doc=output.getDocument();  if (doc != null)   return;  XMLFilter xmlFilter=output.getXMLFilter();  if (xmlFilter != null) {    handler.fatalError(new TranscoderException("" + ERROR_INCOMPATIBLE_OUTPUT_TYPE));  }  try {    boolean escaped=false;    if (hints.containsKey(KEY_ESCAPED))     escaped=((Boolean)hints.get(KEY_ESCAPED)).booleanValue();    OutputStream os=output.getOutputStream();    if (os != null) {      svgGenerator.stream(svgRoot,new OutputStreamWriter(os),false,escaped);      return;    }    Writer wr=output.getWriter();    if (wr != null) {      svgGenerator.stream(svgRoot,wr,false,escaped);      return;    }    String uri=output.getURI();    if (uri != null) {      try {        URL url=new URL(uri);        URLConnection urlCnx=url.openConnection();        os=urlCnx.getOutputStream();        svgGenerator.stream(svgRoot,new OutputStreamWriter(os),false,escaped);        return;      } catch (      MalformedURLException e) {        handler.fatalError(new TranscoderException(e));      }catch (      IOException e) {        handler.fatalError(new TranscoderException(e));      }    }  } catch (  IOException e) {    throw new TranscoderException(e);  }  throw new TranscoderException("" + ERROR_INCOMPATIBLE_OUTPUT_TYPE);}  }
class C{  public static double createDoubleSetting(final Map<String,String> rawSettings,final String settingName,final double defaultValue){  final String settingString=rawSettings.get(settingName);  if (settingString == null) {    return defaultValue;  } else {    try {      return Double.parseDouble(settingString);    } catch (    final NumberFormatException exception) {      CUtilityFunctions.logException(exception);      return defaultValue;    }  }}  }
class C{  public boolean covers(String uri){  if (ANY_NAMESPACE.equals(ns) || "".equals(wildcard)) {    return ns.equals(uri);  }  String[] parts=split(ns,wildcard);  if (parts.length == 1) {    return ns.equals(uri);  }  if (!uri.startsWith(parts[0])) {    return false;  }  if (!uri.endsWith(parts[parts.length - 1])) {    return false;  }  int start=parts[0].length();  int end=uri.length() - parts[parts.length - 1].length();  for (int i=1; i < parts.length - 1; i++) {    if (start > end) {      return false;    }    int match=uri.indexOf(parts[i],start);    if (match == -1 || match + parts[i].length() > end) {      return false;    }    start=match + parts[i].length();  }  return true;}  }
class C{  public ColtDataSet(int rows,List<Node> variables){  tetradMatrix=new TetradMatrix(rows,variables.size());  this.variables=new LinkedList<>(variables);  for (int i=0; i < rows; i++) {    for (int j=0; j < variables.size(); j++) {      tetradMatrix.set(i,j,Double.NaN);    }  }}  }
class C{  private void validateTransactionDateOnWorkingDay(final LocalDate transactionDate,final ClientCharge clientCharge,final DateTimeFormatter fmt){  validateActivityDateFallOnAWorkingDay(transactionDate,clientCharge.getOfficeId(),ClientApiConstants.transactionDateParamName,"transaction.not.allowed.transaction.date.is.on.holiday","transaction.not.allowed.transaction.date.is.a.non.workingday",fmt);}  }
class C{  public void test_ConstructorIF(){  LinkedHashSet hs2=new LinkedHashSet(5,(float)0.5);  assertEquals("Created incorrect LinkedHashSet",0,hs2.size());  try {    new LinkedHashSet(-1,0.5f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new LinkedHashSet(1,-0.5f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new LinkedHashSet(1,0f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitCharMemberValue(this);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double maxValue;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String whatToInterpolate="";  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  whatToInterpolate=args[2].toLowerCase();  returnNumberToInterpolate=args[3].toLowerCase();  resolution=Double.parseDouble(args[4]);  double circleCircumscrbingGridCell=Math.sqrt(2) * resolution / 2.0;  excludeNeverClassified=Boolean.parseBoolean(args[5]);  excludeUnclassified=Boolean.parseBoolean(args[6]);  excludeBareGround=Boolean.parseBoolean(args[7]);  excludeLowVegetation=Boolean.parseBoolean(args[8]);  excludeMediumVegetation=Boolean.parseBoolean(args[9]);  excludeHighVegetation=Boolean.parseBoolean(args[10]);  excludeBuilding=Boolean.parseBoolean(args[11]);  excludeLowPoint=Boolean.parseBoolean(args[12]);  excludeModelKeyPoint=Boolean.parseBoolean(args[13]);  excludeWater=Boolean.parseBoolean(args[14]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    PointRecColours pointColours;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      if (!whatToInterpolate.equals("rgb data")) {        str1="Data Scale:\tcontinuous";      } else {        str1="Data Scale:\trgb";      }      out.println(str1);      if (whatToInterpolate.equals("rgb data")) {        str1="Preferred Palette:\t" + "rgb.pal";      } else       if (whatToInterpolate.equals("intensity")) {        str1="Preferred Palette:\t" + "grey.pal";      } else {        str1="Preferred Palette:\t" + "spectrum.pal";      }      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      double halfResolution=resolution / 2;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          results=pointsTree.neighborsWithinRange(entry,circleCircumscrbingGridCell);          if (!results.isEmpty()) {            maxValue=Float.NEGATIVE_INFINITY;            for (i=0; i < results.size(); i++) {              z=results.get(i).value;              if (z > maxValue) {                maxValue=z;              }              ;            }            image.setValue(row,col,maxValue);          } else {            image.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Interpolating point data:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public LinkedHashMap<String,Revisions> select(final String host,final Integer depth,final Order order,int maxcount){  TreeMap<String,String[]> dateIdResult=new TreeMap<>();  if (host == null && depth == null) {    loop:     for (    Map.Entry<String,TreeMap<Integer,TreeSet<String>>> hostportDepths : this.directory.entrySet()) {      for (      Map.Entry<Integer,TreeSet<String>> depthIds : hostportDepths.getValue().entrySet()) {        for (        String id : depthIds.getValue()) {          dateIdResult.put(id,new String[]{hostportDepths.getKey(),Integer.toString(depthIds.getKey())});          if (order == Order.ANY && dateIdResult.size() >= maxcount)           break loop;        }      }    }  }  if (host == null && depth != null) {    loop:     for (    Map.Entry<String,TreeMap<Integer,TreeSet<String>>> hostportDepths : this.directory.entrySet()) {      TreeSet<String> ids=hostportDepths.getValue().get(depth);      if (ids != null)       for (      String id : ids) {        dateIdResult.put(id,new String[]{hostportDepths.getKey(),Integer.toString(depth)});        if (order == Order.ANY && dateIdResult.size() >= maxcount)         break loop;      }    }  }  if (host != null && depth == null) {    String hostport=pathToHostPortDir(host,80);    TreeMap<Integer,TreeSet<String>> depthIdsMap=this.directory.get(hostport);    if (depthIdsMap != null)     loop:     for (    Map.Entry<Integer,TreeSet<String>> depthIds : depthIdsMap.entrySet()) {      for (      String id : depthIds.getValue()) {        dateIdResult.put(id,new String[]{hostport,Integer.toString(depthIds.getKey())});        if (order == Order.ANY && dateIdResult.size() >= maxcount)         break loop;      }    }  }  if (host != null && depth != null) {    String hostport=pathToHostPortDir(host,80);    TreeMap<Integer,TreeSet<String>> domaindepth=this.directory.get(hostport);    if (domaindepth != null) {      TreeSet<String> ids=domaindepth.get(depth);      if (ids != null)       loop:       for (      String id : ids) {        dateIdResult.put(id,new String[]{hostport,Integer.toString(depth)});        if (order == Order.ANY && dateIdResult.size() >= maxcount)         break loop;      }    }  }  LinkedHashMap<String,Revisions> result=new LinkedHashMap<>();  Iterator<Map.Entry<String,String[]>> i=order == Order.LATESTFIRST ? dateIdResult.descendingMap().entrySet().iterator() : dateIdResult.entrySet().iterator();  while (i.hasNext() && result.size() < maxcount) {    Map.Entry<String,String[]> entry=i.next();    String datehash=entry.getKey();    int p=datehash.indexOf('.');    assert p >= 0;    Revisions r=new Revisions(entry.getValue()[0],Integer.parseInt(entry.getValue()[1]),datehash);    result.put(datehash.substring(p + 1),r);  }  return result;}  }
class C{  @Override public void testRemoveAndClear() throws Exception {  con.addStatement(painter,RDF.TYPE,RDFS.CLASS);  con.addStatement(painting,RDF.TYPE,RDFS.CLASS);  con.addStatement(picasso,RDF.TYPE,painter,context1);  con.addStatement(guernica,RDF.TYPE,painting,context1);  con.addStatement(picasso,paints,guernica,context1);  con.commit();  con.removeStatements(painting,RDF.TYPE,RDFS.CLASS);  con.commit();  assertEquals("Repository should contain 4 statements in total",4,countAllElements());  assertEquals("Named context should contain 3 statements",3,countContext1Elements());  assertEquals("Statement (Painting, type, Class) should no longer be in the repository",0,countQueryResults("select * where {ex:Painting rdf:type rdfs:Class}"));  con.removeStatements(null,null,null,context1);  con.commit();  assertEquals("Repository should contain 1 statement in total",1,countAllElements());  assertEquals("Named context should be empty",0,countContext1Elements());  con.clear();  con.commit();  assertEquals("Repository should no longer contain any statements",0,countAllElements());}  }
class C{  protected static void compareMembers(@NotNull final Collection<PyPresenterTestMemberEntry> members,@NotNull final Matcher<Iterable<? extends PyPresenterTestMemberEntry>> matcher){  Assert.assertThat("Wrong members or their states",members,matcher);}  }
class C{  private static final String toUrlEncoded(String str){  return str.replaceAll("=","%3D");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  long address(){  return (sdBuffer == null) ? 0L : sdBuffer.address();}  }
class C{  public boolean isSelected(){  return this.isSelected;}  }
class C{  public static void debug(String tag,String text){  try {    Log.d(tag,getFormattedLogLine() + text);  } catch (  OutOfMemoryError error) {    error.printStackTrace();  }catch (  Exception exception) {    exception.printStackTrace();  }}  }
class C{  private final Collection findCRLs(X509CRLStoreSelector crlSelect,List crlStores) throws AnnotatedException {  Set crls=new HashSet();  Iterator iter=crlStores.iterator();  AnnotatedException lastException=null;  boolean foundValidStore=false;  while (iter.hasNext()) {    Object obj=iter.next();    if (obj instanceof X509Store) {      X509Store store=(X509Store)obj;      try {        crls.addAll(store.getMatches(crlSelect));        foundValidStore=true;      } catch (      StoreException e) {        lastException=new AnnotatedException("Exception searching in X.509 CRL store.",e);      }    } else {      CertStore store=(CertStore)obj;      try {        crls.addAll(store.getCRLs(crlSelect));        foundValidStore=true;      } catch (      CertStoreException e) {        lastException=new AnnotatedException("Exception searching in X.509 CRL store.",e);      }    }  }  if (!foundValidStore && lastException != null) {    throw lastException;  }  return crls;}  }
class C{  private void calcDomFronts(){  int szNodes=nodes.size();  for (int b=0; b < szNodes; b++) {    SsaBasicBlock nb=nodes.get(b);    DomInfo nbInfo=domInfos[b];    BitSet pred=nb.getPredecessors();    if (pred.cardinality() > 1) {      for (int i=pred.nextSetBit(0); i >= 0; i=pred.nextSetBit(i + 1)) {        for (int runnerIndex=i; runnerIndex != nbInfo.idom; ) {          if (runnerIndex == -1)           break;          DomInfo runnerInfo=domInfos[runnerIndex];          if (runnerInfo.dominanceFrontiers.has(b)) {            break;          }          runnerInfo.dominanceFrontiers.add(b);          runnerIndex=runnerInfo.idom;        }      }    }  }}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void show(Component origin,int x,int y){  MenuContainer localParent=parent;  if (localParent == null) {    throw new NullPointerException("parent is null");  }  if (!(localParent instanceof Component)) {    throw new IllegalArgumentException("PopupMenus with non-Component parents cannot be shown");  }  Component compParent=(Component)localParent;  if (compParent != origin) {    if (compParent instanceof Container) {      if (!((Container)compParent).isAncestorOf(origin)) {        throw new IllegalArgumentException("origin not in parent's hierarchy");      }    } else {      throw new IllegalArgumentException("origin not in parent's hierarchy");    }  }  if (compParent.getPeer() == null || !compParent.isShowing()) {    throw new RuntimeException("parent not showing on screen");  }  if (peer == null) {    addNotify();  }synchronized (getTreeLock()) {    if (peer != null) {      ((PopupMenuPeer)peer).show(new Event(origin,0,Event.MOUSE_DOWN,x,y,0,0));    }  }}  }
class C{  public final void writeChars(String s) throws IOException {  int len=s.length();  if (len > 0) {    this.size+=len * 2;  }}  }
class C{  public Rectangle open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }  if (this.ret != null) {    return getAbsoluteRectangle(this.monitor,this.ret);  }  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TENUM_LITERAL__NAME:    return getName();case TypesPackage.TENUM_LITERAL__VALUE:  return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  void remove(RowCursor cursor){  boolean isValid;  do {    isValid=true;    try (JournalOutputStream os=openItem()){      os.write(CODE_REMOVE);      cursor.getKey(_buffer,0);      os.write(_buffer,0,getKeyLength());      try {        BitsUtil.writeLong(os,cursor.getVersion());      } catch (      IOException e) {        throw new RuntimeException(e);      }      isValid=os.complete();    }   } while (!isValid);}  }
class C{  public AbstractHttpClient(String baseUrl,RequestHandler requestHandler){  this.baseUrl=baseUrl;  this.requestHandler=requestHandler;}  }
class C{  public static void reset(){  ConcurrentLinkedQueue<Item> old=que.get();  if (old != null)   que.compareAndSet(old,new ConcurrentLinkedQueue<Item>());}  }
class C{  public long toDays(){  return timeUnit.toDays(length);}  }
class C{  private ZoneInfo(){}  }
class C{  private double[] knnDistances(O object){  KNNList knns=knnq.getKNNForObject(object,getKmax() - 1);  double[] distances=new double[getKmax()];  int i=0;  for (DoubleDBIDListIter iter=knns.iter(); iter.valid() && i < getKmax(); iter.advance(), i++) {    distances[i]=iter.doubleValue();  }  return distances;}  }
class C{  public void deleteDepreciationMaster(DepreciationMaster dm){  depreciationMasterDAO.delete(dm);}  }
class C{  public void generateUniform(int numSamples,Callback3d callback){  for (int i=0; i < numSamples; ) {    float x1=rnd.nextFloat() * 2.0f - 1.0f;    float x2=rnd.nextFloat() * 2.0f - 1.0f;    if (x1 * x1 + x2 * x2 >= 1.0f)     continue;    float sqrt=(float)Math.sqrt(1.0 - x1 * x1 - x2 * x2);    float x=2 * x1 * sqrt;    float y=2 * x2 * sqrt;    float z=1.0f - 2.0f * (x1 * x1 + x2 * x2);    callback.onNewSample(x,y,z);    i++;  }}  }
class C{  public boolean isExternal(){  return external;}  }
class C{  public _BuildServiceHostUpdate(final String[] flagStrings){  super(flagStrings);}  }
class C{  private void diffTwoArguments(final boolean recursive) throws ArgumentException, CLCException, LicenseException, MalformedURLException {  final VersionedFileSpec sourceItem=VersionedFileSpec.parse(getFreeArguments()[0],VersionControlConstants.AUTHENTICATED_USER,true);  VersionedFileSpec targetItem=null;  if (getFreeArguments().length == 2) {    targetItem=VersionedFileSpec.parse(getFreeArguments()[1],VersionControlConstants.AUTHENTICATED_USER,true);  } else {    targetItem=sourceItem;  }  VersionSpec[] versionsFromOption=new VersionSpec[0];  Option o=null;  if ((o=findOptionType(OptionVersion.class)) != null) {    versionsFromOption=((OptionVersion)o).getParsedVersionSpecs();  }  if (getFreeArguments().length > 1 && versionsFromOption.length > 0) {    throw new InvalidOptionException(AMBIGUOUS_VERSION_MESSAGE);  }  if (getFreeArguments().length > 1 && (sourceItem.getVersions().length > 1 || targetItem.getVersions().length > 1)) {    throw new InvalidOptionException(AMBIGUOUS_VERSION_MESSAGE);  }  if (sourceItem.getVersions().length + versionsFromOption.length > 2) {    throw new InvalidOptionException(AMBIGUOUS_VERSION_MESSAGE);  }  VersionSpec sourceVersion=null;  VersionSpec targetVersion=null;  if (sourceItem.getVersions().length > 0) {    sourceVersion=sourceItem.getVersions()[0];    if (sourceItem.getVersions().length > 1) {      targetVersion=sourceItem.getVersions()[1];    } else     if (versionsFromOption.length > 0) {      targetVersion=versionsFromOption[0];    }  } else   if (versionsFromOption.length > 0) {    sourceVersion=versionsFromOption[0];    if (versionsFromOption.length > 1) {      targetVersion=versionsFromOption[1];    }  }  if (targetItem.getVersions().length > 1) {    throw new InvalidOptionException(AMBIGUOUS_VERSION_MESSAGE);  }  if (targetItem.getVersions().length == 1) {    targetVersion=targetItem.getVersions()[0];  }  final WorkspaceSpec sourceWorkspaceSpec=getWorkspaceForServerOrLocalPath(sourceItem.getItem(),sourceVersion);  final WorkspaceSpec targetWorkspaceSpec=getWorkspaceForServerOrLocalPath(targetItem.getItem(),targetVersion);  Check.notNull(sourceWorkspaceSpec,"sourceWorkspaceSpec");  Check.notNull(targetWorkspaceSpec,"targetWorkspaceSpec");  if (sourceVersion == null && targetVersion == null && getFreeArguments().length <= 1) {    sourceVersion=new WorkspaceVersionSpec(targetWorkspaceSpec);  }  doConnection();  final Workspace sourceWorkspace=getWorkspace(sourceWorkspaceSpec.getName(),sourceWorkspaceSpec.getOwner());  final Workspace targetWorkspace=getWorkspace(targetWorkspaceSpec.getName(),targetWorkspaceSpec.getOwner());  File sourceTempDirectory=null;  File targetTempDirectory=null;  try {    try {      sourceTempDirectory=TempStorageService.getInstance().createTempDirectory();      targetTempDirectory=TempStorageService.getInstance().createTempDirectory();    } catch (    final IOException e) {      throw new CLCException(e);    }    final DiffItem sourceRootItem=generateRootDiffItem(sourceItem.getItem(),sourceVersion,sourceTempDirectory,sourceWorkspace);    final DiffItem targetRootItem=generateRootDiffItem(targetItem.getItem(),targetVersion,targetTempDirectory,targetWorkspace);    final boolean sourceIsDirectory=sourceRootItem.getItemType() == ItemType.FOLDER;    final boolean targetIsDirectory=targetRootItem.getItemType() == ItemType.FOLDER;    List<DiffItem> sourceList=null;    List<DiffItem> targetList=null;    if (sourceIsDirectory != targetIsDirectory) {      throw new InvalidFreeArgumentException(Messages.getString("CommandDifference.CannotDiffFolderAndFile"));    }    if (recursive && sourceIsDirectory == false) {      throw new InvalidFreeArgumentException(Messages.getString("CommandDifference.RecursiveCannotBeUsedWithFiles"));    }    if (sourceIsDirectory) {      sourceList=generateChildDiffItems(sourceRootItem,sourceWorkspace,recursive,sourceVersion,sourceTempDirectory);    }    if (targetIsDirectory) {      targetList=generateChildDiffItems(targetRootItem,targetWorkspace,recursive,targetVersion,targetTempDirectory);    }    if (sourceIsDirectory == false) {      showDiff(sourceRootItem,targetRootItem);      return;    } else {      final List<DiffItemPair> directoryPairs=new ArrayList<DiffItemPair>(sourceList.size());      for (int i=0; i < sourceList.size(); i++) {        final int indexInSecond=targetList.indexOf(sourceList.get(i));        if (indexInSecond >= 0) {          directoryPairs.add(new DiffItemPair(sourceList.get(i),targetList.get(indexInSecond)));        }      }      generateLocalFileDiffItems(directoryPairs,sourceVersion,targetVersion);      diffFolder(recursive,sourceRootItem,targetRootItem,directoryPairs);      return;    }  }  finally {    if (sourceTempDirectory != null) {      TempStorageService.getInstance().cleanUpItem(sourceTempDirectory);    }    if (targetTempDirectory != null) {      TempStorageService.getInstance().cleanUpItem(targetTempDirectory);    }  }}  }
class C{  public static <T,P>Optional<T> findByPath(TreeDef<T> treeDef,T node,Function<? super T,?> treeMapper,List<P> path,Function<? super P,?> pathMapper){  return findByPath(treeDef,node,path,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String bamToString(File bamFile) throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  try (final SamReader reader=makeSamReader(bamFile)){    try (SAMFileWriter writer=new SAMFileWriterFactory().makeSAMWriter(reader.getFileHeader(),true,baos)){      for (      SAMRecord r : reader) {        writer.addAlignment(r);      }    }   }   return baos.toString();}  }
class C{  @SafeVarargs final public <V>Predicate<V> hasGuard(final V... values){  final ReactiveSeq<Predicate> predicates=ReactiveSeq.of(values).map(null);  return null;}  }
class C{  final double internalNextDouble(double origin,double bound){  double r=(nextLong() >>> 11) * DOUBLE_UNIT;  if (origin < bound) {    r=r * (bound - origin) + origin;    if (r >= bound)     r=Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);  }  return r;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  private IHANotifyReleaseTimeResponse doRunWithBarrierLock() throws Exception {  final IHANotifyReleaseTimeRequest req2=newHANotifyReleaseTimeRequest(serviceId,req.getNewCommitCounter(),req.getNewCommitTime());  didNotifyLeader=true;  final IHANotifyReleaseTimeResponse consensusReleaseTime=leader.notifyEarliestCommitTime(req2);  lock.lock();  try {    if (log.isInfoEnabled())     log.info("Validating consensus releaseTime on follower: consensus=" + consensusReleaseTime);    final TxState txState=getEarliestActiveTx();    final long t2=consensusReleaseTime.getCommitTime();    if (txState != null && txState.getReadsOnCommitTime() < t2) {      throw new AssertionError("The releaseTime consensus would release a commit point with active readers" + ": consensus=" + consensusReleaseTime + ", earliestActiveTx="+ txState);    }    final long newReleaseTime=Math.max(0L,consensusReleaseTime.getCommitTime() - 1);    if (log.isInfoEnabled())     log.info("Advancing releaseTime on follower: " + newReleaseTime);    setReleaseTime(newReleaseTime);  }  finally {    lock.unlock();  }  return consensusReleaseTime;}  }
class C{  private void checkPlatform(){  if (PlatformUtils.isVMwareVapp()) {    log.info("Platform(VApp) is unsupported for ip reconfiguraiton");    throw new UnsupportedOperationException("VApp is unsupported for ip reconfiguration");  }  if (PlatformUtils.hasMultipleSites()) {    log.info("Multiple sites env is unsupported for ip reconfiguraiton");    throw new UnsupportedOperationException("Multiple sites env is unsupported for ip reconfiguration");  }}  }
class C{  static String description(ObjectReference ref){  ReferenceType clazz=ref.referenceType();  long id=ref.uniqueID();  if (clazz == null) {    return toHex(id);  } else {    return MessageOutput.format("object description and hex id",new Object[]{clazz.name(),toHex(id)});  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:59.765 -0500",hash_original_method="6C04521FA8F839DEBC2B7BBE9D95E585",hash_generated_method="BFFBE8223A396DBD3D67310C7959581B") public static boolean shouldCap(Capitalize cap,CharSequence cs,int off){  int i;  char c;  if (cap == Capitalize.NONE) {    return false;  }  if (cap == Capitalize.CHARACTERS) {    return true;  }  return TextUtils.getCapsMode(cs,off,cap == Capitalize.WORDS ? TextUtils.CAP_MODE_WORDS : TextUtils.CAP_MODE_SENTENCES) != 0;}  }
class C{  public HashCode append(final short value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  void invalidate(){  if (isInvalidationRequired()) {    view.postInvalidate();    LOGGER.trace("Called view invalidation");  }  if (isInvalidationDelayedRequired()) {    view.postInvalidateDelayed(getInvalidationDelay());    LOGGER.trace("Called view delayed invalidation. Delay time is: {}",getInvalidationDelay());  }  reset();}  }
class C{  public HighlightedButton(String label){  super(label);  Graphics2D g2d=highlight.createGraphics();  g2d.setComposite(AlphaComposite.Clear);  g2d.fillRect(0,0,HIGHLIGHT_SIZE,HIGHLIGHT_SIZE);  g2d.setComposite(AlphaComposite.SrcOver);  Point2D center=new Point2D.Float((float)HIGHLIGHT_SIZE / 2.0f,(float)HIGHLIGHT_SIZE / 2.0f);  float radius=(float)HIGHLIGHT_SIZE / 2.0f;  float[] dist={0.0f,.85f};  Color[] colors={Color.white,new Color(255,255,255,0)};  RadialGradientPaint paint=new RadialGradientPaint(center,radius,dist,colors);  g2d.setPaint(paint);  g2d.fillOval(0,0,HIGHLIGHT_SIZE,HIGHLIGHT_SIZE);  g2d.dispose();}  }
class C{  @Override public void execute(JsonApiDocument jsonApiDocument,Set<PersistentResource> resources,Optional<MultivaluedMap<String,String>> queryParams){  queryParams.filter(null).ifPresent(null);}  }
class C{  private boolean isQuote(char[] chars,int pos,int len,int quoteStart,int quoteLen){  for (int i=0; i < quoteLen; i++) {    if ((pos + i) >= len || chars[pos + i] != chars[quoteStart + i]) {      return false;    }  }  return true;}  }
class C{  public synchronized final void incrementSecondaryProgressBy(int diff){  setSecondaryProgress(mSecondaryProgress + diff);}  }
class C{  public boolean isCreateCounter(){  Object oo=get_Value(COLUMNNAME_IsCreateCounter);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public double slopeStdErr(){  return Math.sqrt(svar1);}  }
class C{  public boolean hasReminders(){  return super.hasElement(Reminder.KEY);}  }
class C{  public boolean syncSaveConfig(AsyncChannel channel){  Message resultMsg=channel.sendMessageSynchronously(CMD_SAVE_CONFIG);  boolean result=(resultMsg.arg1 != FAILURE);  resultMsg.recycle();  return result;}  }
class C{  public PreAuthTokenSourceTrustAuthenticationProvider(final String... authorizedSourceIps){  this.authorizedSourceIps=new ArrayList<>();  for (  final String ip : authorizedSourceIps) {    this.authorizedSourceIps.add(ip);  }}  }
class C{  public Origin3D(Vec3D o){  origin=o;  xAxis=Vec3D.X_AXIS;  yAxis=Vec3D.Y_AXIS;  zAxis=Vec3D.Z_AXIS;}  }
class C{  public PseudoTcpTestSuite(String s){  super(s);}  }
class C{  public UsedInC methodInC(UsedInC p){  return p;}  }
class C{  private void convertInstance(Instance instance){  Instance inst=null;  if (instance instanceof SparseInstance) {    double[] vals=new double[instance.numValues()];    int[] indices=new int[instance.numValues()];    int num=0;    for (int j=0; j < instance.numValues(); j++) {      if (instance.isMissingSparse(j) && (getInputFormat().classIndex() != instance.index(j)) && (instance.attributeSparse(j).isNominal() || instance.attributeSparse(j).isNumeric())) {      } else {        vals[num]=instance.valueSparse(j);        indices[num]=instance.index(j);        num++;      }    }    if (num == instance.numValues()) {      inst=new SparseInstance(instance.weight(),vals,indices,instance.numAttributes());    } else {      double[] tempVals=new double[num];      int[] tempInd=new int[num];      System.arraycopy(vals,0,tempVals,0,num);      System.arraycopy(indices,0,tempInd,0,num);      inst=new SparseInstance(instance.weight(),tempVals,tempInd,instance.numAttributes());    }  } else {    double[] vals=new double[getInputFormat().numAttributes()];    for (int j=0; j < instance.numAttributes(); j++) {      if (instance.isMissing(j) && (getInputFormat().classIndex() != j) && (getInputFormat().attribute(j).isNominal() || getInputFormat().attribute(j).isNumeric())) {        vals[j]=0.0d;      } else {        vals[j]=instance.value(j);      }    }    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(instance.dataset());  push(inst);}  }
class C{  public void wrapSimpleDereference(PerlCastExpression o){  PsiElement referenceVariable=o.getLastChild();  if (referenceVariable instanceof PsiPerlScalarVariable) {    myFormattingOperations.add(new PerlFormattingSimpleDereferenceWrap(o,(PsiPerlScalarVariable)referenceVariable));  }}  }
class C{  public static void validateEnumRequest(ComputeEnumerateResourceRequest enumRequest){  if (enumRequest.adapterManagementReference == null) {    throw new IllegalArgumentException("adapterManagementReference is required.");  }  if (enumRequest.resourceReference == null) {    throw new IllegalArgumentException("resourceReference is required.");  }  if (enumRequest.enumerationAction == null) {    enumRequest.enumerationAction=EnumerationAction.START;  }}  }
class C{  public synchronized void updateLoad(ServerLocation location,ServerLoad newLoad,List clientIds){  String[] groups=(String[])serverGroupMap.get(location);  if (groups == null) {    return;  }  if (clientIds != null) {    for (Iterator itr=clientIds.iterator(); itr.hasNext(); ) {      cancelClientEstimate((ClientProxyMembershipID)itr.next(),location);    }  }  updateMap(connectionLoadMap,location,newLoad.getConnectionLoad(),newLoad.getLoadPerConnection());  updateMap(queueLoadMap,location,newLoad.getSubscriptionConnectionLoad(),newLoad.getLoadPerSubscriptionConnection());}  }
class C{  public static boolean isReadFromUriPossible(Context ctx,Uri file){  String scheme=file.getScheme();switch (scheme) {case ContentResolver.SCHEME_CONTENT:    InputStream stream=null;  try {    if (PackageManager.PERMISSION_GRANTED == ctx.checkUriPermission(file,Process.myPid(),Process.myUid(),Intent.FLAG_GRANT_READ_URI_PERMISSION)) {      return true;    }    stream=ctx.getContentResolver().openInputStream(file);    stream.read();    return true;  } catch (  SecurityException e) {    sLogger.error("Failed to read from uri :" + file,e);    return false;  }catch (  IOException e) {    if (sLogger.isActivated()) {      sLogger.debug("Failed to read from uri :" + file + ", Message="+ e.getMessage());    }    return false;  } finally {    CloseableUtils.tryToClose(stream);  }case ContentResolver.SCHEME_FILE:String path=file.getPath();if (path == null) {sLogger.error("Failed to read from uri :".concat(file.toString()));return false;}try {return new File(path).canRead();} catch (SecurityException e) {sLogger.error("Failed to read from uri :" + file,e);return false;}default :throw new IllegalArgumentException("Unsupported URI scheme '" + scheme + "'!");}}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public RangeRecord(RandomAccessFile raf) throws IOException {  start=raf.readUnsignedShort();  end=raf.readUnsignedShort();  startCoverageIndex=raf.readUnsignedShort();}  }
class C{  public static void assertNotNull(final Object object,final String message){  if (object == null) {    throw new NullPointerException(message == null ? "Object is null" : message);  }}  }
class C{  public boolean rowUpdated() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public void updatePosition(Particle particle,long elapsedTime){  Vector3f speed=particle.getSpeed();  float delta=elapsedTime / 1000.0f;  float dx=speed.x * delta;  float dy=speed.y * delta;  float dz=speed.z * delta;  Vector3f pos=particle.getPosition();  particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz);}  }
class C{  private void handleEnumerationRequest(BlockStorageEnumerationContext aws){switch (aws.stage) {case CLIENT:    getAWSAsyncClient(aws,AWSStorageEnumerationStages.ENUMERATE);  break;case ENUMERATE:switch (aws.computeEnumerationRequest.enumerationAction) {case START:  logInfo("Started storage enumeration for %s",aws.computeEnumerationRequest.resourceReference);aws.enumerationStartTimeInMicros=Utils.getNowMicrosUtc();aws.computeEnumerationRequest.enumerationAction=EnumerationAction.REFRESH;handleEnumerationRequest(aws);break;case REFRESH:processRefreshSubStages(aws);break;case STOP:logInfo("Stopping storage enumeration for %s",aws.computeEnumerationRequest.resourceReference);setOperationDurationStat(aws.awsAdapterOperation);aws.awsAdapterOperation.complete();break;default :break;}break;case ERROR:AdapterUtils.sendFailurePatchToEnumerationTask(this,aws.computeEnumerationRequest.taskReference,aws.error);break;default :logSevere("Unknown AWS enumeration stage %s ",aws.stage.toString());aws.error=new Exception("Unknown AWS enumeration stage %s");aws.stage=AWSStorageEnumerationStages.ERROR;handleEnumerationRequest(aws);break;}}  }
class C{  private static void installWebFacet(IFacetedProject facetedProject,IProgressMonitor monitor) throws CoreException {  if (facetedProject.hasProjectFacet(WebFacetUtils.WEB_25)) {    return;  }  IDataModel webModel=DataModelFactory.createDataModel(new WebFacetInstallDataModelProvider());  webModel.setBooleanProperty(IJ2EEModuleFacetInstallDataModelProperties.ADD_TO_EAR,false);  webModel.setBooleanProperty(IJ2EEFacetInstallDataModelProperties.GENERATE_DD,false);  webModel.setBooleanProperty(IWebFacetInstallDataModelProperties.INSTALL_WEB_LIBRARY,false);  webModel.setStringProperty(IWebFacetInstallDataModelProperties.CONFIG_FOLDER,"src/main/webapp");  facetedProject.installProjectFacet(WebFacetUtils.WEB_25,webModel,monitor);}  }
class C{  @Override public String toString(){  return getUsername();}  }
class C{  static String plurales(final String s,final AtomicInteger i){  return i == null ? UNKNOWN + " " + s+ "es" : i.intValue() != 1 ? i + " " + s+ "es" : "one " + s;}  }
class C{  public boolean equalsIgnoreCase(String anotherString){  return str().equalsIgnoreCase(anotherString);}  }
class C{  public int subtreeDepth() throws UnsupportedOperationException {  DNSName dnsName=null;  try {    dnsName=new DNSName(host);  } catch (  IOException ioe) {    throw new UnsupportedOperationException(ioe.getMessage());  }  return dnsName.subtreeDepth();}  }
class C{  public boolean addPluginPassiveScanner(PluginPassiveScanner pluginPassiveScanner){  if (pluginPassiveScanner == null) {    throw new IllegalArgumentException("Parameter pluginPassiveScanner must not be null.");  }  return addPluginPassiveScannerImpl(pluginPassiveScanner);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  private void computeDen(double shape,int population){  den=0.0;  for (int j=1; j <= population; j++) {    den+=1 / Math.pow(j,shape);  }}  }
class C{  private void storeInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE),index);}  }
class C{  public void runTransformThread(){  ThreadControllerWrapper.runThread(this,-1);}  }
class C{  public void put(byte[] buf) throws BufferOverflowException {  put(buf,0,buf.length);}  }
class C{  public GeronimoExistingLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(ServletPropertySet.PORT,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);}  }
class C{  private boolean destroySkey(String alias) throws PKCS11Exception, KeyStoreException {  Session session=null;  try {    session=token.getOpSession();    THandle h=getTokenObject(session,ATTR_CLASS_SKEY,null,alias);    if (h.type != ATTR_CLASS_SKEY) {      if (debug != null) {        debug.println("destroySkey did not find secret key " + "with CKA_LABEL [" + alias + "]");      }      return false;    }    token.p11.C_DestroyObject(session.id(),h.handle);    return true;  }  finally {    token.releaseSession(session);  }}  }
class C{  public boolean startScoUsingVirtualVoiceCall(BluetoothDevice device){  if (DBG)   log("startScoUsingVirtualVoiceCall()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.startScoUsingVirtualVoiceCall(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  protected GuardImpl(){  super();}  }
class C{  public boolean removeKey(double key){  int i=indexOfKey(key);  if (i < 0)   return false;  this.state[i]=REMOVED;  this.distinct--;  if (this.distinct < this.lowWaterMark) {    int newCapacity=chooseShrinkCapacity(this.distinct,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public String modify() throws SaaSApplicationException {  if (subscriptionsHelper.validateSubscriptionStatus(model.getSubscription(),getSubscriptionDetailsService())) {    ui.handleError(null,ERROR_SUBSCRIPTION_NOT_ACCESSIBLE,model.getSubscription().getSubscriptionId());    return OUTCOME_SUBSCRIPTION_NOT_AVAILABLE;  }  model.getSubscription().setOwnerId(model.getSelectedOwner() != null ? model.getSelectedOwner().getUserId() : null);  updateSelectedUnit();  VOSubscriptionDetails changedSubscription=getSubscriptionService().modifySubscription(model.getSubscription(),getSubscriptionParameterForModification(),subscriptionsHelper.getVoUdaFromUdaRows(model.getSubscriptionUdaRows(),model.getOrganizationUdaRows()));  if (subscriptionNotSuspended(changedSubscription)) {    SubscriptionStatus status=changedSubscription.getStatus();    if (status.isPendingUpdOrSuspendedUpd()) {      model.setShowStateWarning(true);      model.setUsersTabDisabled(true);      model.setCfgTabDisabled(true);      model.setUpgTabDisabled(true);      Object[] params=new Object[]{JSFUtils.getText(STATUS_PREFIX + status.name(),null)};      model.setStateWarning(JSFUtils.getText(SUBSCRIPTION_STATE_WARNING,params));      model.setReadOnlyParams(true);      model.setAsyncModified(true);      model.setConfigurationChanged(false);      model.setConfigDirty(false);      ui.handle(INFO_SUBSCRIPTION_ASYNC_SAVED,model.getSubscription().getSubscriptionId());    } else {      refreshModel(changedSubscription);      ui.handle(INFO_SUBSCRIPTION_SAVED,model.getSubscription().getSubscriptionId());    }  } else {    ui.handleProgress();    disableTabsForWaitingApproval(true);  }  return OUTCOME_SUCCESS;}  }
class C{  public CubeDesc createCubeDesc(CubeDesc cubeDesc) throws IOException {  if (cubeDesc.getUuid() == null || cubeDesc.getName() == null)   throw new IllegalArgumentException();  if (cubeDescMap.containsKey(cubeDesc.getName()))   throw new IllegalArgumentException("CubeDesc '" + cubeDesc.getName() + "' already exists");  try {    cubeDesc.init(config);  } catch (  Exception e) {    logger.warn("Broken cube desc " + cubeDesc,e);    cubeDesc.addError(e.getMessage());  }  if (!cubeDesc.getError().isEmpty()) {    return cubeDesc;  }  CubeMetadataValidator validator=new CubeMetadataValidator();  ValidateContext context=validator.validate(cubeDesc);  if (!context.ifPass()) {    return cubeDesc;  }  cubeDesc.setSignature(cubeDesc.calculateSignature());  String path=cubeDesc.getResourcePath();  getStore().putResource(path,cubeDesc,CUBE_DESC_SERIALIZER);  cubeDescMap.put(cubeDesc.getName(),cubeDesc);  return cubeDesc;}  }
class C{  private void openVLI() throws FormatException, IOException {  String realfname=filename;  boolean endwithdot=realfname.endsWith(".");  String fopen;  if (endwithdot) {    StringBuffer newf=new StringBuffer(realfname.substring(0,realfname.length() - 2));    fopen=newf.append("x.").toString();  } else {    StringBuffer newf=new StringBuffer(realfname.substring(0,realfname.length() - 1));    fopen=newf.append("x").toString();  }  vli=new DcwVariableLengthIndexFile(new BinaryBufferedFile(fopen),byteorder);}  }
class C{  @Override @SuppressWarnings("unchecked") public void modify(Object element,String property,Object value){  if (!(element instanceof TreeItem)) {    return;  }  Object o=((TreeItem)element).getData();  if (!(o instanceof NodeWrapper)) {    return;  }  NodeWrapper<NodeDisplayProperty> prop=(NodeWrapper<NodeDisplayProperty>)o;  NodeDisplayProperty p=prop.getContent();  GraphNode node=prop.getNode();  if (property.equals(COL_VISIBLE) && (value instanceof Boolean)) {    p.setVisible((Boolean)value);  } else   if (property.equals(COL_SELECTED) && (value instanceof Boolean)) {    selectNode(node,(Boolean)value);  } else   if (property.equals(COL_SIZE) && (value instanceof Integer)) {    p.setSize(Size.values()[(Integer)value]);  } else   if (property.equals(COL_COLOR) && (value instanceof String)) {    Color newColor=StringUtils.stringToColor((String)value);    p.setColor(newColor);  }  getEditor().setNodeProperty(node,p);  nodeTreeView.getTreeViewer().update(o,new String[]{property});}  }
class C{  public boolean cs_demand(){  return soot.PhaseOptions.getBoolean(options,"cs-demand");}  }
class C{  private void updateCollForRcptCancel(final EgDemand demand,final BillReceiptInfo billRcptInfo){  LOGGER.debug("reconcileCollForRcptCancel : Updating Collection Started For Demand : " + demand + " with BillReceiptInfo - "+ billRcptInfo);  cancelBill(Long.valueOf(billRcptInfo.getBillReferenceNum()));  if (demand.getAmtCollected() != null)   demand.setAmtCollected(demand.getAmtCollected().subtract(billRcptInfo.getTotalAmount()));  updateDmdDetForRcptCancel(demand,billRcptInfo);  LOGGER.debug("reconcileCollForRcptCancel : Updating Collection finished For Demand : " + demand);}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener l){  m_Support.addPropertyChangeListener(l);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.PARAMETERS__PARAMS:    return params != null;}return super.eIsSet(featureID);}  }
class C{  private ShortCutUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public boolean isValidUtf8(){  int i, j, n, b, e=0;  for (i=m_offset, j=m_offset + m_length, n=0; i < j; ++n) {    int c=m_bytes[i++];    if (c >= 0)     continue;    if (((c & 0xE0) == 0xC0) && i < j && (m_bytes[i++] & 0xC0) == 0x80)     continue;    if (((c & 0xF0) == 0xE0) && i + 1 < j && (m_bytes[i++] & 0xC0) == 0x80 && (m_bytes[i++] & 0xC0) == 0x80)     continue;    return false;  }  return true;}  }
class C{  public static GregorianCalendar rawBytesToCalendar(byte[] value){  if (value.length == 6) {    return rawBytesToCalendar(value,0);  }  return createCalendar();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.451 -0500",hash_original_method="967233BE7821B2A8956B876F99751025",hash_generated_method="1A1CFEB064023FAEA3BDDED8D5C52AA2") protected ReplyToParser(Lexer lexer){  super(lexer);}  }
class C{  public void play(){  if (isInitialized()) {    resumeSystemTimeUs=System.nanoTime() / 1000;    audioTrack.play();  }}  }
class C{  public void dispose(){  if (swingTmrIplQuery != null) {    swingTmrIplQuery.stop();  }  if (swingTmrDuplexInfoQuery != null) {    swingTmrDuplexInfoQuery.stop();  }  if (memo.getLnTrafficController() != null) {    memo.getLnTrafficController().removeLocoNetListener(~0,this);  }}  }
class C{  public static Address fromLong(long address){  return null;}  }
class C{  protected void calculateIdealPoint(){  idealPoint=new double[numberOfObjectives];  Arrays.fill(idealPoint,Double.POSITIVE_INFINITY);  for (  Solution solution : this) {    if (solution.getNumberOfObjectives() != numberOfObjectives) {      throw new FrameworkException("incorrect number of objectives");    }    for (int i=0; i < numberOfObjectives; i++) {      idealPoint[i]=Math.min(idealPoint[i],solution.getObjective(i));    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentFragment docFrag;  Node aNode;  boolean hasChild;  Document ownerDocument;  DocumentType docType;  String system;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  docFrag=aNewDoc.createDocumentFragment();  aNode=doc.importNode(docFrag,false);  hasChild=aNode.hasChildNodes();  assertFalse("hasChild",hasChild);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("system",null,null,null,"staffNS.dtd",null,null,null,null,system);}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  m_propSupport.removePropertyChangeListener(listener);}  }
class C{  public FingerprintFilter(TokenStream input){  this(input,DEFAULT_MAX_OUTPUT_TOKEN_SIZE,DEFAULT_SEPARATOR);}  }
class C{  private void notifyListeners(int oldRowIndex,int rowIndex){  DataModelListener[] dataModelListeners=getDataModelListeners();  if (oldRowIndex != rowIndex && dataModelListeners != null) {    DataModelEvent dataModelEvent=new DataModelEvent(this,rowIndex,getRowDataOrNull());    for (    DataModelListener dataModelListener : dataModelListeners) {      if (dataModelListener != null) {        dataModelListener.rowSelected(dataModelEvent);      }    }  }}  }
class C{  public static boolean compileClass(Class<?> classToCompile){  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.498 -0500",hash_original_method="4654D488024911B4CA912D2186B5898B",hash_generated_method="343275828C51915E5F1AFC6F2DBFD430") public String typeName(){  return typeName;}  }
class C{  public boolean more() throws JSONException {  next();  if (end()) {    return false;  }  back();  return true;}  }
class C{  public boolean forEachValue(TObjectProcedure<V> procedure){  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(unwrapNull(values[i]))) {      return false;    }  }  return true;}  }
class C{  public double computeAverageLocal(int timeSeries[]){  initialise();  addObservations(timeSeries);  return computeAverageLocalOfObservations();}  }
class C{  public ThreadLocal(){}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static short toShort(byte[] bytes){  return toShort(bytes,0);}  }
class C{  public static String readFileToString(String fileName,String charset) throws IOException {  Reader input=new InputStreamReader(new FileInputStream(fileName),charset);  StringWriter output=new StringWriter();  char[] buf=new char[4096];  int n;  while ((n=input.read(buf)) != -1)   output.write(buf,0,n);  return output.toString();}  }
class C{  private void doFlush(byte[][] toFlush,int len) throws IOException {  int bidx=0, widx=0;  ByteBuffer writevBufs[]=new ByteBuffer[2 * WRITEV_SIZE];  while (true) {    if (widx == writevBufs.length) {      channel.write(writevBufs);      widx=0;    }    if (bidx == len) {      break;    }    writevBufs[widx]=ByteBuffer.wrap(toFlush[bidx]);    writevBufs[widx + 1]=newlineBuf;    bidx++;    widx+=2;  }  if (widx > 0) {    channel.write(writevBufs,0,widx);  }}  }
class C{  public void addShort(int o,short x,int d){  if (force_defaults || x != d) {    addShort(x);    slot(o);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void SendBackKeyToKeypad(){  for (  InputDevice idev : events.m_Devs) {    if (idev.getOpen() && idev.getName().contains("keypad")) {      idev.SendKey(158,true);      idev.SendKey(158,false);    }  }}  }
class C{  private void initPanel(final StandardDialog parentDialog){  parentDialog.setTitle("Edit " + subnetwork.getClass().getSimpleName());  add(new JLabel(subnetwork.getLongDescription()));  Action helpAction;  helpAction=new ShowHelpAction("Pages/Network/subnetwork.html");  parentDialog.addButton(new JButton(helpAction));}  }
class C{  public Builder(String baseSolrUrl){  this.baseSolrUrl=baseSolrUrl;}  }
class C{  public void reading(int tenant){  starting(Operation.READ,tenant);}  }
class C{  public int describeContents(){  return 0;}  }
class C{  private boolean supportingDeviceHasDefaultNamingConvention(String deviceName,boolean isDistributed){  try {    List<String> claimedVolumeNames=new ArrayList<String>();    if (!isDistributed) {      int startIndex=VPlexApiConstants.DEVICE_PREFIX.length();      claimedVolumeNames.add(deviceName.substring(startIndex));    } else {      String distVolPrefix=VPlexApiConstants.DIST_DEVICE_PREFIX + VPlexApiConstants.DIST_DEVICE_NAME_DELIM;      int startIndex=distVolPrefix.length();      String supportingDeviceNameNoPrefix=deviceName.substring(startIndex);      claimedVolumeNames.addAll(Arrays.asList(supportingDeviceNameNoPrefix.split(VPlexApiConstants.DIST_DEVICE_NAME_DELIM)));    }    return VPlexApiUtils.deviceHasDefaultNamingConvention(deviceName,isDistributed,claimedVolumeNames);  } catch (  Exception e) {    s_logger.info("Device {} does not conform to default naming convention: {}",deviceName,e.getMessage());    return false;  }}  }
class C{  @Override public void onClick(View view){  int id=view.getId();  if (id == R.id.btn_send) {    if (listener != null) {      String s=editText.getText().toString();      editText.setText("");      listener.onSendBtnClicked(s);    }  } else   if (id == R.id.btn_set_mode_voice) {    setModeVoice();    showNormalFaceImage();    if (listener != null)     listener.onToggleVoiceBtnClicked();  } else   if (id == R.id.btn_set_mode_keyboard) {    setModeKeyboard();    showNormalFaceImage();    if (listener != null)     listener.onToggleVoiceBtnClicked();  } else   if (id == R.id.btn_more) {    buttonSetModeVoice.setVisibility(VISIBLE);    buttonSetModeKeyboard.setVisibility(GONE);    edittext_layout.setVisibility(VISIBLE);    buttonPressToSpeak.setVisibility(GONE);    showNormalFaceImage();    if (listener != null)     listener.onToggleExtendClicked();  } else   if (id == R.id.et_sendmessage) {    edittext_layout.setBackgroundResource(R.drawable.ease_input_bar_bg_active);    faceNormal.setVisibility(VISIBLE);    faceChecked.setVisibility(INVISIBLE);    if (listener != null)     listener.onEditTextClicked();  } else   if (id == R.id.rl_face) {    toggleFaceImage();    if (listener != null) {      listener.onToggleEmojiconClicked();    }  } else {  }}  }
class C{  private static boolean isArgument(TreePath path,ExpressionTree argumentTree){  argumentTree=TreeUtils.skipParens(argumentTree);  if (argumentTree == path.getLeaf()) {    return true;  } else   if (argumentTree.getKind() == Kind.CONDITIONAL_EXPRESSION) {    ConditionalExpressionTree conditionalExpressionTree=(ConditionalExpressionTree)argumentTree;    return isArgument(path,conditionalExpressionTree.getTrueExpression()) || isArgument(path,conditionalExpressionTree.getFalseExpression());  }  return false;}  }
class C{  private static void writeInputStreamToOutputStream(InputStream inputStream,OutputStream outputStream){  try {    try {      final byte[] buffer=new byte[1024];      int read;      while ((read=inputStream.read(buffer)) != -1) {        outputStream.write(buffer,0,read);      }      outputStream.flush();    } catch (    final Exception e) {      e.printStackTrace();    } finally {      outputStream.close();      inputStream.close();    }  } catch (  final Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean skipToKeyframeBefore(long timeUs){  long nextOffset=infoQueue.skipToKeyframeBefore(timeUs);  if (nextOffset == -1) {    return false;  }  dropDownstreamTo(nextOffset);  return true;}  }
class C{  public VisorNodeDataCollectorJob(VisorNodeDataCollectorTaskArg arg,boolean debug){  super(arg,debug);}  }
class C{  public SVGBuilder readFromInputStream(InputStream svgData){  this.data=svgData;  return this;}  }
class C{  public static void waitForGC(){  model.waitForGC();}  }
class C{  public String forceGetValueAsString(){  if (mValue == null) {    return "";  } else   if (mValue instanceof byte[]) {    if (mDataType == TYPE_ASCII) {      return new String((byte[])mValue,US_ASCII);    } else {      return Arrays.toString((byte[])mValue);    }  } else   if (mValue instanceof long[]) {    if (((long[])mValue).length == 1) {      return String.valueOf(((long[])mValue)[0]);    } else {      return Arrays.toString((long[])mValue);    }  } else   if (mValue instanceof Object[]) {    if (((Object[])mValue).length == 1) {      Object val=((Object[])mValue)[0];      if (val == null) {        return "";      } else {        return val.toString();      }    } else {      return Arrays.toString((Object[])mValue);    }  } else {    return mValue.toString();  }}  }
class C{  public Builder consumerSecret(String consumerSecret){  this.consumerSecret=checkNotNull(consumerSecret,"consumerSecret == null");  return this;}  }
class C{  public AdaGrad(){}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  UserDao.createTable(db,ifNotExists);  MessageDao.createTable(db,ifNotExists);}  }
class C{  public Point3d(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public void createDatabaseEntitiesForGetS3KeyPrefixTesting(boolean createBusinessObjectDataEntity){  List<SchemaColumn> partitionColumns=schemaColumnDaoTestHelper.getTestPartitionColumns();  String partitionKey=partitionColumns.get(0).getName();  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.FORMAT_DESCRIPTION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,partitionKey,AbstractServiceTest.NO_PARTITION_KEY_GROUP,AbstractServiceTest.NO_ATTRIBUTES,AbstractServiceTest.SCHEMA_DELIMITER_PIPE,AbstractServiceTest.SCHEMA_ESCAPE_CHARACTER_BACKSLASH,AbstractServiceTest.SCHEMA_NULL_VALUE_BACKSLASH_N,schemaColumnDaoTestHelper.getTestSchemaColumns(),partitionColumns);  storageDaoTestHelper.createStorageEntity(AbstractServiceTest.STORAGE_NAME,StoragePlatformEntity.S3,configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KEY_PREFIX_VELOCITY_TEMPLATE),AbstractServiceTest.S3_KEY_PREFIX_VELOCITY_TEMPLATE);  if (createBusinessObjectDataEntity) {    businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(businessObjectFormatEntity,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,AbstractServiceTest.BDATA_STATUS);  }}  }
class C{  void updateMnemonicBindingX(AbstractButton b){  int m=b.getMnemonic();  if (m != 0) {    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);    if (map == null) {      map=new ComponentInputMapUIResource(b);      SwingUtilities.replaceUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW,map);    }    map.clear();    String className=b.getClass().getName();    int mask=InputEvent.ALT_MASK;    if (b instanceof JCheckBox || className.indexOf("VButton") != -1)     mask=InputEvent.SHIFT_MASK + InputEvent.CTRL_MASK;    map.put(KeyStroke.getKeyStroke(m,mask,false),"pressed");    map.put(KeyStroke.getKeyStroke(m,mask,true),"released");    map.put(KeyStroke.getKeyStroke(m,0,true),"released");  } else {    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);    if (map != null)     map.clear();  }}  }
class C{  public static BlockAmount readFrom(final Deserializer deserializer,final String label){  return new BlockAmount(deserializer.readLong(label));}  }
class C{  public void addParameterAnnotations(CstMethodRef method,AnnotationsList list){  annotationsDirectory.addParameterAnnotations(method,list);}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public float width(char c){  if (c == 32)   return width('i');  int cc=index(c);  if (cc == -1)   return 0;  return ((float)glyphs[cc].setWidth / (float)size);}  }
class C{  private void loadSpellsIntoSlots(Player player){  final List<String> slotsSpells=Arrays.asList("spells");  for (  String slotName : slotsSpells) {    RPSlot slot=player.getSlot(slotName);    List<RPObject> objects=new LinkedList<RPObject>();    for (    final RPObject objectInSlot : slot) {      objects.add(objectInSlot);    }    slot.clear();    SpellTransformer transformer=new SpellTransformer();    for (    RPObject o : objects) {      Spell s=(Spell)transformer.transform(o);      if (s != null) {        slot.add(s);      }    }  }}  }
class C{  protected Message(){}  }
class C{  public String[] toSRT(){  return new FormatSRT().toFile(this);}  }
class C{  @Override public synchronized void acceptDataSet(VisualizableErrorEvent e){  if (m_env == null) {    m_env=Environment.getSystemWide();  }  if (!GraphicsEnvironment.isHeadless()) {    if (m_visPanel == null) {      m_visPanel=new VisualizePanel();    }    m_masterPlot=e.getDataSet();    try {      m_visPanel.setMasterPlot(m_masterPlot);    } catch (    Exception ex) {      System.err.println("Problem setting up visualization (ModelPerformanceChart)");      ex.printStackTrace();    }    m_visPanel.validate();    m_visPanel.repaint();  } else {    m_headlessEvents=new ArrayList<EventObject>();    m_headlessEvents.add(e);  }  if (m_imageListeners.size() > 0 && !m_processingHeadlessEvents) {    setupOffscreenRenderer();    m_offscreenPlotData=new ArrayList<Instances>();    Instances predictedI=e.getDataSet().getPlotInstances();    if (predictedI.classAttribute().isNominal()) {      ArrayList<Attribute> atts=new ArrayList<Attribute>();      for (int i=0; i < predictedI.numAttributes(); i++) {        atts.add((Attribute)predictedI.attribute(i).copy());      }      atts.add(new Attribute("@@size@@"));      Instances newInsts=new Instances(predictedI.relationName(),atts,predictedI.numInstances());      newInsts.setClassIndex(predictedI.classIndex());      for (int i=0; i < predictedI.numInstances(); i++) {        double[] vals=new double[newInsts.numAttributes()];        for (int j=0; j < predictedI.numAttributes(); j++) {          vals[j]=predictedI.instance(i).value(j);        }        vals[vals.length - 1]=2;        Instance ni=new DenseInstance(1.0,vals);        newInsts.add(ni);      }      Instances[] classes=new Instances[newInsts.numClasses()];      for (int i=0; i < newInsts.numClasses(); i++) {        classes[i]=new Instances(newInsts,0);        classes[i].setRelationName(newInsts.classAttribute().value(i));      }      Instances errors=new Instances(newInsts,0);      int actualClass=newInsts.classIndex();      for (int i=0; i < newInsts.numInstances(); i++) {        Instance current=newInsts.instance(i);        classes[(int)current.classValue()].add((Instance)current.copy());        if (current.value(actualClass) != current.value(actualClass - 1)) {          Instance toAdd=(Instance)current.copy();          toAdd.setValue(toAdd.numAttributes() - 1,5);          double actualClassV=toAdd.value(actualClass);          double predictedClassV=toAdd.value(actualClass - 1);          toAdd.setValue(actualClass,predictedClassV);          toAdd.setValue(actualClass - 1,actualClassV);          errors.add(toAdd);        }      }      errors.setRelationName("Errors");      m_offscreenPlotData.add(errors);      for (      Instances classe : classes) {        m_offscreenPlotData.add(classe);      }    } else {      ArrayList<Attribute> atts=new ArrayList<Attribute>();      for (int i=0; i < predictedI.numAttributes(); i++) {        atts.add((Attribute)predictedI.attribute(i).copy());      }      atts.add(new Attribute("@@size@@"));      Instances newInsts=new Instances(predictedI.relationName(),atts,predictedI.numInstances());      int[] shapeSizes=e.getDataSet().getShapeSize();      for (int i=0; i < predictedI.numInstances(); i++) {        double[] vals=new double[newInsts.numAttributes()];        for (int j=0; j < predictedI.numAttributes(); j++) {          vals[j]=predictedI.instance(i).value(j);        }        vals[vals.length - 1]=shapeSizes[i];        Instance ni=new DenseInstance(1.0,vals);        newInsts.add(ni);      }      newInsts.setRelationName(predictedI.classAttribute().name());      m_offscreenPlotData.add(newInsts);    }    List<String> options=new ArrayList<String>();    String additional="-color=" + predictedI.classAttribute().name() + ",-hasErrors";    if (m_additionalOptions != null && m_additionalOptions.length() > 0) {      additional+="," + m_additionalOptions;      try {        additional=m_env.substitute(additional);      } catch (      Exception ex) {      }    }    String[] optionsParts=additional.split(",");    for (    String p : optionsParts) {      options.add(p.trim());    }    options.add("-shapeSize=@@size@@");    String xAxis=m_xAxis;    try {      xAxis=m_env.substitute(xAxis);    } catch (    Exception ex) {    }    String yAxis=m_yAxis;    try {      yAxis=m_env.substitute(yAxis);    } catch (    Exception ex) {    }    String width=m_width;    String height=m_height;    int defWidth=500;    int defHeight=400;    try {      width=m_env.substitute(width);      height=m_env.substitute(height);      defWidth=Integer.parseInt(width);      defHeight=Integer.parseInt(height);    } catch (    Exception ex) {    }    try {      BufferedImage osi=m_offscreenRenderer.renderXYScatterPlot(defWidth,defHeight,m_offscreenPlotData,xAxis,yAxis,options);      ImageEvent ie=new ImageEvent(this,osi);      notifyImageListeners(ie);    } catch (    Exception e1) {      e1.printStackTrace();    }  }}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String[] remove(String[] buffer,int offset,int length){  int len2=buffer.length - length;  String temp[]=new String[len2];  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  public static void polygon(double[] x,double[] y){  int N=x.length;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < N; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.draw(path);  draw();}  }
class C{  public void writeHomeWorkHomePlansFile(Network network,DgCommodities commodities,String outputDirectory,String filename,double startTimeSecMorningPeak,double endTimeSecMorningPeak){  this.network=network;  this.population=ScenarioUtils.createScenario(ConfigUtils.createConfig()).getPopulation();  this.startTimeSecMorningPeak=startTimeSecMorningPeak;  this.endTimeSecMorningPeak=endTimeSecMorningPeak;  for (  DgCommodity com : commodities.getCommodities().values()) {    for (int i=0; i < com.getFlow(); i++) {      Person person=population.getFactory().createPerson(Id.create(com.getId().toString() + i,Person.class));      Plan plan=population.getFactory().createPlan();      plan.addActivity(createHomeAct(com,false));      plan.addLeg(population.getFactory().createLeg(TransportMode.car));      plan.addActivity(createWorkAct(com));      plan.addLeg(population.getFactory().createLeg(TransportMode.car));      plan.addActivity(createHomeAct(com,true));      person.addPlan(plan);      population.addPerson(person);    }  }  String[] fileAttributes=filename.split("_");  String outputFile=outputDirectory + "all_day_plans_from_morning_peak_ks_commodities_minFlow" + fileAttributes[2]+ ".xml";  MatsimWriter popWriter=new PopulationWriter(population,this.network);  popWriter.write(outputFile);  log.info("plans file of simplified population written to " + outputFile);}  }
class C{  public List<operators> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<operators> list=new ArrayList<operators>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public static String layoutCompoundLabel(FontMetrics fm,String[] text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  if (icon != null) {    iconR.width=icon.getIconWidth();    iconR.height=icon.getIconHeight();  } else {    iconR.width=iconR.height=0;  }  boolean textIsEmpty=(text == null) || (text.length == 0) || (text.length == 1 && ((text[0] == null) || "".equals(text[0])));  String rettext="";  if (textIsEmpty) {    textR.width=textR.height=0;  } else {    Dimension dim=computeMultiLineDimension(fm,text);    textR.width=dim.width;    textR.height=dim.height;  }  int gap=(textIsEmpty || (icon == null)) ? 0 : textIconGap;  if (!textIsEmpty) {    int availTextWidth;    if (horizontalTextPosition == CENTER) {      availTextWidth=viewR.width;    } else {      availTextWidth=viewR.width - (iconR.width + gap);    }    if (textR.width > availTextWidth && text.length == 1) {      String clipString="...";      int totalWidth=SwingUtilities.computeStringWidth(fm,clipString);      int nChars;      for (nChars=0; nChars < text[0].length(); nChars++) {        totalWidth+=fm.charWidth(text[0].charAt(nChars));        if (totalWidth > availTextWidth) {          break;        }      }      rettext=text[0].substring(0,nChars) + clipString;      textR.width=SwingUtilities.computeStringWidth(fm,rettext);    }  }  if (verticalTextPosition == TOP) {    if (horizontalTextPosition != CENTER) {      textR.y=0;    } else {      textR.y=-(textR.height + gap);    }  } else   if (verticalTextPosition == CENTER) {    textR.y=(iconR.height / 2) - (textR.height / 2);  } else {    if (horizontalTextPosition != CENTER) {      textR.y=iconR.height - textR.height;    } else {      textR.y=(iconR.height + gap);    }  }  if (horizontalTextPosition == LEFT) {    textR.x=-(textR.width + gap);  } else   if (horizontalTextPosition == CENTER) {    textR.x=(iconR.width / 2) - (textR.width / 2);  } else {    textR.x=(iconR.width + gap);  }  int labelR_x=Math.min(iconR.x,textR.x);  int labelR_width=Math.max(iconR.x + iconR.width,textR.x + textR.width) - labelR_x;  int labelR_y=Math.min(iconR.y,textR.y);  int labelR_height=Math.max(iconR.y + iconR.height,textR.y + textR.height) - labelR_y;  int dx, dy;  if (verticalAlignment == TOP) {    dy=viewR.y - labelR_y;  } else   if (verticalAlignment == CENTER) {    dy=(viewR.y + (viewR.height / 2)) - (labelR_y + (labelR_height / 2));  } else {    dy=(viewR.y + viewR.height) - (labelR_y + labelR_height);  }  if (horizontalAlignment == LEFT) {    dx=viewR.x - labelR_x;  } else   if (horizontalAlignment == RIGHT) {    dx=(viewR.x + viewR.width) - (labelR_x + labelR_width);  } else {    dx=(viewR.x + (viewR.width / 2)) - (labelR_x + (labelR_width / 2));  }  textR.x+=dx;  textR.y+=dy;  iconR.x+=dx;  iconR.y+=dy;  return rettext;}  }
class C{  public SearchParameters(String search,boolean regExp){  m_RegExp=regExp;  if (search == null)   search="";  if (!m_RegExp) {    m_SearchString=search.toLowerCase();    m_Pattern=null;  } else {    m_SearchString=search;    m_Pattern=Pattern.compile(search);  }  try {    m_Integer=Integer.parseInt(m_SearchString);  } catch (  Exception e) {    m_Integer=null;  }  try {    m_Double=Double.parseDouble(m_SearchString);  } catch (  Exception e) {    m_Double=null;  }}  }
class C{  public void forcePut(E e) throws InterruptedException {  size.incrementAndGet();  try {    queue.put(e);  } catch (  InterruptedException ie) {    size.decrementAndGet();    throw ie;  }}  }
class C{  public static void writeInfoFlowSummaryToFile(SecuritySpecModel securitySpecModel,String app_ROOT_DIR){  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + INFO_FLOW_SUMMARY_FILE_NAME);    Map<String,Map<String,Set<MethodModel>>> infoFlowSummaryMap=securitySpecModel.getInfoFlowSummaryMap();    for (    String source : infoFlowSummaryMap.keySet()) {      Map<String,Set<MethodModel>> sinkMap=infoFlowSummaryMap.get(source);      for (      String sink : sinkMap.keySet()) {        fw.write(source + " -> " + sink+ "\n");        Set<MethodModel> methods=sinkMap.get(sink);        for (        MethodModel method : methods) {          fw.write("  " + method + "\n");        }      }    }    fw.close();  } catch (  IOException e) {    logger.error("Error writing info flow summary to file.");    droidsafe.main.Main.exit(1);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.994 -0500",hash_original_method="6D6FE21BC02E4EEDE50A66A758AADBC3",hash_generated_method="6D6FE21BC02E4EEDE50A66A758AADBC3") ScheduledFutureTask(Runnable r,V result,long ns){  super(r,result);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public static BufferedInputStream blob2stream(Blob value) throws SQLException {  if (value == null) {    return null;  }  BufferedInputStream bufferedInStream=new BufferedInputStream(value.getBinaryStream());  return bufferedInStream;}  }
class C{  protected void clone(BST<E> clone,TreeNode<E> root){  if (root == null)   return;  clone.insert(root.element);  clone(clone,root.left);  clone(clone,root.right);}  }
class C{  protected AccessibleTypeElementImpl(){  super();}  }
class C{  public symbol symbol_after_dot(){  return _symbol_after_dot;}  }
class C{  private void popoutDisposed(Channel channel){  if (channel == null) {    return;  }  dialogs.remove(channel);  if (defaultChannel != null) {    tabs.removeTab(defaultChannel);    defaultChannel=null;  }  tabs.addTab(channel);  tabs.setSelectedComponent(channel);  gui.updateState(true);}  }
class C{  public int wiggleMaxLength(int[] nums){  if (nums == null || nums.length == 0) {    return 0;  }  int inc=1;  int dec=1;  for (int i=1; i < nums.length; i++) {    if (nums[i] > nums[i - 1]) {      inc=dec + 1;    } else     if (nums[i] < nums[i - 1]) {      dec=inc + 1;    }  }  return Math.max(inc,dec);}  }
class C{  private void buildParkAndRideAreas(List<Way> parkAndRideWays){  VertexStore.Vertex v=this.vertexStore.getCursor();  EdgeStore.Edge e=this.edgeStore.getCursor();  parkRideLocationsMap=new TIntObjectHashMap<>();  for (  Way way : parkAndRideWays) {    Coordinate[] coords=LongStream.of(way.nodes).mapToObj(null).toArray(null);    LineString g=GeometryUtils.geometryFactory.createLineString(coords);    Coordinate centroid=g.getCentroid().getCoordinate();    int centerVertex=vertexStore.addVertex(centroid.y,centroid.x);    v.seek(centerVertex);    v.setFlag(VertexStore.VertexFlag.PARK_AND_RIDE);    ParkRideParking parkRideParking=new ParkRideParking(centerVertex,centroid.y,centroid.x,way);    parkRideLocationsMap.put(centerVertex,parkRideParking);    Envelope env=g.getEnvelopeInternal();    TIntSet nearbyEdges=this.spatialIndex.query(VertexStore.envelopeToFixed(env));    nearbyEdges.forEach(null);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.944 -0500",hash_original_method="966CE83C4778D118E9F221736109C3B2",hash_generated_method="CCFF9C8F64E2E93D46D30C8FC4C6B355") public ViewPropertyAnimator scaleYBy(float value){  animatePropertyBy(SCALE_Y,value);  return this;}  }
class C{  @CheckReturnValue @Nonnull static public String twoHexFromInt(int val){  StringBuilder sb=new StringBuilder();  sb.append(HEX_CHARS[(val & 0xF0) >> 4]);  sb.append(HEX_CHARS[val & 0x0F]);  return sb.toString();}  }
class C{  private void createCache() throws Exception {  if (this.distributedSystem == null) {    this.distributedSystem=InternalDistributedSystem.getConnectedInstance();  }  this.cache=CacheFactory.create(this.distributedSystem);}  }
class C{  public EntitySetupDescriptor(final int x,final int y){  this.x=x;  this.y=y;  attributes=new HashMap<String,String>();  className=null;}  }
class C{  protected String paramString(){  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  String paintBorderString=(paintBorder ? "true" : "false");  String progressStringString=(progressString != null ? progressString : "");  String paintStringString=(paintString ? "true" : "false");  String indeterminateString=(indeterminate ? "true" : "false");  return super.paramString() + ",orientation=" + orientationString+ ",paintBorder="+ paintBorderString+ ",paintString="+ paintStringString+ ",progressString="+ progressStringString+ ",indeterminateString="+ indeterminateString;}  }
class C{  private boolean matches(String str,String ptrn){  return str != null && (ptrn == null || str.toUpperCase().matches(ptrn.toUpperCase().replace("%",".*").replace("_",".")));}  }
class C{  public boolean check(int number){  if (number >= capacity || number < 0) {    return false;  }  int[] loc=locate(number);  return (assigned[loc[0]] & (1 << loc[1])) == 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private void writeResponseHeaderToRecordHeader(Response response,Record.Header header){  for (  Map.Entry<String,List<String>> entry : response.getStringHeaders().entrySet()) {    if (!entry.getValue().isEmpty()) {      String firstValue=entry.getValue().get(0);      header.setAttribute(conf.headerAttributePrefix + entry.getKey(),firstValue);    }  }}  }
class C{  public boolean isUI(String name){  byte b=((Byte)resourceTypes.get(name)).byteValue();  return b == MAGIC_UI;}  }
class C{  private void handleEndOfStream(State state,InnerState innerState) throws StopRequest {  mInfo.mCurrentBytes=innerState.mBytesSoFar;  mDB.updateDownload(mInfo);  boolean lengthMismatched=(innerState.mHeaderContentLength != null) && (innerState.mBytesSoFar != Integer.parseInt(innerState.mHeaderContentLength));  if (lengthMismatched) {    if (cannotResume(innerState)) {      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,"mismatched content length");    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"closed socket before end of file");    }  }}  }
class C{  public void testRandomStrings() throws Exception {  PersianAnalyzer a=new PersianAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public void testCase17(){  byte aBytes[]={0};  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={1,2,3,4,5,6,7};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void main(String[] args){  TestRunner.run(TransformerTest.class);}  }
class C{  protected void checkForClickInExpandControl(TreePath path,int mouseX,int mouseY){  if (isLocationInExpandControl(path,mouseX,mouseY)) {    handleExpandControlClick(path,mouseX,mouseY);  }}  }
class C{  public T casePostValidation(PostValidation object){  return null;}  }
class C{  public static void writeHistogram(TDoubleDoubleHashMap distr,String filename) throws FileNotFoundException, IOException {  BufferedWriter aWriter=IOUtils.getBufferedWriter(filename);  aWriter.write("bin\tcount");  aWriter.newLine();  double[] keys=distr.keys();  Arrays.sort(keys);  for (  double key : keys) {    aWriter.write(String.valueOf(key));    aWriter.write("\t");    aWriter.write(String.valueOf(distr.get(key)));    aWriter.newLine();  }  aWriter.close();}  }
class C{  public boolean supportsGroupBy() throws SQLException {  return true;}  }
class C{  @Override public void draw(Canvas canvas){}  }
class C{  @Override public String toString(){  return "textureReference[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + ","+ "normalized="+ normalized+ ","+ "filterMode="+ cudaTextureFilterMode.stringFor(filterMode)+ ","+ "addressMode=["+ cudaTextureAddressMode.stringFor(addressMode[0])+ ","+ cudaTextureAddressMode.stringFor(addressMode[1])+ ","+ cudaTextureAddressMode.stringFor(addressMode[2])+ "]"+ ","+ "channelDesc="+ channelDesc+ ","+ "sRGB="+ sRGB+ ","+ "maxAnisotropy="+ maxAnisotropy+ ","+ "mipmapFilterMode="+ cudaTextureFilterMode.stringFor(mipmapFilterMode)+ ","+ "mipmapLevelBias="+ mipmapLevelBias+ ","+ "minMipmapLevelClamp="+ minMipmapLevelClamp+ ","+ "maxMipmapLevelClamp="+ maxMipmapLevelClamp+ "]";}  }
class C{  IfdData(int ifdId){  mIfdId=ifdId;}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  public static void deleteDir(File dir){  if (!dir.isDirectory()) {    System.out.println("Util::deleteDir(): " + dir + " is not a directory!");    return;  }  File[] files=dir.listFiles();  for (int i=0; i < files.length; i++) {    if (files[i].isDirectory())     deleteDir(files[i]); else     files[i].delete();  }  dir.delete();}  }
class C{  private void optionList(OptionFormat of) throws ParserException, IOException {  while (true) {    if (lookahead.ttype != StreamTokenizer.TT_WORD) {      return;    }    match(COLUMN);    match(OPENBLOCK);    ColumnFormat cf=new ColumnFormat(columnCount++);    statementList(cf);    match(CLOSEBLOCK);    cf.validate();    of.addSubFormat(cf);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.367 -0500",hash_original_method="23592451CB50AFA841274AC3732C91A0",hash_generated_method="C93A647BB0F30DB0291E96149968A997") @SuppressWarnings("unchecked") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  @Override public void replaceSelection(String content){  replaceSelection(content,true);}  }
class C{  public void startLoading(){  __loading_thread=new Thread(__loading_runnable);  __loading_thread.start();  __loading_thread.setPriority(Thread.NORM_PRIORITY);}  }
class C{  public RegistersReply(final int packetId,final int errorCode,final RegisterValues values){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(values,"IE01070: Register values argument can not be null");  } else {    if (values != null) {      throw new IllegalArgumentException("IE01071: Register values argument must be null");    }  }  this.values=values;}  }
class C{  public void updateMapping(String virtual,String physical,String archive,String primary,short inspect,boolean toplevel,int listenerMode,int listenerType,boolean readOnly) throws ExpressionException, SecurityException {  checkWriteAccess();  _updateMapping(virtual,physical,archive,primary,inspect,toplevel,listenerMode,listenerType,readOnly);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (varStmtKeyword: ");  result.append(varStmtKeyword);  result.append(')');  return result.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapinuseattributeerr.class,args);}  }
class C{  public void logError(String message,Throwable cause){  getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,message,cause));}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  return m_MetaClassifier.distributionForInstance(metaInstance(instance));}  }
class C{  public NotificationChain basicSetGuard(Guard newGuard,NotificationChain msgs){  Guard oldGuard=guard;  guard=newGuard;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.REACTION_TRIGGER__GUARD,oldGuard,newGuard);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public UnsupportedEncodingException(java.lang.String s){}  }
class C{  @Override public int compareTo(FirewallRule rule){  return this.priority - rule.priority;}  }
class C{  public void drawHeader(RecyclerView recyclerView,Canvas canvas,View header,Rect offset){  canvas.save();  if (recyclerView.getLayoutManager().getClipToPadding()) {    initClipRectForHeader(mTempRect,recyclerView,header);    canvas.clipRect(mTempRect);  }  canvas.translate(offset.left,offset.top);  header.draw(canvas);  canvas.restore();}  }
class C{  public CMSSignedData generate(String eContentType,CMSProcessable content,boolean encapsulate,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return generate(eContentType,content,encapsulate,CMSUtils.getProvider(sigProvider),true);}  }
class C{  public static String[] splitAndTrim(String str,String delims){  return split(str,delims,true);}  }
class C{  private void spawnWork(final String child){  if (_consumer == null) {    return;  }  final String itemPath=ZKPaths.makePath(_queuePath,child);  byte[] data=null;  try {    data=_zkClient.getData().forPath(itemPath);  } catch (  Exception e) {    _log.warn("Problem seen while processing queue item which might be already handled by other workers. ",e);    final String lockPath=ZKPaths.makePath(_lockPath,child);    try {      _log.info("delete lock {}",lockPath);      _zkClient.delete().guaranteed().inBackground().forPath(lockPath);    } catch (    KeeperException.NoNodeException ex) {      _log.warn("The lock {} has been removed e={}",lockPath,ex);    }catch (    Exception ex) {      _log.warn("Problem deleting lock item: {} e={}",lockPath,ex);    }    data=null;  }  if (data != null) {    final T item=_serializer.deserialize(data);    _consumer.startConsumeItem(_queueName,child,item);  }}  }
class C{  public DTDInputStream(InputStream in,DTD dtd) throws IOException {  super(new InputStreamReader(in));  this.dtd=dtd;  this.ch=in.read();}  }
class C{  @SuppressWarnings("unchecked") private List<RDOSummary> evaluatePriceModels(RDOSummary summaryTemplate,Node subscriptionNode,PlatformUser user,Long paymentPreviewEndTime) throws SQLException, XPathExpressionException {  List<RDOSummary> summaryList=new ArrayList<RDOSummary>();  TimeZone timeZoneServer=TimeZone.getDefault();  Node priceModelsNode=XMLConverter.getLastChildNode(subscriptionNode,BillingResultXMLTags.PRICE_MODELS_NODE_NAME);  NodeList childNodes=priceModelsNode.getChildNodes();  for (int index=0; index < childNodes.getLength(); index++) {    Node priceModelNode=childNodes.item(index);    if (BillingResultXMLTags.PRICE_MODEL_NODE_NAME.equals(priceModelNode.getNodeName())) {      BigDecimal subscrFeesSubtotal=BigDecimal.ZERO;      BigDecimal userFeesSubtotal=BigDecimal.ZERO;      RDOSummary summary=createSummary(summaryTemplate);      summaryList.add(summary);      if (index == 0) {        summary.setEntryNr(sequence.nextValue());      }      RDOPriceModel priceModel=new RDOPriceModel();      summary.setPriceModel(priceModel);      priceModel.setParentEntryNr(summary.getEntryNr());      priceModel.setEntryNr(sequence.nextValue());      priceModel.setId(XMLConverter.getStringAttValue(priceModelNode,BillingResultXMLTags.ID_ATTRIBUTE_NAME));      String serviceName=getServiceName(priceModel.getId());      priceModel.setServiceName(serviceName);      summary.setServiceName(serviceName);      RDOSubscriptionFees subscriptionFees=priceModel.getSubscriptionFees();      subscriptionFees.setParentEntryNr(priceModel.getEntryNr());      subscriptionFees.setEntryNr(sequence.nextValue());      subscriptionFees.setServerTimeZone(DateConverter.convertToUTCString(readTimeZoneFromBillingDetails(priceModelNode)));      RDOUserFees userFees=priceModel.getUserFees();      userFees.setParentEntryNr(priceModel.getEntryNr());      userFees.setEntryNr(sequence.nextValue());      PriceModelType priceModelType=evaluateCalculationMode(priceModelNode);      subscriptionFees.setCalculationMode(priceModelType.name());      evaluateUsagePeriod(paymentPreviewEndTime,timeZoneServer,priceModelNode,summary,priceModel);      evaluateEventFees(priceModelNode,priceModel);      subscrFeesSubtotal=evaluatePriceModelPeriodFee(priceModelNode,subscriptionFees);      userFeesSubtotal=evaluatePriceModelUserAssignmentCosts(priceModelNode,userFees);      evaluateOneTimeFee(priceModelNode,priceModel);      final ListPriceResult parSubscrFees=getSubscriptionParameter(priceModelNode,subscriptionFees.getEntryNr());      subscriptionFees.setParameters((List<RDOParameter>)parSubscrFees.list);      subscrFeesSubtotal=subscrFeesSubtotal.add(parSubscrFees.total);      subscriptionFees.setSubtotalAmount(ValueRounder.roundSubtotal(formatter,subscrFeesSubtotal));      ListPriceResult parUserFees=getUserFeesParameter(priceModelNode,formatter,userFees,userFees.getEntryNr());      userFees.setParameters((List<RDOParameter>)parUserFees.list);      userFeesSubtotal=userFeesSubtotal.add(parUserFees.total);      userFees.setSubtotalAmount(ValueRounder.roundSubtotal(formatter,userFeesSubtotal));      evaluatePriceModelCostsNode(priceModelNode,priceModel);      evaluateOverallCosts(summary,user);      if (userFees.isHideRecurringCharge() && userFees.getRoles().isEmpty() && userFees.getParameters().isEmpty()) {        userFees.setHideUserFees(true);      }      if (subscriptionFees.isHideRecurringCharge() && subscriptionFees.getParameters().isEmpty()) {        subscriptionFees.setHideSubscriptionFees(true);      }    }  }  return summaryList;}  }
class C{  static public void logFilePaths(){  FileUtilSupport.getDefault().logFilePaths();}  }
class C{  public Analyzer showAggregate(){  showAggregate=true;  return this;}  }
class C{  private <IN,ACCU,OUT>WindowedOperatorImpl<IN,ACCU,OUT> createWindowedOperator(Accumulation<IN,ACCU,OUT> accumulationFn){  WindowedOperatorImpl<IN,ACCU,OUT> windowedOperator=new WindowedOperatorImpl<>();  windowedOperator.setDataStorage(new InMemoryWindowedStorage<ACCU>());  windowedOperator.setRetractionStorage(new InMemoryWindowedStorage<OUT>());  windowedOperator.setWindowStateStorage(new InMemoryWindowedStorage<WindowState>());  if (windowOption != null) {    windowedOperator.setWindowOption(windowOption);  }  if (triggerOption != null) {    windowedOperator.setTriggerOption(triggerOption);  }  if (allowedLateness != null) {    windowedOperator.setAllowedLateness(allowedLateness);  }  windowedOperator.setAccumulation(accumulationFn);  return windowedOperator;}  }
class C{  public static <T,P,A,R extends Collection<A>>R collectWith(Iterable<T> iterable,Function2<? super T,? super P,? extends A> function,P parameter,R targetCollection){  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).collectWith(function,parameter,targetCollection);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.collectWith((ArrayList<T>)iterable,function,parameter,targetCollection);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.collectWith((List<T>)iterable,function,parameter,targetCollection);  }  if (iterable != null) {    return IterableIterate.collectWith(iterable,function,parameter,targetCollection);  }  throw new IllegalArgumentException("Cannot perform a collectWith on null");}  }
class C{  public static void main(String... args) throws Throwable {  AtomicInteger failures=new AtomicInteger();  vertx.eventBus().consumer("ping-address",null);  Failsafe.with(retryPolicy.copy().withDelay(1,TimeUnit.SECONDS)).with(scheduler).runAsync(null);  Thread.sleep(5000);}  }
class C{  private ZyTextNodeBuilder(){}  }
class C{  public Info_Column(String colHeader,String colSQL,Class colClass,String IDcolSQL){  this(colHeader,colSQL,colClass,true,false,IDcolSQL);}  }
class C{  protected void writeZip64CentralDirectory() throws IOException {  if (zip64Mode == Zip64Mode.Never) {    return;  }  if (!hasUsedZip64 && (cdOffset >= ZIP64_MAGIC || cdLength >= ZIP64_MAGIC || entries.size() >= ZIP64_MAGIC_SHORT)) {    hasUsedZip64=true;  }  if (!hasUsedZip64) {    return;  }  long offset=written;  writeOut(ZIP64_EOCD_SIG);  writeOut(ZipEightByteInteger.getBytes(SHORT + SHORT + WORD+ WORD+ DWORD+ DWORD+ DWORD+ DWORD));  writeOut(ZipShort.getBytes(ZIP64_MIN_VERSION));  writeOut(ZipShort.getBytes(ZIP64_MIN_VERSION));  writeOut(LZERO);  writeOut(LZERO);  byte[] num=ZipEightByteInteger.getBytes(entries.size());  writeOut(num);  writeOut(num);  writeOut(ZipEightByteInteger.getBytes(cdLength));  writeOut(ZipEightByteInteger.getBytes(cdOffset));  writeOut(ZIP64_EOCD_LOC_SIG);  writeOut(LZERO);  writeOut(ZipEightByteInteger.getBytes(offset));  writeOut(ONE);}  }
class C{  private String commandInfo(){  return "Number of entries: " + getNumEntries() + " / Used categories: "+ getCategories();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public KeyValueNode(K aKey,V aValue){  key=aKey;  value=aValue;}  }
class C{  @Override public boolean isVisible(){  return (getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  public static boolean isInnerClass(final Class<?> cls){  if (cls == null) {    return false;  }  return cls.getName().indexOf(ClassUtils.INNER_CLASS_SEPARATOR_CHAR) >= 0;}  }
class C{  public WalkingIterator(PrefixResolver nscontext){  super(nscontext);}  }
class C{  static final public String binary(byte what){  return binary(what,8);}  }
class C{  public File createPDF(File file){  ReportEngine re=ReportEngine.get(getCtx(),ReportEngine.MANUFACTURING_ORDER,getPP_Order_ID());  if (re == null)   return null;  return re.getPDF(file);}  }
class C{  private void searchforInitiatorExport(String initiatorId,List<SearchResultResourceRep> resRepLists,boolean selfOnly,boolean authorized){  URIQueryResultList egUris=new URIQueryResultList();  Set<URI> resultUris=new HashSet<URI>();  List<ExportGroup> exportGroups=new ArrayList<ExportGroup>();  if (selfOnly) {    exportGroups=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,ExportGroup.class,AlternateIdConstraint.Factory.getConstraint(ExportGroup.class,"initiators",initiatorId));  } else {    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportGroupInitiatorConstraint(initiatorId.toString()),egUris);    for (    URI eUri : egUris) {      resultUris.add(eUri);    }    exportGroups=_dbClient.queryObject(ExportGroup.class,resultUris,true);  }  buildExportGroupSearchResponse(exportGroups,resRepLists,selfOnly,ExportGroupType.Initiator.name(),authorized);}  }
class C{  public DiscretizationParamsEditor(){}  }
class C{  public final void invert(){  invertGeneral(this);}  }
class C{  public DispatchingEventReplayer<T> inDescendingCausalOrder(){  return inDescendingOrder(causalOrderComparator);}  }
class C{  private synchronized void enumerate(Hashtable<String,Object> h){  if (defaults != null) {    defaults.enumerate(h);  }  for (Enumeration<?> e=keys(); e.hasMoreElements(); ) {    String key=(String)e.nextElement();    h.put(key,get(key));  }}  }
class C{  public static void createOneSupportedCountry(DataService mgr) throws NonUniqueBusinessKeyException {  findOrCreate(mgr,Locale.GERMANY.getCountry());}  }
class C{  void disableRemoteWindowScale(){  remoteTcp.disableWindowScale();}  }
class C{  public void refreshBitmapShader(){  shader=new BitmapShader(Bitmap.createScaledBitmap(image,canvasSize,canvasSize,false),Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);}  }
class C{  @Inline public void copyRootValuesTo(TraceLocal trace){  while (!rootLocations.isEmpty()) {    ObjectReference object=rootLocations.pop().loadObjectReference();    if (!object.isNull()) {      trace.traceObject(object,true);    }  }  while (!values.isEmpty()) {    trace.traceObject(values.pop(),true);  }}  }
class C{  public static void dump(String message){  if (Options.dump)   out.println(message);}  }
class C{  public String[] formatRangeOfAddresses(String start,int numberToAdd,String prefix){  numberToAdd=1;  String range[]=new String[numberToAdd];  for (int x=0; x < numberToAdd; x++) {    range[x]=getSystemPrefix() + "T" + start;  }  return range;}  }
class C{  public byte bmRequestType(){  return this.controlSetup.get(0);}  }
class C{  public void dump(Object what) throws IOException {  if (what instanceof Dumpable) {    Dumpable dumpable=(Dumpable)what;    ArrayList<Object> subcomponents=new ArrayList<>();    dumpable.addSubcomponents(subcomponents);    dump(dumpable.dumpHeading(),subcomponents.toArray());  } else {    indent();    writer.write(String.valueOf(what));    writer.write("\n");  }}  }
class C{  public String trimToSize(String str,int maxStringLength){  if (str == null)   return null;  if (str.length() > maxStringLength) {    StringBuilder sb=new StringBuilder(str);    sb.setLength(maxStringLength);    str=sb.toString();  }  return str;}  }
class C{  public static AuthorizationData parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag)) {    return null;  }  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new AuthorizationData(subDer);  }}  }
class C{  @Override public boolean isCheckEnabled(){  return checkEnabled;}  }
class C{  public synchronized TradeOrder persist(final TradeOrder transientInstance){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    transientInstance.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());    if (null == transientInstance.getIdTradeOrder()) {      if (null != transientInstance.getTradePosition()) {        if (null != transientInstance.getTradePosition().getIdTradePosition()) {          entityManager.find(TradePosition.class,transientInstance.getTradePosition().getIdTradePosition());          TradePosition instance=entityManager.merge(transientInstance.getTradePosition());          transientInstance.setTradePosition(instance);        }      }      entityManager.persist(transientInstance);      entityManager.getTransaction().commit();      return transientInstance;    } else {      TradeOrder instance=entityManager.merge(transientInstance);      entityManager.getTransaction().commit();      transientInstance.setVersion(instance.getVersion());      return instance;    }  } catch (  Exception re) {    EntityManagerHelper.logError("ERROR saving TradeOrder Msg: " + re.getCause().getMessage(),re);    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public void clearDirty(){  dirtysteps=Integer.MIN_VALUE + 2;  for (int i=0; i < dirty.length; i++) {    dirty[i]=Integer.MIN_VALUE;  }}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public void write(String file) throws Exception {  write(new File(file));}  }
class C{  private void sendErrorMessageToUI(String valuetosend){  Log.e("medtronicCGMService",valuetosend);  log.error("Send Error Message to UI " + valuetosend);  if (mClients != null && mClients.size() > 0) {    for (int i=mClients.size() - 1; i >= 0; i--) {      try {        Message mSend=null;        mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_ERROR_RECEIVED);        Bundle b=new Bundle();        b.putString("data",valuetosend);        mSend.setData(b);        mClients.get(i).send(mSend);      } catch (      RemoteException e) {        mClients.remove(i);      }    }  }}  }
class C{  public int compareTo(ShortBuffer otherBuffer){  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();  int thisPos=position;  int otherPos=otherBuffer.position;  short thisByte, otherByte;  while (compareRemaining > 0) {    thisByte=get(thisPos);    otherByte=otherBuffer.get(otherPos);    if (thisByte != otherByte) {      return thisByte < otherByte ? -1 : 1;    }    thisPos++;    otherPos++;    compareRemaining--;  }  return remaining() - otherBuffer.remaining();}  }
class C{  protected BCSChild createBCSChild(Object child,Object proxyPeer){  return new BCSChild(child,proxyPeer);}  }
class C{  @Override public void onTouchImageSection(int sectionIndex,EasyImageSection imageSection){  this.imageFloatingTv.setVisibility(View.INVISIBLE);  this.imageFloatingIv.setVisibility(View.VISIBLE);switch (imageSection.imageType) {case EasyImageSection.CIRCLE:    this.imageFloatingIv.setImageType(EasyFloatingImageView.CIRCLE);  break;case EasyImageSection.ROUND:this.imageFloatingIv.setImageType(EasyFloatingImageView.ROUND);break;}GlideUtils.displayNative(this.imageFloatingIv,imageSection.resId);this.scrollToPosition(this.adapter.getPositionForSection(sectionIndex));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Map<String,Object> createPostalAddress(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_CREATE");  if (result.size() > 0)   return result;  String contactMechTypeId="POSTAL_ADDRESS";  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_id_generation_failure",locale));  }  GenericValue tempContactMech=delegator.makeValue("ContactMech",UtilMisc.toMap("contactMechId",newCmId,"contactMechTypeId",contactMechTypeId));  toBeStored.add(tempContactMech);  if (!partyId.equals("_NA_")) {    toBeStored.add(delegator.makeValue("PartyContactMech",UtilMisc.toMap("partyId",partyId,"contactMechId",newCmId,"fromDate",now,"roleTypeId",context.get("roleTypeId"),"allowSolicitation",context.get("allowSolicitation"),"extension",context.get("extension"))));  }  GenericValue newAddr=delegator.makeValue("PostalAddress");  newAddr.set("contactMechId",newCmId);  newAddr.set("toName",context.get("toName"));  newAddr.set("attnName",context.get("attnName"));  newAddr.set("address1",context.get("address1"));  newAddr.set("address2",context.get("address2"));  newAddr.set("directions",context.get("directions"));  newAddr.set("city",context.get("city"));  newAddr.set("postalCode",context.get("postalCode"));  newAddr.set("postalCodeExt",context.get("postalCodeExt"));  newAddr.set("stateProvinceGeoId",context.get("stateProvinceGeoId"));  newAddr.set("countryGeoId",context.get("countryGeoId"));  newAddr.set("postalCodeGeoId",context.get("postalCodeGeoId"));  toBeStored.add(newAddr);  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("contactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  void testSite(){  final IWebPoster poster=(IWebPoster)getBean();  final ProgressWindow progressWindow=new ProgressWindow(MainFrame.getInstance(),poster.getTestMessage());  progressWindow.setVisible(true);  final Runnable runnable=null;  final Thread t=new Thread(runnable);  t.start();}  }
class C{  public void put(E e) throws InterruptedException {  if (e == null)   throw new NullPointerException();  int c=-1;  Node<E> node=new Node<E>(e);  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      notFull.await();    }    enqueue(node);    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();}  }
class C{  private final byte[] le(float f){  return le(Float.floatToRawIntBits(f));}  }
class C{  public void sendFile(File file,String userName,String password,String sshPort,String address,String destPathFile) throws CheckException {  logger.debug("Send file " + file.getAbsolutePath() + " To Host "+ userName+ "@+"+ address+ ":"+ destPathFile);  FileInputStream fileInputStream=null;  Channel channel=null;  try {    String dockerManagerIP=address.substring(0,address.length() - 5);    channel=this.getSession(userName,password,dockerManagerIP,sshPort).openChannel("sftp");    channel.connect();    fileInputStream=new FileInputStream(file);    ChannelSftp sftpChannel=(ChannelSftp)channel;    sftpChannel.put(fileInputStream,destPathFile + file.getName(),ChannelSftp.OVERWRITE);    logger.debug("File send correctly");  } catch (  IOException|SftpException|JSchException e) {    e.printStackTrace();    StringBuilder msgError=new StringBuilder(512);    msgError.append(", ").append("file=").append(file);    msgError.append(", ").append("destPathFile+file.getName()=").append(destPathFile + file.getName());    msgError.append(", ").append(e);    throw new CheckException("Error during file copying : " + msgError);  } finally {    try {      if (fileInputStream != null) {        fileInputStream.close();      }    } catch (    Exception ignore) {    }    try {      if (channel != null) {        channel.disconnect();      }    } catch (    Exception ignore) {    }  }}  }
class C{  boolean mediaTypeMatches(String mediaTypes){  if ((mediaTypes == null) || (mediaTypes.equals(""))) {    return true;  }  int comma=mediaTypes.indexOf(',');  while (comma != -1) {    if (isMediaTypeSupported(mediaTypes.substring(0,comma).trim())) {      return true;    }    mediaTypes=mediaTypes.substring(comma + 1);    comma=mediaTypes.indexOf(',');  }  return isMediaTypeSupported(mediaTypes.trim());}  }
class C{  public void deleteShardStore(String reason,ShardLock lock,Settings indexSettings) throws IOException {  ShardId shardId=lock.getShardId();  logger.trace("{} deleting shard reason [{}]",shardId,reason);  nodeEnv.deleteShardDirectoryUnderLock(lock,indexSettings);}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  return true;}  }
class C{  public final byte[] asQuotedUTF8(){  byte[] result=_quotedUTF8Ref;  if (result == null) {    result=JsonStringEncoder.getInstance().quoteAsUTF8(_value);    _quotedUTF8Ref=result;  }  return result;}  }
class C{  public void increaseVisibleOccurrences(){  if (this != empty) {    visibleOccurrences++;  }}  }
class C{  public Modulus(){  super("basic.modulus",2,Ontology.NUMERICAL);}  }
class C{  public StreamImpl openReadImpl() throws IOException {  HttpStreamWrapper stream=HttpStream.openRead(this);  stream.setSSL(true);  return stream;}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  private void labelIsolatedNodes(){  for (Iterator ni=nodes.iterator(); ni.hasNext(); ) {    Node n=(Node)ni.next();    Label label=n.getLabel();    Assert.isTrue(label.getGeometryCount() > 0,"node with empty label found");    if (n.isIsolated()) {      if (label.isNull(0))       labelIsolatedNode(n,0); else       labelIsolatedNode(n,1);    }  }}  }
class C{  protected BallNode buildTreeMiddleOut(int startIdx,int endIdx) throws Exception {  Instance pivot;  double radius;  Vector<TempNode> anchors;  int numInsts=endIdx - startIdx + 1;  int numAnchors=(int)Math.round(Math.sqrt(numInsts));  if (numAnchors > 1) {    pivot=BallNode.calcCentroidPivot(startIdx,endIdx,m_InstList,m_Instances);    radius=BallNode.calcRadius(startIdx,endIdx,m_InstList,m_Instances,pivot,m_DistanceFunction);    if (numInsts <= m_MaxInstancesInLeaf || (rootRadius == 0 ? true : radius / rootRadius < m_MaxRelLeafRadius)) {      BallNode node=new BallNode(startIdx,endIdx,m_NumNodes,pivot,radius);      return node;    }    anchors=new Vector<TempNode>(numAnchors);    createAnchorsHierarchy(anchors,numAnchors,startIdx,endIdx);    BallNode node=mergeNodes(anchors,startIdx,endIdx);    buildLeavesMiddleOut(node);    return node;  } else {    BallNode node=new BallNode(startIdx,endIdx,m_NumNodes,(pivot=BallNode.calcCentroidPivot(startIdx,endIdx,m_InstList,m_Instances)),BallNode.calcRadius(startIdx,endIdx,m_InstList,m_Instances,pivot,m_DistanceFunction));    return node;  }}  }
class C{  @Override public void execute(){  try {    for (    final FileSet fileset : filesets) {      final DirectoryScanner ds=fileset.getDirectoryScanner(getProject());      final String[] includedFiles=ds.getIncludedFiles();      for (      final String filename : includedFiles) {        String signature=sign(ds.getBasedir().getAbsolutePath() + File.separator + filename);        System.out.println("file-signature." + filename + "="+ signature);      }    }  } catch (  final Exception e) {    throw new BuildException(e);  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=NonPowerAware.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="thr";  String vmSelectionPolicy="mmt";  String parameter="0.8";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  private Widget packWidget(int dpi,WidgetPreviewLoader previewLoader,IconCache iconCache,ComponentName provider){  final AppWidgetProviderInfo info=findAppWidgetProviderInfo(provider);  Widget widget=new Widget();  widget.provider=provider.flattenToShortString();  widget.label=info.label;  widget.configure=info.configure != null;  if (info.icon != 0) {    widget.icon=new Resource();    Drawable fullResIcon=iconCache.getFullResIcon(provider.getPackageName(),info.icon);    Bitmap icon=Utilities.createIconBitmap(fullResIcon,mContext);    ByteArrayOutputStream os=new ByteArrayOutputStream();    if (icon.compress(IMAGE_FORMAT,IMAGE_COMPRESSION_QUALITY,os)) {      widget.icon.data=os.toByteArray();      widget.icon.dpi=dpi;    }  }  if (info.previewImage != 0) {    widget.preview=new Resource();    Bitmap preview=previewLoader.generateWidgetPreview(info,null);    ByteArrayOutputStream os=new ByteArrayOutputStream();    if (preview.compress(IMAGE_FORMAT,IMAGE_COMPRESSION_QUALITY,os)) {      widget.preview.data=os.toByteArray();      widget.preview.dpi=dpi;    }  }  return widget;}  }
class C{  private int calculateExpressionBasedUpdateSize(UpdateItemRequest request){  if (request == null || request.getUpdateExpression() == null) {    throw new IllegalArgumentException("request did not use update expression");  }  int size=calculateItemSizeInBytes(request.getKey());  for (  AttributeValue value : request.getExpressionAttributeValues().values()) {    size+=calculateAttributeSizeInBytes(value);  }  return size;}  }
class C{  @Override public void undo(){  if (canUndo()) {    ((DataSortedTableModel)m_TableData.getModel()).undo();    notifyListener();  }}  }
class C{  @Override public synchronized boolean absolute(int row) throws SQLException {  return super.absolute(row);}  }
class C{  private void pruneScrapViews(){  final int maxViews=activeViews.length;  final int viewTypeCount=this.viewTypeCount;  final SparseArray<View>[] scrapViews=this.scrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final SparseArray<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      scrapPile.remove(scrapPile.keyAt(size--));    }  }}  }
class C{  public static GridFieldVO createParameter(GridFieldVO voF){  GridFieldVO voT=new GridFieldVO(voF.ctx,voF.WindowNo,voF.TabNo,voF.AD_Window_ID,voF.AD_Tab_ID,voF.tabReadOnly);  voT.isProcess=true;  voT.IsDisplayed=true;  voT.IsReadOnly=false;  voT.IsUpdateable=true;  voT.AD_Table_ID=voF.AD_Table_ID;  voT.AD_Column_ID=voF.AD_Column_ID;  voT.ColumnName=voF.ColumnName;  voT.Header=voF.Header;  voT.Description=voF.Description;  voT.Help=voF.Help;  voT.displayType=voF.displayType;  voT.IsMandatory=voF.IsMandatory;  voT.FieldLength=voF.FieldLength;  voT.DisplayLength=voF.FieldLength;  voT.DefaultValue=voF.DefaultValue;  voT.DefaultValue2=voF.DefaultValue2;  voT.VFormat=voF.VFormat;  voT.ValueMin=voF.ValueMin;  voT.ValueMax=voF.ValueMax;  voT.isRange=voF.isRange;  voT.isEmbedded=voF.isEmbedded;  voT.DisplayLogic=voF.DisplayLogic;  voT.ReadOnlyLogic=voF.ReadOnlyLogic;  voT.ValidationCode=voF.ValidationCode;  voT.InfoFactoryClass=voF.InfoFactoryClass;  voT.AD_Reference_Value_ID=voF.AD_Reference_Value_ID;  voT.initFinish();  return voT;}  }
class C{  private void hideNotification(){  mNotificationManager.cancel(NOTIFICATION_ID);}  }
class C{  private void verifyWritableDeployDirectory() throws IOException {  Exception exception=null;  int tryCount=0;  do {    try {      if (this.deployDirectory.canWrite()) {        return;      }    } catch (    Exception ex) {      exception=ex;    }    try {      Thread.sleep(100);    } catch (    InterruptedException iex) {      logger.error("Interrupted while testing writable deploy directory",iex);    }  } while (tryCount++ < 20);  if (exception != null) {    throw new IOException("Unable to write to deploy directory",exception);  }  throw new IOException("Unable to write to deploy directory");}  }
class C{  public static void checkRegionMetadata(Address region){  if (VM.VERIFY_ASSERTIONS) {    Address nextRegion=getNextRegion(region);    Address dataStart=getDataStart(region);    Address dataEnd=getDataEnd(region);    Address regionLimit=getRegionLimit(region);    VM.assertions._assert(nextRegion.isZero() || isRegionAligned(nextRegion));    VM.assertions._assert(dataEnd.GE(dataStart));    if (dataEnd.GT(regionLimit)) {      Log.write("dataEnd=");      Log.write(dataEnd);      Log.write(", regionLimit=");      Log.writeln(regionLimit);    }    VM.assertions._assert(dataEnd.LE(regionLimit));    VM.assertions._assert(regionLimit.EQ(region.plus(BLOCK_SIZE)));  }}  }
class C{  public Patient(Village v){  home=v;  hospitalsVisited=0;  time=0;  timeLeft=0;}  }
class C{  public EditableRegistration modify(){  return new EditableRegistration();}  }
class C{  private void focusNext(){  final Element current=Elements.getDocument().getActiveElement();  if (current.getParentElement().isEqualNode(listElement)) {    final Element next=current.getNextElementSibling();    if (next != null) {      next.focus();    } else {      focusFirst();    }  } else {    focusFirst();  }}  }
class C{  public static void mergeSortInPlace(int[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  int length=toIndex - fromIndex;  if (length < SMALL) {    for (int i=fromIndex; i < toIndex; i++) {      for (int j=i; j > fromIndex && a[j - 1] > a[j]; j--) {        int tmp=a[j];        a[j]=a[j - 1];        a[j - 1]=tmp;      }    }    return;  }  int mid=(fromIndex + toIndex) / 2;  mergeSortInPlace(a,fromIndex,mid);  mergeSortInPlace(a,mid,toIndex);  if (a[mid - 1] <= a[mid])   return;  inplace_merge(a,fromIndex,mid,toIndex);}  }
class C{  public static int pow(int a,int b,int modulus){  int p=1;  for (int i=0; i < b; i++) {    p=(p * a) % modulus;  }  return p;}  }
class C{  public static List<EntityCondition> createCondition(ModelEntity modelEntity,Map<String,Map<String,Map<String,Object>>> normalizedFields,Map<String,Object> queryStringMap,Map<String,List<Object[]>> origValueMap,Delegator delegator,Map<String,?> context){  Map<String,Map<String,Object>> subMap=null;  Map<String,Object> subMap2=null;  Object fieldValue=null;  EntityCondition cond=null;  List<EntityCondition> tmpList=new LinkedList<EntityCondition>();  String opString=null;  boolean ignoreCase=false;  List<ModelField> fields=modelEntity.getFieldsUnmodifiable();  for (  ModelField modelField : fields) {    String fieldName=modelField.getName();    subMap=normalizedFields.get(fieldName);    if (subMap == null) {      continue;    }    subMap2=subMap.get("fld0");    fieldValue=subMap2.get("value");    opString=(String)subMap2.get("op");    if (fieldValue == null && !"empty".equals(opString)) {      continue;    }    ignoreCase="Y".equals(subMap2.get("ic"));    cond=createSingleCondition(modelField,opString,fieldValue,ignoreCase,delegator,context);    tmpList.add(cond);    subMap2=subMap.get("fld1");    if (subMap2 == null) {      continue;    }    fieldValue=subMap2.get("value");    opString=(String)subMap2.get("op");    if (fieldValue == null && !"empty".equals(opString)) {      continue;    }    ignoreCase="Y".equals(subMap2.get("ic"));    cond=createSingleCondition(modelField,opString,fieldValue,ignoreCase,delegator,context);    tmpList.add(cond);    List<Object[]> origList=origValueMap.get(fieldName);    if (UtilValidate.isNotEmpty(origList)) {      for (      Object[] arr : origList) {        queryStringMap.put((String)arr[0],arr[1]);      }    }  }  return tmpList;}  }
class C{  public int size(){  return sizeCountingOnlyAliveElements();}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  @Override public final double codingCost(){  return Utils.log2(m_index);}  }
class C{  private void destroyInMultiplePartitionedRegion(VM vm0,VM vm1,VM vm2,VM vm3,int startIndexForRegion,int endIndexForRegion) throws Throwable {  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  int delta=(endIndexForDestroy - startIndexForDestroy) / 4;  async[0]=vm0.invokeAsync(destroyInMultiplePartitionRegion(prPrefix,startIndexForDestroy,startIndexForDestroy + 1 * delta,startIndexForRegion,endIndexForRegion));  async[1]=vm1.invokeAsync(destroyInMultiplePartitionRegion(prPrefix,startIndexForDestroy + 1 * delta,startIndexForDestroy + 2 * delta,startIndexForRegion,endIndexForRegion));  async[2]=vm2.invokeAsync(destroyInMultiplePartitionRegion(prPrefix,startIndexForDestroy + 2 * delta,startIndexForDestroy + 3 * delta,startIndexForRegion,endIndexForRegion));  async[3]=vm3.invokeAsync(destroyInMultiplePartitionRegion(prPrefix,startIndexForDestroy + 3 * delta,endIndexForDestroy,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during " + count,async[count].getException());    }  }}  }
class C{  public static int unixTimestamp(){  return (int)(System.currentTimeMillis() / 1000L);}  }
class C{  public void markSaved(){  this.setModified(false);}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);}  }
class C{  public long addRegion(final Beacon beacon,final String name,final int event,final int action,final String actionParam){  final ContentValues values=new ContentValues();  values.put(BeaconContract.Beacon.NAME,name);  values.put(BeaconContract.Beacon.UUID,beacon.getUuid().toString());  values.put(BeaconContract.Beacon.MAJOR,beacon.getMajor());  values.put(BeaconContract.Beacon.MINOR,beacon.getMinor());  values.put(BeaconContract.Beacon.EVENT,event);  values.put(BeaconContract.Beacon.ACTION,action);  values.put(BeaconContract.Beacon.ACTION_PARAM,actionParam);  return mDatabase.insert(Tables.REGIONS,null,values);}  }
class C{  public static void write(OutputStream out,InputStream is,boolean noBackslashEscapes) throws IOException {  out.write(QUOTE);  byte[] buffer=new byte[1024];  int len;  while ((len=is.read(buffer)) >= 0) {    writeBytesEscaped(out,buffer,len,noBackslashEscapes);  }  out.write(QUOTE);}  }
class C{  public HCardParser(File file,String pageUrl) throws IOException {  this((pageUrl == null) ? Jsoup.parse(file,null,"") : Jsoup.parse(file,null,pageUrl),pageUrl);}  }
class C{  public boolean isFailed(){  return name.get() == Failed.name.get();}  }
class C{  public boolean isEmpty(){  return firstEvent == null;}  }
class C{  private static String convertHost(final String host){  return stripDotSuffix(host);}  }
class C{  public int open(){  shell.open();  shell.layout();  while (shell != null && !shell.isDisposed()) {    if (display != null && !display.readAndDispatch()) {      display.sleep();    }  }  return position;}  }
class C{  public static <K,V>void forEachKeyValue(Map<K,V> map,Procedure2<? super K,? super V> procedure,int minForkSize,int taskCount){  if (map.size() > minForkSize) {    Procedure<Pair<K,V>> pairProcedure=new PairProcedure<>(procedure);    ParallelIterate.forEach(MapIterate.toListOfPairs(map),new PassThruProcedureFactory<>(pairProcedure),new PassThruCombiner<>(),minForkSize,taskCount);  } else {    MapIterate.forEachKeyValue(map,procedure);  }}  }
class C{  public LoggingFraction fileHandler(String name,String path,Level level,String formatter){  Map<Object,Object> fileProperties=new HashMap<>();  fileProperties.put("path",path);  fileProperties.put("relative-to","jboss.server.log.dir");  fileHandler(new FileHandler(name).level(level).formatter(formatter).file(fileProperties));  return this;}  }
class C{  private void copyTmpConfFiles2Conf(File tmpconfDir){  boolean status=false;  File confDir=new File(solrCore.getResourceLoader().getConfigDir());  for (  File file : makeTmpConfDirFileList(tmpconfDir,new ArrayList<File>())) {    File oldFile=new File(confDir,file.getPath().substring(tmpconfDir.getPath().length(),file.getPath().length()));    if (!oldFile.getParentFile().exists()) {      status=oldFile.getParentFile().mkdirs();      if (!status) {        throw new SolrException(ErrorCode.SERVER_ERROR,"Unable to mkdirs: " + oldFile.getParentFile());      }    }    if (oldFile.exists()) {      File backupFile=new File(oldFile.getPath() + "." + getDateAsStr(new Date(oldFile.lastModified())));      if (!backupFile.getParentFile().exists()) {        status=backupFile.getParentFile().mkdirs();        if (!status) {          throw new SolrException(ErrorCode.SERVER_ERROR,"Unable to mkdirs: " + backupFile.getParentFile());        }      }      status=oldFile.renameTo(backupFile);      if (!status) {        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to rename: " + oldFile + " to: "+ backupFile);      }    }    status=file.renameTo(oldFile);    if (!status) {      throw new SolrException(ErrorCode.SERVER_ERROR,"Unable to rename: " + file + " to: "+ oldFile);    }  }}  }
class C{  public static Map<String,Integer> createTokenTypeMap(String[] tokenNames){  return Utils.toMap(tokenNames);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  protected void prepare(){  p_Record_ID=getRecord_ID();  if (p_AD_Client_ID == 0)   p_AD_Client_ID=Env.getAD_Client_ID(getCtx());  AD_Table_ID=getTable_ID();  StringBuffer sb=new StringBuffer("AD_Table_ID=").append(AD_Table_ID);  sb.append("; Record_ID=").append(getRecord_ID());  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("EXP_Format_ID"))     p_EXP_Format_ID=para[i].getParameterAsInt(); else     if (name.equals("FileName"))     p_FileName=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (p_EXP_Format_ID == 0)   p_EXP_Format_ID=p_Record_ID;  if (p_FileName == null) {    String fileNameOr=org.compiere.util.Ini.findAdempiereHome() + System.getProperty("file.separator") + "data"+ System.getProperty("file.separator")+ "ExportFile.xml";    p_FileName=fileNameOr;  }  log.info(sb.toString());}  }
class C{  public void auditPassword(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);}  }
class C{  public boolean isTextList(){  return registry.isText();}  }
class C{  private void readStreams(Process proc) throws IOException {  BufferedReader stdOut=new BufferedReader(new InputStreamReader(proc.getInputStream()));  String s;  while ((s=stdOut.readLine()) != null)   System.out.println("OUT>>>>>> " + s);  BufferedReader errOut=new BufferedReader(new InputStreamReader(proc.getErrorStream()));  while ((s=errOut.readLine()) != null)   System.out.println("ERR>>>>>> " + s);}  }
class C{  public static org.oscm.vo.VOParameterOption convertToApi(org.oscm.internal.vo.VOParameterOption oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOParameterOption newVO=new org.oscm.vo.VOParameterOption();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setOptionId(oldVO.getOptionId());  newVO.setOptionDescription(oldVO.getOptionDescription());  newVO.setParamDefId(oldVO.getParamDefId());  return newVO;}  }
class C{  @SuppressWarnings("ConstantConditions") protected void scheduleJobs(Scheduler sched) throws SchedulerException {  List<JobDetail> jobs=new LinkedList<JobDetail>(getLoadedJobs());  List<MutableTrigger> triggers=new LinkedList<MutableTrigger>(getLoadedTriggers());  log.info("Adding " + jobs.size() + " jobs, "+ triggers.size()+ " triggers.");  Map<JobKey,List<MutableTrigger>> triggersByFQJobName=buildTriggersByFQJobNameMap(triggers);  Iterator<JobDetail> itr=jobs.iterator();  while (itr.hasNext()) {    JobDetail detail=itr.next();    itr.remove();    JobDetail dupeJ=null;    try {      dupeJ=sched.getJobDetail(detail.getKey());    } catch (    JobPersistenceException e) {      if (e.getCause() instanceof ClassNotFoundException && isOverWriteExistingData()) {        log.info("Removing job: " + detail.getKey());        sched.deleteJob(detail.getKey());      } else {        throw e;      }    }    if ((dupeJ != null)) {      if (!isOverWriteExistingData() && isIgnoreDuplicates()) {        log.info("Not overwriting existing job: " + dupeJ.getKey());        continue;      }      if (!isOverWriteExistingData() && !isIgnoreDuplicates()) {        throw new ObjectAlreadyExistsException(detail);      }    }    if (dupeJ != null) {      log.info("Replacing job: " + detail.getKey());    } else {      log.info("Adding job: " + detail.getKey());    }    List<MutableTrigger> triggersOfJob=triggersByFQJobName.get(detail.getKey());    if (!detail.isDurable() && (triggersOfJob == null || triggersOfJob.size() == 0)) {      if (dupeJ == null) {        throw new SchedulerException("A new job defined without any triggers must be durable: " + detail.getKey());      }      if ((dupeJ.isDurable() && (sched.getTriggersOfJob(detail.getKey()).size() == 0))) {        throw new SchedulerException("Can't change existing durable job without triggers to non-durable: " + detail.getKey());      }    }    if (dupeJ != null || detail.isDurable()) {      if (triggersOfJob != null && triggersOfJob.size() > 0)       sched.addJob(detail,true,true); else       sched.addJob(detail,true,false);    } else {      boolean addJobWithFirstSchedule=true;      for (      MutableTrigger trigger : triggersOfJob) {        triggers.remove(trigger);        if (trigger.getStartTime() == null) {          trigger.setStartTime(new Date());        }        Trigger dupeT=sched.getTrigger(trigger.getKey());        if (dupeT != null) {          if (isOverWriteExistingData()) {            if (log.isDebugEnabled()) {              log.debug("Rescheduling job: " + trigger.getJobKey() + " with updated trigger: "+ trigger.getKey());            }          } else           if (isIgnoreDuplicates()) {            log.info("Not overwriting existing trigger: " + dupeT.getKey());            continue;          } else {            throw new ObjectAlreadyExistsException(trigger);          }          if (!dupeT.getJobKey().equals(trigger.getJobKey())) {            log.warn("Possibly duplicately named ({}) triggers in jobs xml file! ",trigger.getKey());          }          sched.rescheduleJob(trigger.getKey(),trigger);        } else {          if (log.isDebugEnabled()) {            log.debug("Scheduling job: " + trigger.getJobKey() + " with trigger: "+ trigger.getKey());          }          try {            if (addJobWithFirstSchedule) {              sched.scheduleJob(detail,trigger);              addJobWithFirstSchedule=false;            } else {              sched.scheduleJob(trigger);            }          } catch (          ObjectAlreadyExistsException e) {            if (log.isDebugEnabled()) {              log.debug("Adding trigger: " + trigger.getKey() + " for job: "+ detail.getKey()+ " failed because the trigger already existed.  "+ "This is likely due to a race condition between multiple instances "+ "in the cluster.  Will try to reschedule instead.");            }            sched.rescheduleJob(trigger.getKey(),trigger);          }        }      }    }  }  for (  MutableTrigger trigger : triggers) {    if (trigger.getStartTime() == null) {      trigger.setStartTime(new Date());    }    Trigger dupeT=sched.getTrigger(trigger.getKey());    if (dupeT != null) {      if (isOverWriteExistingData()) {        if (log.isDebugEnabled()) {          log.debug("Rescheduling job: " + trigger.getJobKey() + " with updated trigger: "+ trigger.getKey());        }      } else       if (isIgnoreDuplicates()) {        log.info("Not overwriting existing trigger: " + dupeT.getKey());        continue;      } else {        throw new ObjectAlreadyExistsException(trigger);      }      if (!dupeT.getJobKey().equals(trigger.getJobKey())) {        log.warn("Possibly duplicately named ({}) triggers in jobs xml file! ",trigger.getKey());      }      sched.rescheduleJob(trigger.getKey(),trigger);    } else {      if (log.isDebugEnabled()) {        log.debug("Scheduling job: " + trigger.getJobKey() + " with trigger: "+ trigger.getKey());      }      try {        sched.scheduleJob(trigger);      } catch (      ObjectAlreadyExistsException e) {        if (log.isDebugEnabled()) {          log.debug("Adding trigger: " + trigger.getKey() + " for job: "+ trigger.getJobKey()+ " failed because the trigger already existed.  "+ "This is likely due to a race condition between multiple instances "+ "in the cluster.  Will try to reschedule instead.");        }        sched.rescheduleJob(trigger.getKey(),trigger);      }    }  }}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static boolean isValidDate(String dateString){  try {    return dateString != null && DATE_FORMAT.get().parse(dateString) != null;  } catch (  ParseException e) {    return false;  }}  }
class C{  public final long calcMargin(int[] coords,int[] marginVars){  internalCoordCopy(coords);  for (  int marginVar : marginVars) {    this.coordCopy[marginVar]=-1;  }  return calcMargin(this.coordCopy);}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public static final boolean isOracleJCEProvider(String providerName){  return providerName != null && (providerName.equals("SunJCE") || providerName.equals("SunMSCAPI") || providerName.equals("OracleUcrypto")|| providerName.startsWith("SunPKCS11"));}  }
class C{  public void testMoveDirectory() throws Exception {  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  @Override public void onIncomingChatRequest(IncomingChatRequestEvent event) throws Exception {  ReceiveChat chat=event.accept();  String line;  while ((line=chat.readLine()) != null)   if (line.equalsIgnoreCase("done")) {    chat.close();    break;  } else {    int lineLength=line.length();    chat.sendLine("Line '" + line + "' contains "+ lineLength+ " characters");  }}  }
class C{  public Node to_chunkstruct(String label){  list<Node> pieces=x.list();  int index=0;  boolean piece_in_chunk=false;  for (  String piece : x.Regex("[{}]").split(this._str)) {    int length=x.String(piece).count("<");    list<Node> subsequence=this._pieces.slice(index,index + length);    if (piece_in_chunk) {      list<Node> lst=x.list();      for (      Node leaf : subsequence) {        lst.append(leaf);      }      pieces.append(new Node(label,lst));    } else {      for (      Node leaf : subsequence) {        pieces.append(leaf);      }    }    index+=length;    piece_in_chunk=!piece_in_chunk;  }  return new Node(this._root_label,pieces);}  }
class C{  @Override public void updateClob(String columnLabel,Reader x) throws SQLException {  updateClob(columnLabel,x,-1);}  }
class C{  void interrupt(){  vmdata.interrupt();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.655 -0500",hash_original_method="F5AEFAEF4E02A70FD5903FF3D20C6A4E",hash_generated_method="7840BDA390B3340A6B8253B6C7813E2D") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public SimpleSMTPHeader(String from,String to,String subject){  __to=to;  __from=from;  __subject=subject;  __headerFields=new StringBuffer();  __cc=null;}  }
class C{  public Object clone() throws CloneNotSupportedException {  Strategy strategy=(Strategy)super.clone();  List<Tradestrategy> tradestrategies=new ArrayList<Tradestrategy>(0);  strategy.setTradestrategies(tradestrategies);  strategy.setIndicatorSeries(this.getIndicatorSeries());  return strategy;}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedMap(boolean reversed){  return new ByValueSortingTreeMap<>(ByValueComparator.<K,V>create(reversed));}  }
class C{  public Key max(){  if (isEmpty())   throw new NoSuchElementException("called max() with empty symbol table");  return max(root).key;}  }
class C{  public BooleanField(String name,String truthValue){  super(name,Field.Type.BOOLEAN,Collections.singletonList(truthValue));}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  protected SystemService(){  _interlock=new CountDownLatch(1);  _log=LoggerFactory.getLogger(getClass());}  }
class C{  public static void main(String[] args) throws Exception {  final JFrame frame=new HTMLTest(args);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.pack();  frame.setVisible(true);}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  public boolean isNewer(long time){  return (lastUpdated != null) && (lastUpdated > time);}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  while (i < end) {    while (i < end && ignore(data.charAt(i))) {      i++;    }    b1=decodingTable[data.charAt(i++)];    while (i < end && ignore(data.charAt(i))) {      i++;    }    b2=decodingTable[data.charAt(i++)];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex string");    }    out.write((b1 << 4) | b2);    length++;  }  return length;}  }
class C{  private XTIFFField readField() throws IOException, ArrayIndexOutOfBoundsException {  int tag=readUnsignedShort(stream);  int type=readUnsignedShort(stream);  int count=(int)readUnsignedInt(stream);  int value=0;  long nextTagOffset=stream.getFilePointer() + 4;  try {    if (count * sizeOfType(type) > 4) {      value=(int)(readUnsignedInt(stream));      stream.seek(value);    }  } catch (  ArrayIndexOutOfBoundsException ae) {    System.err.println(tag + " " + JaiI18N.getString("XTIFFDirectory4"));    stream.seek(nextTagOffset);    throw ae;  }  Object obj=readFieldValue(tag,type,count);  stream.seek(nextTagOffset);  return createField(tag,type,count,obj);}  }
class C{  protected void addAnnotationsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_AnnotatableElement_annotations_feature"),getString("_UI_PropertyDescriptor_description","_UI_AnnotatableElement_annotations_feature","_UI_AnnotatableElement_type"),TypesPackage.Literals.ANNOTATABLE_ELEMENT__ANNOTATIONS,true,false,true,null,null,null));}  }
class C{  public IllegalArgumentException(String message){  super(message);}  }
class C{  public JLabel(){  this("",null,LEADING);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:17.491 -0500",hash_original_method="F493AFE631289C3191DD16CD5D858B75",hash_generated_method="85207D23893660A0A15E61C0EBB0DD64") public SmsStorageMonitor(PhoneBase phone){  mContext=phone.getContext();  mCm=phone.mCM;  createWakelock();  mCm.setOnIccSmsFull(this,EVENT_ICC_FULL,null);  mCm.registerForOn(this,EVENT_RADIO_ON,null);  IntentFilter filter=new IntentFilter();  filter.addAction(Intent.ACTION_DEVICE_STORAGE_FULL);  filter.addAction(Intent.ACTION_DEVICE_STORAGE_NOT_FULL);  mContext.registerReceiver(mResultReceiver,filter);}  }
class C{  static void printXml(DexData dexData,boolean justClasses){  ClassRef[] externClassRefs=dexData.getExternalReferences();  String prevPackage=null;  for (int i=0; i < externClassRefs.length; i++) {    ClassRef cref=externClassRefs[i];    String declClassName=cref.getName();    String className=classNameOnly(declClassName);    String packageName=packageNameOnly(declClassName);    if (!packageName.equals(prevPackage)) {      if (prevPackage != null) {        out.println(IN1 + "</package>");      }      out.println(IN1 + "<package name=\"" + packageName+ "\">");      prevPackage=packageName;    }    out.println(IN2 + "<class name=\"" + className+ "\">");    if (!justClasses) {      printXmlFields(cref);      printXmlMethods(cref);    }    out.println(IN2 + "</class>");  }  if (prevPackage != null)   out.println(IN1 + "</package>");}  }
class C{  protected static void renameColumn(ReviewDb db,String table,String from,String to) throws OrmException {  JdbcSchema s=(JdbcSchema)db;  try (JdbcExecutor e=new JdbcExecutor(s)){    s.renameColumn(e,table,from,to);  } }  }
class C{  public static boolean isValidName(String name){  if (name.length() == 0)   return false;  char ch=name.charAt(0);  if (isNameStart(ch) == false)   return false;  for (int i=1; i < name.length(); i++) {    ch=name.charAt(i);    if (isName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public void logging2(String msg){  System.out.print("    ");  System.out.println(msg);}  }
class C{  public static int countOccurrencesOf(String str,String token){  if (str == null || token == null || str.length() == 0 || token.length() == 0) {    return 0;  }  int count=0;  int pos=0;  int idx;  while ((idx=str.indexOf(token,pos)) != -1) {    ++count;    pos=idx + token.length();  }  return count;}  }
class C{  @Override public Request<VfsInfo> directoryMapping(String workspaceId,String path){  final Invocation request=getWebTarget().path(workspaceId).queryParam("mountPath",path).request().accept(APPLICATION_JSON).buildPost(null);  return new SimpleRequest<VfsInfo>(request,DefaultVFSInfo.class,getAuthenticationManager());}  }
class C{  public short acceptNode(int testNode){  boolean foundKey=false;  KeyIterator ki=(KeyIterator)m_lpi;  org.apache.xpath.XPathContext xctxt=ki.getXPathContext();  Vector keys=ki.getKeyDeclarations();  QName name=ki.getName();  try {    int nDeclarations=keys.size();    for (int i=0; i < nDeclarations; i++) {      KeyDeclaration kd=(KeyDeclaration)keys.elementAt(i);      if (!kd.getName().equals(name))       continue;      foundKey=true;      XPath matchExpr=kd.getMatch();      double score=matchExpr.getMatchScore(xctxt,testNode);      if (score == kd.getMatch().MATCH_SCORE_NONE)       continue;      return DTMIterator.FILTER_ACCEPT;    }  } catch (  TransformerException se) {  }  if (!foundKey)   throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_XSLKEY_DECLARATION,new Object[]{name.getLocalName()}));  return DTMIterator.FILTER_REJECT;}  }
class C{  private final int endGameEval(Position pos,int oldScore){  int score=oldScore;  if (pos.wMtrl + pos.bMtrl > 6 * rV)   return score;  final int wMtrlPawns=pos.wMtrlPawns;  final int bMtrlPawns=pos.bMtrlPawns;  final int wMtrlNoPawns=pos.wMtrl - wMtrlPawns;  final int bMtrlNoPawns=pos.bMtrl - bMtrlPawns;  boolean handled=false;  if ((wMtrlPawns + bMtrlPawns == 0) && (wMtrlNoPawns < rV) && (bMtrlNoPawns < rV)) {    return 0;  }  if (!handled && (pos.wMtrl == qV) && (pos.bMtrl == pV)&& (pos.pieceTypeBB[Piece.WQUEEN] != 0)) {    int wk=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WKING]);    int wq=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WQUEEN]);    int bk=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BKING]);    int bp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BPAWN]);    score=evalKQKP(wk,wq,bk,bp,pos.whiteMove);    handled=true;  }  if (!handled && (pos.wMtrl == rV) && (pos.pieceTypeBB[Piece.WROOK] != 0)) {    if (pos.bMtrl == pV) {      int bp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BPAWN]);      score=krkpEval(pos.getKingSq(true),pos.getKingSq(false),bp,pos.whiteMove);      handled=true;    } else     if ((pos.bMtrl == bV) && (pos.pieceTypeBB[Piece.BBISHOP] != 0)) {      score/=8;      final int kSq=pos.getKingSq(false);      final int x=Position.getX(kSq);      final int y=Position.getY(kSq);      if ((pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskDarkSq) != 0) {        score+=(7 - distToH1A8[7 - y][7 - x]) * 7;      } else {        score+=(7 - distToH1A8[7 - y][x]) * 7;      }      handled=true;    }  }  if (!handled && (pos.bMtrl == qV) && (pos.wMtrl == pV)&& (pos.pieceTypeBB[Piece.BQUEEN] != 0)) {    int bk=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BKING]);    int bq=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BQUEEN]);    int wk=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WKING]);    int wp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WPAWN]);    score=-evalKQKP(63 - bk,63 - bq,63 - wk,63 - wp,!pos.whiteMove);    handled=true;  }  if (!handled && (pos.bMtrl == rV) && (pos.pieceTypeBB[Piece.BROOK] != 0)) {    if (pos.wMtrl == pV) {      int wp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WPAWN]);      score=-krkpEval(63 - pos.getKingSq(false),63 - pos.getKingSq(true),63 - wp,!pos.whiteMove);      handled=true;    } else     if ((pos.wMtrl == bV) && (pos.pieceTypeBB[Piece.WBISHOP] != 0)) {      score/=8;      final int kSq=pos.getKingSq(true);      final int x=Position.getX(kSq);      final int y=Position.getY(kSq);      if ((pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskDarkSq) != 0) {        score-=(7 - distToH1A8[7 - y][7 - x]) * 7;      } else {        score-=(7 - distToH1A8[7 - y][x]) * 7;      }      handled=true;    }  }  if (!handled && (score > 0)) {    if ((wMtrlPawns == 0) && (wMtrlNoPawns <= bMtrlNoPawns + bV)) {      if (wMtrlNoPawns < rV) {        return -pos.bMtrl / 50;      } else {        score/=8;        handled=true;      }    } else     if ((pos.pieceTypeBB[Piece.WROOK] | pos.pieceTypeBB[Piece.WKNIGHT] | pos.pieceTypeBB[Piece.WQUEEN]) == 0) {      if (((pos.pieceTypeBB[Piece.WPAWN] & BitBoard.maskBToHFiles) == 0) && ((pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskLightSq) == 0) && ((pos.pieceTypeBB[Piece.BKING] & 0x0303000000000000L) != 0)) {        return 0;      } else       if (((pos.pieceTypeBB[Piece.WPAWN] & BitBoard.maskAToGFiles) == 0) && ((pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskDarkSq) == 0) && ((pos.pieceTypeBB[Piece.BKING] & 0xC0C0000000000000L) != 0)) {        return 0;      }    }  }  if (!handled) {    if (bMtrlPawns == 0) {      if (wMtrlNoPawns - bMtrlNoPawns > bV) {        int wKnights=Long.bitCount(pos.pieceTypeBB[Piece.WKNIGHT]);        int wBishops=Long.bitCount(pos.pieceTypeBB[Piece.WBISHOP]);        if ((wKnights == 2) && (pos.wMtrl == 2 * nV) && (bMtrlNoPawns == 0)) {          score/=50;        } else         if ((wKnights == 1) && (wBishops == 1) && (wMtrlNoPawns == nV + bV)&& (bMtrlNoPawns == 0)) {          score/=10;          score+=nV + bV + 300;          final int kSq=pos.getKingSq(false);          final int x=Position.getX(kSq);          final int y=Position.getY(kSq);          if ((pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskDarkSq) != 0) {            score+=(7 - distToH1A8[7 - y][7 - x]) * 10;          } else {            score+=(7 - distToH1A8[7 - y][x]) * 10;          }        } else {          score+=300;        }        handled=true;      } else       if ((wMtrlNoPawns + bMtrlNoPawns == 0) && (wMtrlPawns == pV)) {        int wp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.WPAWN]);        score=kpkEval(pos.getKingSq(true),pos.getKingSq(false),wp,pos.whiteMove);        handled=true;      }    }  }  if (!handled && (score < 0)) {    if ((bMtrlPawns == 0) && (bMtrlNoPawns <= wMtrlNoPawns + bV)) {      if (bMtrlNoPawns < rV) {        return pos.wMtrl / 50;      } else {        score/=8;        handled=true;      }    } else     if ((pos.pieceTypeBB[Piece.BROOK] | pos.pieceTypeBB[Piece.BKNIGHT] | pos.pieceTypeBB[Piece.BQUEEN]) == 0) {      if (((pos.pieceTypeBB[Piece.BPAWN] & BitBoard.maskBToHFiles) == 0) && ((pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskDarkSq) == 0) && ((pos.pieceTypeBB[Piece.WKING] & 0x0303L) != 0)) {        return 0;      } else       if (((pos.pieceTypeBB[Piece.BPAWN] & BitBoard.maskAToGFiles) == 0) && ((pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskLightSq) == 0) && ((pos.pieceTypeBB[Piece.WKING] & 0xC0C0L) != 0)) {        return 0;      }    }  }  if (!handled) {    if (wMtrlPawns == 0) {      if (bMtrlNoPawns - wMtrlNoPawns > bV) {        int bKnights=Long.bitCount(pos.pieceTypeBB[Piece.BKNIGHT]);        int bBishops=Long.bitCount(pos.pieceTypeBB[Piece.BBISHOP]);        if ((bKnights == 2) && (pos.bMtrl == 2 * nV) && (wMtrlNoPawns == 0)) {          score/=50;        } else         if ((bKnights == 1) && (bBishops == 1) && (bMtrlNoPawns == nV + bV)&& (wMtrlNoPawns == 0)) {          score/=10;          score-=nV + bV + 300;          final int kSq=pos.getKingSq(true);          final int x=Position.getX(kSq);          final int y=Position.getY(kSq);          if ((pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskDarkSq) != 0) {            score-=(7 - distToH1A8[7 - y][7 - x]) * 10;          } else {            score-=(7 - distToH1A8[7 - y][x]) * 10;          }        } else {          score-=300;        }        handled=true;      } else       if ((wMtrlNoPawns + bMtrlNoPawns == 0) && (bMtrlPawns == pV)) {        int bp=BitBoard.numberOfTrailingZeros(pos.pieceTypeBB[Piece.BPAWN]);        score=-kpkEval(63 - pos.getKingSq(false),63 - pos.getKingSq(true),63 - bp,!pos.whiteMove);        handled=true;      }    }  }  return score;}  }
class C{  public void testGaps3a(){  final JPanel panel=new JPanel(new GridBagLayout());  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  final JButton btn3=new JButton();  btn3.setPreferredSize(new Dimension(100,20));  final JButton btn4=new JButton();  btn4.setPreferredSize(new Dimension(100,20));  GridBagConverter converter=new GridBagConverter(new Insets(0,0,0,0),1000,0,false,false);  converter.addComponent(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(btn2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(btn3,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(btn4,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(2300,preferredSize.width);  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  public Object load(Reader io){  return loadFromReader(new StreamReader(io),Object.class);}  }
class C{  public static void assertArrayEqual(long[] expected,long[] actual,double maxRelativeError,String errorMessage){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ", "+ errorMessage+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],maxRelativeError,errorMessage);  }}  }
class C{  public static PropertyValuesHolder ofFloat(Property<?,Float> property,float... values){  return new FloatPropertyValuesHolder(property,values);}  }
class C{  private String streamAttachment(int AD_Attachment_ID,int attachmentIndex,HttpServletResponse response,WWindowStatus ws){  log.info("AD_Attachment_ID=" + AD_Attachment_ID + ", AttachmentIndex="+ attachmentIndex);  MAttachment attachment=new MAttachment(ws.ctx,AD_Attachment_ID,null);  if (attachment.get_ID() == 0) {    log.fine("No Attachment AD_Attachment_ID=" + AD_Attachment_ID);    return "Attachment not found";  }  if (ws.curTab.getAD_AttachmentID() != AD_Attachment_ID) {    log.warning("Tab AD_Attachment_ID=" + ws.curTab.getAD_AttachmentID() + " <> "+ AD_Attachment_ID);    return "Your Attachment not found";  }  return WebUtil.streamAttachment(response,attachment,attachmentIndex);}  }
class C{  public boolean minValue(long val,long minVal){  return GenericValidator.minValue(val,minVal);}  }
class C{  public static void scheduleExponential(Context context,int delay,int max){  Intent intent=new Intent(context,HeartbeatReceiver.class);  intent.putExtra(KEY_DELAY,delay);  intent.putExtra(KEY_TYPE,TYPE_EXPONENTIAL);  intent.putExtra(KEY_MAX,max);  long timeGap=delay * 60 * 1000;  PendingIntent alarmIntent=PendingIntent.getBroadcast(context,delay,intent,PendingIntent.FLAG_CANCEL_CURRENT);  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  alarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + timeGap,alarmIntent);  Log.d("Heartbeater","Scheduled exponential");}  }
class C{  public Boolean determineValue(Clause c){  Boolean result=null;  if (c.isTautology()) {    result=Boolean.TRUE;  } else   if (c.isFalse()) {    result=Boolean.FALSE;  } else {    boolean unassignedSymbols=false;    Boolean value=null;    for (    PropositionSymbol positive : c.getPositiveSymbols()) {      value=assignments.get(positive);      if (value != null) {        if (Boolean.TRUE.equals(value)) {          result=Boolean.TRUE;          break;        }      } else {        unassignedSymbols=true;      }    }    if (result == null) {      for (      PropositionSymbol negative : c.getNegativeSymbols()) {        value=assignments.get(negative);        if (value != null) {          if (Boolean.FALSE.equals(value)) {            result=Boolean.TRUE;            break;          }        } else {          unassignedSymbols=true;        }      }      if (result == null) {        if (!unassignedSymbols) {          result=Boolean.FALSE;        }      }    }  }  return result;}  }
class C{  public Task<Void> saveInBackground(){  return saveInBackground((ProgressCallback)null);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.STATE_SWITCH;}  }
class C{  public boolean relative(int rows) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public void testDeleteDown() throws Exception {  File logDir=prepareLogDir("testDeleteDown");  DiskLog log=openLog(logDir,false,3000);  writeEventsToLog(log,200);  LogConnection conn=log.connect(false);  for (int i=199; i >= 0; i--) {    conn.delete(new Long(i),null);    if (i > 0) {      long newMaxSeqno=i - 1;      assertEquals("Expected maximum after truncation",newMaxSeqno,log.getMaxSeqno());      assertTrue("Can find max seqno",conn.seek(newMaxSeqno));      THLEvent e=conn.next();      assertNotNull("Last event must not be null",e);    }  }  conn.release();  log.validate();  assertEquals("Should have no log files",0,log.fileCount());  log.release();  DiskLog log2=openLog(logDir,false);  log.validate();  writeEventsToLog(log2,100);  readBackStoredEvents(log2,0,100);  log.validate();  log2.release();}  }
class C{  public int replaceAll(String findString,boolean isFindHexString,boolean searchForward,boolean ignoreCase,String replaceString,boolean isReplaceHexString) throws IOException {  int result=0;  stopSearching=false;  while (!stopSearching && findAndSelectInternal(findString,isFindHexString,searchForward,ignoreCase,false)) {    ++result;    replace(replaceString,isReplaceHexString);  }  if (result > 0) {    setSelection(getSelection()[0],getSelection()[1]);  }  return result;}  }
class C{  @DSComment("Data structure/no action") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:51.986 -0500",hash_original_method="5A67E197C5983AA9D4F6364A1A3A1EA0",hash_generated_method="D9CD50EE9CC4C5741F1B86BD0C60AA6A") public boolean isChecked(){  return getBooleanProperty(PROPERTY_CHECKED);}  }
class C{  public Person(){}  }
class C{  private static int indexOf(Throwable throwable,Class type,int fromIndex,boolean subclass){  if (throwable == null || type == null) {    return -1;  }  if (fromIndex < 0) {    fromIndex=0;  }  Throwable[] throwables=ExceptionUtils.getThrowables(throwable);  if (fromIndex >= throwables.length) {    return -1;  }  if (subclass) {    for (int i=fromIndex; i < throwables.length; i++) {      if (type.isAssignableFrom(throwables[i].getClass())) {        return i;      }    }  } else {    for (int i=fromIndex; i < throwables.length; i++) {      if (type.equals(throwables[i].getClass())) {        return i;      }    }  }  return -1;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public static org.smpte_ra.schemas.st2067_2_2016.PKL.PackingListType constructPackingListType_2016(){  org.smpte_ra.schemas.st2067_2_2016.PKL.PackingListType pklType_2016=new org.smpte_ra.schemas.st2067_2_2016.PKL.PackingListType();  IMFDocumentsObjectFieldsFactory.constructObjectFields(pklType_2016);  return pklType_2016;}  }
class C{  private void launchRoomDetails(int selectedTab){  if ((null != mRoom) && (null != mRoom.getMember(mSession.getMyUserId()))) {    enableActionBarHeader(HIDE_ACTION_BAR_HEADER);    Intent intent=new Intent(VectorRoomActivity.this,VectorRoomDetailsActivity.class);    intent.putExtra(VectorRoomDetailsActivity.EXTRA_ROOM_ID,mRoom.getRoomId());    intent.putExtra(VectorRoomDetailsActivity.EXTRA_MATRIX_ID,mSession.getCredentials().userId);    intent.putExtra(VectorRoomDetailsActivity.EXTRA_SELECTED_TAB_ID,selectedTab);    startActivityForResult(intent,GET_MENTION_REQUEST_CODE);  }}  }
class C{  public int findReferencePosition(int offset,int nextToken){  boolean danglingElse=false;  boolean unindent=false;  boolean indent=false;  boolean matchBrace=false;  boolean matchParen=false;  boolean matchCase=false;  boolean throwsClause=false;  if (offset < fDocument.getLength()) {    try {      Region line=fDocument.getLineInformationOfOffset(offset);      int lineOffset=line.getOffset();      int prevPos=Math.max(offset - 1,0);      boolean isFirstTokenOnLine=fDocument.get(lineOffset,prevPos + 1 - lineOffset).trim().length() == 0;      int prevToken=fScanner.previousToken(prevPos,JavaHeuristicScanner.UNBOUND);      boolean bracelessBlockStart=fScanner.isBracelessBlockStart(prevPos,JavaHeuristicScanner.UNBOUND);switch (nextToken) {case Symbols.TokenELSE:        danglingElse=true;      break;case Symbols.TokenCASE:case Symbols.TokenDEFAULT:    if (isFirstTokenOnLine)     matchCase=true;  break;case Symbols.TokenLBRACE:if (bracelessBlockStart && !fPrefs.prefIndentBracesForBlocks) unindent=true; else if ((prevToken == Symbols.TokenCOLON || prevToken == Symbols.TokenEQUAL) && !fPrefs.prefIndentBracesForArrays) unindent=true; else if (!bracelessBlockStart && fPrefs.prefIndentBracesForMethods) indent=true;break;case Symbols.TokenRBRACE:if (isFirstTokenOnLine) matchBrace=true;break;case Symbols.TokenRPAREN:if (isFirstTokenOnLine) matchParen=true;break;case Symbols.TokenTHROWS:throwsClause=true;break;case Symbols.TokenPLUS:if (isStringContinuation(offset)) {if (isSecondLineOfStringContinuation(offset)) {fAlign=JavaHeuristicScanner.NOT_FOUND;fIndent=fPrefs.prefContinuationIndent;} else {int previousLineOffset=fDocument.getLineOffset(fDocument.getLineOfOffset(offset) - 1);fAlign=fScanner.findNonWhitespaceForwardInAnyPartition(previousLineOffset,JavaHeuristicScanner.UNBOUND);}return fPosition;}break;}} catch (BadLocationException e) {}} else {danglingElse=false;}int ref=findReferencePosition(offset,danglingElse,matchBrace,matchParen,matchCase,throwsClause);if (unindent) fIndent--;if (indent) fIndent++;return ref;}  }
class C{  public <T>T createDto(Class<T> dtoInterface){  return getDtoProvider(dtoInterface).newInstance();}  }
class C{  public T caseExecutionEntry(ExecutionEntry object){  return null;}  }
class C{  public final int numDistinctValues(Attribute att){  return numDistinctValues(att.index());}  }
class C{  public static void run(String cmd) throws KeywordOptimizerException {  if (cmd.isEmpty()) {    run(new String[]{});  } else {    run(cmd.split(" "));  }}  }
class C{  public int hashCode(){  int result=17;  if (isDestroyed()) {    return result;  }  result=result * 37 + Arrays.hashCode(getEncoded());  result=result * 37 + endTime.hashCode();  result=result * 37 + client.hashCode();  result=result * 37 + server.hashCode();  result=result * 37 + sessionKey.hashCode();  if (authTime != null) {    result=result * 37 + authTime.hashCode();  }  if (startTime != null) {    result=result * 37 + startTime.hashCode();  }  if (renewTill != null) {    result=result * 37 + renewTill.hashCode();  }  result=result * 37 + Arrays.hashCode(clientAddresses);  return result * 37 + Arrays.hashCode(flags);}  }
class C{  public HalfEdge(Coordinate orig){  this.orig=orig;}  }
class C{  public void removeUpdate(DocumentEvent e){  if (getUpdatePolicy() == NEVER_UPDATE || (getUpdatePolicy() == UPDATE_WHEN_ON_EDT && !SwingUtilities.isEventDispatchThread())) {    int length=component.getDocument().getLength();    dot=Math.min(dot,length);    mark=Math.min(mark,length);    if ((e.getOffset() < dot || e.getOffset() < mark) && selectionTag != null) {      try {        component.getHighlighter().changeHighlight(selectionTag,Math.min(dot,mark),Math.max(dot,mark));      } catch (      BadLocationException e1) {        e1.printStackTrace();      }    }    return;  }  int offs0=e.getOffset();  int offs1=offs0 + e.getLength();  int newDot=dot;  boolean adjustDotBias=false;  int newMark=mark;  boolean adjustMarkBias=false;  if (e instanceof AbstractDocument.UndoRedoDocumentEvent) {    setDot(offs0);    return;  }  if (newDot >= offs1) {    newDot-=(offs1 - offs0);    if (newDot == offs1) {      adjustDotBias=true;    }  } else   if (newDot >= offs0) {    newDot=offs0;    adjustDotBias=true;  }  if (newMark >= offs1) {    newMark-=(offs1 - offs0);    if (newMark == offs1) {      adjustMarkBias=true;    }  } else   if (newMark >= offs0) {    newMark=offs0;    adjustMarkBias=true;  }  if (newMark == newDot) {    forceCaretPositionChange=true;    try {      setDot(newDot,guessBiasForOffset(newDot,dotBias,dotLTR));    }  finally {      forceCaretPositionChange=false;    }    ensureValidPosition();  } else {    Position.Bias dotBias=DefaultCaret.this.dotBias;    Position.Bias markBias=DefaultCaret.this.markBias;    if (adjustDotBias) {      dotBias=guessBiasForOffset(newDot,dotBias,dotLTR);    }    if (adjustMarkBias) {      markBias=guessBiasForOffset(mark,markBias,markLTR);    }    setDot(newMark,markBias);    if (getDot() == newMark) {      moveDot(newDot,dotBias);    }    ensureValidPosition();  }}  }
class C{  public void clear(){  _next=null;  _offset=0;  _length=0;  _bufferCount=0;}  }
class C{  public Matrix4x3d fma(Matrix4x3dc other,double otherFactor){  return fma(other,otherFactor,this);}  }
class C{  protected void drawItem(Graphics2D g2,int section,Rectangle2D dataArea,PiePlotState state,int currentPass){  Number n=this.dataset.getValue(section);  if (n == null) {    return;  }  double value=n.doubleValue();  double angle1=0.0;  double angle2=0.0;  if (this.direction == Rotation.CLOCKWISE) {    angle1=state.getLatestAngle();    angle2=angle1 - value / state.getTotal() * 360.0;  } else   if (this.direction == Rotation.ANTICLOCKWISE) {    angle1=state.getLatestAngle();    angle2=angle1 + value / state.getTotal() * 360.0;  } else {    throw new IllegalStateException("Rotation type not recognised.");  }  double angle=(angle2 - angle1);  if (Math.abs(angle) > getMinimumArcAngleToDraw()) {    double ep=0.0;    double mep=getMaximumExplodePercent();    if (mep > 0.0) {      ep=getExplodePercent(section) / mep;    }    Rectangle2D arcBounds=getArcBounds(state.getPieArea(),state.getExplodedPieArea(),angle1,angle,ep);    Arc2D.Double arc=new Arc2D.Double(arcBounds,angle1,angle,Arc2D.PIE);    if (currentPass == 0) {      if (this.shadowPaint != null && this.shadowGenerator == null) {        Shape shadowArc=ShapeUtilities.createTranslatedShape(arc,(float)this.shadowXOffset,(float)this.shadowYOffset);        g2.setPaint(this.shadowPaint);        g2.fill(shadowArc);      }    } else     if (currentPass == 1) {      Comparable key=getSectionKey(section);      Paint paint=lookupSectionPaint(key,state);      g2.setPaint(paint);      g2.fill(arc);      Paint outlinePaint=lookupSectionOutlinePaint(key);      Stroke outlineStroke=lookupSectionOutlineStroke(key);      if (this.sectionOutlinesVisible) {        g2.setPaint(outlinePaint);        g2.setStroke(outlineStroke);        g2.draw(arc);      }      if (state.getInfo() != null) {        EntityCollection entities=state.getEntityCollection();        if (entities != null) {          String tip=null;          if (this.toolTipGenerator != null) {            tip=this.toolTipGenerator.generateToolTip(this.dataset,key);          }          String url=null;          if (this.urlGenerator != null) {            url=this.urlGenerator.generateURL(this.dataset,key,this.pieIndex);          }          PieSectionEntity entity=new PieSectionEntity(arc,this.dataset,this.pieIndex,section,key,tip,url);          entities.add(entity);        }      }    }  }  state.setLatestAngle(angle2);}  }
class C{  public void testColocatedOversize() throws Exception {  cacheMode=PARTITIONED;  nearEnabled=false;  check();}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("@");  buf.append(getTypeName());  if (members != null) {    buf.append("(");    Iterator mit=members.keySet().iterator();    while (mit.hasNext()) {      String name=(String)mit.next();      buf.append(name).append("=").append(getMemberValue(name));      if (mit.hasNext())       buf.append(", ");    }    buf.append(")");  }  return buf.toString();}  }
class C{  public LiteralAnnotationArgument createLiteralAnnotationArgument(){  LiteralAnnotationArgumentImpl literalAnnotationArgument=new LiteralAnnotationArgumentImpl();  return literalAnnotationArgument;}  }
class C{  public static X509Certificate readCertificate(String base64data) throws CertificateException, IOException {  return readCertificate(decodeBase64(base64data));}  }
class C{  public LoadScreenshotTask(Label label,ImageView imageView){  mLabel=label;  mImageView=imageView;}  }
class C{  public GameLevel createLevel(LevelVO levelVO,int backgroundColor,int nextBackgroundColor){  if (levelVO == null)   return null;  _backgroundColor=backgroundColor;  _nextBackgroundColor=nextBackgroundColor;  return createLevel(ClassUtil.getClassForName(levelVO.levelClass),ClassUtil.getClassForName(levelVO.controllerClass),levelVO.id < 1);}  }
class C{  public void add(RegularTimePeriod period,BigDecimal movingAverage){  if (!this.isEmpty()) {    MovingAverageItem item0=(MovingAverageItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new MovingAverageItem(period,movingAverage),true);}  }
class C{  public static final String cleanImageUrl(final String imageUrl){  notNull(imageUrl);  return imageUrl.replace('\'',' ').replace('\"',' ').trim();}  }
class C{  private void readGlobalNormalizationInformation(){  normMonthInQuarter.put("01","1");  normMonthInQuarter.put("02","1");  normMonthInQuarter.put("03","1");  normMonthInQuarter.put("04","2");  normMonthInQuarter.put("05","2");  normMonthInQuarter.put("06","2");  normMonthInQuarter.put("07","3");  normMonthInQuarter.put("08","3");  normMonthInQuarter.put("09","3");  normMonthInQuarter.put("10","4");  normMonthInQuarter.put("11","4");  normMonthInQuarter.put("12","4");  normMonthInSeason.put("","");  normMonthInSeason.put("01","WI");  normMonthInSeason.put("02","WI");  normMonthInSeason.put("03","SP");  normMonthInSeason.put("04","SP");  normMonthInSeason.put("05","SP");  normMonthInSeason.put("06","SU");  normMonthInSeason.put("07","SU");  normMonthInSeason.put("08","SU");  normMonthInSeason.put("09","FA");  normMonthInSeason.put("10","FA");  normMonthInSeason.put("11","FA");  normMonthInSeason.put("12","WI");  normDayInWeek.put("sunday","1");  normDayInWeek.put("monday","2");  normDayInWeek.put("tuesday","3");  normDayInWeek.put("wednesday","4");  normDayInWeek.put("thursday","5");  normDayInWeek.put("friday","6");  normDayInWeek.put("saturday","7");  normDayInWeek.put("Sunday","1");  normDayInWeek.put("Monday","2");  normDayInWeek.put("Tuesday","3");  normDayInWeek.put("Wednesday","4");  normDayInWeek.put("Thursday","5");  normDayInWeek.put("Friday","6");  normDayInWeek.put("Saturday","7");  normNumber.put("0","00");  normNumber.put("00","00");  normNumber.put("1","01");  normNumber.put("01","01");  normNumber.put("2","02");  normNumber.put("02","02");  normNumber.put("3","03");  normNumber.put("03","03");  normNumber.put("4","04");  normNumber.put("04","04");  normNumber.put("5","05");  normNumber.put("05","05");  normNumber.put("6","06");  normNumber.put("06","06");  normNumber.put("7","07");  normNumber.put("07","07");  normNumber.put("8","08");  normNumber.put("08","08");  normNumber.put("9","09");  normNumber.put("09","09");  normNumber.put("10","10");  normNumber.put("11","11");  normNumber.put("12","12");  normNumber.put("13","13");  normNumber.put("14","14");  normNumber.put("15","15");  normNumber.put("16","16");  normNumber.put("17","17");  normNumber.put("18","18");  normNumber.put("19","19");  normNumber.put("20","20");  normNumber.put("21","21");  normNumber.put("22","22");  normNumber.put("23","23");  normNumber.put("24","24");  normNumber.put("25","25");  normNumber.put("26","26");  normNumber.put("27","27");  normNumber.put("28","28");  normNumber.put("29","29");  normNumber.put("30","30");  normNumber.put("31","31");  normNumber.put("32","32");  normNumber.put("33","33");  normNumber.put("34","34");  normNumber.put("35","35");  normNumber.put("36","36");  normNumber.put("37","37");  normNumber.put("38","38");  normNumber.put("39","39");  normNumber.put("40","40");  normNumber.put("41","41");  normNumber.put("42","42");  normNumber.put("43","43");  normNumber.put("44","44");  normNumber.put("45","45");  normNumber.put("46","46");  normNumber.put("47","47");  normNumber.put("48","48");  normNumber.put("49","49");  normNumber.put("50","50");  normNumber.put("51","51");  normNumber.put("52","52");  normNumber.put("53","53");  normNumber.put("54","54");  normNumber.put("55","55");  normNumber.put("56","56");  normNumber.put("57","57");  normNumber.put("58","58");  normNumber.put("59","59");  normNumber.put("60","60");  normMonthName.put("january","01");  normMonthName.put("february","02");  normMonthName.put("march","03");  normMonthName.put("april","04");  normMonthName.put("may","05");  normMonthName.put("june","06");  normMonthName.put("july","07");  normMonthName.put("august","08");  normMonthName.put("september","09");  normMonthName.put("october","10");  normMonthName.put("november","11");  normMonthName.put("december","12");}  }
class C{  public static Drawable generateRoundBorderDrawable(float radii,int pressColor,int defaultColor){  Shape roundRectShape=new RoundRectShape(new float[]{radii,radii,radii,radii,radii,radii,radii,radii},null,null);  ShapeDrawable shopDrawablePress=new ShapeDrawable(roundRectShape);  shopDrawablePress.getPaint().setColor(pressColor);  ShapeDrawable shopDrawableNormal=new ShapeDrawable(roundRectShape);  shopDrawableNormal.getPaint().setColor(defaultColor);  StateListDrawable bgStateDrawable=new StateListDrawable();  bgStateDrawable.addState(new int[]{android.R.attr.state_pressed},shopDrawablePress);  bgStateDrawable.addState(new int[]{},shopDrawableNormal);  return bgStateDrawable;}  }
class C{  public boolean isInternalUseInventory(){  return getQtyInternalUse().signum() != 0;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public FocusManager(Document doc){  document=doc;  addEventListeners(doc);}  }
class C{  public Matrix4d lerp(Matrix4dc other,double t){  return lerp(other,t,this);}  }
class C{  public void addReorganizeEventListener(WalletReorganizeEventListener listener){  addReorganizeEventListener(Threading.USER_THREAD,listener);}  }
class C{  public static boolean isKnown(BytecodeInstruction instruction){  return isKnownAsDefinition(instruction) || isKnownAsUse(instruction);}  }
class C{  public MiniDrawer withEnableSelectedMiniDrawerItemBackground(boolean enableSelectedMiniDrawerItemBackground){  this.mEnableSelectedMiniDrawerItemBackground=enableSelectedMiniDrawerItemBackground;  return this;}  }
class C{  public void paintTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBorder(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBorder(context,g,0,0,w,h,transform);  }}  }
class C{  public static char reverseBytes(char ch){  return (char)(((ch & 0xFF00) >> 8) | (ch << 8));}  }
class C{  private static List<ResultPoint[]> detect(boolean multiple,BitMatrix bitMatrix){  List<ResultPoint[]> barcodeCoordinates=new ArrayList<>();  int row=0;  int column=0;  boolean foundBarcodeInRow=false;  while (row < bitMatrix.getHeight()) {    ResultPoint[] vertices=findVertices(bitMatrix,row,column);    if (vertices[0] == null && vertices[3] == null) {      if (!foundBarcodeInRow) {        break;      }      foundBarcodeInRow=false;      column=0;      for (      ResultPoint[] barcodeCoordinate : barcodeCoordinates) {        if (barcodeCoordinate[1] != null) {          row=(int)Math.max(row,barcodeCoordinate[1].getY());        }        if (barcodeCoordinate[3] != null) {          row=Math.max(row,(int)barcodeCoordinate[3].getY());        }      }      row+=ROW_STEP;      continue;    }    foundBarcodeInRow=true;    barcodeCoordinates.add(vertices);    if (!multiple) {      break;    }    if (vertices[2] != null) {      column=(int)vertices[2].getX();      row=(int)vertices[2].getY();    } else {      column=(int)vertices[4].getX();      row=(int)vertices[4].getY();    }  }  return barcodeCoordinates;}  }
class C{  @Override public void activate(){  resource=getResource();  request=getRequest();  String path=request.getParameter("post");  if (StringUtils.isNotBlank(path)) {    getBlog(path);  }}  }
class C{  public void remove(int start,int len){  final int end=start + len;  if (end > size) {    throw new ArrayIndexOutOfBoundsException(size);  }  System.arraycopy(data,end,data,start,size - end);  size-=len;}  }
class C{  public boolean hasMuchoStuff(){  return fieldSetFlags()[2];}  }
class C{  public OrganizationDataException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Deprecated public ResumableHttpFileUploader(URL url,File file,ExecutorService executor,ProgressListener progressListener,long chunkSize,long progressIntervalMillis) throws IOException {  this(new Builder().setUrl(url).setFile(file).setExecutorService(executor).setProgressListener(progressListener).setChunkSize(chunkSize).setProgressIntervalMillis(progressIntervalMillis));}  }
class C{  public IXMLElement createPCDataElement(){  return new XMLElement();}  }
class C{  protected LoadUnit(){}  }
class C{  public static PdfFont resolveFont(final GraphicsState gs,final PdfStreamDecoder pdfStreamDecoder,String fontID,final PdfFontFactory pdfFontFactory,final PdfObjectCache cache){  PdfFont restoredFont;  String fontKey=fontID;  if (gs != null && cache.resolvedFonts.get("t-" + fontID) != null) {    fontKey=fontID + ':' + gs.nonstrokeColorSpace.getColor().getRGB();  }  restoredFont=cache.resolvedFonts.get(fontKey);  if (restoredFont == null) {    PdfObject newFont=null;    byte[] newFontData=cache.unresolvedFonts.get(fontID);    if (newFontData == null) {      cache.directFonts.remove(fontID);    } else {      newFont=getFontObjectFromRefOrDirect(pdfStreamDecoder.currentPdfFile,newFontData);    }    if (pdfStreamDecoder.parserOptions.isFlattenedForm() && newFont == null) {      newFont=new FontObject("0 0 R");      fontID=resolveFlattenedFont(fontID,newFont);    }    if (newFont != null) {      pdfStreamDecoder.currentPdfFile.checkResolved(newFont);      try {        org.jpedal.render.DynamicVectorRenderer current=pdfStreamDecoder.current;        boolean fallbackToArial=false;        final boolean isHTML=current.isHTMLorSVG();        if (isHTML && !current.getBooleanValue(DynamicVectorRenderer.IsRealText)) {          fallbackToArial=true;        }        restoredFont=pdfFontFactory.createFont(fallbackToArial,newFont,fontID,pdfStreamDecoder.objectStoreStreamRef,pdfStreamDecoder.parserOptions.isRenderPage(),pdfStreamDecoder.errorTracker,pdfStreamDecoder.isPrinting,isHTML);        if (isHTML) {          HTMLFontHandler.processFont(restoredFont,current,newFont,pdfStreamDecoder.currentPdfFile);        }      } catch (      final PdfException e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    }    if (restoredFont != null && !pdfStreamDecoder.parserOptions.isFlattenedForm()) {      pdfStreamDecoder.cache.resolvedFonts.put(fontKey,restoredFont);      if (restoredFont.getFontType() == StandardFonts.TYPE3) {        pdfStreamDecoder.cache.resolvedFonts.put("t-" + fontID,new PdfFont());      }    }  }  return restoredFont;}  }
class C{  public boolean equals(Object object){  if (object == this)   return true;  if (object instanceof QName) {    QName qname=(QName)object;    String thisnamespace=getNamespaceURI();    String thatnamespace=qname.getNamespaceURI();    return getLocalName().equals(qname.getLocalName()) && (((null != thisnamespace) && (null != thatnamespace)) ? thisnamespace.equals(thatnamespace) : ((null == thisnamespace) && (null == thatnamespace)));  } else   return false;}  }
class C{  private void testAlias() throws SQLException {  stat.execute("create schema s1");  stat.execute("CREATE ALIAS S1.REVERSE AS $$ " + "String reverse(String s) {" + "   return new StringBuilder(s).reverse().toString();"+ "} $$;");  stat.execute("alter schema s1 rename to s2");  ResultSet rs=stat.executeQuery("CALL S2.REVERSE('1234')");  assertTrue(rs.next());  assertEquals("4321",rs.getString(1));  if (!config.memory) {    conn.close();    conn=getConnection(getTestName());    stat=conn.createStatement();    stat.executeQuery("CALL S2.REVERSE('1234')");  }  stat.execute("drop schema s2");}  }
class C{  protected void checkCapacity(){  if (size >= threshold) {    int newCapacity=data.length * 2;    if (newCapacity <= MAXIMUM_CAPACITY) {      ensureCapacity(newCapacity);    }  }}  }
class C{  public Checksum(int new_cksumType,byte[] data) throws KdcErrException, KrbCryptoException {  cksumType=new_cksumType;  CksumType cksumEngine=CksumType.getInstance(cksumType);  if (!cksumEngine.isSafe()) {    checksum=cksumEngine.calculateChecksum(data,data.length);  } else {    throw new KdcErrException(Krb5.KRB_AP_ERR_INAPP_CKSUM);  }}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  if (ws == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  String m_UpdateResult="";  WebDoc doc=null;  m_ctx=wsc.ctx;  m_AD_Window_ID=WebUtil.getParameterAsInt(request,"AD_Window_ID");  m_AD_Client_ID=WebUtil.getParameterAsInt(request,"AD_Client_ID");  m_AD_Org_ID=WebUtil.getParameterAsInt(request,"AD_Org_ID");  m_AD_User_ID=WebUtil.getParameterAsInt(request,"AD_User_ID");  m_Attribute=WebUtil.getParameter(request,"Attribute");  m_DisplayAttribute=WebUtil.getParameter(request,"DisplayAtrribute");  m_Value=WebUtil.getParameter(request,"Value");  m_DisplayValue=WebUtil.getParameter(request,"DisplayValue");  m_DisplayType=WebUtil.getParameterAsInt(request,"DisplayType");  m_role=MRole.getDefault(wsc.ctx,false);  m_Client=false;  m_User=false;  m_Window=false;  m_Org=false;  doc=createParameterPage(ws,wsc,request,m_UpdateResult);  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public HashCodeBuilder append(final long value){  iTotal=iTotal * iConstant + ((int)(value ^ (value >> 32)));  return this;}  }
class C{  public void enableAnnotations(int annotationWidth,boolean verbose){  if ((annotations != null) || (cursor != 0)) {    throw new RuntimeException("cannot enable annotations");  }  if (annotationWidth < 40) {    throw new IllegalArgumentException("annotationWidth < 40");  }  int hexCols=(((annotationWidth - 7) / 15) + 1) & ~1;  if (hexCols < 6) {    hexCols=6;  } else   if (hexCols > 10) {    hexCols=10;  }  this.annotations=new ArrayList<Annotation>(1000);  this.annotationWidth=annotationWidth;  this.hexCols=hexCols;  this.verbose=verbose;}  }
class C{  public boolean hasCurrencyCode(){  return super.hasAttribute(CURRENCY_CODE);}  }
class C{  public void validateTickUnit(){  double newTickUnit;  try {    newTickUnit=Double.parseDouble(this.manualTickUnit.getText());  } catch (  NumberFormatException e) {    newTickUnit=this.manualTickUnitValue;  }  if (newTickUnit > 0.0 && newTickUnit < 360.0) {    this.manualTickUnitValue=newTickUnit;  }  this.manualTickUnit.setText(Double.toString(this.manualTickUnitValue));}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public static Document createDocumentFromXml(String xmlContent) throws SAXException, ParserConfigurationException, IOException {  return createDocumentFromReader(new StringReader(xmlContent));}  }
class C{  public static void diluteLeisureOnly(final Scenario scenario,final Coord center,final double radius){  log.info("Start dilution with center " + center + " and radius "+ radius);  final Set<Id<Person>> personsToKeep=new HashSet<>();  fillSetWithIntersectingPersons(personsToKeep,scenario,center,radius);  fillSetWithLeisureAltersOfSet(personsToKeep,scenario);  final Collection<Id<Person>> pruned=prunePopulation(scenario,personsToKeep);  pruneSocialNetwork(pruned,scenario);  log.info("Finished dilution.");}  }
class C{  public void put(String key,Long value){  mValues.put(key,value);}  }
class C{  public MessageFactoryImpl(){}  }
class C{  public SerializerRegistry registerAbstract(Class<?> abstractType,TypeSerializerFactory factory){  return registerAbstract(abstractType,calculateTypeId(abstractType),factory);}  }
class C{  public static void createRegion() throws Exception {  HARegionDUnitTest test=new HARegionDUnitTest();  cache=test.createCache();  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  HARegion.getInstance(REGION_NAME,(GemFireCacheImpl)cache,null,factory.create());}  }
class C{  public CNativeFunctionViewsNodeComponent(final JTree projectTree,final IDatabase database,final INaviModule module,final IViewContainer container){  super(new CFunctionViewsTable(projectTree,database,module,container),new CFunctionFilterCreator(container),new CViewFilterHelp());  updateBorderText(String.format("%d Native Functions",module.getFunctionCount()));  addListener(m_filterFieldListener);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,Math.sqrt(z1));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void addAnnotations(TypeWithAnnotations type,Set<AnnotationType> annotations,Events events){  for (  AnnotationType annotationType : annotations) {    AnnotationType lookupUp=getOrAddReferredType(annotationType,events,AnnotationType.class);    fireAndSave(new ReferenceEvent((Type)type,lookupUp,ReferenceType.ANNOTATION),events);    type.addAnnotation(lookupUp);  }}  }
class C{  private boolean isIdentifierChar(){  if (_len >= 0 && _pos >= _len) {    return false;  }  char ch=_working[_pos];  return Character.isUnicodeIdentifierStart(ch) || Character.isDigit(ch) || Utils.isIdentifierHelperChar(ch);}  }
class C{  public boolean is_set_system(){  return this.system != null;}  }
class C{  @ShortCircuit("rightNode") protected boolean needsRightNode(boolean left){  return left;}  }
class C{  public static double distL2(int[] h1,int[] h2){  assert (h1.length == h2.length);  double sum=0d;  for (int i=0; i < h1.length; i++) {    sum+=(h1[i] - h2[i]) * (h1[i] - h2[i]);  }  return Math.sqrt(sum);}  }
class C{  public void close() throws IOException {  mNameData.close();  mPointers.close();}  }
class C{  protected void fireEntityReference(String name) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name,(Attributes)null);  }}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") @Override public void run(){  while (true) {    try {      if (!cleanUp(queue.remove())) {        break;      }    } catch (    InterruptedException e) {    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public IMouseState createEdgeLabelEnterState(final EdgeLabel l,final MouseEvent event){  final CEdgeLabelEnterState<NodeType,EdgeType> state=new CEdgeLabelEnterState<NodeType,EdgeType>(this,m_graph,l);  m_factory.createEdgeLabelEnterAction().execute(state,event);  return state;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.WITH_STATEMENT__EXPRESSION:    setExpression((Expression)null);  return;case N4JSPackage.WITH_STATEMENT__STATEMENT:setStatement((Statement)null);return;}super.eUnset(featureID);}  }
class C{  public static boolean createMqttUsernameAndPasswordDialog(final Object owner,final String connectionName,final UserCredentials userCredentials){  final Pair<String,String> userInfo=new Pair<String,String>(userCredentials.getUsername(),BaseConfigurationUtils.decodePassword(userCredentials.getPassword()));  Optional<Pair<String,String>> response=DialogFactory.createUsernameAndPasswordDialog("MQTT user credentials","User credentials for connection " + connectionName,userInfo);  if (response.isPresent()) {    userCredentials.setUsername(response.get().getKey());    userCredentials.setPassword(BaseConfigurationUtils.encodePassword(response.get().getValue()));    return true;  }  return false;}  }
class C{  public JPanelEmployeePresence(){  initComponents();  this.setVisible(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.144 -0400",hash_original_method="CF029C491CF39BC7EC2369A673A8CBAD",hash_generated_method="E71E79F50A6A604F806D93F89997FF87") public static String byteCountToDisplaySize(BigInteger size){  String displaySize;  if (size.divide(ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_EB_BI)) + " EB";  } else   if (size.divide(ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_PB_BI)) + " PB";  } else   if (size.divide(ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_TB_BI)) + " TB";  } else   if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_GB_BI)) + " GB";  } else   if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_MB_BI)) + " MB";  } else   if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_KB_BI)) + " KB";  } else {    displaySize=String.valueOf(size) + " bytes";  }  return displaySize;}  }
class C{  void log(int op,String fileName){  log(op,fileName,null,0);}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("C_Charge_Acct");}  }
class C{  public void viewNotification(){  WebElement unReadNotificationTab=driver.findElement(By.id(uiElementMapper.getElement("emm.notification.unread.identifier")));  WebElement notificationTab=driver.findElement(By.id(uiElementMapper.getElement("emm.notification.all.identifier")));  if (!unReadNotificationTab.isDisplayed()) {    throw new IllegalStateException("Notification View must be having two tabs");  }  if (!notificationTab.isDisplayed()) {    throw new IllegalStateException("Notification View must be having two tabs");  }}  }
class C{  public boolean isSpatial(){  return spatial;}  }
class C{  public TernaryTreeNode insert(TernaryTreeNode currentNode,CharSequence s,Object val,int x){  if (s == null || s.length() <= x) {    return currentNode;  }  if (currentNode == null) {    TernaryTreeNode newNode=new TernaryTreeNode();    newNode.splitchar=s.charAt(x);    currentNode=newNode;    if (x < s.length() - 1) {      currentNode.eqKid=insert(currentNode.eqKid,s,val,x + 1);    } else {      currentNode.token=s.toString();      currentNode.val=val;      return currentNode;    }  } else   if (currentNode.splitchar > s.charAt(x)) {    currentNode.loKid=insert(currentNode.loKid,s,val,x);  } else   if (currentNode.splitchar == s.charAt(x)) {    if (x < s.length() - 1) {      currentNode.eqKid=insert(currentNode.eqKid,s,val,x + 1);    } else {      currentNode.token=s.toString();      currentNode.val=val;      return currentNode;    }  } else {    currentNode.hiKid=insert(currentNode.hiKid,s,val,x);  }  return currentNode;}  }
class C{  public UpdateDownloadRequest build(){  return new UpdateDownloadRequest(mContext,configURL,currentReleaseVersion,currentNativeVersion,requestHeaders);}  }
class C{  private void resendChatMessage(final ChatMessage msg) throws PayloadException, NetworkException, FileAccessException {synchronized (mLock) {    String msgId=msg.getMessageId();    String mimeType=msg.getMimeType();    if (sLogger.isActivated()) {      sLogger.debug("Resend chat message, msgId " + msgId + " and mimeType "+ mimeType);    }    mImService.acceptStoreAndForwardMessageSessionIfSuchExists(mContact);    final OneToOneChatSession session=mImService.getOneToOneChatSession(mContact);    if (session == null) {      if (!mImService.isChatSessionAvailable()) {        if (sLogger.isActivated()) {          sLogger.debug("Cannot start new session since to limit of sessions is reached. MessageId=".concat(msgId));        }        setChatMessageStatusAndTimestamp(msg,Status.QUEUED);        return;      }      if (sLogger.isActivated()) {        sLogger.debug("Core session is not yet established: initiate a new session to send the message");      }      setChatMessageStatusAndTimestamp(msg,Status.SENDING);      sendChatMessageInNewSession(msg);      return;    }    if (session.isMediaEstablished()) {      if (sLogger.isActivated()) {        sLogger.debug("Core session is established: use existing one to send the message");      }      setChatMessageStatusAndTimestamp(msg,Status.SENDING);      sendChatMessageWithinSession(session,msg);      return;    }    if (session.isInitiatedByRemote()) {      setChatMessageStatusAndTimestamp(msg,Status.QUEUED);      if (sLogger.isActivated()) {        sLogger.debug("Accept one-to-one chat session with contact ".concat(mContact.toString()));      }      session.acceptSession();    } else {      if (!mImService.isChatSessionAvailable()) {        if (sLogger.isActivated()) {          sLogger.debug("Cannot start new session since to limit of sessions is reached. MessageId=".concat(msgId));        }        setChatMessageStatusAndTimestamp(msg,Status.QUEUED);        return;      }      setChatMessageStatusAndTimestamp(msg,Status.SENDING);      sendChatMessageInNewSession(msg);    }  }}  }
