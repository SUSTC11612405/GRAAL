class C{  public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  System.out.write(buf,offset,length);  System.out.flush();}  }
class C{  public HashCodeBuilder appendSuper(int superHashCode){  iTotal=iTotal * iConstant + superHashCode;  return this;}  }
class C{  public Binding(String name,String className,Object obj){  super(name,className);  this.boundObj=obj;}  }
class C{  protected Float wrapValue(float k){  return new Float(k);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public I18nFormatCall createFormatForCall(MethodInvocationTree tree,MethodInvocationNode node,I18nFormatterAnnotatedTypeFactory atypeFactory){  ExecutableElement method=TreeUtils.elementFromUse(tree);  AnnotatedExecutableType methodAnno=atypeFactory.getAnnotatedType(method);  for (  AnnotatedTypeMirror paramType : methodAnno.getParameterTypes()) {    if (paramType.getAnnotation(I18nFormatFor.class) != null) {      return atypeFactory.treeUtil.new I18nFormatCall(tree,node,atypeFactory);    }  }  return null;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    if (zzMarkedPosL > zzStartRead) {switch (zzBufferL[zzMarkedPosL - 1]) {case '\n':case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        zzAtBOL=true;      break;case '\r':    if (zzMarkedPosL < zzEndReadL)     zzAtBOL=zzBufferL[zzMarkedPosL] != '\n'; else     if (zzAtEOF)     zzAtBOL=false; else {      boolean eof=zzRefill();      zzMarkedPosL=zzMarkedPos;      zzEndReadL=zzEndRead;      zzBufferL=zzBuffer;      if (eof)       zzAtBOL=false; else       zzAtBOL=zzBufferL[zzMarkedPosL] != '\n';    }  break;default :zzAtBOL=false;}}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;if (zzAtBOL) zzState=ZZ_LEXSTATE[zzLexicalState + 1]; else zzState=ZZ_LEXSTATE[zzLexicalState];zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {  zzInput=YYEOF;  break zzForAction;} else {  zzInput=zzBufferL[zzCurrentPosL++];}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{addToken(Token.RESERVED_WORD);}case 16:break;case 1:{addToken(Token.IDENTIFIER);}case 17:break;case 12:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 18:break;case 9:{addToken(Token.FUNCTION);}case 19:break;case 5:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 20:break;case 14:{addToken(Token.VARIABLE);}case 21:break;case 7:{addToken(Token.WHITESPACE);}case 22:break;case 10:{addToken(Token.PREPROCESSOR);}case 23:break;case 15:{addToken(Token.DATA_TYPE);}case 24:break;case 4:{addToken(Token.ERROR_CHAR);}case 25:break;case 8:{addToken(Token.OPERATOR);}case 26:break;case 2:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 27:break;case 13:{addToken(Token.LITERAL_CHAR);}case 28:break;case 3:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 29:break;case 6:{addNullToken();return firstToken;}case 30:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 669:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public TaggingClient(String host,int port){  this.host=host;  this.port=port;}  }
class C{  public void registerCollectionStateWatcher(String collection,CollectionStateWatcher stateWatcher){  AtomicBoolean watchSet=new AtomicBoolean(false);  collectionWatches.compute(collection,null);  if (watchSet.get()) {    new StateWatcher(collection).refreshAndWatch();  }  DocCollection state=clusterState.getCollectionOrNull(collection);  if (stateWatcher.onStateChanged(liveNodes,state) == true) {    removeCollectionStateWatcher(collection,stateWatcher);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void notDiscretized(Node node){  specs.remove(node);}  }
class C{  public static int binarySearch(long[] array,int startIndex,int endIndex,long value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  private int checkLink(final SpannableStringBuilder out,final String in,int start){  int pos=start + 1;  final StringBuilder temp=new StringBuilder();  temp.setLength(0);  pos=Utils.readMdLinkId(temp,in,pos);  if (pos < start) {    return -1;  }  String name=temp.toString();  LinkRef lr;  final int oldPos=pos++;  pos=Utils.skipSpaces(in,pos);  if (pos < start) {    lr=this.linkRefs.get(name.toLowerCase());    if (lr != null) {      pos=oldPos;    } else {      return -1;    }  } else   if (in.charAt(pos) == '[') {    pos++;    temp.setLength(0);    pos=Utils.readRawUntil(temp,in,pos,']');    if (pos < start) {      return -1;    }    final String id=temp.length() > 0 ? temp.toString() : name;    lr=this.linkRefs.get(id.toLowerCase());  } else {    lr=this.linkRefs.get(name.toLowerCase());    if (lr != null) {      pos=oldPos;    } else {      return -1;    }  }  if (lr == null) {    return -1;  }  if (lr.hasHttpScheme()) {    this.config.decorator.openLink(out);    this.recursiveEmitLine(out,name,0,MarkToken.LINK);    this.config.decorator.closeLink(out,lr.link);  } else {    this.recursiveEmitLine(out,name,0,MarkToken.LINK);  }  return pos;}  }
class C{  public double computeAverageLocal(int timeSeries[][][],int agentIndex1,int agentIndex2){  initialise();  addObservations(timeSeries,agentIndex1,agentIndex2);  return computeAverageLocalOfObservations();}  }
class C{  public static RecipeFragment newInstance(Recipe recipe,int sectionNumber){  RecipeFragment fragment=new RecipeFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public static void joinScopes(Scope source,Scope dest){  Map<String,Symbol> src=source.ensureSymbolTable();  Map<String,Symbol> dst=dest.ensureSymbolTable();  if (!Collections.disjoint(src.keySet(),dst.keySet())) {    codeBug();  }  for (  Map.Entry<String,Symbol> entry : src.entrySet()) {    Symbol sym=entry.getValue();    sym.setContainingTable(dest);    dst.put(entry.getKey(),sym);  }}  }
class C{  public SendByteArrayToNode(byte[] objArray,Class classToSend,Context ctx,boolean isSticky){  objectArray=objArray;  context=ctx;  sticky=isSticky;  clazzToSend=classToSend;  if ((objectArray.length / 1024) > 100) {    throw new RuntimeException("Object is too big to push it via Google Play Services");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public String toString(){  return "[Annihilate " + oldMarker + " @ ("+ col+ ","+ row+ ") with "+ player.getMark()+ "]";}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  if (par2 >= 36 && par2 <= height - 57)   if (par1 >= width / 2 + 140 || par1 <= width / 2 - 126)   bindList.elementClicked(-1,false,0,0);  super.mouseClicked(par1,par2,par3);}  }
class C{  public void doWork(ServletRequest req,ServletResponse res) throws IOException {  HttpServletRequest request=(HttpServletRequest)req;  HttpServletResponse response=(HttpServletResponse)res;  HttpSession session=request.getSession();  String idioma=getIdioma(request);  if (idioma == null) {    idioma=IdiomaUtils.getInstance().getIdioma(request);  }  Long numIdioma=getNumIdioma(request);  if (numIdioma == null) {    numIdioma=IdiomaUtils.getInstance().getNumIdioma(request);  }  try {    if (logger.isDebugEnabled()) {      logger.debug("Se procede a hacer logout desde la jsp" + request.getRequestURI());    }    doLogout(request.getSession());  } catch (  Exception e) {    logger.error("Error haciendo logout:",e);  } finally {    session.invalidate();  }  success(request,response,idioma,numIdioma.toString());}  }
class C{  public static void stopTimer(String name){  long stopTime=System.nanoTime();  Long startTime=openTimers.remove(name);  if (startTime == null) {    throw new IllegalArgumentException("timer does not exist");  }  SummaryStatistics statistics=data.get(name);  if (statistics == null) {    statistics=new SummaryStatistics();    data.put(name,statistics);  }  statistics.addValue(stopTime - startTime);}  }
class C{  void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=createShader("org/lwjgl/demo/opengl/raytracing/ssboTriangleStacklessKdTree.glsl",GL_COMPUTE_SHADER);  int random=createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_COMPUTE_SHADER);  int randomCommon=createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_COMPUTE_SHADER,"330");  glAttachShader(program,cshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x9B1F1F36,version=150) public int sceHttpCreateTemplate(PspString agent,int unknown1,int unknown2){  HttpTemplate httpTemplate=new HttpTemplate();  httpTemplate.setAgent(agent.getString());  return httpTemplate.getId();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (!Sage.isNonLocalClient())   return "FAILED - INVALID API CALL - Not a non-localhost SageTVClient";  if (pluggy != null)   return sage.plugin.CorePluginManager.getInstance().installPlugin(pluggy,stack.getUIMgr(),null);  return "FAILED - NULL";}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public static String buildSelectorFromAttributeType(String attributeType){  StringBuilder strb=new StringBuilder();  strb.append(OPEN_BRACKET);  strb.append(attributeType);  strb.append(CLOSE_BRACKET);  return strb.toString();}  }
class C{  public static void main(String[] args){  launch(args);}  }
class C{  public void geneTranspose(int genome[][],MersenneTwisterFast srt){  if (genome.length > 1) {    int gene_index=srt.nextInt(genome.length - 1) + 1;    int temp[]=genome[0];    genome[0]=genome[gene_index];    genome[gene_index]=temp;  }}  }
class C{  public static DeleteParticipant[] loadDeleteParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,DeleteArguments arguments,IParticipantDescriptorFilter filter,String[] affectedNatures,SharableParticipants shared){  RefactoringParticipant[] participants=fgDeleteInstance.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared);  DeleteParticipant[] result=new DeleteParticipant[participants.length];  System.arraycopy(participants,0,result,0,participants.length);  return result;}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  @Override public boolean removeAll(@NotNull Collection<?> c){  if (c.isEmpty())   return false;  while (true) {    Object[] elements=array;    Object[] newElements=createArrayRemoveAll(elements,c);    if (newElements == null)     return false;    if (replaceArray(elements,newElements))     return true;  }}  }
class C{  private static void usage(){  System.out.printf("Usage: %n");  System.out.printf("\t%s [%s <n>] [%s] [%s] [%s <criterias>] <Column Family Name>%n",Command.LIST.name().toLowerCase(),LIST_LIMIT,INACTIVE,MODIFICATION_TIME,FILTER);  System.out.printf("\t\t%s <n>\t List paginated with a limit of <n>, " + "if <n> is missing, default is 100.%n",LIST_LIMIT);  System.out.printf("\t\t%s\t List including inactive=true object ids.%n",INACTIVE);  System.out.printf("\t\t%s\t\t Show the latest modified field of each record.%n",MODIFICATION_TIME);  System.out.printf("\t\t%s <criterias>\t Filter with <criterias>, e.g, -filter resource=\"<resource id>\" -filter pending=true.%n",FILTER);  System.out.printf("\t%s [%s] <Column Family Name> <id>%n",Command.QUERY.name().toLowerCase(),MODIFICATION_TIME);  System.out.printf("\t\t%s\t\t Show the latest modified field of the record.%n",MODIFICATION_TIME);  System.out.printf("\t%s <%s/%s/%s> <file_prefix> [<YEAR/MONTH/DAY/HOUR>]%n",Command.LIST.name().toLowerCase(),TYPE_EVENTS,TYPE_STATS,TYPE_AUDITS);  System.out.printf("\t%s [-force] <Column Family Name> <id/-file file_path>%n",Command.DELETE.name().toLowerCase());  System.out.printf("\t\t%s <file_path>\tEvery single line in this file is an object id, multiple object ids should be separated to different line.%n",DELETE_FILE);  System.out.printf("\t%s <Column Family Name> [id]%n",Command.SHOW_DEPENDENCY.name().toLowerCase());  System.out.printf("\t\t%s\t\t Print out the exact dependency references for this specific id if exist.%n","id");  System.out.printf("\t%s [%s] <Column Family Name>%n",Command.COUNT.name().toLowerCase(),INACTIVE);  System.out.printf("\t\t%s\t Count including inactive object ids.%n",INACTIVE);  System.out.printf("\t%s <%s/%s/%s> <START TIME> <END TIME>[eg:2012/05/18/15]%n",Command.GET_RECORDS.name().toLowerCase(),"Events","Stats","AuditLogs");  System.out.printf("\t%s %s %s %s %s %s%n",Command.GLOBALLOCK.name().toLowerCase(),"CREATE","<lock name>","<owner>","(<mode>)","(<timeout>)");  System.out.printf("\t\tNote: For <mode>, could be GL_NodeSvcShared_MODE or GL_VdcShared_MODE(default).%n");  System.out.printf("\t\t    : For <timeout>, unit is millisecond and 0 (default) means never expired.%n");  System.out.printf("\t%s %s %s %n",Command.GLOBALLOCK.name().toLowerCase(),"READ","<lock name>");  System.out.printf("\t%s %s %s %n",Command.GLOBALLOCK.name().toLowerCase(),"DELETE","<lock name>");  System.out.printf("\t%s <schema version> <dump filename>%n",Command.DUMP_SCHEMA.name().toLowerCase());  System.out.printf("\t%s <dump filename>%n",Command.DUMP_SECRETKEY.name().toLowerCase());  System.out.printf("\t%s <restore filename>%n",Command.RESTORE_SECRETKEY.name().toLowerCase());  System.out.printf("\t%s [%s] [%s] Recover Vdc.%n",Command.RECOVER_VDC_CONFIG.name().toLowerCase(),RECOVER_DUMP,RECOVER_LOAD);  System.out.printf("\t%s [%s] [%s] Geodb blacklist.%n",Command.GEOBLACKLIST.name().toLowerCase(),"-reset|set","<vdc short id>");  System.out.printf("\t%s [Column Family Name]\tCheck data consistency of the whole database%n",Command.CHECK_DB.name().toLowerCase());  System.out.printf("\t\tColumn Family Name\t Only check specific CF.%n");  System.out.printf("\t%s -db|-geodb [-new] [-crossVdc]%n",Command.REPAIR_DB.name().toLowerCase());  System.out.printf("\t\tNote: %s option can only be executed as %s user%n",Command.REPAIR_DB.name().toLowerCase(),STORAGEOS_USER);  System.out.printf("\t -bypassMigrationCheck%n");  System.out.printf("\t\tNote: it's used with other commands together only when migration fail, dbutils still work even migration fail if you pass this option%n");  System.out.printf("\t%s <file_path>%n",Command.REBUILD_INDEX.name().toLowerCase());  System.out.printf("\t\t Note: use the genereated file to rebuild the index%n");  System.out.printf("\t%s %s <Column Family Name>%n",Command.REBUILD_INDEX.name().toLowerCase(),CF_NAME);  System.out.printf("\t\t Note: rebuild specific CF.%n");  System.out.printf("\t%s <file_path>%n",Command.RUN_MIGRATION_CALLBACK.name().toLowerCase());  System.out.printf("\t\t Note: run specified migration callback.%n");}  }
class C{  public EntityQuery distinct(boolean distinct){  this.distinct=distinct;  return this;}  }
class C{  @LargeTest public void testAudioTrackEnableDucking() throws Exception {  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  boolean flagForException=false;  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);  mVideoEditor.addAudioTrack(audioTrack);  assertFalse("Audio Ducking Disabled by default",audioTrack.isDuckingEnabled());  audioTrack.enableDucking(45,70);  assertTrue("Audio Ducking Enabled",audioTrack.isDuckingEnabled());  assertEquals("Audio Ducking Threshold",45,audioTrack.getDuckingThreshhold());  assertEquals("Audio Ducking Volume",70,audioTrack.getDuckedTrackVolume());  audioTrack.enableDucking(85,70);  assertEquals("Audio Ducking Threshold",85,audioTrack.getDuckingThreshhold());  assertEquals("Audio Ducking Volume",70,audioTrack.getDuckedTrackVolume());  try {    audioTrack.enableDucking(91,70);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Enable ducking threshold > 90",flagForException);  flagForException=false;  try {    audioTrack.enableDucking(90,101);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Enable ducking volume > 100",flagForException);  flagForException=false;  try {    audioTrack.enableDucking(91,101);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Enable ducking volume > 100 and threshold > 91",flagForException);  flagForException=false;  try {    audioTrack.enableDucking(-1,100);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Enable ducking threshold < 0",flagForException);  flagForException=false;  try {    audioTrack.enableDucking(1,-1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Enable ducking lowVolume < 0",flagForException);  flagForException=false;  try {    audioTrack.enableDucking(0,50);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertFalse("Enable ducking threshold = 0",flagForException);}  }
class C{  public synchronized MetaStore storeConfiguration(Configuration configuration){  LOGGER.debug("Store configuration {}",configuration);  serializer.writeObject(configuration.members(),buffer.position(12).writeByte(1).writeLong(configuration.index()).writeLong(configuration.term()).writeLong(configuration.time()));  buffer.flush();  return this;}  }
class C{  public Object computeValidationData(EvolutionState state,VectorIndividual[] parents,int thread){  return null;}  }
class C{  public boolean isModified(){  return _modified;}  }
class C{  public JavaDBStorageEngine(String name,ConnectionPoolDataSource dataSource) throws PersistException {  super();  this.name=name;  this.dbTableName=name.replace('.','_');  this.dataSource=dataSource;  try {    initTable();  } catch (  SQLException sqle) {    throw new PersistException("Could not initialize persistent storage",sqle);  }}  }
class C{  private void reset(Address start,Address end,int firstIndex,int blockSize,int blockNum){  reset(start,end,firstIndex,blockNum);  blockSize_=blockSize;  if (DEBUG)   dump();}  }
class C{  public static String streamToString(final InputStream input){  final String httpStreamEncoding="UTF-8";  final String endOfFile="\\A";  final Scanner scanner=new Scanner(input,httpStreamEncoding).useDelimiter(endOfFile);  return scanner.next();}  }
class C{  public UniversalMembershipListenerAdapter(int historySize){  if (historySize < 10) {    throw new IllegalArgumentException(LocalizedStrings.UniversalMembershipListenerAdapter_ARGUMENT_HISTORYSIZE_MUST_BE_BETWEEN_10_AND_INTEGERMAX_INT_0.toLocalizedString(Integer.valueOf(historySize)));  }  this.historySize=historySize;  this.eventHistory=new LinkedList<String>();  this.eventJoined=new HashMap<String,Boolean>();  ClientMembership.registerClientMembershipListener(this.clientMembershipListener);}  }
class C{  private void removeHostData(URI hosturi,List<URI> newInitiators){  newInitiators.removeAll(ComputeSystemHelper.getChildrenUris(_dbClient,hosturi,Initiator.class,"host"));}  }
class C{  public static boolean isSingleDigit(int x){  if (x > -10 && x < 10) {    return true;  } else {    return false;  }}  }
class C{  private int appendNextCharacterAndAdvanceLoop(String line,StringBuilder sb,int i){  sb.append(line.charAt(i + 1));  i++;  return i;}  }
class C{  public void insertUpdate(DocumentEvent e){  try {    int offs=e.getOffset();    if (firstOffsetModded == null || offs < firstOffsetModded.getOffset()) {      firstOffsetModded=e.getDocument().createPosition(offs);    }    offs=e.getOffset() + e.getLength();    if (lastOffsetModded == null || offs > lastOffsetModded.getOffset()) {      lastOffsetModded=e.getDocument().createPosition(offs);    }  } catch (  BadLocationException ble) {    ble.printStackTrace();  }  handleDocumentEvent(e);}  }
class C{  private static byte[] isToByte(InputStream is) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  byte[] buff=new byte[1024];  int len=0;  while ((len=is.read(buff)) != -1) {    baos.write(buff,0,len);  }  is.close();  baos.close();  return baos.toByteArray();}  }
class C{  private URIMetadataNode pullOneRWI(final boolean skipDoubleDom){  WeakPriorityBlockingQueue<WordReferenceVars> m;  WeakPriorityBlockingQueue.Element<WordReferenceVars> rwi=null;  mainloop:   while (true) {    int c=0;    pollloop:     while (this.rwiStack.sizeQueue() > 0 && c++ < 10) {      rwi=this.rwiStack.poll();      if (rwi == null)       return null;      if (!skipDoubleDom) {        URIMetadataNode node=this.query.getSegment().fulltext().getMetadata(rwi);        if (node == null)         continue pollloop;        return node;      }      final String hosthash=rwi.getElement().hosthash();      m=this.doubleDomCache.get(hosthash);      if (m == null) {synchronized (this.doubleDomCache) {          m=this.doubleDomCache.get(hosthash);          if (m == null) {            m=new WeakPriorityBlockingQueue<WordReferenceVars>(max_results_rwi,false);            this.doubleDomCache.put(hosthash,m);            URIMetadataNode node=this.query.getSegment().fulltext().getMetadata(rwi);            if (node == null)             continue pollloop;            return node;          }          m.put(rwi);        }      } else {        m.put(rwi);      }    }    if (this.doubleDomCache.isEmpty()) {      return null;    }    WeakPriorityBlockingQueue.Element<WordReferenceVars> bestEntry=null;    WeakPriorityBlockingQueue.Element<WordReferenceVars> o;    final Iterator<WeakPriorityBlockingQueue<WordReferenceVars>> i=this.doubleDomCache.values().iterator();    doubleloop:     while (i.hasNext()) {      try {        m=i.next();      } catch (      final ConcurrentModificationException e) {        ConcurrentLog.logException(e);        continue mainloop;      }      if (m == null)       continue doubleloop;      if (m.isEmpty())       continue doubleloop;      if (bestEntry == null) {        bestEntry=m.peek();        continue doubleloop;      }      o=m.peek();      if (o == null)       continue doubleloop;      if (o.getWeight() > bestEntry.getWeight())       bestEntry=o;    }    if (bestEntry == null) {      return null;    }    m=this.doubleDomCache.get(bestEntry.getElement().hosthash());    if (m != null) {      bestEntry=m.poll();      if (bestEntry != null && m.sizeAvailable() == 0) {synchronized (this.doubleDomCache) {          if (m.sizeAvailable() == 0) {            this.doubleDomCache.remove(bestEntry.getElement().hosthash());          }        }      }    }    if (bestEntry == null) {      return null;    }    URIMetadataNode node=null;    try {      node=this.query.getSegment().fulltext().getMetadata(bestEntry);    } catch (    Throwable e) {      ConcurrentLog.logException(e);    }    if (node == null) {      if (bestEntry.getElement().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      if (log.isFine())       log.fine("dropped RWI: hash not in metadata");      continue mainloop;    }    return node;  }}  }
class C{  public QueryStringQueryBuilder field(String field,float boost){  if (fields == null) {    fields=new ArrayList<>();  }  fields.add(field);  if (fieldsBoosts == null) {    fieldsBoosts=new ObjectFloatHashMap<>();  }  fieldsBoosts.put(field,boost);  return this;}  }
class C{  public PaymentDataException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private void addSystemApps(List<SelectableAppInfo> visibleApps,Intent intent,Set<String> excludePackages){  if (getActivity() == null)   return;  final PackageManager pm=mPackageManager;  List<ResolveInfo> launchableApps=pm.queryIntentActivities(intent,PackageManager.GET_DISABLED_COMPONENTS);  for (  ResolveInfo app : launchableApps) {    if (app.activityInfo != null && app.activityInfo.applicationInfo != null) {      int flags=app.activityInfo.applicationInfo.flags;      if ((flags & ApplicationInfo.FLAG_SYSTEM) != 0 || (flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0) {        if (excludePackages.contains(app.activityInfo.packageName))         continue;        SelectableAppInfo info=new SelectableAppInfo();        info.packageName=app.activityInfo.packageName;        info.appName=app.activityInfo.applicationInfo.loadLabel(pm);        info.icon=app.activityInfo.loadIcon(pm);        info.activityName=app.activityInfo.loadLabel(pm);        if (info.activityName == null)         info.activityName=info.appName;        visibleApps.add(info);      }    }  }}  }
class C{  public final void plane(Plane plane,float size){  mesh(plane.toMesh(size),false,0);}  }
class C{  public FontAnimator(String group){  super(group);}  }
class C{  public GroupManagementAction(GroupMessageAction groupMessageAction){  this.groupMessageAction=groupMessageAction;}  }
class C{  public AbstractHttpServlet(){  this.servletContext=null;  this.resourceNameReplacement=null;  this.resourceNameReplaceAll=true;  this.verbose=false;  this.reflection=false;  this.logGROOVY861=false;}  }
class C{  public static float toRadians(int steps){  return (float)(steps / 256d * 2d * Math.PI);}  }
class C{  public void loadRotate(float rot,float x,float y,float z){  float c, s;  rot*=(float)(java.lang.Math.PI / 180.0f);  c=(float)java.lang.Math.cos(rot);  s=(float)java.lang.Math.sin(rot);  float len=(float)java.lang.Math.sqrt(x * x + y * y + z * z);  if (!(len != 1)) {    float recipLen=1.f / len;    x*=recipLen;    y*=recipLen;    z*=recipLen;  }  float nc=1.0f - c;  float xy=x * y;  float yz=y * z;  float zx=z * x;  float xs=x * s;  float ys=y * s;  float zs=z * s;  mMat[0]=x * x * nc + c;  mMat[3]=xy * nc - zs;  mMat[6]=zx * nc + ys;  mMat[1]=xy * nc + zs;  mMat[4]=y * y * nc + c;  mMat[7]=yz * nc - xs;  mMat[2]=zx * nc - ys;  mMat[5]=yz * nc + xs;  mMat[8]=z * z * nc + c;}  }
class C{  void addReadBytesTime(long readBytes,long readTime){  IgniteBiTuple<LongAdder8,LongAdder8> bytesRead0=bytesRead;  bytesRead0.get1().add(readBytes);  bytesRead0.get2().add(readTime);}  }
class C{  public int size(){  return v.size();}  }
class C{  public final void testIsStatePreserved1(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  byte[] encodedKeyCopy=encodedKey.clone();  X509EncodedKeySpec meks=new X509EncodedKeySpec(encodedKeyCopy);  encodedKeyCopy[3]=(byte)5;  byte[] ek=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek));}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder().append(virtualKeyCode);  builder.append(" [").append(transitionState == TS_DOWN ? "down" : "up");  if (menuPressed)   builder.append(",menu");  if (shiftPressed)   builder.append(",shift");  if (controlPressed)   builder.append(",control");  if (extendedKey)   builder.append(",extended");  return builder.append(']').toString();}  }
class C{  public static String checkForLink(String msg){  if (msg == null) {    return null;  } else   if (msg.contains("@")) {    return null;  } else {    String result=null;    Pattern pattern=Patterns.WEB_URL;    Matcher matchURL=pattern.matcher(msg);    if (matchURL.find()) {      result=matchURL.group();    }    return result;  }}  }
class C{  public static void main(String[] args){  boolean onThread=Properties.CLIENT_ON_THREAD;  try {    LoggingUtils.getEvoLogger().info("* Starting client");    ClientProcess process=new ClientProcess();    TimeController.resetSingleton();    process.run();    if (!onThread) {      System.exit(0);    }  } catch (  Throwable t) {    logger.error("Error when generating tests for: " + Properties.TARGET_CLASS + " with seed "+ Randomness.getSeed()+ ". Configuration id : "+ Properties.CONFIGURATION_ID,t);    t.printStackTrace();    try {      Thread.sleep(100);    } catch (    InterruptedException e) {    }    if (!onThread) {      System.exit(1);    }  }}  }
class C{  public final void lazySet(int newValue){  unsafe.putOrderedInt(this,valueOffset,newValue);}  }
class C{  public ExifTag(String name){  this(name,null);}  }
class C{  public boolean isFacing(){  return facing;}  }
class C{  public boolean hasAttributes(){  return DTM.NULL != dtm.getFirstAttribute(node);}  }
class C{  public void execute() throws BuildException {  checkParameters();  resetFileLists();  String[] list=src.list();  for (int i=0; i < list.length; i++) {    File srcDir=getProject().resolveFile(list[i]);    if (!srcDir.exists()) {      throw new BuildException("srcdir \"" + srcDir.getPath() + "\" does not exist!",getLocation());    }    DirectoryScanner ds=this.getDirectoryScanner(srcDir);    String[] files=ds.getIncludedFiles();    scanDir(srcDir,destDir != null ? destDir : srcDir,files);  }  compile();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  }  Bitmap bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  drawable.draw(canvas);  return bitmap;}  }
class C{  public static IgfsFileInfo createFile(IgniteUuid id,int blockSize,long len,@Nullable IgniteUuid affKey,@Nullable IgniteUuid lockId,boolean evictExclude,@Nullable Map<String,String> props,long accessTime,long modificationTime){  return new IgfsFileInfo(id,blockSize,len,affKey,props,null,lockId,accessTime,modificationTime,evictExclude);}  }
class C{  private void rename(Table table){  if (renameDefinitions != null) {    for (    Column col : table.getAllColumns()) {      String newColName=renameDefinitions.getNewColumnName(table.getSchema(),table.getName(),col.getName());      if (newColName != null)       col.setName(newColName);    }    String newTableName=renameDefinitions.getNewTableName(table.getSchema(),table.getName());    String newSchemaName=renameDefinitions.getNewSchemaName(table.getSchema(),table.getName());    if (newTableName != null)     table.setTable(newTableName);    if (newSchemaName != null)     table.setSchema(newSchemaName);  }}  }
class C{  public static final String guessFileName(String url,String contentDisposition,String mimeType){  String filename=null;  String extension=null;  if (filename == null && contentDisposition != null) {    filename=parseContentDisposition(contentDisposition);    if (filename != null) {      int index=filename.lastIndexOf('/') + 1;      if (index > 0) {        filename=filename.substring(index);      }    }  }  if (filename == null) {    String decodedUrl=Uri.decode(url);    if (decodedUrl != null) {      int queryIndex=decodedUrl.indexOf('?');      if (queryIndex > 0) {        decodedUrl=decodedUrl.substring(0,queryIndex);      }      if (!decodedUrl.endsWith("/")) {        int index=decodedUrl.lastIndexOf('/') + 1;        if (index > 0) {          filename=decodedUrl.substring(index);        }      }    }  }  if (filename == null) {    filename="downloadfile";  }  int dotIndex=filename.indexOf('.');  if (dotIndex < 0) {    if (mimeType != null) {      extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);      if (extension != null) {        extension="." + extension;      }    }    if (extension == null) {      if (mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith("text/")) {        if (mimeType.equalsIgnoreCase("text/html")) {          extension=".html";        } else {          extension=".txt";        }      } else {        extension=".bin";      }    }  } else {    if (mimeType != null) {      int lastDotIndex=filename.lastIndexOf('.');      String typeFromExt=MimeTypeMap.getSingleton().getMimeTypeFromExtension(filename.substring(lastDotIndex + 1));      if (typeFromExt != null && !typeFromExt.equalsIgnoreCase(mimeType)) {        extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);        if (extension != null) {          extension="." + extension;        }      }    }    if (extension == null) {      extension=filename.substring(dotIndex);    }    filename=filename.substring(0,dotIndex);  }  return filename + extension;}  }
class C{  public CipherBlockHeaders(final byte[] nonce,final long contentLen){  if (nonce == null) {    throw new AwsCryptoException("Nonce cannot be null.");  }  if (nonce.length > Constants.MAX_NONCE_LENGTH) {    throw new AwsCryptoException("Nonce length is greater than the maximum value of an unsigned byte.");  }  nonce_=nonce.clone();  contentLength_=contentLen;}  }
class C{  public static LongBuffer createLongBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 8);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asLongBuffer();}  }
class C{  public static void close(){  flush();  try {    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected boolean internalPrevious() throws SQLException {  boolean ret=false;  do {    if (cursorPos > 1) {      --cursorPos;      ret=true;    } else     if (cursorPos == 1) {      --cursorPos;      ret=false;      break;    }  } while ((getShowDeleted() == false) && (rowDeleted() == true));  if (ret == true)   --absolutePos; else   absolutePos=0;  return ret;}  }
class C{  public Task<ProtectionSystemRestRep> create(ProtectionSystemRequestParam input){  return postTask(input,baseUrl);}  }
class C{  @Provides @Config("rdeImportBucket") public static String provideRdeImportBucket(@Config("projectId") String projectId){  return projectId + "-rde-import";}  }
class C{  public void verifyBeanPropertyNotExist(String propertyName) throws Exception {  Class clazz=Class.forName(className);  String getterMethodName=generateGetterMethodName(propertyName);  verifyMethodNotExist(getterMethodName);  String setterMethodName=generateSetterMethodName(propertyName);  verifyMethodNotExist(setterMethodName);}  }
class C{  public void addConditioningVariable(String variable,double low,double high){  if (!(low < high))   throw new IllegalArgumentException("Low must be less than high: " + low + " >= "+ high);  Node node=dataSet.getVariable(variable);  if (!(node instanceof ContinuousVariable))   throw new IllegalArgumentException("Variable must be continuous.");  if (continuousIntervals.containsKey(node))   throw new IllegalArgumentException("Please remove conditioning variable first.");  continuousIntervals.put(node,new double[]{low,high});}  }
class C{  private SourceSection(String kind,String identifier){  this.source=null;  this.kind=kind;  this.identifier=identifier;  this.startLine=-1;  this.startColumn=-1;  this.charIndex=-1;  this.charLength=-1;}  }
class C{  public void showLoadingDialog(String message){  dismissLoadingDialog();  LoadingDialog loading=new LoadingDialog(message);  FragmentManager fm=getSupportFragmentManager();  FragmentTransaction ft=fm.beginTransaction();  loading.show(ft,DIALOG_WAIT_TAG);}  }
class C{  public void testSpanTermVersusTerm() throws Exception {  Term t1=randomTerm();  assertSameScores(new TermQuery(t1),spanQuery(new SpanTermQuery(t1)));}  }
class C{  public Server(int port,Authenticator auth) throws IOException {  this();  if (port < 0)   port=61626;  if (auth != null)   _authenticator=auth;  listen(port);}  }
class C{  protected void clearEditInfo(){  int i, j;  int flag, count;  count=m_vals.size();  j=0;  for (i=0; i < count; i++) {    flag=m_editFlags.get(j);    if ((flag == FolderEditFlag.UPDATE) || (flag == FolderEditFlag.NEW)) {      flag=FolderEditFlag.NONE;      m_editFlags.set(j,flag);      j=j + 1;    } else     if (flag == FolderEditFlag.REMOVE) {      m_editFlags.remove(j);      m_vals.remove(j);    } else     j=j + 1;  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.BOOLEAN_LITERAL___GET_VALUE_AS_STRING:    return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public MProductBOM(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void copyParentSets(BayesNet dest,BayesNet source){  int nNodes=source.getNrOfNodes();  for (int iNode=0; iNode < nNodes; iNode++) {    dest.getParentSet(iNode).copy(source.getParentSet(iNode));  }}  }
class C{  public SRegMessage(ParameterList params){  _parameters=params;  if (DEBUG)   _log.debug("Created SRegMessage from parameter list:\n" + params);}  }
class C{  public synchronized E peek(){  int len=size();  if (len == 0)   throw new EmptyStackException();  return elementAt(len - 1);}  }
class C{  private void handleLastProcessedVersionAction(SolrQueryRequest req,SolrQueryResponse rsp){  String collectionName=core.getCoreDescriptor().getCloudDescriptor().getCollectionName();  String shard=core.getCoreDescriptor().getCloudDescriptor().getShardId();  if (!leaderStateManager.amILeader()) {    log.warn("Action {} sent to non-leader replica @ {}:{}",CdcrParams.CdcrAction.LASTPROCESSEDVERSION,collectionName,shard);    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Action " + CdcrParams.CdcrAction.LASTPROCESSEDVERSION + " sent to non-leader replica");  }  long lastProcessedVersion=Long.MAX_VALUE;  for (  CdcrReplicatorState state : replicatorManager.getReplicatorStates()) {    long version=Long.MAX_VALUE;    if (state.getLogReader() != null) {      version=state.getLogReader().getLastVersion();    }    lastProcessedVersion=Math.min(lastProcessedVersion,version);  }  CdcrUpdateLog.CdcrLogReader bufferLogReader=((CdcrUpdateLog)core.getUpdateHandler().getUpdateLog()).getBufferToggle();  if (bufferLogReader != null) {    lastProcessedVersion=Math.min(lastProcessedVersion,bufferLogReader.getLastVersion());  }  if (processStateManager.getState().equals(CdcrParams.ProcessState.STOPPED) && bufferStateManager.getState().equals(CdcrParams.BufferState.DISABLED)) {    CdcrUpdateLog.CdcrLogReader logReader=((CdcrUpdateLog)core.getUpdateHandler().getUpdateLog()).newLogReader();    try {      logReader.next();      lastProcessedVersion=Math.min(lastProcessedVersion,logReader.getLastVersion());    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error while fetching the last processed version",e);    }catch (    IOException e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error while fetching the last processed version",e);    } finally {      logReader.close();    }  }  log.debug("Returning the lowest last processed version {}  @ {}:{}",lastProcessedVersion,collectionName,shard);  rsp.add(CdcrParams.LAST_PROCESSED_VERSION,lastProcessedVersion);}  }
class C{  public static boolean isEmpty(Object[] array){  return array == null || array.length == 0;}  }
class C{  public boolean hasUpdated(){  return getUpdated() != null;}  }
class C{  private void readElement(InputNode node,Object source,Section section,LabelMap map) throws Exception {  String name=node.getName();  String path=section.getPath(name);  Label label=map.getLabel(path);  if (label == null) {    label=criteria.resolve(path);  }  if (label == null) {    Position line=node.getPosition();    Class expect=context.getType(type,source);    if (map.isStrict(context) && revision.isEqual()) {      throw new ElementException("Element '%s' does not have a match in %s at %s",path,expect,line);    } else {      node.skip();    }  } else {    readUnion(node,source,map,label);  }}  }
class C{  public static void decodeImage(final PdfDecoderInt decode_pdf,final GUIFactory currentGUI,final GUIThumbnailPanel thumbnails,final Values commonValues){  throw new UnsupportedOperationException("Not supported in OpenViewerFX");}  }
class C{  public static void continuePendingRequestsIfPossible(MultiplePermissionsListener listener){  checkInstanceNotNull();  instance.continuePendingRequestsIfPossible(listener,ThreadFactory.makeMainThread());}  }
class C{  public static void loadKeyStore(RcsSettings rcsSettings) throws KeyStoreException, IOException {  if (sLogger.isActivated()) {    Provider[] currentProviders=Security.getProviders();    if (currentProviders.length > 0) {      for (      Provider provider : currentProviders) {        sLogger.debug("Registered provider: " + provider.getName() + "; info: "+ provider.getInfo());      }    }  }  if (!isKeystoreExists()) {    if (sLogger.isActivated()) {      sLogger.debug("Create new keystore file ".concat(getKeystore().getPath()));    }    createKeyStore();  }  String certRoot=rcsSettings.getTlsCertificateRoot();  if (!TextUtils.isEmpty(certRoot)) {    Uri certFile=Uri.parse(certRoot);    if (!isCertificateEntry(buildCertificateAlias(certFile))) {      addCertificates(certFile);    }  }  String certIntermediate=rcsSettings.getTlsCertificateIntermediate();  if (!TextUtils.isEmpty(certIntermediate)) {    Uri certIntermediateFile=Uri.parse(certIntermediate);    if (!isCertificateEntry(buildCertificateAlias(certIntermediateFile))) {      addCertificates(certIntermediateFile);    }  }}  }
class C{  public StatelessSection(int itemResourceId){  super();  this.itemResourceId=itemResourceId;}  }
class C{  private void populateFromCentralDirectory() throws IOException {  positionAtCentralDirectory();  byte[] cfh=new byte[CFH_LEN];  byte[] signatureBytes=new byte[WORD];  archive.readFully(signatureBytes);  long sig=ZipLong.getValue(signatureBytes);  final long cfhSig=ZipLong.getValue(JBZipOutputStream.CFH_SIG);  while (sig == cfhSig) {    archive.readFully(cfh);    int off=0;    int versionMadeBy=ZipShort.getValue(cfh,off);    off+=SHORT;    final int platform=(versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK;    off+=WORD;    final int method=ZipShort.getValue(cfh,off);    off+=SHORT;    long time=DosTime.dosToJavaTime(ZipLong.getValue(cfh,off));    off+=WORD;    final long crc=ZipLong.getValue(cfh,off);    off+=WORD;    final long compressedSize=ZipLong.getValue(cfh,off);    off+=WORD;    final long uncompressedSize=ZipLong.getValue(cfh,off);    off+=WORD;    int fileNameLen=ZipShort.getValue(cfh,off);    off+=SHORT;    int extraLen=ZipShort.getValue(cfh,off);    off+=SHORT;    int commentLen=ZipShort.getValue(cfh,off);    off+=SHORT;    off+=SHORT;    final int internalAttributes=ZipShort.getValue(cfh,off);    off+=SHORT;    final long externalAttributes=ZipLong.getValue(cfh,off);    off+=WORD;    long localHeaderOffset=ZipLong.getValue(cfh,off);    String name=getString(readBytes(fileNameLen));    byte[] extra=readBytes(extraLen);    String comment=getString(readBytes(commentLen));    JBZipEntry ze=new JBZipEntry(this);    ze.setName(name);    ze.setHeaderOffset(localHeaderOffset);    ze.setPlatform(platform);    ze.setMethod(method);    ze.setTime(time);    ze.setCrc(crc);    ze.setCompressedSize(compressedSize);    ze.setSize(uncompressedSize);    ze.setInternalAttributes(internalAttributes);    ze.setExternalAttributes(externalAttributes);    ze.setExtra(extra);    try {      ze.setComment(comment);    } catch (    IllegalArgumentException e) {      ze.setComment(comment.substring(0,0xffff / 3));    }    nameMap.put(ze.getName(),ze);    entries.add(ze);    archive.readFully(signatureBytes);    sig=ZipLong.getValue(signatureBytes);  }}  }
class C{  public NavigatePanel(){  super();  setKey(defaultKey);  panDelegate=new PanSupport(this);  centerDelegate=new CenterSupport(this);  JPanel panel=new JPanel();  GridBagLayout internalGridbag=new GridBagLayout();  GridBagConstraints c2=new GridBagConstraints();  panel.setLayout(internalGridbag);  String info=i18n.get(NavigatePanel.class,"panNW.tooltip","Pan Northwest");  nwButton=getButton(nwName,info,panNWCmd);  c2.gridx=0;  c2.gridy=0;  internalGridbag.setConstraints(nwButton,c2);  panel.add(nwButton);  info=i18n.get(NavigatePanel.class,"panN.tooltip","Pan North");  nButton=getButton(nName,info,panNCmd);  c2.gridx=1;  c2.gridy=0;  internalGridbag.setConstraints(nButton,c2);  panel.add(nButton);  info=i18n.get(NavigatePanel.class,"panNE.tooltip","Pan Northeast");  neButton=getButton(neName,info,panNECmd);  c2.gridx=2;  c2.gridy=0;  internalGridbag.setConstraints(neButton,c2);  panel.add(neButton);  info=i18n.get(NavigatePanel.class,"panW.tooltip","Pan West");  wButton=getButton(wName,info,panWCmd);  c2.gridx=0;  c2.gridy=1;  internalGridbag.setConstraints(wButton,c2);  panel.add(wButton);  info=i18n.get(NavigatePanel.class,"center.tooltip","Center Map at Starting Coords");  cButton=getButton(cName,info,centerCmd);  c2.gridx=1;  c2.gridy=1;  internalGridbag.setConstraints(cButton,c2);  panel.add(cButton);  info=i18n.get(NavigatePanel.class,"panE.tooltip","Pan East");  eButton=getButton(eName,info,panECmd);  c2.gridx=2;  c2.gridy=1;  internalGridbag.setConstraints(eButton,c2);  panel.add(eButton);  info=i18n.get(NavigatePanel.class,"panSW.tooltip","Pan Southwest");  swButton=getButton(swName,info,panSWCmd);  c2.gridx=0;  c2.gridy=2;  internalGridbag.setConstraints(swButton,c2);  panel.add(swButton);  info=i18n.get(NavigatePanel.class,"panS.tooltip","Pan South");  sButton=getButton(sName,info,panSCmd);  c2.gridx=1;  c2.gridy=2;  internalGridbag.setConstraints(sButton,c2);  panel.add(sButton);  info=i18n.get(NavigatePanel.class,"panSE.tooltip","Pan Southeast");  seButton=getButton(seName,info,panSECmd);  c2.gridx=2;  c2.gridy=2;  internalGridbag.setConstraints(seButton,c2);  panel.add(seButton);  add(panel);}  }
class C{  public Source<Long> upToAndIncluding(final long endInclusive){  return between(startInclusive,endInclusive);}  }
class C{  private void installVoiceData(){  if (TextUtils.isEmpty(getEngineName()))   return;  Intent intent=new Intent(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.setPackage(getEngineName());  try {    Log.v(TAG,"Installing voice data: " + intent.toUri(0));    startActivity(intent);  } catch (  ActivityNotFoundException ex) {    Log.e(TAG,"Failed to install TTS data, no acitivty found for " + intent + ")");  }}  }
class C{  private void registerEventHandlers(){  proxy.registerEventHandlers();  MinecraftForge.EVENT_BUS.register(ConfigHandler.INSTANCE);  MinecraftForge.EVENT_BUS.register(ItemBLShield.EventHandler.INSTANCE);  MinecraftForge.EVENT_BUS.register(WorldDataBase.WORLD_EVENT_HANDLER);  MinecraftForge.EVENT_BUS.register(ChunkDataBase.CHUNK_EVENT_HANDLER);  MinecraftForge.EVENT_BUS.register(BetweenlandsChunkData.class);  MinecraftForge.EVENT_BUS.register(new AnvilEventHandler());  MinecraftForge.EVENT_BUS.register(EnvironmentEventHandler.class);  MinecraftForge.EVENT_BUS.register(EntityCapabilityHandler.class);  MinecraftForge.EVENT_BUS.register(ItemCapabilityHandler.class);  MinecraftForge.EVENT_BUS.register(PlayerDecayHandler.class);  MinecraftForge.EVENT_BUS.register(AspectSyncHandler.class);  MinecraftForge.EVENT_BUS.register(MobSpawnHandler.INSTANCE);}  }
class C{  public static Distribution distribution(String namespace,String name){  return new DelegatingDistribution(MetricName.named(namespace,name));}  }
class C{  public Gate(final String orientation,String image,ChatCondition condition){  setRPClass("gate");  put("type","gate");  put(GATE_ID,"");  setOrientation(orientation);  setOpen(false);  if (condition == null) {    condition=new AlwaysTrueCondition();  }  this.condition=condition;  if (image != null) {    put(IMAGE,image);  } else {    put(IMAGE,DEFAULT_IMAGE);  }}  }
class C{  public void showLong(String toast){  Toast.makeText(context,toast,Toast.LENGTH_LONG).show();}  }
class C{  public static Bound<String> withoutSharding(){  return new Bound<>(DEFAULT_TEXT_CODER).withoutSharding();}  }
class C{  public StateMachine createStateMachine(StateMachineDefinition stateMachineDefinition){  final Map<EventDefinition,EventData> eventDataMap=stateMachineDefinition.getEventDataMap();  Set<Event> allEvents=createAllEvents(eventDataMap);  Set<StateDefinition> stateDefinitions=stateMachineDefinition.getStates();  Set<State> states=new HashSet<>();  for (  StateDefinition stateDefinition : stateDefinitions) {    State state=convertStateDefinitionToState(stateDefinition);    states.add(state);  }  StateMachine stateMachine=new StateMachine(stateMachineDefinition.getVersion(),stateMachineDefinition.getName(),stateMachineDefinition.getDescription(),states,stateMachineDefinition.getCorrelationId());  stateMachinesDAO.create(stateMachine);  for (  Event event : allEvents) {    event.setStateMachineInstanceId(stateMachine.getId());    eventPersistenceService.persistEvent(event);  }  for (  State state : stateMachine.getStates()) {    auditDAO.create(new AuditRecord(stateMachine.getId(),state.getId(),0L,Status.initialized,null,null));  }  return stateMachine;}  }
class C{  private static boolean nodeRedundant(HsNode n,List<GraphChange> hittingSets){  boolean redundant=false;  for (  GraphChange hs : hittingSets) {    if (n.getPath().contains(hs)) {      redundant=true;      break;    }  }  return redundant;}  }
class C{  public static Byte toRef(byte b){  return new Byte(b);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public URI parseServerAuthority() throws URISyntaxException {  if (!serverAuthority) {    parseAuthority(true);  }  return this;}  }
class C{  protected int lookup(KeyEvent event,Spannable content){  int meta=event.getMetaState() | getMetaState(content);  int number=event.getNumber();  if ((meta & (MetaKeyKeyListener.META_ALT_ON | MetaKeyKeyListener.META_SHIFT_ON)) == 0) {    if (number != 0) {      return number;    }  }  int match=super.lookup(event,content);  if (match != 0) {    return match;  } else {    if (meta != 0) {      KeyData kd=new KeyData();      char[] accepted=getAcceptedChars();      if (event.getKeyData(kd)) {        for (int i=1; i < kd.meta.length; i++) {          if (ok(accepted,kd.meta[i])) {            return kd.meta[i];          }        }      }    }    return number;  }}  }
class C{  @Override public void agentAdded(Agent agent,Environment source){  Platform.runLater(null);}  }
class C{  synchronized public void registerIndex(final String name,final ICheckpointProtocol btree){  assertUnisolatedInstance();  if (name == null)   throw new IllegalArgumentException();  if (btree == null)   throw new IllegalArgumentException();  final byte[] key=getKey(name);  if (super.contains(key)) {    throw new IndexExistsException(name);  }  final long checkpointAddr=btree.writeCheckpoint();  final Entry entry=new Entry(name,checkpointAddr,0L);  super.insert(key,EntrySerializer.INSTANCE.serialize(entry));  putOnCommitList(name,btree,false);  ResourceManager.openUnisolatedIndex(name);}  }
class C{  private void loadUrl(){  if (!StringUtils.isEmpty(mUrl)) {    mWebView.loadUrl(mUrl);    if (mShowTitle) {      mTitle.setText(mUrl);    }  }}  }
class C{  public synchronized void tallyVotes(){  if (isSparse)   elementalToSemantic();  if (unTallied.get())   try {    this.bitSet=concludeVote();    unTallied.set(false);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public int hashCode(){  return 89 + set.hashCode();}  }
class C{  public ExternalEvent nextEvent(){  int responseSize=0;  int from;  int to;  from=drawHostAddress(hostRange);  to=this.toIds.remove(0);  if (to == from) {    if (this.toIds.size() == 0) {      this.nextEventsTime=Double.MAX_VALUE;      return new ExternalEvent(Double.MAX_VALUE);    } else {      to=this.toIds.remove(0);    }  }  if (this.toIds.size() == 0) {    this.nextEventsTime=Double.MAX_VALUE;  } else {    this.nextEventsTime+=drawNextEventTimeDiff();  }  MessageCreateEvent mce=new MessageCreateEvent(from,to,getID(),drawMessageSize(),responseSize,this.nextEventsTime);  return mce;}  }
class C{  private void initializeProperties(){  if (configuration.isInitialized() == false) {    setDefaultProperties();  }  if (overridingProperties != null) {    configuration.combine(overridingProperties);  }}  }
class C{  public void finish() throws IOException {  if (done) {    return;  }  def.finish();  while (!def.finished()) {    int byteCount=def.deflate(buf);    out.write(buf,0,byteCount);  }  done=true;}  }
class C{  public void reveal(){  reset();  moveSpring().setCurrentValue(0);  moveSpring().setEndValue(1);}  }
class C{  protected Writer createWriter() throws IOException {  try {    if (getFileURL() == null) {      return new OutputStreamWriter(Storage.getInstance().createOutputStream("CN1Log__$"));    }    if (FileSystemStorage.getInstance().exists(getFileURL())) {      return new OutputStreamWriter(FileSystemStorage.getInstance().openOutputStream(getFileURL(),(int)FileSystemStorage.getInstance().getLength(getFileURL())));    } else {      return new OutputStreamWriter(FileSystemStorage.getInstance().openOutputStream(getFileURL()));    }  } catch (  Exception err) {    setFileWriteEnabled(false);    return new OutputStreamWriter(new ByteArrayOutputStream());  }}  }
class C{  public AddNodesResponse clone(){  AddNodesResponse result=new AddNodesResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new AddNodesResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public TaskInfo cloneVM(VMPropertyHandler paramHandler) throws Exception {  logger.info("cloneVMFromTemplate() template: " + paramHandler.getTemplateName());  String datacenter=paramHandler.getTargetDatacenter();  String cluster=paramHandler.getTargetCluster();  String template=paramHandler.getTemplateName();  logger.debug("Datacenter: " + datacenter + " Cluster: "+ cluster+ " Template: "+ template);  ManagedObjectReference vmDataCenter=vmw.getServiceUtil().getDecendentMoRef(null,"Datacenter",datacenter);  if (vmDataCenter == null) {    logger.error("Datacenter not found. dataCenter: " + datacenter);    throw new APPlatformException(Messages.get(paramHandler.getLocale(),"error_invalid_datacenter",new Object[]{datacenter}));  }  ManagedObjectReference vmTpl=vmw.getServiceUtil().getDecendentMoRef(vmDataCenter,"VirtualMachine",template);  if (vmTpl == null) {    logger.error("Template not found in datacenter. datacenter: " + datacenter + " template: "+ template);    throw new APPlatformException(Messages.get(paramHandler.getLocale(),"error_invalid_template",new Object[]{template}));  }  Long templateDiskSpace=(Long)vmw.getServiceUtil().getDynamicProperty(vmTpl,"summary.storage.unshared");  if (templateDiskSpace == null) {    logger.error("Missing disk size in template. template: " + template);    throw new APPlatformException(Messages.get(paramHandler.getLocale(),"error_missing_template_size"));  }  VirtualMachineConfigInfo configSpec=(VirtualMachineConfigInfo)vmw.getServiceUtil().getDynamicProperty(vmTpl,"config");  double tplDiskSpace=VMwareValue.fromBytes(templateDiskSpace.longValue()).getValue(Unit.MB);  if (paramHandler.getConfigDiskSpaceMB() != .0) {    double requestedDiskSpace=paramHandler.getConfigDiskSpaceMB();    List<VirtualDevice> devices=configSpec.getHardware().getDevice();    long capacityInKB=DiskManager.getSystemDiskCapacity(devices,configSpec.getName());    double requestedDiskSpaceKB=requestedDiskSpace * 1024.0;    logger.debug("Requested disk space: " + requestedDiskSpaceKB + "Template disk space: "+ capacityInKB+ " template: "+ template);    if (requestedDiskSpaceKB < capacityInKB) {      String minValExp=new DecimalFormat("#0.#").format(VMwareValue.fromMegaBytes(capacityInKB / 1024.0).getValue(Unit.GB));      logger.error("Requested disk space is smaller than template disk space. template: " + template);      throw new APPlatformException(Messages.get(paramHandler.getLocale(),"error_invalid_diskspace",new Object[]{minValExp}));    }    paramHandler.setTemplateDiskSpaceMB(requestedDiskSpace);  } else {    logger.debug("Use template disk space. template: " + template);    paramHandler.setTemplateDiskSpaceMB(tplDiskSpace);  }  VirtualMachineCloneSpec cloneSpec=new VirtualMachineCloneSpec();  VirtualMachineRelocateSpec relocSpec=setHostAndStorage(vmw,paramHandler,vmDataCenter,datacenter,cluster);  cloneSpec.setLocation(relocSpec);  cloneSpec.setPowerOn(false);  cloneSpec.setTemplate(false);  CustomizationSpec custSpec=getCustomizationSpec(configSpec,paramHandler);  cloneSpec.setCustomization(custSpec);  VirtualMachineConfigSpec vmConfSpec=new VirtualMachineConfigSpec();  String respPerson=paramHandler.getServiceSetting(VMPropertyHandler.TS_RESPONSIBLE_PERSON);  String reqUser=paramHandler.getServiceSetting(VMPropertyHandler.REQUESTING_USER);  String systemvariante="";  String comment=Messages.get(paramHandler.getLocale(),"vm_comment",new Object[]{paramHandler.getSettings().getOrganizationName(),paramHandler.getSettings().getSubscriptionId(),reqUser,respPerson,systemvariante});  vmConfSpec.setAnnotation(comment);  cloneSpec.setConfig(vmConfSpec);  String targetFolder=paramHandler.getTargetFolder();  ManagedObjectReference moRefTargetFolder=null;  if (targetFolder != null) {    moRefTargetFolder=vmw.getServiceUtil().getDecendentMoRef(null,"Folder",targetFolder);  } else {    moRefTargetFolder=(ManagedObjectReference)vmw.getServiceUtil().getDynamicProperty(vmTpl,"parent");  }  if (moRefTargetFolder == null) {    logger.error("Target folder " + targetFolder + " not found.");    throw new APPlatformException(Messages.get(paramHandler.getLocale(),"error_invalid_target_folder",new Object[]{targetFolder}));  }  String newInstanceName=paramHandler.getInstanceName();  logger.debug("Call vSphere API: cloneVMTask() instancename: " + newInstanceName + " targetfolder: "+ paramHandler.getTargetFolder());  VimPortType service=vmw.getConnection().getService();  ManagedObjectReference cloneTask=service.cloneVMTask(vmTpl,moRefTargetFolder,newInstanceName,cloneSpec);  return (TaskInfo)vmw.getServiceUtil().getDynamicProperty(cloneTask,"info");}  }
class C{  public EpsilonBoxObjectiveComparator(double[] epsilons){  this.epsilons=epsilons.clone();}  }
class C{  public void accept(){  checkSocket();  this.socket.sendTextMessage("accept");}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){  if (this.constant != Constant.NotAConstant) {    return;  }  FieldBinding codegenBinding=this.binding.original();  boolean isStatic=codegenBinding.isStatic();  boolean isThisReceiver=this.receiver instanceof ThisReference;  Constant fieldConstant=codegenBinding.constant();  if (fieldConstant != Constant.NotAConstant) {    return;  }  if (valueRequired || (!isThisReceiver && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) || ((this.implicitConversion & TypeIds.UNBOXING) != 0)|| (this.genericCast != null)) {    this.receiver.generateCode(currentScope,!isStatic);  }}  }
class C{  public SpiderWebPlot(){  this(null);}  }
class C{  private void initializeFontMetrics(Font font){  final BufferedImage temporaryImage=new BufferedImage(10,10,BufferedImage.TYPE_INT_RGB);  Graphics2D temporaryGraphics2D=(Graphics2D)temporaryImage.getGraphics();  temporaryGraphics2D.setFont(font);  fontMetrics=temporaryGraphics2D.getFontMetrics();  fontCharWidth=fontMetrics.getMaxAdvance();  fontLineHeight=fontMetrics.getHeight();}  }
class C{  public String substringLower(int start,int count){  return String.valueOf(lcText,start,count);}  }
class C{  public void undo(){  try {    if (undoManager != null)     undoManager.undoOrRedo();  } catch (  CannotUndoException ignored) {  }catch (  CannotRedoException ignored) {  }}  }
class C{  public static <T>T jsonToObject(String json,Class<T> clazz){  Gson gson=new Gson();  return gson.fromJson(json,clazz);}  }
class C{  public SolrQueryRequest request(final SolrParams params){  SolrQueryRequest req=new SolrQueryRequestBase(this.core,params){  };  req.getContext().put("path",SELECT);  req.getContext().put("webapp",CONTEXT);  return req;}  }
class C{  public synchronized boolean isActive(){  for (  CandidatePair pair : this) {    if (pair.getState() == CandidatePairState.WAITING)     return true;  }  return false;}  }
class C{  void addBlockObjectsToPathParamMap(Collection<URI> blockObjectURIs,URI pathParamURI,ExportGroup exportGroup){  removeBlockObjectsFromPathParamMap(blockObjectURIs,exportGroup);  for (  URI blockObjectURI : blockObjectURIs) {    exportGroup.addToPathParameters(blockObjectURI,pathParamURI);  }}  }
class C{  public Document read(Reader reader) throws DocumentException {  InputSource source=new InputSource(reader);  if (this.encoding != null) {    source.setEncoding(this.encoding);  }  return read(source);}  }
class C{  public static boolean isHostName(URL url){  return url.getHost().equalsIgnoreCase(getHostName());}  }
class C{  public FixedParameter(double param){  this.param=param;}  }
class C{  public final boolean hasResponseBody(){  int responseCode=responseHeaders.getHeaders().getResponseCode();  if (method.equals("HEAD")) {    return false;  }  if ((responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HttpURLConnectionImpl.HTTP_NO_CONTENT && responseCode != HttpURLConnectionImpl.HTTP_NOT_MODIFIED) {    return true;  }  if (responseHeaders.getContentLength() != -1 || responseHeaders.isChunked()) {    return true;  }  return false;}  }
class C{  public boolean isInPosession(){  Object oo=get_Value(COLUMNNAME_IsInPosession);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  boolean isSystemTheme(){  return (getClass() == MetalHighContrastTheme.class);}  }
class C{  public static boolean hasRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  void grabCompositionArea(boolean doUpdate){synchronized (compositionAreaLock) {    if (compositionAreaOwner != this) {      compositionAreaOwner=this;      if (compositionArea != null) {        compositionArea.setHandlerInfo(this,inputMethodContext);      }      if (doUpdate) {        if ((composedText != null) && (compositionArea == null)) {          createCompositionArea();        }        if (compositionArea != null) {          compositionArea.setText(composedText,caret);        }      }    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MCostElement[");  sb.append(get_ID()).append("-").append(getName()).append(",Type=").append(getCostElementType()).append(",Method=").append(getCostingMethod()).append("]");  return sb.toString();}  }
class C{  public long nswap(){  return Long.parseLong(fields[35]);}  }
class C{  public static Mult div(final double constant){  return mult(1 / constant);}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int cLength=mDataset.getCategoriesCount();  String[] categories=new String[cLength];  for (int category=0; category < cLength; category++) {    categories[category]=mDataset.getCategory(category);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,categories,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  mStep=SHAPE_WIDTH * 3 / 4;  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  double rCoef=0.35 * mRenderer.getScale();  double decCoef=0.2 / cLength;  int radius=(int)(mRadius * rCoef);  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  List<RectF> prevLabelsBounds=new ArrayList<RectF>();  for (int category=0; category < cLength; category++) {    int sLength=mDataset.getItemCount(category);    double total=0;    String[] titles=new String[sLength];    for (int i=0; i < sLength; i++) {      total+=mDataset.getValues(category)[i];      titles[i]=mDataset.getTitles(category)[i];    }    float currentAngle=mRenderer.getStartAngle();    RectF oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);    for (int i=0; i < sLength; i++) {      paint.setColor(mRenderer.getSeriesRendererAt(i).getColor());      float value=(float)mDataset.getValues(category)[i];      float angle=(float)(value / total * 360);      canvas.drawArc(oval,currentAngle,angle,true,paint);      drawLabel(canvas,mDataset.getTitles(category)[i],mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius,longRadius,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,true,false);      currentAngle+=angle;    }    radius-=(int)mRadius * decCoef;    shortRadius-=mRadius * decCoef - 2;    if (mRenderer.getBackgroundColor() != 0) {      paint.setColor(mRenderer.getBackgroundColor());    } else {      paint.setColor(Color.WHITE);    }    paint.setStyle(Style.FILL);    oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);    canvas.drawArc(oval,0,360,true,paint);    radius-=1;  }  prevLabelsBounds.clear();  drawLegend(canvas,mRenderer,categories,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  public void dataStreamerStreamReceiverInvoke(long ptr,Object cache,long memPtr,boolean keepBinary){  enter();  try {    PlatformCallbackUtils.dataStreamerStreamReceiverInvoke(envPtr,ptr,cache,memPtr,keepBinary);  }  finally {    leave();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.045 -0500",hash_original_method="FA0219710575675561B4DC7EAFAB1D1D",hash_generated_method="F65B3DEBD2C9206A45EB1AC4993FE24B") public ScheduledThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,TimeUnit.NANOSECONDS,new DelayedWorkQueue(),threadFactory,handler);}  }
class C{  @Override public final int hashCode(){  int h=0;  for (int i=0; i < _length; ) {    h=31 * h + charAt(i++);  }  return h;}  }
class C{  @LogMessageDoc(message="Inter-switch link removed:",explanation="A previously detected link between two openflow switches no longer exists, " + "use show link to find current status") protected void deleteLinks(List<Link> links,String reason,List<LDUpdate> updateList){  NodePortTuple srcNpt, dstNpt;  List<LDUpdate> linkUpdateList=new ArrayList<LDUpdate>();  lock.writeLock().lock();  try {    for (    Link lt : links) {      srcNpt=new NodePortTuple(lt.getSrc(),lt.getSrcPort());      dstNpt=new NodePortTuple(lt.getDst(),lt.getDstPort());      if (switchLinks.containsKey(lt.getSrc())) {        switchLinks.get(lt.getSrc()).remove(lt);        if (switchLinks.get(lt.getSrc()).isEmpty())         this.switchLinks.remove(lt.getSrc());      }      if (this.switchLinks.containsKey(lt.getDst())) {        switchLinks.get(lt.getDst()).remove(lt);        if (this.switchLinks.get(lt.getDst()).isEmpty())         this.switchLinks.remove(lt.getDst());      }      if (this.portLinks.get(srcNpt) != null) {        this.portLinks.get(srcNpt).remove(lt);        if (this.portLinks.get(srcNpt).isEmpty())         this.portLinks.remove(srcNpt);      }      if (this.portLinks.get(dstNpt) != null) {        this.portLinks.get(dstNpt).remove(lt);        if (this.portLinks.get(dstNpt).isEmpty())         this.portLinks.remove(dstNpt);      }      LinkInfo info=this.links.remove(lt);      LinkType linkType=getLinkType(lt,info);      linkUpdateList.add(new LDUpdate(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),linkType,UpdateOperation.LINK_REMOVED));      eventCategory.newEventWithFlush(new DirectLinkEvent(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),"link-deleted::" + reason));      removeLinkFromStorage(lt);      if (linkType == ILinkDiscovery.LinkType.DIRECT_LINK) {        log.info("Inter-switch link removed: {}",lt);        notifier.postNotification("Inter-switch link removed: " + lt.toString());      } else       if (log.isTraceEnabled()) {        log.trace("Deleted link {}",lt);      }    }  }  finally {    if (updateList != null)     linkUpdateList.addAll(updateList);    updates.addAll(linkUpdateList);    lock.writeLock().unlock();  }}  }
class C{  public static <T>T eachLine(File self,String charset,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(self,charset,1,closure);}  }
class C{  @Override public long position(Blob blobPattern,long start) throws SQLException {  if (isDebugEnabled()) {    debugCode("position(blobPattern, " + start + ");");  }  if (Constants.BLOB_SEARCH) {    try {      checkClosed();      if (blobPattern == null) {        return -1;      }      ByteArrayOutputStream out=new ByteArrayOutputStream();      InputStream in=blobPattern.getBinaryStream();      while (true) {        int x=in.read();        if (x < 0) {          break;        }        out.write(x);      }      return position(out.toByteArray(),start);    } catch (    Exception e) {      throw logAndConvert(e);    }  }  throw unsupported("LOB subset");}  }
class C{  public static Color rgbac(int rgb,int alpha){  alpha=MathUtil.clamp(alpha,0,255);  int value=rgb & 0xFFFFFF | alpha << 24;  return argb(value);}  }
class C{  public ApnsPayload alertTitleLocKey(String titleLocKey){  ensureAlertMap().put(ATTR_ALERT_TITLE_LOC_KEY,titleLocKey);  return this;}  }
class C{  public void removeDataSource(){  int removalIndex=dataset.getItemCount();  if (removalIndex > 0) {    this.fireDataSourceRemoved(removalIndex);    dataset.remove(removalIndex);  }}  }
class C{  public static short[] clone(final short[] array){  if (array == null) {    return null;  }  return array.clone();}  }
class C{  public void update(byte[] input){  digestInstance.update(input);}  }
class C{  public Soundex(){  this(US_ENGLISH_MAPPING);}  }
class C{  public boolean arrowScrollHorizontally(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=getHorizontalMaxScrollAmount();  if (nextFocused != null && isWithinDeltaOfScreen(nextFocused,maxJump,getWidth(),getHeight())) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDelta=computeScrollXDeltaToGetChildRectOnScreen(mTempRect);    doScrollX(scrollDelta);    nextFocused.requestFocus(direction);  } else {    int scrollDelta=maxJump;    if (direction == View.FOCUS_LEFT && getScrollX() < scrollDelta) {      scrollDelta=getScrollX();    } else     if (direction == View.FOCUS_RIGHT && getChildCount() > 0) {      int daRight=getChildAt(0).getRight();      int screenRight=getScrollX() + getWidth() - getPaddingRight();      if (daRight - screenRight < maxJump) {        scrollDelta=daRight - screenRight;      }    }    if (scrollDelta == 0) {      return false;    }    doScrollX(direction == View.FOCUS_RIGHT ? scrollDelta : -scrollDelta);  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  public void init(AsymmetricKeyParameter publicKey,CipherParameters params,EphemeralKeyPairGenerator ephemeralKeyPairGenerator){  this.forEncryption=true;  this.pubParam=publicKey;  this.keyPairGenerator=ephemeralKeyPairGenerator;  extractParams(params);}  }
class C{  public void eclipseIni(Action<EclipseIni> eclipseIni){  Preconditions.checkArgument(this.eclipseIni == null,"Can only set eclipseIni once");  this.eclipseIni=eclipseIni;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapreturnnull.class,args);}  }
class C{  public String userTipText(){  return "The user name for the database";}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static boolean isGPRSOpen(){  ConnectivityManager connectivityManager=(ConnectivityManager)NoHttp.getContext().getSystemService(Context.CONNECTIVITY_SERVICE);  Class<?> cmClass=connectivityManager.getClass();  try {    Method getMobileDataEnabledMethod=cmClass.getMethod("getMobileDataEnabled");    getMobileDataEnabledMethod.setAccessible(true);    return (Boolean)getMobileDataEnabledMethod.invoke(connectivityManager);  } catch (  Throwable e) {  }  return false;}  }
class C{  private POInfo(Properties ctx,int AD_Table_ID,boolean baseLanguageOnly){  this(ctx,AD_Table_ID,baseLanguageOnly,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.248 -0500",hash_original_method="C7FE089D5B9638DFC662C69BB1CCA253",hash_generated_method="F7F12532769C64CBD97E063872D24096") public boolean quickReject(int left,int top,int right,int bottom){  return (((getTaintInt() + left + right+ top+ bottom)) == 1);}  }
class C{  private void writeEntitySets(XMLStreamWriter writer) throws XMLStreamException, ODataRenderException {  List<EntitySet> entitySets=getEntityContainer().getEntitySets();  LOG.debug("Number of entity sets to be written in service document are {}",entitySets.size());  for (  EntitySet entitySet : entitySets) {    if (entitySet.isIncludedInServiceDocument()) {      writeElement(writer,null,SERVICE_COLLECTION,null,entitySet.getName(),entitySet.getName());    }  }}  }
class C{  public void processClientMembership(String senderId,String clientId,String clientHost,int eventType){}  }
class C{  private boolean checkCongruence(ValueGraphVertex v1,ValueGraphVertex v2){  if (v1 == v2) {    return true;  }  if (v1.getLabel() != v2.getLabel()) {    return false;  }  int arity=v1.getArity();  for (int i=0; i < arity; i++) {    ValueGraphVertex target1=v1.getTarget(i);    ValueGraphVertex target2=v2.getTarget(i);    if ((target1 == null) || (target2 == null)) {      continue;    }    if (target1.getValueNumber() != target2.getValueNumber()) {      return false;    }  }  return true;}  }
class C{  public boolean remove(String path){  return deletedFiles.remove(path);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Supplier<Pair<Integer,JsonNode>> handleRemoveOp(String path,JsonNode patchValue,PatchRequestScope requestScope){  try {    JsonApiDocument value=requestScope.getMapper().readJsonApiPatchExtValue(patchValue);    String fullPath;    if (path.contains("relationships")) {      fullPath=path;    } else {      Data<Resource> data=value.getData();      if (data == null || data.get() == null) {        fullPath=path;      } else {        Collection<Resource> resources=data.get();        String id=getSingleResource(resources).getId();        fullPath=path + "/" + id;      }    }    DeleteVisitor visitor=new DeleteVisitor(new PatchRequestScope(path,value,requestScope));    return visitor.visit(Elide.parse(fullPath));  } catch (  IOException e) {    throw new InvalidEntityBodyException("Could not parse patch extension value: " + patchValue);  }}  }
class C{  public int nextToken() throws IOException {  if (ttype == TT_PARTIAL_STRING) {    readString();    return ttype;  }  while (nextChar <= ' ' && nextChar != -1) {    nextChar=read();  }switch (nextChar) {case -1:    return ttype=TT_EOF;case '{':case '}':case ':':case '[':case ']':case ',':  sval=null;ttype=nextChar;nextChar=read();break;case '"':nextChar=read();readString();break;case '-':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':readNumeric();break;default :readIdentifier();}return ttype;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Deprecated public Elide(AuditLogger auditLogger,DataStore dataStore,EntityDictionary dictionary){  this(auditLogger,dataStore,dictionary,new JsonApiMapper(dictionary));}  }
class C{  public static float svgVerticalLengthToUserSpace(String s,String attr,Context ctx){  return svgLengthToUserSpace(s,attr,VERTICAL_LENGTH,ctx);}  }
class C{  public InternalVirtualArrayServiceClient(String server){  setServer(server);}  }
class C{  public static Geoloc parseGeolocDocument(String xml) throws PayloadException {  try {    InputSource geolocInput=new InputSource(new ByteArrayInputStream(xml.getBytes(UTF8)));    GeolocInfoParser geolocParser=new GeolocInfoParser(geolocInput).parse();    GeolocInfoDocument geolocDocument=geolocParser.getGeoLocInfo();    if (geolocDocument == null) {      throw new PayloadException("Unable to parse geoloc document!");    }    return new Geoloc(geolocDocument.getLabel(),geolocDocument.getLatitude(),geolocDocument.getLongitude(),geolocDocument.getExpiration(),geolocDocument.getRadius());  } catch (  ParserConfigurationException|ParseFailureException|SAXException e) {    throw new PayloadException("Unable to parse geoloc document!",e);  }}  }
class C{  static public void packLong(OutputStream out,long value) throws IOException {  int shift=63 - Long.numberOfLeadingZeros(value);  shift-=shift % 7;  while (shift != 0) {    out.write((int)((value >>> shift) & 0x7F));    shift-=7;  }  out.write((int)((value & 0x7F) | 0x80));}  }
class C{  public VmSchedulerTimeSharedOverSubscription(List<? extends Pe> pelist){  super(pelist);}  }
class C{  public static Indication createConnectionAttemptIndication(int connectionIdValue,TransportAddress peerAddress,byte[] transactionId) throws IllegalArgumentException, StunException {  Indication connectionAttemptIndication=new Indication();  connectionAttemptIndication.setTransactionID(transactionId);  connectionAttemptIndication.setMessageType(Message.CONNECTION_ATTEMPT_INDICATION);  ConnectionIdAttribute connectionIdAttribute=AttributeFactory.createConnectionIdAttribute(connectionIdValue);  connectionAttemptIndication.putAttribute(connectionIdAttribute);  XorPeerAddressAttribute xorPeerAddressAttribute=AttributeFactory.createXorPeerAddressAttribute(peerAddress,connectionAttemptIndication.getTransactionID());  connectionAttemptIndication.putAttribute(xorPeerAddressAttribute);  return connectionAttemptIndication;}  }
class C{  public static String concat(final Object... values){  return concat(values,EMPTY_STRING);}  }
class C{  protected boolean hasCompressedThumbnail(){  return mThumbnail != null;}  }
class C{  static String[] prependToStringArray(String[] array,String str){  String[] result=new String[array.length];  for (int i=0; i < result.length; i++) {    if (i == 0) {      result[0]=str + array[0];    } else {      result[i]=StringHelper.copyString(" ",str.length()) + array[i];    }  }  return result;}  }
class C{  public static RxANRequest.PutRequestBuilder put(String url){  return new RxANRequest.PutRequestBuilder(url);}  }
class C{  @Override public final String toString(){  return Double.toString(this.degrees) + '\u00B0';}  }
class C{  public ArrayList<Value> keys(){  ArrayList<Value> list=New.arrayList(size);  for (  Value k : keys) {    if (k != null && k != ValueNull.DELETED) {      list.add(k);    }  }  return list;}  }
class C{  public void updateDataItems(int service,int pid,char[] buffer){  EcuDataItem currItm;  Vector<EcuDataItem> currItms=getPidDataItems(service,pid);  for (  EcuDataItem currItm1 : currItms) {    currItm=currItm1;    currItm.updatePvFomBuffer(buffer);  }}  }
class C{  public EditableOMScalingRaster(GraphicAttributes ga){  createGraphic(ga);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/upgrade") public Response upgradeCatalog(@DefaultValue("") @QueryParam(SearchConstants.TENANT_ID_PARAM) String tenantId){  StorageOSUser user=getUserFromContext();  if (StringUtils.isBlank(tenantId)) {    tenantId=user.getTenantId();  }  verifyAuthorizedInTenantOrg(uri(tenantId),user);  try {    catalogCategoryManager.upgradeCatalog(uri(tenantId));  } catch (  IOException e) {    log.error("Failed to upgrade catalog",e);    return Response.serverError().build();  }  return Response.ok().build();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void readExif(byte[] jpeg) throws IOException {  readExif(new ByteArrayInputStream(jpeg));}  }
class C{  public void putField(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTFIELD,owner,name,type);}  }
class C{  public MutualInfoCalculatorMultiVariateGaussian(){}  }
class C{  public void addPredictions(ArrayList<Prediction> predictions) throws Exception {  for (int i=0; i < predictions.size(); i++) {    addPrediction((NominalPrediction)predictions.get(i));  }}  }
class C{  public boolean isDone(){  for (  Future<T> f : components)   if (!f.isDone())   return false;  return true;}  }
class C{  private FloatMatrix[] trainByInstanceGradientDescent(FloatVector labels){  DenseFloatMatrix[] weightUpdateMatrices=new DenseFloatMatrix[this.weightMatrixList.size()];  for (int m=0; m < weightUpdateMatrices.length; ++m) {    weightUpdateMatrices[m]=new DenseFloatMatrix(this.weightMatrixList.get(m).getRowCount(),this.weightMatrixList.get(m).getColumnCount());  }  FloatVector deltaVec=new DenseFloatVector(this.layerSizeList.get(this.layerSizeList.size() - 1));  FloatFunction squashingFunction=this.squashingFunctionList.get(this.squashingFunctionList.size() - 1);  FloatMatrix lastWeightMatrix=this.weightMatrixList.get(this.weightMatrixList.size() - 1);  for (int i=0; i < deltaVec.getDimension(); ++i) {    float finalOut=neurons.get(finalLayerIdx)[i].getOutput();    float costFuncDerivative=this.costFunction.applyDerivative(labels.get(i),finalOut);    costFuncDerivative+=this.regularizationWeight * lastWeightMatrix.getRowVector(i).sum();    if (!squashingFunction.getFunctionName().equalsIgnoreCase(SoftMax.class.getSimpleName())) {      costFuncDerivative*=squashingFunction.applyDerivative(finalOut);    }    neurons.get(finalLayerIdx)[i].backpropagate(costFuncDerivative);    deltaVec.set(i,costFuncDerivative);  }  for (int layer=this.layerSizeList.size() - 2; layer >= 0; --layer) {    backpropagate(layer,weightUpdateMatrices[layer]);  }  this.setPrevWeightMatrices(weightUpdateMatrices);  return weightUpdateMatrices;}  }
class C{  public JFXRippler(Node control,RipplerMask mask){  this(control,mask,RipplerPos.FRONT);}  }
class C{  private boolean isConditional(){  while (true) {    nextToken();switch (fToken) {case Symbols.TokenIDENT:case Symbols.TokenOTHER:      continue;case Symbols.TokenCASE:case Symbols.TokenDEFAULT:    return false;default :  return true;}}}  }
class C{  public void componentResized(final ComponentEvent e){}  }
class C{  protected void drawDomainMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){  CategoryItemRenderer r=getRenderer(index);  if (r == null) {    return;  }  Collection markers=getDomainMarkers(index,layer);  CategoryAxis axis=getDomainAxisForDataset(index);  if (markers != null && axis != null) {    Iterator iterator=markers.iterator();    while (iterator.hasNext()) {      CategoryMarker marker=(CategoryMarker)iterator.next();      r.drawDomainMarker(g2,this,axis,marker,dataArea);    }  }}  }
class C{  @Deprecated public void saveSchematic(File path) throws IOException, DataException {  checkNotNull(path);  SchematicFormat.MCEDIT.save(this,path);}  }
class C{  @Override public void removeChangeListener(DialLayerChangeListener listener){  this.listenerList.remove(DialLayerChangeListener.class,listener);}  }
class C{  private static Result doSendViaGcm(String message,Sender sender,DeviceInfo deviceInfo) throws IOException {  if (message.length() > 1000) {    message=message.substring(0,1000) + "[...]";  }  Message msg=new Message.Builder().addData("message",message).delayWhileIdle(false).timeToLive(0).build();  Result result=sender.send(msg,deviceInfo.getDeviceRegistrationID(),5);  if (result.getMessageId() != null) {    String canonicalRegId=result.getCanonicalRegistrationId();    if (canonicalRegId != null) {      endpoint.removeDeviceInfo(deviceInfo.getDeviceRegistrationID());      deviceInfo.setDeviceRegistrationID(canonicalRegId);      endpoint.insertDeviceInfo(deviceInfo);    }  } else {    String error=result.getErrorCodeName();    if (error.equals(Constants.ERROR_NOT_REGISTERED)) {      endpoint.removeDeviceInfo(deviceInfo.getDeviceRegistrationID());    }  }  return result;}  }
class C{  public RegexValidator(@NonNull final CharSequence errorMessage,@NonNull final Pattern regex){  super(errorMessage);  setRegex(regex);}  }
class C{  public void end(){  if (TransitionConfig.isPrintDebug()) {    getTransitionStateHolder().end();    getTransitionStateHolder().print();  }  for (int i=0, size=mTransitionControls.size(); i < size; i++) {    mTransitionControls.get(i).end();  }}  }
class C{  public static boolean isConnectingToInternet(Context mContext){  ConnectivityManager connectivityManager=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    Network[] networks=connectivityManager.getAllNetworks();    NetworkInfo networkInfo;    for (    Network mNetwork : networks) {      networkInfo=connectivityManager.getNetworkInfo(mNetwork);      if (networkInfo.getState().equals(NetworkInfo.State.CONNECTED)) {        return true;      }    }  } else {    if (connectivityManager != null) {      NetworkInfo[] info=connectivityManager.getAllNetworkInfo();      if (info != null) {        for (        NetworkInfo anInfo : info) {          if (anInfo.getState() == NetworkInfo.State.CONNECTED) {            return true;          }        }      }    }  }  return false;}  }
class C{  public static void applyPointValueFromSpec(PointF output,PointF specValue,float currentRenderSize){  if (output == null || specValue == null) {    return;  }  output.set(getFloatValueFromSpec(specValue.x,currentRenderSize),getFloatValueFromSpec(specValue.y,currentRenderSize));}  }
class C{  public void add(T object){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.add(object);    } else {      mObjects.add(object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public TIntHash(int initialCapacity){  super(initialCapacity);  no_entry_value=Constants.DEFAULT_INT_NO_ENTRY_VALUE;  if (no_entry_value != (int)0) {    Arrays.fill(_set,no_entry_value);  }}  }
class C{  protected String buildQuery(List<NameValuePair> valuePairs){  StringBuilder stringBuilder=new StringBuilder();  try {    for (int i=0; i < valuePairs.size(); i++) {      NameValuePair pair=valuePairs.get(i);      stringBuilder.append(URLEncoder.encode(pair.getName(),"utf-8"));      stringBuilder.append("=");      stringBuilder.append(URLEncoder.encode(pair.getValue(),"utf-8"));      if (i + 1 != valuePairs.size())       stringBuilder.append("&");    }  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }  return stringBuilder.toString();}  }
class C{  @Override public boolean isStartElement(){  return eventType == XMLStreamConstants.START_ELEMENT;}  }
class C{  private void readDistanceMatrix(String filename){  LOG.info("Reading distance matrix from " + filename);  Map<String,Integer> siteMap;  Map<Integer,String> siteIndexMap;  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=br.readLine();    String[] sa;    if (line != null) {      sa=line.split(",");    } else {      throw new NullPointerException("Null line read. Not expected.");    }    int numberOfSites=sa.length - 1;    siteMap=new HashMap<>(numberOfSites);    siteIndexMap=new HashMap<>();    for (int i=1; i < sa.length; i++) {      String siteId=sa[i];      this.sites.add(siteId);      siteMap.put(siteId,new Integer(i));      siteIndexMap.put(new Integer(i),siteId);    }    LOG.info("... read " + numberOfSites + " sites.");    while ((line=br.readLine()) != null) {      sa=line.split(",");      if (sa.length != numberOfSites + 1) {        LOG.error("Wrong line length read!!");      }      String demandPointId=sa[0];      this.demandPoints.add(demandPointId);      for (int i=1; i < sa.length; i++) {        double distance=Double.POSITIVE_INFINITY;        try {          distance=Double.parseDouble(sa[i]);        } catch (        Exception e) {          LOG.error("Cannot convert " + sa[i] + " to distance of type double.");          e.printStackTrace();        }        distanceMatrix.createEntry(demandPointId,siteIndexMap.get(i),distance);      }    }    LOG.info("... read " + this.demandPoints.size() + " demand points (rows).");    LOG.info("... read " + (sa.length - 1) + " sites (columns).");  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Could not read from " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + filename);    }  }}  }
class C{  private static int calculateBestInSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float inSampleSize=1.0f;  while ((inSampleSize * 2) <= ratio) {    inSampleSize*=2;  }  return (int)inSampleSize;}  }
class C{  public void init(){  mpiRank=MPI.COMM_WORLD.Rank();  mpiSize=MPI.COMM_WORLD.Size();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private List<ArgType> consumeExtendsTypesList(){  List<ArgType> types=Collections.emptyList();  boolean next;  do {    ArgType argType=consumeType();    if (!argType.equals(ArgType.OBJECT)) {      if (types.isEmpty()) {        types=new LinkedList<ArgType>();      }      types.add(argType);    }    next=lookAhead(':');    if (next) {      consume(':');    }  } while (next);  return types;}  }
class C{  public static boolean isValidUrl(String url){  if (TextUtils.isEmpty(url)) {    return false;  } else {    return Patterns.WEB_URL.matcher(url).matches();  }}  }
class C{  public void init(FileDownloadConfiguration configuration){synchronized (mInitLock) {    this.mConfiguration=configuration;  }}  }
class C{  public RE(String pattern,int matchFlags) throws RESyntaxException {  this(new RECompiler().compile(pattern),matchFlags);}  }
class C{  public void init(Controller c){  super.init(c);  display=new Display2D(ForagingHoneyBeeSimulation.WIDTH,ForagingHoneyBeeSimulation.HEIGHT,this,1);  displayFrame=display.createFrame();  displayFrame.setTitle("Honey bee playground");  c.registerFrame(displayFrame);  displayFrame.setVisible(true);  display.attach(vidPortrayal,"Agents");  display.setInterval(5);}  }
class C{  private static int analyze(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  int stepType;  int stepCount=0;  int analysisResult=0x00000000;  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    stepCount++;    boolean predAnalysis=analyzePredicate(compiler,stepOpCodePos,stepType);    if (predAnalysis)     analysisResult|=BIT_PREDICATE;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:      analysisResult|=BIT_FILTER;    break;case OpCodes.FROM_ROOT:  analysisResult|=BIT_ROOT;break;case OpCodes.FROM_ANCESTORS:analysisResult|=BIT_ANCESTOR;break;case OpCodes.FROM_ANCESTORS_OR_SELF:analysisResult|=BIT_ANCESTOR_OR_SELF;break;case OpCodes.FROM_ATTRIBUTES:analysisResult|=BIT_ATTRIBUTE;break;case OpCodes.FROM_NAMESPACE:analysisResult|=BIT_NAMESPACE;break;case OpCodes.FROM_CHILDREN:analysisResult|=BIT_CHILD;break;case OpCodes.FROM_DESCENDANTS:analysisResult|=BIT_DESCENDANT;break;case OpCodes.FROM_DESCENDANTS_OR_SELF:if (2 == stepCount && BIT_ROOT == analysisResult) {analysisResult|=BIT_ANY_DESCENDANT_FROM_ROOT;}analysisResult|=BIT_DESCENDANT_OR_SELF;break;case OpCodes.FROM_FOLLOWING:analysisResult|=BIT_FOLLOWING;break;case OpCodes.FROM_FOLLOWING_SIBLINGS:analysisResult|=BIT_FOLLOWING_SIBLING;break;case OpCodes.FROM_PRECEDING:analysisResult|=BIT_PRECEDING;break;case OpCodes.FROM_PRECEDING_SIBLINGS:analysisResult|=BIT_PRECEDING_SIBLING;break;case OpCodes.FROM_PARENT:analysisResult|=BIT_PARENT;break;case OpCodes.FROM_SELF:analysisResult|=BIT_SELF;break;case OpCodes.MATCH_ATTRIBUTE:analysisResult|=(BIT_MATCH_PATTERN | BIT_ATTRIBUTE);break;case OpCodes.MATCH_ANY_ANCESTOR:analysisResult|=(BIT_MATCH_PATTERN | BIT_ANCESTOR);break;case OpCodes.MATCH_IMMEDIATE_ANCESTOR:analysisResult|=(BIT_MATCH_PATTERN | BIT_PARENT);break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}if (OpCodes.NODETYPE_NODE == compiler.getOp(stepOpCodePos + 3)) {analysisResult|=BIT_NODETEST_ANY;}stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);if (stepOpCodePos < 0) break;}analysisResult|=(stepCount & BITS_COUNT);return analysisResult;}  }
class C{  public static void copy(File source,File target,FilenameFilter filter,boolean replaceIfExists) throws IOException {  copy(source,target,filter,false,replaceIfExists);}  }
class C{  public Network applyFilters(){  log.info("applying filters to network...");  int nodeCount=0;  int linkCount=0;  Network net=NetworkUtils.createNetwork();  if (!this.nodeFilters.isEmpty()) {    for (    Node n : this.network.getNodes().values()) {      boolean add=true;      for (      NetworkNodeFilter f : nodeFilters) {        if (!f.judgeNode(n)) {          add=false;          break;        }      }      if (add) {        this.addNode(net,n);        nodeCount++;      }    }  }  if (!this.linkFilters.isEmpty()) {    for (    Link l : this.network.getLinks().values()) {      boolean add=true;      for (      NetworkLinkFilter f : linkFilters) {        if (!f.judgeLink(l)) {          add=false;          break;        }      }      if (add) {        this.addLink(net,l);        linkCount++;      }    }  }  log.info("filtered " + nodeCount + " of "+ network.getNodes().size()+ " nodes...");  log.info("filtered " + linkCount + " of "+ network.getLinks().size()+ " links.");  return net;}  }
class C{  @Override public void close() throws IOException {  bb=null;}  }
class C{  @Override public int start_production(){  return 1;}  }
class C{  public static void singleValue(String name,double value){  singleValue(name,value,null);}  }
class C{  public static BasalInitializer serializableInstance(){  return new BasalInitializer(BooleanGlassFunction.serializableInstance(),0.0,1.0);}  }
class C{  public synchronized Certificate engineGetCertificate(String alias){  token.ensureValid();  AliasInfo aliasInfo=aliasMap.get(alias);  if (aliasInfo == null) {    return null;  }  return aliasInfo.cert;}  }
class C{  public void addParent(int nParent,int iParent,Instances _Instances){  if (m_nNrOfParents == m_nParents.length) {    int[] nParents=new int[2 * m_nParents.length];    for (int i=0; i < m_nNrOfParents; i++) {      nParents[i]=m_nParents[i];    }    m_nParents=nParents;  }  for (int iParent2=m_nNrOfParents; iParent2 > iParent; iParent2--) {    m_nParents[iParent2]=m_nParents[iParent2 - 1];  }  m_nParents[iParent]=nParent;  m_nNrOfParents++;  m_nCardinalityOfParents*=_Instances.attribute(nParent).numValues();}  }
class C{  public ConcurrentMap<UserKey,User> deserialize(){  log.debug("Starting reading user DB.");  final File[] files=userFilesList();  if (files != null) {    ConcurrentMap<UserKey,User> tempUsers=Arrays.stream(files).parallel().filter(null).flatMap(null).collect(Collectors.toConcurrentMap(null,identity(),null));    log.debug("Reading user DB finished.");    return tempUsers;  }  log.debug("Reading user DB finished.");  return new ConcurrentHashMap<>();}  }
class C{  public void pushContext(){  int max=contexts.length;  contexts[contextPos].declsOK=false;  contextPos++;  if (contextPos >= max) {    Context newContexts[]=new Context[max * 2];    System.arraycopy(contexts,0,newContexts,0,max);    max*=2;    contexts=newContexts;  }  currentContext=contexts[contextPos];  if (currentContext == null) {    contexts[contextPos]=currentContext=new Context();  }  if (contextPos > 0) {    currentContext.setParent(contexts[contextPos - 1]);  }}  }
class C{  @Override public String toString(){  return canonicalForm;}  }
class C{  public static <T>void cancel(Future<T> future){  future.raise(new FutureCancelledException());}  }
class C{  private MulticastSocket createSocket() throws IOException {  MulticastSocket sock=new MulticastSocket(mcastPort);  sock.setLoopbackMode(false);  if (sockItf != null)   sock.setInterface(sockItf);  if (sock.getLoopbackMode())   U.warn(log,"Loopback mode is disabled which prevents nodes on the same machine from discovering " + "each other.");  sock.joinGroup(mcastGrp);  if (ttl != -1)   sock.setTimeToLive(ttl);  return sock;}  }
class C{  private static void destroyEntriesK1andK2(){  try {    Region r=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(r);    r.destroy("key1");    r.destroy("key2");  } catch (  Exception ex) {    Assert.fail("failed while destroyEntry()",ex);  }}  }
class C{  public static boolean isFileReadable(String fileName){  final File file=new File(fileName);  return file.exists() && file.canRead();}  }
class C{  public TimeSynchronizationSample(final Node node,final CommunicationTimeStamps localTimeStamps,final CommunicationTimeStamps remoteTimeStamps){  this.node=node;  this.localTimeStamps=localTimeStamps;  this.remoteTimeStamps=remoteTimeStamps;}  }
class C{  public IOTask<List<SaveFile>> loadSaveFilesTask(){  log.debug(null);  return FS.loadFileNamesTask(saveDir(),true,Collections.singletonList(new FileExtension(SAVE_FILE_EXT))).then(null);}  }
class C{  public void print(Object s) throws IOException {  out.write(Convert.escapeUnicode(s.toString()));}  }
class C{  @SuppressWarnings("unchecked") public void writeNString(String x) throws SQLException {  attribs.add(x);}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8){  return new ImmutableCollections.ListN<E>(e1,e2,e3,e4,e5,e6,e7,e8);}  }
class C{  public void putField(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTFIELD,owner,name,type);}  }
class C{  public ValueType findLast(KeyType key){  checkOpen();  DatabaseEntry keyEntry=new DatabaseEntry(keyConverter.toByteArray(key));  DatabaseEntry value=new DatabaseEntry();  ValueType result=null;  Cursor cursor=null;  try {    cursor=db.openCursor(txn().getBDBTransaction(),cursorConfig);    OperationStatus status=cursor.getLast(keyEntry,value,LockMode.DEFAULT);    if (status == OperationStatus.SUCCESS)     result=valueConverter.fromByteArray(value.getData(),value.getOffset(),value.getSize());  } catch (  Exception ex) {    throw new HGException("Failed to lookup index '" + name + "': "+ ex.toString(),ex);  } finally {    if (cursor != null)     try {      cursor.close();    } catch (    Throwable t) {    }  }  return result;}  }
class C{  @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup,int viewType){switch (viewType) {case MENU_ITEM_VIEW_TYPE:    View menuItemLayoutView=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.menu_item_container,viewGroup,false);  return new MenuItemViewHolder(menuItemLayoutView);case NATIVE_EXPRESS_AD_VIEW_TYPE:default :View nativeExpressLayoutView=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.native_express_ad_container,viewGroup,false);return new NativeExpressAdViewHolder(nativeExpressLayoutView);}}  }
class C{  public String toString(){  return Double.toString(get());}  }
class C{  public void testProxyGetPreferredHttpHost_UrlBad() throws Exception {  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,null));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,""));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"bad:"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"bad"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"bad:\\"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"bad://#"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"://#"));}  }
class C{  public static void writeToFile(List<String> csvLines,String filename) throws FileNotFoundException, UnsupportedEncodingException {  PrintWriter writer=new PrintWriter(filename,"UTF-8");  csvLines.forEach(null);  writer.close();}  }
class C{  public boolean waitIfOngoing(){  return this.waitIfOngoing;}  }
class C{  @After public void clearStored(){  for (  HousePortal portal : portals) {    StendhalRPZone zone=portal.getZone();    if (zone != null) {      zone.remove(portal);    }  }  portals.clear();  if (chest != null) {    StendhalRPZone zone=chest.getZone();    if (zone != null) {      zone.remove(chest);      chest=null;    }  }}  }
class C{  public ParsedURLData parseURL(String urlStr){  try {    URL url=new URL(urlStr);    return constructParsedURLData(url);  } catch (  MalformedURLException mue) {  }  ParsedURLData ret=constructParsedURLData();  if (urlStr == null)   return ret;  int pidx=0, idx;  int len=urlStr.length();  idx=urlStr.indexOf('#');  ret.ref=null;  if (idx != -1) {    if (idx + 1 < len)     ret.ref=urlStr.substring(idx + 1);    urlStr=urlStr.substring(0,idx);    len=urlStr.length();  }  if (len == 0)   return ret;  idx=0;  char ch=urlStr.charAt(idx);  while ((ch == '-') || (ch == '+') || (ch == '.')|| ((ch >= 'a') && (ch <= 'z'))|| ((ch >= 'A') && (ch <= 'Z'))) {    idx++;    if (idx == len) {      ch=0;      break;    }    ch=urlStr.charAt(idx);  }  if (ch == ':') {    ret.protocol=urlStr.substring(pidx,idx).toLowerCase();    pidx=idx + 1;  }  idx=urlStr.indexOf('/');  if ((idx == -1) || ((pidx + 2 < len) && (urlStr.charAt(pidx) == '/') && (urlStr.charAt(pidx + 1) == '/'))) {    if (idx != -1)     pidx+=2;    idx=urlStr.indexOf('/',pidx);    String hostPort;    if (idx == -1)     hostPort=urlStr.substring(pidx); else     hostPort=urlStr.substring(pidx,idx);    int hidx=idx;    idx=hostPort.indexOf(':');    ret.port=-1;    if (idx == -1) {      if (hostPort.length() == 0)       ret.host=null; else       ret.host=hostPort;    } else {      if (idx == 0)       ret.host=null; else       ret.host=hostPort.substring(0,idx);      if (idx + 1 < hostPort.length()) {        String portStr=hostPort.substring(idx + 1);        try {          ret.port=Integer.parseInt(portStr);        } catch (        NumberFormatException nfe) {        }      }    }    if (((ret.host == null) || (ret.host.indexOf('.') == -1)) && (ret.port == -1))     ret.host=null; else     pidx=hidx;  }  if ((pidx == -1) || (pidx >= len))   return ret;  ret.path=urlStr.substring(pidx);  return ret;}  }
class C{  public Color color(){  g=63;  return color(r,g,b);}  }
class C{  void addScrapView(View scrap,int position,int viewType){  if (viewTypeCount == 1) {    currentScrapViews.put(position,scrap);  } else {    scrapViews[viewType].put(position,scrap);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    scrap.setAccessibilityDelegate(null);  }}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String responseMsg=processPostRequest(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(responseMsg);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.shape=SerialUtilities.readShape(stream);  this.stroke=SerialUtilities.readStroke(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);  this.fillPaint=SerialUtilities.readPaint(stream);}  }
class C{  public boolean hasArgInCallerFrame(){  return hasArgInCallerFrame;}  }
class C{  public ColorRGBADialog(java.awt.Frame parent,boolean modal){  super(parent,modal);  initComponents();}  }
class C{  public BayesUpdaterEditor(CptInvariantUpdaterWrapper wrapper){  this((UpdaterWrapper)wrapper);}  }
class C{  public THashSet(int initialCapacity,float loadFactor,TObjectHashingStrategy<E> strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.203 -0500",hash_original_method="A021B9E0131A2ECDBAD4FC090EED8BCD",hash_generated_method="73299216F663CE86B75D1ECD0099BE6B") protected VersionInfo(String pckg,String module,String release,String time,String clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  infoPackage=pckg;  infoModule=(module != null) ? module : UNAVAILABLE;  infoRelease=(release != null) ? release : UNAVAILABLE;  infoTimestamp=(time != null) ? time : UNAVAILABLE;  infoClassloader=(clsldr != null) ? clsldr : UNAVAILABLE;}  }
class C{  public TwoDPoint(String s){  StringTokenizer st=new StringTokenizer(s,",");  x=Double.valueOf(st.nextToken());  y=Double.valueOf(st.nextToken());}  }
class C{  public GetSnapshotsRequestBuilder(ElasticsearchClient client,GetSnapshotsAction action,String repository){  super(client,action,new GetSnapshotsRequest(repository));}  }
class C{  public MarshalException(String s){  super(s);}  }
class C{  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){  return factory.getDefaultEnvelope();}  }
class C{  public final void testValidateFails(){  NoWhitespaceValidator noWhitespaceValidator=new NoWhitespaceValidator("foo");  assertFalse(noWhitespaceValidator.validate("abc abc"));  assertFalse(noWhitespaceValidator.validate("abc "));  assertFalse(noWhitespaceValidator.validate(" abc"));  assertFalse(noWhitespaceValidator.validate("abc    abc"));}  }
class C{  @Override public void checkConsistency(){  super.checkConsistency();  boolean hasOpeningAndClosingTime=false;  boolean hasOpeningTimeAndLatePenalty=false;  for (  ActivityParams actType : this.getActivityParams()) {    if (actType.isScoringThisActivityAtAll()) {      if ((actType.getOpeningTime() != Time.UNDEFINED_TIME) && (actType.getClosingTime() != Time.UNDEFINED_TIME)) {        hasOpeningAndClosingTime=true;      }      if ((actType.getOpeningTime() != Time.UNDEFINED_TIME) && (getLateArrival_utils_hr() < -0.001)) {        hasOpeningTimeAndLatePenalty=true;      }      if (actType.getOpeningTime() == 0. && actType.getClosingTime() > 24. * 3600 - 1) {        log.error("it looks like you have an activity type with opening time set to 0:00 and closing " + "time set to 24:00. This is most probably not the same as not setting them at all.  " + "In particular, activities which extend past midnight may not accumulate scores.");      }    }  }  if (!hasOpeningAndClosingTime && !hasOpeningTimeAndLatePenalty) {    log.info("NO OPENING OR CLOSING TIMES DEFINED!\n\n\n" + "There is no activity type that has an opening *and* closing time (or opening time and late penalty) defined.\n" + "This usually means that the activity chains can be shifted by an arbitrary\n"+ "number of hours without having an effect on the score of the plans, and thus\n"+ "resulting in wrong results / traffic patterns.\n"+ "If you are using MATSim without time adaptation, you can ignore this warning.\n\n\n");  }  if (this.getMarginalUtlOfWaiting_utils_hr() != 0.0) {    log.warn("marginal utl of wait set to: " + this.getMarginalUtlOfWaiting_utils_hr() + ". Setting this different from zero is "+ "discouraged. The parameter was also abused for pt routing; if you did that, consider setting the new "+ "parameter waitingPt instead.");  }}  }
class C{  private void executeMeshDeviceUpgradeLocalFail(){  mIsFinished=true;  mIsSuc=false;}  }
class C{  public CActionProximityBrowsing(final JFrame parent,final ZyGraph graph){  super("Proximity Browsing");  m_parent=Preconditions.checkNotNull(parent,"IE02826: parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE02827: graph argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_PROXIMITY_BROWSING_HK.getKeyStroke());}  }
class C{  @Override public String header(int comparisonColumn){  if (!m_ResultsetsValid) {    try {      prepareData();    } catch (    Exception ex) {      ex.printStackTrace();      return ex.getMessage();    }  }  initResultMatrix();  m_ResultMatrix.addHeader("Tester",getClass().getName());  m_ResultMatrix.addHeader("Analysing",m_Instances.attribute(comparisonColumn).name());  m_ResultMatrix.addHeader("Datasets",Integer.toString(getNumDatasets()));  m_ResultMatrix.addHeader("Resultsets",Integer.toString(getNumResultsets()));  m_ResultMatrix.addHeader("Confidence",getSignificanceLevel() + " (two tailed)");  m_ResultMatrix.addHeader("Sorted by",getSortColumnName());  m_ResultMatrix.addHeader("Date",(new SimpleDateFormat()).format(new Date()));  return m_ResultMatrix.toStringHeader() + "\n";}  }
class C{  @Override public int hashCode(){  return getValue().hashCode();}  }
class C{  public void reset() throws IOException {  in.reset();}  }
class C{  static String sqlToRegexLike(String sqlPattern,char escapeChar){  int i;  final int len=sqlPattern.length();  final StringBuilder javaPattern=new StringBuilder(len + len);  for (i=0; i < len; i++) {    char c=sqlPattern.charAt(i);    if (JAVA_REGEX_SPECIALS.indexOf(c) >= 0) {      javaPattern.append('\\');    }    if (c == escapeChar) {      if (i == (sqlPattern.length() - 1)) {        throw invalidEscapeSequence(sqlPattern,i);      }      char nextChar=sqlPattern.charAt(i + 1);      if ((nextChar == '_') || (nextChar == '%') || (nextChar == escapeChar)) {        javaPattern.append(nextChar);        i++;      } else {        throw invalidEscapeSequence(sqlPattern,i);      }    } else     if (c == '_') {      javaPattern.append('.');    } else     if (c == '%') {      javaPattern.append(".");      javaPattern.append('*');    } else {      javaPattern.append(c);    }  }  return javaPattern.toString();}  }
class C{  public String toString(){  return type.toString();}  }
class C{  private static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  private void updateThumbPath(){  thumbCurvature=showThumbCurvature ? thumbMaxWidth - thumbWidth : 0;  thumbPath.reset();  thumbPath.moveTo(thumbOffset.x + thumbWidth,thumbOffset.y);  thumbPath.lineTo(thumbOffset.x + thumbWidth,thumbOffset.y + thumbHeight);  thumbPath.lineTo(thumbOffset.x,thumbOffset.y + thumbHeight);  thumbPath.cubicTo(thumbOffset.x,thumbOffset.y + thumbHeight,thumbOffset.x - thumbCurvature,thumbOffset.y + thumbHeight / 2,thumbOffset.x,thumbOffset.y);  thumbPath.close();}  }
class C{  private void applyAnnotations(FacesContext ctx,String rendererType,UIComponent c){  if (c != null && ctx != null) {    associate.getAnnotationManager().applyComponentAnnotations(ctx,c);    if (rendererType != null) {      RenderKit rk=ctx.getRenderKit();      Renderer r=null;      if (rk != null) {        r=rk.getRenderer(c.getFamily(),rendererType);        if (r != null) {          c.setRendererType(rendererType);          associate.getAnnotationManager().applyRendererAnnotations(ctx,r,c);        }      }      if ((rk == null || r == null) && LOGGER.isLoggable(Level.FINE)) {        LOGGER.log(Level.FINE,"Unable to create Renderer with rendererType {0} for component with component type of {1}",new Object[]{rendererType,c.getFamily()});      }    }  }}  }
class C{  public NotBoundException(){  super();}  }
class C{  @Override public boolean sameType(TypeUsage other){  if (!other.isInvokable()) {    return false;  }  if (!(other instanceof InvokableReferenceTypeUsage)) {    return false;  }  InvokableReferenceTypeUsage otherInvokable=(InvokableReferenceTypeUsage)other;  if (this.internalInvokableDefinition.getFormalParameters().size() != otherInvokable.internalInvokableDefinition.getFormalParameters().size()) {    return false;  }  for (int i=0; i < this.internalInvokableDefinition.getFormalParameters().size(); i++) {    if (!this.internalInvokableDefinition.getFormalParameters().get(i).getType().sameType(otherInvokable.internalInvokableDefinition.getFormalParameters().get(i).getType())) {      return false;    }  }  return this.internalInvokableDefinition.getReturnType().sameType(otherInvokable.internalInvokableDefinition.getReturnType());}  }
class C{  protected int _columnOffset(int absRank){  return columnOffsets[absRank];}  }
class C{  @Override public Date toDate(String source,String s){  for (  DateTimeFormatter fmt : dt_formatters) {    try {      final DateTime dt=fmt.withOffsetParsed().parseDateTime(s);      m_dateTime=dt;      return dt.toDate();    } catch (    IllegalArgumentException e) {    }  }  throw new IllegalArgumentException("Failed to parse date " + s);}  }
class C{  public static float[] invert(float[] coefficients){  for (int x=1; x < coefficients.length; x+=2) {    coefficients[x]=-coefficients[x];  }  return coefficients;}  }
class C{  private void makePremiumListView() throws Exception {  handleTableCreation("premium list data view",bigquery().query(PREMIUM_LIST_DATA_SQL.put("SOURCE_DATASET",sourceDatasetId).put("DEST_DATASET",bigquery().getDatasetId()).build(),bigquery().buildDestinationTable("PremiumListData").description("Synthetic view of premium list data.").type(TableType.VIEW).build()));}  }
class C{  protected static List<String> extractCpOpts(final List<String> args){  List<String> actualArgs=new ArrayList<String>();  String path=null;  for (int i=0; i < args.size(); i++) {    if ((args.get(i).equals("-cp") || args.get(i).equals("-classpath")) && (i + 1 < args.size())) {      args.remove(i);      path=args.remove(i);      i--;    }  }  if (path == null) {    final String systemClassPath=System.getenv("CLASSPATH");    if (systemClassPath != null && !systemClassPath.trim().isEmpty()) {      actualArgs.add(System.getenv("CLASSPATH"));    }    actualArgs.add(".");  } else {    actualArgs.add(path);  }  return actualArgs;}  }
class C{  @Bean public WineVersionSource wineVersionSource() throws MalformedURLException {  return new WineversionsSourceWebserviceDefaultImplementation(new URL(playOnLinuxContext.getProperty("webservice.wine.url")));}  }
class C{  public void startAppium(String port,String chromePort,String bootstrapPort) throws Exception {  String command="appium --session-override -p " + port + " --chromedriver-port "+ chromePort+ " -bp "+ bootstrapPort;  System.out.println(command);  String output=cp.runCommand(command);  System.out.println(output);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success)   insert_Accounting("C_Charge_Acct","C_AcctSchema_Default",null);  return success;}  }
class C{  @Override protected void handleShellCloseEvent(){  for (  RaptorConnectorWindowItem item : getWindowItems(ConnectorService.getInstance().getConnector("fics"))) {    if (item instanceof ChessBoardWindowItem)     if (((ChessBoardWindowItem)item).getController() instanceof PlayingController) {      if (!Raptor.getInstance().confirm(local.getString("rapWinL54")))       return;    }  }  storeWindowPreferences();  Raptor.getInstance().shutdown();}  }
class C{  public GitlabGroup createGroup(String name) throws IOException {  return createGroup(name,name);}  }
class C{  public void addText(String text){  _name=text;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ATTRIBUTE;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.REFERENCE_TARGET__MAPPING_MODEL:    setMappingModel((MappingModel)null);  return;}super.eUnset(featureID);}  }
class C{  public TableWithSpinner(){  initialize();}  }
class C{  protected Class defineClass(String name,byte[] bytes){  return super.defineClass(name,bytes,0,bytes.length);}  }
class C{  private void ensureBuckets(long start,long end){  start-=start % bucketDuration;  end+=(bucketDuration - (end % bucketDuration)) % bucketDuration;  for (long now=start; now < end; now+=bucketDuration) {    final int index=Arrays.binarySearch(bucketStart,0,bucketCount,now);    if (index < 0) {      insertBucket(~index,now);    }  }}  }
class C{  public static double convertMillisToDays(double millis){  return millis / DAY_TO_MILLIS;}  }
class C{  public DateTimeFormatterBuilder appendMillisOfDay(int minDigits){  return appendDecimal(DateTimeFieldType.millisOfDay(),minDigits,8);}  }
class C{  private int calculatePartitionId(TopologyContext context){  int thisGlobalTaskId=context.getThisTaskId();  String componentName=context.getComponentId(thisGlobalTaskId);  List<Integer> globalTaskIds=context.getComponentTasks(componentName);  int index=0;  for (  Integer id : globalTaskIds) {    if (id == thisGlobalTaskId) {      return index;    }    index++;  }  throw new IllegalStateException();}  }
class C{  public static String toNTriplesString(Literal lit){  return toNTriplesString(lit,BasicWriterSettings.XSD_STRING_TO_PLAIN_LITERAL.getDefaultValue());}  }
class C{  private static boolean matchModels(List<? extends Statement> model1,Iterable<? extends Statement> model2,Map<BNode,BNode> bNodeMapping,int idx){  boolean result=false;  if (idx < model1.size()) {    Statement st1=model1.get(idx);    List<Statement> matchingStats=findMatchingStatements(st1,model2,bNodeMapping);    for (    Statement st2 : matchingStats) {      Map<BNode,BNode> newBNodeMapping=new HashMap<BNode,BNode>(bNodeMapping);      if (st1.getSubject() instanceof BNode && st2.getSubject() instanceof BNode) {        newBNodeMapping.put((BNode)st1.getSubject(),(BNode)st2.getSubject());      }      if (st1.getObject() instanceof BNode && st2.getObject() instanceof BNode) {        newBNodeMapping.put((BNode)st1.getObject(),(BNode)st2.getObject());      }      if (st1.getContext() instanceof BNode && st2.getContext() instanceof BNode) {        newBNodeMapping.put((BNode)st1.getContext(),(BNode)st2.getContext());      }      result=matchModels(model1,model2,newBNodeMapping,idx + 1);      if (result == true) {        break;      }    }  } else {    result=true;  }  return result;}  }
class C{  protected boolean drawBottomBorder(Component c,Graphics g,int x,int y,int width,int height){  if (super.drawBottomBorder(c,g,x,y,width,height) && frame.isResizable()) {    int startY=height - getBorderInsets(c).bottom;    g.setColor(getFrameShadow());    g.drawLine(CORNER_SIZE - 1,startY + 1,CORNER_SIZE - 1,height - 1);    g.drawLine(width - CORNER_SIZE,startY + 1,width - CORNER_SIZE,height - 1);    g.setColor(getFrameHighlight());    g.drawLine(CORNER_SIZE,startY,CORNER_SIZE,height - 2);    g.drawLine(width - CORNER_SIZE + 1,startY,width - CORNER_SIZE + 1,height - 2);    return true;  }  return false;}  }
class C{  public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  public HCardParser(InputStream in) throws IOException {  this(in,null);}  }
class C{  List<String> sourcePaths(ReferenceTypeImpl refType){  int i;  int fileIndexStart=stratumTable[sti].fileIndex;  int fileIndexEnd=stratumTable[sti + 1].fileIndex;  List<String> result=new ArrayList<String>(fileIndexEnd - fileIndexStart);  for (i=fileIndexStart; i < fileIndexEnd; ++i) {    result.add(fileTable[i].getSourcePath(refType));  }  return result;}  }
class C{  private MarshallerExclusions(){}  }
class C{  public JBBPOut Short(final String str) throws IOException {  assertNotEnded();  if (this.processCommands) {    for (int i=0; i < str.length(); i++) {      _writeShort(str.charAt(i));    }  }  return this;}  }
class C{  public Version minimumCompatibilityVersion(){  return Version.smallest(this,fromId(major * 1000000 + 99));}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoUserRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_pwd = ").append(m_pwd);  buffer.append(", m_deptId = ").append(m_deptId);  buffer.append(", m_stat = ").append(m_stat);  buffer.append(", m_numBadCnts = ").append(m_numBadCnts);  buffer.append(", m_pwdLastUpdts = ").append(m_pwdLastUpdts);  buffer.append(", m_pwdMbc = ").append(m_pwdMbc);  buffer.append(", m_pwdVpCheck = ").append(m_pwdVpCheck);  buffer.append("]");  return buffer.toString();}  }
class C{  public void addCone(float x,float y,float z,float radius,float length,int segments,float baseScale,int baseDirection,int textureCircleDiameterW,int textureCircleDiameterH){  addCylinder(x,y,z,radius,length,segments,baseScale,0.0F,baseDirection,textureCircleDiameterW,textureCircleDiameterH,1);}  }
class C{  public void giveProduct(final EventRaiser npc,final Player player){  final int numberOfProductItems=getNumberOfProductItems(player);  if (!isOrderReady(player)) {    npc.say("Welcome back! I'm still busy with your order to " + getProductionActivity() + " "+ Grammar.quantityplnoun(numberOfProductItems,getProductName(),"a")+ " for you. Come back in "+ getApproximateRemainingTime(player)+ " to get it.");  } else {    final StackableItem products=(StackableItem)SingletonRepository.getEntityManager().getItem(getProductName());    products.setQuantity(numberOfProductItems);    if (isProductBound()) {      products.setBoundTo(player.getName());    }    if (player.equipToInventoryOnly(products)) {      npc.say("Welcome back! I'm done with your order. Here you have " + Grammar.quantityplnoun(numberOfProductItems,getProductName(),"the") + ".");      player.setQuest(questSlot,"done");      player.addXP(numberOfProductItems);      player.notifyWorldAboutChanges();      player.incProducedCountForItem(getProductName(),products.getQuantity());      SingletonRepository.getAchievementNotifier().onProduction(player);    } else {      npc.say("Welcome back! I'm done with your order. But right now you cannot take the " + Grammar.plnoun(numberOfProductItems,getProductName()) + ". Come back when you have space.");    }  }}  }
class C{  public boolean isPaintAllBars(){  return paintAllBars;}  }
class C{  public PolicyInformation(CertificatePolicyId policyIdentifier,Set<PolicyQualifierInfo> policyQualifiers) throws IOException {  if (policyQualifiers == null) {    throw new NullPointerException("policyQualifiers is null");  }  this.policyQualifiers=new LinkedHashSet<PolicyQualifierInfo>(policyQualifiers);  this.policyIdentifier=policyIdentifier;}  }
class C{  protected void applyMaterial(DrawContext dc,Material material){  GL2 gl=dc.getGL().getGL2();  ShapeAttributes activeAttrs=this.getActiveAttributes();  double opacity=activeAttrs.getInteriorOpacity();  if (this.mustApplyLighting(dc,activeAttrs)) {    material.apply(gl,GL2.GL_FRONT_AND_BACK,(float)opacity);  } else {    Color sc=material.getDiffuse();    gl.glColor4ub((byte)sc.getRed(),(byte)sc.getGreen(),(byte)sc.getBlue(),(byte)(opacity < 1 ? (int)(opacity * 255 + 0.5) : 255));  }}  }
class C{  String readDayOfWeek(String source,int ofs){  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=readSubstring(source,ofs,i);  if (fragment == null) {    return null;  }  for (  String weekday : getDateFormatSymbols().getWeekdays()) {    if (fragment.equalsIgnoreCase(weekday)) {      return readSubstring(source,ofs,ofs + weekday.length());    }  }  for (  String weekday : getDateFormatSymbols().getShortWeekdays()) {    if (fragment.equalsIgnoreCase(weekday)) {      return readSubstring(source,ofs,ofs + weekday.length());    }  }  return null;}  }
class C{  public static void walkActions(ActionList c,int swfVersion,String[] pool,String className,List<Integer> profileOffsets){  if (c == null)   return;  Stack<Object> evalStack=new Stack<Object>();  HashMap<Object,Object> variables=new HashMap<Object,Object>();  int offset;  Action a;  for (int i=0; i < c.size(); i++) {    offset=c.getOffset(i);    a=c.getAction(i);switch (a.code) {case ActionConstants.sactionHasLength:case ActionConstants.sactionNone:case ActionConstants.sactionGotoFrame:case ActionConstants.sactionGetURL:case ActionConstants.sactionNextFrame:case ActionConstants.sactionPrevFrame:case ActionConstants.sactionPlay:case ActionConstants.sactionStop:case ActionConstants.sactionToggleQuality:case ActionConstants.sactionStopSounds:case ActionConstants.sactionWaitForFrame:case ActionConstants.sactionSetTarget:case ActionConstants.sactionGotoLabel:      break;case ActionConstants.sactionAdd:case ActionConstants.sactionSubtract:case ActionConstants.sactionMultiply:case ActionConstants.sactionDivide:case ActionConstants.sactionEquals:case ActionConstants.sactionLess:case ActionConstants.sactionAnd:case ActionConstants.sactionOr:case ActionConstants.sactionStringEquals:case ActionConstants.sactionStringAdd:case ActionConstants.sactionStringLess:case ActionConstants.sactionMBStringLength:case ActionConstants.sactionGetProperty:    pop(evalStack);  break;case ActionConstants.sactionNot:case ActionConstants.sactionStringLength:case ActionConstants.sactionToInteger:case ActionConstants.sactionCharToAscii:case ActionConstants.sactionAsciiToChar:case ActionConstants.sactionMBCharToAscii:case ActionConstants.sactionMBAsciiToChar:case ActionConstants.sactionRandomNumber:break;case ActionConstants.sactionGetVariable:Object key=pop(evalStack);if (variables.get(key) == null) {evalStack.push(key);} else {evalStack.push(variables.get(key));}break;case ActionConstants.sactionStringExtract:case ActionConstants.sactionMBStringExtract:pop(evalStack);pop(evalStack);break;case ActionConstants.sactionPush:Push p=(Push)a;Object o=p.value;int type=Push.getTypeCode(o);switch (type) {case Push.kPushStringType:evalStack.push(o);break;case Push.kPushNullType:evalStack.push("null");break;case Push.kPushUndefinedType:evalStack.push("undefined");break;case Push.kPushRegisterType:evalStack.push(registers[((Byte)o).intValue() & 0xFF]);break;case Push.kPushConstant8Type:case Push.kPushConstant16Type:evalStack.push(pool[((Number)o).intValue() & 0xFFFF]);break;case Push.kPushFloatType:evalStack.push(o + "F");break;case Push.kPushBooleanType:case Push.kPushDoubleType:case Push.kPushIntegerType:evalStack.push(o);break;default :evalStack.push("type" + type);break;}break;case ActionConstants.sactionIf:pop(evalStack);break;case ActionConstants.sactionPop:case ActionConstants.sactionCall:case ActionConstants.sactionGotoFrame2:case ActionConstants.sactionSetTarget2:case ActionConstants.sactionRemoveSprite:case ActionConstants.sactionWaitForFrame2:case ActionConstants.sactionTrace:pop(evalStack);break;case ActionConstants.sactionJump:case ActionConstants.sactionEndDrag:break;case ActionConstants.sactionSetVariable:key=pop(evalStack);Object val=pop(evalStack);variables.put(key,val);break;case ActionConstants.sactionGetURL2:pop(evalStack);pop(evalStack);break;case ActionConstants.sactionSetProperty:case ActionConstants.sactionCloneSprite:pop(evalStack);pop(evalStack);pop(evalStack);break;case ActionConstants.sactionStartDrag:pop(evalStack);pop(evalStack);Object obj=pop(evalStack);if (Integer.parseInt(obj.toString()) != 0) {pop(evalStack);pop(evalStack);pop(evalStack);pop(evalStack);}break;case ActionConstants.sactionGetTime:evalStack.push(dummy);break;case ActionConstants.sactionDelete:pop(evalStack);break;case ActionConstants.sactionDefineLocal:val=pop(evalStack);key=pop(evalStack);variables.put(key,val);break;case ActionConstants.sactionDefineFunction:case ActionConstants.sactionDefineFunction2:DefineFunction f=(DefineFunction)a;if (swfVersion > 6 && className != null) {if (f.name == null || f.name.length() == 0) {int depth=evalStack.size();if (depth != 0) {o=evalStack.peek();if (o == dummy) {f.name="";} else if (o != null) {f.name=o.toString();}}evalStack.push(dummy);}if ("null".equals(f.name)) {f.name="";}if (f.name == null || f.name.length() == 0) {} else if (!className.endsWith(f.name)) {f.name=className + "." + f.name;} else {f.name=className + ".[constructor]";}} else {if (f.name == null || f.name.length() == 0) {StringBuilder buffer=new StringBuilder();int depth=evalStack.size();for (int k=depth - 1; k >= 0; k--) {o=evalStack.get(k);if (o == dummy) {break;} else if (k == depth - 1) {buffer.append(o);} else {buffer.insert(0,'.');buffer.insert(0,o);}}f.name=buffer.toString();if (f.name != null && f.name.indexOf(".prototype.") == -1) {f.name="";}evalStack.push(dummy);}}break;case ActionConstants.sactionCallFunction:Object function=pop(evalStack);if (profileOffsets != null && "profile".equals(function)) {profileOffsets.add(new Integer(offset - 13));profileOffsets.add(new Integer(offset - 5));profileOffsets.add(new Integer(offset));profileOffsets.add(new Integer(offset + 1));}int n=((Number)pop(evalStack)).intValue();for (int k=0; k < n; k++) {pop(evalStack);}evalStack.push(dummy);break;case ActionConstants.sactionReturn:pop(evalStack);break;case ActionConstants.sactionModulo:break;case ActionConstants.sactionNewObject:pop(evalStack);int num=((Number)pop(evalStack)).intValue();for (int k=0; k < num; k++) {pop(evalStack);}evalStack.push(dummy);break;case ActionConstants.sactionDefineLocal2:case ActionConstants.sactionDelete2:case ActionConstants.sactionAdd2:case ActionConstants.sactionLess2:pop(evalStack);break;case ActionConstants.sactionInitArray:num=((Number)pop(evalStack)).intValue();for (int k=0; k < num; k++) {pop(evalStack);}evalStack.push(dummy);break;case ActionConstants.sactionInitObject:num=((Number)pop(evalStack)).intValue() * 2;for (int k=0; k < num; k++) {pop(evalStack);}evalStack.push(dummy);break;case ActionConstants.sactionTargetPath:case ActionConstants.sactionEnumerate:case ActionConstants.sactionToNumber:case ActionConstants.sactionToString:case ActionConstants.sactionTypeOf:break;case ActionConstants.sactionStoreRegister:StoreRegister r=(StoreRegister)a;registers[r.register]=evalStack.peek();break;case ActionConstants.sactionEquals2:{pop(evalStack);}break;case ActionConstants.sactionPushDuplicate:evalStack.push(dummy);break;case ActionConstants.sactionStackSwap:break;case ActionConstants.sactionGetMember:Object o1=pop(evalStack);Object o2=pop(evalStack);if (pool != null) {try {evalStack.push(pool[Integer.parseInt(o2.toString())] + "." + pool[Integer.parseInt(o1.toString())]);} catch (Exception ex) {if (o1 == dummy || o2 == dummy) {evalStack.push(dummy);} else {evalStack.push(o2 + "." + o1);}}} else {evalStack.push(o2 + "." + o1);}break;case ActionConstants.sactionSetMember:pop(evalStack);pop(evalStack);pop(evalStack);break;case ActionConstants.sactionIncrement:case ActionConstants.sactionDecrement:break;case ActionConstants.sactionCallMethod:pop(evalStack);pop(evalStack);Object obj2=pop(evalStack);if (obj2 instanceof String) {try {n=Integer.parseInt((String)obj2);} catch (NumberFormatException ex) {n=1;}} else {n=((Number)obj2).intValue();}for (int k=0; k < n; k++) {pop(evalStack);}evalStack.push(dummy);break;case ActionConstants.sactionNewMethod:pop(evalStack);pop(evalStack);num=((Number)pop(evalStack)).intValue();for (int k=0; k < num; k++) {pop(evalStack);}evalStack.push(dummy);break;case ActionConstants.sactionWith:pop(evalStack);break;case ActionConstants.sactionConstantPool:pool=((ConstantPool)a).pool;break;case ActionConstants.sactionStrictMode:break;case ActionConstants.sactionBitAnd:case ActionConstants.sactionBitOr:case ActionConstants.sactionBitLShift:break;case ActionConstants.sactionBitXor:case ActionConstants.sactionBitRShift:case ActionConstants.sactionBitURShift:pop(evalStack);break;case ActionConstants.sactionInstanceOf:pop(evalStack);break;case ActionConstants.sactionEnumerate2:break;case ActionConstants.sactionStrictEquals:case ActionConstants.sactionGreater:case ActionConstants.sactionStringGreater:pop(evalStack);break;case ActionConstants.sactionTry:break;case ActionConstants.sactionThrow:pop(evalStack);break;case ActionConstants.sactionCastOp:break;case ActionConstants.sactionImplementsOp:break;case ActionConstants.sactionQuickTime:break;default :break;}}}  }
class C{  private Solution[] select(Solution[] parents,int index,int size){  Solution[] result=new Solution[size];  for (int i=0; i < size; i++) {    result[i]=parents[(index + i) % parents.length];  }  return result;}  }
class C{  public SparseFloatVector(TIntFloatMap values,int dimensionality) throws IllegalArgumentException {  if (values.size() > dimensionality) {    throw new IllegalArgumentException("values.size() > dimensionality!");  }  this.indexes=new int[values.size()];  this.values=new float[values.size()];{    TIntFloatIterator iter=values.iterator();    for (int i=0; iter.hasNext(); i++) {      iter.advance();      this.indexes[i]=iter.key();    }    Arrays.sort(this.indexes);  }{    for (int i=0; i < values.size(); i++) {      this.values[i]=values.get(this.indexes[i]);    }  }  this.dimensionality=dimensionality;  final int maxdim=getMaxDim();  if (maxdim > dimensionality) {    throw new IllegalArgumentException("Given dimensionality " + dimensionality + " is too small w.r.t. the given values (occurring maximum: "+ maxdim+ ").");  }}  }
class C{  @Override public View onCreateFloatView(int position){  View v=mListView.getChildAt(position + mListView.getHeaderViewsCount() - mListView.getFirstVisiblePosition());  if (v == null) {    return null;  }  v.setPressed(false);  v.setDrawingCacheEnabled(true);  mFloatBitmap=Bitmap.createBitmap(v.getDrawingCache());  v.setDrawingCacheEnabled(false);  if (mImageView == null) {    mImageView=new ImageView(mListView.getContext());  }  mImageView.setBackgroundColor(mFloatBGColor);  mImageView.setPadding(0,0,0,0);  mImageView.setImageBitmap(mFloatBitmap);  mImageView.setLayoutParams(new ViewGroup.LayoutParams(v.getWidth(),v.getHeight()));  return mImageView;}  }
class C{  public static Collection<ContentStream> toContentStreams(final String str,final String contentType){  ArrayList<ContentStream> streams=new ArrayList<>();  ContentStreamBase stream=new ContentStreamBase.StringStream(str);  stream.setContentType(contentType);  streams.add(stream);  return streams;}  }
class C{  public boolean isXMLParserValidating(){  Boolean b=(Boolean)SVGAbstractTranscoder.this.hints.get(KEY_XML_PARSER_VALIDATING);  if (b != null)   return b.booleanValue();  return super.isXMLParserValidating();}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private void incorporateDequeues(){  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  if (cycles != prevCycles || takeIndex != prevTakeIndex) {    final int len=items.length;    long dequeues=(cycles - prevCycles) * len + (takeIndex - prevTakeIndex);    if (invalidated(lastRet,prevTakeIndex,dequeues,len))     lastRet=REMOVED;    if (invalidated(nextIndex,prevTakeIndex,dequeues,len))     nextIndex=REMOVED;    if (invalidated(cursor,prevTakeIndex,dequeues,len))     cursor=takeIndex;    if (cursor < 0 && nextIndex < 0 && lastRet < 0)     detach(); else {      this.prevCycles=cycles;      this.prevTakeIndex=takeIndex;    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.274 -0500",hash_original_method="ED4DAC4BAED1A32A3D194D286EE0C9BC",hash_generated_method="EB27392E1BDD30EDFD84F4921F2A74B4") public void drawPatch(Bitmap bitmap,byte[] chunks,RectF dst,Paint paint){  addTaint(bitmap.getTaintInt() + chunks[0] + dst.getTaintInt()+ paint.getTaintInt());}  }
class C{  JavaScriptEncoder(Mode mode,boolean asciiOnly){  _mode=mode;  _validMasks=new int[]{0,-1 & ~((1 << '\'') | (1 << '\"')),-1 & ~((1 << '\\')),asciiOnly ? ~(1 << Unicode.DEL) : -1};  if (mode == Mode.BLOCK || mode == Mode.HTML) {    _validMasks[1]&=~((1 << '/') | (1 << '-'));  }  if (mode != Mode.SOURCE) {    _validMasks[1]&=~(1 << '&');  }  _asciiOnly=asciiOnly;  _hexEncodeQuotes=(mode == Mode.ATTRIBUTE || mode == Mode.HTML);}  }
class C{  public static int readAll(InputStream i,byte b[]) throws IOException {  int len=b.length;  int n=0;  while (n < len) {    int count=i.read(b,n,len - n);    if (count < 0) {      return n;    }    n+=count;  }  return n;}  }
class C{  public void add(String data){  add(data,true);  tagTranslate=null;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  static double powerOfTwoD(int n){  assert (n >= DoubleConsts.MIN_EXPONENT && n <= DoubleConsts.MAX_EXPONENT);  return Double.longBitsToDouble((((long)n + (long)DoubleConsts.EXP_BIAS) << (DoubleConsts.SIGNIFICAND_WIDTH - 1)) & DoubleConsts.EXP_BIT_MASK);}  }
class C{  public NumericalMultiplyDivideExpression createNumericalMultiplyDivideExpression(){  NumericalMultiplyDivideExpressionImpl numericalMultiplyDivideExpression=new NumericalMultiplyDivideExpressionImpl();  return numericalMultiplyDivideExpression;}  }
class C{  private String applyPreProcessors(final Resource resource,final ProcessingCriteria criteria) throws IOException {  final Collection<ResourcePreProcessor> processors=processorsFactory.getPreProcessors();  LOG.debug("applying preProcessors: {}",processors);  String resourceContent=null;  try {    resourceContent=getResourceContent(resource);  } catch (  final IOException e) {    LOG.debug("Invalid resource found: {}",resource);    if (Context.get().getConfig().isIgnoreMissingResources()) {      return StringUtils.EMPTY;    } else {      LOG.error("Cannot ignore missing resource:  {}",resource);      throw e;    }  }  if (!processors.isEmpty()) {    Writer writer=null;    for (    final ResourcePreProcessor processor : processors) {      final ResourcePreProcessor decoratedProcessor=decoratePreProcessor(processor,criteria);      writer=new StringWriter();      final Reader reader=new StringReader(resourceContent);      decoratedProcessor.process(resource,reader,writer);      resourceContent=writer.toString();    }  }  return String.format("%s%n",resourceContent);}  }
class C{  private static void checkArgs(final float[] min,final float[] max){  if (min == null || max == null || min.length == 0 || max.length == 0) {    throw new IllegalArgumentException("min/max range values cannot be null or empty");  }  if (min.length != max.length) {    throw new IllegalArgumentException("min/max ranges must agree");  }  if (min.length > 4) {    throw new IllegalArgumentException("FloatRangeField does not support greater than 4 dimensions");  }}  }
class C{  public static boolean contains(int x1,int y1,int w1,int h1,int x2,int y2,int w2,int h2){  return x1 <= x2 && y1 <= y2 && x1 + w1 >= x2 + w2 && y1 + h1 >= y2 + h2;}  }
class C{  public Object clone() throws CloneNotSupportedException {  return (IntStack)super.clone();}  }
class C{  public long position(byte[] pattern,long start) throws SerialException, SQLException {  isValid();  if (start < 1 || start > len) {    return -1;  }  int pos=(int)start - 1;  int i=0;  long patlen=pattern.length;  while (pos < len) {    if (pattern[i] == buf[pos]) {      if (i + 1 == patlen) {        return (pos + 1) - (patlen - 1);      }      i++;      pos++;    } else     if (pattern[i] != buf[pos]) {      pos++;    }  }  return -1;}  }
class C{  void addNewEntryForNullKey(V value){  entryForNullKey=new HashMapEntry<K,V>(null,value,0,null);}  }
class C{  void remove(int min,int max){  for (int i=0; i < num; i++) {    if (minRange[i] >= min && maxRange[i] <= max) {      delete(i);      return;    } else     if (min >= minRange[i] && max <= maxRange[i]) {      int minr=minRange[i];      int maxr=maxRange[i];      delete(i);      if (minr < min) {        merge(minr,min - 1);      }      if (max < maxr) {        merge(max + 1,maxr);      }      return;    } else     if (minRange[i] >= min && minRange[i] <= max) {      minRange[i]=max + 1;      return;    } else     if (maxRange[i] >= min && maxRange[i] <= max) {      maxRange[i]=min - 1;      return;    }  }}  }
class C{  public static byte[] toByteArray(short[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(byte)array[i];  }  return result;}  }
class C{  private void registerFileTypeWithoutNotification(@NotNull FileType fileType,@NotNull List<FileNameMatcher> matchers,boolean addScheme){  if (addScheme) {    mySchemesManager.addScheme(fileType);  }  for (  FileNameMatcher matcher : matchers) {    myPatternsTable.addAssociation(matcher,fileType);    myInitialAssociations.addAssociation(matcher,fileType);  }  if (fileType instanceof FileTypeIdentifiableByVirtualFile) {    mySpecialFileTypes=ArrayUtil.append(mySpecialFileTypes,(FileTypeIdentifiableByVirtualFile)fileType,FileTypeIdentifiableByVirtualFile.ARRAY_FACTORY);  }}  }
class C{  private void rollInSeperateThread() throws IllegalStateException {  if (SwingUtilities.isEventDispatchThread()) {    throw new IllegalStateException("Wrong thread");  }  while (!isVisible()) {    Thread.yield();  }  appendText(m_subjectMessage + "\n");  appendText("Contacting  " + m_diceServer.getDisplayName() + "\n");  String text=null;  try {    text=m_diceServer.postRequest(m_sides,m_count,m_subjectMessage,m_gameID,m_gameUUID);    if (text.length() == 0) {      appendText("Nothing could be read from dice server\n");      appendText("Please check your firewall settings");      notifyError();    }    if (!m_test) {      appendText("Contacted :" + text + "\n");    }    m_diceRoll=m_diceServer.getDice(text,m_count);    appendText("Success!");    if (!m_test) {      closeAndReturn();    }  } catch (  final SocketException ex) {    appendText("Connection failure:" + ex.getMessage() + "\n"+ "Please ensure your Internet connection is working, and try again.");    notifyError();  }catch (  final InvocationTargetException e) {    appendText("\nError:" + e.getMessage() + "\n\n");    appendText("Text from dice server:\n" + text + "\n");    notifyError();  }catch (  final IOException ex) {    try {      appendText("An error has occured!\n");      appendText("Possible reasons the error could have happened:\n");      appendText("  1: An invalid e-mail address\n");      appendText("  2: Firewall could be blocking TripleA from connecting to the Dice Server\n");      appendText("  3: The e-mail address does not exist\n");      appendText("  4: An unknown error, please see the error console and consult the forums for help\n");      appendText("     Visit http://tripleadev.org  for extra help\n");      if (text != null) {        appendText("Text from dice server:\n" + text + "\n");      }      final StringWriter writer=new StringWriter();      ex.printStackTrace(new PrintWriter(writer));      writer.close();      appendText(writer.toString());    } catch (    final IOException ex1) {      ex1.printStackTrace();    }    notifyError();  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  private void validateBusinessObjectDataCreateRequest(BusinessObjectDataCreateRequest request,boolean fileSizeRequired,BusinessObjectDataStatusEntity businessObjectDataStatusEntity){  request.setNamespace(alternateKeyHelper.validateStringParameter("namespace",request.getNamespace()));  request.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",request.getBusinessObjectDefinitionName()));  request.setBusinessObjectFormatUsage(alternateKeyHelper.validateStringParameter("business object format usage",request.getBusinessObjectFormatUsage()));  request.setBusinessObjectFormatFileType(alternateKeyHelper.validateStringParameter("business object format file type",request.getBusinessObjectFormatFileType()));  Assert.notNull(request.getBusinessObjectFormatVersion(),"A business object format version must be specified.");  request.setPartitionKey(alternateKeyHelper.validateStringParameter("partition key",request.getPartitionKey()));  request.setPartitionValue(alternateKeyHelper.validateStringParameter("partition value",request.getPartitionValue()));  businessObjectDataHelper.validateSubPartitionValues(request.getSubPartitionValues());  Assert.isTrue(!org.apache.commons.collections4.CollectionUtils.isEmpty(request.getStorageUnits()),"At least one storage unit must be specified.");  for (  StorageUnitCreateRequest storageUnit : request.getStorageUnits()) {    Assert.notNull(storageUnit,"A storage unit can't be null.");    Assert.hasText(storageUnit.getStorageName(),"A storage name is required for each storage unit.");    storageUnit.setStorageName(storageUnit.getStorageName().trim());    if (BooleanUtils.isTrue(storageUnit.isDiscoverStorageFiles())) {      Assert.isTrue(storageUnit.getStorageDirectory() != null,"A storage directory must be specified when discovery of storage files is enabled.");      Assert.isTrue(org.apache.commons.collections4.CollectionUtils.isEmpty(storageUnit.getStorageFiles()),"Storage files cannot be specified when discovery of storage files is enabled.");    } else     if (!Boolean.TRUE.equals(businessObjectDataStatusEntity.getPreRegistrationStatus())) {      Assert.isTrue(storageUnit.getStorageDirectory() != null || !org.apache.commons.collections4.CollectionUtils.isEmpty(storageUnit.getStorageFiles()),"A storage directory or at least one storage file must be specified for each storage unit.");    }    if (storageUnit.getStorageDirectory() != null) {      Assert.hasText(storageUnit.getStorageDirectory().getDirectoryPath(),"A storage directory path must be specified.");      storageUnit.getStorageDirectory().setDirectoryPath(storageUnit.getStorageDirectory().getDirectoryPath().trim());    }    if (!org.apache.commons.collections4.CollectionUtils.isEmpty(storageUnit.getStorageFiles())) {      for (      StorageFile storageFile : storageUnit.getStorageFiles()) {        Assert.hasText(storageFile.getFilePath(),"A file path must be specified.");        storageFile.setFilePath(storageFile.getFilePath().trim());        if (fileSizeRequired) {          Assert.notNull(storageFile.getFileSizeBytes(),"A file size must be specified.");        }        if (storageFile.getRowCount() != null) {          Assert.isTrue(storageFile.getRowCount() >= 0,"File \"" + storageFile.getFilePath() + "\" has a row count which is < 0.");        }      }    }  }  validateBusinessObjectDataKeys(request.getBusinessObjectDataParents());  attributeHelper.validateAttributes(request.getAttributes());}  }
class C{  public String sqlAD_getAdempiereVersion(String vendorName,String catalogName,String schemaName){  String tableName="AD_System";  String tableAlias="t";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("AD_System_ID");  columnNames.add("AD_Client_ID");  columnNames.add("UpdatedBy");  columnNames.add("Version");  columnNames.add("ReleaseNo");  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=null;  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("4");  sortColumns.add("5");  return sql_select(vendorName,catalogName,schemaName,tableName,tableAlias,columnNames,aliasNames,conditions,sortColumns,true);}  }
class C{  @Override public void postAddInit(){  timeSeriesPanel.init();}  }
class C{  public int computeMaxSentenceValue(Vertex match,Vertex original,Network network){  Collection<Relationship> words=match.getRelationships(Primitive.WORD);  int max=0;  for (  Relationship word : words) {    boolean found=false;    Vertex lowercase=invertWordCase(word.getTarget(),network);    if (original.hasRelationship(Primitive.WORD,word.getTarget())) {      found=true;    } else {      if ((lowercase != null) && (lowercase != word)) {        if (original.hasRelationship(Primitive.WORD,lowercase)) {          found=true;        }      }    }    if (found) {      int value=computeWordValue(word.getTarget());      if ((lowercase != null) && (lowercase != word)) {        value=Math.max(value,computeWordValue(lowercase));      }      max=max + value;    }  }  return max;}  }
class C{  @SuppressWarnings("NullableProblems") public void testUpdateProperties() throws Exception {  assertEmpty(mgr.directoryListing(ROOT_ID));  assertTrue(mgr.mkdirs(new IgfsPath("/dir"),IgfsImpl.DFLT_DIR_META));  assertNotNull(mgr.create(new IgfsPath("/file"),null,false,400,null,false,null,null));  IgfsListingEntry dirEntry=mgr.directoryListing(ROOT_ID).get("dir");  assertNotNull(dirEntry);  assertTrue(dirEntry.isDirectory());  IgfsEntryInfo dir=mgr.info(dirEntry.fileId());  IgfsListingEntry fileEntry=mgr.directoryListing(ROOT_ID).get("file");  assertNotNull(fileEntry);  assertTrue(!fileEntry.isDirectory());  IgfsEntryInfo file=mgr.info(fileEntry.fileId());  assertEquals(2,mgr.directoryListing(ROOT_ID).size());  for (  IgniteBiTuple<IgniteUuid,String> tup : Arrays.asList(F.t(dir.id(),"dir"),F.t(file.id(),"file"))) {    IgniteUuid fileId=tup.get1();    String fileName=tup.get2();    for (    Map<String,String> props : Arrays.asList(null,Collections.<String,String>emptyMap()))     expectsUpdatePropertiesFail(fileId,props,AssertionError.class,"Expects not-empty file's properties");    String key1=UUID.randomUUID().toString();    String key2=UUID.randomUUID().toString();    IgfsEntryInfo info=mgr.info(fileId);    assertNull("Unexpected stored properties: " + info,info.properties().get(key1));    assertNull("Unexpected stored properties: " + info,info.properties().get(key2));    info=mgr.updateProperties(fileId,F.asMap(key1,"1"));    assertEquals("Unexpected stored properties: " + info,"1",info.properties().get(key1));    info=mgr.updateProperties(fileId,F.asMap(key2,"2"));    assertEquals("Unexpected stored properties: " + info,"1",info.properties().get(key1));    assertEquals("Unexpected stored properties: " + info,"2",info.properties().get(key2));    info=mgr.updateProperties(fileId,F.<String,String>asMap(key1,null));    assertEquals("Unexpected stored properties: " + info,"2",info.properties().get(key2));    info=mgr.updateProperties(fileId,F.<String,String>asMap(key2,null));    assertNull("Unexpected stored properties: " + info,info.properties().get(key1));    assertNull("Unexpected stored properties: " + info,info.properties().get(key2));  }  mgr.softDelete(new IgfsPath("/dir"),true,null);  mgr.softDelete(new IgfsPath("/file"),false,null);  assertNull(mgr.updateProperties(dir.id(),F.asMap("p","7")));}  }
class C{  public void addTextProperty(String propertyName,TextNode node){  addChild(node);}  }
class C{  @Override public void closeInbound() throws SSLException {  if (logger != null) {    logger.println("closeInbound() " + isInboundDone);  }  if (isInboundDone) {    return;  }  isInboundDone=true;  engine_was_closed=true;  if (handshake_started) {    if (!close_notify_was_received) {      if (session != null) {        session.invalidate();      }      alertProtocol.alert(AlertProtocol.FATAL,AlertProtocol.INTERNAL_ERROR);      throw new SSLException("Inbound is closed before close_notify " + "alert has been received.");    }  } else {    shutdown();  }}  }
class C{  public static void putChar(long addr,char val){  if (UNALIGNED)   UNSAFE.putChar(addr,val); else   putCharByByte(addr,val,BIG_ENDIAN);}  }
class C{  private boolean handleVolumeKeyEvent(MediaRouteController controller,KeyEvent event){  if (!controller.isBeingCast())   return false;  int action=event.getAction();  int keyCode=event.getKeyCode();switch (keyCode) {case KeyEvent.KEYCODE_VOLUME_DOWN:    if (action == KeyEvent.ACTION_DOWN)     controller.setRemoteVolume(-1);  return true;case KeyEvent.KEYCODE_VOLUME_UP:if (action == KeyEvent.ACTION_DOWN) controller.setRemoteVolume(1);return true;default :return false;}}  }
class C{  @Override public void scan(AccessProfile accessProfile) throws BaseCollectionException {}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void debugLog(String msg){  Log.d(TAG,msg);  mDebugInfo.append("\n" + msg);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.941 -0500",hash_original_method="7E1C347C9C4DEE22923C4A46BE429D13",hash_generated_method="14E524A6E58CB4758EDD6DF999B7AC29") private boolean processDisplayText(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs) throws ResultException {  CatLog.d(this,"process DisplayText");  TextMessage textMsg=new TextMessage();  IconId iconId=null;  ComprehensionTlv ctlv=searchForTag(ComprehensionTlvTag.TEXT_STRING,ctlvs);  if (ctlv != null) {    textMsg.text=ValueParser.retrieveTextString(ctlv);  }  if (textMsg.text == null) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }  ctlv=searchForTag(ComprehensionTlvTag.IMMEDIATE_RESPONSE,ctlvs);  if (ctlv != null) {    textMsg.responseNeeded=false;  }  ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);  if (ctlv != null) {    iconId=ValueParser.retrieveIconId(ctlv);    textMsg.iconSelfExplanatory=iconId.selfExplanatory;  }  ctlv=searchForTag(ComprehensionTlvTag.DURATION,ctlvs);  if (ctlv != null) {    textMsg.duration=ValueParser.retrieveDuration(ctlv);  }  textMsg.isHighPriority=(cmdDet.commandQualifier & 0x01) != 0;  textMsg.userClear=(cmdDet.commandQualifier & 0x80) != 0;  mCmdParams=new DisplayTextParams(cmdDet,textMsg);  if (iconId != null) {    mIconLoadState=LOAD_SINGLE_ICON;    mIconLoader.loadIcon(iconId.recordNumber,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));    return true;  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Builder updateEntitlement(Entitlement oldEntitlement,Entitlement newEntitlement){  deleteEntitlement(oldEntitlement);  addEntitlement(newEntitlement);  return this;}  }
class C{  public Stream<E> stream(){  return events.stream();}  }
class C{  @Override public void convert(){  readWayParams();  parse();  convertToNetwork();  cleanRoadNetwork();}  }
class C{  public static void checkMethodSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkChar('(',signature,pos);  while ("ZCBSIFJDL[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkTypeSignature(signature,pos);  }  pos=checkChar(')',signature,pos);  if (getChar(signature,pos) == 'V') {    ++pos;  } else {    pos=checkTypeSignature(signature,pos);  }  while (getChar(signature,pos) == '^') {    ++pos;    if (getChar(signature,pos) == 'L') {      pos=checkClassTypeSignature(signature,pos);    } else {      pos=checkTypeVariableSignature(signature,pos);    }  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public void randomizeSymmetric(){  randomize();  Synapse symmetric=getSymmetricSynapse();  if (symmetric != null) {    symmetric.setStrength(strength);  }  getNetwork().fireSynapseChanged(this);}  }
class C{  public static <T>String join(List<T> list,String separator){  StringBuilder b=new StringBuilder();  Iterator<T> iterator=list.iterator();  if (iterator.hasNext()) {    b.append(iterator.next().toString());    while (iterator.hasNext()) {      T t=iterator.next();      b.append(separator);      b.append(t.toString());    }  }  return b.toString();}  }
class C{  public int show(FragmentTransaction transaction,String tag){  mDismissed=false;  mShownByMe=true;  transaction.add(this,tag);  mViewDestroyed=false;  mBackStackId=transaction.commit();  return mBackStackId;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  @Override public int lastIndexOf(Object elem,int index){  if (!(elem instanceof CheckBoxListItem)) {    return super.lastIndexOf(new CheckBoxListItem(elem),index);  } else {    return super.lastIndexOf(elem,index);  }}  }
class C{  protected boolean sendKeysInResponse(){  return false;}  }
class C{  public void reset(){  count=0;  last=false;}  }
class C{  @SuppressWarnings("rawtypes") public void test_clearSolutionSet(){  final List<IBindingSet[]> in=new LinkedList<IBindingSet[]>();{    final IVariable<?> x=Var.var("x");    final IVariable<?> y=Var.var("y");    final IVariable<?> z=Var.var("z");{      final List<IBindingSet> t=new LinkedList<IBindingSet>();{        final ListBindingSet b=new ListBindingSet();        b.set(x,new Constant<IV>(termId2));        b.set(y,new Constant<IV>(inlineIV));        b.set(z,new Constant<IV>(blobIV));        t.add(b);      }      in.add(t.toArray(new IBindingSet[0]));    }{      final List<IBindingSet> t=new LinkedList<IBindingSet>();{        final ListBindingSet b=new ListBindingSet();        b.set(x,new Constant<IV>(termId));        b.set(y,new Constant<IV>(termId2));        t.add(b);      }      in.add(t.toArray(new IBindingSet[0]));    }{      final List<IBindingSet> t=new LinkedList<IBindingSet>();{        final ListBindingSet b=new ListBindingSet();        t.add(b);      }      in.add(t.toArray(new IBindingSet[0]));    }  }  final String solutionSet=getName();  try {    solutionSetsManager.getSolutions(solutionSet);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  solutionSetsManager.putSolutions(solutionSet,new CloseableIteratorWrapper<IBindingSet[]>(in.iterator()));{    final ICloseableIterator<IBindingSet[]> out=solutionSetsManager.getSolutions(solutionSet);    assertSameSolutionsAnyOrder(flatten(in.iterator()),out);  }{    final ICloseableIterator<IBindingSet[]> out=solutionSetsManager.getSolutions(solutionSet);    assertSameSolutionsAnyOrder(flatten(in.iterator()),out);  }  solutionSetsManager.clearSolutions(solutionSet);  try {    solutionSetsManager.getSolutions(solutionSet);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public CallSpec<Void,HttpError> markAllPostsAsRead(String groupId){  return Resource.<Void,HttpError>newPutSpec(api,"/v1/groups/{group_id}/read",false).responseAs(Void.class).pathParam("group_id",groupId).build();}  }
class C{  @Override public String parseOutput(final String stdout,final String stderr){  super.throwIfError(stderr);  return StringUtils.EMPTY;}  }
class C{  public Vertex parseReturn(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  stream.skipWhitespace();  Vertex equation=network.createInstance(Primitive.RETURN);  if (stream.peek() != ';') {    boolean with=stream.peekWord().toLowerCase().equals(WITH);    if (!with) {      Vertex result=parseElement(stream,elements,debug,network);      equation.addRelationship(Primitive.RETURN,result);      stream.skipWhitespace();      with=stream.peekWord().toLowerCase().equals(WITH);    }    if (with) {      stream.skipWord();      stream.skipWhitespace();      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        Vertex argument=parseElement(stream,elements,debug,network);        equation.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);        stream.skipWhitespace();        while (stream.peek() == ',') {          stream.skip();          stream.skipWhitespace();          argument=parseElement(stream,elements,debug,network);          equation.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);        }        ensureNext(')',stream);      } else {        Vertex argument=parseElement(stream,elements,debug,network);        equation.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);      }    }  }  return equation;}  }
class C{  public DurationConfigFieldBuilder caption(final String caption){  field.setCaption(caption);  return this;}  }
class C{  @Override protected void doInitializeFilters(){  Vector<String> filters=GenericObjectEditor.getClassnames(FileBasedEvaluationStatisticsHandler.class.getName());  m_FileFilters=new ArrayList<>();  for (  String filter : filters) {    try {      FileBasedEvaluationStatisticsHandler handler=(FileBasedEvaluationStatisticsHandler)Utils.forName(FileBasedEvaluationStatisticsHandler.class,filter,new String[0]);      m_FileFilters.add(new ExtensionFileFilterWithClass(handler.getFormatExtensions(),handler.getFormatDescription() + " (" + ObjectUtils.flatten(handler.getFormatExtensions(),", ")+ ")",filter));    } catch (    Exception e) {      System.err.println("Failed to instantiate file filter: " + filter);      e.printStackTrace();    }  }}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  public Time(int hour,int minute,double second){  this.hour=hour;  this.minute=minute;  this.second=second;}  }
class C{  public boolean addSvf(OwlClass targetClass){  targetClass.addSvfRestriction(this);  return svfClasses.add(targetClass);}  }
class C{  @SuppressWarnings("unchecked") public static List<Character> toList(char[] array){  return DefaultTypeTransformation.primitiveArrayToList(array);}  }
class C{  static public boolean isSyncEnabled(Context context){  Cursor cursor=null;  try {    cursor=context.getContentResolver().query(CONTENT_URI,new String[]{VALUE},KEY + "=?",new String[]{KEY_SYNC_ENABLED},null);    if (cursor == null || !cursor.moveToFirst()) {      return false;    }    return cursor.getInt(0) != 0;  }  finally {    if (cursor != null)     cursor.close();  }}  }
class C{  private float bytesToFloat(byte b0,byte b1,byte b2,byte b3){  int mantissa=unsignedToSigned(unsignedByteToInt(b0) + (unsignedByteToInt(b1) << 8) + (unsignedByteToInt(b2) << 16),24);  return (float)(mantissa * Math.pow(10,b3));}  }
class C{  private static int GetCharField(JNIEnvironment env,int objJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetCharField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getCharValueUnchecked(obj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void removeAllMailToAddresses(){  mailToSet.clear();  mailToAddresses=new String[0];}  }
class C{  public StringPrep(InputStream inputStream) throws IOException {  BufferedInputStream b=new BufferedInputStream(inputStream,DATA_BUFFER_SIZE);  StringPrepDataReader reader=new StringPrepDataReader(b);  indexes=reader.readIndexes(INDEX_TOP);  byte[] sprepBytes=new byte[indexes[INDEX_TRIE_SIZE]];  mappingData=new char[indexes[INDEX_MAPPING_DATA_SIZE] / 2];  reader.read(sprepBytes,mappingData);  sprepTrieImpl=new StringPrepTrieImpl();  sprepTrieImpl.sprepTrie=new CharTrie(new ByteArrayInputStream(sprepBytes),sprepTrieImpl);  formatVersion=reader.getDataFormatVersion();  doNFKC=((indexes[OPTIONS] & NORMALIZATION_ON) > 0);  checkBiDi=((indexes[OPTIONS] & CHECK_BIDI_ON) > 0);  sprepUniVer=getVersionInfo(reader.getUnicodeVersion());  normCorrVer=getVersionInfo(indexes[NORM_CORRECTNS_LAST_UNI_VERSION]);  VersionInfo normUniVer=NormalizerImpl.getUnicodeVersion();  if (normUniVer.compareTo(sprepUniVer) < 0 && normUniVer.compareTo(normCorrVer) < 0 && ((indexes[OPTIONS] & NORMALIZATION_ON) > 0)) {    throw new IOException("Normalization Correction version not supported");  }  b.close();}  }
class C{  public void addAttendee(Attendee attendee){  addProperty(attendee);}  }
class C{  public String finished(Logger log){  if (m_avInstsPerSec == 0) {    computeUpdate(System.currentTimeMillis());  }  int nS=m_numSamples > 0 ? m_numSamples : 1;  String msg="Finished - " + m_instanceCount + " insts @ "+ m_avInstsPerSec / nS + " insts/sec";  if (log != null) {    log.statusMessage(m_statusMessagePrefix + msg);  }  return msg;}  }
class C{  @Deprecated public static <X,Y>Collection<Y> transform(X[] c,IgniteClosure<? super X,Y> f){  A.notNull(c,"c",f,"f");  return viewReadOnly(asList(c),f);}  }
class C{  public final VirtualLocalFile create(String name,String text,File parent,long lastModified){  VirtualLocalFile f=new VirtualLocalFile(name,text,parent,lastModified,this);  files.put(name,f);  return f;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.776 -0500",hash_original_method="DFEBA1171CC4BD5C340A5F7D201F4250",hash_generated_method="610FFE162E37F945B00BEE3FEF30478F") public synchronized DrmRights installRights(InputStream rightsData,int len,String mimeTypeStr) throws DrmException, IOException {  int mimeType=0;  if (DRM_MIMETYPE_RIGHTS_XML_STRING.equals(mimeTypeStr))   mimeType=DRM_MIMETYPE_RIGHTS_XML; else   if (DRM_MIMETYPE_RIGHTS_WBXML_STRING.equals(mimeTypeStr))   mimeType=DRM_MIMETYPE_RIGHTS_WBXML; else   if (DrmRawContent.DRM_MIMETYPE_MESSAGE_STRING.equals(mimeTypeStr))   mimeType=DRM_MIMETYPE_MESSAGE; else   throw new IllegalArgumentException("mimeType must be DRM_MIMETYPE_RIGHTS_XML or DRM_MIMETYPE_RIGHTS_WBXML or DRM_MIMETYPE_MESSAGE");  if (len <= 0)   return null;  DrmRights rights=new DrmRights();  int res=nativeInstallDrmRights(rightsData,len,mimeType,rights);  if (JNI_DRM_FAILURE == res)   throw new DrmException("nativeInstallDrmRights() returned JNI_DRM_FAILURE");  return rights;}  }
class C{  private synchronized void pauseTrackDataHub(){  if (trackDataHub != null) {    trackDataHub.unregisterTrackDataListener(this);  }  trackDataHub=null;}  }
class C{  public static void process(ASyncProcess parent,int WindowNo,IProcessParameter parameter,ProcessInfo pi,Trx trx){  ProcessCtl.process(parent,WindowNo,parameter,pi,trx);}  }
class C{  public boolean isDbSchemaVersionChanged(){  String currentVersion=getCurrentDbSchemaVersion();  String targetVersion=getTargetDbSchemaVersion();  log.info("currentVersion: {}, targetVersion {} ",currentVersion,targetVersion);  return !(currentVersion.equals(targetVersion));}  }
class C{  public static String preprocessHtmlMessage(String message){  if (message == null)   return null;  String html=StringUtils.replace(message,"\n","<br/>");  html=StringUtils.replace(html,"\t","&nbsp;&nbsp;&nbsp;&nbsp;");  return html;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public void incrementUtil(Assignment sample,double utility){  if (!table.containsKey(sample)) {    table.put(new Assignment(sample),new UtilityEstimate(utility));  } else {    table.get(new Assignment(sample)).update(utility);  }  variables.addAll(sample.getVariables());}  }
class C{  private String serverSideAuthResponseProcessing(AuthenticationResponse resp) throws Exception {  AuthenticationResponseProcessing respProcessing=new AuthenticationResponseProcessing();  AuthenticatorRecord[] authRec=respProcessing.verify(resp,storage);  logger.info(" : Auth records : " + gson.toJson(authRec,AuthenticatorRecord[].class));  if (authRec != null && authRec[0].AAID != null) {    return "<access_token_goes_here>";  }  return null;}  }
class C{  public Consciousness(){}  }
class C{  public JSONException(final String message){  super(message);}  }
class C{  public final CertPathBuilderResult build(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  return spiImpl.engineBuild(params);}  }
class C{  public CountSorter(boolean ascending){  super(ascending);}  }
class C{  public static void installKeyListenerOnAllComponents(KeyListener k,Container c){  c.addKeyListener(k);  Component[] components=c.getComponents();  for (int i=0; i < components.length; i++) {    if (components[i] instanceof Container) {      KeyListenerInstaller.installKeyListenerOnAllComponents(k,(Container)components[i]);    } else {      components[i].addKeyListener(k);    }  }}  }
class C{  @Override public V put(K key,V value){  if (key == null) {    V item=_nullValue;    _nullValue=value;    return item;  }  if (_values.length <= 2 * _size) {    K[] oldKeys=_keys;    V[] oldValues=_values;    _keys=(K[])new Object[2 * oldKeys.length];    _values=(V[])new Object[2 * oldValues.length];    _mask=_values.length - 1;    _size=0;    for (int i=oldValues.length - 1; i >= 0; i--) {      K oldKey=oldKeys[i];      V oldValue=oldValues[i];      if (oldValue != null)       putImpl(oldKey,oldValue);    }  }  V item=putImpl(key,value);  return item;}  }
class C{  public static void noSpace(String string) throws JSONException {  int i, length=string.length();  if (length == 0) {    throw new JSONException("Empty string.");  }  for (i=0; i < length; i+=1) {    if (Character.isWhitespace(string.charAt(i))) {      throw new JSONException("'" + string + "' contains a space character.");    }  }}  }
class C{  public void removeChangeListener(ChangeListener l){  m_ChangeListeners.remove(l);}  }
class C{  private byte[] intToByteArray(int number){  return new byte[]{(byte)(number >>> 24),(byte)(number >>> 16),(byte)(number >>> 8),(byte)number};}  }
class C{  public void correctRoundingErrors(){  if ((dxSumTwips != 0 || dySumTwips != 0) && (closed || fillStyle0 > 0 || fillStyle1 > 0)) {    addLineSubdivideAware(-dxSumTwips,-dySumTwips);    dxSumTwips=0;    dySumTwips=0;  }}  }
class C{  public double[] procrustinate(double[] X){  if (X.length != columnDimension) {    throw new IllegalArgumentException("X does not have the expected number of elements");  }  RealMatrix tmp=new Array2DRowRealMatrix(X);  RealMatrix Xnew=tmp.multiply(R).scalarMultiply(s).add(T);  return Xnew.getRow(0);}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  protected void purge(){  Reference ref=queue.poll();  while (ref != null) {    purge(ref);    ref=queue.poll();  }}  }
class C{  public int delete(String table,String whereClause,String[] whereArgs){  try {    openDB();    return mSQLiteDatabase.delete(table,whereClause,whereArgs);  } catch (  Exception ex) {    ex.printStackTrace();    return 0;  }}  }
class C{  private boolean isJobSchedulingNeeded(URI id,String type,boolean inProgress,boolean isError,boolean scheduler,long lastTime,long nextTime){  long systemTime=System.currentTimeMillis();  long tolerance=Long.parseLong(_configInfo.get(TOLERANCE)) * 1000;  _logger.info("Next Run Time {} , Last Run Time {}",nextTime,lastTime);  long refreshInterval=getRefreshInterval(type);  if (!inProgress) {    if (scheduler) {      if (systemTime < nextTime - tolerance) {        _logger.info("Skipping Job {} ; attempt to schedule it before the next run time  :{}",id + "of type " + type,new Date(nextTime));        _logger.info("Current system time {}; tolerance time allowed {}.",new Date(systemTime),tolerance);        return false;      }    }    if (!scheduler && isError && lastTime > 0) {      _logger.info("User triggered {} Job for {} whose discovery status is error. Reschedule the job",type,id);      return true;    }    if (systemTime - lastTime < refreshInterval * 1000) {      _logger.info("Skipping Job {} of type {}; attempt to schedule faster than refresh interval allows",id,type);      return false;    }  } else   if (!scheduler && (systemTime - lastTime > refreshInterval * 1000) && lastTime > 0) {    _logger.info("User triggered {} Job for {} attempted to schedule later than refresh interval allows. Reschedule the job",type,id);  } else   if (scheduler && (systemTime - lastTime > refreshInterval * 1000) && nextTime > 0 && System.currentTimeMillis() - nextTime >= JobIntervals.getMaxIdleInterval() * 1000) {    _logger.info("Scheduled {} Job for {} was idle for too long. Reschedule the job",type,id);  } else {    _logger.info("{} Job for {} is in Progress",type,id);    return false;  }  return true;}  }
class C{  @HLEFunction(nid=0x34401D65,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlDisconnect(){  checkInitialized();  doDisconnect=true;  networkAdapter.sceNetAdhocctlDisconnect();  while (!peers.isEmpty()) {    AdhocctlPeer peer=peers.get(0);    hleNetAdhocctlDeletePeer(peer.macAddress);  }  return 0;}  }
class C{  public static Number findMinimumStackedRangeValue(CategoryDataset dataset){  ParamChecks.nullNotPermitted(dataset,"dataset");  Number result=null;  boolean hasValidData=false;  double minimum=0.0;  int categoryCount=dataset.getColumnCount();  for (int item=0; item < categoryCount; item++) {    double total=0.0;    int seriesCount=dataset.getRowCount();    for (int series=0; series < seriesCount; series++) {      Number number=dataset.getValue(series,item);      if (number != null) {        hasValidData=true;        double value=number.doubleValue();        if (value < 0.0) {          total=total + value;        }      }    }    minimum=Math.min(minimum,total);  }  if (hasValidData) {    result=new Double(minimum);  }  return result;}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public ConfigBuilder withSessionLivenessCheckTimeout(long timeout){  this.idleTimeBeforeConnectionTest=timeout;  return this;}  }
class C{  public static int hashBooleanArray(int seed,boolean... booleanArray){  return hash(seed,booleanArray);}  }
class C{  protected static Filter createSVGFeImage(BridgeContext ctx,Rectangle2D primitiveRegion,Element refElement,boolean toBBoxNeeded,Element filterElement,GraphicsNode filteredNode){  GraphicsNode node=ctx.getGVTBuilder().build(ctx,refElement);  Filter filter=node.getGraphicsNodeRable(true);  AffineTransform at=new AffineTransform();  if (toBBoxNeeded) {    short coordSystemType;    Element filterDefElement=(Element)(filterElement.getParentNode());    String s=SVGUtilities.getChainableAttributeNS(filterDefElement,null,SVG_PRIMITIVE_UNITS_ATTRIBUTE,ctx);    if (s.length() == 0) {      coordSystemType=SVGUtilities.USER_SPACE_ON_USE;    } else {      coordSystemType=SVGUtilities.parseCoordinateSystem(filterDefElement,SVG_PRIMITIVE_UNITS_ATTRIBUTE,s,ctx);    }    if (coordSystemType == SVGUtilities.OBJECT_BOUNDING_BOX) {      at=SVGUtilities.toObjectBBox(at,filteredNode);    }    Rectangle2D bounds=filteredNode.getGeometryBounds();    at.preConcatenate(AffineTransform.getTranslateInstance(primitiveRegion.getX() - bounds.getX(),primitiveRegion.getY() - bounds.getY()));  } else {    at.translate(primitiveRegion.getX(),primitiveRegion.getY());  }  return new AffineRable8Bit(filter,at);}  }
class C{  public void testUnsizedDoublesCountSeq(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.doubles().limit(size).forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public FindTicketsRenderer(){  this.icoTicketNormal=new ImageIcon(getClass().getClassLoader().getResource("uk/chromis/images/pay.png"));  this.icoTicketRefund=new ImageIcon(getClass().getClassLoader().getResource("uk/chromis/images/refundit.png"));}  }
class C{  public String listChildRecords(){  StringBuffer info=new StringBuffer();  String sql="SELECT AD_Table_ID, TableName " + "FROM AD_Table t " + "WHERE AccessLevel='3' AND IsView='N'"+ " AND EXISTS (SELECT * FROM AD_Column c "+ "WHERE t.AD_Table_ID=c.AD_Table_ID"+ " AND c.IsParent='Y'"+ " AND c.ColumnName IN (SELECT ColumnName FROM AD_Column cc "+ "WHERE cc.IsKey='Y' AND cc.AD_Table_ID=?))";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,getAD_Table_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int AD_Table_ID=rs.getInt(1);      String TableName=rs.getString(2);      if (info.length() != 0)       info.append(", ");      info.append(TableName);    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  log.info(info.toString());  return info.toString();}  }
class C{  public IcyURLConnection(URL url){  super(url);}  }
class C{  public static short parseShort(CharSequence csq,int radix){  Cursor cursor=new Cursor();  short result=parseShort(csq,radix,cursor);  if (!cursor.atEnd(csq))   throw new IllegalArgumentException("Extraneous characters \"" + cursor.tail(csq) + "\"");  return result;}  }
class C{  public void addOneForTeamB(View v){  scoreTeamB=scoreTeamB + 1;  displayForTeamB(scoreTeamB);}  }
class C{  public void registerFrameInput(String varName,DataFrame df) throws DMLRuntimeException {  registerFrameInput(varName,df,false);}  }
class C{  private AutoCompletionServer.CompletionItems findResults(String type,String prefix,String search){  return server.getCompletionItems(type,prefix,search);}  }
class C{  public static boolean exists(Path... files){  for (  Path file : files) {    if (Files.exists(file)) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public <T extends BeanDescription>T introspectForCreation(JavaType type){  return (T)getClassIntrospector().forCreation(this,type,this);}  }
class C{  private void loadData(){  Radio radio=new Radio("Joy Radio FM",R.drawable.temp,"102.5");  List<Radio> radioList=new ArrayList<>();  for (int i=0; i < 20; i++)   radioList.add(radio);  adapter.setRadioList(radioList);}  }
class C{  @SafeVarargs VerifyCorrectSample(int expectedSize,T... expected){  this.expectedValues=expected;  this.expectedSize=expectedSize;}  }
class C{  @Override public void PC(final PdfObject pdfObject,final int type){  if (showMethods) {    System.out.println("DefaultActionHandler.PC()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject PCdictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.PC);    currentPdfFile.checkResolved(PCdictionary);    if (PCdictionary != null) {      final String jsCode=PCdictionary.getTextStreamValue(PdfDictionary.JS);      javascript.executeAction(jsCode);    }  }}  }
class C{  public void startLightDetection(int threshold,LightListener lightListener){  startLibrarySensorDetection(new LightDetector(threshold,lightListener),lightListener);}  }
class C{  public int recordOffset(int recordNumber){  return (recordCount < recordNumber) ? endOfFileOffset : offsettable[(recordNumber - 1) * 2];}  }
class C{  public boolean isMapped(final String name){  return mapping != null ? mapping.containsKey(name) : false;}  }
class C{  public DaviesBouldinIndex(DistanceMetric dm){  this.dm=dm;}  }
class C{  static public String trim(String str){  return str.replace('\u00A0',' ').trim();}  }
class C{  JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException {  Scope context=peek();  if (context != nonempty && context != empty) {    throw new JSONException("Nesting problem");  }  stack.remove(stack.size() - 1);  if (context == nonempty) {    newline();  }  out.append(closeBracket);  return this;}  }
class C{  public void componentRemoved(ContainerEvent e){  super.componentRemoved(e);  if (removedLayers != null) {    removedLayers.clear();  }}  }
class C{  private void processListEvents(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  EventPublisher ep=new EventPublisher();  ep.setSsUrl(((String)request.getSession().getAttribute(SESSION_ATTR_SS_CELL_FEED)).replace("cells","list"));  if (request.getParameter("fdTitle") != null) {    SpreadsheetCustomFieldMap fieldMap=new SpreadsheetCustomFieldMap((String)request.getParameter("fdTitle"),(String)request.getParameter("fdDescription"),(String)request.getParameter("fdStartDate"),(String)request.getParameter("fdEndDate"),(String)request.getParameter("fdLocation"),(String)request.getParameter("fdWebSite"),(String)request.getParameter("fdCalendarUrl"),(String)request.getParameter("fdBaseUrl"));    ep.setFieldMap(fieldMap);    request.getSession().setAttribute(SESSION_ATTR_FIELD_MAP,fieldMap);  } else {    ep.setFieldMap((SpreadsheetCustomFieldMap)request.getSession().getAttribute(SESSION_ATTR_FIELD_MAP));  }  try {    ep.setSsAuthSubToken((String)request.getSession().getAttribute(SESSION_ATTR_SS_AUTH_TOKEN),false);    List<Event> listEvents=ep.getEventsFromSpreadsheet();    request.setAttribute("events",listEvents);    request.getSession().setAttribute(SESSION_ATTR_EVENTS_TO_PUBLISH,listEvents);    javax.servlet.RequestDispatcher dispatcher=getServletContext().getRequestDispatcher("/WEB-INF/jsp/outputEventList.jsp");    dispatcher.forward(request,response);  } catch (  EPAuthenticationException e) {    System.err.println("Authentication exception: " + e.getMessage());  }}  }
class C{  public boolean isFinished(){  return finished;}  }
class C{  public void start(@NonNull Activity activity){  start(activity,REQUEST_CROP);}  }
class C{  private void tryRippleEnter(){  if (mExitingRipplesCount >= MAX_RIPPLES) {    return;  }  if (mRipple == null) {    final float x;    final float y;    if (mHasPending) {      mHasPending=false;      x=mPendingX;      y=mPendingY;    } else {      x=mHotspotBounds.exactCenterX();      y=mHotspotBounds.exactCenterY();    }    final boolean isBounded=isBounded();    mRipple=new RippleForeground(this,mHotspotBounds,x,y,isBounded);  }  mRipple.setup(mState.mMaxRadius,mDensity);  mRipple.enter(false);}  }
class C{  public static String left(String s,int width,char fillChar){  if (s.length() >= width) {    return s;  }  StringBuffer sb=new StringBuffer(width);  sb.append(s);  for (int i=width - s.length(); --i >= 0; ) {    sb.append(fillChar);  }  return sb.toString();}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDataDdlTesting(){  createDatabaseEntitiesForBusinessObjectDataDdlTesting(FileTypeEntity.TXT_FILE_TYPE,AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,AbstractServiceTest.PARTITION_KEY_GROUP,BusinessObjectDataEntity.FIRST_PARTITION_COLUMN_POSITION,AbstractServiceTest.UNSORTED_PARTITION_VALUES,AbstractServiceTest.SUBPARTITION_VALUES,AbstractServiceTest.SCHEMA_DELIMITER_PIPE,AbstractServiceTest.SCHEMA_ESCAPE_CHARACTER_BACKSLASH,AbstractServiceTest.SCHEMA_NULL_VALUE_BACKSLASH_N,schemaColumnDaoTestHelper.getTestSchemaColumns(),schemaColumnDaoTestHelper.getTestPartitionColumns(),false,AbstractServiceTest.CUSTOM_DDL_NAME,AbstractServiceTest.LATEST_VERSION_FLAG_SET,AbstractServiceTest.ALLOW_DUPLICATE_BUSINESS_OBJECT_DATA);}  }
class C{  public static String[] fromCommaSeparatedList(String s,boolean unescapeCommas){  if (s == null || s.length() == 0) {    return null;  }  final String QUOTED_COMMA_PLACEHOLDER="XXX1122334455XXX";  if (unescapeCommas) {    s=s.replaceAll("\\\\,",QUOTED_COMMA_PLACEHOLDER);  }  String[] split=s.split(",");  for (int i=0; i < split.length; i++) {    split[i]=split[i].replaceAll(QUOTED_COMMA_PLACEHOLDER,",");    split[i]=split[i].replaceAll("\\\\\\\\","\\\\");  }  return split;}  }
class C{  public IrishAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public void addPush(double k){  if (k == 0.0) {    add(ByteCode.DCONST_0);    if (1.0 / k < 0) {      add(ByteCode.DNEG);    }  } else   if (k == 1.0 || k == -1.0) {    add(ByteCode.DCONST_1);    if (k < 0) {      add(ByteCode.DNEG);    }  } else {    addLoadConstant(k);  }}  }
class C{  private AuthnProviderRestRep updateKeystoneProvider(URI id,AuthnUpdateParam param,AuthnProvider provider,AuthnProviderParamsToValidate validateP){  String oldPassword=provider.getManagerPassword();  boolean isAutoRegistered=provider.getAutoRegCoprHDNImportOSProjects();  int synchronizationInterval=OpenStackSynchronizationTask.DEFAULT_INTERVAL_DELAY;  if (isAutoRegistered) {    synchronizationInterval=Integer.parseInt(_openStackSynchronizationTask.getIntervalFromTenantSyncSet(provider.getTenantsSynchronizationOptions()));  }  if (!isTenantsSynchronizationOptionsChanged(provider,param)) {    checkForActiveTenantsUsingDomains(provider.getDomains());  }  overlayProvider(provider,param);  provider.setManagerPassword(getPassword(provider,oldPassword));  int newSynchronizationInterval=Integer.parseInt(_openStackSynchronizationTask.getIntervalFromTenantSyncSet(provider.getTenantsSynchronizationOptions()));  if (newSynchronizationInterval < OpenStackSynchronizationTask.MIN_INTERVAL_DELAY) {    _log.debug("Setting default interval time as chosen interval is lower than minimal value.");    provider.getTenantsSynchronizationOptions().remove(Integer.toString(newSynchronizationInterval));    provider.getTenantsSynchronizationOptions().add(Integer.toString(OpenStackSynchronizationTask.DEFAULT_INTERVAL_DELAY));  }  if (!provider.getDisable()) {    _log.debug("Validating provider before modification...");    validateP.setUrls(new ArrayList<String>(provider.getServerUrls()));    StringBuilder errorString=new StringBuilder();    if (!Validator.isUsableAuthenticationProvider(validateP,errorString)) {      throw BadRequestException.badRequests.authnProviderCouldNotBeValidated(errorString.toString());    }  }  provider.setKeys(_keystoneUtils.populateKeystoneToken(provider.getServerUrls(),provider.getManagerDN(),getPassword(provider,oldPassword)));  _log.debug("Saving to the DB the updated provider: {}",provider.toString());  persistProfileAndNotifyChange(provider,false);  if (provider.getAutoRegCoprHDNImportOSProjects() && !isAutoRegistered) {    _keystoneUtils.registerCoprhdInKeystone(provider.getManagerDN(),provider.getServerUrls(),provider.getManagerPassword());  }  if (isAutoRegistered && synchronizationInterval != newSynchronizationInterval) {    _openStackSynchronizationTask.rescheduleTask(newSynchronizationInterval);  }  auditOp(OperationTypeEnum.UPDATE_AUTHPROVIDER,true,null,provider.getId().toString(),provider.toString());  return map(getProviderById(id,false));}  }
class C{  private void confirmPositionTuto(final View targetView){  defaultConfiguration.setFocusType(Focus.MINIMUM);  showView("addPoi_step3",targetView,activity.getString(R.string.tuto_text_confirm_position_creation),null);}  }
class C{  public void testMixedCompressions() throws Exception {  Directory dir=newDirectory();  for (int i=0; i < 10; i++) {    IndexWriterConfig iwc=newIndexWriterConfig();    iwc.setCodec(new Lucene70Codec(RandomPicks.randomFrom(random(),Mode.values())));    IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig());    Document doc=new Document();    doc.add(new StoredField("field1","value1"));    doc.add(new StoredField("field2","value2"));    iw.addDocument(doc);    if (random().nextInt(4) == 0) {      iw.forceMerge(1);    }    iw.commit();    iw.close();  }  DirectoryReader ir=DirectoryReader.open(dir);  assertEquals(10,ir.numDocs());  for (int i=0; i < 10; i++) {    Document doc=ir.document(i);    assertEquals("value1",doc.get("field1"));    assertEquals("value2",doc.get("field2"));  }  ir.close();  dir.close();}  }
class C{  public static Query makeQueryable(Query q){  if (q instanceof WrappedQuery) {    return makeQueryable(((WrappedQuery)q).getWrappedQuery());  }  return isNegative(q) ? fixNegativeQuery(q) : q;}  }
class C{  public InputStreamTransferable(DataFlavor flavor,byte[] data){  this(new DataFlavor[]{flavor},data);}  }
class C{  private int[] classValues(){  int[] classval=new int[m_NumInstances];  for (int i=0; i < m_NumInstances; i++) {    try {      classval[i]=(int)m_Train.instance(i).classValue();    } catch (    Exception ex) {      ex.printStackTrace();    }  }  return classval;}  }
class C{  public boolean hasMoreElements(){  return hasMoreTokens();}  }
class C{  public StringBuffer format(double number,StringBuffer toAppendTo,FieldPosition status){  int i;  for (i=0; i < choiceLimits.length; ++i) {    if (!(number >= choiceLimits[i])) {      break;    }  }  --i;  if (i < 0)   i=0;  return toAppendTo.append(choiceFormats[i]);}  }
class C{  void init(boolean decrypting,String algorithm,byte[] key,byte[] iv) throws InvalidKeyException {  if ((key == null) || (iv != null)) {    throw new InvalidKeyException("Internal error");  }  embeddedCipher.init(decrypting,algorithm,key);}  }
class C{  public static void assertNothingIsEqual(Object... objects){  assertNothingIsEqual(Arrays.asList(objects));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_2__VALUE_1:    return VALUE_1_EDEFAULT == null ? value_1 != null : !VALUE_1_EDEFAULT.equals(value_1);}return super.eIsSet(featureID);}  }
class C{  public void initializeContacts(EvolutionState state){}  }
class C{  public void cloneInto(CustomTile that){  that.resourcesPackageName=this.resourcesPackageName;  that.onClick=this.onClick;  that.onLongClick=this.onLongClick;  that.onSettingsClick=this.onSettingsClick;  that.onClickUri=this.onClickUri;  that.label=this.label;  that.contentDescription=this.contentDescription;  that.expandedStyle=this.expandedStyle;  that.icon=this.icon;  that.collapsePanel=this.collapsePanel;  that.remoteIcon=this.remoteIcon;  that.deleteIntent=this.deleteIntent;  that.sensitiveData=this.sensitiveData;}  }
class C{  private Calendar parse(Class sourceType,Class targetType,String value,DateFormat format){  logFormat("Parsing",format);  format.setLenient(false);  ParsePosition pos=new ParsePosition(0);  Date parsedDate=format.parse(value,pos);  if (pos.getErrorIndex() >= 0 || pos.getIndex() != value.length() || parsedDate == null) {    String msg="Error converting '" + toString(sourceType) + "' to '"+ toString(targetType)+ "'";    if (format instanceof SimpleDateFormat) {      msg+=" using pattern '" + ((SimpleDateFormat)format).toPattern() + "'";    }    throw new ConversionException(msg);  }  Calendar calendar=format.getCalendar();  return calendar;}  }
class C{  private static int toInt(byte[] bytes,int offset,final int length){  if (length != SIZEOF_INT || offset + length > bytes.length) {    throw explainWrongLengthOrOffset(bytes,offset,length,SIZEOF_INT);  }  int n=0;  for (int i=offset; i < (offset + length); i++) {    n<<=8;    n^=bytes[i] & 0xFF;  }  return n;}  }
class C{  public IgniteFutureCancelledException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().ff2();  return null;}  }
class C{  public MeterPlot(ValueDataset dataset){  super();  this.shape=DialShape.CIRCLE;  this.meterAngle=DEFAULT_METER_ANGLE;  this.range=new Range(0.0,100.0);  this.tickSize=10.0;  this.tickPaint=Color.white;  this.units="Units";  this.needlePaint=MeterPlot.DEFAULT_NEEDLE_PAINT;  this.tickLabelsVisible=true;  this.tickLabelFont=MeterPlot.DEFAULT_LABEL_FONT;  this.tickLabelPaint=Color.black;  this.tickLabelFormat=NumberFormat.getInstance();  this.valueFont=MeterPlot.DEFAULT_VALUE_FONT;  this.valuePaint=MeterPlot.DEFAULT_VALUE_PAINT;  this.dialBackgroundPaint=MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;  this.intervals=new java.util.ArrayList();  setDataset(dataset);}  }
class C{  public static EnumSet<KindName> kindNames(int kind){  EnumSet<KindName> kinds=EnumSet.noneOf(KindName.class);  if ((kind & VAL) != 0)   kinds.add(((kind & VAL) == VAR) ? KindName.VAR : KindName.VAL);  if ((kind & MTH) != 0)   kinds.add(KindName.METHOD);  if ((kind & TYP) != 0)   kinds.add(KindName.CLASS);  if ((kind & PCK) != 0)   kinds.add(KindName.PACKAGE);  return kinds;}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  void packagePrivateMethod(){}  }
class C{  public DateFormatTitleFormatter(){  this.dateFormat=new SimpleDateFormat("LLLL yyyy",Locale.getDefault());}  }
class C{  private static boolean isHost(final String header){  return "host".equals(new EnglishLowerCase(header).string());}  }
class C{  public static boolean isAttributesResult(final Message message){  return !ManagementHelper.isOperationResult(message);}  }
class C{  public MatrixAtom(ArrayOfAtoms array,String options){  this(false,array,options);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.errorPaint=SerialUtilities.readPaint(stream);  this.errorStroke=SerialUtilities.readStroke(stream);}  }
class C{  public void applyConfigAnnotations(FacesContext ctx,Class<? extends Annotation> annotationType,Set<? extends Class> annotatedClasses){  if (annotatedClasses != null && !annotatedClasses.isEmpty()) {    ConfigAnnotationHandler handler=getConfigAnnotationHandlers().get(annotationType);    if (handler == null) {      throw new IllegalStateException("Internal Error: No ConfigAnnotationHandler for type: " + annotationType);    }    for (    Class<?> clazz : annotatedClasses) {      handler.collect(clazz,clazz.getAnnotation(annotationType));    }    handler.push(ctx);  }}  }
class C{  @Override protected void onDraw(Canvas canvas){  pathPainter.paintPath(canvas);}  }
class C{  public final boolean canSetString(String field){  return m_table.canSetString(field);}  }
class C{  protected void processIgnoreSection(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  if (!XMLUtil.checkLiteral(reader,"NORE")) {    XMLUtil.skipTag(reader);    return;  }  XMLUtil.skipWhitespace(reader,null);  String str=XMLUtil.read(reader,'%');  char ch=str.charAt(0);  if (ch != '[') {    XMLUtil.skipTag(reader);    return;  }  Reader subreader=new CDATAReader(reader);  subreader.close();}  }
class C{  public JSONObject postComment(String revisionID,String message) throws ConduitAPIException, IOException {  return postComment(revisionID,message,true,"none");}  }
class C{  public byte[] evaluateResponse(byte[] responseData) throws SaslException {  if (completed) {    throw new SaslException("SASL authentication already complete");  }  if (logger.isLoggable(Level.FINER)) {    traceOutput(MY_CLASS_NAME,"evaluateResponse","KRB5SRV03:Response [raw]:",responseData);  }switch (handshakeStage) {case 1:    return doHandshake1(responseData);case 2:  return doHandshake2(responseData);default :try {  byte[] gssOutToken=secCtx.acceptSecContext(responseData,0,responseData.length);  if (logger.isLoggable(Level.FINER)) {    traceOutput(MY_CLASS_NAME,"evaluateResponse","KRB5SRV04:Challenge: [after acceptSecCtx]",gssOutToken);  }  if (secCtx.isEstablished()) {    handshakeStage=1;    peer=secCtx.getSrcName().toString();    me=secCtx.getTargName().toString();    logger.log(Level.FINE,"KRB5SRV05:Peer name is : {0}, my name is : {1}",new Object[]{peer,me});    if (protocolSaved != null && !protocolSaved.equalsIgnoreCase(me.split("[/@]")[0])) {      throw new SaslException("GSS context targ name protocol error: " + me);    }    if (gssOutToken == null) {      return doHandshake1(EMPTY);    }  }  return gssOutToken;} catch (GSSException e) {  throw new SaslException("GSS initiate failed",e);}}}  }
class C{  private MAttachment processPost(HttpServletRequest request,HttpServletResponse response,WWindowStatus ws){  int AD_Attachment_ID=0;  int AD_Table_ID=0;  int Record_ID=0;  String textMsg=null;  FileUpload upload=null;  if (request.getContentType().equals(form.ENC_DEFAULT)) {    AD_Attachment_ID=WebUtil.getParameterAsInt(request,P_Attachment_ID);    AD_Table_ID=WebUtil.getParameterAsInt(request,"AD_Table_ID");    Record_ID=WebUtil.getParameterAsInt(request,"Record_ID");    textMsg=WebUtil.getParameter(request,P_TEXTMSG);  } else {    upload=new FileUpload(request);    m_error=upload.getError();    if (m_error != null) {      log.warning("pocessPost - " + m_error);      return null;    }    AD_Attachment_ID=upload.getParameterAsInt(P_Attachment_ID);    AD_Table_ID=upload.getParameterAsInt("AD_Table_ID");    Record_ID=upload.getParameterAsInt("Record_ID");  }  log.info("processPost - AD_Attachment_ID=" + AD_Attachment_ID + ", AD_Table_ID="+ AD_Table_ID+ ", Record_ID="+ Record_ID+ " - Upload="+ upload);  if (ws.curTab.getAD_AttachmentID() != AD_Attachment_ID) {    m_error="Your Attachment not found";    return null;  }  if (AD_Attachment_ID != 0 && Record_ID == 0) {    m_error="Need to save record first";    return null;  }  MAttachment attachment=null;  if (AD_Attachment_ID == 0)   attachment=new MAttachment(ws.ctx,AD_Table_ID,Record_ID,null); else   attachment=new MAttachment(ws.ctx,AD_Attachment_ID,null);  if (textMsg != null)   attachment.setTextMsg(textMsg);  if (upload != null)   attachment.addEntry(upload.getFileName(),upload.getData());  if (attachment.save())   ws.curTab.loadAttachments(); else {    m_error="Attachment not saved";    return null;  }  return attachment;}  }
class C{  public boolean equalsOne(){  for (int i=1; i < coeffs.length; i++) {    if (coeffs[i] != 0) {      return false;    }  }  return coeffs[0] == 1;}  }
class C{  public static boolean parameterListContainsParameterName(List<IParameter> parameterList,Set<String> parameterNames){  boolean result=false;  for (  IParameter p : parameterList) {    if (parameterNames.contains(p.getName())) {      result=true;      break;    }  }  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static BlockDifficulty readFrom(final Deserializer deserializer,final String label){  return new BlockDifficulty(deserializer.readLong(label));}  }
class C{  static private String userIdFromRangeWithMod(String[] values,boolean include){  int minId=Integer.parseInt(values[3]);  int maxId=Integer.parseInt(values[4]);  int mod=Integer.parseInt(values[5]);  Stack<Integer> stack=getStackWithMods(minId,maxId,mod,include);  if (stack.size() > 0) {    return Integer.toString(stack.pop());  }  throw new IllegalArgumentException("Exhausted random User Ids. Range not large enough for the number of calls.");}  }
class C{  public void notifySessionStarted(Description description){  this.dataRoot=description;  testsExecutionStatus.initResults(description);  stacktraceLabel.setText("no trace");  stacktraceLabel.getParent().layout(true);  stacktraceConsole.clear();  testTreeViewer.setInput(this.dataRoot);}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {  if (m_elemContext.m_startTagOpen) {    addAttributeAlways(uri,localName,rawName,type,value,XSLAttribute);  }}  }
class C{  public void testDismissButtonShowsDialogWithChanges(){  inUserLoginGoToDemoPatientChart();  openEncounterForm();  answerTextQuestion("Temperature","29.2");  click(viewWithText("Discard"));  expectVisible(viewWithText(R.string.title_discard_observations));  click(viewWithText(R.string.no));  click(viewWithText("Discard"));  expectVisible(viewWithText(R.string.title_discard_observations));  click(viewWithText(R.string.yes));}  }
class C{  public OverpassFilterQuery way(){  applySeparator();  builder.append("way");  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getRated();}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  @Override public boolean onTouch(View v,MotionEvent event){  int a=event.getActionMasked();switch (a) {case MotionEvent.ACTION_DOWN:    view.setBackgroundColor(colorOnPressHighlight);  return true;case MotionEvent.ACTION_CANCEL:if (isSelected) view.setBackgroundColor(colorSelected); else view.setBackgroundColor(colorUnpressed);return true;case MotionEvent.ACTION_UP:checkrefresh();return false;default :return false;}}  }
class C{  public void componentMoved(final ComponentEvent e){}  }
class C{  public static void main(String[] args) throws Throwable {  Files.write(Paths.get(NETSCAPE_KEYSTORE),Base64.getMimeDecoder().decode(Files.readAllBytes(Paths.get(NETSCAPE_KEYSTORE_BASE64))));  BadNetscapeCertTypeTest test=new BadNetscapeCertTypeTest();  test.start();}  }
class C{  public CryptoException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public Avg3(){  super("avg3",3);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:02.694 -0500",hash_original_method="D5B90ECD7CBCC97B9564754E474A01DA",hash_generated_method="4BE7314064592CE045D0CECB1895497B") private void prepareNames(){  permitted_names=new ArrayList[9];  if (permittedSubtrees != null) {    for (    GeneralSubtree generalSubtree : permittedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (permitted_names[tag] == null) {        permitted_names[tag]=new ArrayList<GeneralName>();      }      permitted_names[tag].add(name);    }  }  excluded_names=new ArrayList[9];  if (excludedSubtrees != null) {    for (    GeneralSubtree generalSubtree : excludedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (excluded_names[tag] == null) {        excluded_names[tag]=new ArrayList<GeneralName>();      }      excluded_names[tag].add(name);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrsetvalue1.class,args);}  }
class C{  public void cleanup(){  if (isExternalStorageWritable()) {    Log.d(TAG,"Could not attempt cleanup, external storage not mounted.");  }  File heapDumpFile=getHeapDumpFile();  if (heapDumpFile.exists()) {    Log.d(TAG,"Previous analysis did not complete correctly, cleaning: " + heapDumpFile);    heapDumpFile.delete();  }}  }
class C{  private String encryptImageURLPassword(String imageUrl,boolean isEncrypted){  String password=ImageServerControllerImpl.extractPasswordFromImageUrl(imageUrl);  String encryptedPassword=password;  if (!isEncrypted && StringUtils.isNotBlank(password)) {    EncryptionProviderImpl encryptionProviderImpl=new EncryptionProviderImpl();    encryptionProviderImpl.setCoordinator(_coordinator);    encryptionProviderImpl.start();    EncryptionProvider encryptionProvider=encryptionProviderImpl;    encryptedPassword=encryptionProvider.getEncryptedString(password);    imageUrl=StringUtils.replace(imageUrl,":" + password + "@",":" + encryptedPassword + "@");  }  return imageUrl;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  private long readUntil(long pos) throws IOException {  if (pos < length) {    return pos;  }  if (foundEOF) {    return length;  }  long len=pos - length;  cache.seek(length);  while (len > 0) {    int nbytes=stream.read(buf,0,(int)Math.min(len,bufLen));    if (nbytes == -1) {      foundEOF=true;      return length;    }    cache.setLength(cache.length() + nbytes);    cache.write(buf,0,nbytes);    len-=nbytes;    length+=nbytes;  }  return pos;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static AdExchangeSeller initializeAdExchangeSeller() throws Exception {  Credential credential=authorize();  AdExchangeSeller adExchangeSeller=new AdExchangeSeller.Builder(new NetHttpTransport(),JSON_FACTORY,credential).setApplicationName(APPLICATION_NAME).build();  return adExchangeSeller;}  }
class C{  public SpriteTileset(final SpriteStore store,final String filename,final Color color,final Composite blend){  this(store,store.getModifiedSprite(filename,color,blend),IGameScreen.SIZE_UNIT_PIXELS);}  }
class C{  public boolean isMember(Principal member){  if (groupMembers.contains(member)) {    return true;  } else {    Vector<Group> alreadySeen=new Vector<>(10);    return isMemberRecurse(member,alreadySeen);  }}  }
class C{  public static void main(String[] args){  if (args == null || args.length == 0)   return;  for (  String arg : args) {    File file=new File(arg);    if (!file.isFile()) {      System.out.println("-------------------------------------------------------------");      System.out.println("Incorrect file specified: " + arg);      System.out.println("-------------------------------------------------------------");      continue;    }    try {      KeyValuePersistenceSettings settings=new KeyValuePersistenceSettings(file);      String table=settings.getTable() != null ? settings.getTable() : "my_table";      System.out.println("-------------------------------------------------------------");      System.out.println("DDL for keyspace/table from file: " + arg);      System.out.println("-------------------------------------------------------------");      System.out.println();      System.out.println(settings.getKeyspaceDDLStatement());      System.out.println();      System.out.println(settings.getTableDDLStatement(table));      System.out.println();      List<String> statements=settings.getIndexDDLStatements(table);      if (statements != null && !statements.isEmpty()) {        for (        String st : statements) {          System.out.println(st);          System.out.println();        }      }    } catch (    Throwable e) {      System.out.println("-------------------------------------------------------------");      System.out.println("Incorrect file specified: " + arg);      System.out.println("-------------------------------------------------------------");      e.printStackTrace();    }  }}  }
class C{  public MongoDocumentHistory(MongoHistory history,DBCollection collection,String documentId){  super(history,documentId);  this.collection=collection;}  }
class C{  public void parseAndFillModel(EIPModel model) throws Exception {  Document document=parseRouteFile();  Element root=document.getDocumentElement();  NodeList routes=root.getElementsByTagName("route");  Route route=EipFactory.eINSTANCE.createRoute();  for (int i=0; i < routes.getLength(); i++) {    Node routeNode=routes.item(i);    Element routeElement=(Element)routeNode;    if (routeElement.hasAttribute("id")) {      route.setName(routeElement.getAttribute("id"));      model.getOwnedRoutes().add(route);    }    Node child=routeNode.getFirstChild();    parseAndFillEndpoint(child,null,route.getOwnedEndpoints(),route.getOwnedChannels());  }}  }
class C{  private StringBuffer formatTradelogSummaryLine(final TradelogSummary tradelogSummary){  StringBuffer tradelogLine=new StringBuffer();  tradelogLine.append((tradelogSummary.getPeriod() == null ? "" : tradelogSummary.getPeriod()) + "," + (tradelogSummary.getBattingAverage() == null ? "" : new Money(tradelogSummary.getBattingAverage()))+ ","+ (tradelogSummary.getSimpleSharpeRatio() == null ? "" : new Money(tradelogSummary.getSimpleSharpeRatio()))+ ","+ (tradelogSummary.getGrossProfitLoss() == null ? "" : tradelogSummary.getGrossProfitLoss())+ ","+ (tradelogSummary.getQuantity() == null ? "" : tradelogSummary.getQuantity())+ ","+ (tradelogSummary.getCommission() == null ? "" : tradelogSummary.getCommission())+ ","+ (tradelogSummary.getNetProfitLoss() == null ? "" : tradelogSummary.getNetProfitLoss())+ ","+ (tradelogSummary.getWinCount() == null ? "" : tradelogSummary.getWinCount())+ ","+ (tradelogSummary.getProfitAmount() == null ? "" : tradelogSummary.getProfitAmount())+ ","+ (tradelogSummary.getLossCount() == null ? "" : tradelogSummary.getLossCount())+ ","+ (tradelogSummary.getLossAmount() == null ? "" : tradelogSummary.getLossAmount())+ ","+ (tradelogSummary.getPositionCount() == null ? "" : tradelogSummary.getPositionCount())+ ","+ (tradelogSummary.getTradestrategyCount() == null ? "" : tradelogSummary.getTradestrategyCount()));  return tradelogLine;}  }
class C{  public int size(){  return events.size();}  }
class C{  void registerContentObserver(Cursor cursor,ContentObserver observer){  cursor.registerContentObserver(mObserver);}  }
class C{  public long cguest_time(){  return Long.parseLong(fields[43]);}  }
class C{  public static boolean isRightTurn2D(Point.Double p1,Point.Double p2,Point.Double p3){  if (p1.equals(p2) || p2.equals(p3)) {    return false;  }  double val=(p2.x * p3.y + p1.x * p2.y + p3.x * p1.y) - (p2.x * p1.y + p3.x * p2.y + p1.x * p3.y);  return val > 0;}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  private static SphereCluster calculateCenter(ArrayList<Cluster> assigned,int dimensions){  double[] result=new double[dimensions];  for (int i=0; i < result.length; i++) {    result[i]=0.0;  }  if (assigned.size() == 0) {    return new SphereCluster(result,0.0);  }  for (  Cluster point : assigned) {    double[] center=point.getCenter();    for (int i=0; i < result.length; i++) {      result[i]+=center[i];    }  }  for (int i=0; i < result.length; i++) {    result[i]/=assigned.size();  }  double radius=0.0;  for (  Cluster point : assigned) {    double dist=distance(result,point.getCenter());    if (dist > radius) {      radius=dist;    }  }  SphereCluster sc=new SphereCluster(result,radius);  sc.setWeight(assigned.size());  return sc;}  }
class C{  public void sort(Comparator<FrequentBinaryItemSet> comp){  Collections.sort(m_sets,comp);}  }
class C{  public UndefinedParameterError(String key){  super(null,205,key,"");}  }
class C{  public boolean hasEchoBreakpoints(){  return !activeEchoBreakpoints.isEmpty();}  }
class C{  public static boolean isCompositionPlaylist(ResourceByteRangeProvider resourceByteRangeProvider) throws IOException {  return IMFCompositionPlaylistType.isCompositionPlaylist(resourceByteRangeProvider);}  }
class C{  public boolean removeByIndex(int index){  AbstractPlugin toRemove=getByIndex(index);  return remove(toRemove);}  }
class C{  @Override public void toBytes(ByteBuf buf){  buf.writeLong(pos.toLong());  buf.writeBoolean(hasFacing);  if (hasFacing) {    buf.writeByte(facing.getIndex());  }}  }
class C{  public String toString(){  String ver=MAJOR + "." + MINOR+ "."+ PATCH;  if (releaseInfo != null && releaseInfo.length() > 0)   return ver + " " + releaseInfo;  return ver;}  }
class C{  public String termvectorsfile(){  return termvectorsfile;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";  db.execSQL(sql);}  }
class C{  public static ImmutableBlockVolume newWithoutArrayClone(BlockPalette palette,Vector3i start,Vector3i size,int[] blocks){  return new ArrayImmutableBlockBuffer(palette,new IntBackingData(blocks),start,size);}  }
class C{  public String call() throws BackupException {  logger.info("Backup task starting...");  URI uri=null;  BackupSpecification bspec=null;  try {    logger.info("Starting backup using agent: " + backupAgent.getClass().getName());    bspec=backupAgent.backup();    logger.info("Storing backup result...");    bspec.setAgentName(backupAgentName);    uri=storageAgent.store(bspec);  } catch (  InterruptedException e) {    logger.warn("Backup was cancelled");  }catch (  Exception e) {    String message="Backup operation failed: " + e.getMessage();    logger.error(message,e);    try {      eventDispatcher.put(new ErrorNotification(message,e));    } catch (    InterruptedException ie) {    }  } finally {    if (bspec != null)     bspec.releaseLocators();  }  if (uri == null) {    logger.warn("Backup task did not complete");  } else {    logger.info("Backup completed normally: uri=" + uri);    try {      eventDispatcher.put(new BackupCompletionNotification(uri));    } catch (    InterruptedException ie) {      logger.warn("Backup task interrupted while posting completion event");    }  }  if (uri == null)   return null; else   return uri.toString();}  }
class C{  private void unlock(Object key){  if (key != null) {    ((AbstractDocument)key).readUnlock();  }}  }
class C{  protected void handleInsertBreak(RSyntaxTextArea textArea,boolean noSelection){  if (noSelection && textArea.isAutoIndentEnabled()) {    insertNewlineWithAutoIndent(textArea);  } else {    textArea.replaceSelection("\n");    if (noSelection) {      possiblyCloseCurlyBrace(textArea,null);    }  }}  }
class C{  public static String randomLetters(int length){  return randomString(LETTERS,length);}  }
class C{  @Override public void load(PLILoader loader){  this.load(loader,false,null,PLConstants.kFloatUndefinedValue,PLConstants.kFloatUndefinedValue);}  }
class C{  public void removeFoundTextAreas(final int[][] rectArea,final int page){  if (rectArea == null) {    areas=null;  } else {    for (    final int[] aRectArea : rectArea) {      removeFoundTextArea(aRectArea,page);    }    boolean allNull=true;    final Integer p=page;    int[][] localAreas=this.areas.get(p);    if (localAreas != null) {      for (int ii=0; ii < localAreas.length; ii++) {        if (localAreas[ii] != null) {          allNull=false;          ii=localAreas.length;        }      }      if (allNull) {        localAreas=null;        this.areas.put(p,localAreas);        hasHighlightAreasUpdated=true;      }    }  }}  }
class C{  @Override public EdgeInfo edge(int start,int end){  List<EdgeInfo> list=info[start].forward;  if (list == null) {    return null;  }  Node<EdgeInfo> n=list.head();  while (n != null) {    EdgeInfo inf=n.value();    if (inf.end == end) {      return inf;    }    n=n.next();  }  return null;}  }
class C{  public SolrQuery clearSorts(){  sortClauses=null;  serializeSorts();  return this;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public List<Edge<T>> viterbiPath(){  final int numNodes=nodeList.size();  double[] d_v=new double[numNodes];  Arrays.fill(d_v,annihilator());  d_v[ROOT_ID]=identity();  Edge[] p_v=new Edge[numNodes];  for (int v=ROOT_ID + 1; v < numNodes; ++v) {    List<Edge<T>> edgeList=nodeList.get(v).backwardStar();    for (    Edge<T> edge : edgeList) {      int u=edge.start().id();      double bestCost=d_v[v];      double transitionCost=score(d_v[u],edge.weight());      if (compare(bestCost,transitionCost) == transitionCost) {        d_v[v]=transitionCost;        p_v[v]=edge;      }    }  }  List<Edge<T>> bestPath=new LinkedList<Edge<T>>();  Edge<T> bestEdge=p_v[numNodes - 1];  bestEdge=p_v[bestEdge.start().id()];  while (bestEdge.start().id() != ROOT_ID) {    bestPath.add(0,bestEdge);    bestEdge=p_v[bestEdge.start().id()];  }  return bestPath;}  }
class C{  private boolean checkForFastScroll(MotionEvent e1,MotionEvent e2){  float dt=e2.getEventTime() - e1.getEventTime();  if (dt <= 0)   return false;  float dist;switch (mScrollDirection) {case RIGHT:    dist=calculateBiasedPosition(e1.getX() + mCurrentTouchOffsetX,e2.getX() + mCurrentTouchOffsetX,dt);  break;case LEFT:dist=mHost.getViewportWidth() * mPxToDp - calculateBiasedPosition(e1.getX() + mCurrentTouchOffsetX,e2.getX() + mCurrentTouchOffsetX,dt);break;case DOWN:dist=calculateBiasedPosition(e1.getY() + mCurrentTouchOffsetY,e2.getY() + mCurrentTouchOffsetY,dt);break;default :dist=GUTTER_DISTANCE_DP;break;}return dist < GUTTER_DISTANCE_DP;}  }
class C{  public static Properties promptUserForProperties(){  JFileChooser fileChooser=new JFileChooser();  int retvalue=fileChooser.showOpenDialog(null);  Properties props=new Properties();  if (retvalue != JFileChooser.APPROVE_OPTION) {    return props;  }  try {    FileInputStream inputStream=new FileInputStream(fileChooser.getSelectedFile());    props.load(inputStream);    return props;  } catch (  Exception ioe) {    System.err.println("PropUtils.promptUserForProperties: Exception reading properties file.");    System.err.println(ioe.getMessage());    ioe.printStackTrace();    return props;  }}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  @RequestMapping(value="/dataProviders",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_DATA_PROVIDERS_POST) public DataProvider createDataProvider(@RequestBody DataProviderCreateRequest request){  return dataProviderService.createDataProvider(request);}  }
class C{  public void ifPresent(Action1<T> action){  if (value != null)   action.call(value);}  }
class C{  public TXLockIdImpl(InternalDistributedMember memberId){  this.memberId=memberId;synchronized (TXLockIdImpl.class) {    this.id=txCount++;  }}  }
class C{  static Instruction callHelper(Instruction v,IR ir){  if (!Call.hasMethod(v)) {    if (VM.VerifyAssertions)     VM._assert(Call.getAddress(v) instanceof RegisterOperand);    return v;  }  MethodOperand methOp=Call.getMethod(v);  if (methOp.hasPreciseTarget() && methOp.getTarget() == ir.method) {    Call.setAddress(v,new BranchOperand(ir.firstInstructionInCodeOrder()));    return v;  }  if (VM.runningVM) {    SpecializedMethod spMethod=methOp.spMethod;    if (spMethod != null) {      int smid=spMethod.getSpecializedMethodIndex();      Call.setAddress(v,getSpecialMethod(v,ir,smid));      return v;    }  }  if (methOp.hasDesignatedTarget()) {    Call.setAddress(v,InsertLoadOffsetJTOC(v,ir,REF_LOAD,TypeReference.CodeArray,methOp.jtocOffset));    return v;  }  if (methOp.isStatic()) {    if (VM.VerifyAssertions)     VM._assert(Call.hasAddress(v));    Call.setAddress(v,InsertLoadOffsetJTOC(v,ir,REF_LOAD,TypeReference.CodeArray,Call.getClearAddress(v)));  } else   if (methOp.isVirtual()) {    if (VM.VerifyAssertions)     VM._assert(Call.hasAddress(v));    if (ir.options.H2L_CALL_VIA_JTOC && methOp.hasPreciseTarget()) {      RVMMethod target=methOp.getTarget();      Call.setAddress(v,InsertLoadOffsetJTOC(v,ir,REF_LOAD,TypeReference.CodeArray,target.findOrCreateJtocOffset()));    } else {      Operand tib=getTIB(v,ir,Call.getParam(v,0).copy(),Call.getGuard(v).copy());      Call.setAddress(v,InsertLoadOffset(v,ir,REF_LOAD,TypeReference.CodeArray,tib,Call.getClearAddress(v),null,TG()));    }  } else   if (methOp.isSpecial()) {    RVMMethod target=methOp.getTarget();    if (target == null || target.isObjectInitializer() || target.isStatic()) {      Call.setAddress(v,InsertLoadOffsetJTOC(v,ir,REF_LOAD,TypeReference.CodeArray,Call.getClearAddress(v)));    } else {      if (ir.options.H2L_CALL_VIA_JTOC) {        Call.setAddress(v,InsertLoadOffsetJTOC(v,ir,REF_LOAD,TypeReference.CodeArray,target.findOrCreateJtocOffset()));      } else {        Operand tib=getTIB(v,ir,target.getDeclaringClass());        Call.setAddress(v,InsertLoadOffset(v,ir,REF_LOAD,TypeReference.CodeArray,tib,Call.getClearAddress(v),null,TG()));      }    }  } else {    if (VM.VerifyAssertions)     VM._assert(methOp.isInterface());    if (VM.VerifyAssertions)     VM._assert(!Call.hasAddress(v));    if (VM.BuildForIMTInterfaceInvocation) {      Operand RHStib=getTIB(v,ir,Call.getParam(v,0).copy(),Call.getGuard(v).copy());      InterfaceMethodSignature sig=InterfaceMethodSignature.findOrCreate(methOp.getMemberRef());      Offset offset=sig.getIMTOffset();      RegisterOperand address=null;      RegisterOperand IMT=InsertLoadOffset(v,ir,REF_LOAD,TypeReference.IMT,RHStib.copy(),Offset.fromIntZeroExtend(TIB_INTERFACE_DISPATCH_TABLE_INDEX << LOG_BYTES_IN_ADDRESS));      address=InsertLoadOffset(v,ir,REF_LOAD,TypeReference.CodeArray,IMT.copyD2U(),offset);      Call.setAddress(v,address);    } else {      int itableIndex=-1;      if (VM.BuildForITableInterfaceInvocation && methOp.hasTarget()) {        RVMClass I=methOp.getTarget().getDeclaringClass();        itableIndex=InterfaceInvocation.getITableIndex(I,methOp.getMemberRef().getName(),methOp.getMemberRef().getDescriptor());      }      if (itableIndex == -1) {        RegisterOperand realAddrReg=ir.regpool.makeTemp(TypeReference.CodeArray);        RVMMethod target=Entrypoints.invokeInterfaceMethod;        Instruction vp=Call.create2(CALL,realAddrReg,AC(target.getOffset()),MethodOperand.STATIC(target),Call.getParam(v,0).asRegister().copyU2U(),IC(methOp.getMemberRef().getId()));        vp.setSourcePosition(RUNTIME_SERVICES_BCI,v.position());        v.insertBefore(vp);        callHelper(vp,ir);        Call.setAddress(v,realAddrReg.copyD2U());        return v;      } else {        RegisterOperand iTable=ir.regpool.makeTemp(TypeReference.ITable);        Operand RHStib=getTIB(v,ir,Call.getParam(v,0).copy(),Call.getGuard(v).copy());        RVMMethod target=Entrypoints.findItableMethod;        Instruction fi=Call.create2(CALL,iTable,AC(target.getOffset()),MethodOperand.STATIC(target),RHStib,IC(methOp.getTarget().getDeclaringClass().getInterfaceId()));        fi.setSourcePosition(RUNTIME_SERVICES_BCI,v.position());        v.insertBefore(fi);        callHelper(fi,ir);        RegisterOperand address=InsertLoadOffset(v,ir,REF_LOAD,TypeReference.CodeArray,iTable.copyD2U(),Offset.fromIntZeroExtend(itableIndex << LOG_BYTES_IN_ADDRESS));        Call.setAddress(v,address);        return v;      }    }  }  return v;}  }
class C{  @Nullable public byte[] remove(@Nullable String spaceName,int part,KeyCacheObject key,byte[] keyBytes) throws IgniteCheckedException {  GridOffHeapPartitionedMap m=offheap(spaceName);  if (log.isTraceEnabled())   log.trace("offheap remove [key=" + key + ']');  return m == null ? null : m.remove(part,U.hash(key),keyBytes(key,keyBytes));}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  public synchronized void severe(String msg){  LogRecord record=new LogRecord(Level.SEVERE,msg);  log(record);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return USER_MAP;case 2:  return XTRUCTS;default :return null;}}  }
class C{  @Override public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public static Status defineStatus(String status){switch (status) {case "M":    return MODIFIED;case "D":  return DELETED;case "A":return ADDED;case "C":return COPIED;case "U":return UPDATED_BUT_UNMERGED;}return UNMODIFIED;}  }
class C{  public AccessibleTextSequence(int start,int end,String txt){  startIndex=start;  endIndex=end;  text=txt;}  }
class C{  public int compareTo(Object other){  DefinitionRecord rec=(DefinitionRecord)other;  AbstractNode n1, n2;  if (importElement == null) {    n1=definition;    if (rec.importElement == null) {      n2=rec.definition;    } else {      n2=(AbstractNode)rec.importElement;    }  } else   if (rec.importElement == null) {    n1=(AbstractNode)importElement;    n2=rec.definition;  } else   if (definition.getOwnerDocument() == rec.definition.getOwnerDocument()) {    n1=definition;    n2=rec.definition;  } else {    n1=(AbstractNode)importElement;    n2=(AbstractNode)rec.importElement;  }  short comp=n1.compareDocumentPosition(n2);  if ((comp & AbstractNode.DOCUMENT_POSITION_PRECEDING) != 0) {    return -1;  }  if ((comp & AbstractNode.DOCUMENT_POSITION_FOLLOWING) != 0) {    return 1;  }  return 0;}  }
class C{  public void initializeStateForHIR(GenerationContext gc){  this.gc=gc;  this.cfg=gc.getCfg();  this.regpool=gc.getTemps();  if (gc.requiresStackFrame()) {    this.stackManager.forceFrameAllocation();  }  this.IRStage=IR.HIR;  this.HIRInfo=new HIRInfo(this);}  }
class C{  public int offset(){  return offset;}  }
class C{  private static void checkTableSequences(Properties ctx,SvrProcess sp){  String trxName=null;  if (sp != null)   trxName=sp.get_TrxName();  String sql="SELECT TableName " + "FROM AD_Table t " + "WHERE IsActive='Y' AND IsView='N'"+ " AND NOT EXISTS (SELECT * FROM AD_Sequence s "+ "WHERE UPPER(s.Name)=UPPER(t.TableName) AND s.IsTableID='Y')";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    rs=pstmt.executeQuery();    while (rs.next()) {      String tableName=rs.getString(1);      if (MSequence.createTableSequence(ctx,tableName,trxName)) {        if (sp != null)         sp.addLog(0,null,null,tableName); else         s_log.fine(tableName);      } else {        rs.close();        throw new Exception("Error creating Table Sequence for " + tableName);      }    }  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  sql="UPDATE AD_Sequence s " + "SET Name = (SELECT TableName FROM AD_Table t " + "WHERE t.IsView='N' AND UPPER(s.Name)=UPPER(t.TableName)) "+ "WHERE s.IsTableID='Y'"+ " AND EXISTS (SELECT * FROM AD_Table t "+ "WHERE t.IsActive='Y' AND t.IsView='N'"+ " AND UPPER(s.Name)=UPPER(t.TableName) AND s.Name<>t.TableName)";  int no=DB.executeUpdate(sql,trxName);  if (no > 0) {    if (sp != null)     sp.addLog(0,null,null,"SyncName #" + no); else     s_log.fine("Sync #" + no);  }  if (no >= 0)   return;  sql="SELECT TableName, s.Name " + "FROM AD_Table t, AD_Sequence s " + "WHERE t.IsActive='Y' AND t.IsView='N'"+ " AND UPPER(s.Name)=UPPER(t.TableName) AND s.Name<>t.TableName";  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      String TableName=rs.getString(1);      String SeqName=rs.getString(2);      sp.addLog(0,null,null,"ERROR: TableName=" + TableName + " - Sequence="+ SeqName);    }  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  private void checkVmExistence(DeleteVirtualNetworkWorkflowDocument state){  ImmutableMap.Builder<String,String> termsBuilder=new ImmutableMap.Builder<>();  termsBuilder.put(QueryTask.QuerySpecification.buildCollectionItemName(VmService.State.FIELD_NAME_NETWORKS),state.virtualNetworkId);  QueryTask.QuerySpecification querySpecification=QueryTaskUtils.buildQuerySpec(VmService.State.class,termsBuilder.build());  QueryTask queryTask=QueryTask.create(querySpecification).setDirect(true);  ServiceHostUtils.getCloudStoreHelper(getHost()).createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(queryTask).setCompletion(null).sendWith(this);}  }
class C{  public BackpropNetwork(Network network,int[] nodesPerLayer){  super(network,nodesPerLayer,new Point2D.Double(1,1),new Neuron(network,new LinearRule()));  setLabel("Backprop");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.PROJECT_REFERENCE__PROJECT:    setProject((SimpleProjectDescription)null);  return;}super.eUnset(featureID);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Graph mergeWith(Graph graph){  if (graph == null || (graph.nodes.isEmpty() && graph.edges.isEmpty())) {    return this;  }  nodes.putAll(graph.nodes);  edges.putAll(graph.edges);  return this;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Dimension2DDouble) {    Dimension2DDouble d=(Dimension2DDouble)obj;    return (width == d.width) && (height == d.height);  }  return false;}  }
class C{  public static void initialize(TwitterCore kit,SessionManager<? extends Session<TwitterAuthToken>> sessionManagers,GuestSessionProvider guestSessionProvider,IdManager idManager){  instance=new DefaultScribeClient(kit,KIT_NAME,sessionManagers,guestSessionProvider,idManager);}  }
class C{  public double intercept(){  return alpha;}  }
class C{  @Override protected final Address allocSlowOnce(int bytes,int align,int offset){  int header=space.getHeaderSize();  int maxbytes=getMaximumAlignedSize(bytes + header,align);  int pages=Conversions.bytesToPagesUp(Extent.fromIntZeroExtend(maxbytes));  Address sp=space.acquire(pages);  if (sp.isZero())   return sp;  Address cell=sp.plus(header);  return cell;}  }
class C{  public static boolean hasRoleInCluster(String containerName,String clusterId,String role){  String expectedStart=String.format("minimesos-%s-%s-",role,clusterId);  return containerName.startsWith(expectedStart);}  }
class C{  @LargeTest public void testPreviewWithTrim() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_640x480_30fps_192kbps_1_5.mp4";  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName,MediaItem.RENDERING_MODE_CROPPING);  final Semaphore blockTillPreviewCompletes=new Semaphore(1);  boolean flagForException=false;  previewStart=false;  previewStop=false;  mediaVideoItem.setExtractBoundaries(mediaVideoItem.getDuration() / 2,mediaVideoItem.getDuration());  mVideoEditor.addMediaItem(mediaVideoItem);  validatePreviewProgress(1000,-1,false,mVideoEditor.getDuration());}  }
class C{  public void resolveTypeStructure(Environment env){}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void removeAccessibleSelection(int i){  if (i >= 0 && i < getMenuCount()) {    JMenu menu=getMenu(i);    if (menu != null) {      MenuSelectionManager.defaultManager().setSelectedPath(null);    }    getSelectionModel().setSelectedIndex(-1);  }}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public static boolean invokeWithOGLSharedContextCurrent(GraphicsConfiguration config,Runnable r){  if (!(config instanceof OGLGraphicsConfig)) {    return false;  }  OGLRenderQueue rq=OGLRenderQueue.getInstance();  rq.lock();  try {    OGLContext.setScratchSurface((OGLGraphicsConfig)config);    rq.flushAndInvokeNow(r);    OGLContext.invalidateCurrentContext();  }  finally {    rq.unlock();  }  return true;}  }
class C{  public void unsign(){  LinkedList<String> entriesToRemove=new LinkedList<String>();  for (  Entry<String,JarEntry> jarEntry : jarEntries.entrySet()) {    if (jarEntry.getKey().endsWith(".SF") || jarEntry.getKey().endsWith(".DSA") || jarEntry.getKey().endsWith(".RSA")|| jarEntry.getKey().endsWith(".EC")) {      entriesToRemove.add(jarEntry.getKey());    }  }  for (  String entryToRemove : entriesToRemove) {    jarEntries.remove(entryToRemove);  }}  }
class C{  @Before public void registerIdlingResource(){  Espresso.registerIdlingResources(MyApplication.getInstance().getCountingIdlingResource());}  }
class C{  public static <T>Callable<T> privilegedCallable(Callable<T> callable){  if (callable == null)   throw new NullPointerException();  return new PrivilegedCallable<T>(callable);}  }
class C{  public static ForClauseItem create(ForClauseKeyword keyword){  return new ForClauseItem(keyword);}  }
class C{  private boolean isInBlackList(String tpl){  if (blackList.contains(tpl)) {    return true;  }  return false;}  }
class C{  public static byte[] writeToArray(NSObject root) throws IOException {  ByteArrayOutputStream bout=new ByteArrayOutputStream();  write(bout,root);  return bout.toByteArray();}  }
class C{  public T charoff(String value){  return attr("charoff",value);}  }
class C{  public static Button createRadioButton(Composite parent,String label){  Button button=new Button(parent,SWT.RADIO);  button.setFont(parent.getFont());  if (label != null) {    button.setText(label);  }  GridData gd=new GridData();  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  public void clear(){  al.clear();}  }
class C{  @Override public void scrollLines(int firstLine,int lastLine,int distance){  getBackBuffer().scrollLines(firstLine,lastLine,distance);}  }
class C{  public SubjectAlternativeNameExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.SubjectAlternativeName_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.data == null) {    names=new GeneralNames();    return;  }  names=new GeneralNames(val);}  }
class C{  private static void drawOutlineString(final Image image,final Color textColor,final String text,final int x,final int y){  final int lum=((textColor.getRed() * 299) + (textColor.getGreen() * 587) + (textColor.getBlue() * 114)) / 1000;  Color outlineColor;  if (lum >= 64) {    outlineColor=Color.black;  } else {    outlineColor=Color.lightGray;  }  drawOutlineString(image,textColor,outlineColor,text,x,y);}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:case Constants.ELEMNAME_APPLY_TEMPLATES:case Constants.ELEMNAME_APPLY_IMPORTS:case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_FOREACH:case Constants.ELEMNAME_VALUEOF:case Constants.ELEMNAME_COPY_OF:case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_CHOOSE:case Constants.ELEMNAME_IF:case Constants.ELEMNAME_TEXT:case Constants.ELEMNAME_COPY:case Constants.ELEMNAME_VARIABLE:case Constants.ELEMNAME_MESSAGE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:37.781 -0500",hash_original_method="192D43C371764131BDB0630448D12BDC",hash_generated_method="40A0890DA922D9A9D0D325D6B3F19E65") public static final boolean isLeapYear(int year){  return ((year & 0x3) == 0) && ((year % 100 != 0) || (year % 400 == 0));}  }
class C{  private void initializeShapeConfig(TypedArray attributes){  defaultShapeKey=attributes.getInteger(R.styleable.nox_shape,ShapeFactory.FIXED_CIRCULAR_SHAPE_KEY);}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"InactiveGroup")).start();}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public String toString(){  return name;}  }
class C{  public void addResponseHeader(String key,String val){  if (rspheaders == null)   rspheaders=new MessageHeader();  rspheaders.add(key,val);}  }
class C{  public static void startFinalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  if (!finalizableReferenceClass.getName().equals(FINALIZABLE_REFERENCE)) {    throw new IllegalArgumentException("Expected " + FINALIZABLE_REFERENCE + ".");  }  Finalizer finalizer=new Finalizer(finalizableReferenceClass,queue,frqReference);  Thread thread=new Thread(finalizer);  thread.setName(Finalizer.class.getName());  thread.setDaemon(true);  try {    if (inheritableThreadLocals != null) {      inheritableThreadLocals.set(thread,null);    }  } catch (  Throwable t) {    logger.log(Level.INFO,"Failed to clear thread local values inherited by reference finalizer thread.",t);  }  thread.start();}  }
class C{  public void addToBaseRegionToCqNameMap(String regionName,String cqName){synchronized (this.baseRegionToCqNameMap) {    ArrayList<String> cqs=this.baseRegionToCqNameMap.get(regionName);    if (cqs == null) {      cqs=new ArrayList<String>();    }    cqs.add(cqName);    this.baseRegionToCqNameMap.put(regionName,cqs);  }}  }
class C{  public static LatLonPoint pointAtDistanceBetweenPoints(double phi1,double lambda0,double phi,double lambda,double distance,int n){  LatLonPoint ret=null;  double pntDist=sphericalDistance(phi1,lambda0,phi,lambda);  if (pntDist > distance) {    if (n <= 0) {      n=GeoProj.NUM_DEFAULT_GREAT_SEGS;    }    double[] gcpoints=greatCircle(phi1,lambda0,phi,lambda,n,true);    double distRatio=distance / pntDist;    int index=(int)((int)(gcpoints.length / 2) * distRatio) * 2;    ret=new LatLonPoint.Double(gcpoints[index],gcpoints[index + 1],true);  }  return ret;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.SIMPLE_TYPE_REFERENCE__OWNER:    return basicSetOwner(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public int distanceSquared(int x,int y,int z,int w){  int dx=this.x - x;  int dy=this.y - y;  int dz=this.z - z;  int dw=this.w - w;  return dx * dx + dy * dy + dz * dz + dw * dw;}  }
class C{  public BathwaterTableDialog(Shell parent){  super(parent,BathwaterBean.class);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildOuchit(zone);}  }
class C{  public CUarray(){}  }
class C{  public void rereadTheFile() throws NotOwnerException, UnknownHostException {  alwaysAuthorized=false;  acl.removeAll(owner);  trapDestList.clear();  informDestList.clear();  AclEntry ownEntry=new AclEntryImpl(owner);  ownEntry.addPermission(READ);  ownEntry.addPermission(WRITE);  acl.addEntry(owner,ownEntry);  readAuthorizedListFile();}  }
class C{  public ConditionedExampleSet(ExampleSet parent,Condition condition,boolean inverted,OperatorProgress progress) throws ExpressionEvaluationException, ProcessStoppedException {  this.parent=(ExampleSet)parent.clone();  this.mapping=calculateMapping(condition,inverted,progress);}  }
class C{  public Address leader(){  return selector.leader();}  }
class C{  static void unalignedAddress(int addr) throws MemoryMapException {  throw new MemoryMapException((long)addr,Reason.UNALIGNED_ADDRESS);}  }
class C{  public void testDifferentClassLoaderIsolatedMode() throws Exception {  processTestDifferentRemoteClassLoader(DeploymentMode.ISOLATED);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @HLEFunction(nid=0x5A014CE0,version=150) public int sceNetAdhocctlGetGameModeInfo(TPointer gameModeInfoAddr){  checkInitialized();  int offset=0;  gameModeInfoAddr.setValue32(offset,gameModeMacs.size());  offset+=4;  for (  pspNetMacAddress macAddress : gameModeMacs) {    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetAdhocctlGetGameModeInfo returning %s",macAddress));    }    macAddress.write(gameModeInfoAddr,offset);    offset+=macAddress.sizeof();  }  return 0;}  }
class C{  public void addBaudRate(double baudRate){  if (baudRates == null) {    return;  }  baudRates.add(new Double(baudRate));  if (bandwidth < 0 || baudRate < bandwidth) {    bandwidth=baudRate;  }}  }
class C{  Type signature(MethodSymbol msym,List<JCTypeParameter> typarams,List<JCVariableDecl> params,JCTree res,JCVariableDecl recvparam,List<JCExpression> thrown,Env<AttrContext> env){  List<Type> tvars=enter.classEnter(typarams,env);  attr.attribTypeVariables(typarams,env);  ListBuffer<Type> argbuf=new ListBuffer<Type>();  for (List<JCVariableDecl> l=params; l.nonEmpty(); l=l.tail) {    memberEnter(l.head,env);    argbuf.append(l.head.vartype.type);  }  Type restype=res == null ? syms.voidType : attr.attribType(res,env);  Type recvtype;  if (recvparam != null) {    memberEnter(recvparam,env);    recvtype=recvparam.vartype.type;  } else {    recvtype=null;  }  ListBuffer<Type> thrownbuf=new ListBuffer<Type>();  for (List<JCExpression> l=thrown; l.nonEmpty(); l=l.tail) {    Type exc=attr.attribType(l.head,env);    if (!exc.hasTag(TYPEVAR)) {      exc=chk.checkClassType(l.head.pos(),exc);    } else     if (exc.tsym.owner == msym) {      exc.tsym.flags_field|=THROWS;    }    thrownbuf.append(exc);  }  MethodType mtype=new MethodType(argbuf.toList(),restype,thrownbuf.toList(),syms.methodClass);  mtype.recvtype=recvtype;  return tvars.isEmpty() ? mtype : new ForAll(tvars,mtype);}  }
class C{  public NbtTagLong(String name,long value){  super(name);  this.value=value;}  }
class C{  public String buildUnionQuery(String[] subQueries,String sortOrder,String limit){  StringBuilder query=new StringBuilder(128);  int subQueryCount=subQueries.length;  String unionOperator=mDistinct ? " UNION " : " UNION ALL ";  for (int i=0; i < subQueryCount; i++) {    if (i > 0) {      query.append(unionOperator);    }    query.append(subQueries[i]);  }  appendClause(query," ORDER BY ",sortOrder);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public Builder withTokenizer(Class<? extends TokenizerFactory> factory,String... params) throws IOException {  return withTokenizer(factory,paramsToMap(params));}  }
class C{  public Period(long duration,Chronology chronology){  super(duration,null,chronology);}  }
class C{  public AbstractView(){  preferences=PreferencesUtil.userNodeForPackage(getClass());}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @SuppressWarnings("unchecked") private void start(){  SignatureTest sigTest=new SignatureTest(mResultObserver);  Resources r=getResources();  try {    sigTest.start(r.getXml(mSelectedResource));  } catch (  Exception e) {    mResultObserver.notifyFailure(FAILURE_TYPE.CAUGHT_EXCEPTION,e.getMessage(),e.getMessage());  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void processResult(Operation operation,Object resultObj,Map<String,Object> keyMap) throws SMIPluginException {  long timeInMillis;  try {    timeInMillis=(Long)keyMap.get(Constants._TimeCollected);    AccessProfile profile=(AccessProfile)keyMap.get(Constants.ACCESSPROFILE);    CIMArgument<?>[] outputArguments=(CIMArgument<?>[])resultObj;    List<Stat> metricsObjList=(List<Stat>)keyMap.get(Constants._Stats);    String[] arrayStats=((String[])outputArguments[0].getValue())[0].split("\n");    List<String> metricSequence=(List<String>)keyMap.get(Constants.STORAGEOS_SYSTEM_MANIFEST);    _logger.debug("System metricNames Sequence {}",metricSequence);    for (    String arrayStat : arrayStats) {      if (arrayStat.isEmpty()) {        _logger.debug("Empty arrayStat returned as part of Statistics Response");        continue;      }      Stat systemStat=new Stat();      Iterable<String> splitIterator=Splitter.on(Constants.SEMI_COLON).split(arrayStat);      List<String> systemMetricList=Lists.newLinkedList(splitIterator);      String nativeGuid=getSystemNativeGuidFromMetric(systemMetricList.get(0).toUpperCase(),keyMap);      systemStat.setNativeGuid(nativeGuid);      systemStat.setResourceId(profile.getSystemId());      systemStat.setServiceType(Constants._Block);      systemStat.setTimeCollected((Long)keyMap.get(Constants._TimeCollected));      systemStat.setTimeInMillis(timeInMillis);      if (null != metricSequence && !metricSequence.isEmpty()) {        injectSystemStatMetrics(metricSequence,systemStat,systemMetricList);      } else {        _logger.error("failed processing System Metric values as metric sequence is null.");      }      metricsObjList.add(systemStat);    }    _logger.info("injected system statistics in DB.");  } catch (  Exception e) {    _logger.error("Failed while extracting Stats for storage Systems: ",e);  }  resultObj=null;}  }
class C{  void fireBaseAttributeListeners(String ns,String ln){  if (targetListeners != null) {    LinkedList ll=(LinkedList)targetListeners.get(ns,ln);    Iterator it=ll.iterator();    while (it.hasNext()) {      AnimationTargetListener l=(AnimationTargetListener)it.next();      l.baseValueChanged(this,ns,ln,false);    }  }}  }
class C{  public static int toInt(byte[] bytes){  return toInt(bytes,0);}  }
class C{  private void maybeCompileToBytecode(MethodHandle invoker){  final int EAGER_COMPILE_ARITY_LIMIT=10;  if (targetType == targetType.erase() && targetType.parameterCount() < EAGER_COMPILE_ARITY_LIMIT) {    invoker.form.compileToBytecode();  }}  }
class C{  public StrBuilder replaceAll(final StrMatcher matcher,final String replaceStr){  return replace(matcher,replaceStr,0,size,-1);}  }
class C{  public Namespace createNamespace(Namespace namespace) throws IOException {  String requestUrl=RESOURCE;  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.POST,requestUrl,namespace);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Namespace.class);}  }
class C{  private HttpURLConnection makeConnection(DataSpec dataSpec) throws IOException {  URL url=new URL(dataSpec.uri.toString());  byte[] postBody=dataSpec.postBody;  long position=dataSpec.position;  long length=dataSpec.length;  boolean allowGzip=(dataSpec.flags & DataSpec.FLAG_ALLOW_GZIP) != 0;  if (!allowCrossProtocolRedirects) {    HttpURLConnection connection=makeConnection(url,postBody,position,length,allowGzip,true);    return connection;  }  int redirectCount=0;  while (redirectCount++ <= MAX_REDIRECTS) {    HttpURLConnection connection=makeConnection(url,postBody,position,length,allowGzip,false);    int responseCode=connection.getResponseCode();    if (responseCode == HttpURLConnection.HTTP_MULT_CHOICE || responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_SEE_OTHER || (postBody == null && (responseCode == 307 || responseCode == 308))) {      postBody=null;      String location=connection.getHeaderField("Location");      connection.disconnect();      url=handleRedirect(url,location);    } else {      return connection;    }  }  throw new NoRouteToHostException("Too many redirects: " + redirectCount);}  }
class C{  public List<Coord> readPoints(File file) throws IOException {  return readPoints(new FileReader(file));}  }
class C{  public StringMemberValue(String str,ConstPool cp){  super('s',cp);  setValue(str);}  }
class C{  private static String extractDimensionTableName(String dimensionColName,CarbonDataLoadSchema carbonDataLoadSchema){  List<DimensionRelation> dimensionRelationList=carbonDataLoadSchema.getDimensionRelationList();  for (  DimensionRelation dimensionRelation : dimensionRelationList) {    for (    String field : dimensionRelation.getColumns()) {      if (dimensionColName.equals(field)) {        return dimensionRelation.getTableName();      }    }  }  return carbonDataLoadSchema.getCarbonTable().getFactTableName();}  }
class C{  public void addMixInAnnotationMapping(Class<?> destinationClass,Class<?> classWithMixIns){  if (_mixInAnnotations == null) {    _mixInAnnotations=new HashMap<ClassKey,Class<?>>();  }  _mixInAnnotations.put(new ClassKey(destinationClass),classWithMixIns);}  }
class C{  public SQLRecoverableException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  @SuppressWarnings("TooBroadScope") public void testSwap() throws Exception {  assert cache.getConfiguration(CacheConfiguration.class).isSwapEnabled();  byte[] val1=wrap(1);  Object val2=2;  cache.put(KEY_1,val1);  cache.put(KEY_2,val2);  assert Arrays.equals(val1,(byte[])cache.get(KEY_1));  assert F.eq(val2,cache.get(KEY_2));  cache.localEvict(Collections.singleton(KEY_1));  cache.localEvict(Collections.singleton(KEY_2));  assert cache.localPeek(KEY_1,CachePeekMode.ONHEAP) == null;  assert cache.localPeek(KEY_2,CachePeekMode.ONHEAP) == null;}  }
class C{  protected void checkParameters() throws BuildException {  if (this.moduleSet.getModules().isEmpty()) {    throw new BuildException("You must specify a <module> or <moduleset>");  }  for (  Module module : moduleSet.getModules()) {    if (module.getVersion() == null || module.getVersion().isEmpty()) {      throw new BuildException("You must specify a version for the module " + module.getName());    }  }}  }
class C{  public String orderLine(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_OrderLine_ID=(Integer)value;  if (C_OrderLine_ID == null || C_OrderLine_ID.intValue() == 0)   return "";  MOrderLine ol=new MOrderLine(ctx,C_OrderLine_ID.intValue(),null);  if (ol.get_ID() != 0) {    if (ol.getC_Charge_ID() > 0 && ol.getM_Product_ID() <= 0) {      mTab.setValue("C_Charge_ID",new Integer(ol.getC_Charge_ID()));    } else {      mTab.setValue("M_Product_ID",new Integer(ol.getM_Product_ID()));      mTab.setValue("M_AttributeSetInstance_ID",new Integer(ol.getM_AttributeSetInstance_ID()));    }    mTab.setValue("C_UOM_ID",new Integer(ol.getC_UOM_ID()));    BigDecimal MovementQty=ol.getQtyOrdered().subtract(ol.getQtyDelivered());    mTab.setValue("MovementQty",MovementQty);    BigDecimal QtyEntered=MovementQty;    if (ol.getQtyEntered().compareTo(ol.getQtyOrdered()) != 0)     QtyEntered=QtyEntered.multiply(ol.getQtyEntered()).divide(ol.getQtyOrdered(),12,BigDecimal.ROUND_HALF_UP);    mTab.setValue("QtyEntered",QtyEntered);    mTab.setValue("C_Activity_ID",new Integer(ol.getC_Activity_ID()));    mTab.setValue("C_Campaign_ID",new Integer(ol.getC_Campaign_ID()));    mTab.setValue("C_Project_ID",new Integer(ol.getC_Project_ID()));    mTab.setValue("C_ProjectPhase_ID",new Integer(ol.getC_ProjectPhase_ID()));    mTab.setValue("C_ProjectTask_ID",new Integer(ol.getC_ProjectTask_ID()));    mTab.setValue("AD_OrgTrx_ID",new Integer(ol.getAD_OrgTrx_ID()));    mTab.setValue("User1_ID",new Integer(ol.getUser1_ID()));    mTab.setValue("User2_ID",new Integer(ol.getUser2_ID()));  }  return "";}  }
class C{  protected void afterWriting(){  if (session != null) {  }}  }
class C{  private static VirtualNAS findvNasByNativeId(String nativeId,DbClient dbClient){  URIQueryResultList results=new URIQueryResultList();  VirtualNAS vNas=null;  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVirtualNASByNativeGuidConstraint(nativeId),results);  Iterator<URI> iter=results.iterator();  while (iter.hasNext()) {    VirtualNAS tmpVnas=dbClient.queryObject(VirtualNAS.class,iter.next());    if (tmpVnas != null && !tmpVnas.getInactive()) {      vNas=tmpVnas;      _log.info("found virtual NAS {}",tmpVnas.getNativeGuid() + ":" + tmpVnas.getNasName());      break;    }  }  return vNas;}  }
class C{  public void dragOver(DragSourceDragEvent dsde){}  }
class C{  private void pause(){  RaptorWorkerState ret=new RaptorWorkerState();  ret.cumulativeMs=runningMs;  ret.round=this.round;  ret.iteration=statesEachIteration.size();  ret.departureTime=departureTime;  ret.frequencySearch=!scheduledSearch;  ret.stopsTouchedThisRound.or(stopsTouchedThisRound);  ret.stopsTouchedThisMinuteFrequency.or(this.stopsTouchedThisMinuteFrequency);  ret.stopsTouchedThisMinuteScheduled.or(this.stopsTouchedThisMinuteScheduled);  ret.allStopsTouchedThisMinute.or(this.allStopsTouchedThisMinute);  ret.patternsExploredThisRound.or(this.patternsExploredThisRound);  ret.patternsExploredThisMinute.or(this.patternsExploredThisMinute);  ret.patternsExploredThisMinuteFrequency.or(this.patternsExploredThisMinuteFrequency);  ret.patternsExploredThisMinuteScheduled.or(this.patternsExploredThisMinuteScheduled);  ret.raptorState=raptorState;  ret.complete=results != null;  this.workerState=ret;  try {    if (callerLatch != null)     callerLatch.countDown();  } catch (  IllegalMonitorStateException e) {  }  try {    searchLatch=new CountDownLatch(1);    searchLatch.await();  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public SequenceForDerby(Session s,String sSeqTable){  sent1=new StaticSentence(s,"DELETE FROM  " + sSeqTable);  sent2=new StaticSentence(s,"INSERT INTO " + sSeqTable + " VALUES (DEFAULT)");  sent3=new StaticSentence(s,"SELECT IDENTITY_VAL_LOCAL() FROM " + sSeqTable,null,SerializerReadInteger.INSTANCE);}  }
class C{  public JcaX509v3CertificateBuilder(X500Principal issuer,BigInteger serial,Date notBefore,Date notAfter,X500Principal subject,PublicKey publicKey){  super(X500Name.getInstance(issuer.getEncoded()),serial,notBefore,notAfter,X500Name.getInstance(subject.getEncoded()),SubjectPublicKeyInfo.getInstance(publicKey.getEncoded()));}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  static void parseVirtualInterface(String line,BufferedReader reader,PhysicalNode data){  String addressKey="ip address";  String shutdownKey="shutdown";  String noIpKey="no ip address";  try {    int pos=SubParser.locateFromEnd(line,null);    String vlanName=line;    String vlanId=line.substring(pos);    while ((line=reader.readLine()) != null) {      line=line.trim();      if (line.startsWith(shutdownKey) || line.startsWith(noIpKey) || line.startsWith(SECTION_SEPARATOR)) {        break;      } else       if (line.startsWith(addressKey)) {        Vlan vlan=data.getVlan(Integer.valueOf(vlanId));        if (debug) {          System.out.println(String.format("\tiface '%s' is vlan",vlanName));        }      }    }  } catch (  Exception ex) {    Logger.getLogger(CiscoRCParse.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  protected void add(Instance inst){  m_Dataset.add(inst);}  }
class C{  public void update(){  this.update=true;  this.wwd.redraw();}  }
class C{  @Override public double stop(){  double time=super.stop();  for (  Map.Entry<String,RTimerTree> entry : children) {    RTimer child=entry.getValue();    if (child.state == STARTED || child.state == PAUSED)     child.stop();  }  return time;}  }
class C{  public CBlockFilterExpression(final FilterRelation relation,final long value){  super(relation,value);}  }
class C{  private boolean processTransaction(Transaction transaction) throws IOException {synchronized (mProcessing) {    for (    Transaction t : mPending) {      if (t.isEquivalent(transaction)) {        if (LOCAL_LOGV)         Log.v(TAG,"Transaction already pending: " + transaction.getServiceId());        return true;      }    }    for (    Transaction t : mProcessing) {      if (t.isEquivalent(transaction)) {        if (LOCAL_LOGV)         Log.v(TAG,"Duplicated transaction: " + transaction.getServiceId());        return true;      }    }    if (LOCAL_LOGV)     Log.v(TAG,"processTransaction: call beginMmsConnectivity...");    int connectivityResult=beginMmsConnectivity();    if (connectivityResult == PhoneConstants.APN_REQUEST_STARTED) {      mPending.add(transaction);      if (LOCAL_LOGV)       Log.v(TAG,"processTransaction: connResult=APN_REQUEST_STARTED, " + "defer transaction pending MMS connectivity");      return true;    }    if (LOCAL_LOGV)     Log.v(TAG,"Adding transaction to 'mProcessing' list: " + transaction);    mProcessing.add(transaction);  }  sendMessageDelayed(obtainMessage(EVENT_CONTINUE_MMS_CONNECTIVITY),APN_EXTENSION_WAIT);  if (LOCAL_LOGV)   Log.v(TAG,"processTransaction: starting transaction " + transaction);  transaction.attach(TransactionService.this);  transaction.process();  return true;}  }
class C{  private static int unrandomize255State(int randomizedBase256Codeword,int base256CodewordPosition){  int pseudoRandomNumber=((149 * base256CodewordPosition) % 255) + 1;  int tempVariable=randomizedBase256Codeword - pseudoRandomNumber;  return tempVariable >= 0 ? tempVariable : tempVariable + 256;}  }
class C{  private void initInfo(int record_id,String value,boolean reset){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (reset) {    clearParameters();  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {      if (!value.matches(".*\\D+.*"))       fieldValue.setText(value); else       fieldName.setText(value);    } else {      String bp=Env.getContext(Env.getCtx(),p_WindowNo,"C_BPartner_ID");      if (bp != null && bp.length() != 0) {        fieldID=new Integer(bp).intValue();      }    }  }}  }
class C{  public static void checkGetOutputStreamOK(Resource resource) throws IOException {  if (resource.exists() && !resource.isWriteable()) {    throw new IOException("can't write to file [" + resource.getPath() + "],file is readonly");  }  if (resource.isDirectory())   throw new IOException("can't write directory [" + resource.getPath() + "] as a file");  if (!resource.getParentResource().exists())   throw new IOException("can't write file [" + resource.getPath() + "] as a file, missing parent directory ["+ resource.getParent()+ "]");}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void run(){  Socket[] con=new Socket[numIslands];  DataInputStream[] dataIn=new DataInputStream[numIslands];  DataOutputStream[] dataOut=new DataOutputStream[numIslands];  boolean[] clientRunning=new boolean[numIslands];  for (int x=0; x < numIslands; x++)   clientRunning[x]=true;  try {    serverSocket=new ServerSocket(serverPort,numIslands);  } catch (  IOException e) {    state.output.fatal("Error creating a socket on port " + serverPort);  }  for (int x=0; x < numIslands; x++) {    try {      con[x]=serverSocket.accept();      dataIn[x]=new DataInputStream(con[x].getInputStream());      dataOut[x]=new DataOutputStream(con[x].getOutputStream());      connected_island_ids[x]=dataIn[x].readUTF().trim();      state.output.message("Island " + connected_island_ids[x] + " logged in");      if (!info.containsKey(connected_island_ids[x])) {        state.output.error("Incorrect ID (" + connected_island_ids[x] + ")");        clientRunning[x]=false;        continue;      }      IslandExchangeIslandInfo ieii=(IslandExchangeIslandInfo)info.get(connected_island_ids[x]);      if (ieii == null) {        state.output.error("Can't get IslandExchangeInfo for " + connected_island_ids[x]);        clientRunning[x]=false;        continue;      }      if (ieii.port >= 0) {        state.output.error("Multiple islands are claiming the same ID (" + connected_island_ids[x] + ")");        clientRunning[x]=false;        continue;      }      dataOut[x].writeInt(ieii.num_incoming);      dataOut[x].writeInt(ieii.mailbox_capacity);      dataOut[x].flush();      ieii.address=dataIn[x].readUTF().trim();      ieii.port=dataIn[x].readInt();      state.output.message("" + x + ": Island "+ connected_island_ids[x]+ " has address "+ ieii.address+ " : "+ ieii.port);    } catch (    IOException e) {      state.output.error("Could not open connection #" + x);      clientRunning[x]=false;    }  }  state.output.exitIfErrors();  for (int x=0; x < numIslands; x++) {    if (clientRunning[x]) {      IslandExchangeIslandInfo ieii=(IslandExchangeIslandInfo)info.get(connected_island_ids[x]);      if (ieii == null) {        state.output.warning("There is no information about island " + connected_island_ids[x]);        clientRunning[x]=false;        continue;      }      try {        if (synchronous)         dataOut[x].writeInt(1); else         dataOut[x].writeInt(0);        dataOut[x].writeInt(ieii.modulo);        dataOut[x].writeInt(ieii.offset);        dataOut[x].writeInt(ieii.size);        dataOut[x].writeInt(ieii.num_mig);        for (int y=0; y < ieii.num_mig; y++) {          IslandExchangeIslandInfo temp;          temp=(IslandExchangeIslandInfo)info.get(ieii.migrating_island_ids[y]);          if (temp == null) {            state.output.warning("There is incorrect information on the island " + connected_island_ids[x]);            dataOut[x].writeUTF(" ");            dataOut[x].writeInt(-1);          } else {            state.output.message("Island " + connected_island_ids[x] + " should connect to island "+ ieii.migrating_island_ids[y]+ " at "+ temp.address+ " : "+ temp.port);            dataOut[x].writeUTF(temp.address);            dataOut[x].writeInt(temp.port);          }        }        dataOut[x].flush();      } catch (      IOException e) {        state.output.message("Server: Island " + island_ids[x] + " dropped connection");        clientRunning[x]=false;        continue;      }catch (      NullPointerException e) {        state.output.message("Server: Island " + island_ids[x] + " dropped connection");        clientRunning[x]=false;        try {          dataIn[x].close();          dataOut[x].close();          con[x].close();        } catch (        IOException f) {        }        continue;      }    }  }  try {    for (int x=0; x < dataIn.length; x++) {      dataIn[x].readUTF();    }    for (int x=0; x < dataOut.length; x++) {      dataOut[x].writeUTF(RUN);      dataOut[x].flush();    }  } catch (  IOException e) {  }  for (int x=0; x < con.length; x++) {    try {      con[x].setSoTimeout(FOUND_TIMEOUT);    } catch (    SocketException e) {      state.output.error("Could not set the connect with island " + x + " to non-blocking.");    }  }  boolean shouldExit=false;  while (!shouldExit) {    shouldExit=true;    for (int x=0; x < dataOut.length; x++)     if (clientRunning[x]) {      shouldExit=false;      break;    }    if (shouldExit)     break;    try {      Thread.sleep(SLEEP_TIME);    } catch (    InterruptedException e) {    }    String ww;    for (int x=0; x < dataOut.length; x++) {      if (clientRunning[x]) {        ww="";        try {          ww=dataIn[x].readUTF().trim();        } catch (        InterruptedIOException e) {          continue;        }catch (        IOException e) {          state.output.message("Server: Island " + island_ids[x] + " dropped connection");          clientRunning[x]=false;          continue;        }catch (        NullPointerException e) {          state.output.message("Server: Island " + island_ids[x] + " dropped connection");          clientRunning[x]=false;          try {            dataIn[x].close();            dataOut[x].close();            con[x].close();          } catch (          IOException f) {          }          continue;        }        if (ww.equals(FOUND)) {          for (int y=0; y < dataOut.length; y++) {            if (clientRunning[y]) {              try {                dataOut[y].writeUTF(GOODBYE);                dataOut[y].close();                dataIn[y].close();                con[y].close();              } catch (              IOException e) {              }            }          }          shouldExit=true;          break;        } else         if (ww.equals(SYNC)) {          who_is_synchronized[x]=true;          boolean complete_synchronization=true;          for (int y=0; y < numIslands; y++)           complete_synchronization=complete_synchronization && ((!clientRunning[y]) || who_is_synchronized[y]);          if (complete_synchronization) {            for (int y=0; y < numIslands; y++) {              if (clientRunning[y])               try {                dataOut[y].writeUTF(OKAY);                dataOut[y].flush();              } catch (              IOException e) {              }              who_is_synchronized[y]=false;            }          }        }      }    }  }  state.output.message("Server Exiting");}  }
class C{  private void process_method(final Activity activity,final SootClass cn,final SootMethod m) throws UnsupportedIdiomException {  StmtBody stmtBody=null;  try {    stmtBody=(StmtBody)m.retrieveActiveBody();  } catch (  Exception e) {    logger.debug("No active body for {}",m);    return;  }  for (Iterator stmtIt=stmtBody.getUnits().iterator(); stmtIt.hasNext(); ) {    final Stmt stmt=(Stmt)stmtIt.next();    if (stmt.containsInvokeExpr()) {      InvokeExpr expr=stmt.getInvokeExpr();      if (expr instanceof VirtualInvokeExpr)       v.process_invoke(cn,m,(VirtualInvokeExpr)expr,activity);    }  }}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public static Element createElement(Document doc,String tag,String nsURI,String prefix){  String qName=(prefix == null || prefix.length() == 0) ? tag : prefix + ":" + tag;  return doc.createElementNS(nsURI,qName);}  }
class C{  public int compareTo(Property other){  return sort(this.property).compareTo(sort(other.property));}  }
class C{  @Override public SelectableMultiPoint[] generate(int size){  SelectableMultiPoint[] smp=new SelectableMultiPoint[size];  IMultiPoint mp[]=pointGen.generate(size);  for (int i=0; i < size; i++) {    smp[i]=new SelectableMultiPoint(mp[i]);  }  return smp;}  }
class C{  public void readFile(){  if (getFileName() == null) {    log.debug("readFiler file invoked with null filename");    return;  } else   if (log.isDebugEnabled()) {    log.debug("readFile invoked with filename " + getFileName());  }  LocoFile lf=new LocoFile();  try {    mRootElement=lf.rootFromName(LocoFile.getFileLocation() + getFileName());  } catch (  JDOMException|IOException e) {    log.error("Exception while loading loco XML file: " + getFileName() + " exception: "+ e);  }}  }
class C{  public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  if (_s == null)   return;  try {    _os.write(buf,offset,length);    _totalWriteBytes+=length;  } catch (  IOException e) {    try {      close();    } catch (    IOException e1) {    }    throw ClientDisconnectException.create(e);  }}  }
class C{  public void write(ClassFile classFile,File f) throws IOException {  FileOutputStream f_out=new FileOutputStream(f);  try {    write(classFile,f_out);  }  finally {    f_out.close();  }}  }
class C{  protected void assertEquals(float expected,float actual){  if (expected != actual) {    if (Float.isNaN(expected) && Float.isNaN(actual)) {    } else {      fail("Expected: " + expected + " actual: "+ actual);    }  }}  }
class C{  private static int initializeTimeout(){  Integer tmp=java.security.AccessController.doPrivileged(new GetIntegerAction("com.sun.security.crl.timeout"));  if (tmp == null || tmp < 0) {    return DEFAULT_CRL_CONNECT_TIMEOUT;  }  return tmp * 1000;}  }
class C{  public static void removeHDFSDirectories(String[] directories){  try {    FileSystem fs=FileSystem.get(conf);    for (    String directory : directories) {      Path dir=new Path(directory);      if (fs.exists(dir) && fs.getFileStatus(dir).isDirectory()) {        fs.delete(dir,true);      }    }  } catch (  IOException e) {  }}  }
class C{  protected void startNode(int node) throws org.xml.sax.SAXException {  if (m_contentHandler instanceof NodeConsumer) {  }switch (m_dtm.getNodeType(node)) {case DTM.COMMENT_NODE:{      XMLString data=m_dtm.getStringValue(node);      if (m_contentHandler instanceof LexicalHandler) {        LexicalHandler lh=((LexicalHandler)this.m_contentHandler);        data.dispatchAsComment(lh);      }    }  break;case DTM.DOCUMENT_FRAGMENT_NODE:break;case DTM.DOCUMENT_NODE:this.m_contentHandler.startDocument();break;case DTM.ELEMENT_NODE:DTM dtm=m_dtm;for (int nsn=dtm.getFirstNamespaceNode(node,true); DTM.NULL != nsn; nsn=dtm.getNextNamespaceNode(node,nsn,true)) {String prefix=dtm.getNodeNameX(nsn);this.m_contentHandler.startPrefixMapping(prefix,dtm.getNodeValue(nsn));}String ns=dtm.getNamespaceURI(node);if (null == ns) ns="";org.xml.sax.helpers.AttributesImpl attrs=new org.xml.sax.helpers.AttributesImpl();for (int i=dtm.getFirstAttribute(node); i != DTM.NULL; i=dtm.getNextAttribute(i)) {attrs.addAttribute(dtm.getNamespaceURI(i),dtm.getLocalName(i),dtm.getNodeName(i),"CDATA",dtm.getNodeValue(i));}this.m_contentHandler.startElement(ns,m_dtm.getLocalName(node),m_dtm.getNodeName(node),attrs);break;case DTM.PROCESSING_INSTRUCTION_NODE:{String name=m_dtm.getNodeName(node);if (name.equals("xslt-next-is-raw")) {nextIsRaw=true;} else {this.m_contentHandler.processingInstruction(name,m_dtm.getNodeValue(node));}}break;case DTM.CDATA_SECTION_NODE:{boolean isLexH=(m_contentHandler instanceof LexicalHandler);LexicalHandler lh=isLexH ? ((LexicalHandler)this.m_contentHandler) : null;if (isLexH) {lh.startCDATA();}dispatachChars(node);{if (isLexH) {lh.endCDATA();}}}break;case DTM.TEXT_NODE:{if (nextIsRaw) {nextIsRaw=false;m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");dispatachChars(node);m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");} else {dispatachChars(node);}}break;case DTM.ENTITY_REFERENCE_NODE:{if (m_contentHandler instanceof LexicalHandler) {((LexicalHandler)this.m_contentHandler).startEntity(m_dtm.getNodeName(node));} else {}}break;default :}}  }
class C{  public Cylinder(Vec4 bottomCenter,Vec4 topCenter,double cylinderRadius,Vec4 unitDirection){  if (bottomCenter == null || topCenter == null || bottomCenter.equals(topCenter)) {    String message=Logging.getMessage(bottomCenter == null || topCenter == null ? "nullValue.EndPointIsNull" : "generic.EndPointsCoincident");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (cylinderRadius <= 0) {    String message=Logging.getMessage("Geom.Cylinder.RadiusIsZeroOrNegative",cylinderRadius);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.bottomCenter=bottomCenter.toHomogeneousPoint3();  this.topCenter=topCenter.toHomogeneousPoint3();  this.cylinderHeight=this.bottomCenter.distanceTo3(this.topCenter);  this.cylinderRadius=cylinderRadius;  this.axisUnitDirection=unitDirection;}  }
class C{  @Override public double[][] processQueryResults(DoubleDBIDList results,Relation<? extends NumberVector> database,int k){  final int dim=RelationUtil.dimensionality(database);  final CovarianceMatrix cmat=new CovarianceMatrix(dim);  if (k > results.size()) {    k=results.size();  }  double maxdist=0.0;  double stddev=0.0;{    int i=0;    for (DoubleDBIDListIter it=results.iter(); it.valid() && i < k; it.advance(), k++) {      final double dist=it.doubleValue();      stddev+=dist * dist;      if (dist > maxdist) {        maxdist=dist;      }    }    if (maxdist == 0.0) {      maxdist=1.0;    }    stddev=Math.sqrt(stddev / k);  }  int i=0;  for (DoubleDBIDListIter it=results.iter(); it.valid() && i < k; it.advance(), k++) {    final double dist=it.doubleValue();    NumberVector obj=database.get(it);    double weight=weightfunction.getWeight(dist,maxdist,stddev);    cmat.put(obj,weight);  }  return cmat.destroyToNaiveMatrix();}  }
class C{  public void removeHistoryListener(final ISelectionHistoryListener listener){  m_listeners.removeListener(listener);}  }
class C{  public EPDataFlowInstantiationOptions exceptionHandler(EPDataFlowExceptionHandler exceptionHandler){  this.exceptionHandler=exceptionHandler;  return this;}  }
class C{  public void testRemoveTransformer(){  for (int i=0; i < kTransformerSamples.length; i++) {    addTransformerToManager(fInst,kTransformerSamples[i]);    if (i % kModSamples == 1) {      removeTransformerFromManager(fInst,kTransformerSamples[i]);    }  }  verifyTransformers(fInst);}  }
class C{  public Node(Node other){  __isset_bitfield=other.__isset_bitfield;  this.nodeId=other.nodeId;  this.domainId=other.domainId;  if (other.isSetHostname()) {    this.hostname=other.hostname;  }  this.port=other.port;}  }
class C{  @Override public boolean onEditorAction(TextView textView,int actionId,KeyEvent event){  if (actionId == EditorInfo.IME_ACTION_SEND || (actionId != EditorInfo.IME_ACTION_UNSPECIFIED && event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER && event.getAction() == KeyEvent.ACTION_DOWN)) {    if (isEditingMessage()) {      onApproveEditMessage();      return true;    }    String sendText=textView.getText().toString();    if (TextUtils.isEmpty(sendText)) {      return false;    }    if (cursorCallback != null) {      cursorCallback.onMessageSubmitted(sendText);    }    return true;  }  return false;}  }
class C{  public ActionButtons(final GameData data,final MapPanel map,final MovePanel movePanel,final TripleAFrame parent){  m_battlePanel=new BattlePanel(data,map);  m_movePanel=movePanel;  m_purchasePanel=new PurchasePanel(data,map);  m_repairPanel=new RepairPanel(data,map);  m_placePanel=new PlacePanel(data,map,parent);  m_techPanel=new TechPanel(data,map);  m_endTurnPanel=new EndTurnPanel(data,map);  m_moveForumPosterPanel=new MoveForumPosterPanel(data,map);  m_politicsPanel=new PoliticsPanel(data,map,parent);  m_userActionPanel=new UserActionPanel(data,map,parent);  m_pickTerritoryAndUnitsPanel=new PickTerritoryAndUnitsPanel(data,map,parent);  m_current=m_techPanel;  setLayout(m_layout);  add(new JLabel(""),"");  add(m_battlePanel,m_battlePanel.toString());  add(m_movePanel,m_movePanel.toString());  add(m_repairPanel,m_repairPanel.toString());  add(m_purchasePanel,m_purchasePanel.toString());  add(m_placePanel,m_placePanel.toString());  add(m_techPanel,m_techPanel.toString());  add(m_endTurnPanel,m_endTurnPanel.toString());  add(m_moveForumPosterPanel,m_moveForumPosterPanel.toString());  add(m_politicsPanel,m_politicsPanel.toString());  add(m_userActionPanel,m_userActionPanel.toString());  add(m_pickTerritoryAndUnitsPanel,m_pickTerritoryAndUnitsPanel.toString());  map.getUIContext().addActive(null);}  }
class C{  public Url(final Url url){  scheme_=url.scheme_;  location_=url.location_;  path_=url.path_;  parameters_=url.parameters_;  query_=url.query_;  fragment_=url.fragment_;}  }
class C{  public static String match(String input,String pathAndExpected) throws Exception {  return match(input,pathAndExpected,DEFAULT_DELTA);}  }
class C{  public static boolean looksLikeAFontVariant(String val){  return "normal".equals(val) || "small-caps".equals(val);}  }
class C{  public void testStringWithLineComment() throws IOException {  final String sql="INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, '-- some text', 'some text' )";  final InputStream stream=this.getStream(R.raw.string_with_line_comment);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql,commands.get(0));}  }
class C{  protected void loadChars(jmri.jmrix.AbstractMRReply msg,java.io.DataInputStream istream) throws java.io.IOException {  int i;  if (log.isDebugEnabled()) {    log.debug("loading characters from port");  }  for (i=0; i < msg.maxSize(); i++) {    byte char1=readByteProtected(istream);    while ((i == 0) && ((char1 & 0xF0) == 0xF0)) {      if ((char1 & 0xFF) != 0xF0 && (char1 & 0xFF) != 0xF2) {        if (log.isDebugEnabled()) {          log.debug("Filtering 0x" + Integer.toHexString(char1 & 0xFF) + " from stream");        }        char1=readByteProtected(istream);      }    }    msg.setElement(i,char1 & 0xFF);    if (endOfMessage(msg)) {      break;    }  }  if (log.isDebugEnabled()) {    log.debug("Accepted Message: " + msg.toString());  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  int expectedModCount=modCount;  s.defaultWriteObject();  s.writeInt(size);  for (int i=0; i < size; i++) {    s.writeObject(elementData[i]);  }  if (modCount != expectedModCount) {    throw new ConcurrentModificationException();  }}  }
class C{  public boolean isTextBtn2(){  return isTextBtn2;}  }
class C{  public final static byte[] toByteArray(String uid){  byte[] result=new byte[16];  char[] chars=uid.toCharArray();  int r=0;  for (int i=0; i < chars.length; ++i) {    if (chars[i] == '-') {      continue;    }    int h1=Character.digit(chars[i],16);    ++i;    int h2=Character.digit(chars[i],16);    result[(r++)]=(byte)((h1 << 4 | h2) & 0xFF);  }  return result;}  }
class C{  protected ASN1TypeCollection(int tagNumber,ASN1Type[] type){  super(tagNumber);  this.type=type;  this.OPTIONAL=new boolean[type.length];  this.DEFAULT=new Object[type.length];}  }
class C{  @Override protected void onVisibilityChanged(View changedView,int visibility){  super.onVisibilityChanged(changedView,visibility);  if (changedView != this) {    return;  }  if (visibility == View.VISIBLE) {    resume();  } else {    pause();  }}  }
class C{  public static <V,T>MutableMap<V,BigInteger> sumByBigInteger(Iterable<T> iterable,Function<T,V> groupBy,Function<? super T,BigInteger> function){  if (iterable instanceof List) {    return ListIterate.sumByBigInteger((List<T>)iterable,groupBy,function);  }  if (iterable != null) {    return IterableIterate.sumByBigInteger(iterable,groupBy,function);  }  throw new IllegalArgumentException("Cannot perform an sumByBigInteger on null");}  }
class C{  public void test_buildOrder10() throws Exception {  final BTree btree=getProblem1();  doBuildAndDiscardCache(btree,10);  final IndexSegmentStore segStore=new IndexSegmentStore(outFile);  assertEquals("#nodes",0,segStore.getCheckpoint().nnodes);  assertEquals("#leaves",1,segStore.getCheckpoint().nleaves);  assertEquals("#entries",10,segStore.getCheckpoint().nentries);  assertEquals("height",0,segStore.getCheckpoint().height);  assertEquals(segStore.getCheckpoint().addrRoot,segStore.getCheckpoint().addrFirstLeaf);  assertEquals(segStore.getCheckpoint().addrFirstLeaf,segStore.getCheckpoint().addrLastLeaf);  final IndexSegment seg=segStore.loadIndexSegment();  try {    assertEquals(10,seg.getBranchingFactor());    assertEquals(0,seg.getHeight());    assertEquals(1,seg.getLeafCount());    assertEquals(0,seg.getNodeCount());    assertEquals(10,seg.getEntryCount());    final ImmutableLeaf leaf=seg.readLeaf(segStore.getCheckpoint().addrRoot);    assertEquals("priorAddr",0L,leaf.getPriorAddr());    assertEquals("nextAddr",0L,leaf.getNextAddr());    final ImmutableLeafCursor itr=seg.newLeafCursor(SeekEnum.First);    assertNull(itr.prior());    assertNull(itr.next());    dumpIndexSegment(seg);{      Leaf root=(Leaf)seg.getRoot();      assertKeys(new int[]{1,2,3,4,5,6,7,8,9,10},root);    }    assertSameBTree(btree,seg);  }  finally {    seg.close();  }}  }
class C{  public void testNegPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private PasswordFactory(){}  }
class C{  protected Expression number(int opPos) throws TransformerException {  return compileUnary(new org.apache.xpath.operations.Number(),opPos);}  }
class C{  public static <T>Value<T> of(final Supplier<T> supplier){  return new ValueImpl<T>(supplier);}  }
class C{  private Object _deserializeQuery(Element recordset) throws ConverterException {  try {    Query query=new QueryImpl(lucee.runtime.type.util.ListUtil.listToArray(recordset.getAttribute("fieldNames"),','),Caster.toIntValue(recordset.getAttribute("rowCount")),"query");    NodeList list=recordset.getChildNodes();    int len=list.getLength();    for (int i=0; i < len; i++) {      Node node=list.item(i);      if (node instanceof Element) {        _deserializeQueryField(query,(Element)node);      }    }    return query;  } catch (  PageException e) {    throw toConverterException(e);  }}  }
class C{  void fillActiveViews(int childCount,int firstActivePosition){  if (mActiveViews.length < childCount) {    mActiveViews=new View[childCount];  }  mFirstActivePosition=firstActivePosition;  final View[] activeViews=mActiveViews;  for (int i=0; i < childCount; i++) {    View child=getChildAt(i);    LayoutParams lp=(LayoutParams)child.getLayoutParams();    if (lp != null && lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER) {      activeViews[i]=child;    }  }}  }
class C{  public void testCompareToDiffSigns2(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  public boolean hideRequested(){  return hideRequested;}  }
class C{  public double distanceSq(final double x,final double y){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  return (dx * dx + dy * dy);}  }
class C{  private void dynInit(){}  }
class C{  private void parseObject(String path) throws ParseException {  scan('{');  boolean first=true;  while (true) {    char ch=peek();    if (ch == '}') {      break;    } else     if (first == false) {      if (ch == ',') {        upto++;        ch=peek();        if (ch == '}') {          break;        }      } else {        throw newParseException("expected , but got " + ch);      }    }    first=false;    int uptoStart=upto;    String key=parseString();    if (path.equals("crs.properties") && key.equals("href")) {      upto=uptoStart;      throw newParseException("cannot handle linked crs");    }    scan(':');    Object o;    ch=peek();    uptoStart=upto;    if (ch == '[') {      String newPath;      if (path.length() == 0) {        newPath=key;      } else {        newPath=path + "." + key;      }      o=parseArray(newPath);    } else     if (ch == '{') {      String newPath;      if (path.length() == 0) {        newPath=key;      } else {        newPath=path + "." + key;      }      parseObject(newPath);      o=null;    } else     if (ch == '"') {      o=parseString();    } else     if (ch == 't') {      scan("true");      o=Boolean.TRUE;    } else     if (ch == 'f') {      scan("false");      o=Boolean.FALSE;    } else     if (ch == 'n') {      scan("null");      o=null;    } else     if (ch == '-' || ch == '.' || (ch >= '0' && ch <= '9')) {      o=parseNumber();    } else     if (ch == '}') {      break;    } else {      throw newParseException("expected array, object, string or literal value, but got: " + ch);    }    if (path.equals("crs.properties") && key.equals("name")) {      if (o instanceof String == false) {        upto=uptoStart;        throw newParseException("crs.properties.name should be a string, but saw: " + o);      }      String crs=(String)o;      if (crs.startsWith("urn:ogc:def:crs:OGC") == false || crs.endsWith(":CRS84") == false) {        upto=uptoStart;        throw newParseException("crs must be CRS84 from OGC, but saw: " + o);      }    }    if (key.equals("type") && path.startsWith("crs") == false) {      if (o instanceof String == false) {        upto=uptoStart;        throw newParseException("type should be a string, but got: " + o);      }      String type=(String)o;      if (type.equals("Polygon") && isValidGeometryPath(path)) {        polyType="Polygon";      } else       if (type.equals("MultiPolygon") && isValidGeometryPath(path)) {        polyType="MultiPolygon";      } else       if ((type.equals("FeatureCollection") || type.equals("Feature")) && (path.equals("features.[]") || path.equals(""))) {      } else {        upto=uptoStart;        throw newParseException("can only handle type FeatureCollection (if it has a single polygon geometry), Feature, Polygon or MutiPolygon, but got " + type);      }    } else     if (key.equals("coordinates") && isValidGeometryPath(path)) {      if (o instanceof List == false) {        upto=uptoStart;        throw newParseException("coordinates should be an array, but got: " + o.getClass());      }      if (coordinates != null) {        upto=uptoStart;        throw newParseException("only one Polygon or MultiPolygon is supported");      }      coordinates=(List<Object>)o;    }  }  scan('}');}  }
class C{  private void suspendServiceInstance(ServiceInstance si,Throwable cause,String msgKey,boolean informTechnologyManagers,boolean withProvStatus){  si.setRunWithTimer(false);  si.setLocked(false);  em.persist(si);  StringBuffer eventLink=new StringBuffer();  try {    if (cause instanceof ObjectNotFoundException) {      eventLink=generateLinkForControllerUI(si);    } else {      eventLink.append(configService.getProxyConfigurationSetting(PlatformConfigurationKey.APP_BASE_URL)).append("/").append(EVENT_KEY_NOTIFY).append("?").append("sid=").append(URLEncoder.encode(si.getInstanceId(),"UTF-8")).append('&').append("cid=").append(URLEncoder.encode(si.getControllerId(),"UTF-8")).append('&').append(EVENT_KEY_RESUME).append('=').append(EVENT_VALUE_YES);    }  } catch (  Exception e) {    logger.error("Failure during error mail notification for service instance '{}' with message '{}'",si.getInstanceId(),e.getMessage());    return;  }  sendActionMail(informTechnologyManagers,si,msgKey,cause,eventLink.toString(),withProvStatus);}  }
class C{  private void hideFullScreenAvatar(){  mFullMemberAvatarLayout.setVisibility(View.GONE);}  }
class C{  public void saveSoundPreferences(final boolean flush){  if (Strings.isNotEmpty(musicPreferences)) {    if (Strings.isNotEmpty(soundVolumePreferenceName)) {      saveInPreferences(musicPreferences,soundVolumePreferenceName,soundVolume);    }    if (Strings.isNotEmpty(soundEnabledPreferenceName)) {      saveInPreferences(musicPreferences,soundEnabledPreferenceName,soundEnabled);    }    if (flush) {      flushPreferences();    }  }}  }
class C{  public DPolicyConstraints(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DPolicyConstraints.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static boolean hasMembershipQuorum(ServiceHost host,NodeGroupState ngs){  NodeState selfNode=ngs.nodes.get(host.getId());  if (selfNode == null) {    return false;  }  int availableNodeCount=0;  if (ngs.nodes.size() == 1) {    availableNodeCount=1;  } else {    for (    NodeState ns : ngs.nodes.values()) {      if (!NodeState.isAvailable(ns,selfNode.id,false)) {        continue;      }      availableNodeCount++;    }  }  if (availableNodeCount < selfNode.membershipQuorum) {    return false;  }  return true;}  }
class C{  protected void notifyListeners(){  LauncherBackupAgentHelper.dataChanged(getContext());  if (mListener != null) {    mListener.onLauncherProviderChange();  }}  }
class C{  @Override protected void swapValues(int a,int b){  short tt=values[a];  values[a]=values[b];  values[b]=tt;}  }
class C{  synchronized public long find(final long timestamp){  if (timestamp <= 0L)   throw new IllegalArgumentException();  final long index=findIndexOf(timestamp);  if (index == -1) {    return -1L;  }  return decodeKey(keyAt(index));}  }
class C{  private static void applyStyle(TextView v,AttributeSet attrs,int defStyleAttr,int defStyleRes){  String fontFamily=null;  int typefaceIndex=-1;  int styleIndex=-1;  int shadowColor=0;  float dx=0, dy=0, r=0;  Drawable drawableLeft=null, drawableTop=null, drawableRight=null, drawableBottom=null, drawableStart=null, drawableEnd=null;  boolean drawableDefined=false;  boolean drawableRelativeDefined=false;  TypedArray a=v.getContext().obtainStyledAttributes(attrs,R.styleable.TextViewAppearance,defStyleAttr,defStyleRes);  TypedArray appearance=null;  int ap=a.getResourceId(R.styleable.TextViewAppearance_android_textAppearance,0);  a.recycle();  if (ap != 0)   appearance=v.getContext().obtainStyledAttributes(ap,R.styleable.TextAppearance);  if (appearance != null) {    int n=appearance.getIndexCount();    for (int i=0; i < n; i++) {      int attr=appearance.getIndex(i);      if (attr == R.styleable.TextAppearance_android_textColorHighlight) {        v.setHighlightColor(appearance.getColor(attr,0));      } else       if (attr == R.styleable.TextAppearance_android_textColor) {        v.setTextColor(appearance.getColorStateList(attr));      } else       if (attr == R.styleable.TextAppearance_android_textColorHint) {        v.setHintTextColor(appearance.getColorStateList(attr));      } else       if (attr == R.styleable.TextAppearance_android_textColorLink) {        v.setLinkTextColor(appearance.getColorStateList(attr));      } else       if (attr == R.styleable.TextAppearance_android_textSize) {        v.setTextSize(TypedValue.COMPLEX_UNIT_PX,appearance.getDimensionPixelSize(attr,0));      } else       if (attr == R.styleable.TextAppearance_android_typeface) {        typefaceIndex=appearance.getInt(attr,-1);      } else       if (attr == R.styleable.TextAppearance_android_fontFamily) {        fontFamily=appearance.getString(attr);      } else       if (attr == R.styleable.TextAppearance_tv_fontFamily) {        fontFamily=appearance.getString(attr);      } else       if (attr == R.styleable.TextAppearance_android_textStyle) {        styleIndex=appearance.getInt(attr,-1);      } else       if (attr == R.styleable.TextAppearance_android_textAllCaps) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)         v.setAllCaps(appearance.getBoolean(attr,false));      } else       if (attr == R.styleable.TextAppearance_android_shadowColor) {        shadowColor=appearance.getInt(attr,0);      } else       if (attr == R.styleable.TextAppearance_android_shadowDx) {        dx=appearance.getFloat(attr,0);      } else       if (attr == R.styleable.TextAppearance_android_shadowDy) {        dy=appearance.getFloat(attr,0);      } else       if (attr == R.styleable.TextAppearance_android_shadowRadius) {        r=appearance.getFloat(attr,0);      } else       if (attr == R.styleable.TextAppearance_android_elegantTextHeight) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)         v.setElegantTextHeight(appearance.getBoolean(attr,false));      } else       if (attr == R.styleable.TextAppearance_android_letterSpacing) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)         v.setLetterSpacing(appearance.getFloat(attr,0));      } else       if (attr == R.styleable.TextAppearance_android_fontFeatureSettings) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)         v.setFontFeatureSettings(appearance.getString(attr));      }    }    appearance.recycle();  }  a=v.getContext().obtainStyledAttributes(attrs,R.styleable.TextView,defStyleAttr,defStyleRes);  int n=a.getIndexCount();  for (int i=0; i < n; i++) {    int attr=a.getIndex(i);    if (attr == R.styleable.TextView_android_drawableLeft) {      drawableLeft=a.getDrawable(attr);      drawableDefined=true;    } else     if (attr == R.styleable.TextView_android_drawableTop) {      drawableTop=a.getDrawable(attr);      drawableDefined=true;    } else     if (attr == R.styleable.TextView_android_drawableRight) {      drawableRight=a.getDrawable(attr);      drawableDefined=true;    } else     if (attr == R.styleable.TextView_android_drawableBottom) {      drawableBottom=a.getDrawable(attr);      drawableDefined=true;    } else     if (attr == R.styleable.TextView_android_drawableStart) {      drawableStart=a.getDrawable(attr);      drawableRelativeDefined=true;    } else     if (attr == R.styleable.TextView_android_drawableEnd) {      drawableEnd=a.getDrawable(attr);      drawableRelativeDefined=true;    } else     if (attr == R.styleable.TextView_android_drawablePadding) {      v.setCompoundDrawablePadding(a.getDimensionPixelSize(attr,0));    } else     if (attr == R.styleable.TextView_android_maxLines) {      v.setMaxLines(a.getInt(attr,-1));    } else     if (attr == R.styleable.TextView_android_maxHeight) {      v.setMaxHeight(a.getDimensionPixelSize(attr,-1));    } else     if (attr == R.styleable.TextView_android_lines) {      v.setLines(a.getInt(attr,-1));    } else     if (attr == R.styleable.TextView_android_height) {      v.setHeight(a.getDimensionPixelSize(attr,-1));    } else     if (attr == R.styleable.TextView_android_minLines) {      v.setMinLines(a.getInt(attr,-1));    } else     if (attr == R.styleable.TextView_android_minHeight) {      v.setMinHeight(a.getDimensionPixelSize(attr,-1));    } else     if (attr == R.styleable.TextView_android_maxEms) {      v.setMaxEms(a.getInt(attr,-1));    } else     if (attr == R.styleable.TextView_android_maxWidth) {      v.setMaxWidth(a.getDimensionPixelSize(attr,-1));    } else     if (attr == R.styleable.TextView_android_ems) {      v.setEms(a.getInt(attr,-1));    } else     if (attr == R.styleable.TextView_android_width) {      v.setWidth(a.getDimensionPixelSize(attr,-1));    } else     if (attr == R.styleable.TextView_android_minEms) {      v.setMinEms(a.getInt(attr,-1));    } else     if (attr == R.styleable.TextView_android_minWidth) {      v.setMinWidth(a.getDimensionPixelSize(attr,-1));    } else     if (attr == R.styleable.TextView_android_gravity) {      v.setGravity(a.getInt(attr,-1));    } else     if (attr == R.styleable.TextView_android_scrollHorizontally) {      v.setHorizontallyScrolling(a.getBoolean(attr,false));    } else     if (attr == R.styleable.TextView_android_includeFontPadding) {      v.setIncludeFontPadding(a.getBoolean(attr,true));    } else     if (attr == R.styleable.TextView_android_cursorVisible) {      v.setCursorVisible(a.getBoolean(attr,true));    } else     if (attr == R.styleable.TextView_android_textScaleX) {      v.setTextScaleX(a.getFloat(attr,1.0f));    } else     if (attr == R.styleable.TextView_android_shadowColor) {      shadowColor=a.getInt(attr,0);    } else     if (attr == R.styleable.TextView_android_shadowDx) {      dx=a.getFloat(attr,0);    } else     if (attr == R.styleable.TextView_android_shadowDy) {      dy=a.getFloat(attr,0);    } else     if (attr == R.styleable.TextView_android_shadowRadius) {      r=a.getFloat(attr,0);    } else     if (attr == R.styleable.TextView_android_textColorHighlight) {      v.setHighlightColor(a.getColor(attr,0));    } else     if (attr == R.styleable.TextView_android_textColor) {      v.setTextColor(a.getColorStateList(attr));    } else     if (attr == R.styleable.TextView_android_textColorHint) {      v.setHintTextColor(a.getColorStateList(attr));    } else     if (attr == R.styleable.TextView_android_textColorLink) {      v.setLinkTextColor(a.getColorStateList(attr));    } else     if (attr == R.styleable.TextView_android_textSize) {      v.setTextSize(TypedValue.COMPLEX_UNIT_PX,a.getDimensionPixelSize(attr,0));    } else     if (attr == R.styleable.TextView_android_typeface) {      typefaceIndex=a.getInt(attr,-1);    } else     if (attr == R.styleable.TextView_android_textStyle) {      styleIndex=a.getInt(attr,-1);    } else     if (attr == R.styleable.TextView_android_fontFamily) {      fontFamily=a.getString(attr);    } else     if (attr == R.styleable.TextView_tv_fontFamily) {      fontFamily=a.getString(attr);    } else     if (attr == R.styleable.TextView_android_textAllCaps) {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)       v.setAllCaps(a.getBoolean(attr,false));    } else     if (attr == R.styleable.TextView_android_elegantTextHeight) {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)       v.setElegantTextHeight(a.getBoolean(attr,false));    } else     if (attr == R.styleable.TextView_android_letterSpacing) {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)       v.setLetterSpacing(a.getFloat(attr,0));    } else     if (attr == R.styleable.TextView_android_fontFeatureSettings) {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)       v.setFontFeatureSettings(a.getString(attr));    }  }  a.recycle();  if (shadowColor != 0)   v.setShadowLayer(r,dx,dy,shadowColor);  if (drawableDefined) {    Drawable[] drawables=v.getCompoundDrawables();    if (drawableStart != null)     drawables[0]=drawableStart; else     if (drawableLeft != null)     drawables[0]=drawableLeft;    if (drawableTop != null)     drawables[1]=drawableTop;    if (drawableEnd != null)     drawables[2]=drawableEnd; else     if (drawableRight != null)     drawables[2]=drawableRight;    if (drawableBottom != null)     drawables[3]=drawableBottom;    v.setCompoundDrawablesWithIntrinsicBounds(drawables[0],drawables[1],drawables[2],drawables[3]);  }  if (drawableRelativeDefined && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {    Drawable[] drawables=v.getCompoundDrawablesRelative();    if (drawableStart != null)     drawables[0]=drawableStart;    if (drawableEnd != null)     drawables[2]=drawableEnd;    v.setCompoundDrawablesRelativeWithIntrinsicBounds(drawables[0],drawables[1],drawables[2],drawables[3]);  }  Typeface tf=null;  if (fontFamily != null) {    tf=TypefaceUtil.load(v.getContext(),fontFamily,styleIndex);    if (tf != null)     v.setTypeface(tf);  }  if (tf != null) {switch (typefaceIndex) {case 1:      tf=Typeface.SANS_SERIF;    break;case 2:  tf=Typeface.SERIF;break;case 3:tf=Typeface.MONOSPACE;break;}v.setTypeface(tf,styleIndex);}if (v instanceof AutoCompleteTextView) applyStyle((AutoCompleteTextView)v,attrs,defStyleAttr,defStyleRes);}  }
class C{  public static void main(String[] args) throws Exception {  runTestCase("RepeatedTableSample");  runTestCase("FSPageBreakMinHeightSample");  runTestCase("color");  runTestCase("background-color");  runTestCase("background-image");  runTestCase("invalid-url-background-image");  runTestCase("text-align");  runTestCase("font-family-built-in");  runTestCase("form-controls");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.899 -0500",hash_original_method="52FB523EE33548A5337713590AB1DF72",hash_generated_method="2AFD9511A9C9359DA57C31C6DF79FB99") public boolean isConnectionBased(){  return false;}  }
class C{  public CharacterClassEscapeSequence createCharacterClassEscapeSequence(){  CharacterClassEscapeSequenceImpl characterClassEscapeSequence=new CharacterClassEscapeSequenceImpl();  return characterClassEscapeSequence;}  }
class C{  public static long toLong(byte a,byte b,byte c,byte d,byte e,byte f,byte g,byte h,byte i,byte j,byte k,byte l,byte m,byte n,byte o,byte p){  return (((long)p & NIBBLE_MASK) << (NIBBLE_SIZE * 15)) | (((long)o & NIBBLE_MASK) << (NIBBLE_SIZE * 14)) | (((long)n & NIBBLE_MASK) << (NIBBLE_SIZE * 13))| (((long)m & NIBBLE_MASK) << (NIBBLE_SIZE * 12))| (((long)l & NIBBLE_MASK) << (NIBBLE_SIZE * 11))| (((long)k & NIBBLE_MASK) << (NIBBLE_SIZE * 10))| (((long)j & NIBBLE_MASK) << (NIBBLE_SIZE * 9))| (((long)i & NIBBLE_MASK) << (NIBBLE_SIZE * 8))| (((long)h & NIBBLE_MASK) << (NIBBLE_SIZE * 7))| (((long)g & NIBBLE_MASK) << (NIBBLE_SIZE * 6))| (((long)f & NIBBLE_MASK) << (NIBBLE_SIZE * 5))| (((long)e & NIBBLE_MASK) << (NIBBLE_SIZE * 4))| ((long)d << (NIBBLE_SIZE * 3))| (((long)c & NIBBLE_MASK) << (NIBBLE_SIZE * 2))| (((long)b & NIBBLE_MASK) << NIBBLE_SIZE)| ((long)a & NIBBLE_MASK);}  }
class C{  public ApproximationLine(int k_0,double m,double t){  this.k_0=k_0;  this.m=m;  this.t=t;}  }
class C{  private ErrorDialogFunctions(){}  }
class C{  public static String bytesToHex(byte[] bytes){  return toHex(bytes);}  }
class C{  public li addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static synchronized boolean stop(@Nullable String gridName,boolean cancel){  if (Ignition.stop(gridName,cancel)) {    PlatformProcessor old=instances.remove(gridName);    assert old != null;    return true;  } else   return false;}  }
class C{  public static InliningResult inlineFunctionCall(final View view,final CodeNode codeNode,final Instruction instruction,final Function function){  Preconditions.checkNotNull(view,"Error: View argument can not be null");  Preconditions.checkNotNull(codeNode,"Error: Code node argument can not be null");  Preconditions.checkNotNull(instruction,"Error: Instruction argument can not be null");  Preconditions.checkNotNull(function,"Error: Function argument can not be null");  final CInliningResult result=CInliningHelper.inlineCodeNode(view.getNative(),codeNode.getNative(),instruction.getNative(),function.getNative());  final CodeNode firstNode=(CodeNode)ObjectFinders.getObject(result.getFirstNode(),view.getGraph().getNodes());  final CodeNode secondNode=(CodeNode)(result.getSecondNode() == null ? null : ObjectFinders.getObject(result.getSecondNode(),view.getGraph().getNodes()));  return new InliningResult(firstNode,secondNode);}  }
class C{  public void replaceConnectedVirtualArray(Set<String> set){  if (_connectedVirtualArrays != null) {    _connectedVirtualArrays.replace(set);  } else {    _connectedVirtualArrays=new StringSet();    _connectedVirtualArrays.replace(set);  }  setChanged("connectedVirtualArrays");  updateVirtualArrayTags();}  }
class C{  public void addListener(final IZyGraphEdgeSettingsListener listener){  listeners.addListener(listener);}  }
class C{  @Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entityLiving,ItemStack itemStack){  ((TileExplosive)world.getTileEntity(x,y,z)).explosiveID=itemStack.getItemDamage();  int explosiveID=((TileExplosive)world.getTileEntity(x,y,z)).explosiveID;  if (!world.isRemote) {    ExplosivePreDetonationEvent evt=new ExplosivePreDetonationEvent(world,x,y,z,ExplosiveType.BLOCK,ExplosiveRegistry.get(explosiveID));    MinecraftForge.EVENT_BUS.post(evt);    if (evt.isCanceled()) {      dropBlockAsItem(world,x,y,z,explosiveID,0);      world.setBlockToAir(x,y,z);      return;    }  }  world.setBlockMetadataWithNotify(x,y,z,MekanismUtils.getBaseOrientation(ForgeDirection.NORTH.ordinal(),determineOrientation(world,x,y,z,entityLiving)),2);  if (world.isBlockIndirectlyGettingPowered(x,y,z)) {    BlockExplosive.detonate(world,x,y,z,explosiveID,0);  }  for (byte i=0; i < 6; i++) {    Pos3D position=new Pos3D(x,y,z);    position.translate(ForgeDirection.getOrientation(i),1);    Block block=position.getCoord(world.provider.dimensionId).getBlock(world);    if (block == Blocks.fire || block == Blocks.flowing_lava || block == Blocks.lava) {      BlockExplosive.detonate(world,x,y,z,explosiveID,2);    }  }  if (entityLiving != null) {    FMLLog.fine(entityLiving.getCommandSenderName() + " placed " + ExplosiveRegistry.get(explosiveID).getExplosiveName()+ " in: "+ x+ ", "+ y+ ", "+ z+ ".");  }}  }
class C{  @Deprecated public boolean isValid(String regex){  if (regex == null) {    return false;  }  Pattern pattern=Pattern.compile(regex);  Matcher matcher=pattern.matcher(getText());  return matcher.matches();}  }
class C{  private void markSnapSessionsInactiveForReplicationGroup(URI storage,URI cg,String rgName){  List<BlockSnapshotSession> sessionsList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,BlockSnapshotSession.class,AlternateIdConstraint.Factory.getSnapshotSessionReplicationGroupInstanceConstraint(rgName));  for (  BlockSnapshotSession session : sessionsList) {    if (storage.toString().equals(session.getStorageController().toString()) && (cg != null && cg.toString().equals(session.getConsistencyGroup().toString()))) {      _log.info("Marking snap session in-active: {}",session.getLabel());      session.setInactive(true);      _dbClient.updateObject(session);    }  }}  }
class C{  public boolean SP2Off(String mac){  JsonObject initJsonObjectParams=broadlinkStandardParams(BroadlinkConstants.CMD_SP2_CONTROL_ID,BroadlinkConstants.CMD_SP2_CONTROL);  initJsonObjectParams.addProperty("status",0);  initJsonObjectParams.addProperty("mac",mac);  JsonObject out=broadlinkExecuteCommand(initJsonObjectParams);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  return code == 0;}  }
class C{  public void terminate(){  if (sLogger.isActivated()) {    sLogger.info("Terminate the publish manager");  }  if (mPublished) {    stopTimer();    mPublished=false;  }  if (sLogger.isActivated()) {    sLogger.info("Publish manager is terminated");  }}  }
class C{  private synchronized boolean shouldGarbageCollectPeer(Peer peer){  Date lastSeen=peer.getLastSeen();  Date now=new Date();  long msSinceSeen=now.getTime() - lastSeen.getTime();  return msSinceSeen > PEER_TIMEOUT;}  }
class C{  public UF6(){  this(30);}  }
class C{  public static byte[] hash(String text){  try {    MessageDigest md=MessageDigest.getInstance("SHA-256");    md.update(text.getBytes("UTF-8"));    return md.digest();  } catch (  Exception e) {    throw new RuntimeException("Unable to compute hash while signing request: " + e.getMessage(),e);  }}  }
class C{  public JSONArray put(Collection<Object> value){  this.put(new JSONArray(value));  return this;}  }
class C{  @Override public int hashCode(){  return Integer.valueOf(this.getId()).hashCode();}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof ServicePermission))   return false;  ServicePermission np=(ServicePermission)permission;  int desired=np.getMask();  if (desired == 0) {    for (    Permission p : perms) {      ServicePermission sp=(ServicePermission)p;      if (sp.impliesIgnoreMask(np)) {        return true;      }    }    return false;  }  int effective=0;  int needed=desired;synchronized (this) {    int len=perms.size();    for (int i=0; i < len; i++) {      ServicePermission x=(ServicePermission)perms.get(i);      if (((needed & x.getMask()) != 0) && x.impliesIgnoreMask(np)) {        effective|=x.getMask();        if ((effective & desired) == desired)         return true;        needed=(desired ^ effective);      }    }  }  return false;}  }
class C{  static String convertColumnToFieldName(String columnName){  String lower=columnName.toLowerCase();  if (KEYWORDS.contains(lower)) {    lower+="Value";  }  return lower;}  }
class C{  public void testConstructorSignBytesZero1(){  byte aBytes[]={-0,0,+0,0,0,00,000};  int aSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public JSONAPIRequestBodyConverter(ResourceConverter converter){  this.converter=converter;}  }
class C{  private Tag clone(final ITreeNode<CTag> currentNode,final Tag parentExpression){  final Tag childExpression=new Tag(currentNode);  m_allTags.put(currentNode,childExpression);  if (parentExpression != null) {    Tag.link(parentExpression,childExpression);  }  for (  final ITreeNode<CTag> child : currentNode.getChildren()) {    clone(child,childExpression);  }  return childExpression;}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  public ComponentCoordinateExtracter(List coords){  this.coords=coords;}  }
class C{  public SQLNonTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public MessageDeleteEvent(int host,String id,double time,boolean drop){  super(host,host,id,time);  this.drop=drop;}  }
class C{  static void testForSpin(Selector sel) throws IOException {  System.out.println("Test for spin...");  long start=System.currentTimeMillis();  int count=3;  while (count-- > 0) {    int selected=sel.select(1000);    System.out.println("" + selected + " channel(s) selected");    assertTrue(selected == 0,"Channel should not be selected");  }  long dur=System.currentTimeMillis() - start;  assertTrue(dur > 1000,"select was too short");}  }
class C{  public static void main(String[] args) throws Exception {  int res=ToolRunner.run(new FindNodeAtDistance(),args);  System.exit(res);}  }
class C{  public static void addDocumentPartitioners(Document document,Map<String,DocumentPartitioner> partitioners){  Iterator<String> e=partitioners.keySet().iterator();  while (e.hasNext()) {    String partitioning=e.next();    DocumentPartitioner partitioner=partitioners.get(partitioning);    partitioner.connect(document);    document.setDocumentPartitioner(partitioning,partitioner);  }  partitioners.clear();}  }
class C{  @Override public void beforeTextChanged(CharSequence s,int start,int before,int after){  if (mRxMDConfiguration == null || !(s instanceof Editable)) {    return;  }  Editable editable=(Editable)s;  if (checkLineDelete(editable,start,before,after)) {    int beforeLinePosition=EditUtils.findBeforeNewLineChar(editable,start - 1) + 1;    MDOrderListSpan mdBeginOrderListSpan=getOrderListSpan(editable,beforeLinePosition,true);    MDOrderListSpan mdEndOrderListSpan=getOrderListSpan(editable,start + 1,true);    MDUnOrderListSpan mdBeginUnOrderListSpan=getUnOrderListSpan(editable,beforeLinePosition,true);    MDUnOrderListSpan mdEndUnOrderListSpan=getUnOrderListSpan(editable,start + 1,true);    if (mdBeginOrderListSpan != null) {      int spanStart=editable.getSpanStart(mdBeginOrderListSpan);      int position=EditUtils.findNextNewLineCharCompat(editable,start + 1);      if (mdEndOrderListSpan != null) {        editable.removeSpan(mdEndOrderListSpan);      }      editable.removeSpan(mdBeginOrderListSpan);      editable.setSpan(new MDOrderListSpan(10,mdBeginOrderListSpan.getNested(),mdBeginOrderListSpan.getNumber()),spanStart,position,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    } else     if (mdBeginUnOrderListSpan != null) {      int spanStart=editable.getSpanStart(mdBeginUnOrderListSpan);      int position=EditUtils.findNextNewLineCharCompat(editable,start + 1);      if (mdEndUnOrderListSpan != null) {        editable.removeSpan(mdEndUnOrderListSpan);      }      editable.removeSpan(mdBeginUnOrderListSpan);      editable.setSpan(new MDUnOrderListSpan(10,mdBeginUnOrderListSpan.getColor(),mdBeginUnOrderListSpan.getNested()),spanStart,position,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    }  } else {    mNeedFormat=checkDeleteOrderListSpan(editable,start,before,after);    mNeedFormat|=checkDeleteUnOrderListSpan(editable,start,before,after);  }}  }
class C{  protected static void doConfigure(ConfigurationHTTPAdapter configuration,Document doc) throws RuntimeException {  Element root=doc.getDocumentElement();  DOMElementIterator eventTypeNodeIterator=new DOMElementIterator(root.getChildNodes());  while (eventTypeNodeIterator.hasNext()) {    Element element=eventTypeNodeIterator.next();    String nodeName=element.getNodeName();    if (nodeName.equals("service")) {      handleService(configuration,element);    } else     if (nodeName.equals("service")) {      handleGet(configuration,element);    } else     if (nodeName.equals("get")) {      handleGet(configuration,element);    } else     if (nodeName.equals("request")) {      handleRequest(configuration,element);    }  }}  }
class C{  public boolean isMenuItem(){  return isMenuItem;}  }
class C{  public CMMException(String s){  super(s);}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  handleRemove(changes.getOffset(),changes.getLength());  super.removeUpdate(changes,a,f);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("CLogFile[");  sb.append(getFileName()).append(",Level=").append(getLevel()).append("]");  return sb.toString();}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public static long abs(final long a){  return (a ^ a >> 63) - (a >> 63);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public void handleArgument(final Argument arg,final String form,final String[] parameters) throws UsageException {  final File file=new File(parameters[0]);  URL result=null;  if (file.exists()) {    try {      result=file.toURI().toURL();    } catch (    MalformedURLException mux) {      LOG.log(Level.FINEST,"Caught Exception",mux);    }  }  if (result == null) {    try {      result=new URL(parameters[0]);    } catch (    MalformedURLException mux) {      LOG.log(Level.FINEST,"Caught Exception",mux);    }  }  if (result == null) {    throw (new UsageException("Argument parameter value is not a valid file " + "path or URL: " + arg));  }  parameters[0]=result.toString();}  }
class C{  public StrBuilder appendFixedWidthPadLeft(final Object obj,final int width,final char padChar){  if (width > 0) {    ensureCapacity(size + width);    String str=(obj == null ? getNullText() : obj.toString());    if (str == null) {      str="";    }    final int strLen=str.length();    if (strLen >= width) {      str.getChars(strLen - width,strLen,buffer,size);    } else {      final int padLen=width - strLen;      for (int i=0; i < padLen; i++) {        buffer[size + i]=padChar;      }      str.getChars(0,strLen,buffer,size + padLen);    }    size+=width;  }  return this;}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public EditableOMScalingRaster(OMScalingRaster omsr){  setGraphic(omsr);}  }
class C{  public void addValidator(Validator theValidator) throws IllegalArgumentException {  editTextValidator.addValidator(theValidator);}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (isHeadless()) {    return image;  }  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  try {    g.drawImage(image,0,0,null);  }  finally {    g.dispose();  }  return compatibleImage;}  }
class C{  public CharClassException(String message){  super(message);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.930 -0500",hash_original_method="BD0CD0940E277CB89BD11D972CAF1EC0",hash_generated_method="6CB8AA358C5F4EA765EF80B119362FFA") private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public Surface scale(float sx,float sy){  tx().scale(sx,sy);  return this;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PlumNeedle)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  return true;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + mean+ ","+ standardDeviation+ ")";}  }
class C{  public String businessVersion(){  return version;}  }
class C{  public void clear(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    int k=count;    if (k > 0) {      final int putIndex=this.putIndex;      int i=takeIndex;      do {        items[i]=null;        if (++i == items.length)         i=0;      } while (i != putIndex);      takeIndex=putIndex;      count=0;      if (itrs != null)       itrs.queueIsEmpty();      for (; k > 0 && lock.hasWaiters(notFull); k--)       notFull.signal();    }  }  finally {    lock.unlock();  }}  }
class C{  public BadResultException(String message,Object... args){  super(String.format(message,args));}  }
class C{  public void useLayoutEditorDetails(boolean turnouts,boolean blocks,SignalMast destination) throws jmri.JmriException {  if (!destList.containsKey(destination)) {    return;  }  try {    destList.get(destination).useLayoutEditorDetails(turnouts,blocks);  } catch (  jmri.JmriException e) {    throw e;  }}  }
class C{  private static void trySetRenderArgs(Map<String,Promise<?>> promises){  for (  Map.Entry<String,Promise<?>> entry : promises.entrySet()) {    trySetRenderArg(entry.getKey(),entry.getValue());  }}  }
class C{  public boolean isAuthorized(){  return authorized;}  }
class C{  public boolean isDisableSnapshotsSupported(){  return disableSnapshotsSupported;}  }
class C{  @Nullable public static Version createVersionOrNull(String versionNumber) throws IllegalVersionException {  return versionNumber == null ? null : Version.valueOf(versionNumber);}  }
class C{  public BigArrays withCircuitBreaking(){  return this.circuitBreakingInstance;}  }
class C{  public NodeSetDTM(DTMManager dtmManager){  super();  m_manager=dtmManager;}  }
class C{  public String deleteManager() throws Exception {  if (resource == null) {    return NOT_FOUND;  }  User u=userManager.get(id);  if (u == null || !resource.getManagers().contains(u)) {    addActionError(getText("manage.overview.manager.not.available",new String[]{id}));  } else {    resource.getManagers().remove(u);    addActionMessage(getText("manage.overview.user.removed",new String[]{u.getName()}));    saveResource();    potentialManagers.add(u);  }  return execute();}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public void invalidateFileCache(){  if (loadThread != null) {    loadThread.interrupt();    loadThread.cancelRunnables();    loadThread=null;  }}  }
class C{  public String batchSizeTipText(){  return "Batch size to use if base learner is a BatchPredictor";}  }
class C{  public AbstractJBossCapabilityTestCase(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public static Filter acceptFilter(){  return new CategoricalFilter(true);}  }
class C{  @ConstructorProperties({"lineColor","thickness","roundedCorners"}) public LineBorder(Color color,int thickness,boolean roundedCorners){  lineColor=color;  this.thickness=thickness;  this.roundedCorners=roundedCorners;}  }
class C{  public void onActionModeFinished(ActionMode mode){}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tAcuity.\n" + "\t(default=1.0)","A",1,"-A <acuity>"));  result.addElement(new Option("\tCutoff.\n" + "\t(default=0.002)","C",1,"-C <cutoff>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public Matrix3 trn(Vector3 vector){  val[6]+=vector.x;  val[7]+=vector.y;  return this;}  }
class C{  public static boolean createFolder(@SuppressWarnings("UnusedParameters") Context mContext,String path,String folderName){  File SDCardRoot=new File(path,folderName);  if (!SDCardRoot.exists()) {    return SDCardRoot.mkdir();  }  return false;}  }
class C{  @Override public Long hincrBy(final byte[] key,final byte[] field,final long value){  checkIsInMultiOrPipeline();  client.hincrBy(key,field,value);  return client.getIntegerReply();}  }
class C{  public CategoryGraph(Wikipedia pWiki,File location) throws WikiApiException {  try {    constructCategoryGraph(pWiki,GraphSerialization.loadGraph(location));  } catch (  IOException e) {    throw new WikiApiException(e);  }catch (  ClassNotFoundException e) {    throw new WikiApiException(e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void cmd_delete(){  if (m_curTab.isReadOnly())   return;  int keyID=m_curTab.getRecord_ID();  if (ADialog.ask(m_curWindowNo,this,"DeleteRecord?"))   if (m_curTab.dataDelete())   m_curGC.rowChanged(false,keyID);  m_curGC.dynamicDisplay(0);}  }
class C{  protected void handleTimingSpecifier(Object[] spec){  int type=((Integer)spec[0]).intValue();switch (type) {case TIME_OFFSET:    timingSpecifierHandler.offset(((Float)spec[1]).floatValue());  break;case TIME_SYNCBASE:timingSpecifierHandler.syncbase(((Float)spec[1]).floatValue(),(String)spec[2],(String)spec[3]);break;case TIME_EVENTBASE:timingSpecifierHandler.eventbase(((Float)spec[1]).floatValue(),(String)spec[2],(String)spec[3]);break;case TIME_REPEAT:{float offset=((Float)spec[1]).floatValue();String syncbaseID=(String)spec[2];if (spec[3] == null) {timingSpecifierHandler.repeat(offset,syncbaseID);} else {timingSpecifierHandler.repeat(offset,syncbaseID,((Integer)spec[3]).intValue());}break;}case TIME_ACCESSKEY:timingSpecifierHandler.accesskey(((Float)spec[1]).floatValue(),((Character)spec[2]).charValue());break;case TIME_ACCESSKEY_SVG12:timingSpecifierHandler.accessKeySVG12(((Float)spec[1]).floatValue(),(String)spec[2]);break;case TIME_MEDIA_MARKER:timingSpecifierHandler.mediaMarker((String)spec[1],(String)spec[2]);break;case TIME_WALLCLOCK:timingSpecifierHandler.wallclock((Calendar)spec[1]);break;case TIME_INDEFINITE:timingSpecifierHandler.indefinite();break;}}  }
class C{  public boolean isComposite(){  return true;}  }
class C{  public Value evaluate(){  for (  Expression condition : children) {    if (condition.evaluate().boolValue() == false) {      return Value.create(false);    }  }  return Value.create(true);}  }
class C{  private BridgeTransform(BridgeTransform<A,B> prototype){  steps=new ArrayList<>(prototype.steps);  from=prototype.from;  to=prototype.to;  end=prototype.end;  factory=prototype.factory;}  }
class C{  public OsmNetworkReaderWithPT(final Network network,final CoordinateTransformation transformation){  this(network,transformation,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().hasRemoteFSSupport()) {    return new Long(((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).fsGetPathModified(getString(stack)));  } else   return new Long(getFile(stack).lastModified());}  }
class C{  public void execute(Runnable runnable){synchronized (lock) {    pending=runnable;    lock.notifyAll();  }}  }
class C{  public static void logout(Activity activity){  logout(activity,true);}  }
class C{  public BinaryMessage copy(){  return new BinaryMessage(this);}  }
class C{  private boolean performSearch(String query){  if (checkInteger(query)) {    return getComicByNumber(Integer.parseInt(query));  } else {    return searchComicTitleOrTranscript(query);  }}  }
class C{  public static void complete(Subscriber<?> s){  s.onSubscribe(EmptySubscription.INSTANCE);  s.onComplete();}  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  public int scheduledBy(){  return entSrc;}  }
class C{  @Inject public DefaultDashboardService(AuditService auditService,SystemConfiguration _sysConfig){  super(auditService,_sysConfig);}  }
class C{  public List<Completion> lookup(CharSequence key,int num){  if (key.length() == 0 || automaton == null) {    return EMPTY_RESULT;  }  try {    BytesRef keyUtf8=new BytesRef(key);    if (!higherWeightsFirst && rootArcs.length > 1) {      return lookupSortedAlphabetically(keyUtf8,num);    } else {      return lookupSortedByWeight(keyUtf8,num,false);    }  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private String prepareWhere(String where){  if (!TextUtils.isEmpty(mSearchKey)) {    String searchKey=DatabaseUtils.sqlEscapeString("%" + mSearchKey + "%");    where=combineWhere(where,"(" + COLUMN_NAME + " LIKE "+ searchKey+ ")");  }  return where;}  }
class C{  @Override public RelationalVal copy(){  return new RelationalVal(toString());}  }
class C{  @Override public void qtest(Query q,int[] expDocNrs) throws Exception {  CheckHits.checkNoMatchExplanations(q,FIELD,searcher,expDocNrs);}  }
class C{  public boolean isIndependent(Node xVar,Node yVar,List<Node> zList){  if (zList == null) {    throw new NullPointerException();  }  for (  Node node : zList) {    if (node == null) {      throw new NullPointerException();    }  }  List<Node> regressors=new ArrayList<>();  xVar=timeLags.getVariable(xVar.getName());  regressors.add(timeLags.getVariable(yVar.getName()));  int yIndex=timeLags.getColumn(timeLags.getVariable(yVar.getName()));  for (int i2=yIndex + variables.size(); i2 < timeLags.getNumColumns(); i2+=variables.size()) {    regressors.add(timeLags.getVariable(i2));  }  int xIndex=timeLags.getColumn(timeLags.getVariable(xVar.getName()));  for (int i2=xIndex + variables.size(); i2 < timeLags.getNumColumns(); i2+=variables.size()) {    regressors.add(timeLags.getVariable(i2));  }  for (  Node z : zList) {    int zIndex=timeLags.getColumn(timeLags.getVariable(z.getName()));    for (int i2=zIndex; i2 < timeLags.getNumColumns(); i2+=variables.size()) {      final List<Node> variables=timeLags.getVariables();      regressors.add(variables.get(i2));    }  }  System.out.println(xVar + " conditioning on " + regressors);  RegressionResult result=null;  try {    result=regression.regress(xVar,regressors);  } catch (  Exception e) {    e.printStackTrace();    return false;  }  double p=result.getP()[1];  System.out.println("p = " + p);  boolean independent=p > alpha;  if (verbose) {    if (independent) {      System.out.println(SearchLogUtils.independenceFactMsg(xVar,yVar,zList,p));    }  }  return independent;}  }
class C{  private List<StoragePort> createStoragePorts(StorageSystem storageSystem,String compatibilityStatus,Network network,List<ScaleIOSDS> allSDSs,String protectionDomainName) throws IOException {  List<StoragePort> ports=new ArrayList<>();  List<String> endpoints=new ArrayList<>();  for (  ScaleIOSDS sds : allSDSs) {    String sdsId=sds.getId();    List<IP> ips=sds.getIpList();    String sdsIP=null;    if (ips != null && !ips.isEmpty()) {      sdsIP=ips.get(0).getIp();    }    StoragePort port;    List<StoragePort> results=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,StoragePort.class,"portNetworkId",sdsId);    if (results == null || results.isEmpty()) {      String nativeGUID=NativeGUIDGenerator.generateNativeGuid(storageSystem,protectionDomainName,NativeGUIDGenerator.ADAPTER);      StorageHADomain adapter=new StorageHADomain();      adapter.setStorageDeviceURI(storageSystem.getId());      adapter.setId(URIUtil.createId(StorageHADomain.class));      adapter.setAdapterName(protectionDomainName);      adapter.setLabel(protectionDomainName);      adapter.setNativeGuid(nativeGUID);      adapter.setNumberofPorts("1");      adapter.setAdapterType(StorageHADomain.HADomainType.FRONTEND.name());      adapter.setInactive(false);      _dbClient.createObject(adapter);      port=new StoragePort();      port.setId(URIUtil.createId(StoragePort.class));      port.setPortNetworkId(sdsId);      port.setLabel(String.format("%s-%s-StoragePort",protectionDomainName,sdsId));      port.setStorageDevice(storageSystem.getId());      port.setCompatibilityStatus(compatibilityStatus);      port.setOperationalStatus(OperationalStatus.OK.name());      port.setIpAddress(sdsIP);      port.setNetwork(network.getId());      port.setPortGroup(sdsId);      port.setPortName(sdsId);      port.setPortType(StoragePort.PortType.frontend.name());      port.setStorageHADomain(adapter.getId());      port.setTransportType(StorageProtocol.Transport.ScaleIO.name());      port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      port.setInactive(false);      _dbClient.createObject(port);      endpoints.add(port.getPortNetworkId());    } else {      port=results.get(0);    }    ports.add(port);  }  network.addEndpoints(endpoints,true);  _dbClient.updateAndReindexObject(network);  return ports;}  }
class C{  private WebDoc createLayout(String action,table contentTable,WebSessionCtx wsc,WWindowStatus ws,String statusInfo,String statusDB){  form myForm=null;  myForm=new form(action);  myForm.setID("WForm");  myForm.setOnSubmit("this.target=window.name");  String AD_Language=Env.getAD_Language(ws.ctx);  myForm.setName(FORM_NAME);  myForm.addElement(new input("hidden",P_Command,""));  myForm.addElement(new input("hidden",P_MR_RowNo,""));  myForm.addElement(new input("hidden",P_ChangedColumn,""));  String title=ws.mWindow.getName() + " - " + wsc.loginInfo;  myForm.addElement(new script("top.document.title='" + title + "';"));  td toolbar=new td("toolbar",AlignType.LEFT,AlignType.MIDDLE,true);  toolbar.addElement(createImageLink(AD_Language,"Menu","parent.resizeFrame('5,*')",true,false));  toolbar.addElement(createImageLink(AD_Language,"Ignore","'reset'",true,false));  toolbar.addElement("&nbsp;");  toolbar.addElement(createImageLink(AD_Language,"Help","startPopup('WHelp?AD_Window_ID=" + ws.mWindow.getAD_Window_ID() + "')",true,false));  toolbar.addElement(createImageLink(AD_Language,"New"));  toolbar.addElement(createImageLink(AD_Language,"Delete","'if(confirm(deleteText))'",true,false));  toolbar.addElement(createImageLink(AD_Language,"Save"));  toolbar.addElement("&nbsp;");  toolbar.addElement(createImageLink(AD_Language,"Chat","startPopup('WChat')",true,false));  toolbar.addElement(createImageLink(AD_Language,"Refresh"));  toolbar.addElement(createImageLink(AD_Language,"Attachment","startPopup('WAttachment')",ws.curTab.canHaveAttachment(),ws.curTab.hasAttachment()));  toolbar.addElement(createImageLink(AD_Language,"Multi",null,true,!ws.curTab.isSingleRow()));  toolbar.addElement(createImageLink(AD_Language,"FindAdv","startPopup('WFindAdv')",true,false));  if (m_searchField != null) {    input txtSearch=new input(input.TYPE_TEXT,"txtSearch","[" + m_searchField + "]");    txtSearch.setOnChange("SubmitForm('Find', 'Submit','toolbar');return false;");    toolbar.addElement(txtSearch);  }  toolbar.addElement("&nbsp;");  toolbar.addElement(createImageLink(AD_Language,"History","startPopup('WHistory')",true,false));  toolbar.addElement("&nbsp;");  boolean isFirst=ws.curTab.getCurrentRow() < 1;  toolbar.addElement(createImageLink(AD_Language,"First",null,!isFirst,false));  toolbar.addElement(createImageLink(AD_Language,"Previous",null,!isFirst,false));  boolean isLast=ws.curTab.getCurrentRow() + 1 == ws.curTab.getRowCount();  toolbar.addElement(createImageLink(AD_Language,"Next",null,!isLast,false));  toolbar.addElement(createImageLink(AD_Language,"Last",null,!isLast,false));  toolbar.addElement("&nbsp;");  toolbar.addElement(createImageLink(AD_Language,"Report","startPopup('WReport')",true,false));  toolbar.addElement("&nbsp;");  toolbar.addElement(createImageLink(AD_Language,"Favorite"));  toolbar.addElement(createImageLink(AD_Language,"Exit"));  td tabbar=new td("windowCenter",AlignType.LEFT,AlignType.MIDDLE,false);  tabbar.addElement(new input(input.TYPE_HIDDEN,P_Tab,""));  for (int i=0; i < ws.mWindow.getTabCount(); i++) {    GridTab tab=ws.mWindow.getTab(i);    if (tab.isSortTab())     continue;    a big=new a("#",new span(tab.getName()));    if (ws.curTab.getTabNo() == i)     big.setID("tabSelected"); else {      big.setID("tab");      big.setOnClick("SubmitForm(" + i + ",'Submit','tab')");    }    if (tab.getDescription().length() > 0)     big.setOnMouseOver("status='" + tab.getDescription() + "';return true;");    if (tab.isReadOnly())     tabbar.addElement(new i().addElement(big)); else     tabbar.addElement(big);  }  table topTable=new table("0","0","0","100%",null);  topTable.setID("WWindow.topTable");  topTable.addElement(new tr(toolbar));  topTable.addElement(new tr(tabbar));  myForm.addElement(topTable);  div panel=new div();  panel.setStyle("overflow: scroll;overflow: auto;");  panel.addElement(contentTable);  myForm.addElement(panel);  table statusTable=new table("0","0","0","100%",null);  topTable.setID("WWindow.statusLine");  tr statusLine=new tr();  statusLine.addElement(new td().setWidth("85%").setAlign(AlignType.LEFT).addElement("&nbsp;# " + statusInfo));  a db=new a("#");  db.setOnClick("alert('" + ws.curTab.getKeyColumnName() + " = "+ ws.curTab.getRecord_ID()+ "')");  db.addElement(statusDB);  statusLine.addElement(new td().setWidth("10%").setAlign(AlignType.RIGHT).addElement(db));  statusLine.addElement(new td().setWidth("5%").setAlign(AlignType.RIGHT).addElement(createImageLink(AD_Language,"Save")));  statusTable.addElement(statusLine).setClass("windowCenter");  myForm.addElement(statusTable);  WebDoc doc=createPage(ws);  doc.getTable().addElement(new tr().addElement(new td(null,AlignType.CENTER,AlignType.MIDDLE,true,myForm).setColSpan(2)));  return doc;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean contains(int integer){  for (int i=0; i < size; i++) {    if (data[i] == integer)     return true;  }  return false;}  }
class C{  public void add(String name,InputStream is,String password) throws IOException, UnsupportedEncodingException {  encrypter.init(password,256);  ByteArrayOutputStream bos=new ByteArrayOutputStream();  DeflaterOutputStream dos=new DeflaterOutputStream(bos,new Deflater(9,true),8 * 1024);  int read=0;  long inputLen=0;  byte[] buf=new byte[8 * 1024];  while ((read=is.read(buf)) > 0) {    inputLen+=read;    dos.write(buf,0,read);  }  dos.close();  byte[] data=bos.toByteArray();  ExtZipEntry entry=new ExtZipEntry(name);  entry.setMethod(ZipEntry.DEFLATED);  entry.setSize(inputLen);  entry.setCompressedSize(data.length + 28);  entry.setTime((new java.util.Date()).getTime());  entry.initEncryptedEntry();  zipOS.putNextEntry(entry);  zipOS.writeBytes(encrypter.getSalt());  zipOS.writeBytes(encrypter.getPwVerification());  encrypter.encrypt(data,data.length);  zipOS.writeBytes(data,0,data.length);  byte[] finalAuthentication=encrypter.getFinalAuthentication();  if (LOG.isLoggable(Level.FINE)) {    LOG.fine("finalAuthentication=" + Arrays.toString(finalAuthentication) + " at pos="+ zipOS.getWritten());  }  zipOS.writeBytes(finalAuthentication);}  }
class C{  public void startMonitoring(Context context,Handler target){  mTarget=target;  mContext=context;}  }
class C{  public static BigdataSailRepository open(){  final Properties props=getProperties(tmpJournal());  return open(props);}  }
class C{  public DataIndexRepository(String repository) throws JAXBException {  _jc=JAXBContext.newInstance("org.jetbrains.idea.maven.services.nexus",getClass().getClassLoader());  _jaxbDispatcher=new JAXBDispatcher(_jc);  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment("http://repository.sonatype.org/service/local/");  _matrixParamSet=_uriBuilder.addPathSegment("data_index/{repository}");  _templateAndMatrixParameterValues=new HashMap<String,Object>();  _templateAndMatrixParameterValues.put("repository",repository);}  }
class C{  public void freeHessian2Output(Hessian2Output out){  if (out == null)   return;  out.free();  _freeHessian2Output.free(out);}  }
class C{  private static void addToSystemClassLoader() throws MatlabConnectionException {  URL matlabcontrolLocation=MatlabClassLoaderHelper.class.getProtectionDomain().getCodeSource().getLocation();  try {    URLClassLoader systemClassLoader=(URLClassLoader)ClassLoader.getSystemClassLoader();    Class<URLClassLoader> classLoaderClass=URLClassLoader.class;    Method method=classLoaderClass.getDeclaredMethod("addURL",URL.class);    method.setAccessible(true);    method.invoke(systemClassLoader,matlabcontrolLocation);  } catch (  Exception e) {    throw new MatlabConnectionException("Unable to add matlabcontrol to system class loader",e);  }}  }
class C{  public FieldProposalInfo(IJavaProject project,CompletionProposal proposal){  super(project,proposal);}  }
class C{  public boolean isLayerName(final String name){  return layerNames.containsKey(name);}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,Vector3 normal,double eccentricity,OrbitDirection direction){  super();  mFocalPoint=focalPoint;  mPeriapsis=periapsis;  mNormal=normal.clone();  mEccentricity=eccentricity;  mDirection=direction;  mAngle=360.0;}  }
class C{  @Override public void think(){  Network network=getShortTermMemory();  if (!isEnabled()) {    List<Vertex> activeMemory=this.bot.memory().getActiveMemory();    Iterator<Vertex> vertices=activeMemory.iterator();    Vertex context=network.createVertex(Primitive.NULL);    while (vertices.hasNext()) {      Vertex vertex=network.createVertex(vertices.next());      if (!vertex.isPrimitive() && !vertex.hasRelationship(Primitive.INSTANTIATION,Primitive.CONTEXT)) {        vertex.addRelationship(Primitive.CONTEXT,context);      }    }    return;  }  long startTime=System.currentTimeMillis();  long processTime=getProcessingTime();  age(network);  List<Vertex> activeMemory=this.bot.memory().getActiveMemory();  Iterator<Vertex> vertices=activeMemory.iterator();  Vertex context=network.createTimestamp();  context.addRelationship(Primitive.INSTANTIATION,Primitive.CONTEXT);  while (vertices.hasNext()) {    Vertex vertex=network.createVertex(vertices.next());    if (!vertex.isPrimitive() && !vertex.hasRelationship(Primitive.INSTANTIATION,Primitive.CONTEXT)) {      vertex.addRelationship(Primitive.CONTEXT,context);      context.addRelationship(Primitive.CONTEXT,vertex);    }  }  Vertex lastContext=getLastContext(network);  if (lastContext != null) {    lastContext.addRelationship(network.createVertex(Primitive.NEXT),context);    context.addRelationship(network.createVertex(Primitive.PREVIOUS),lastContext);  }  setLastContext(context);  vertices=activeMemory.iterator();  Set<Vertex> recursiveSet=new HashSet<Vertex>();  Set<Vertex> breadthSet=new HashSet<Vertex>();  while (vertices.hasNext()) {    breadthSet.add(network.createVertex(vertices.next()));  }  int levels=getTraversalLevel();  while ((levels > 0) && (recursiveSet.size() < TRAVERSAL_LIMIT)) {    Set<Vertex> nextLevelBreadthSet=new HashSet<Vertex>();    Iterator<Vertex> iterator=breadthSet.iterator();    boolean maxTime=false;    while (iterator.hasNext() && (recursiveSet.size() < TRAVERSAL_LIMIT)) {      think(iterator.next(),levels,recursiveSet,nextLevelBreadthSet);      long currentTime=System.currentTimeMillis();      if ((currentTime - startTime) > processTime) {        maxTime=true;        log("Process time limit reached",Level.INFO,processTime,recursiveSet.size());        break;      }    }    if (maxTime) {      break;    }    breadthSet=nextLevelBreadthSet;    levels--;  }  if (recursiveSet.size() >= TRAVERSAL_LIMIT) {    log("Traversal limit reached",Level.FINE,recursiveSet.size());  }}  }
class C{  public static Map<String,Object> addOrderItemShipGroup(DispatchContext dctx,Map<String,Object> context){  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  String orderId=(String)context.get("orderId");  String mainErrorMessage=UtilProperties.getMessage(resource_error,"OrderUnableToAddOISGToOrder",locale);  Map<String,Object> createOrderItemShipGroupMap=null;  try {    createOrderItemShipGroupMap=dctx.makeValidContext("createOrderItemShipGroup","IN",context);  } catch (  GenericServiceException gse) {    String errMsg=mainErrorMessage + gse.toString();    return ServiceUtil.returnError(errMsg);  }  try {    String carrierPartyId=(String)context.get("carrierPartyId");    GenericValue carrierRole=EntityQuery.use(delegator).from("PartyRole").where("partyId",carrierPartyId,"roleTypeId","CARRIER").cache().queryOne();    if (UtilValidate.isNotEmpty(carrierPartyId) && UtilValidate.isEmpty(carrierRole)) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderCartShipGroupPartyCarrierNotFound",UtilMisc.toMap("partyId",carrierPartyId),locale);      return ServiceUtil.returnError(errMsg);    }    String shipmentMethodTypeId=(String)context.get("shipmentMethodTypeId");    if (UtilValidate.isNotEmpty(shipmentMethodTypeId)) {      if (shipmentMethodTypeId.indexOf("_o_") == -1) {        GenericValue shipmentMethod=EntityQuery.use(delegator).from("CarrierShipmentMethod").where("partyId",carrierPartyId,"roleTypeId","CARRIER","shipmentMethodTypeId",shipmentMethodTypeId).cache().queryOne();        if (UtilValidate.isEmpty(shipmentMethod)) {          String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderCartShipGroupShipmentMethodNotFound",UtilMisc.toMap("shipmentMethodTypeId",shipmentMethodTypeId),locale);          return ServiceUtil.returnError(errMsg);        }      } else {        String[] carrierShipmentMethod=shipmentMethodTypeId.split("_o_");        if (carrierShipmentMethod.length == 2) {          shipmentMethodTypeId=carrierShipmentMethod[0];          carrierPartyId=carrierShipmentMethod[1];        }        context.put("carrierPartyId",carrierPartyId);        context.put("shipmentMethodTypeId",shipmentMethodTypeId);      }    }    List<GenericValue> oisgs=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId).orderBy("shipGroupSeqId DESC").queryList();    if (UtilValidate.isNotEmpty(oisgs)) {      GenericValue oisg=EntityUtil.getFirst(oisgs);      if (UtilValidate.isEmpty(carrierPartyId) && UtilValidate.isEmpty(shipmentMethodTypeId)) {        createOrderItemShipGroupMap.put("shipmentMethodTypeId",oisg.get("shipmentMethodTypeId"));        createOrderItemShipGroupMap.put("carrierPartyId",oisg.get("carrierPartyId"));        createOrderItemShipGroupMap.put("carrierRoleTypeId",oisg.get("carrierRoleTypeId"));        createOrderItemShipGroupMap.put("contactMechId",oisg.get("contactMechId"));      }    }  } catch (  GenericEntityException gee) {    String errMsg=mainErrorMessage + gee.toString();    return ServiceUtil.returnError(errMsg);  }  if (UtilValidate.isEmpty(createOrderItemShipGroupMap.get("maySplit"))) {    createOrderItemShipGroupMap.put("maySplit","N");  }  if (UtilValidate.isEmpty(createOrderItemShipGroupMap.get("isGift"))) {    createOrderItemShipGroupMap.put("isGift","N");  }  try {    result=dctx.getDispatcher().runSync("createOrderItemShipGroup",createOrderItemShipGroupMap);  } catch (  GenericServiceException gse) {    String errMsg=mainErrorMessage + gse.toString();    return ServiceUtil.returnError(errMsg);  }  if (ServiceUtil.isError(result)) {    String errMsg=UtilProperties.getMessage(resource,mainErrorMessage + result.get("errorMessage"),locale);    return ServiceUtil.returnError(errMsg);  }  return result;}  }
class C{  public GanttRenderer(){  super();  setIncludeBaseInRange(false);  this.completePaint=Color.green;  this.incompletePaint=Color.red;  this.startPercent=0.35;  this.endPercent=0.65;}  }
class C{  @Override public Long[] batchInsert(List<Map<String,Object>> datas,String tabNameSuffix){  if (logger.isDebugEnabled()) {    logger.debug("batchInsert(List<Map<String,Object>>, String) - start");  }  validate(datas);  Map<String,Object> cols=this.merge(datas);  Long[] returnLongArray=batchInsert(new ArrayList(cols.keySet()),datas,tabNameSuffix);  if (logger.isDebugEnabled()) {    logger.debug("batchInsert(List<Map<String,Object>>, String) - end");  }  return returnLongArray;}  }
class C{  public void checkLanguageSupported(String languageCode) throws PropertiesImportException {  Query q=ds.createNamedQuery("SupportedLanguage.findAll");  List<SupportedLanguage> languageList=ParameterizedTypes.list(q.getResultList(),SupportedLanguage.class);  for (  SupportedLanguage language : languageList) {    if (language.getLanguageISOCode().equalsIgnoreCase(languageCode)) {      return;    }  }  PropertiesImportException propertiesImportException=new PropertiesImportException(PropertiesImportException.Reason.LANGUAGE_NOT_SUPPORTED);  logger.logWarn(Log4jLogger.SYSTEM_LOG,propertiesImportException,LogMessageIdentifier.WARN_LANGUAGE_NOT_SUPPORTED_FOR_IMPORT_PROPERTIES);  throw propertiesImportException;}  }
class C{  public GeneralName(int tag,byte[] name) throws IOException {  if (name == null) {    throw new NullPointerException("name == null");  }  if ((tag < 0) || (tag > 8)) {    throw new IOException("GeneralName: unknown tag: " + tag);  }  this.tag=tag;  this.name_encoding=new byte[name.length];  System.arraycopy(name,0,this.name_encoding,0,name.length);  this.name=nameASN1[tag].decode(this.name_encoding);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public static String itemNameToDisplayName(final String name){  if (name != null) {    if (name.indexOf('_') != -1) {      return name.replace('_',' ');    }  }  return name;}  }
class C{  public static Object execute(ExecutablePool pool,LocalRegion region,Object key){  AbstractOp op=new GetEntryOpImpl(region,key);  return pool.execute(op);}  }
class C{  public Matrix(int m,int n,double s){  this.m=m;  this.n=n;  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s;    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", simpleName: ");  result.append(simpleName);  result.append(')');  return result.toString();}  }
class C{  private void parseCancelNestedActions(Attributes attributes){  if (md.actions != null) {    md.modeUsage=getModeUsage(attributes);    md.actions.setCancelNestedActions(true);  } else   md.modeUsage=null;  if (md.attributeActions != null) {    md.attributeActions.setCancelNestedActions(true);  }}  }
class C{  public byte[] toByteArray(){  return null;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final int[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  @Override String generateHashCode(ValueBuilder valueBuilder,MethodSpec.Builder methodBuilder){  String hashCodeVarName=varName() + "HashCode";  methodBuilder.addStatement("int $N = 1",hashCodeVarName);  beginLoop(methodBuilder);  methodBuilder.addStatement("$N *= 1000003",hashCodeVarName);  String elemHashCode=elemGenerator.generateArrayElementHashCode(self(),valueBuilder,methodBuilder);  methodBuilder.addStatement("$N ^= $N",hashCodeVarName,elemHashCode);  methodBuilder.endControlFlow();  return hashCodeVarName;}  }
class C{  public UpdateDispatchFutureWait(){  isCompleted=true;}  }
class C{  public boolean satisfiedBasedOnChildrenValues(boolean[] childValues){  boolean result=!this.isSome;  if (this.isSome) {    for (int i=0; i < childValues.length; i++) {      result=result || childValues[i];    }  } else {    for (int i=0; i < childValues.length; i++) {      result=result && childValues[i];    }  }  return result;}  }
class C{  public String addIndex(String[] indexProperties,Class[] coercionTypes){  String uuid=UuidGenerator.generate();  items.put(new TableLookupIndexReqKey(uuid),new QueryPlanIndexItem(indexProperties,coercionTypes,null,null,false));  return uuid;}  }
class C{  public void repaint(Layer layer){  setBufferDirty(true);  if (logger.isLoggable(Level.FINER)) {    String name=layer.getName();    logger.finer((name == null ? layer.getClass().getName() : name) + " - wants a repaint()");  }  getMapBeanRepaintPolicy().repaint(layer);}  }
class C{  public int delete(){  return DELETE().deleteByExample(this.example);}  }
class C{  public LetterOrNumberValidator(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  super(context,resourceId);  setCaseSensitivity(caseSensitivity);  allowSpaces(allowSpaces);  setAllowedCharacters(allowedCharacters);}  }
class C{  public static boolean isPartitioned(Table table){  return table.getPartitionKeys().size() > 0;}  }
class C{  public DViewKeyPair(JFrame parent,String title,Dialog.ModalityType modality,PrivateKey privateKey,X509Certificate[] certificateChain,Provider provider){  super(parent,title,modality);  this.privateKey=privateKey;  this.certificateChain=certificateChain;  this.provider=provider;  initComponents();}  }
class C{  public MutableFloat(final float value){  super();  this.value=value;}  }
class C{  @Override public UpdateResponse optimize() throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.optimize();  return ur;}  }
class C{  public CommStream(String port){  m_sPort=port;  m_PortIdPrinter=null;  m_CommPortPrinter=null;  m_out=null;  m_in=null;}  }
class C{  public Effect(){  subeffects=new ArrayList<BasicEffect>();  fullyGrounded=true;  randomsToGenerate=new HashSet<String>();  valueTable=new HashMap<String,Map<Value,Double>>();}  }
class C{  private String convertTagsToTextProperty(Map<String,String> tags){  StringBuilder stringBuilder=new StringBuilder();  String lineSep=System.getProperty("line.separator");  for (  Entry<String,String> tagKeyValuePair : tags.entrySet()) {    stringBuilder.append("- ").append(tagKeyValuePair.getKey()).append(": ").append(tagKeyValuePair.getValue()).append(lineSep);  }  return stringBuilder.toString();}  }
class C{  public void releaseSavepoint(String name){  if (savepoints == null) {    throw DbException.get(ErrorCode.SAVEPOINT_IS_INVALID_1,name);  }  final Savepoint savepoint=savepoints.get(name);  if (savepoint == null) {    throw DbException.get(ErrorCode.SAVEPOINT_IS_INVALID_1,name);  }  if (transaction != null) {    transaction.rollbackToSavepoint(name);  }  savepoints.remove(name);}  }
class C{  public boolean isLast(){  return pos == lcText.length - 1;}  }
class C{  public Boolean isExclusive(){  return exclusive;}  }
class C{  @Override public void done(){  super.done();  if (mNumTestsExpected > mNumTestsRun) {    handleTestRunFailed(String.format("Test run incomplete. Expected %d tests, received %d",mNumTestsExpected,mNumTestsRun));  } else   if (mTestRunInProgress) {    handleTestRunFailed("No test results");  }}  }
class C{  @Override public DocList doSimpleQuery(String q,SolrQueryRequest req,int start,int limit) throws IOException {  return SolrPluginUtils.doSimpleQuery(q,req,start,limit);}  }
class C{  public static boolean isTrustedSite(URL url){  return NTLMAuthCallback.isTrustedSite(url);}  }
class C{  public int eventsLeftInBuffer(){  if (queue == null || queue.size() == 0) {    return 0;  } else {    return this.queue.size() - this.nextEventIndex;  }}  }
class C{  public void flush() throws IOException {  if (output != null) {    refreshBuffer();  }}  }
class C{  public BinaryBitmap crop(int left,int top,int width,int height){  LuminanceSource newSource=binarizer.getLuminanceSource().crop(left,top,width,height);  return new BinaryBitmap(binarizer.createBinarizer(newSource));}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public LeftIndexedPowerLawMultiSegmentBipartiteGraph(int maxNumSegments,int maxNumEdgesPerSegment,int expectedNumLeftNodes,int expectedMaxLeftDegree,double leftPowerLawExponent,int expectedNumRightNodes,EdgeTypeMask edgeTypeMask,StatsReceiver statsReceiver){  super(maxNumSegments,maxNumEdgesPerSegment,new LeftIndexedPowerLawSegmentProvider(expectedNumLeftNodes,expectedMaxLeftDegree,leftPowerLawExponent,expectedNumRightNodes,edgeTypeMask,statsReceiver),new MultiSegmentReaderAccessibleInfoProvider<LeftIndexedBipartiteGraphSegment>(maxNumSegments,maxNumEdgesPerSegment),statsReceiver);}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public synchronized void kill(){  _loadQueue.addLast(KILL_SWITCH);  notifyAll();}  }
class C{  public List superInterfaces(){  return internalSuperInterfaces();}  }
class C{  public static Map<String,String> mergeProps(Map<String,String> defaultProps,Map<String,String> overrideProps){  Map<String,String> mergedProps=new HashMap<String,String>(defaultProps);  for (  Map.Entry<String,String> entry : overrideProps.entrySet()) {    mergedProps.put(entry.getKey(),entry.getValue());  }  return mergedProps;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.516 -0500",hash_original_method="B6A1CB3240895E2E2F127D1796BCAECF",hash_generated_method="A30ADD53DA444FC89EBE3A6591604ECF") protected void flushCacheWithAppend(byte bufferToAppend[],int off,int len) throws IOException {  this.out.writeLine(Integer.toHexString(this.cachePosition + len));  this.out.write(this.cache,0,this.cachePosition);  this.out.write(bufferToAppend,off,len);  this.out.writeLine("");  this.cachePosition=0;}  }
class C{  public void not(){  final long[] theBits=this.bits;  for (int i=theBits.length; --i >= 0; )   theBits[i]=~theBits[i];}  }
class C{  public Gorge(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.401 -0500",hash_original_method="A04E73224B607EFF8F851CD080EF29BA",hash_generated_method="5CE2B7BA080B12D1AE1BE498248A895F") public void forgetNetwork(int netId){  if (netId < 0) {    return;  }  mAsyncChannel.sendMessage(CMD_FORGET_NETWORK,netId);}  }
class C{  public void writeField(final String name,String value) throws java.io.IOException {  if (name == null) {    throw new IllegalArgumentException("Name cannot be null or empty.");  }  if (value == null) {    value="";  }  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(NEWLINE);  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"");  out.writeBytes(NEWLINE);  out.writeBytes(NEWLINE);  out.writeBytes(value);  out.writeBytes(NEWLINE);  out.flush();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.371 -0500",hash_original_method="46554DD4C02B03BE2AD03A5664655738",hash_generated_method="77899FF17D532C45A88C3A8DA92B38FA") public static int toLowerCase(int codePoint){  if ('A' <= codePoint && codePoint <= 'Z') {    return (char)(codePoint + ('a' - 'A'));  }  if (codePoint < 192) {    return codePoint;  }  return toLowerCaseImpl(codePoint);}  }
class C{  public void handleGatewayReceiverCreate(GatewayReceiver recv) throws ManagementException {  if (!isServiceInitialised("handleGatewayReceiverCreate")) {    return;  }  if (!recv.isManualStart()) {    return;  }  createGatewayReceiverMBean(recv);}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof IHypercube) {    IHypercube ihc=(IHypercube)o;    if (ihc.dimensionality() != dimension) {      return false;    }    for (int i=1; i <= dimension; i++) {      double x=ihc.getLeft(i);      if (!FloatingPoint.same(x,lows[i - 1]))       return false;      x=ihc.getRight(i);      if (!FloatingPoint.same(x,highs[i - 1]))       return false;    }    return true;  }  return false;}  }
class C{  public ConvolveFilter(float[] matrix){  this(new Kernel(3,3,matrix));}  }
class C{  public boolean isConnected(short nodeId){  NodeConnection nc=connections.get(nodeId);  return (nc != null && nc.state == NodeConnectionState.CONNECTED);}  }
class C{  private static CacheConfiguration<Long,Person> cacheConfiguration(){  CacheConfiguration<Long,Person> cfg=new CacheConfiguration<>(CACHE_NAME);  CacheJdbcPojoStoreExampleFactory storeFactory=new CacheJdbcPojoStoreExampleFactory();  storeFactory.setDialect(new H2Dialect());  JdbcType jdbcType=new JdbcType();  jdbcType.setCacheName(CACHE_NAME);  jdbcType.setDatabaseSchema("PUBLIC");  jdbcType.setDatabaseTable("PERSON");  jdbcType.setKeyType("java.lang.Long");  jdbcType.setKeyFields(new JdbcTypeField(Types.BIGINT,"ID",Long.class,"id"));  jdbcType.setValueType("org.apache.ignite.examples.model.Person");  jdbcType.setValueFields(new JdbcTypeField(Types.BIGINT,"ID",Long.class,"id"),new JdbcTypeField(Types.VARCHAR,"FIRST_NAME",String.class,"firstName"),new JdbcTypeField(Types.VARCHAR,"LAST_NAME",String.class,"lastName"));  storeFactory.setTypes(jdbcType);  cfg.setCacheStoreFactory(storeFactory);  cfg.setAtomicityMode(TRANSACTIONAL);  cfg.setReadThrough(true);  cfg.setWriteThrough(true);  return cfg;}  }
class C{  public float[] toArray(float[] floats){  if (floats == null) {    floats=new float[3];  }  floats[0]=x;  floats[1]=y;  floats[2]=z;  return floats;}  }
class C{  public void insert(INode n){  table.put(n,n);}  }
class C{  public AffineTransformation scale(double xScale,double yScale){  compose(scaleInstance(xScale,yScale));  return this;}  }
class C{  private void writeServiceContext(ServiceContext ctx,BinaryRawWriterEx writer){  writer.writeString(ctx.name());  writer.writeUuid(ctx.executionId());  writer.writeBoolean(ctx.isCancelled());  writer.writeString(ctx.cacheName());  writer.writeObject(ctx.affinityKey());}  }
class C{  public static Number pow(Number a,Number b){  return Math.pow(a.doubleValue(),b.doubleValue());}  }
class C{  public void warn(Throwable throwable,String msg,Object arg0,Object arg1){  innerLog(Level.WARNING,throwable,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public boolean valid(){  return pos < len;}  }
class C{  public void startRotate(float startAngle,float dAngle){  startRotate(startAngle,dAngle,DEFAULT_DURATION);}  }
class C{  @org.junit.Test public void testParagraphs(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("I am tall. Am I tall?");  String response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"you are tall");  text.input("Hello. What is your name?");  response=waitForOutput(output);  assertKeyword(response,"My name is Test");  bot.shutdown();}  }
class C{  protected static void register(Class<?> parent,Class<?> clazz){  Entry e=data.get(parent);  if (e == null) {    data.put(parent,e=new Entry());  }  final String cname=clazz.getCanonicalName();  e.addHit(cname,clazz);  if (clazz.isAnnotationPresent(Alias.class)) {    Alias aliases=clazz.getAnnotation(Alias.class);    for (    String alias : aliases.value()) {      e.addAlias(alias,cname);    }  }}  }
class C{  public RequestHandle patch(String url,ResponseHandlerInterface responseHandler){  return patch(null,url,null,responseHandler);}  }
class C{  public static final double[] timesPlusTimesEquals(final double[] v1,final double s1,final double[] v2,final double s2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  for (int i=0; i < v1.length; i++) {    v1[i]=v1[i] * s1 + v2[i] * s2;  }  return v1;}  }
class C{  public List<SearchResultResourceRep> performSearch(Map<String,Object> params){  UriBuilder builder=client.uriBuilder(getSearchUrl());  for (  Map.Entry<String,Object> entry : params.entrySet()) {    builder.queryParam(entry.getKey(),entry.getValue());  }  SearchResults searchResults=client.getURI(SearchResults.class,builder.build());  List<SearchResultResourceRep> results=searchResults.getResource();  if (results == null) {    results=new ArrayList<SearchResultResourceRep>();  }  return results;}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  private static int createLines(final INaviCodeNode node,final List<Pair<String,List<CStyleRunData>>> lines,final HashMap<Pair<String,List<CStyleRunData>>,ArrayList<CommentContainer>> commentsToLineAssociation,final ZyGraphViewSettings graphSettings,final INodeModifier modifier){  int maxLineWidth=0;  final Map<INaviInstruction,INaviFunction> instructionToFunctionReferences=CReferenceFinder.getCodeReferenceMap(node);  for (  final INaviInstruction instruction : node.getInstructions()) {    final Pair<String,List<CStyleRunData>> zyLineContent=ZyInstructionBuilder.buildInstructionLine(instruction,graphSettings,modifier);    final ArrayList<CommentContainer> commentLineContainerList=new ArrayList<CommentContainer>();    final List<IComment> localComments=node.getComments().getLocalInstructionComment(instruction);    if (localComments != null) {      for (      final IComment localComment : localComments) {        commentLineContainerList.add(new CommentContainer(localComment));      }    }    final List<IComment> globalComments=instruction.getGlobalComment();    if (globalComments != null) {      for (      final IComment globalComment : globalComments) {        commentLineContainerList.add(new CommentContainer(globalComment));      }    }    final List<IComment> functionComments=instructionToFunctionReferences.get(instruction) == null ? null : instructionToFunctionReferences.get(instruction).getGlobalComment();    if (functionComments != null) {      for (      final IComment functionComment : functionComments) {        commentLineContainerList.add(new CommentContainer(functionComment));      }    }    commentsToLineAssociation.put(zyLineContent,commentLineContainerList);    final int lineWidth=zyLineContent.first().length();    if (lineWidth > maxLineWidth) {      maxLineWidth=lineWidth;    }    lines.add(zyLineContent);  }  return maxLineWidth;}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public NamedElement unwrap(ISelection selection){  IStructuredSelection structuredSelection=(IStructuredSelection)selection;  EObject selectedElement=(EObject)structuredSelection.getFirstElement();  if (selectedElement instanceof FeatureCall) {    return findElementForFakeInStatechart((NamedElement)((FeatureCall)selectedElement).getFeature());  } else   if (selectedElement instanceof ElementReferenceExpression) {    return findElementForFakeInStatechart((NamedElement)((ElementReferenceExpression)selectedElement).getReference());  }  if (selectedElement instanceof NamedElement)   return findElementForFakeInStatechart((NamedElement)selectedElement);  return null;}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  private void writeAttributes(OutputNode node) throws Exception {  NodeMap<OutputNode> map=node.getAttributes();  for (  String name : map) {    OutputNode entry=map.get(name);    String value=entry.getValue();    String prefix=entry.getPrefix(verbose);    writer.writeAttribute(name,value,prefix);  }  active.remove(node);}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source,boolean ignoreSpace){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,ignoreSpace);}  }
class C{  public static void main(String[] args){  (new Media()).run(args);}  }
class C{  public static CompilerError parseMessage(String message){  final StringBuilder buffer;  final StringTokenizer tokens=new StringTokenizer(message,":");  boolean isError=true;  try {    String file=tokens.nextToken();    if (file.length() == 1) {      file=new StringBuilder(file).append(":").append(tokens.nextToken()).toString();    }    final int line=Integer.parseInt(tokens.nextToken());    buffer=new StringBuilder();    String description=tokens.nextToken(EOL).substring(2);    if (description.startsWith(ERROR_PREFIX)) {      description=description.substring(ERROR_PREFIX.length());    } else     if (description.startsWith(WARNING_PREFIX)) {      isError=false;      description=description.substring(WARNING_PREFIX.length());    }    buffer.append(description);    final String context=tokens.nextToken(EOL);    final String pointer=tokens.nextToken(EOL);    final int startColumn=pointer.indexOf("^");    int endColumn=context == null ? startColumn : context.indexOf(" ",startColumn);    if (endColumn == -1) {      endColumn=context.length();    }    if (tokens.hasMoreTokens()) {      do {        buffer.append(EOL).append(tokens.nextToken(EOL));      } while (tokens.hasMoreTokens());    }    return new CompilerError(file,isError,line,startColumn,line,endColumn,buffer.toString());  } catch (  NoSuchElementException e) {    return new CompilerError("no more tokens - could not parse error message: " + message,isError);  }catch (  NumberFormatException e) {    return new CompilerError("could not parse error message: " + message,isError);  }catch (  Exception e) {    return new CompilerError("could not parse error message: " + message,isError);  }}  }
class C{  public EmptyCentralView(final String id,final NavigationContext navigationContext){  super(id,0l,navigationContext);}  }
class C{  private void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public Observable<Integer> exerciseConcatMap(Observable<Movies> movies){  return movies.<Integer>concatMap(null);}  }
class C{  protected boolean scrollPageDown(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  final int innerHeight=getInnerHeight(widget);  final int bottom=widget.getScrollY() + innerHeight + innerHeight;  int bottomLine=layout.getLineForVertical(bottom);  if (bottomLine <= layout.getLineCount() - 1) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(bottomLine + 1) - innerHeight);    return true;  }  return false;}  }
class C{  public boolean equals(Object a,Object b){  if (a == b) {    return true;  } else   if (a == null || b == null) {    return false;  }  long la=((SpatialKey)a).getId();  long lb=((SpatialKey)b).getId();  return la == lb;}  }
class C{  public String toString(){  return "[" + alpha + ","+ beta+ "]";}  }
class C{  Invokers(MethodType targetType){  this.targetType=targetType;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  Enumeration<Option> enm=super.listOptions();  while (enm.hasMoreElements())   result.add(enm.nextElement());  result.addElement(new Option("\t" + stopwordsTipText() + "\n"+ "\t(default: none)","stopwords",1,"-stopwords <classname + options>"));  return result.elements();}  }
class C{  private void compress(){  ListIterator<OnLineStatistics> listIter=windows.listIterator();  double lastSizeSeen=-Double.MAX_VALUE;  int lastSizeCount=0;  while (listIter.hasNext()) {    OnLineStatistics window=listIter.next();    double n=window.getSumOfWeights();    if (n == lastSizeSeen) {      if (++lastSizeCount > M) {        listIter.previous();        window.add(listIter.previous());        listIter.remove();        if (listIter.hasNext())         listIter.next();        lastSizeSeen=window.getSumOfWeights();        lastSizeCount=1;      }    } else {      lastSizeSeen=n;      lastSizeCount=1;    }  }}  }
class C{  private void addSlotAnnotations(Map<AnnotationFS,List<FeatureStructure>> linkFSesPerAnno,Feature aLinkeF){  for (  AnnotationFS anno : linkFSesPerAnno.keySet()) {    ArrayFS array=anno.getCAS().createArrayFS(linkFSesPerAnno.get(anno).size());    array.copyFromArray(linkFSesPerAnno.get(anno).toArray(new FeatureStructure[linkFSesPerAnno.get(anno).size()]),0,0,linkFSesPerAnno.get(anno).size());    anno.setFeatureValue(aLinkeF,array);    anno.getCAS().addFsToIndexes(anno);  }}  }
class C{  @Uninterruptible @NoInline private void recordFramesUninterruptible(RVMThread stackTraceThread){  int stackFrameCount=0;  Address fp;  Address ip;  if (stackTraceThread == RVMThread.getCurrentThread()) {    fp=Magic.getFramePointer();  } else {    AbstractRegisters contextRegisters=stackTraceThread.getContextRegisters();    fp=contextRegisters.getInnermostFramePointer();  }  ip=Magic.getReturnAddress(fp);  fp=Magic.getCallerFramePointer(fp);  while (Magic.getCallerFramePointer(fp).NE(StackFrameLayout.getStackFrameSentinelFP())) {    int compiledMethodId=Magic.getCompiledMethodID(fp);    compiledMethods[stackFrameCount]=compiledMethodId;    if (compiledMethodId != StackFrameLayout.getInvisibleMethodID()) {      CompiledMethod compiledMethod=CompiledMethods.getCompiledMethod(compiledMethodId);      if (compiledMethod.getCompilerType() != CompiledMethod.TRAP) {        instructionOffsets[stackFrameCount]=compiledMethod.getInstructionOffset(ip).toInt();        if (compiledMethod.hasBridgeFromNativeAnnotation()) {          fp=RuntimeEntrypoints.unwindNativeStackFrame(fp);        }      } else {      }    } else {    }    stackFrameCount++;    ip=Magic.getReturnAddress(fp,stackTraceThread);    fp=Magic.getCallerFramePointer(fp);  }}  }
class C{  public void consume(String seq){  if (!matches(seq))   throw new IllegalStateException("Queue did not match expected sequence");  int len=seq.length();  if (len > remainingLength())   throw new IllegalStateException("Queue not long enough to consume sequence");  pos+=len;}  }
class C{  public boolean userCanCreateDir(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int parentDirMgrId=ISicresAdminDefsKeys.NULL_ID;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (dirId == ISicresAdminDefsKeys.NULL_ID || dirId == ISicresAdminDefsKeys.ROOT_DIR_ID)     parentDirMgrId=0; else     parentDirMgrId=this.getDirMgrId(dirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_CREATE,ISicresAdminDefsKeys.NULL_ID,parentDirMgrId,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public int hashCode(){  return (line << 16) | offset;}  }
class C{  public int index(float what){  for (int i=0; i < count; i++) {    if (data[i] == what) {      return i;    }  }  return -1;}  }
class C{  @SuppressWarnings("rawtypes") public static boolean saveAsMutipageTIFF(File file,List images,String extension,PerfilVO perfil){  return saveGeneric(file,images,extension,perfil);}  }
class C{  private void disableButtons(){  setArtyEnabled(0);  butDone.setEnabled(false);}  }
class C{  private JsonNode parseLanguageResource(Resource resource) throws IOException {  InputStream stream=resource.asStream();  if (stream == null)   return null;  try {    JsonNode tree=mapper.readTree(stream);    return tree;  }  finally {    stream.close();  }}  }
class C{  @Bean(name=CacheConstants.DOWNLOAD_ID_CACHE) public Cache downloadIdCache(){  return cacheManager().getDirectCache(CacheConstants.DOWNLOAD_ID_CACHE);}  }
class C{  protected boolean isDhcpPacket(Ethernet frame){  IPacket payload=frame.getPayload();  if (payload == null)   return false;  IPacket p2=payload.getPayload();  if (p2 == null)   return false;  IPacket p3=p2.getPayload();  if ((p3 != null) && (p3 instanceof DHCP))   return true;  return false;}  }
class C{  public XPathProcessorException(String message){  super(message);}  }
class C{  public EqualsBuilder append(final boolean lhs,final boolean rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  public void loadDefaults(){  scraperMetadataConfig=Globals.settings.getTvShowScraperMetadataConfig();  metadataScraper=TvShowList.getInstance().getDefaultMediaScraper();  artworkScrapers.addAll(TvShowList.getInstance().getDefaultArtworkScrapers());}  }
class C{  public int meanAllocation(){  if (m_slotAllocations == 0)   return 0;  return (int)(m_sizeAllocations / m_slotAllocations);}  }
class C{  public AboveVisitor(Mask mask,RegionFunction function,int baseY){  super(mask,function);  checkNotNull(mask);  this.baseY=baseY;  Collection<Vector> directions=getDirections();  directions.clear();  directions.add(new Vector(1,0,0));  directions.add(new Vector(-1,0,0));  directions.add(new Vector(0,0,1));  directions.add(new Vector(0,0,-1));  directions.add(new Vector(0,1,0));  directions.add(new Vector(0,-1,0));}  }
class C{  public static boolean isProcessConnectedToResultPort(final Process process){  if (process == null) {    throw new IllegalArgumentException("process must not be null!");  }  return process.getRootOperator().getSubprocess(0).getInnerSinks().getNumberOfConnectedPorts() > 0;}  }
class C{  public FastBooleanBuffer(int size){  if (size < 0) {    throw new IllegalArgumentException("Invalid size: " + size);  }  this.minChunkLen=size;}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  return new Video(title,url,duration);}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  @Override public void updateAsciiStream(String columnLabel,InputStream x) throws SQLException {  updateAsciiStream(columnLabel,x,-1);}  }
class C{  public static String calculateImageRef(final IPath javaResourceParentPath,IPath imagePath){  IPath relativePath=imagePath.makeRelativeTo(javaResourceParentPath);  int parentCount=0;  while (parentCount < relativePath.segmentCount() && "..".equals(relativePath.segment(parentCount))) {    parentCount++;  }  String path;  if (parentCount > 1) {    path="{@docRoot}/" + imagePath;  } else {    path=relativePath.toString();  }  return path;}  }
class C{  public void clearContainerData(){  getContainerDataSource().removeAllItems();}  }
class C{  public final boolean readInstance(Reader reader) throws IOException {  StreamTokenizer tokenizer=new StreamTokenizer(reader);  initTokenizer(tokenizer);  return getInstance(tokenizer,false);}  }
class C{  public boolean subclassOf(CtClass superclass){  return false;}  }
class C{  public static void serializeGroupFeaturesReply(List<OFGroupFeaturesStatsReply> groupFeaturesReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFGroupFeaturesStatsReply groupFeaturesReply=groupFeaturesReplies.get(0);  jGen.writeStringField("version",groupFeaturesReply.getVersion().toString());  jGen.writeFieldName("groupFeatures");  jGen.writeStartObject();  jGen.writeNumberField("capabilities",groupFeaturesReply.getCapabilities());  jGen.writeNumberField("maxGroupsAll",groupFeaturesReply.getMaxGroupsAll());  jGen.writeNumberField("maxGroupsSelect",groupFeaturesReply.getMaxGroupsSelect());  jGen.writeNumberField("maxGroupsIndirect",groupFeaturesReply.getMaxGroupsIndirect());  jGen.writeNumberField("maxGroupsFf",groupFeaturesReply.getMaxGroupsFf());  jGen.writeNumberField("actionsAll",groupFeaturesReply.getActionsAll());  jGen.writeNumberField("actionsSelect",groupFeaturesReply.getActionsSelect());  jGen.writeNumberField("actionsIndirect",groupFeaturesReply.getActionsIndirect());  jGen.writeNumberField("actionsFf",groupFeaturesReply.getActionsFf());  jGen.writeEndObject();}  }
class C{  public <T>void registerServer(Class<T> publishedApi,Object provider){  this.partitions[0].register(provider,objectSerializer,publishedApi);}  }
class C{  void migrateValueWithinYesList(Event event){  Object[] selObjects=yesList.getSelectedItems().toArray();  if (selObjects == null)   return;  int length=selObjects.length;  if (length == 0)   return;  int[] indices=yesList.getSelectedIndices();  boolean change=false;  Object source=event.getTarget();  if (source == bUp) {    for (int i=0; i < length; i++) {      int index=indices[i];      if (index == 0)       break;      ListElement selObject=(ListElement)yesModel.getElementAt(index);      ListElement newObject=(ListElement)yesModel.getElementAt(index - 1);      if (!selObject.isUpdateable() || !newObject.isUpdateable())       break;      yesModel.setElementAt(newObject,index);      yesModel.setElementAt(selObject,index - 1);      indices[i]=index - 1;      change=true;    }  } else   if (source == bDown) {    for (int i=length - 1; i >= 0; i--) {      int index=indices[i];      if (index >= yesModel.getSize() - 1)       break;      ListElement selObject=(ListElement)yesModel.getElementAt(index);      ListElement newObject=(ListElement)yesModel.getElementAt(index + 1);      if (!selObject.isUpdateable() || !newObject.isUpdateable())       break;      yesModel.setElementAt(newObject,index);      yesModel.setElementAt(selObject,index + 1);      yesList.setSelectedIndex(index + 1);      indices[i]=index + 1;      change=true;    }  }  if (change) {    yesList.setSelectedIndices(indices);    setIsChanged(true);    if (yesList.getSelectedItem() != null) {      AuFocus focus=new AuFocus(yesList.getSelectedItem());      Clients.response(focus);    }  }}  }
class C{  public void beginDraw(){}  }
class C{  public OpenIndexRequest indicesOptions(IndicesOptions indicesOptions){  this.indicesOptions=indicesOptions;  return this;}  }
class C{  InlineAllocation alloc1(){  return new InlineAllocation();}  }
class C{  public static int count(String str,char a){  int index=0;  int count=0;  return count(str,a,index,count);}  }
class C{  public void destroy(){  mListeners.clear();  mSpringSystem.deregisterSpring(this);}  }
class C{  @Override public Serializable executeAndExtract(PreparedStatement insert,SessionImplementor session) throws SQLException {  session.getTransactionCoordinator().getJdbcCoordinator().getResultSetReturn().executeUpdate(insert);  ResultSet rs=null;  try {    rs=insert.getGeneratedKeys();    return IdentifierGeneratorHelper.getGeneratedIdentity(rs,unquotedIdentifier(persister.getRootTableKeyColumnNames()[0]),persister.getIdentifierType());  }  finally {    if (rs != null) {      session.getTransactionCoordinator().getJdbcCoordinator().release(rs,insert);    }  }}  }
class C{  private boolean resourceAvailable(String name){  InputStream cfgStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(name);  if (cfgStream == null) {    log.error("Classpath resource not found: " + name);    return false;  }  try {    cfgStream.read();    return true;  } catch (  IOException e) {    log.error("Failed to read classpath resource: " + name,e);    return false;  } finally {    U.close(cfgStream,log);  }}  }
class C{  public static <T>T assertAndCast(Class<? extends T> clazz,Object o){  assertNotNull(clazz);  assertNotNull(o);  assertTrue(clazz.isInstance(o));  return clazz.cast(o);}  }
class C{  public int appendUntilBreak(final Iterator<Expression> it){  int count=0;  while (it.hasNext()) {    final Expression expr=it.next();    append(expr.getNormalized());    ++count;    if (expr.getBreakFlag()) {      break;    }  }  return count;}  }
class C{  void up(int nFrames) throws IncompatibleThreadStateException {  setCurrentFrameIndex(currentFrameIndex + nFrames);}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {}  }
class C{  protected void handleEndTag(TagElement tag){  Element elem=tag.getElement();  if (elem == dtd.body) {    inbody--;  } else   if (elem == dtd.title) {    intitle--;    seentitle=true;  } else   if (elem == dtd.head) {    inhead--;  } else   if (elem == dtd.style) {    instyle--;  } else   if (elem == dtd.script) {    inscript--;  }  if (debugFlag) {    debug("End Tag: " + tag.getHTMLTag() + " pos: "+ getCurrentPos());  }  callback.handleEndTag(tag.getHTMLTag(),getBlockStartPosition());}  }
class C{  @Override public boolean canWrite(Object obj,Throwable err){  return obj != null && err == null;}  }
class C{  public SSLHandshakeException(String reason){  super(reason);}  }
class C{  public static <T>LazyPBagX<T> fromIterable(Iterable<T> it){  return fromIterable(Reducers.toPBag(),it);}  }
class C{  private void calcContentRect(){  Insets contentInsets=getContentBorderInsets(tabPlacement);  Rectangle bounds=tabPane.getBounds();  Insets insets=tabPane.getInsets();  int cx;  int cy;  int cw;  int ch;switch (tabPlacement) {case LEFT:    cx=tabAreaRect.x + tabAreaRect.width + contentInsets.left;  cy=tabAreaRect.y + contentInsets.top;cw=bounds.width - insets.left - insets.right- tabAreaRect.width- contentInsets.left- contentInsets.right;ch=bounds.height - insets.top - insets.bottom- contentInsets.top- contentInsets.bottom;break;case RIGHT:cx=insets.left + contentInsets.left;cy=insets.top + contentInsets.top;cw=bounds.width - insets.left - insets.right- tabAreaRect.width- contentInsets.left- contentInsets.right;ch=bounds.height - insets.top - insets.bottom- contentInsets.top- contentInsets.bottom;break;case BOTTOM:cx=insets.left + contentInsets.left;cy=insets.top + contentInsets.top;cw=bounds.width - insets.left - insets.right- contentInsets.left- contentInsets.right;ch=bounds.height - insets.top - insets.bottom- tabAreaRect.height- contentInsets.top- contentInsets.bottom;break;case TOP:default :cx=tabAreaRect.x + contentInsets.left;cy=tabAreaRect.y + tabAreaRect.height + contentInsets.top;cw=bounds.width - insets.left - insets.right- contentInsets.left- contentInsets.right;ch=bounds.height - insets.top - insets.bottom- tabAreaRect.height- contentInsets.top- contentInsets.bottom;}contentRect.setBounds(cx,cy,cw,ch);}  }
class C{  public static double[] P(double Y[][],int x[]){  int L=x.length;  return P(Y,MLUtils.gen_indices(L),x);}  }
class C{  public static boolean canRemoveParentheses(Expression expression){  return canRemoveParentheses(expression,expression.getParent(),expression.getLocationInParent());}  }
class C{  public final CheckResult check(PGPPublicKey key){  if (store == null) {    throw new IllegalStateException("PublicKeyStore is required");  }  return check(key,0,true,trusted != null ? new HashSet<Fingerprint>() : null);}  }
class C{  public NumericNode numberNode(long v){  return LongNode.valueOf(v);}  }
class C{  public void launchSettings(){  Intent settingsIntent=new Intent(Settings.ACTION_SETTINGS);  context.startActivity(settingsIntent);}  }
class C{  public static NumericEntityEscaper outsideOf(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,false);}  }
class C{  public boolean isValidated(){  if (m_info == null)   return false;  return isValidated(m_info);}  }
class C{  private boolean filterByTaskName(Event e,String taskName){  String compareTaskName=taskName.toLowerCase();  if (e.getClass().equals(TaskEvent.class)) {    TaskEvent te=(TaskEvent)e;    return containsInTaskName(te.taskName(),te.taskClassName(),compareTaskName);  }  if (e.getClass().equals(JobEvent.class)) {    JobEvent je=(JobEvent)e;    return containsInTaskName(je.taskName(),je.taskName(),compareTaskName);  }  if (e.getClass().equals(DeploymentEvent.class)) {    DeploymentEvent de=(DeploymentEvent)e;    return de.alias().toLowerCase().contains(compareTaskName);  }  return true;}  }
class C{  private void awaitDone() throws IgniteInterruptedCheckedException {  U.await(doneLatch);}  }
class C{  public LogoutResponse generateResponseForTenant(String tenant,MessageSource messageSource,Locale locale){  LogoutResponse retval=null;  log.debug("generateResponseForTenant, tenant " + tenant);  Validate.notNull(this.validationResult);  if (this.validationResult.getResponseCode() == HttpServletResponse.SC_OK && this.logoutRequest != null) {    try {      Validate.notNull(this.idmAccessor);      Validate.notNull(this.getIssuerValue());      this.idmAccessor.setTenant(tenant);      String relyingParty=this.getIssuerValue();      Session session=this.getSession();      if (session != null) {        LogoutRequestData logoutRequestData=session.getLogoutRequestData();        if (logoutRequestData != null) {          relyingParty=logoutRequestData.getInitiator();        }      }      String sloEndpoint=this.idmAccessor.getSloForRelyingParty(relyingParty,OasisNames.HTTP_REDIRECT);      if (sloEndpoint == null) {        log.warn(String.format("SLO service for relying party %s does not exist.",relyingParty));        return null;      }      SamlService service=createSamlServiceForTenant(tenant,relyingParty);      retval=service.createSamlLogoutResponse(this.getID(),sloEndpoint,this.validationResult.getStatus(),this.validationResult.getSubstatus(),this.validationResult.getMessage(messageSource,locale));      if (getSessionId() != null) {        getSessionManager().remove(getSessionId());      }    } catch (    Exception e) {      log.debug("Caught exception while generating response " + e.toString() + ", will return 400");      this.validationResult=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest",null);      return null;    }  }  return retval;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void textLeft(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs),(float)(ys + hs));  draw();}  }
class C{  public boolean isJpegResource(){  return CommonActivityUtils.MIME_TYPE_JPEG.equals(mMimeType) || CommonActivityUtils.MIME_TYPE_JPG.equals(mMimeType);}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public synchronized void update(){  if (frames.size() > 1) {    animTime+=1;    if (animTime >= totalDuration) {      animTime=animTime % totalDuration;      currFrameIndex=0;    }    while (animTime > getFrame(currFrameIndex).endTime) {      currFrameIndex++;    }  }}  }
class C{  @Deprecated public void angularUnwatchGlobal(String name){  angularUnwatch(name,(String)null);}  }
class C{  public void forwardEvent(AppEvent event){  dispatch(event);}  }
class C{  public EtiaoConnector(ExecutableVertex<?,?,P> vertex,int oport){  this.vertex=vertex;  this.oport=oport;  this.state=new SharedState<P>(this);}  }
class C{  public boolean hasUuid(@NonNull Jedis jedis,@NonNull String playerName) throws ProcessingException {  try {    return jedis.hexists(RedisKeys.UUID_REPO.toString(),playerName.toLowerCase());  } catch (  Exception ex) {    throw new ProcessingException("There was an error checking if \"" + playerName + "\" has a UUID!",ex);  }}  }
class C{  private void animateScaling(Dimension n_pos,Dimension n_size,int frames){  if (frames == 0) {    System.out.println("the timer didn't end in time");    m_scaling=0;  } else {    if (m_scaling == 0) {      m_frameLimiter.start();      m_nViewPos.width=n_pos.width;      m_nViewPos.height=n_pos.height;      m_nViewSize.width=n_size.width;      m_nViewSize.height=n_size.height;      m_scaling=frames;    }    int s_w=(n_size.width - m_viewSize.width) / frames;    int s_h=(n_size.height - m_viewSize.height) / frames;    int p_w=(n_pos.width - m_viewPos.width) / frames;    int p_h=(n_pos.height - m_viewPos.height) / frames;    m_viewSize.width+=s_w;    m_viewSize.height+=s_h;    m_viewPos.width+=p_w;    m_viewPos.height+=p_h;    repaint();    m_scaling--;    if (m_scaling == 0) {      m_frameLimiter.stop();    }  }}  }
class C{  public Follower(String outputName) throws jmri.JmriException {  this.output=outputName;  String nameT=namePrefix + "T" + nameDivider+ output;  RouteManager rm=InstanceManager.getDefault(jmri.RouteManager.class);  Route r=rm.getBySystemName(nameT);  if (r == null) {    throw new jmri.JmriException("Route does not exist");  }  sensor=r.getRouteSensorName(0);  invert=(r.getRouteSensorMode(0) == Route.ONINACTIVE);  veto=r.getRouteSensorName(1);  if (veto == null) {    veto="";  }}  }
class C{  public DCCppMessage(int len){  super(len);  setBinary(false);  setRetries(_nRetries);  setTimeout(DCCppMessageTimeout);  if (len > DCCppConstants.MAX_MESSAGE_SIZE || len < 0) {    log.error("Invalid length in ctor: " + len);  }  _nDataChars=len;  myRegex="";}  }
class C{  public static <E,F>List<F> transform(Iterable<E> iterable,Transform<E,F> transform){  List<F> result=new ArrayList<>();  for (  E e : iterable) {    result.add(transform.transform(e));  }  return result;}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public void updateTimeRangeTree(int incStartTimeSec,int incEndTimeSec){  ArrayList<Integer> timeTreeParentPath=new ArrayList<Integer>();  for (  AreaPanelInfo api : requestedAreas.get(0).apiList) {    GTG.cacheCreatorLock.registerReadingThread();    try {      AreaPanel ap=api.ap();      timeTreeParentPath.clear();      timeTreeParentPath.add(ap.getTimeTree().id);      int lastSiblingTtFk=-1;      while (!timeTreeParentPath.isEmpty()) {        if (rwtm.isWritingHoldingUpWritingThreads()) {          workerInterrupted=true;          resultIncomplete=true;          return;        }        TimeTree tt=GTG.ttCache.getRow(timeTreeParentPath.get(timeTreeParentPath.size() - 1));        if (tt.getSubNodeFk(0) == Integer.MIN_VALUE) {          if (tt.getMinTimeSecs() < incEndTimeSec && tt.getMaxTimeSecs() > incStartTimeSec) {            int cutStartTimeSec=tt.calcTimeRangeCutStart();            int cutEndTimeSec=tt.calcTimeRangeCutEnd();            if (cutStartTimeSec < incEndTimeSec && cutEndTimeSec > incStartTimeSec)             addTimeRange(tt,cutStartTimeSec,cutEndTimeSec);          }          lastSiblingTtFk=timeTreeParentPath.remove(timeTreeParentPath.size() - 1);        } else {          int nextTTChildIndex=0;          if (lastSiblingTtFk != -1) {            for (; nextTTChildIndex < TimeTree.NUM_NODES; nextTTChildIndex++) {              if (tt.getSubNodeFk(nextTTChildIndex) == lastSiblingTtFk) {                break;              }            }            if (nextTTChildIndex == TimeTree.NUM_NODES) {              throw new CacheException("Couldn't find last tt sibling? " + lastSiblingTtFk + ": "+ tt.getSubNodeFk(0)+ ", "+ tt.getSubNodeFk(1)+ ", "+ tt.getSubNodeFk(2)+ ", "+ tt.getSubNodeFk(3));            }            lastSiblingTtFk=-1;            nextTTChildIndex++;          }          TimeTree subTT=null;          for (; nextTTChildIndex < TimeTree.NUM_NODES; nextTTChildIndex++) {            subTT=tt.getSubNode(nextTTChildIndex);            if (subTT == null)             break;            if (subTT.getMinTimeSecs() < incEndTimeSec && subTT.getMaxTimeSecs() > incStartTimeSec)             break; else             if (subTT.getMinTimeSecs() >= incEndTimeSec) {              subTT=null;              break;            } else             subTT=null;          }          if (subTT != null)           timeTreeParentPath.add(subTT.id); else {            lastSiblingTtFk=timeTreeParentPath.remove(timeTreeParentPath.size() - 1);          }        }      }    }  finally {      GTG.cacheCreatorLock.unregisterReadingThread();    }  }}  }
class C{  public Glossary_ createGlossary_(){  Glossary_Impl glossary_=new Glossary_Impl();  return glossary_;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.upPaint,stream);  SerialUtilities.writePaint(this.downPaint,stream);  SerialUtilities.writePaint(this.volumePaint,stream);}  }
class C{  public final Unsigned subtractAndGet(Unsigned delta){  return Word.unsigned(value.addAndGet(-delta.rawValue()));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return pluggy == null ? "" : pluggy.getName();}  }
class C{  protected StackManipulation beforeDelegation(MethodDescription instrumentedMethod){  return MethodVariableAccess.allArgumentsOf(targetMethod);}  }
class C{  public double sumSquaredObjectiveDistance(MultiObjectiveFitness other){  double s=0;  for (int i=0; i < objectives.length; i++) {    double a=(objectives[i] - other.objectives[i]);    s+=a * a;  }  return s;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  List<PropertyChangeListener> l=Arrays.asList(listenerList.getListeners(PropertyChangeListener.class));  if (!l.contains(listener)) {    listenerList.add(PropertyChangeListener.class,listener);  }}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  private void writeNodeStatisticsFile(String outputFolder) throws IOException {  File file=new File(outputFolder + "nodeStatistics" + this.TXTfile);  FileWriter writer=new FileWriter(file);  ;  writer.write("ID\tinDegree\toutDegree");  for (  Node n : this.network.getNodes().values()) {    writer.write("\n" + n.getId() + "\t"+ n.getInLinks().size()+ "\t"+ n.getOutLinks().size());  }  writer.flush();  writer.close();}  }
class C{  public Graph search(){  this.logger.log("info","Starting Fast Adjacency Search.");  Graph graph=new EdgeListGraphSingleConnections(test.getVariables());  sepsets=new SepsetMap();  sepsets.setReturnEmptyIfNotSet(true);  int _depth=depth;  if (_depth == -1) {    _depth=1000;  }  Map<Node,Set<Node>> adjacencies=new ConcurrentSkipListMap<>();  List<Node> nodes=graph.getNodes();  for (  Node node : nodes) {    adjacencies.put(node,new HashSet<Node>());  }  for (int d=0; d <= _depth; d++) {    boolean more;    if (d == 0) {      more=searchAtDepth0(nodes,test,adjacencies);    } else {      more=searchAtDepth(nodes,test,adjacencies,d);    }    if (!more) {      break;    }  }  if (verbose) {    out.println("Finished with search, constructing Graph...");  }  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      Node x=nodes.get(i);      Node y=nodes.get(j);      if (adjacencies.get(x).contains(y)) {        graph.addUndirectedEdge(x,y);      }    }  }  if (verbose) {    out.println("Finished constructing Graph.");  }  if (verbose) {    this.logger.log("info","Finishing Fast Adjacency Search.");  }  return graph;}  }
class C{  public static Bitmap byteToBitmap(byte[] byteArray){  if (byteArray.length != 0) {    return BitmapFactory.decodeByteArray(byteArray,0,byteArray.length);  } else {    return null;  }}  }
class C{  public boolean isRunning(){  return isRunning;}  }
class C{  public Provider<WorkingSetManagerBroker> provideWorkingSetManagerBroker(){  return Access.contributedProvider(WorkingSetManagerBroker.class);}  }
class C{  @Override public int hashCode(){  return super.hashCode() ^ BUDDHIST_YEAR_OFFSET;}  }
class C{  public TreePath findTreePathByObject(Object tofind){  return findTreePathByObject(this.getModel(),(TreeNode)this.getModel().getRoot(),this.getPathForRow(0),tofind);}  }
class C{  protected void doLogOobResponseInbound(PendingClientCallState state,Message oobResponse){  if (rpcLogger != null) {    rpcLogger.logOobResponse(clientInfo,serverInfo,oobResponse,state.getMethodDesc().getFullName(),state.getController().getCorrelationId(),System.currentTimeMillis());  }}  }
class C{  public SimpleConnectionGroup(String name,String identifier,Collection<String> connectionIdentifiers,Collection<String> connectionGroupIdentifiers){  setName(name);  setIdentifier(identifier);  setType(ConnectionGroup.Type.ORGANIZATIONAL);  this.connectionIdentifiers=new HashSet<String>(connectionIdentifiers);  this.connectionGroupIdentifiers=new HashSet<String>(connectionGroupIdentifiers);}  }
class C{  public void testSearchablesListEmpty(){  MyMockPackageManager mockPM=new MyMockPackageManager(mContext.getPackageManager());  MyMockContext mockContext=new MyMockContext(mContext,mockPM);  mockPM.setSearchablesMode(MyMockPackageManager.SEARCHABLES_MOCK_ZERO);  Searchables searchables=new Searchables(mockContext,0);  searchables.buildSearchableList();  ArrayList<SearchableInfo> searchablesList=searchables.getSearchablesList();  assertNotNull(searchablesList);  MoreAsserts.assertEmpty(searchablesList);  ArrayList<SearchableInfo> global=searchables.getSearchablesInGlobalSearchList();  MoreAsserts.assertEmpty(global);}  }
class C{  public AttributedString(AttributedCharacterIterator text,int beginIndex,int endIndex){  this(text,beginIndex,endIndex,null);}  }
class C{  protected void writeHtml(final Writer w) throws IOException {  w.write("<html ");  if (doctype.isXML()) {    w.write(" xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"");  }  w.write(" lang=\"en\"");  w.write("\n>");}  }
class C{  public Suggestion<T> reduce(List<Suggestion<T>> toReduce){  if (toReduce.size() == 1) {    return toReduce.get(0);  } else   if (toReduce.isEmpty()) {    return null;  }  Suggestion<T> leader=toReduce.get(0);  List<T> entries=leader.entries;  final int size=entries.size();  Comparator<Option> sortComparator=sortComparator();  List<T> currentEntries=new ArrayList<>();  for (int i=0; i < size; i++) {    for (    Suggestion<T> suggestion : toReduce) {      if (suggestion.entries.size() != size) {        throw new IllegalStateException("Can't merge suggest result, this might be caused by suggest calls " + "across multiple indices with different analysis chains. Suggest entries have different sizes actual [" + suggestion.entries.size() + "] expected ["+ size+ "]");      }      assert suggestion.name.equals(leader.name);      currentEntries.add(suggestion.entries.get(i));    }    T entry=(T)entries.get(i).reduce(currentEntries);    entry.sort(sortComparator);    entries.set(i,entry);    currentEntries.clear();  }  return leader;}  }
class C{  public static String parseCoverageTimestamp(String outputMessage){  return outputMessage.substring(outputMessage.lastIndexOf(AT) + AT.length());}  }
class C{  private void twoWayMergeInternal(final ReservoirLongsSketch sketchIn,final boolean isModifiable){  if (sketchIn.getN() <= sketchIn.getK()) {    twoWayMergeInternalStandard(sketchIn);  } else   if (gadget_.getN() < gadget_.getK()) {    final ReservoirLongsSketch tmpSketch=gadget_;    gadget_=(isModifiable ? sketchIn : sketchIn.copy());    twoWayMergeInternalStandard(tmpSketch);  } else   if (sketchIn.getImplicitSampleWeight() < gadget_.getN() / ((double)(gadget_.getK() - 1))) {    twoWayMergeInternalWeighted(sketchIn);  } else {    final ReservoirLongsSketch tmpSketch=gadget_;    gadget_=(isModifiable ? sketchIn : sketchIn.copy());    twoWayMergeInternalWeighted(tmpSketch);  }}  }
class C{  public void addNonKMLFile(final byte[] data,final String inZipFilename) throws IOException {  ZipEntry entry=new ZipEntry(inZipFilename);  this.zipOut.putNextEntry(entry);  this.zipOut.write(data);  log.debug(entry.getName() + " added to kmz.");}  }
class C{  public double interpolateZ(Coordinate p){  if (p == null)   throw new IllegalArgumentException("Supplied point is null.");  return interpolateZ(p,this.p0,this.p1,this.p2);}  }
class C{  public GLWrapper(GL gl,GLSurfaceView glSurfaceView){  mGL=(GL10)gl;  if (gl instanceof GL10Ext) {    mGL10Ext=(GL10Ext)gl;  }  if (gl instanceof GL11) {    mGL11=(GL11)gl;  }  if (gl instanceof GL11Ext) {    mGL11Ext=(GL11Ext)gl;  }  if (gl instanceof GL11ExtensionPack) {    mGL11ExtPack=(GL11ExtensionPack)gl;  }  mGLSurfaceView=glSurfaceView;}  }
class C{  public final void increaseWrittenBytes(int nbBytesWritten,long currentTime){  throughputCalculationLock.lock();  try {    writtenBytes+=nbBytesWritten;    lastWriteTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  private static FileSystem fileSystem(String authority,boolean tcp) throws Exception {  return FileSystem.get(new URI("igfs://" + authority + "/"),configuration(authority,tcp));}  }
class C{  public RootGraphicsNode createGraphicsNode(BridgeContext ctx,Document doc){  RootGraphicsNode gn=new RootGraphicsNode();  this.document=doc;  this.node=gn;  this.ctx=ctx;  ((SVGOMDocument)doc).setSVGContext(this);  return gn;}  }
