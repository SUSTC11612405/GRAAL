class C{  public void testSyncFailedDialog_RetryButtonActuallyRetries(){  try (WifiDisabler wd=new WifiDisabler()){    waitForSyncFailure();    expectVisibleSoon(viewWithText(R.string.sync_failed_retry));    setWifiEnabled(true);    click(viewWithText(R.string.sync_failed_retry));    waitForInitialSync();    waitForProgressFragment();    expectVisible(viewWithText("Triage"));    expectVisible(viewWithText("Discharged"));  } }  }
class C{  private char readEscapeCharacter() throws IOException {  if (pos == limit && !fillBuffer(1)) {    throw syntaxError("Unterminated escape sequence");  }  char escaped=buffer[pos++];switch (escaped) {case 'u':    if (pos + 4 > limit && !fillBuffer(4)) {      throw syntaxError("Unterminated escape sequence");    }  String hex=stringPool.get(buffer,pos,4);pos+=4;return (char)Integer.parseInt(hex,16);case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  @Uninterruptible public void newStackWalk(RVMThread thread,Address registerLocation){  for (int i=0; i < registerLocations.length(); ++i) {    registerLocations.set(i,registerLocation);    registerLocation=registerLocation.plus(BYTES_IN_ADDRESS);  }  baselineIterator.newStackWalk(thread);  if (VM.BuildForOptCompiler) {    optIterator.newStackWalk(thread);  }  hardwareTrapIterator.newStackWalk(thread);  jniIterator.newStackWalk(thread);}  }
class C{  private boolean isReadyToShutdown(){  return (!toolkitThreadBusy && peerMap.isEmpty() && busyThreadSet.isEmpty());}  }
class C{  public void rm(String key) throws IOException {  zkState.delete(key);}  }
class C{  public TermQueryBuilder(String name,boolean value){  this(name,(Object)value);}  }
class C{  public static Uri buildAcronymUri(Long id){  return ContentUris.withAppendedId(CONTENT_URI,id);}  }
class C{  public static String translate(String message){  return getExceptionMessage(message);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public void incrementSelectedObjects(){  for (Iterator i=getSelection().iterator(); i.hasNext(); ) {    PNode node=(PNode)i.next();    if (node instanceof NeuronNode) {      NeuronNode neuronNode=(NeuronNode)node;      neuronNode.getNeuron().getUpdateRule().incrementActivation(neuronNode.getNeuron());    } else     if (node instanceof SynapseNode) {      SynapseNode synapseNode=(SynapseNode)node;      synapseNode.getSynapse().incrementWeight();      synapseNode.updateColor();      synapseNode.updateDiameter();    }  }}  }
class C{  private void initSimple(){  lblDocumentNo=new Label();  lblDocumentNo.setValue(Msg.translate(Env.getCtx(),"DocumentNo").replaceAll("&",""));  lblDescription=new Label();  lblDescription.setValue(Msg.translate(Env.getCtx(),"Description").replaceAll("&",""));  lblName=new Label();  lblName.setValue(Msg.translate(Env.getCtx(),"Name").replaceAll("&",""));  lblValue=new Label();  lblValue.setValue(Msg.translate(Env.getCtx(),"Value").replaceAll("&",""));  fieldDocumentNo=new Textbox();  fieldDocumentNo.setId("fieldDocumentNo");  fieldDocumentNo.setMaxlength(40);  fieldDescription=new Textbox();  fieldDescription.setId("fieldDescription");  fieldDescription.setMaxlength(40);  fieldName=new Textbox();  fieldName.setMaxlength(40);  fieldValue=new Textbox();  fieldValue.setMaxlength(40);  Button btnNew=new Button();  btnNew.setName("btnNew");  btnNew.setImage("/images/New24.png");  btnNew.addEventListener(Events.ON_CLICK,this);  LayoutUtils.addSclass("action-button",btnNew);  Button btnOk=new Button();  btnOk.setName("btnOkSimple");  btnOk.setImage("/images/Ok24.png");  btnOk.addEventListener(Events.ON_CLICK,this);  LayoutUtils.addSclass("action-button",btnOk);  Button btnCancel=new Button();  btnCancel.setName("btnCancel");  btnCancel.setImage("/images/Cancel24.png");  btnCancel.addEventListener(Events.ON_CLICK,this);  LayoutUtils.addSclass("action-button",btnCancel);  Panel pnlButtonRight=new Panel();  pnlButtonRight.appendChild(btnOk);  pnlButtonRight.appendChild(btnCancel);  pnlButtonRight.setAlign("right");  pnlButtonRight.setWidth("100%");  Panel pnlButtonLeft=new Panel();  pnlButtonLeft.appendChild(btnNew);  Hbox hboxButton=new Hbox();  hboxButton.appendChild(pnlButtonLeft);  hboxButton.appendChild(pnlButtonRight);  hboxButton.setWidth("100%");  pnlDocument=new Row();  pnlDocument.setId("pnlDocument");  pnlDocument.appendChild(LayoutUtils.makeRightAlign(lblDocumentNo));  pnlDocument.appendChild(fieldDocumentNo);  pnlDescription=new Row();  pnlDescription.appendChild(LayoutUtils.makeRightAlign(lblDescription));  pnlDescription.appendChild(fieldDescription);  pnlValue=new Row();  pnlValue.appendChild(LayoutUtils.makeRightAlign(lblValue));  pnlValue.appendChild(fieldValue);  pnlName=new Row();  pnlName.appendChild(LayoutUtils.makeRightAlign(lblName));  pnlName.appendChild(fieldName);  contentSimple=new Grid();  contentSimple.setId("contentSimple");  contentSimple.setWidth("100%");  contentSimple.makeNoStrip();  contentSimpleRows=new Rows();  contentSimple.appendChild(contentSimpleRows);  contentSimpleRows.appendChild(pnlValue);  contentSimpleRows.appendChild(pnlName);  contentSimpleRows.appendChild(pnlDocument);  contentSimpleRows.appendChild(pnlDescription);  contentSimple.setVflex(true);  Borderlayout layout=new Borderlayout();  layout.setStyle("height: 100%; width: 99%; position: relative");  winLookupRecord.appendChild(layout);  Center center=new Center();  layout.appendChild(center);  center.appendChild(contentSimple);  center.setFlex(true);  South south=new South();  layout.appendChild(south);  south.appendChild(hboxButton);  winLookupRecord.setWidth("100%");  winLookupRecord.setHeight("100%");  winLookupRecord.addEventListener(Events.ON_OK,this);}  }
class C{  public static boolean isSynchronized(int mod){  return Modifier.isSynchronized(mod);}  }
class C{  public static boolean isValidEmailAddress(String emailAddress){  return EMAIL_PATTERN.matcher(emailAddress).matches();}  }
class C{  static ResourceBundle loadResourceBundle(String resourceBundleName){  ClassLoader cl=Thread.currentThread().getContextClassLoader();  if (cl != null) {    try {      return ResourceBundle.getBundle(resourceBundleName,Locale.getDefault(),cl);    } catch (    MissingResourceException ignored) {    }  }  cl=ClassLoader.getSystemClassLoader();  if (cl != null) {    try {      return ResourceBundle.getBundle(resourceBundleName,Locale.getDefault(),cl);    } catch (    MissingResourceException ignored) {    }  }  throw new MissingResourceException("Failed to load the specified resource bundle \"" + resourceBundleName + "\"",resourceBundleName,null);}  }
class C{  public static String applyRelativePath(String path,String relativePath){  int separatorIndex=path.lastIndexOf(FOLDER_SEPARATOR);  if (separatorIndex != -1) {    String newPath=path.substring(0,separatorIndex);    if (!relativePath.startsWith(FOLDER_SEPARATOR)) {      newPath+=FOLDER_SEPARATOR;    }    return newPath + relativePath;  } else {    return relativePath;  }}  }
class C{  static long computeChecksum(ByteBuffer... bufs){  CRC32 crc32=new CRC32();  for (int i=0; i < bufs.length; i++)   crc32.update(bufs[i]);  return crc32.getValue();}  }
class C{  public NumberListParser(){  numberListHandler=DefaultNumberListHandler.INSTANCE;}  }
class C{  public boolean contains(S2Point p){  return contains(new S2LatLng(p));}  }
class C{  public InputDialog(Window owner,String key){  this(owner,key,null);}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  AbstractEntity ae=(AbstractEntity)n;  ae.nodeName=nodeName;  ae.publicId=publicId;  ae.systemId=systemId;  return n;}  }
class C{  public static synchronized void clearDaoCache(){  if (classMap != null) {    classMap.clear();    classMap=null;  }  if (tableConfigMap != null) {    tableConfigMap.clear();    tableConfigMap=null;  }}  }
class C{  public void testZeroCovarianceConditional() throws Exception {  ConditionalMutualInfoCalculatorMultiVariateGaussian condMiCalc=new ConditionalMutualInfoCalculatorMultiVariateGaussian();  condMiCalc.initialise(1,1,1);  double covar1=1;  double covar2=0.8;  double crossCovar=0.6;  double[][] covariance=new double[][]{{covar1,crossCovar,0.0},{crossCovar,covar2,0.0},{0.0,0.0,0.0}};  condMiCalc.setCovariance(covariance,false);  double condMi=condMiCalc.computeAverageLocalOfObservations();  assertEquals(0.5 * Math.log(covar1 * covar2 / (covar1 * covar2 - crossCovar * crossCovar)),condMi,0.0000000001);}  }
class C{  public void testEnableEscapeProcessing() throws Exception {  String testUrl=BaseTestCase.dbUrl;  int b=testUrl.indexOf("enableEscapeProcessing");  if (b != -1) {    int e=testUrl.indexOf('&',b);    if (e == -1) {      e=testUrl.length();      b--;    } else {      e++;    }    testUrl=testUrl.substring(0,b) + testUrl.substring(e,testUrl.length());  }  String query="SELECT /* testEnableEscapeProcessing: (%d) */ {fn sin(pi()/2)}, {ts '2015-08-16 11:22:33'}, {fn ucase('this is mysql')}";  Timestamp testTimestamp=new Timestamp(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("2015-08-16 11:22:33").getTime());  for (int tst=0; tst < 8; tst++) {    boolean enableEscapeProcessing=(tst & 0x1) != 0;    boolean processEscapeCodesForPrepStmts=(tst & 0x2) != 0;    boolean useServerPrepStmts=(tst & 0x4) != 0;    Properties props=new Properties();    props.setProperty("statementInterceptors",TestEnableEscapeProcessingStatementInterceptor.class.getName());    props.setProperty("enableEscapeProcessing",Boolean.toString(enableEscapeProcessing));    props.setProperty("processEscapeCodesForPrepStmts",Boolean.toString(processEscapeCodesForPrepStmts));    props.setProperty("useServerPrepStmts",Boolean.toString(useServerPrepStmts));    Connection testConn=getConnectionWithProps(testUrl,props);    this.stmt=testConn.createStatement();    this.rs=this.stmt.executeQuery(String.format(query,tst));    String testCase=String.format("Case: %d [ %s | %s | %s ]/Statement",tst,enableEscapeProcessing ? "enEscProc" : "-",processEscapeCodesForPrepStmts ? "procEscProcPS" : "-",useServerPrepStmts ? "useSSPS" : "-");    assertTrue(testCase,this.rs.next());    assertEquals(testCase,1d,this.rs.getDouble(1));    assertEquals(testCase,testTimestamp,this.rs.getTimestamp(2));    assertEquals(testCase,"THIS IS MYSQL",this.rs.getString(3));    assertFalse(testCase,this.rs.next());    this.pstmt=testConn.prepareStatement(String.format(query,tst));    this.rs=this.pstmt.executeQuery();    testCase=String.format("Case: %d [ %s | %s | %s ]/PreparedStatement",tst,enableEscapeProcessing ? "enEscProc" : "-",processEscapeCodesForPrepStmts ? "procEscProcPS" : "-",useServerPrepStmts ? "useSSPS" : "-");    assertTrue(testCase,this.rs.next());    assertEquals(testCase,1d,this.rs.getDouble(1));    assertEquals(testCase,testTimestamp,this.rs.getTimestamp(2));    assertEquals(testCase,"THIS IS MYSQL",this.rs.getString(3));    assertFalse(testCase,this.rs.next());    testConn.close();  }}  }
class C{  public SkeinMac(int stateSizeBits,int digestSizeBits){  this.engine=new SkeinEngine(stateSizeBits,digestSizeBits);}  }
class C{  public ClientMessage createMessageWithProperties(byte[] body,Map<String,Object> properties){  ClientMessage message=createMessage(body);  addMessageProperties(message,properties);  return message;}  }
class C{  public boolean hasNamePrefix(){  return hasExtension(NamePrefix.class);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public SkuInListView(final String id,final ProductSku sku){  super(id);  this.sku=sku;}  }
class C{  protected StringLiteralImpl(){  super();}  }
class C{  public Connector createConnector(InetAddress inetAddress,int port,boolean secure){  return new Connector(invoke(embeddedCreateConnector,inetAddress,new Integer(port),Boolean.valueOf(secure)));}  }
class C{  private void collectOsrPointsAndBarriers(IR ir){  osrPoints=new LinkedList<Instruction>();  osrBarriers=new LinkedList<Instruction>();  Enumeration<Instruction> instenum=ir.forwardInstrEnumerator();  while (instenum.hasMoreElements()) {    Instruction inst=instenum.nextElement();    if (OsrPoint.conforms(inst)) {      osrPoints.add(inst);    } else     if (inst.operator() == OSR_BARRIER) {      osrBarriers.add(inst);    }  }}  }
class C{  @SuppressWarnings("unchecked") public T cast(Object other){  return (T)cls.cast(other);}  }
class C{  @Override public String toString(){  String result="CrossValidationResultProducer: ";  result+=getCompatibilityState();  if (m_Instances == null) {    result+=": <null Instances>";  } else {    result+=": " + Utils.backQuoteChars(m_Instances.relationName());  }  return result;}  }
class C{  private Token advanceToken() throws JsonParserException {  int c=advanceChar();  while (isWhitespace(c))   c=advanceChar();  tokenLinePos=linePos;  tokenCharPos=index - rowPos - utf8adjust;  tokenCharOffset=charOffset + index;switch (c) {case -1:    return token=Token.EOF;case '[':  JsonArray list=new JsonArray();if (advanceToken() != Token.ARRAY_END) while (true) {  list.add(currentValue());  if (advanceToken() == Token.ARRAY_END)   break;  if (token != Token.COMMA)   throw createParseException(null,"Expected a comma or end of the array instead of " + token,true);  if (advanceToken() == Token.ARRAY_END)   throw createParseException(null,"Trailing comma found in array",true);}value=list;return token=Token.ARRAY_START;case ']':return token=Token.ARRAY_END;case ',':return token=Token.COMMA;case ':':return token=Token.COLON;case '{':JsonObject map=new JsonObject();if (advanceToken() != Token.OBJECT_END) while (true) {if (token != Token.STRING) throw createParseException(null,"Expected STRING, got " + token,true);String key=(String)value;if (advanceToken() != Token.COLON) throw createParseException(null,"Expected COLON, got " + token,true);advanceToken();map.put(key,currentValue());if (advanceToken() == Token.OBJECT_END) break;if (token != Token.COMMA) throw createParseException(null,"Expected a comma or end of the object instead of " + token,true);if (advanceToken() == Token.OBJECT_END) throw createParseException(null,"Trailing object found in array",true);}value=map;return token=Token.OBJECT_START;case '}':return token=Token.OBJECT_END;case 't':consumeKeyword((char)c,TRUE);value=Boolean.TRUE;return token=Token.TRUE;case 'f':consumeKeyword((char)c,FALSE);value=Boolean.FALSE;return token=Token.FALSE;case 'n':consumeKeyword((char)c,NULL);value=null;return token=Token.NULL;case '\"':value=consumeTokenString();return token=Token.STRING;case '-':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':value=consumeTokenNumber((char)c);return token=Token.NUMBER;case '+':case '.':throw createParseException(null,"Numbers may not start with '" + (char)c + "'",true);default :}if (isAsciiLetter(c)) throw createHelpfulException((char)c,null,0);throw createParseException(null,"Unexpected character: " + (char)c,true);}  }
class C{  @Override public double inverseTransform(double value){  return value;}  }
class C{  public static void main(String[] args) throws Throwable {  AliasNotInStoreTest test=new AliasNotInStoreTest();  test.start();}  }
class C{  public final boolean isFocusDimmerUsed(){  return mUseFocusDimmer;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private void loadUserInfoIntoActionBar(){  if (!TextUtils.isEmpty(mWithUserImage)) {    Utils.loadCircularImage(getActivity(),mWithImageView,mWithUserImage,AvatarBitmapTransformation.AvatarSize.NORMAL);  }}  }
class C{  public boolean functionAvailable(String methName){  Object tblEntry=m_functionID.get(methName);  if (null != tblEntry)   return true; else {    tblEntry=m_functionID_customer.get(methName);    return (null != tblEntry) ? true : false;  }}  }
class C{  public boolean projectWithDepth(Vec3 modelPoint,double depthOffset,Vec3 result){  if (modelPoint == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"RenderContext","projectWithDepth","missingPoint"));  }  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"RenderContext","projectWithDepth","missingResult"));  }  double mx=modelPoint.x;  double my=modelPoint.y;  double mz=modelPoint.z;  double[] m=this.modelview.m;  double ex=m[0] * mx + m[1] * my + m[2] * mz + m[3];  double ey=m[4] * mx + m[5] * my + m[6] * mz + m[7];  double ez=m[8] * mx + m[9] * my + m[10] * mz + m[11];  double ew=m[12] * mx + m[13] * my + m[14] * mz + m[15];  double[] p=this.projection.m;  double x=p[0] * ex + p[1] * ey + p[2] * ez + p[3] * ew;  double y=p[4] * ex + p[5] * ey + p[6] * ez + p[7] * ew;  double z=p[8] * ex + p[9] * ey + p[10] * ez + p[11] * ew;  double w=p[12] * ex + p[13] * ey + p[14] * ez + p[15] * ew;  if (w == 0) {    return false;  }  x/=w;  y/=w;  z/=w;  if (z < -1 || z > 1) {    return false;  }  z=p[8] * ex + p[9] * ey + p[10] * ez * (1 + depthOffset) + p[11] * ew;  z/=w;  z=(z < -1) ? -1 : (z > 1 ? 1 : z);  x=x * 0.5 + 0.5;  y=y * 0.5 + 0.5;  z=z * 0.5 + 0.5;  x=x * this.viewport.width + this.viewport.x;  y=y * this.viewport.height + this.viewport.y;  result.x=x;  result.y=y;  result.z=z;  return true;}  }
class C{  public void addBoolean(boolean x){  prep(1,0);  putBoolean(x);}  }
class C{  @AssistedInject public ActiveConnectionDirectoryResource(@Assisted UserContext userContext,@Assisted Directory<ActiveConnection> directory,DirectoryObjectTranslator<ActiveConnection,APIActiveConnection> translator,DirectoryObjectResourceFactory<ActiveConnection,APIActiveConnection> resourceFactory){  super(userContext,directory,translator,resourceFactory);}  }
class C{  public void testPutNull() throws InterruptedException {  try {    LinkedBlockingQueue q=new LinkedBlockingQueue(SIZE);    q.put(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  private static MediaCodecInfo selectCodec(String mimeType){  int numCodecs=MediaCodecList.getCodecCount();  for (int i=0; i < numCodecs; i++) {    MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(i);    if (!codecInfo.isEncoder()) {      continue;    }    String[] types=codecInfo.getSupportedTypes();    for (int j=0; j < types.length; j++) {      if (types[j].equalsIgnoreCase(mimeType)) {        return codecInfo;      }    }  }  return null;}  }
class C{  public Matrix4d zero(){  m00=0.0;  m01=0.0;  m02=0.0;  m03=0.0;  m10=0.0;  m11=0.0;  m12=0.0;  m13=0.0;  m20=0.0;  m21=0.0;  m22=0.0;  m23=0.0;  m30=0.0;  m31=0.0;  m32=0.0;  m33=0.0;  properties=0;  return this;}  }
class C{  protected Element writeFloatToXML(Element parent,float o,String name) throws Exception {  Element node;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  node=addElement(parent,name,Float.TYPE.getName(),true);  node.appendChild(node.getOwnerDocument().createTextNode(new Float(o).toString()));  return node;}  }
class C{  @Override public void updateBoolean(int columnIndex,boolean x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBoolean(" + columnIndex + ", "+ x+ ");");    }    update(columnIndex,ValueBoolean.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void checkColRange(int col) throws SQLException {  if (col <= 0 || col > colCount) {    throw new SQLException("Invalid column index :" + col);  }}  }
class C{  public void onEvent(Event e) throws Exception {  if (e.getTarget() instanceof WPerformanceIndicator) {    WPerformanceIndicator pi=(WPerformanceIndicator)e.getTarget();    log.info(pi.toString());    MGoal goal=pi.getGoal();    if (goal.getMeasure() != null)     new WPerformanceDetail(goal);  }}  }
class C{  public String toString(){  return name;}  }
class C{  public static long findUniqueUserCount(EntityManager em){  TypedQuery<Long> query=em.createNamedQuery("PrincipalUser.findUniqueUserCount",Long.class);  return query.getSingleResult();}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    extensionId=PKIXExtensions.ExtendedKeyUsage_Id;    critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public Set<Map.Entry<Object,Object>> entrySet(){  return map.entrySet();}  }
class C{  public LifoSet(int capacity){  maxCapacity=capacity;}  }
class C{  public static byte[] readFile(URL url) throws IOException {  ByteQueue q=new ByteQueue();  InputStream is=url.openStream();  try {    byte[] buf=new byte[1024];    for (; ; ) {      int bytesRead=is.read(buf);      if (bytesRead == -1)       break;      q.put(buf,0,bytesRead);    }    byte[] result=new byte[(int)q.getBytesWritten()];    q.get(result);    return result;  }  finally {    is.close();  }}  }
class C{  protected void fireDataStatusEEvent(String AD_Message,String info,boolean isError){  DataStatusEvent e=createDSE();  e.setInfo(AD_Message,info,isError,!isError);  if (isError)   log.saveWarning(AD_Message,info);  fireDataStatusChanged(e);}  }
class C{  @Override @CanIgnoreReturnValue public boolean offer(E e){  return add(e);}  }
class C{  public void remove(){  SerialDevice originalSource=getSourceDevice();  SerialDevice originalTarget=getTargetDevice();  originalSource.setTargetDevice(originalTarget);  originalTarget.setSourceDevice(originalSource);}  }
class C{  @Override public Set<String> hkeys(final String key){  checkIsInMultiOrPipeline();  client.hkeys(key);  return BuilderFactory.STRING_SET.build(client.getBinaryMultiBulkReply());}  }
class C{  public int lastIndexOfSubSeq(CharSeq seq){  Objects.requireNonNull(seq);  if (seq.isEmpty()) {    return 0;  }  if (length() < seq.length()) {    return -1;  }  Map<Character,Integer> lastIndex=new HashMap<>();  for (int i=seq.length() - 1; i >= 0; i--) {    lastIndex.put(seq.charAt(i),i);  }  int size=length(), endI=size - 1, len=seq.length();  while (endI >= len - 1) {    for (int i=0; ; i++) {      if (!charAt(endI - i).equals(seq.charAt(len - 1 - i))) {        if (endI - len < 0) {          return -1;        }        Character next=charAt(endI - len);        Integer last=lastIndex.get(next);        if (last == null) {          endI-=len + 1;        } else {          endI-=last + 1;        }        break;      } else       if (i == len - 1) {        return endI - len + 1;      }    }  }  return -1;}  }
class C{  public ConfirmDialog(JFrame p,String title,String question,boolean includeCheckbox){  this(p,title,question,includeCheckbox,'y');}  }
class C{  public static Movie movie(String idFilm,String profile,String filter) throws NetworkException {  String params=ServiceSecurity.construireParams(false,AllocineService.CODE,idFilm,AllocineService.PROFILE,profile,AllocineService.FILTER,filter);  String sed=ServiceSecurity.getSED();  String sig=ServiceSecurity.getSIG(params,sed);  try {    AllocineResponse response=getService().movie(idFilm,profile,filter,sed,sig);    return response.getMovie();  } catch (  Exception e) {    throw new NetworkException();  }}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle alloc=(allocation instanceof Rectangle) ? (Rectangle)allocation : allocation.getBounds();  int n=getViewCount();  int x=alloc.x + getLeftInset();  int y=alloc.y + getTopInset();  Rectangle clip=g.getClipBounds();  for (int i=0; i < n; i++) {    tempRect.x=x + getOffset(X_AXIS,i);    tempRect.y=y + getOffset(Y_AXIS,i);    tempRect.width=getSpan(X_AXIS,i);    tempRect.height=getSpan(Y_AXIS,i);    int trx0=tempRect.x, trx1=trx0 + tempRect.width;    int try0=tempRect.y, try1=try0 + tempRect.height;    int crx0=clip.x, crx1=crx0 + clip.width;    int cry0=clip.y, cry1=cry0 + clip.height;    if ((trx1 >= crx0) && (try1 >= cry0) && (crx1 >= trx0)&& (cry1 >= try0)) {      paintChild(g,tempRect,i);    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (boxType == null) {    throw new NullPointerException();  }  if (displayName == null) {    throw new NullPointerException();  }  if (modelClasses == null) {    throw new NullPointerException();  }  if (paramMap == null) {    throw new NullPointerException();  }  if (parents == null) {    throw new NullPointerException();  }  if (children == null) {    throw new NullPointerException();  }  if (repetition < 1) {    throw new IllegalStateException();  }}  }
class C{  public boolean hasContent(){  return tanks.isFluidTankFilled(index);}  }
class C{  public Property weekyear(){  return new Property(this,getChronology().weekyear());}  }
class C{  public void stop() throws ContainerException {}  }
class C{  public DefaultSelectAreaTracker(){}  }
class C{  @Override protected final boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion r,long startTime) throws EntryExistsException, ForceReattemptException, DataLocationException {  boolean sendReply=true;  InternalDistributedMember eventSender=getSender();  try {    result=doLocalRemoveAll(r,eventSender,true);  } catch (  ForceReattemptException fre) {    sendReply(getSender(),getProcessorId(),dm,new ReplyException(fre),r,startTime);    return false;  }  if (sendReply) {    sendReply(getSender(),getProcessorId(),dm,null,r,startTime);  }  return false;}  }
class C{  private void prepareServiceAccessible(boolean isAccessible) throws Exception {  VOUserDetails voUserDetails=new VOUserDetails();  voUserDetails.setKey(1000L);  VOService voService=new VOService();  voService.setKey(1001L);  Service service=new Service(voService);  model.setService(service);  doReturn(voUserDetails).when(ui).getUserFromSessionWithoutException();  VOSubscriptionDetails subsDetails=new VOSubscriptionDetails();  subsDetails.setSubscribedService(voService);  subsDetails.setSubscriptionId("test");  model.setSubscription(subsDetails);  model.setServiceParameters(new ArrayList<PricedParameterRow>());  List<Long> invisibleServiceKeys=new ArrayList<>();  if (!isAccessible) {    invisibleServiceKeys.add(service.getKey());  }  invisibleServiceKeys.add(1002L);  doReturn(invisibleServiceKeys).when(userGroupService).getInvisibleProductKeysForUser(voUserDetails.getKey());}  }
class C{  private int binarySearchExceptionSegments(Segment segment){  int low=0;  int high=this.exceptionSegments.size() - 1;  while (low <= high) {    int mid=(low + high) / 2;    Segment midSegment=(Segment)this.exceptionSegments.get(mid);    if (segment.contains(midSegment) || midSegment.contains(segment)) {      return mid;    }    if (midSegment.before(segment)) {      low=mid + 1;    } else     if (midSegment.after(segment)) {      high=mid - 1;    } else {      throw new IllegalStateException("Invalid condition.");    }  }  return -(low + 1);}  }
class C{  public static <E>Set<E> newSetFromMap(Map<E,Boolean> m){  return new SetFromMap<E>(m);}  }
class C{  public static int opaque(int value){  return value;}  }
class C{  public void addComment(Comment comment){  assertNotNull(comment);  if (comments == null) {    comments=new TreeSet<Comment>(new AstNode.PositionComparator());  }  comments.add(comment);  comment.setParent(this);}  }
class C{  public static double logpdf(double x,double mu,double beta){  if (x == Double.NEGATIVE_INFINITY) {    return Double.NEGATIVE_INFINITY;  }  final double z=(x - mu) / beta;  return -z - Math.exp(-z) - Math.log(beta);}  }
class C{  protected long overallEndTime(){  return endTime();}  }
class C{  public static int floatToIntBits(float value){  return 0;}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  protected int _rowOffset(int absRank){  return rowOffsets[absRank];}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 158) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public boolean shouldDisplacePlacement(){  return true;}  }
class C{  @Override public String toString(){  Vector<Capability> sorted;  StringBuffer result;  result=new StringBuffer();  sorted=new Vector<Capability>(m_Capabilities);  Collections.sort(sorted);  result.append("Capabilities: " + sorted.toString() + "\n");  sorted=new Vector<Capability>(m_Dependencies);  Collections.sort(sorted);  result.append("Dependencies: " + sorted.toString() + "\n");  result.append("min # Instance: " + getMinimumNumberInstances() + "\n");  return result.toString();}  }
class C{  public static IndexComponent createFromDynamicColumn(NameComponentDescription rowKeyDesc,String dynamicColumnComponentName){  return new IndexComponent(Preconditions.checkNotNull(rowKeyDesc),null,Preconditions.checkNotNull(dynamicColumnComponentName),null,null,false);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void onScreenChange(int currentScreen,int lastScreen){  ImageView[] points=platformGridView.points;  for (int i=0; i < points.length; i++) {    points[i].setImageBitmap(platformGridView.grayPoint);  }  points[currentScreen].setImageBitmap(platformGridView.bluePoint);}  }
class C{  public void checkRange(double[] range,int scale){  if (mChart instanceof XYChart) {    double[] calcRange=((XYChart)mChart).getCalcRange(scale);    if (calcRange != null) {      if (!mRenderer.isMinXSet(scale)) {        range[0]=calcRange[0];        mRenderer.setXAxisMin(range[0],scale);      }      if (!mRenderer.isMaxXSet(scale)) {        range[1]=calcRange[1];        mRenderer.setXAxisMax(range[1],scale);      }      if (!mRenderer.isMinYSet(scale)) {        range[2]=calcRange[2];        mRenderer.setYAxisMin(range[2],scale);      }      if (!mRenderer.isMaxYSet(scale)) {        range[3]=calcRange[3];        mRenderer.setYAxisMax(range[3],scale);      }    }  }}  }
class C{  @Override public void onMapReady(GoogleMap map){  map.addMarker(new MarkerOptions().position(new LatLng(0,0)).title("Marker"));}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  final ApproximationLine that=(ApproximationLine)o;  return Double.compare(that.m,m) == 0 && Double.compare(that.t,t) == 0;}  }
class C{  @Override public boolean isFactoryForType(Object type){  return supportedTypes.contains(type) || super.isFactoryForType(type);}  }
class C{  private void readObject(){}  }
class C{  protected int encrypt(int b,long fp){  return (byte)((((b & 0x0F) << 4) | ((b & 0xF0) >> 4)) ^ (cryptoKeys[((int)fp) % 128]));}  }
class C{  public ExecutionRegion basicGetRegion(){  return region;}  }
class C{  public static HttpHeaders toArmeria(Http2Headers headers){  final HttpHeaders converted=new DefaultHttpHeaders(false,headers.size());  for (  Entry<CharSequence,CharSequence> e : headers) {    converted.add(AsciiString.of(e.getKey()),e.getValue().toString());  }  return converted;}  }
class C{  public int countBlocks(final Region region,final Set<BaseBlock> searchBlocks){  final boolean[] ids=new boolean[256];  for (  final BaseBlock block : searchBlocks) {    final int id=block.getId();    if ((id < 256) && (id > 0)) {      ids[id]=true;    }  }  return this.countBlock(region,ids);}  }
class C{  public static String escapeLdapDN(final String input){  StringBuilder sb=new StringBuilder();  if ((input.length() > 0) && ((input.charAt(0) == ' ') || (input.charAt(0) == '#'))) {    sb.append('\\');  }  for (int i=0; i < input.length(); i++) {    char curChar=input.charAt(i);switch (curChar) {case '\\':      sb.append("\\\\");    break;case ',':  sb.append("\\,");break;case '+':sb.append("\\+");break;case '"':sb.append("\\\"");break;case '<':sb.append("\\<");break;case '>':sb.append("\\>");break;case ';':sb.append("\\;");break;default :sb.append(curChar);}}if ((input.length() > 1) && (input.charAt(input.length() - 1) == ' ')) {sb.insert(sb.length() - 1,'\\');}return sb.toString();}  }
class C{  public void pasteSubsession(List sessionElements,Point upperLeft){  getWorkbench().pasteSubgraph(sessionElements,upperLeft);  getWorkbench().deselectAll();  for (  Object sessionElement : sessionElements) {    if (sessionElement instanceof GraphNode) {      Node modelNode=(Node)sessionElement;      getWorkbench().selectNode(modelNode);    }  }  getWorkbench().selectConnectingEdges();}  }
class C{  protected void processResources(String[] fileNames,Consumer<? super Resource> consumer){  for (  String fileName : fileNames) {    URI uri=N4Scheme.N4URI.create(fileName);    Resource resource=resourceSet.getResource(uri,true);    consumer.accept(resource);  }}  }
class C{  public Body retrieveActiveBody(){  declaringClass.checkLevel(SootClass.BODIES);  if (declaringClass.isPhantomClass())   throw new RuntimeException("cannot get resident body for phantom class : " + getSignature() + "; maybe you want to call c.setApplicationClass() on this class!");  if (!hasActiveBody()) {    setActiveBody(this.getBodyFromMethodSource("jb"));    ms=null;  }  return getActiveBody();}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public void addToAssociated(Message asMessage){  associatedMessages.add(asMessage);}  }
class C{  public static KVManger init(Context context,String databaseName){  SQLiteDatabase database=context.openOrCreateDatabase(databaseName,Context.MODE_PRIVATE,null);  return init(database);}  }
class C{  private void processBusinessObjectDataStatusChangeNotificationEvents(List<BusinessObjectDataEntity> businessObjectDataEntities){  List<BusinessObjectDataKey> registeredBusinessObjectDataKeys=new ArrayList<>();  for (  BusinessObjectDataEntity businessObjectDataEntity : businessObjectDataEntities) {    BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.createBusinessObjectDataKeyFromEntity(businessObjectDataEntity);    registeredBusinessObjectDataKeys.add(businessObjectDataKey);  }  for (  BusinessObjectDataKey businessObjectDataKey : registeredBusinessObjectDataKeys) {    sqsNotificationEventService.processBusinessObjectDataStatusChangeNotificationEvent(businessObjectDataKey,UNREGISTERED_STATUS,null);  }}  }
class C{  public char[] toCharArray(){  char[] buffer=new char[count];  System.arraycopy(value,offset,buffer,0,count);  return buffer;}  }
class C{  protected void computeTransferFunction(){  T=new Rational(1.0);  for (int i=0; i < sections.size(); i++)   T.timesEquals(sections.get(i));}  }
class C{  public void testGetWarContextWhenJbossWebXmlWithRootContext() throws Exception {  JBossWAR war=new JBossWAR(getResourcePath(PACKAGE_PATH + "jboss-context.war"));  assertEquals("testcontext",war.getContext());}  }
class C{  public SortKey(String attrID,boolean ascendingOrder,String matchingRuleID){  this.attrID=attrID;  reverseOrder=(!ascendingOrder);  this.matchingRuleID=matchingRuleID;}  }
class C{  public DefaultConversation(String id){  begin(id);}  }
class C{  public void compose(Transformation t){  mAlpha*=t.getAlpha();  mMatrix.preConcat(t.getMatrix());}  }
class C{  @Override public boolean isRegisterByteSizeObserverCheap(KV<K,V> kv,Context context){  return keyCoder.isRegisterByteSizeObserverCheap(kv.getKey(),context.nested()) && valueCoder.isRegisterByteSizeObserverCheap(kv.getValue(),context.nested());}  }
class C{  @Override protected MouseListener createMouseListener(){  return new SeaGlassTabbedPaneMouseHandler(super.createMouseListener());}  }
class C{  private int skipDataStreamElement(){  boolean byteAlign=br.readBool();  int count=br.read(8);  if (count == 255) {    count+=br.read(8);  }  if (byteAlign) {    br.byteAlign();  }  if (br.getBitsLeft() < 8 * count) {    log.error(String.format("skipDataStreamElement overread error"));    return AAC_ERROR;  }  br.skip(8 * count);  return 0;}  }
class C{  private boolean isUndoAvailable(){  return getUndoManager() != null && getUndoManager().canUndoOrRedo();}  }
class C{  @RequestProcessing(value="/admin/add-user",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showAddUser(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/add-user.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final String teamsStr=Symphonys.get("teams");  dataModel.put(Common.TEAMS,teamsStr.split(","));  dataModel.put(User.USER_PASSWORD,RandomStringUtils.randomAlphanumeric(6));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public static Map<String,Object> quickChangeProductionRunStatus(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  String statusId=(String)context.get("statusId");  String startAllTasks=(String)context.get("startAllTasks");  try {    Map<String,Object> serviceContext=FastMap.newInstance();    if (statusId.equals("PRUN_DOC_PRINTED") || statusId.equals("PRUN_RUNNING") || statusId.equals("PRUN_COMPLETED")|| statusId.equals("PRUN_CLOSED")) {      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("statusId","PRUN_DOC_PRINTED");      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("changeProductionRunStatus",serviceContext);    }    if (statusId.equals("PRUN_RUNNING") && "Y".equals(startAllTasks)) {      serviceContext.clear();      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("quickStartAllProductionRunTasks",serviceContext);    }    if (statusId.equals("PRUN_COMPLETED") || statusId.equals("PRUN_CLOSED")) {      serviceContext.clear();      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("quickRunAllProductionRunTasks",serviceContext);    }    if (statusId.equals("PRUN_CLOSED")) {      serviceContext.clear();      serviceContext.put("workEffortId",productionRunId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("productionRunProduce",serviceContext);      serviceContext.clear();      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("statusId","PRUN_CLOSED");      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("changeProductionRunStatus",serviceContext);    } else {      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("statusId",statusId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("changeProductionRunStatus",serviceContext);    }  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the changeProductionRunStatus service",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));  }  return result;}  }
class C{  public JdbcTestPG(int id){  super();  m_myId=id;}  }
class C{  @Override public void mouseReleased(MouseEvent e){synchronized (mouseLock) {    mousePressed=false;  }  if (e.getButton() == MouseEvent.BUTTON1) {    for (    DrawListener listener : listeners)     listener.mouseReleased(userX(e.getX()),userY(e.getY()));  }}  }
class C{  public GenericPdu parse(){  Log.w("PduParser","parse() called...");  if (mPduDataStream == null) {    return null;  }  mHeaders=parseHeaders(mPduDataStream);  if (null == mHeaders) {    return null;  }  int messageType=mHeaders.getOctet(PduHeaders.MESSAGE_TYPE);  if (false == checkMandatoryHeader(mHeaders)) {    log("check mandatory headers failed!");    return null;  }  Log.w("PduParser","Message Type: " + messageType);  if ((PduHeaders.MESSAGE_TYPE_SEND_REQ == messageType) || (PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF == messageType)) {    Log.w("PduParser","Parsing parts...");    mBody=parseParts(mPduDataStream);    if (null == mBody) {      return null;    }  }switch (messageType) {case PduHeaders.MESSAGE_TYPE_SEND_REQ:    SendReq sendReq=new SendReq(mHeaders,mBody);  return sendReq;case PduHeaders.MESSAGE_TYPE_SEND_CONF:SendConf sendConf=new SendConf(mHeaders);return sendConf;case PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND:NotificationInd notificationInd=new NotificationInd(mHeaders);return notificationInd;case PduHeaders.MESSAGE_TYPE_NOTIFYRESP_IND:NotifyRespInd notifyRespInd=new NotifyRespInd(mHeaders);return notifyRespInd;case PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF:RetrieveConf retrieveConf=new RetrieveConf(mHeaders,mBody);byte[] contentType=retrieveConf.getContentType();if (null == contentType) {return null;}String ctTypeStr=new String(contentType);if (ctTypeStr.equals(ContentType.MULTIPART_MIXED) || ctTypeStr.equals(ContentType.MULTIPART_RELATED) || ctTypeStr.equals(ContentType.MULTIPART_ALTERNATIVE)) {return retrieveConf;} else if (ctTypeStr.equals(ContentType.MULTIPART_ALTERNATIVE)) {PduPart firstPart=mBody.getPart(0);mBody.removeAll();mBody.addPart(0,firstPart);return retrieveConf;}return null;case PduHeaders.MESSAGE_TYPE_DELIVERY_IND:DeliveryInd deliveryInd=new DeliveryInd(mHeaders);return deliveryInd;case PduHeaders.MESSAGE_TYPE_ACKNOWLEDGE_IND:AcknowledgeInd acknowledgeInd=new AcknowledgeInd(mHeaders);return acknowledgeInd;case PduHeaders.MESSAGE_TYPE_READ_ORIG_IND:ReadOrigInd readOrigInd=new ReadOrigInd(mHeaders);return readOrigInd;case PduHeaders.MESSAGE_TYPE_READ_REC_IND:ReadRecInd readRecInd=new ReadRecInd(mHeaders);return readRecInd;default :log("Parser doesn't support this message type in this version!");return null;}}  }
class C{  @Entrypoint @Unpreemptible public static void throwPendingException(){  JNIEnvironment me=RVMThread.getCurrentThread().getJNIEnv();  if (VM.VerifyAssertions)   VM._assert(me.pendingException != null);  Throwable pe=me.pendingException;  me.pendingException=null;  me.hasPendingException=0;  RuntimeEntrypoints.athrow(pe);}  }
class C{  @Override protected void finalize() throws Throwable {  super.finalize();  styledAttributes.recycle();}  }
class C{  private void assertStringLength(int len) throws EncodingException {  int maxLen=ctx.getMaxStringLength();  if (maxLen > 0 && len > maxLen) {    final EncodingException encodingException=new EncodingException(StatusCodes.Bad_EncodingLimitsExceeded,"MaxStringLength " + maxLen + " < "+ len);    logger.warn("assertStringLength: failed",encodingException);    throw encodingException;  }}  }
class C{  @SuppressWarnings("signedness") public static int compareUnsigned(@Unsigned byte x,@Unsigned byte y){  return compareUnsigned(toUnsignedInt(x),toUnsignedInt(y));}  }
class C{  public static Ed25519GroupElement toGroupElement(final byte[] bytes){  final boolean shouldBeNegative=(bytes[31] >> 7) != 0;  bytes[31]&=0x7f;  final BigInteger y=MathUtils.toBigInteger(bytes);  final BigInteger x=getAffineXFromAffineY(y,shouldBeNegative);  return Ed25519GroupElement.p3(toFieldElement(x),toFieldElement(y),Ed25519Field.ONE,toFieldElement(x.multiply(y).mod(Ed25519Field.P)));}  }
class C{  @Override public void write(final int b) throws IOException {  throw new UnsupportedOperationException();}  }
class C{  public NoParameterValueException(String message){  super(message);}  }
class C{  private void createFramebufferTexture(){  this.tex=glGenTextures();  glBindTexture(GL_TEXTURE_2D,tex);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  protected void onSetupCompleted(){}  }
class C{  public void actionPerformed(ActionEvent e){  resizeFrame(increment,increment);}  }
class C{  public boolean containsLink(HGPersistentHandle handle){  if (handle == null)   throw new NullPointerException("HGStore.getLink called with a null handle.");  if (overlayGraph.get() != null && overlayGraph.get().getLink(handle) != null)   return true;  return impl.containsLink(handle);}  }
class C{  public void reverse(){switch (joinType) {case INNER:case FULL_OUTER:    break;case LEFT:  joinType=JoinType.RIGHT;break;case RIGHT:joinType=JoinType.LEFT;break;default :throw new AkibanInternalException("Cannot reverse " + joinType + " join");}Joinable temp=left;left=right;right=temp;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public static BuiltinStrings v(){  if (builtin == null)   builtin=new BuiltinStrings();  return builtin;}  }
class C{  protected void fireDOMFocusInEvent(EventTarget target,EventTarget relatedTarget){  DocumentEvent docEvt=(DocumentEvent)((Element)target).getOwnerDocument();  DOMUIEvent uiEvt=(DOMUIEvent)docEvt.createEvent("UIEvents");  uiEvt.initUIEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusIn",true,false,null,0);  target.dispatchEvent(uiEvt);}  }
class C{  public static boolean hasDiscoveryProvider(EntityPlayer player){  InventoryPlayer inventory=player.inventory;  for (int i=0; i < inventory.getSizeInventory(); i++) {    ItemStack stack=inventory.getStackInSlot(i);    if (stack != null && stack.getItem() instanceof IDiscoveryProvider)     return true;  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNodeNS02.class,args);}  }
class C{  public Promise<Void> delete(Resource... resources){  return delete(false,resources);}  }
class C{  @Friend(ConnectionTcp.class) void freeConnection(ConnectionTcp conn){  if (removeConnection(conn)) {    _idleConn.free(conn);  } else   if (isActive()) {    System.out.println("Possible Double Close: " + this + " "+ conn);  }}  }
class C{  public Property dayOfYear(){  return new Property(this,getChronology().dayOfYear());}  }
class C{  public ServerMessenger(final String name,final int portNumber) throws IOException {  this(name,portNumber,new DefaultObjectStreamFactory());}  }
class C{  protected int read(byte[] buffer,int offset,int length) throws IOException {  return mTiffStream.read(buffer,offset,length);}  }
class C{  public boolean is(String word){  return m_Words.contains(word.toLowerCase());}  }
class C{  static PageStreamData create(PageStore store,int pageId,int trunk,int logKey){  return new PageStreamData(store,pageId,trunk,logKey);}  }
class C{  private void initialize(){  historyListFiltersButtonGroup=new DeselectableButtonGroup();  this.setLayout(new BorderLayout());  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(600,200);  }  this.add(getHistoryPanel(),java.awt.BorderLayout.CENTER);  this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK,false));  this.setMnemonic(Constant.messages.getChar("history.panel.mnemonic"));}  }
class C{  public XYPlot(DataSource... data){  super();  pointRenderersByDataSource=new HashMap<DataSource,List<PointRenderer>>(data.length);  lineRenderersByDataSource=new HashMap<DataSource,List<LineRenderer>>(data.length);  areaRenderersByDataSource=new HashMap<DataSource,List<AreaRenderer>>(data.length);  setPlotArea(new XYPlotArea2D(this));  setLegend(new XYLegend(this));  for (  DataSource source : data) {    add(source);  }  createDefaultAxes();  autoscaleAxes();  createDefaultAxisRenderers();  for (  String axisName : getAxesNames()) {    getAxis(axisName).addAxisListener(this);  }}  }
class C{  public Value evaluate(Context cx,AttributeListNode node){  final String attrs=NodeMagic.getSortedAttributeString(node," ");  if (attrs.length() > 0) {    out.append(attrs).append(" ");  }  return null;}  }
class C{  @Override public void buildClusterer(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_replaceMissing=new ReplaceMissingValues();  m_replaceMissing.setInputFormat(data);  data=weka.filters.Filter.useFilter(data,m_replaceMissing);  m_theInstances=new Instances(data,0);  if (m_wrappedClusterer == null) {    throw new Exception("No clusterer has been set");  }  m_wrappedClusterer.buildClusterer(data);  m_model=new DiscreteEstimator[m_wrappedClusterer.numberOfClusters()][data.numAttributes()];  m_modelNormal=new double[m_wrappedClusterer.numberOfClusters()][data.numAttributes()][2];  double[][] weights=new double[m_wrappedClusterer.numberOfClusters()][data.numAttributes()];  m_priors=new double[m_wrappedClusterer.numberOfClusters()];  for (int i=0; i < m_wrappedClusterer.numberOfClusters(); i++) {    m_priors[i]=1.0;    for (int j=0; j < data.numAttributes(); j++) {      if (data.attribute(j).isNominal()) {        m_model[i][j]=new DiscreteEstimator(data.attribute(j).numValues(),true);      }    }  }  Instance inst=null;  int[] clusterIndex=new int[data.numInstances()];  for (int i=0; i < data.numInstances(); i++) {    inst=data.instance(i);    int cluster=m_wrappedClusterer.clusterInstance(inst);    m_priors[cluster]+=inst.weight();    for (int j=0; j < data.numAttributes(); j++) {      if (!inst.isMissing(j)) {        if (data.attribute(j).isNominal()) {          m_model[cluster][j].addValue(inst.value(j),inst.weight());        } else {          m_modelNormal[cluster][j][0]+=inst.weight() * inst.value(j);          weights[cluster][j]+=inst.weight();        }      }    }    clusterIndex[i]=cluster;  }  for (int j=0; j < data.numAttributes(); j++) {    if (data.attribute(j).isNumeric()) {      for (int i=0; i < m_wrappedClusterer.numberOfClusters(); i++) {        if (weights[i][j] > 0) {          m_modelNormal[i][j][0]/=weights[i][j];        }      }    }  }  for (int i=0; i < data.numInstances(); i++) {    inst=data.instance(i);    for (int j=0; j < data.numAttributes(); j++) {      if (!inst.isMissing(j)) {        if (data.attribute(j).isNumeric()) {          double diff=m_modelNormal[clusterIndex[i]][j][0] - inst.value(j);          m_modelNormal[clusterIndex[i]][j][1]+=inst.weight() * diff * diff;        }      }    }  }  for (int j=0; j < data.numAttributes(); j++) {    if (data.attribute(j).isNumeric()) {      for (int i=0; i < m_wrappedClusterer.numberOfClusters(); i++) {        if (weights[i][j] > 0) {          m_modelNormal[i][j][1]=Math.sqrt(m_modelNormal[i][j][1] / weights[i][j]);        } else         if (weights[i][j] <= 0) {          m_modelNormal[i][j][1]=Double.MAX_VALUE;        }        if (m_modelNormal[i][j][1] <= m_minStdDev) {          m_modelNormal[i][j][1]=data.attributeStats(j).numericStats.stdDev;          if (m_modelNormal[i][j][1] <= m_minStdDev) {            m_modelNormal[i][j][1]=m_minStdDev;          }        }      }    }  }  Utils.normalize(m_priors);}  }
class C{  public Object[] toArray(){  Object[] result=new Object[size];  System.arraycopy(elementData,0,result,0,size);  return result;}  }
class C{  public void testConstructorRandom(){  int bitLen=75;  Random rnd=new Random();  BigInteger aNumber=new BigInteger(bitLen,rnd);  assertTrue("incorrect bitLength",aNumber.bitLength() <= bitLen);}  }
class C{  private void addVertex(Object start,Set<Dependency> set){  vertices.put(start,set);  edges.addAll(set);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public long size(){  return this.size;}  }
class C{  public MalformedCookieException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void checkCurrentMaps(HashMap<String,HashMap<String,NamedIcon>> iconMaps){  String family=null;  HashMap<String,HashMap<String,HashMap<String,NamedIcon>>> families=ItemPalette.getLevel4FamilyMaps(_itemType);  Iterator<Entry<String,HashMap<String,HashMap<String,NamedIcon>>>> it=families.entrySet().iterator();  while (it.hasNext()) {    Entry<String,HashMap<String,HashMap<String,NamedIcon>>> entry=it.next();    family=entry.getKey();    if (log.isDebugEnabled()) {      log.debug("FamilyKey= " + family);    }    Iterator<Entry<String,HashMap<String,NamedIcon>>> iter=entry.getValue().entrySet().iterator();    while (iter.hasNext()) {      Entry<String,HashMap<String,NamedIcon>> ent=iter.next();      HashMap<String,NamedIcon> subFamily=iconMaps.get(ent.getKey());      if (!mapsAreEqual(ent.getValue(),subFamily)) {        family=null;        break;      }    }    if (family != null) {      _family=family;      return;    }  }  if (ItemPalette.getLevel4Family(_itemType,_family) != null) {    JOptionPane.showMessageDialog(_paletteFrame,Bundle.getMessage("DuplicateFamilyName",_family,_itemType),Bundle.getMessage("WarningTitle"),JOptionPane.WARNING_MESSAGE);    _family=null;  }  if (!_suppressNamePrompts) {    if (_family == null || _family.trim().length() == 0) {      _family=JOptionPane.showInputDialog(_paletteFrame,Bundle.getMessage("NoFamilyName"),Bundle.getMessage("questionTitle"),JOptionPane.QUESTION_MESSAGE);      if (_family == null || _family.trim().length() == 0) {        _family=null;        _suppressNamePrompts=true;        return;      }    }    int result=JOptionPane.showConfirmDialog(_paletteFrame,Bundle.getMessage("UnkownFamilyName",_family),Bundle.getMessage("questionTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);    if (result == JOptionPane.YES_OPTION) {      ItemPalette.addLevel4Family(_paletteFrame,_itemType,_family,iconMaps);    } else     if (result == JOptionPane.NO_OPTION) {      _suppressNamePrompts=true;    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static int[] toIntArray(String str,boolean shouldThrow){  if (str == null) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException();  }  int length=str.length();  if (length == 0) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int count=1;  boolean wasDot=true;  char c;  for (int i=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      if (wasDot) {        if (!shouldThrow) {          return null;        }        throw new IllegalArgumentException("Incorrect syntax");      }      wasDot=true;      count++;    } else     if (c >= '0' && c <= '9') {      wasDot=false;    } else {      if (!shouldThrow) {        return null;      }      throw new IllegalArgumentException("Incorrect syntax");    }  }  if (wasDot) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  if (count < 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int[] oid=new int[count];  for (int i=0, j=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      j++;    } else {      oid[j]=oid[j] * 10 + c - 48;    }  }  if (oid[0] > 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  } else   if (oid[0] != 2 && oid[1] > 39) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  return oid;}  }
class C{  public Boolean isRemoteUserHandling(){  return remoteUserHandling;}  }
class C{  @Override public boolean hasCustomName(){  return this.customName != null && this.customName.length() > 0;}  }
class C{  public static void incr(String counterName){  com.twitter.heron.api.metric.GlobalMetrics.incr(counterName);}  }
class C{  public boolean isParseStatusDirty(org.apache.nutch.storage.ParseStatus value){  return isDirty(15);}  }
class C{  public final void copyFrom(final DesktopLayout layout){  final WindowInfoImpl[] infos=layout.getAllInfos();  for (  WindowInfoImpl info1 : infos) {    WindowInfoImpl info=myRegisteredId2Info.get(info1.getId());    if (info != null) {      info.copyFrom(info1);      continue;    }    info=myUnregisteredId2Info.get(info1.getId());    if (info != null) {      info.copyFrom(info1);    } else {      myUnregisteredId2Info.put(info1.getId(),info1.copy());    }  }  myRegisteredInfos=null;  myUnregisteredInfos=null;  myAllInfos=null;  normalizeOrder(getAllInfos(ToolWindowAnchor.TOP));  normalizeOrder(getAllInfos(ToolWindowAnchor.LEFT));  normalizeOrder(getAllInfos(ToolWindowAnchor.BOTTOM));  normalizeOrder(getAllInfos(ToolWindowAnchor.RIGHT));}  }
class C{  public EsriPolygonList(int initialCapacity){  super(initialCapacity);}  }
class C{  private CollectorUtil(){  instanceNotAllowed(getClass());}  }
class C{  public static vec3 r_lerp(vec3 a,vec3 b,float t){  float dx=b.m[0] - a.m[0];  float dy=b.m[1] - a.m[1];  float dz=b.m[2] - a.m[2];  float x=a.m[0] + t * dx;  float y=a.m[1] + t * dy;  float z=a.m[2] + t * dz;  vec3 result=new vec3(x,y,z);  return result;}  }
class C{  public void addTimeStamp(TemporalRecord timeStamp){  timeStamps.add(timeStamp);  setNeedToRegenerate(true);}  }
class C{  public void addSegment(Segment segment){  getSegments().add(segment);}  }
class C{  public Status(String code){  this.code=code;}  }
class C{  public TerminalEmulatorDeviceConfiguration withLineBufferScrollbackSize(int lineBufferScrollbackSize){  if (this.lineBufferScrollbackSize == lineBufferScrollbackSize) {    return this;  } else {    return new TerminalEmulatorDeviceConfiguration(lineBufferScrollbackSize,blinkLengthInMilliSeconds,cursorStyle,cursorColor,cursorBlinking);  }}  }
class C{  public void toData(DataOutput out) throws IOException {  out.writeLong(this.maxMemoryBytes);  out.writeFloat(this.criticalThreshold);  out.writeFloat(this.evictionThreshold);}  }
class C{  @Inline public static boolean stateIsBeingForwarded(Word header){  return (header.toInt() & FORWARDING_MASK) == BEING_FORWARDED;}  }
class C{  public Map<String,Object> map(){  return Collections.unmodifiableMap(vals);}  }
class C{  public void remember(EditSession editSession){  FawePlayer fp=editSession.getPlayer();  int limit=fp == null ? Integer.MAX_VALUE : fp.getLimit().MAX_HISTORY;  remember(editSession,true,false,limit);}  }
class C{  public void onDetach(){  if (!mIsAttached) {    return;  }  mActualDrawable.setCallback(null);  mAttachedView=null;  mActualDrawable.setCurrent(mPlaceHolder);}  }
class C{  public void ensureParsedTransactions() throws ProtocolException {  try {    maybeParseTransactions();  } catch (  LazyParseException e) {    if (e.getCause() instanceof ProtocolException)     throw (ProtocolException)e.getCause();    throw new ProtocolException(e);  }}  }
class C{  public Synchronizer(ODataEntry odata_entry) throws ODataException {  Map<String,Object> props=odata_entry.getProperties();  String label=(String)props.get(SynchronizerEntitySet.LABEL);  String schedule=(String)props.get(SynchronizerEntitySet.SCHEDULE);  String request=(String)props.get(SynchronizerEntitySet.REQUEST);  String service_url=(String)props.get(SynchronizerEntitySet.SERVICE_URL);  if (schedule == null || schedule.isEmpty() || service_url == null || service_url.isEmpty()) {    throw new ODataException("Missing required parameter");  }  if (request != null && !request.equals("start") && !request.equals("stop")) {    throw new ODataException("Unknown request " + request);  }  try {    this.syncConf=SYNCHRONIZER_SERVICE.createSynchronizer(label,"ODataProductSynchronizer",schedule);    updateFromEntry(odata_entry);  } catch (  ParseException e) {    throw new ODataException(e);  }}  }
class C{  public void addValue(Object value){  attributes.add(new AnnotationAttribute("value",value));}  }
class C{  public RectListManager(int capacity){  this.rects=new Rectangle[capacity];}  }
class C{  public void tuneSplitters(){  NodeList<Node> nodes=splitPanel.getElement().getChildNodes();  boolean firstFound=false;  for (int i=0; i < nodes.getLength(); i++) {    Node node=nodes.getItem(i);    if (node.hasChildNodes()) {      com.google.gwt.dom.client.Element el=node.getFirstChild().cast();      if ("gwt-SplitLayoutPanel-HDragger".equals(el.getClassName())) {        if (!firstFound) {          firstFound=true;          tuneLeftSplitter(el);        } else {          tuneRightSplitter(el);        }      } else       if ("gwt-SplitLayoutPanel-VDragger".equals(el.getClassName())) {        tuneBottomSplitter(el);      }    }  }}  }
class C{  public Wine runBackground(File executableToRun,List<String> arguments,Map<String,String> environment) throws ScriptFailureException {  File workingDirectory=executableToRun.getParentFile();  runBackground(workingDirectory,executableToRun.getAbsolutePath(),arguments,environment);  return this;}  }
class C{  public static RDFNode evaluate(Resource expression,Model queryModel,QuerySolution bindings){  return evaluate(expression,ARQFactory.get().getDataset(queryModel),bindings);}  }
class C{  private RollingFileAppender<ILoggingEvent> createDailyLogAppender(LoggerContext context,Encoder<ILoggingEvent> encoder){  RollingFileAppender<ILoggingEvent> appender=new RollingFileAppender<>();  appender.setEncoder(encoder);  appender.setFile(file);  TimeBasedRollingPolicy<ILoggingEvent> rolling=new TimeBasedRollingPolicy<>();  rolling.setContext(context);  rolling.setParent(appender);  rolling.setFileNamePattern(getFileWithPattern("%d"));  if (maxNumberLogs.isPresent() && maxNumberLogs.get() >= 0) {    rolling.setMaxHistory(maxNumberLogs.get());  } else {    rolling.setMaxHistory(1);  }  if (divideBasedOnSize()) {    SizeAndTimeBasedFNATP<ILoggingEvent> sizeBased=new SizeAndTimeBasedFNATP<>();    sizeBased.setContext(context);    sizeBased.setMaxFileSize(getMaxFileSize());    sizeBased.setTimeBasedRollingPolicy(rolling);    rolling.setTimeBasedFileNamingAndTriggeringPolicy(sizeBased);  }  rolling.start();  if (rolling.getTimeBasedFileNamingAndTriggeringPolicy() != null) {    rolling.getTimeBasedFileNamingAndTriggeringPolicy().start();  }  appender.setRollingPolicy(rolling);  return appender;}  }
class C{  public int rows(){  return rows;}  }
class C{  @SuppressWarnings("unchecked") public static <E>ConstantTable<E> of(Collection<? super E> elements){  return new ConstantTable<E>(Equality.DEFAULT,(E[])elements.toArray(new Object[elements.size()]));}  }
class C{  public StringContext(String string,URI inputPath,URI outputPath,Options options){  super(inputPath,outputPath,options);  this.string=string;}  }
class C{  public void addDays(final int days){  setMillis(getChronology().days().add(getMillis(),days));}  }
class C{  public void clearHistoryForConversation(Conversation conversation){  if (conversation == null) {    Log.d(TAG,"clearHistoryForConversation: conversation is null");    return;  }  try {    Map<String,HistoryEntry> history=conversation.getRawHistory();    for (    Map.Entry<String,HistoryEntry> entry : history.entrySet()) {      ArrayList<Long> textMessagesIds=new ArrayList<>(entry.getValue().getTextMessages().size());      for (      TextMessage textMessage : entry.getValue().getTextMessages().values()) {        textMessagesIds.add(textMessage.getId());      }      DeleteBuilder<HistoryText,Integer> deleteTextHistoryBuilder=getHelper().getTextHistoryDao().deleteBuilder();      deleteTextHistoryBuilder.where().in(HistoryText.COLUMN_ID_NAME,textMessagesIds);      deleteTextHistoryBuilder.delete();      ArrayList<String> callIds=new ArrayList<>(entry.getValue().getCalls().size());      for (      HistoryCall historyCall : entry.getValue().getCalls().values()) {        callIds.add(historyCall.getCallId().toString());      }      DeleteBuilder<HistoryCall,Integer> deleteCallsHistoryBuilder=getHelper().getHistoryDao().deleteBuilder();      deleteCallsHistoryBuilder.where().in(HistoryCall.COLUMN_CALL_ID_NAME,callIds);      deleteCallsHistoryBuilder.delete();    }  } catch (  SQLException e) {    e.printStackTrace();  }}  }
class C{  public ScheduleDataGetter(String year,Semester semester,String subject) throws Exception {  Pattern yearPattern=Pattern.compile("\\d{4}");  Matcher yearMatcher=yearPattern.matcher(year);  Pattern subjectPattern=Pattern.compile("[A-Z]{4}");  Matcher subjectMatcher=subjectPattern.matcher(subject);  if (!yearMatcher.matches() || !subjectMatcher.matches())   throw new Exception("Bad input: " + year + semester+ " "+ subject);  this.year=year;  if (semester == Semester.SPRING) {    this.semester=1;  } else   if (semester == Semester.SUMMER) {    this.semester=2;  } else   if (semester == Semester.FALL) {    this.semester=3;  }  this.subject=subject;  String term=year + this.semester + "1";  OutputStreamWriter writer=null;  try {    String urlParameters="term_in=" + term + "&sel_subj=dummy&sel_day=dummy&sel_schd=dummy&sel_insm=dummy&sel_camp=dummy&sel_levl=dummy&sel_sess=dummy&sel_instr=dummy&sel_ptrm=dummy&sel_attr=dummy&sel_subj="+ subject+ "&sel_crse=&sel_title=&sel_schd=%25&sel_insm=%25&sel_from_cred=&sel_to_cred=&sel_camp=%25&sel_levl=%25&sel_ptrm=%25&sel_instr=%25&sel_attr=%25&begin_hh=0&begin_mi=0&begin_ap=a&end_hh=0&end_mi=0&end_ap=a";    URL url=new URL("https://compass-ssb.tamu.edu/pls/PROD/bwckschd.p_get_crse_unsec");    URLConnection conn=url.openConnection();    conn.setDoOutput(true);    writer=new OutputStreamWriter(conn.getOutputStream());    writer.write(urlParameters);    writer.flush();    data=convertStreamToString(conn.getInputStream());  }  finally {    if (writer != null)     writer.close();  }}  }
class C{  public Path[] repoFiles(){  return repoFiles;}  }
class C{  public Builder operationTimeout(Duration operationTimeout){  this.operationTimeout=operationTimeout;  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public float nextFloat(){  float result=super.nextFloat();  println("nextFloat=" + result);  return result;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.278 -0400",hash_original_method="5EB8E94EADAFBCF57E85D04CE454DC2B",hash_generated_method="5B6A2C96854362656679742F272D83FF") public String encode(String value) throws EncoderException {  if (value == null) {    return null;  }  return encode(value,getDefaultCharset());}  }
class C{  public synchronized final Scheme unregister(String name){  if (name == null)   throw new IllegalArgumentException("Name must not be null.");  Scheme gone=registeredSchemes.remove(name);  return gone;}  }
class C{  private boolean notifyListenerResponseReceive(HttpMessage httpMessage){  if (parentServer.excludeUrl(httpMessage.getRequestHeader().getURI())) {    return true;  }  ProxyListener listener=null;  List<ProxyListener> listenerList=parentServer.getListenerList();  for (int i=0; i < listenerList.size(); i++) {    listener=listenerList.get(i);    try {      if (!listener.onHttpResponseReceive(httpMessage)) {        return false;      }    } catch (    Exception e) {      log.error("An error occurred while notifying listener:",e);    }  }  return true;}  }
class C{  public void printTopSpaces(char[] text) throws IOException {  if (prettyPrinter.getFormat()) {    int nl=newlines(text);    for (int i=0; i < nl; i++) {      printNewline();    }  } else {    printCharacters(text);  }}  }
class C{  public final AssertSubscriber<T> assertNoError(){  int s=errors.size();  if (s == 1) {    Throwable e=errors.get(0);    String valueAndClass=e == null ? null : e + " (" + e.getClass().getSimpleName()+ ")";    throw new AssertionError("Error present: " + valueAndClass,null);  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  public static void logFileCreation(final Logger logger,final String path){  logger.logMessage(Level.INFO,"New File created:\t" + path);}  }
class C{  private void doLoad(HttpServletRequest request,InstructorEditForm frm,DepartmentalInstructor inst,String instructorId){  frm.setInstructorId(instructorId);  NameFormat nameFormat=NameFormat.fromReference(sessionContext.getUser().getProperty(UserProperty.NameFormat));  frm.setName(nameFormat.format(inst));  frm.setEmail(inst.getEmail());  String puid=inst.getExternalUniqueId();  if (puid != null) {    frm.setPuId(puid);  }  if (inst.getPositionType() != null) {    frm.setPosType(inst.getPositionType().getLabel().trim());  }  if (inst.getCareerAcct() != null) {    frm.setCareerAcct(inst.getCareerAcct().trim());  } else   if (DepartmentalInstructor.canLookupInstructor()) {    try {      UserInfo user=DepartmentalInstructor.lookupInstructor(puid);      if (user != null && user.getUserName() != null)       frm.setCareerAcct(user.getUserName());    } catch (    Exception e) {    }  }  if (inst.getNote() != null) {    frm.setNote(inst.getNote().trim());  }  request.getSession().setAttribute(Constants.DEPT_ID_ATTR_NAME,inst.getDepartment().getUniqueId().toString());  String orderStr=request.getParameter("order");  int cols=2;  int order=1;  if (orderStr != null && orderStr.trim().length() != 0) {    try {      order=Integer.parseInt(orderStr);      if (Math.abs(order) > cols)       order=1;    } catch (    Exception e) {      order=1;    }  }  frm.setIgnoreDist(inst.isIgnoreToFar() == null ? false : inst.isIgnoreToFar().booleanValue());}  }
class C{  protected void write(OutStream out) throws IOException {  super.write(out);  transform.write(out);}  }
class C{  public JaspellTernarySearchTrie(Path file,boolean compression) throws IOException {  this();  BufferedReader in;  if (compression)   in=new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(Files.newInputStream(file)),StandardCharsets.UTF_8)); else   in=Files.newBufferedReader(file,StandardCharsets.UTF_8);  try {    String word;    int pos;    Float occur, one=new Float(1);    while ((word=in.readLine()) != null) {      pos=word.indexOf("\t");      occur=one;      if (pos != -1) {        occur=Float.parseFloat(word.substring(pos + 1).trim());        word=word.substring(0,pos);      }      String key=word.toLowerCase(locale);      if (rootNode == null) {        rootNode=new TSTNode(key.charAt(0),null);      }      TSTNode node=null;      if (key.length() > 0 && rootNode != null) {        TSTNode currentNode=rootNode;        int charIndex=0;        while (true) {          if (currentNode == null)           break;          int charComp=compareCharsAlphabetically(key.charAt(charIndex),currentNode.splitchar);          if (charComp == 0) {            charIndex++;            if (charIndex == key.length()) {              node=currentNode;              break;            }            currentNode=currentNode.relatives[TSTNode.EQKID];          } else           if (charComp < 0) {            currentNode=currentNode.relatives[TSTNode.LOKID];          } else {            currentNode=currentNode.relatives[TSTNode.HIKID];          }        }        Float occur2=null;        if (node != null)         occur2=((Float)(node.data));        if (occur2 != null) {          occur+=occur2.floatValue();        }        currentNode=getOrCreateNode(word.trim().toLowerCase(locale));        currentNode.data=occur;      }    }  }  finally {    IOUtils.close(in);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String hexToString(String hex){  ByteBuffer buffer=ByteBuffer.allocate(hex.length() / 2);  for (int i=0; i < hex.length(); i+=2) {    buffer.put((byte)Integer.parseInt(hex.substring(i,i + 2),16));  }  buffer.rewind();  return UTF_8.decode(buffer).toString();}  }
class C{  @Nullable public AnnotationResultType doAnnotate(InitialInfoType collectedInfo){  return null;}  }
class C{  public static double cdf(double x,double shape,double scale){  if (x <= 0.0 || shape <= 0.0) {    return 0.0;  }  return GammaFunction.incompleteGammaQ(shape,scale / x);}  }
class C{  private static LookupResult findByClassLoading(String name,CompilationUnit compilationUnit,GroovyClassLoader loader){  Class cls;  try {    cls=loader.loadClass(name,false,true);  } catch (  ClassNotFoundException cnfe) {    LookupResult lr=tryAsScript(name,compilationUnit,null);    return lr;  }catch (  CompilationFailedException cfe) {    throw new GroovyBugError("The lookup for " + name + " caused a failed compilaton. There should not have been any compilation from this call.",cfe);  }  if (cls == null)   return null;  ClassNode cn=ClassHelper.make(cls);  if (cls.getClassLoader() != loader) {    return tryAsScript(name,compilationUnit,cn);  }  return new LookupResult(null,cn);}  }
class C{  public void shiftRight(Object inserted,int first,int length){  int mask=(data.length << shift) - 1;  int head=(first + offset) & mask;  int tail=(first + offset + length) & mask;  if (shift == 0) {    int n=tail - head;    if (head > tail) {      System.arraycopy(data,0,data,1,tail);      data[0]=data[mask];      n=mask - head;    }    System.arraycopy(data,head,data,head + 1,n);    data[head]=inserted;  } else   if ((head <= tail) && ((head >> shift) == (tail >> shift))) {    F(head >> shift).shiftRight(inserted,head,length);  } else {    int high=tail >> shift;    int low=(high != 0) ? high - 1 : data.length - 1;    F(high).shiftRight(F(low).get(-1),0,tail);    while (low != (head >> shift)) {      high=low;      low=(high != 0) ? high - 1 : data.length - 1;      F(high).offset--;      F(high).set(0,F(low).get(-1));    }    F(low).shiftRight(inserted,head,mask - head);  }}  }
class C{  public PreferenceManager(String prefFileName,Map defaults){  this.prefFileName=prefFileName;  this.defaults=defaults;  internal=new Properties();}  }
class C{  private void afterProcessTask(){  if (m_ids != null && m_ids.length > 0) {    log.config("");    if (m_AD_Process_ID == 119)     printInvoices(); else     if (m_AD_Process_ID == 118)     printShipments();  }}  }
class C{  public Matcher matcher(MatchResult res,int groupId){  Matcher m=new Matcher(this);  if (res instanceof Matcher) {    m.setTarget((Matcher)res,groupId);  } else {    m.setTarget(res.targetChars(),res.start(groupId) + res.targetStart(),res.length(groupId));  }  return m;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.671 -0500",hash_original_method="82873A3E6B9086EDEC305DD96F7BB3F0",hash_generated_method="FEB1D33AD053F278407D256FDB7876DA") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static String toAsciiString(byte[] raw){  return new String(toAsciiChars(raw));}  }
class C{  @Override protected void handleRemoved(final RPEntity entity){  entity.stopAttacking(this);  super.handleRemoved(entity);}  }
class C{  public String createAjaxParamsFromUpdateAreas(List<ModelForm.UpdateArea> updateAreas,String extraParams,Map<String,? extends Object> context){  if (updateAreas == null) {    return "";  }  StringBuilder ajaxUrl=new StringBuilder();  boolean firstLoop=true;  for (  ModelForm.UpdateArea updateArea : updateAreas) {    if (firstLoop) {      firstLoop=false;    } else {      ajaxUrl.append(",");    }    String targetUrl=updateArea.getAreaTarget(context);    String ajaxParams=getAjaxParamsFromTarget(targetUrl);    if (UtilValidate.isNotEmpty(extraParams)) {      if (ajaxParams.length() > 0 && !extraParams.startsWith("&")) {        ajaxParams+="&";      }      ajaxParams+=extraParams;    }    ajaxUrl.append(updateArea.getAreaId()).append(",");    try {      appendOfbizUrl(ajaxUrl,UtilHttp.removeQueryStringFromTarget(targetUrl));    } catch (    IOException e) {      throw UtilMisc.initCause(new InternalError(e.getMessage()),e);    }    ajaxUrl.append(",").append(ajaxParams);  }  return ajaxUrl.toString();}  }
class C{  public WiThrottleCreationAction(){  this(Bundle.getMessage("MenuStartWiThrottleServer"));}  }
class C{  public String businessObjectDataKeyToString(String namespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,int businessObjectFormatVersion,String businessObjectDataPartitionValue,List<String> businessObjectDataSubPartitionValues,int businessObjectDataVersion){  return String.format("namespace: \"%s\", businessObjectDefinitionName: \"%s\", businessObjectFormatUsage: \"%s\", businessObjectFormatFileType: \"%s\", " + "businessObjectFormatVersion: %d, businessObjectDataPartitionValue: \"%s\", businessObjectDataSubPartitionValues: \"%s\", " + "businessObjectDataVersion: %d",namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,businessObjectDataPartitionValue,org.springframework.util.CollectionUtils.isEmpty(businessObjectDataSubPartitionValues) ? "" : StringUtils.join(businessObjectDataSubPartitionValues,","),businessObjectDataVersion);}  }
class C{  private void calculateStatesStatesPruning(int[] states1,BigDecimal[] matrices1,int[] states2,BigDecimal[] matrices2,BigDecimal[] partials3){  int v=0;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      int state1=states1[k];      int state2=states2[k];      int w=l * matrixSize;      if (state1 < stateCount && state2 < stateCount) {        for (int i=0; i < stateCount; i++) {          partials3[v]=matrices1[w + state1].multiply(matrices2[w + state2],precision);          v++;          w+=stateCount;        }      } else       if (state1 < stateCount) {        for (int i=0; i < stateCount; i++) {          partials3[v]=matrices1[w + state1];          v++;          w+=stateCount;        }      } else       if (state2 < stateCount) {        for (int i=0; i < stateCount; i++) {          partials3[v]=matrices2[w + state2];          v++;          w+=stateCount;        }      } else {        for (int j=0; j < stateCount; j++) {          partials3[v]=BigDecimal.ONE;          v++;        }      }    }  }}  }
class C{  public SourcePathImplementation(SourceRoots sourceRoots,AntProjectHelper projectHelper,PropertyEvaluator evaluator){  assert sourceRoots != null && projectHelper != null && evaluator != null;  this.sourceRoots=sourceRoots;  sourceRoots.addPropertyChangeListener(this);  this.projectHelper=projectHelper;  this.evaluator=evaluator;  evaluator.addPropertyChangeListener(this);}  }
class C{  protected FontRenderContext(){  aaHintValue=VALUE_TEXT_ANTIALIAS_DEFAULT;  fmHintValue=VALUE_FRACTIONALMETRICS_DEFAULT;  defaulting=true;}  }
class C{  public final static double distance(double x1,double y1,double x2,double y2){  double xdiff=x2 - x1;  double ydiff=y2 - y1;  return Math.sqrt((xdiff * xdiff + ydiff * ydiff));}  }
class C{  public SelectionDialog(Dialog owner,String key,int mode,Object[] arguments){  super(owner,I18N_PREFIX_SELECTION + key,ModalityType.APPLICATION_MODAL,arguments);  this.mode=mode;}  }
class C{  public static SourceLineAnnotation fromVisitedInstructionRange(BytecodeScanningDetector visitor,int startPC,int endPC){  LineNumberTable lineNumberTable=getLineNumberTable(visitor);  String className=visitor.getDottedClassName();  String sourceFile=visitor.getSourceFile();  if (lineNumberTable == null) {    return createUnknown(className,sourceFile,startPC,endPC);  }  int startLine=lineNumberTable.getSourceLine(startPC);  int endLine=lineNumberTable.getSourceLine(endPC);  return new SourceLineAnnotation(className,sourceFile,startLine,endLine,startPC,endPC);}  }
class C{  private ShapeFileImporter(){}  }
class C{  public boolean refresh(){  enforceSealed();  if (!canPerformRequestOverConnection(mSourceNodeId)) {    return false;  }  AccessibilityInteractionClient client=AccessibilityInteractionClient.getInstance();  AccessibilityNodeInfo refreshedInfo=client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId,mWindowId,mSourceNodeId,0);  if (refreshedInfo == null) {    return false;  }  init(refreshedInfo);  refreshedInfo.recycle();  return true;}  }
class C{  public ElemTemplateElement replaceChild(ElemTemplateElement newChildElem,ElemTemplateElement oldChildElem){  if (oldChildElem == null || oldChildElem.getParentElem() != this)   return null;  ElemTemplateElement prev=oldChildElem.getPreviousSiblingElem();  if (null != prev)   prev.m_nextSibling=newChildElem;  if (m_firstChild == oldChildElem)   m_firstChild=newChildElem;  newChildElem.m_parentNode=this;  oldChildElem.m_parentNode=null;  newChildElem.m_nextSibling=oldChildElem.m_nextSibling;  oldChildElem.m_nextSibling=null;  return newChildElem;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.UNSCHEDULE_TIME_EVENT__TIME_EVENT:    setTimeEvent((TimeEvent)null);  return;}super.eUnset(featureID);}  }
class C{  private void readQuery(InH3 hIn,OutboxAmp outbox,HeadersAmp headers) throws IOException {  GatewayReply from=readFromAddress(hIn);  long qid=hIn.readLong();  long timeout=120 * 1000L;  MethodRefHamp methodHamp=null;  MethodRefAmp methodRef=null;  try {    try {      methodHamp=readMethod(hIn);    } catch (    Throwable e) {      skipArgs(hIn);      throw e;    }    methodRef=methodHamp.getMethod();    ClassLoader loader=methodHamp.getClassLoader();    Thread thread=Thread.currentThread();    thread.setContextClassLoader(loader);    Object[] args=readArgs(methodHamp,hIn);    QueryGatewayReadMessage_N msg=new QueryGatewayReadMessage_N(outbox,getInboxCaller(),headers,from,qid,methodRef.serviceRef(),methodRef.method(),timeout,args);    msg.offer(_queueTimeout);    if (log.isLoggable(_logLevel)) {      log.log(_logLevel,"hamp-query " + methodRef.getName() + " "+ debugArgs(args)+ " (in "+ this+ ")"+ "\n  {qid:"+ qid+ ", to:"+ methodRef.serviceRef()+ ", from:"+ from+ ","+ headers+ "}");    }  } catch (  Throwable e) {    if (log.isLoggable(Level.FINE)) {      log.fine("hamp-query error " + e + " (in "+ this+ ")"+ "\n  {id:"+ qid+ ", from:"+ from+ ","+ headers+ ","+ methodRef+ "}");    }    if (log.isLoggable(Level.FINER)) {      log.log(Level.FINER,e.toString(),e);    }    ServiceRefAmp serviceRef=getInboxCaller().serviceRef();    MethodRefError methodErr;    if (methodRef == null) {      methodErr=new MethodRefError(serviceRef,"unknown-method");    } else {      methodErr=new MethodRefError(serviceRef,methodRef.getName());    }    QueryGatewayReadMessage_N queryRef=new QueryGatewayReadMessage_N(outbox,getInboxCaller(),headers,from,qid,serviceRef,methodErr.method(),timeout,null);    queryRef.toSent();    if (e instanceof ServiceException) {      queryRef.fail(e);      outbox.flush();    } else {      HampException exn=new HampException(L.l("{0}\n  while reading {1}",e.toString(),methodRef),e);      queryRef.fail(exn);    }  }}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  public final boolean hasMoreChoicePoints(){  if (m_bNoMore)   return false; else   if (m_wam.isNeverRun())   return true; else   if (m_wam.isClosed())   return false;  return m_wam.hasMoreChoicePoints();}  }
class C{  @SuppressWarnings("rawtypes") public static String toJSONString(Map map){  if (map == null)   return "null";  StringBuffer sb=new StringBuffer();  boolean first=true;  Iterator iter=map.entrySet().iterator();  sb.append('{');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Map.Entry entry=(Map.Entry)iter.next();    toJSONString(String.valueOf(entry.getKey()),entry.getValue(),sb);  }  sb.append('}');  return sb.toString();}  }
class C{  public IssueMatcher startsWith(String expectedPrefix){  return addPropertyMatcher(StringPropertyMatcher.Mode.StartsWith,false,expectedPrefix);}  }
class C{  @Override public void allocateNew(final int valueCount){}  }
class C{  public static String formatPercentage(Double percentage){  if (percentage == null)   return "";  return formatPercentage(percentage.doubleValue());}  }
class C{  public int consume(){  int consumedAmount;  if (Math.abs(left) < Math.abs(getRegen())) {    consumedAmount=left;    left=0;  } else {    consumedAmount=getRegen();    left-=getRegen();  }  return consumedAmount;}  }
class C{  public static AllocationId newRelocation(AllocationId allocationId){  assert allocationId.getRelocationId() == null;  return new AllocationId(allocationId.getId(),Strings.randomBase64UUID());}  }
class C{  private void parseMenu(XmlPullParser parser,AttributeSet attrs,Menu menu) throws XmlPullParserException, IOException {  MenuState menuState=new MenuState(menu);  int eventType=parser.getEventType();  String tagName;  boolean lookingForEndOfUnknownTag=false;  String unknownTagName=null;  do {    if (eventType == XmlPullParser.START_TAG) {      tagName=parser.getName();      if (tagName.equals(XML_MENU)) {        eventType=parser.next();        break;      }      throw new RuntimeException("Expecting menu, got " + tagName);    }    eventType=parser.next();  } while (eventType != XmlPullParser.END_DOCUMENT);  boolean reachedEndOfMenu=false;  while (!reachedEndOfMenu) {switch (eventType) {case XmlPullParser.START_TAG:      if (lookingForEndOfUnknownTag) {        break;      }    tagName=parser.getName();  if (tagName.equals(XML_GROUP)) {    menuState.readGroup(attrs);  } else   if (tagName.equals(XML_ITEM)) {    menuState.readItem(attrs);  } else   if (tagName.equals(XML_MENU)) {    SubMenu subMenu=menuState.addSubMenuItem();    parseMenu(parser,attrs,subMenu);  } else {    lookingForEndOfUnknownTag=true;    unknownTagName=tagName;  }break;case XmlPullParser.END_TAG:tagName=parser.getName();if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {lookingForEndOfUnknownTag=false;unknownTagName=null;} else if (tagName.equals(XML_GROUP)) {menuState.resetGroup();} else if (tagName.equals(XML_ITEM)) {if (!menuState.hasAddedItem()) {if (menuState.itemActionProvider != null && menuState.itemActionProvider.hasSubMenu()) {  menuState.addSubMenuItem();} else {  menuState.addItem();}}} else if (tagName.equals(XML_MENU)) {reachedEndOfMenu=true;}break;case XmlPullParser.END_DOCUMENT:throw new RuntimeException("Unexpected end of document");}eventType=parser.next();}}  }
class C{  public double[] array(int index){  return buffers[index];}  }
class C{  public void testEvaluation(){  PolynomialTerm term0=new PolynomialTerm(1.0,new int[]{0});  PolynomialTerm term1=new PolynomialTerm(1.0,new int[]{1});  PolynomialTerm term2=new PolynomialTerm(1.0,new int[]{2,3});  List terms=new ArrayList();  terms.add(term0);  terms.add(term1);  terms.add(term2);  Polynomial p=new Polynomial(terms);  double[] values=new double[]{1.0,2.0,3.0,4.0};  assertEquals(15.0,p.evaluate(values),0.00001);}  }
class C{  public SparseArray(){  this(10);}  }
class C{  private void initProducerConsumerLists(){  consumerList.clear();  producerList.clear();  for (int i=0; i < dataTable.getLogicalColumnCount(); i++) {    addColumnAttribute(i,consumerList);    addColumnAttribute(i,producerList);  }}  }
class C{  @Override public NextAction handleRead(@NotNull final FilterChainContext ctx){  if (i++ % 100_000 == 0)   System.out.print(".");  final Object peerAddress=ctx.getAddress();  Buffer msg=ctx.<Buffer>getMessage();  if (msg.remaining() >= 8) {    if (count % 10000 == 0)     System.out.print(".");    if (count >= 0) {      times[count]=System.nanoTime() - msg.getLong();      if (count == times.length - 1) {        Arrays.sort(times);        System.out.printf("\nLoop back echo latency was %.1f/%.1f %,d/%,d %," + "d/%d us for 50/90 99/99.9 99.99/worst %%tile%n",times[count / 2] / 1e3,times[count * 9 / 10] / 1e3,times[count - count / 100] / 1000,times[count - count / 1000] / 1000,times[count - count / 10000] / 1000,times[count - 1] / 1000);        try {          finished.await();        } catch (        InterruptedException e) {          e.printStackTrace();        }        return ctx.getStopAction();      }    }    count++;  }  buffer2.clear();  buffer2.putLong(System.nanoTime());  buffer2.flip();  ctx.write(peerAddress,buffer2,null);  return ctx.getStopAction();}  }
class C{  public boolean forEachKey(TDoubleProcedure procedure){  return forEach(procedure);}  }
class C{  protected Ignite startGridWithIgfs(String gridName,String igfsName,IgfsMode mode,@Nullable IgfsSecondaryFileSystem secondaryFs,@Nullable IgfsIpcEndpointConfiguration restCfg) throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName(igfsName);  igfsCfg.setBlockSize(IGFS_BLOCK_SIZE);  igfsCfg.setDefaultMode(mode);  igfsCfg.setIpcEndpointConfiguration(restCfg);  igfsCfg.setSecondaryFileSystem(secondaryFs);  igfsCfg.setPrefetchBlocks(PREFETCH_BLOCKS);  igfsCfg.setSequentialReadsBeforePrefetch(SEQ_READS_BEFORE_PREFETCH);  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setNearConfiguration(null);  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(2));  dataCacheCfg.setBackups(0);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  dataCacheCfg.setOffHeapMaxMemory(0);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName(gridName);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  HadoopConfiguration hadoopCfg=createHadoopConfiguration();  if (hadoopCfg != null)   cfg.setHadoopConfiguration(hadoopCfg);  return G.start(cfg);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Source.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);  builder.addAttribute(GdAttributes.ETAG);  builder.addAttribute(GdAttributes.KIND);  builder.addAttribute(GdAttributes.FIELDS);  builder.addAttribute(XML_BASE);  builder.addElement(TOTAL_RESULTS);  builder.addElement(START_INDEX);  builder.addElement(ITEMS_PER_PAGE);  builder.addElement(BatchOperation.KEY);  builder.addUndeclaredElementMarker();  builder.addElement(Entry.KEY);}  }
class C{  private static ClassNode buildTypeWithInterfaces(ClassNode baseType1,ClassNode baseType2,Collection<ClassNode> interfaces){  boolean noInterface=interfaces.isEmpty();  if (noInterface) {    if (baseType1.equals(baseType2))     return baseType1;    if (baseType1.isDerivedFrom(baseType2))     return baseType2;    if (baseType2.isDerivedFrom(baseType1))     return baseType1;  }  if (OBJECT_TYPE.equals(baseType1) && OBJECT_TYPE.equals(baseType2) && interfaces.size() == 1) {    if (interfaces instanceof List) {      return ((List<ClassNode>)interfaces).get(0);    }    return interfaces.iterator().next();  }  LowestUpperBoundClassNode type;  ClassNode superClass;  String name;  if (baseType1.equals(baseType2)) {    if (OBJECT_TYPE.equals(baseType1)) {      superClass=baseType1;      name="Virtual$Object";    } else {      superClass=baseType1;      name="Virtual$" + baseType1.getName();    }  } else {    superClass=OBJECT_TYPE;    if (baseType1.isDerivedFrom(baseType2)) {      superClass=baseType2;    } else     if (baseType2.isDerivedFrom(baseType1)) {      superClass=baseType1;    }    name="CommonAssignOf$" + baseType1.getName() + "$"+ baseType2.getName();  }  Iterator<ClassNode> itcn=interfaces.iterator();  while (itcn.hasNext()) {    ClassNode next=itcn.next();    if (superClass.isDerivedFrom(next) || superClass.implementsInterface(next)) {      itcn.remove();    }  }  ClassNode[] interfaceArray=interfaces.toArray(new ClassNode[interfaces.size()]);  Arrays.sort(interfaceArray,INTERFACE_CLASSNODE_COMPARATOR);  type=new LowestUpperBoundClassNode(name,superClass,interfaceArray);  return type;}  }
class C{  public void requestContactCapabilities(){  Log.i(TAG,"testRequestContactCapabilities");  try {    capabilityApi.requestContactCapabilities(remote);  } catch (  RcsServiceNotAvailableException e) {    Log.e(TAG,"RCS service not available");  }catch (  RcsServiceNotRegisteredException e) {    Log.e(TAG,"RCS service not registered");  }catch (  RcsGenericException e) {    Log.e(TAG,"Unexpected error",e);  }}  }
class C{  public void checkOut(View view){  try {    PlacePicker.IntentBuilder intentBuilder=new PlacePicker.IntentBuilder();    Intent intent=intentBuilder.build(this);    startActivityForResult(intent,REQUEST_PLACE_PICKER);  } catch (  GooglePlayServicesRepairableException e) {    GoogleApiAvailability.getInstance().getErrorDialog(this,e.getConnectionStatusCode(),REQUEST_PLACE_PICKER);  }catch (  GooglePlayServicesNotAvailableException e) {    Toast.makeText(this,"Please install Google Play Services!",Toast.LENGTH_LONG).show();  }}  }
class C{  void selectInDirection(final KeyEvent e){  int keyCode=e.getKeyCode();  if (model.getSelectedOperators().isEmpty()) {    for (    ExecutionUnit unit : model.getProcesses()) {      if (unit.getNumberOfOperators() > 0) {        selectOperator(unit.getOperators().get(0),true);      }    }  } else {    Operator current=model.getSelectedOperators().get(0);    if (current.getParent() != model.getDisplayedChain()) {      return;    }    Rectangle2D pos=model.getOperatorRect(current);    ExecutionUnit unit=current.getExecutionUnit();    if (unit == null) {      return;    }    double smallestDistance=Double.POSITIVE_INFINITY;    Operator closest=null;    for (    Operator other : unit.getOperators()) {      Rectangle2D otherPos=model.getOperatorRect(other);      boolean ok=false;switch (keyCode) {case KeyEvent.VK_LEFT:        ok=otherPos.getMinX() < pos.getMinX();      break;case KeyEvent.VK_RIGHT:    ok=otherPos.getMaxX() > pos.getMaxX();  break;case KeyEvent.VK_UP:ok=otherPos.getMinY() < pos.getMinY();break;case KeyEvent.VK_DOWN:ok=otherPos.getMaxY() > pos.getMaxY();break;}if (ok) {double dx=otherPos.getCenterX() - pos.getCenterX();double dy=otherPos.getCenterY() - pos.getCenterY();double dist=dx * dx + dy * dy;if (dist < smallestDistance) {smallestDistance=dist;closest=other;}}}if (closest != null) {selectOperator(closest,!e.isShiftDown());}}}  }
class C{  public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive())   return "";  Integer InventoryLine=(Integer)mTab.getValue("M_InventoryLine_ID");  BigDecimal bd=null;  if (InventoryLine != null && InventoryLine.intValue() != 0) {    MInventoryLine _ILine=new MInventoryLine(ctx,InventoryLine,null);    Integer M_Product_ID=(Integer)mTab.getValue("M_Product_ID");    Integer M_Locator_ID=(Integer)mTab.getValue("M_Locator_ID");    Integer M_AttributeSetInstance_ID=0;    if ((M_Product_ID != null && M_Product_ID != _ILine.getM_Product_ID()) || (M_Locator_ID != null && M_Locator_ID != _ILine.getM_Locator_ID())) {      if (M_Product_ID == _ILine.getM_Product_ID()) {        M_AttributeSetInstance_ID=(Integer)mTab.getValue("M_AttributeSetInstance_ID");        if (M_AttributeSetInstance_ID == null)         M_AttributeSetInstance_ID=0;      } else {        mTab.setValue("M_AttributeSetInstance_ID",null);      }      try {        bd=setQtyBook(M_AttributeSetInstance_ID,M_Product_ID,M_Locator_ID);        mTab.setValue("QtyBook",bd);      } catch (      Exception e) {        return mTab.setValue("QtyBook",bd);      }    }    return "";  }  int M_Product_ID=0;  Integer Product=(Integer)mTab.getValue("M_Product_ID");  if (Product != null)   M_Product_ID=Product.intValue();  if (M_Product_ID == 0)   return "";  int M_Locator_ID=0;  Integer Locator=(Integer)mTab.getValue("M_Locator_ID");  if (Locator != null)   M_Locator_ID=Locator.intValue();  if (M_Locator_ID == 0)   return "";  int M_AttributeSetInstance_ID=0;  Integer ASI=(Integer)mTab.getValue("M_AttributeSetInstance_ID");  if (ASI != null)   M_AttributeSetInstance_ID=ASI.intValue();  if (MInventoryLine.COLUMNNAME_M_Product_ID.equals(mField.getColumnName())) {    if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_Product_ID") == M_Product_ID) {      M_AttributeSetInstance_ID=Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID");    } else {      M_AttributeSetInstance_ID=0;    }    if (M_AttributeSetInstance_ID != 0)     mTab.setValue(MInventoryLine.COLUMNNAME_M_AttributeSetInstance_ID,M_AttributeSetInstance_ID); else     mTab.setValue(MInventoryLine.COLUMNNAME_M_AttributeSetInstance_ID,null);  }  try {    bd=setQtyBook(M_AttributeSetInstance_ID,M_Product_ID,M_Locator_ID);    mTab.setValue("QtyBook",bd);  } catch (  Exception e) {    return mTab.setValue("QtyBook",bd);  }  log.info("M_Product_ID=" + M_Product_ID + ", M_Locator_ID="+ M_Locator_ID+ ", M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID+ " - QtyBook="+ bd);  return "";}  }
class C{  public static void handleUnsaveForms(final GUIFactory currentGUI,final Values commonValues,final PdfDecoderInt decode_pdf){  if (!org.jpedal.DevFlags.GUITESTINGINPROGRESS) {    if (commonValues.isFormsChanged()) {      final int n=currentGUI.showConfirmDialog(Messages.getMessage("PdfViewerFormsUnsavedOptions.message"),Messages.getMessage("PdfViewerFormsUnsavedWarning.message"),JOptionPane.YES_NO_OPTION);      if (n == JOptionPane.YES_OPTION) {        SaveForm.saveChangedForm(currentGUI,decode_pdf,commonValues);      }    }  }  commonValues.setFormsChanged(false);  currentGUI.setViewerTitle(null);}  }
class C{  public static boolean isLikelyToPerform(GL20 gl){  int maxVecs=usableMaxUniformVectors(gl);  return (maxVecs >= 16 * BASE_VEC4S_PER_QUAD);}  }
class C{  public static <T,V>ObjectAnimator ofObject(T target,Property<T,V> property,TypeEvaluator<V> evaluator,V... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public void createNetworkFromVISUMFile(File file) throws IOException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  network=NetworkUtils.createNetwork();  BufferedReader reader=new BufferedReader(new FileReader(file));  String line=reader.readLine();  if (!"$VISION".equals(line))   throw new IOException("File does not start with '$VISION'. Are you sure it is a VISUM network file?");  line=reader.readLine();  while (line != null) {    for (    TABLE_BEGINNINGS beginning : TABLE_BEGINNINGS.values())     if (line.startsWith(beginning.languages[language])) {      Method m=VisumFile2MatsimNetwork.class.getMethod(beginning.function,new Class[]{int[].class,BufferedReader.class});      String[] attributes=line.substring(beginning.languages[language].length()).split(";");      int[] indices=new int[beginning.columns.length];      for (int i=0; i < beginning.columns.length; i++)       indices[i]=getAttributeIndex(beginning.columns[i],attributes);      m.invoke(this,new Object[]{indices,reader});      System.out.println("Finished: " + beginning.name());    }    line=reader.readLine();  }}  }
class C{  public void write(java.io.OutputStream out) throws java.io.IOException {  ByteBuffer buffer=getByteBuffer();  if (buffer.hasArray()) {    int offset=buffer.arrayOffset() + getByteBufferPosition();    out.write(buffer.array(),offset,size());  } else {synchronized (buffer) {      if (_bytes == null) {        _bytes=new byte[size()];      }      buffer.position(getByteBufferPosition());      buffer.get(_bytes);      out.write(_bytes);    }  }}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private int findSelectionIndex(String selectedSerial){  if (selectedSerial == null) {    return 0;  }  for (int i=0; i < devices_.length; i++) {    if (devices_[i].getSerialNumber().equals(selectedSerial)) {      return i;    }  }  return 0;}  }
class C{  public void addNewarray(int atype,int length){  addIconst(length);  addOpcode(NEWARRAY);  add(atype);}  }
class C{  private void createModuleAndSpecInNonUIThread(final String rootFilename,final boolean importExisting,final String specName){  Assert.isNotNull(rootFilename);  Assert.isNotNull(specName);  final Job job=new NewSpecHandlerJob(specName,rootFilename,importExisting);  job.schedule();}  }
class C{  public Matrix times(Matrix B){  if (B.m != n) {    throw new IllegalArgumentException("Matrix inner dimensions must agree.");  }  Matrix X=new Matrix(m,B.n);  double[][] C=X.getArray();  double[] Bcolj=new double[n];  for (int j=0; j < B.n; j++) {    for (int k=0; k < n; k++) {      Bcolj[k]=B.A[k][j];    }    for (int i=0; i < m; i++) {      double[] Arowi=A[i];      double s=0;      for (int k=0; k < n; k++) {        s+=Arowi[k] * Bcolj[k];      }      C[i][j]=s;    }  }  return X;}  }
class C{  protected void completeCommandline(Commandline cmd){  super.completeCommandline(cmd);  if (run != null) {    appendOptionArgument(cmd,"--run",run);  }  if (compileFlags != null) {    appendOptionArgument(cmd,"--compile",compileFlags);  }  if (autoExportMavenDependencies) {    appendOption(cmd,"--auto-export-maven-dependencies");  }  if (flatClasspath) {    appendOption(cmd,"--flat-classpath");  }  if (linkWithCurrentDistribution) {    appendOption(cmd,"--link-with-current-distribution");  }  cmd.createArgument().setValue(module);  if (!args.isEmpty()) {    for (    Arg arg : args) {      appendOption(cmd,arg.value);    }  }}  }
class C{  public static final boolean isNarrowing(int left,int right){  int right2left=right + (left << 4);  return right2left >= 0 && right2left < MAX_CONVERSIONS && (CONVERSIONS[right2left] & (IDENTITY | NARROWING)) != 0;}  }
class C{  public Node.Nodes parseTagFileDirectives(String inFileName) throws FileNotFoundException, JasperException, IOException {  boolean isTagFileSave=isTagFile;  boolean directiveOnlySave=directiveOnly;  isTagFile=true;  directiveOnly=true;  Node.Nodes page=doParse(inFileName,null,(URL)ctxt.getTagFileJarUrls().get(inFileName));  directiveOnly=directiveOnlySave;  isTagFile=isTagFileSave;  return page;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.RANGE_CONSTRAINT;}  }
class C{  public static void checkErrors(){  if (errors > 0)   throw new GeneratorException();}  }
class C{  private void writeElement(OutputNode node,Object item) throws Exception {  Class expect=type.getType();  String key=entry.getKey();  if (key == null) {    key=context.getName(expect);  }  String name=style.getElement(key);  OutputNode child=node.getChild(name);  if (item != null) {    if (!isOverridden(child,item)) {      root.write(child,item);    }  }}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  protected final void replayMocks(){  assertFalse("Mocks have already been set to replay",mocksReplayed);  if (usePowerMock) {    PowerMock.replayAll();  } else {    EasyMock.replay(mocks.toArray());  }  for (  IMocksControl mockControl : mockControls) {    mockControl.replay();  }  mocksReplayed=true;}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDefinitionTesting(String namespaceCode,String dataProviderName){  namespaceDaoTestHelper.createNamespaceEntity(namespaceCode);  dataProviderDaoTestHelper.createDataProviderEntity(dataProviderName);}  }
class C{  public static ImageLoader build(Context context){  return new ImageLoader(context);}  }
class C{  public Password(char[] password){  this.wrappedPassword=password;  nulled=false;}  }
class C{  public void update(final long message_period,final boolean byUserQuery){  this.retrieval_last=new Date();  this.retrieval_count++;  if (byUserQuery) {    this.query_count++;    this.query_last=this.retrieval_last;  }  long new_message_period=message_period;  int new_messages_per_day=(int)(DAY_MILLIS / new_message_period);  if (new_message_period == Long.MAX_VALUE || new_messages_per_day == 0) {    this.message_period=DAY_MILLIS;  } else {    this.message_period=this.message_period == 0 ? new_message_period : (this.message_period + new_message_period) / 2;  }  this.messages_per_day=(int)(DAY_MILLIS / this.message_period);  double ttl_factor=DAO.getConfig("retrieval.queries.ttlfactor",0.75d);  long pivot_period=DAO.getConfig("retrieval.queries.pivotfrequency",10000);  this.expected_next=new Date(this.retrieval_last.getTime() + ((long)(ttl_factor * this.message_period)));  long strategic_period=(this.message_period < pivot_period ? pivot_period + 1000 * (long)Math.pow((pivot_period - this.message_period) / 1000,3) : this.message_period);  long waitingtime=Math.min(DAY_MILLIS,(long)(ttl_factor * RETRIEVAL_CONSTANT * strategic_period));  this.retrieval_next=new Date(this.retrieval_last.getTime() + waitingtime);}  }
class C{  private void showAlbumArt(){  mPageContainer.setVisibility(View.INVISIBLE);  mAlbumArtSmall.setVisibility(View.GONE);  mQueueSwitch.setVisibility(View.VISIBLE);  fade(mPageContainer,0f);  fade(mAlbumArt,1f);}  }
class C{  private int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  for (int i=0; i < blockSize; i++) {    cbcV[i]^=in[inOff + i];  }  int length=cipher.processBlock(cbcV,0,out,outOff);  System.arraycopy(out,outOff,cbcV,0,cbcV.length);  return length;}  }
class C{  private String replace(String replacement,boolean all){  reset();  StringBuffer sb=new StringBuffer();  while (find()) {    appendReplacement(sb,replacement);    if (!all) {      break;    }  }  appendTail(sb);  return sb.toString();}  }
class C{  private void invitePeopleToNewRoom(){  final Intent settingsIntent=new Intent(VectorHomeActivity.this,VectorRoomCreationActivity.class);  settingsIntent.putExtra(MXCActionBarActivity.EXTRA_MATRIX_ID,mSession.getMyUserId());  VectorHomeActivity.this.startActivity(settingsIntent);}  }
class C{  private static void ensureDbIsSetup(){synchronized (s_dbSetupLock) {    if (s_isDbSetup) {      return;    }    System.getProperties().setProperty("derby.system.home",getCurrentDataBaseDir().getAbsolutePath());    Runtime.getRuntime().addShutdownHook(new Thread(null));    s_isDbSetup=true;  }  final Thread backupThread=new Thread(null,"TripleA Database Backup Thread");  backupThread.setDaemon(true);  backupThread.start();}  }
class C{  public void retry(){  retrying=true;  NetworkManager.getInstance().addToQueue(this,true);}  }
class C{  public void cleanup(){}  }
class C{  public Builder allowPoolingConnections(final boolean allowPoolingConnections){  clientConfig.setAllowPoolingConnections(allowPoolingConnections);  clientConfig.setAllowPoolingSslConnections(allowPoolingConnections);  return this;}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  return newVector.elements();}  }
class C{  private OverriddenCucumberOptionsParameters overrideParametersWithCucumberOptions(){  final OverriddenCucumberOptionsParameters overriddenParameters=new OverriddenCucumberOptionsParameters();  overriddenParameters.setTags(this.tags).setGlue(this.glue).setStrict(this.strict).setFormat(this.format).setMonochrome(this.monochrome);  overriddenParameters.overrideParametersWithCucumberOptions(cucumberOptions);  return overriddenParameters;}  }
class C{  public static boolean writeFile(String filePath,InputStream is,boolean append){  return writeFile(filePath != null ? new File(filePath) : null,is,append);}  }
class C{  final public SyntaxTreeNode Recursive() throws ParseException {  SyntaxTreeNode tn, sn[];  Token t;  bpa("Recursive");  expecting="RECURSIVE";  t=jj_consume_token(RECURSIVE);  addHeir(new SyntaxTreeNode(mn,t));  expecting="Identifier, operator or _";  tn=ConstantDeclarationItems();  addHeir(tn);  expecting=",";  label_6:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:      ;    break;default :  jj_la1[15]=jj_gen;break label_6;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier, operator or _";tn=ConstantDeclarationItems();addHeir(tn);expecting="`,' or `)'";}sn=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Recursive,sn);}throw new Error("Missing return statement in function");}  }
class C{  @Override public void titleChanged(TitleChangeEvent event){  event.setChart(this);  notifyListeners(event);}  }
class C{  private void cancelFuture(IgniteInternalFuture<?> fut){  try {    fut.cancel();  } catch (  IgniteCheckedException e) {    U.error(log,"Failed to cancel task: " + fut,e);  }}  }
class C{  public static ReilInstruction createDiv(final Address address,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  return new ReilInstruction(address,ReilMnemonics.DIV,firstOperand,secondOperand,thirdOperand);}  }
class C{  public QuartzScheduler(QuartzSchedulerResources resources,long idleWaitTime,@Deprecated long dbRetryInterval) throws SchedulerException {  this.resources=resources;  if (resources.getJobStore() instanceof JobListener) {    addInternalJobListener((JobListener)resources.getJobStore());  }  this.schedThread=new QuartzSchedulerThread(this,resources);  ThreadExecutor schedThreadExecutor=resources.getThreadExecutor();  schedThreadExecutor.execute(this.schedThread);  if (idleWaitTime > 0) {    this.schedThread.setIdleWaitTime(idleWaitTime);  }  jobMgr=new ExecutingJobsManager();  addInternalJobListener(jobMgr);  errLogger=new ErrorLogger();  addInternalSchedulerListener(errLogger);  signaler=new SchedulerSignalerImpl(this,this.schedThread);  getLog().info("Quartz Scheduler v." + getVersion() + " created.");}  }
class C{  public boolean isInterviewOver(){  Object oo=get_Value(COLUMNNAME_IsInterviewOver);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.BEFORE_CODE___OPERATION_NAME_1:    setOperationName_1(OPERATION_NAME_1_EDEFAULT);  return;case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_11:getAnonymous_beforeCode_1_1().clear();return;case UmplePackage.BEFORE_CODE___CODE_1:setCode_1(CODE_1_EDEFAULT);return;case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_21:getAnonymous_beforeCode_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case CURSOR_ID:  return isSetCursorId();case VALUES:return isSetValues();}throw new IllegalStateException();}  }
class C{  void expireOldIntervals(BasicInterval newInterval){  for (Iterator<BasicInterval> e=iterator(); e.hasNext(); ) {    MappedBasicInterval bi=(MappedBasicInterval)e.next();    int newStart=newInterval.getBegin();    if (bi.endsAfter(newStart))     break;    if (LinearScan.VERBOSE_DEBUG)     System.out.println("Expire " + bi);    freeInterval(bi);    e.remove();  }}  }
class C{  public final boolean isStatic(){  return (this.modifiers & (ClassFileConstants.AccStatic | ClassFileConstants.AccInterface)) != 0 || (this.tagBits & TagBits.IsNestedType) == 0;}  }
class C{  protected void handlePortStatusMessage(OFPortStatus m,boolean doNotify){  if (sw == null) {    String msg=getSwitchStateMessage(m,"State machine error: switch is null. Should never happen");    throw new SwitchStateException(msg);  }  Collection<PortChangeEvent> changes=sw.processOFPortStatus(m);  if (doNotify) {    for (    PortChangeEvent ev : changes)     switchManager.notifyPortChanged(sw,ev.port,ev.type);  }}  }
class C{  public void addFeatures(Collection<Feature> f){  features.addAll(f);}  }
class C{  private void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;    String trxName=Trx.createTrxName();    MInvoice mi=new MInvoice(Env.getCtx(),record_id,trxName);    fIsPaid.setSelected(mi.isPaid());    fIsSOTrx.setSelected(mi.isSOTrx());    mi=null;    Trx.get(trxName,false).close();  } else {    String id;    id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",true);    if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))     fBPartner_ID.setValue(new Integer(id));    id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Order_ID",true);    if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))     fOrder_ID.setValue(new Integer(id));    id=Env.getContext(Env.getCtx(),p_WindowNo,"IsSOTrx",true);    if (id != null && id.length() != 0 && (id == "Y" || id == "N")) {      fIsSOTrx.setSelected(id == "Y");    }    if (value != null && value.length() > 0) {      fDocumentNo.setValue(value);    } else {      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Invoice_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();        String trxName=Trx.createTrxName();        MInvoice mi=new MInvoice(Env.getCtx(),record_id,trxName);        fIsPaid.setSelected(mi.isPaid());        fIsSOTrx.setSelected(mi.isSOTrx());        mi=null;        Trx.get(trxName,false).close();      }    }  }}  }
class C{  public JBBPOut Var(final JBBPOutVarProcessor processor,final Object... args) throws IOException {  assertNotEnded();  JBBPUtils.assertNotNull(processor,"Var processor must not be null");  if (this.processCommands) {    this.processCommands=processor.processVarOut(this,this.outStream,args);  }  return this;}  }
class C{  public int provideBlockThreshold(){  return 1000;}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  private void handleAddRevokeUser(TriggerProcess process,LocalizerFacade facade) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  VOTriggerProcess vo=TriggerProcessAssembler.toVOTriggerProcess(process,facade);  String subscriptionId=getParamValue(process.getParamValueForName(TriggerProcessParameterName.SUBSCRIPTION),String.class);  List<VOUsageLicense> usersToBeAdded=ParameterizedTypes.list(getParamValue(process.getParamValueForName(TriggerProcessParameterName.USERS_TO_ADD),List.class),VOUsageLicense.class);  List<VOUser> usersToBeRevoked=ParameterizedTypes.list(getParamValue(process.getParamValueForName(TriggerProcessParameterName.USERS_TO_REVOKE),List.class),VOUser.class);  serviceClient.onAddRevokeUser(VOConverter.convertToApi(vo),subscriptionId,VOCollectionConverter.convertList(usersToBeAdded,org.oscm.vo.VOUsageLicense.class),VOCollectionConverter.convertList(usersToBeRevoked,org.oscm.vo.VOUser.class));  updateProcessState(process);}  }
class C{  public static Icon gray(Icon icon){  Image img=getImage(icon);  if (img == null)   return icon;  img=gray(img);  return new IconUIResource(new ImageIcon(img));}  }
class C{  static MovieToXbmcNfoConnector createInstanceFromMovie(Movie movie){  MovieToXbmcNfoConnector xbmc=null;  List<Object> unsupportedTags=new ArrayList<>();  for (  MediaFile mf : movie.getMediaFiles(MediaFileType.NFO)) {    Path file=mf.getFileAsPath();    if (Files.exists(file)) {      try {        xbmc=parseNFO(file);      } catch (      Exception e) {        LOGGER.error("failed to parse " + mf.getFilename(),e);      }    }    if (xbmc != null) {      break;    }  }  if (xbmc == null) {    xbmc=new MovieToXbmcNfoConnector();  } else {    for (    Object obj : xbmc.actors) {      if (!(obj instanceof Producer) && !(obj instanceof Actor)) {        unsupportedTags.add(obj);      }    }  }  xbmc.title=movie.getTitle();  xbmc.originaltitle=movie.getOriginalTitle();  xbmc.rating=movie.getRating();  xbmc.votes=movie.getVotes();  if (movie.getTop250() == 0) {    xbmc.top250="";  } else {    xbmc.top250=String.valueOf(movie.getTop250());  }  xbmc.year=movie.getYear();  xbmc.premiered=movie.getReleaseDateFormatted();  xbmc.plot=movie.getPlot();  if (StringUtils.isNotBlank(xbmc.plot) && xbmc.plot.length() > 200) {    int spaceIndex=xbmc.plot.indexOf(" ",200);    if (spaceIndex > 0) {      xbmc.outline=xbmc.plot.substring(0,spaceIndex) + "...";    } else {      xbmc.outline=xbmc.plot;    }  } else   if (StringUtils.isNotBlank(xbmc.plot)) {    xbmc.outline=xbmc.plot;  }  xbmc.tagline=movie.getTagline();  xbmc.runtime=String.valueOf(movie.getRuntime());  String artworkUrl=movie.getArtworkUrl(MediaFileType.POSTER);  if (artworkUrl.matches("https?://.*")) {    xbmc.thumb=artworkUrl;  } else {    xbmc.thumb="";  }  artworkUrl=movie.getArtworkUrl(MediaFileType.FANART);  if (artworkUrl.matches("https?://.*")) {    xbmc.fanart=artworkUrl;  } else {    xbmc.fanart="";  }  xbmc.id=movie.getImdbId();  xbmc.tmdbId=movie.getTmdbId();  xbmc.ids.putAll(movie.getIds());  if (StringUtils.isNotEmpty(movie.getProductionCompany())) {    xbmc.studio=Arrays.asList(movie.getProductionCompany().split("\\s*[,\\/]\\s*"));  }  xbmc.country=movie.getCountry();  xbmc.watched=movie.isWatched();  if (xbmc.watched) {    xbmc.playcount=1;  } else {    xbmc.playcount=0;  }  xbmc.languages=movie.getSpokenLanguages();  if (movie.getCertification() != null) {    xbmc.certification=CertificationStyle.formatCertification(movie.getCertification(),MovieModuleManager.MOVIE_SETTINGS.getMovieCertificationStyle());    if (MovieModuleManager.MOVIE_SETTINGS.getCertificationCountry() == CountryCode.US) {      xbmc.mpaa=Certification.getMPAAString(movie.getCertification());    } else {      xbmc.mpaa=CertificationStyle.formatCertification(movie.getCertification(),MovieModuleManager.MOVIE_SETTINGS.getMovieCertificationStyle());    }  }  xbmc.director.clear();  if (StringUtils.isNotEmpty(movie.getDirector())) {    String directors[]=movie.getDirector().split(", ");    for (    String director : directors) {      xbmc.director.add(director);    }  }  xbmc.credits.clear();  if (StringUtils.isNotEmpty(movie.getWriter())) {    String writers[]=movie.getWriter().split(", ");    for (    String writer : writers) {      xbmc.credits.add(writer);    }  }  xbmc.actors.clear();  for (  MovieActor cast : new ArrayList<>(movie.getActors())) {    xbmc.addActor(cast.getName(),cast.getCharacter(),cast.getThumbUrl());  }  xbmc.producers.clear();  for (  MovieProducer producer : new ArrayList<>(movie.getProducers())) {    xbmc.addProducer(producer.getName(),producer.getRole(),producer.getThumbUrl());  }  xbmc.genres.clear();  for (  MediaGenres genre : new ArrayList<>(movie.getGenres())) {    xbmc.genres.add(genre.toString());  }  xbmc.trailer="";  for (  MovieTrailer trailer : new ArrayList<>(movie.getTrailer())) {    if (trailer.getInNfo() && !trailer.getUrl().startsWith("file")) {      xbmc.trailer=prepareTrailerForXbmc(trailer);      break;    }  }  if (xbmc.trailer.isEmpty()) {    xbmc.trailer=null;  }  xbmc.tags.clear();  for (  String tag : new ArrayList<>(movie.getTags())) {    xbmc.tags.add(tag);  }  if (movie.getMovieSet() != null) {    MovieSet movieSet=movie.getMovieSet();    xbmc.set.name=movieSet.getTitle();    xbmc.set.overview=movieSet.getPlot();  } else {    xbmc.set.name="";    xbmc.set.overview="";  }  xbmc.sorttitle=movie.getSortTitle();  if (movie.getMediaSource() != MediaSource.UNKNOWN) {    xbmc.source=movie.getMediaSource().name();  }  for (  MediaFile mediaFile : movie.getMediaFiles(MediaFileType.VIDEO)) {    if (StringUtils.isEmpty(mediaFile.getVideoCodec())) {      break;    }    xbmc.fileinfo.streamdetails.video.codec=mediaFile.getVideoCodec();    xbmc.fileinfo.streamdetails.video.aspect=String.valueOf(mediaFile.getAspectRatio());    xbmc.fileinfo.streamdetails.video.width=mediaFile.getVideoWidth();    xbmc.fileinfo.streamdetails.video.height=mediaFile.getVideoHeight();    xbmc.fileinfo.streamdetails.video.durationinseconds=movie.getRuntimeFromMediaFiles();    if (mediaFile.getVideo3DFormat().equals(MediaFile.VIDEO_3D_SBS) || mediaFile.getVideo3DFormat().equals(MediaFile.VIDEO_3D_HSBS)) {      xbmc.fileinfo.streamdetails.video.stereomode="left_right";    } else     if (mediaFile.getVideo3DFormat().equals(MediaFile.VIDEO_3D_TAB) || mediaFile.getVideo3DFormat().equals(MediaFile.VIDEO_3D_HTAB)) {      xbmc.fileinfo.streamdetails.video.stereomode="top_bottom";    }    xbmc.fileinfo.streamdetails.audio.clear();    for (    MediaFileAudioStream as : mediaFile.getAudioStreams()) {      Audio audio=new Audio();      if (StringUtils.isNotBlank(as.getCodec())) {        audio.codec=as.getCodec().replaceAll("-","_");      } else {        audio.codec=as.getCodec();      }      audio.language=as.getLanguage();      audio.channels=String.valueOf(as.getChannelsAsInt());      xbmc.fileinfo.streamdetails.audio.add(audio);    }    xbmc.fileinfo.streamdetails.subtitle.clear();    for (    MediaFileSubtitle ss : mediaFile.getSubtitles()) {      Subtitle sub=new Subtitle();      sub.language=ss.getLanguage();      xbmc.fileinfo.streamdetails.subtitle.add(sub);    }    break;  }  for (  MediaFile mediaFile : movie.getMediaFiles(MediaFileType.SUBTITLE)) {    for (    MediaFileSubtitle ss : mediaFile.getSubtitles()) {      Subtitle sub=new Subtitle();      sub.language=ss.getLanguage();      xbmc.fileinfo.streamdetails.subtitle.add(sub);    }  }  xbmc.unsupportedElements.addAll(unsupportedTags);  return xbmc;}  }
class C{  private void assertActualSelectionProbabilities(AdaptiveMultimethodVariation variation,double... probabilities){  UniformSelection selection=new UniformSelection();  for (int i=0; i < TestThresholds.SAMPLES; i++) {    variation.evolve(selection.select(variation.getArity(),population));  }  Assert.assertEquals(variation.getNumberOfOperators(),probabilities.length);  for (int i=0; i < variation.getNumberOfOperators(); i++) {    int count=((DummyVariation)variation.getOperator(i)).count;    Assert.assertEquals(probabilities[i],count / (double)TestThresholds.SAMPLES,TestThresholds.STATISTICS_EPS);  }}  }
class C{  public void exportXml(String filepath) throws IOException {  OutputStream outputStream=null;  try {    outputStream=new FileOutputStream(filepath);    exportXml(outputStream);  }  finally {    if (outputStream != null) {      outputStream.close();    }  }}  }
class C{  private UnManagedVolume createUnManagedVolume(StorageVolume driverVolume,com.emc.storageos.db.client.model.StorageSystem storageSystem,com.emc.storageos.db.client.model.StoragePool storagePool,List<UnManagedVolume> unManagedVolumesToCreate,List<UnManagedVolume> unManagedVolumesToUpdate,DbClient dbClient){  boolean newVolume=false;  String unManagedVolumeNatvieGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingVolume(storageSystem.getNativeGuid(),driverVolume.getNativeId());  UnManagedVolume unManagedVolume=DiscoveryUtils.checkUnManagedVolumeExistsInDB(dbClient,unManagedVolumeNatvieGuid);  if (null == unManagedVolume) {    unManagedVolume=new UnManagedVolume();    unManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));    unManagedVolume.setNativeGuid(unManagedVolumeNatvieGuid);    unManagedVolume.setStorageSystemUri(storageSystem.getId());    if (driverVolume.getWwn() == null) {      unManagedVolume.setWwn(String.format("%s:%s",driverVolume.getStorageSystemId(),driverVolume.getNativeId()));    } else {      unManagedVolume.setWwn(driverVolume.getWwn());    }    newVolume=true;  } else {    unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.HAS_REPLICAS.toString(),FALSE);    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.SNAPSHOTS.toString(),new StringSet());    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.FULL_COPIES.toString(),new StringSet());    unManagedVolume.getUnmanagedExportMasks().clear();  }  unManagedVolume.setLabel(driverVolume.getDeviceLabel());  Boolean isVolumeExported=false;  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),isVolumeExported.toString());  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),FALSE);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString(),FALSE);  StringSet deviceLabel=new StringSet();  deviceLabel.add(driverVolume.getDeviceLabel());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.DEVICE_LABEL.toString(),deviceLabel);  StringSet accessState=new StringSet();  accessState.add(driverVolume.getAccessStatus().toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.ACCESS.toString(),accessState);  StringSet provCapacity=new StringSet();  provCapacity.add(String.valueOf(driverVolume.getProvisionedCapacity()));  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);  StringSet allocatedCapacity=new StringSet();  allocatedCapacity.add(String.valueOf(driverVolume.getAllocatedCapacity()));  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  StringSet systemTypes=new StringSet();  systemTypes.add(storageSystem.getSystemType());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);  StringSet nativeId=new StringSet();  nativeId.add(driverVolume.getNativeId());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.NATIVE_ID.toString(),nativeId);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),TRUE);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),driverVolume.getThinlyProvisioned().toString());  unManagedVolume.setStoragePoolUri(storagePool.getId());  StringSet pools=new StringSet();  pools.add(storagePool.getId().toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.STORAGE_POOL.toString(),pools);  StringSet driveTypes=storagePool.getSupportedDriveTypes();  if (null != driveTypes) {    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.DISK_TECHNOLOGY.toString(),driveTypes);  }  StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(dbClient,storagePool.getId(),unManagedVolume.getVolumeCharacterstics().get(UnManagedVolume.SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString()));  log.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));  if (matchedVPools.isEmpty()) {    unManagedVolume.getSupportedVpoolUris().clear();  } else {    unManagedVolume.getSupportedVpoolUris().replace(matchedVPools);    log.info("Replaced Pools : {}",Joiner.on("\t").join(unManagedVolume.getSupportedVpoolUris()));  }  if (newVolume) {    unManagedVolumesToCreate.add(unManagedVolume);  } else {    unManagedVolumesToUpdate.add(unManagedVolume);  }  return unManagedVolume;}  }
class C{  protected AbstractSVGBridge(){}  }
class C{  protected void engineUpdate(byte[] b,int off,int len) throws SignatureException {  msgDigest.update(b,off,len);}  }
class C{  public void clear(){  runLater(null);}  }
class C{  public List<Node> listAvailableNodes(Class<?> type){  List<Node> result=new ArrayList<Node>();  for (  Node node : availableNodes) {    if (type.isAssignableFrom(node.getReturnType())) {      result.add(node);    }  }  return result;}  }
class C{  @Nullable public static List<IdeaPluginDescriptor> loadCachedPlugins() throws IOException {  File file=new File(PathManager.getPluginsPath(),PLUGIN_LIST_FILE);  return file.length() == 0 ? null : loadPluginList(file);}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case DomPackage.COMPOSED_CONTENT__OWNER:    return eInternalContainer().eInverseRemove(this,DomPackage.COMPOSITE__CONTENTS,Composite.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public synchronized void add(String category,double value){  mCategories.add(category);  mValues.add(value);}  }
class C{  public boolean isEmpty(){  return values.isEmpty();}  }
class C{  private void markThisMessageAsRead(Message message){  try {    int mID=message.getID();    if (zulipApp.getPointer() < mID) {      zulipApp.syncPointer(mID);    }    boolean isMessageRead=false;    if (message.getMessageRead() != null) {      isMessageRead=message.getMessageRead();    }    if (!isMessageRead) {      try {        updateBuilder.where().eq(Message.ID_FIELD,message.getID());        updateBuilder.updateColumnValue(Message.MESSAGE_READ_FIELD,true);        updateBuilder.update();      } catch (      SQLException e) {        ZLog.logException(e);      }    }    zulipApp.markMessageAsRead(message);  } catch (  NullPointerException e) {    Log.w("scrolling","Could not find a location to scroll to!");  }}  }
class C{  public static byte[] toByteArray(final InputStream input,final int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != IOUtils.EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  public void emitDirect(int taskId,String streamId,List<Object> tuple){  emitDirect(taskId,streamId,tuple,null);}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public void decrementValue(int row,int column){  if (saveChanges && column >= 0 && column < this.numberColumns && row >= 0 && row < this.numberRows) {    long cellNum=(long)(row) * numberColumns + column;    if ((cellNum > blockEndingCell) || (cellNum < blockStartingCell)) {      if (isDirty) {        writeDataBlock();      }      numReads++;      if (previousRow < row) {        if (currentReadDirection == -1) {          currentReadDirection=0;        }        if (currentReadDirection != 0) {          currentReadDirection=0;          numSwitchReadDirections++;          switchRatio=(double)numSwitchReadDirections / numReads;        }        blockStartingCell=(long)(cellNum - halfBlockSize * switchRatio);      } else {        if (currentReadDirection == -1) {          currentReadDirection=1;        }        if (currentReadDirection != 1) {          currentReadDirection=1;          numSwitchReadDirections++;          switchRatio=(double)numSwitchReadDirections / numReads;        }        blockStartingCell=(long)(cellNum - (blockSize - (switchRatio * halfBlockSize)));      }      previousRow=row;      if (blockStartingCell < 0) {        blockStartingCell=0;      }      readDataBlock();    }    grid[(int)(cellNum - blockStartingCell)]--;    isDirty=true;  }}  }
class C{  private void removeLastFiring(){  if (!attacks.isEmpty()) {    Object o=attacks.lastElement();    if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      ce().getEquipment(waa.getWeaponId()).setUsedThisRound(false);      attacks.removeElement(o);      clientgui.mechD.wPan.displayMech(ce());      clientgui.getClient().getGame().removeAction(o);      clientgui.bv.refreshAttacks();      clientgui.minimap.drawMap();    }  }}  }
class C{  public boolean isDrawnLw(){  return mHasSurface && !mDestroying && (mWinAnimator.mDrawState == WindowStateAnimator.READY_TO_SHOW || mWinAnimator.mDrawState == WindowStateAnimator.HAS_DRAWN);}  }
class C{  default void shutdown(ShutdownModeAmp mode){}  }
class C{  public void onWheel(WheelEvent event,Interaction iact){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.045 -0500",hash_original_method="24E580167A377C75EF9FE74DA27231DA",hash_generated_method="D2CDCE8985EEA64376528B973FDA20A4") public static void fill(double[] array,int start,int end,double value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static MemoryModule parseModule(final byte[] data) throws MessageParserException {  Preconditions.checkNotNull(data,"IE01037: Data argument can not be null");  try {    final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    final DocumentBuilder builder=factory.newDocumentBuilder();    final Document document=builder.parse(new ByteArrayInputStream(data,0,data.length));    return parseModule(document.getFirstChild());  } catch (  final Exception exception) {    throw new MessageParserException(exception.getLocalizedMessage());  }}  }
class C{  public Entry(String tag,long millis,ParcelFileDescriptor data,int flags){  if (tag == null)   throw new NullPointerException("tag == null");  if (((flags & IS_EMPTY) != 0) != (data == null)) {    throw new IllegalArgumentException("Bad flags: " + flags);  }  mTag=tag;  mTimeMillis=millis;  mData=null;  mFileDescriptor=data;  mFlags=flags;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    int masky=getMediaMask(stack);    return Wizard.getInstance().searchByExactPerson(getPerson(stack),masky);  } else   return Wizard.getInstance().searchByExactPerson(getPerson(stack));}  }
class C{  @SuppressWarnings("deprecation") protected void preShow(){  if (mRootView == null)   throw new IllegalStateException("setContentView was not called with a view to display.");  onShow();  if (mBackground == null)   mWindow.setBackgroundDrawable(new BitmapDrawable()); else   mWindow.setBackgroundDrawable(mBackground);  mWindow.setWidth(WindowManager.LayoutParams.WRAP_CONTENT);  mWindow.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);  mWindow.setTouchable(true);  mWindow.setFocusable(true);  mWindow.setOutsideTouchable(true);  mWindow.setContentView(mRootView);}  }
class C{  public void parseString(String string) throws XMLParseException {  this.parseFromReader(string,1);}  }
class C{  public static String mixNMatchKeyToComponent(String mixnmatchKey){  if (mixnmatchKey.equals(MixnMatchColumns.KEY_HOMESCREEN)) {    return ThemesColumns.MODIFIES_LAUNCHER;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_ICONS)) {    return ThemesColumns.MODIFIES_ICONS;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_LOCKSCREEN)) {    return ThemesColumns.MODIFIES_LOCKSCREEN;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_FONT)) {    return ThemesColumns.MODIFIES_FONTS;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_BOOT_ANIM)) {    return ThemesColumns.MODIFIES_BOOT_ANIM;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_ALARM)) {    return ThemesColumns.MODIFIES_ALARMS;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_NOTIFICATIONS)) {    return ThemesColumns.MODIFIES_NOTIFICATIONS;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_RINGTONE)) {    return ThemesColumns.MODIFIES_RINGTONES;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_OVERLAYS)) {    return ThemesColumns.MODIFIES_OVERLAYS;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_STATUS_BAR)) {    return ThemesColumns.MODIFIES_STATUS_BAR;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_NAVIGATION_BAR)) {    return ThemesColumns.MODIFIES_NAVIGATION_BAR;  } else   if (mixnmatchKey.equals(MixnMatchColumns.KEY_LIVE_LOCK_SCREEN)) {    return ThemesColumns.MODIFIES_LIVE_LOCK_SCREEN;  }  return null;}  }
class C{  public VNXeCommandJob createLun(LunCreateParam param){  _url=URL_CREATE;  return postRequestAsync(param);}  }
class C{  public boolean segmentIntersects(double lat1,double lng1,double lat2,double lng2){  int nVert=points.size();  LatLong last=points.get(nVert - 1);  double xj=last.lng;  double yj=last.lat;  for (int i=0; i < nVert; i++) {    double yi=points.get(i).lat;    double xi=points.get(i).lng;    if (segmentIntersects(xj,yj,xi,yi,lng1,lat1,lng2,lat2))     return true;    xj=xi;    yj=yi;  }  return false;}  }
class C{  static <T>List<T> cast(Iterable<T> iterable){  return (List<T>)iterable;}  }
class C{  @Override public int[] sequenceLengths(final long start,final long end) throws IOException {  return mUnderlyingReader.sequenceLengths(start,end);}  }
class C{  public SimpleIndenter(String startTagNewLine,String startTagIndent,String endTagNewLine,String endTagIndent){  super();  this.startTagNewLine=startTagNewLine;  this.startTagIndent=startTagIndent;  this.endTagNewLine=endTagNewLine;  this.endTagIndent=endTagIndent;}  }
class C{  private long givenBrokerService() throws ObjectNotFoundException {  long srvKey=110L;  newProductAndOrganization(srvKey,OrganizationRoleType.BROKER);  newTemplateProduct(120L);  product.setTemplate(templateProduct);  newPriceModel(templateProduct);  return srvKey;}  }
class C{  public String addPostRestoreResyncSteps(Workflow workflow,Map<Volume,Volume> vplexToArrayVolumes,Map<URI,String> vplexVolumeIdToDetachStep,String inputWaitFor){  if (vplexToArrayVolumes.isEmpty() || vplexVolumeIdToDetachStep.isEmpty()) {    return inputWaitFor;  }  Map<URI,List<Volume>> vplexSystemToVolumes=new HashMap<URI,List<Volume>>();  for (  Volume vplexVolume : vplexToArrayVolumes.keySet()) {    URI storageController=vplexVolume.getStorageController();    if (!vplexSystemToVolumes.containsKey(storageController)) {      vplexSystemToVolumes.put(storageController,new ArrayList<Volume>());    }    vplexSystemToVolumes.get(storageController).add(vplexVolume);  }  for (  Map.Entry<URI,List<Volume>> entry : vplexSystemToVolumes.entrySet()) {    StorageSystem vplexSystem=_dbClient.queryObject(StorageSystem.class,entry.getKey());    List<Volume> distributedVolumes=new ArrayList<Volume>();    for (    Volume vplexVolume : entry.getValue()) {      if (null == vplexVolume.getAssociatedVolumes() || vplexVolume.getAssociatedVolumes().isEmpty()) {        _log.error("VPLEX volume {} has no backend volumes.",vplexVolume.forDisplay());        throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(vplexVolume.forDisplay());      }      if (vplexVolume.getAssociatedVolumes().size() > 1) {        distributedVolumes.add(vplexVolume);      }    }    for (    Volume distributedVolume : distributedVolumes) {      URI legToAttachURI=null;      for (      String associatedVolume : distributedVolume.getAssociatedVolumes()) {        if (!associatedVolume.equals(vplexToArrayVolumes.get(distributedVolume).getId().toString())) {          legToAttachURI=URI.create(associatedVolume);        }      }      String rebuildStep=createWorkflowStepForAttachMirror(workflow,vplexSystem,distributedVolume,legToAttachURI,vplexVolumeIdToDetachStep.get(distributedVolume.getId()),inputWaitFor,rollbackMethodNullMethod());      createWorkflowStepForWaitOnRebuild(workflow,vplexSystem,distributedVolume.getId(),rebuildStep);    }  }  return WAIT_ON_REBUILD_STEP;}  }
class C{  public int delta(int m,double dn){  int n=(int)dn;  if (n % m == 0) {    return 1;  }  return 0;}  }
class C{  public static void initCause(Throwable throwable,Throwable cause){  if (INIT_CAUSE_METHOD != null) {    try {      INIT_CAUSE_METHOD.invoke(throwable,new Object[]{cause});    } catch (    Exception e) {    }  }}  }
class C{  public final void add(Matrix4f m1){  this.m00+=m1.m00;  this.m01+=m1.m01;  this.m02+=m1.m02;  this.m03+=m1.m03;  this.m10+=m1.m10;  this.m11+=m1.m11;  this.m12+=m1.m12;  this.m13+=m1.m13;  this.m20+=m1.m20;  this.m21+=m1.m21;  this.m22+=m1.m22;  this.m23+=m1.m23;  this.m30+=m1.m30;  this.m31+=m1.m31;  this.m32+=m1.m32;  this.m33+=m1.m33;}  }
class C{  public static boolean isMacInvalidArgumentError(Exception e){  return U.isMacOs() && e instanceof SocketException && e.getMessage() != null && e.getMessage().toLowerCase().contains("invalid argument");}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  public InlineLocalVariableDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.INLINE_LOCAL_VARIABLE,project,description,comment,arguments,flags);}  }
class C{  public long toMicroseconds(){  return TimeUnit.MICROSECONDS.convert(length,timeUnit);}  }
class C{  public static void generateTestReport(ApexReportBean[] reportBeans,String reportFile){  if (reportBeans != null && reportBeans.length > 0) {    Document document=new Document();    Element rootElement=new Element("testsuite");    document.setRootElement(rootElement);    int failureCount=0;    int testCount=0;    for (    ApexReportBean reportBean : reportBeans) {      testCount++;      Element testcase=new Element("testcase");      String apexClassName="";      if (reportBean.getApexClassName() == null || reportBean.getApexClassName().equals("")) {        if (reportBean.getApexClassId() != null && ApexClassFetcherUtils.apexClassMap.get(reportBean.getApexClassId()) != null) {          apexClassName=ApexClassFetcherUtils.apexClassMap.get(reportBean.getApexClassId());        } else         if (reportBean.getApexClassId() != null) {          PartnerConnection conn=ConnectionHandler.getConnectionHandlerInstance().getConnection();          HashMap<String,String> apexClassInfoMap=ApexClassFetcherUtils.fetchApexClassInfoFromId(conn,reportBean.getApexClassId());          apexClassName=apexClassInfoMap.get("Name");        } else {          LOG.debug("Report bean not constructed properly. 'null' class ID associated with the report bean");        }        reportBean.setApexClassName(apexClassName);      } else {        apexClassName=reportBean.getApexClassName();      }      testcase.setAttribute("classname",apexClassName);      testcase.setAttribute("name",reportBean.getMethodName());      if (reportBean.getOutcome().equalsIgnoreCase("pass")) {        Element success=new Element("Success");        success.setAttribute("message","Passed");        testcase.addContent(success);      } else       if (reportBean.getOutcome().equalsIgnoreCase("fail") | reportBean.getOutcome().equalsIgnoreCase("compilefail")) {        failureCount++;        Element failure=new Element("failure");        failure.setAttribute("message",reportBean.getMessage());        failure.setText(reportBean.getStackTrace());        testcase.addContent(failure);      }      rootElement.addContent(testcase);    }    rootElement.setAttribute("failures",Integer.toString(failureCount));    rootElement.setAttribute("tests",Integer.toString(testCount));    try {      XMLOutputter outputter=new XMLOutputter();      outputter.output(document,new FileOutputStream(reportFile));    } catch (    IOException e) {      ApexUnitUtils.shutDownWithDebugLog(e,"IOException encountered while trying to write the ApexUnit test report to the file " + reportFile);    }  } else {    ApexUnitUtils.shutDownWithErrMsg("Unable to generate test report. " + "Did not find any test results for the job id");  }}  }
class C{  public final boolean readLine(CharBuffer cb) throws IOException {  return readLine(cb,true);}  }
class C{  public static long calcLastModified(final SolrQueryRequest solrReq){  final SolrCore core=solrReq.getCore();  final SolrIndexSearcher searcher=solrReq.getSearcher();  final LastModFrom lastModFrom=core.getSolrConfig().getHttpCachingConfig().getLastModFrom();  long lastMod;  try {    lastMod=LastModFrom.DIRLASTMOD == lastModFrom ? IndexDeletionPolicyWrapper.getCommitTimestamp(searcher.getIndexReader().getIndexCommit()) : searcher.getOpenTimeStamp().getTime();  } catch (  IOException e) {    throw new SolrException(ErrorCode.SERVER_ERROR,e);  }  return lastMod - (lastMod % 1000L);}  }
class C{  public void validateStorageUnitS3Files(StorageUnit storageUnit,List<String> actualS3Files,String s3KeyPrefix){  List<String> registeredS3Files=new ArrayList<>();  if (!CollectionUtils.isEmpty(storageUnit.getStorageFiles())) {    for (    StorageFile storageFile : storageUnit.getStorageFiles()) {      Assert.isTrue(storageFile.getFilePath().startsWith(s3KeyPrefix),String.format("Storage file S3 key prefix \"%s\" does not match the expected S3 key prefix \"%s\".",storageFile.getFilePath(),s3KeyPrefix));      registeredS3Files.add(storageFile.getFilePath());    }  }  if (!actualS3Files.containsAll(registeredS3Files)) {    registeredS3Files.removeAll(actualS3Files);    throw new IllegalStateException(String.format("Registered file \"%s\" does not exist in \"%s\" storage.",registeredS3Files.get(0),storageUnit.getStorage().getName()));  }  if (!registeredS3Files.containsAll(actualS3Files)) {    actualS3Files.removeAll(registeredS3Files);    throw new IllegalStateException(String.format("Found S3 file \"%s\" in \"%s\" storage not registered with this business object data.",actualS3Files.get(0),storageUnit.getStorage().getName()));  }}  }
class C{  public void assertSubtype(Type s,Type t){  assertSubtype(s,t,true);}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public synchronized boolean isEmpty(){  return listenerList.length == 0;}  }
class C{  public boolean containsKey(double key){  return contains(key);}  }
class C{  private void importRecords() throws SQLException {  for (  X_I_Product_ASI ip_asi : getRecords(false,m_IsImportOnlyNoErrors)) {    isImported=false;    MAttributeInstance ai=importProductASI(ip_asi);    if (ai != null || ai.get_ID() > 0)     isImported=true;    if (isImported) {      ip_asi.setI_IsImported(true);      ip_asi.setProcessed(true);      ip_asi.setI_ErrorMsg("");      ip_asi.saveEx();      imported++;      ip_asi.saveEx();    } else {      ip_asi.setI_IsImported(false);      ip_asi.setProcessed(false);      ip_asi.saveEx();      notimported++;    }  }}  }
class C{  public void triggerJob(JobKey jobKey) throws SchedulerException {  triggerJob(jobKey,null);}  }
class C{  private void createMethod(GeneratorAdapter mg,Method m){  String methodName="getReturnValue" + getTypeName(m.getReturnType());  String desc="(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)" + getReturnTypeDesc(m.getReturnType());  mg.push(className);  mg.push(m.getName() + m.getDescriptor());  mg.loadArgArray();  Type owner=Type.getType(PackageInfo.getNameWithSlash(Stubs.class));  Method method=new Method(methodName,desc);  mg.invokeStatic(owner,method);  insertReturnCast(mg,m);  mg.returnValue();  mg.endMethod();}  }
class C{  private void insertDefaultRootTenant(DbClient dbClient){  if (!getCfMap().containsKey(TypeMap.getDoType(TenantOrg.class).getCF().getName())) {    _log.error("No TenantOrg CF in geodb!");    return;  }  if (isRootTenantExist(dbClient)) {    _log.info("root provider tenant exist already, skip insert");    return;  }  _log.info("insert root provider tenant ...");  TenantOrg org=new TenantOrg();  org.setId(URIUtil.createId(TenantOrg.class));  org.setLabel("Provider Tenant");  org.setDescription("Root Provider Tenant");  org.setParentTenant(new NamedURI(URI.create(TenantOrg.NO_PARENT),org.getLabel()));  org.addRole("SID,root","TENANT_ADMIN");  org.setCreationTime(Calendar.getInstance());  org.setInactive(false);  dbClient.createObject(org);  _log.info("The root tenant {} has been inserted",org.getId());}  }
class C{  public T caseBitwiseAndExpression(BitwiseAndExpression object){  return null;}  }
class C{  public void execute(FunctionContext fc){  boolean executedSuccessfully=false;  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  Object[] functionArguments=(Object[])fc.getArguments();  ObjectName objectName=(ObjectName)functionArguments[0];  String methodName=(String)functionArguments[1];  String[] signature=(String[])functionArguments[2];  Object[] args=(Object[])functionArguments[3];  String memberName=(String)functionArguments[4];  Object returnObj=null;  try {    final int nargs=(args == null) ? 0 : args.length;    if (methodName.startsWith("set") && methodName.length() > 3 && nargs == 1) {      Attribute attr=new Attribute(methodName.substring(3),args[0]);      mbeanServer.setAttribute(objectName,attr);      fc.getResultSender().lastResult((Serializable)null);    } else     if (methodName.equals("addNotificationListener")) {      notificationHub.addHubNotificationListener(memberName,objectName);      fc.getResultSender().lastResult((Serializable)ManagementConstants.UNDEFINED);    } else     if (methodName.equals("removeNotificationListener")) {      notificationHub.removeHubNotificationListener(memberName,objectName);      fc.getResultSender().lastResult((Serializable)ManagementConstants.UNDEFINED);    } else     if (methodName.equals("getNotificationInfo")) {      fc.getResultSender().lastResult(mbeanServer.getMBeanInfo(objectName));    } else {      returnObj=mbeanServer.invoke(objectName,methodName,args,signature);      fc.getResultSender().lastResult((Serializable)returnObj);    }    executedSuccessfully=true;  } catch (  InstanceNotFoundException e) {    if (cache != null && !cache.isClosed()) {      sendException(e,fc);    }  }catch (  ReflectionException e) {    sendException(e,fc);  }catch (  MBeanException e) {    sendException(e,fc);  }catch (  NullPointerException e) {    sendException(e,fc);  }catch (  Exception e) {    sendException(e,fc);  } finally {    if (!executedSuccessfully) {      if (cache == null || (cache != null && cache.isClosed())) {        Exception e=new Exception(ManagementStrings.MEMBER_IS_SHUTTING_DOWN.toLocalizedString());        sendException(e,fc);        return;      }    }  }}  }
class C{  public static String buildMessage(String message,Throwable cause){  if (cause != null) {    StringBuilder sb=new StringBuilder();    if (message != null) {      sb.append(message).append("; ");    }    sb.append("nested exception is ").append(cause);    return sb.toString();  } else {    return message;  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static void invokeAndWaitIfNeeded(@NotNull Runnable runnable){  if (EdtInvocationManager.getInstance().isEventDispatchThread()) {    runnable.run();  } else {    try {      EdtInvocationManager.getInstance().invokeAndWait(runnable);    } catch (    Exception e) {      LOG.error(e);    }  }}  }
class C{  public TlsKeyMaterialParameterSpec(SecretKey masterSecret,int majorVersion,int minorVersion,byte[] clientRandom,byte[] serverRandom,String cipherAlgorithm,int cipherKeyLength,int expandedCipherKeyLength,int ivLength,int macKeyLength,String prfHashAlg,int prfHashLength,int prfBlockSize){  if (masterSecret.getAlgorithm().equals("TlsMasterSecret") == false) {    throw new IllegalArgumentException("Not a TLS master secret");  }  if (cipherAlgorithm == null) {    throw new NullPointerException();  }  this.masterSecret=masterSecret;  this.majorVersion=TlsMasterSecretParameterSpec.checkVersion(majorVersion);  this.minorVersion=TlsMasterSecretParameterSpec.checkVersion(minorVersion);  this.clientRandom=clientRandom.clone();  this.serverRandom=serverRandom.clone();  this.cipherAlgorithm=cipherAlgorithm;  this.cipherKeyLength=checkSign(cipherKeyLength);  this.expandedCipherKeyLength=checkSign(expandedCipherKeyLength);  this.ivLength=checkSign(ivLength);  this.macKeyLength=checkSign(macKeyLength);  this.prfHashAlg=prfHashAlg;  this.prfHashLength=prfHashLength;  this.prfBlockSize=prfBlockSize;}  }
class C{  public PathCondition(List<BranchCondition> branchConditions){  this.pathCondition=new LinkedList<BranchCondition>(branchConditions);}  }
class C{  public String toString(){  return String.format("field '%s' %s",getName(),field.toString());}  }
class C{  private SingularValueDecomposition svd(DoubleMatrix2D matrix){  return new SingularValueDecomposition(matrix);}  }
class C{  @Override public void close() throws IOException {  buffer=null;}  }
class C{  public JSONObject(Map<String,Object> map){  this.myHashMap=new HashMap<String,Object>(map);}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public boolean containsKey(Object key){  return getNode(hash(key),key) != null;}  }
class C{  public boolean isGetter(){  MemberType _memberType=this.getMemberType();  return Objects.equal(_memberType,MemberType.GETTER);}  }
class C{  public Matrix3d rotationZYX(double angleZ,double angleY,double angleX){  double cosZ=Math.cos(angleZ);  double sinZ=Math.sin(angleZ);  double cosY=Math.cos(angleY);  double sinY=Math.sin(angleY);  double cosX=Math.cos(angleX);  double sinX=Math.sin(angleX);  double m_sinZ=-sinZ;  double m_sinY=-sinY;  double m_sinX=-sinX;  double nm00=cosZ;  double nm01=sinZ;  double nm10=m_sinZ;  double nm11=cosZ;  double nm20=nm00 * sinY;  double nm21=nm01 * sinY;  double nm22=cosY;  m00=nm00 * cosY;  m01=nm01 * cosY;  m02=m_sinY;  m10=nm10 * cosX + nm20 * sinX;  m11=nm11 * cosX + nm21 * sinX;  m12=nm22 * sinX;  m20=nm10 * m_sinX + nm20 * cosX;  m21=nm11 * m_sinX + nm21 * cosX;  m22=nm22 * cosX;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String def=getString(stack);  return Sage.get(getString(stack),def);}  }
class C{  public static Value readValue(ResultSet rs,int columnIndex,int type){  try {    Value v;switch (type) {case Value.NULL:{        return ValueNull.INSTANCE;      }case Value.BYTES:{      byte[] buff=rs.getBytes(columnIndex);      v=buff == null ? (Value)ValueNull.INSTANCE : ValueBytes.getNoCopy(buff);      break;    }case Value.UUID:{    byte[] buff=rs.getBytes(columnIndex);    v=buff == null ? (Value)ValueNull.INSTANCE : ValueUuid.get(buff);    break;  }case Value.BOOLEAN:{  boolean value=rs.getBoolean(columnIndex);  v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueBoolean.get(value);  break;}case Value.BYTE:{byte value=rs.getByte(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueByte.get(value);break;}case Value.DATE:{Date value=rs.getDate(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueDate.get(value);break;}case Value.TIME:{Time value=rs.getTime(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueTime.get(value);break;}case Value.TIMESTAMP:{Timestamp value=rs.getTimestamp(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueTimestamp.get(value);break;}case Value.DECIMAL:{BigDecimal value=rs.getBigDecimal(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueDecimal.get(value);break;}case Value.DOUBLE:{double value=rs.getDouble(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueDouble.get(value);break;}case Value.FLOAT:{float value=rs.getFloat(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueFloat.get(value);break;}case Value.INT:{int value=rs.getInt(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueInt.get(value);break;}case Value.LONG:{long value=rs.getLong(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueLong.get(value);break;}case Value.SHORT:{short value=rs.getShort(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueShort.get(value);break;}case Value.STRING_IGNORECASE:{String s=rs.getString(columnIndex);v=(s == null) ? (Value)ValueNull.INSTANCE : ValueStringIgnoreCase.get(s);break;}case Value.STRING_FIXED:{String s=rs.getString(columnIndex);v=(s == null) ? (Value)ValueNull.INSTANCE : ValueStringFixed.get(s);break;}case Value.STRING:{String s=rs.getString(columnIndex);v=(s == null) ? ValueNull.INSTANCE : ValueString.get(s);break;}case Value.CLOB:{Reader in=rs.getCharacterStream(columnIndex);if (in == null) {v=ValueNull.INSTANCE;} else {v=ValueLobDb.createTempClob(new BufferedReader(in),-1);}break;}case Value.BLOB:{InputStream in=rs.getBinaryStream(columnIndex);v=(in == null) ? (Value)ValueNull.INSTANCE : ValueLobDb.createTempBlob(in,-1);break;}case Value.JAVA_OBJECT:{if (SysProperties.serializeJavaObject) {byte[] buff=rs.getBytes(columnIndex);v=buff == null ? ValueNull.INSTANCE : ValueJavaObject.getNoCopy(null,buff);} else {Object o=rs.getObject(columnIndex);v=o == null ? ValueNull.INSTANCE : ValueJavaObject.getNoCopy(o,null);}break;}case Value.ARRAY:{Array array=rs.getArray(columnIndex);if (array == null) {return ValueNull.INSTANCE;}Object[] list=(Object[])array.getArray();if (list == null) {return ValueNull.INSTANCE;}int len=list.length;Value[] values=new Value[len];for (int i=0; i < len; i++) {values[i]=DataType.convertToValue(list[i],Value.NULL);}v=ValueArray.get(values);break;}case Value.RESULT_SET:{ResultSet x=(ResultSet)rs.getObject(columnIndex);if (x == null) {return ValueNull.INSTANCE;}return ValueResultSet.get(rs);}default :throw DbException.throwInternalError("type=" + type);}return v;} catch (SQLException e) {throw DbException.convert(e);}}  }
class C{  public static String toString(String key,Object value){  StringBuffer sb=new StringBuffer();  toJSONString(key,value,sb);  return sb.toString();}  }
class C{  public final boolean isMutable(){  return mutable;}  }
class C{  private <T extends WebDriverException>T createSeleniumExceptionOfClass(Class<T> exceptionClass){  return mock(exceptionClass);}  }
class C{  protected void validate(){  isValid=true;  loadChildren(getElement());}  }
class C{  private int writeEncryptedBlock(final byte[] input,final int off,final int len,final byte[] out,final int outOff) throws BadCiphertextException {  if (out.length == 0) {    return 0;  }  int outLen=0;  final int seqNum=1;  final byte[] contentAad=Utils.generateContentAad(messageId_,Constants.SINGLE_BLOCK_STRING_ID,seqNum,len);  final byte[] nonce=new byte[nonceLen_];  RND.nextBytes(nonce);  final CipherHandler cipherHandler=new CipherHandler(encryptionKey_,nonce,contentAad,Cipher.ENCRYPT_MODE,cryptoAlgo_);  final byte[] encryptedBytes=cipherHandler.cipherData(input,off,len);  final int encryptedContentLen=encryptedBytes.length - tagLenBytes_;  final CipherBlockHeaders cipherBlockHeaders=new CipherBlockHeaders(nonce,encryptedContentLen);  final byte[] cipherBlockHeaderBytes=cipherBlockHeaders.toByteArray();  System.arraycopy(cipherBlockHeaderBytes,0,out,outOff + outLen,cipherBlockHeaderBytes.length);  outLen+=cipherBlockHeaderBytes.length;  System.arraycopy(encryptedBytes,0,out,outOff + outLen,encryptedBytes.length);  outLen+=encryptedBytes.length;  return outLen;}  }
class C{  public Builder addGroup(final UnknownFieldSet value){  if (result.group == null) {    result.group=new ArrayList<UnknownFieldSet>();  }  result.group.add(value);  return this;}  }
class C{  protected CReadsDescription(){  super(new Color(126,255,36),"Highlights instructions that read memory");}  }
class C{  private XmlPullNode init(){  result=new PullToRefreshResult();  XmlPullNode root=new XmlPullNode("PullToRefresh");  XmlPullNode loadingLayouts=new XmlPullNode("LoadingLayouts");  XmlPullNode indicatorLayouts=new XmlPullNode("IndicatorLayouts");  XmlPullNode googleStyleViewLayouts=new XmlPullNode("GoogleStyleViewLayouts");  XmlPullNode googleStyleProgressLayouts=new XmlPullNode("GoogleStyleProgressLayouts");  XmlPullNode loadingLayout=new XmlPullNode("layout",new LayoutNodeCallback(result.loadingLayoutClazzNameMap));  XmlPullNode indicatorLayout=new XmlPullNode("layout",new LayoutNodeCallback(result.indicatorLayoutClazzNameMap));  XmlPullNode googleStyleViewLayout=new XmlPullNode("layout",new LayoutNodeCallback(result.googleStyleViewLayoutClazzNameMap));  XmlPullNode googleStyleProgressLayout=new XmlPullNode("layout",new LayoutNodeCallback(result.googleStyleProgressLayoutClazzNameMap));  root.addChildNode(loadingLayouts,ONLY_ONE_REPEAT);  root.addChildNode(indicatorLayouts,ONLY_ONE_REPEAT);  root.addChildNode(googleStyleViewLayouts,ONLY_ONE_REPEAT);  root.addChildNode(googleStyleProgressLayouts,ONLY_ONE_REPEAT);  loadingLayouts.addChildNode(loadingLayout);  indicatorLayouts.addChildNode(indicatorLayout);  googleStyleViewLayouts.addChildNode(googleStyleViewLayout);  googleStyleProgressLayouts.addChildNode(googleStyleProgressLayout);  return root;}  }
class C{  public static void execute(final String target,final HttpServletRequest hsRequest,final HttpServletResponse hsResponse) throws IOException {  if (log.isInfoEnabled()) {    log.info("execute, target is " + target);    log.info("response commit state: " + hsResponse.isCommitted());  }  if (StringUtils.isBlank(target)) {    log.error("The target address is not given. Please provide a target address.");    return;  }  log.info("checking url");  final URL url;  try {    url=new URL(target);  } catch (  MalformedURLException e) {    log.error("The provided target url is not valid.",e);    return;  }  log.info("seting up the host configuration");  final HostConfiguration config=new HostConfiguration();  ProxyHost proxyHost=getUseProxyServer((String)hsRequest.getAttribute("use-proxy"));  if (proxyHost != null)   config.setProxyHost(proxyHost);  final int port=url.getPort() != -1 ? url.getPort() : url.getDefaultPort();  config.setHost(url.getHost(),port,url.getProtocol());  if (log.isInfoEnabled())   log.info("config is " + config.toString());  final HttpMethod targetRequest=setupProxyRequest(hsRequest,url);  if (targetRequest == null) {    log.error("Unsupported request method found: " + hsRequest.getMethod());    return;  }  final HttpClient client=new HttpClient(new SimpleHttpConnectionManager());  if (log.isInfoEnabled()) {    log.info("client state" + client.getState());    log.info("client params" + client.getParams().toString());    log.info("executeMethod / fetching data ...");  }  final int result;  if (targetRequest instanceof EntityEnclosingMethod) {    final RequestProxyCustomRequestEntity requestEntity=new RequestProxyCustomRequestEntity(hsRequest.getInputStream(),hsRequest.getContentLength(),hsRequest.getContentType());    final EntityEnclosingMethod entityEnclosingMethod=(EntityEnclosingMethod)targetRequest;    entityEnclosingMethod.setRequestEntity(requestEntity);    result=client.executeMethod(config,entityEnclosingMethod);  } else {    result=client.executeMethod(config,targetRequest);  }  setupResponseHeaders(targetRequest,hsResponse);  InputStream originalResponseStream=targetRequest.getResponseBodyAsStream();  if (originalResponseStream != null) {    OutputStream responseStream=hsResponse.getOutputStream();    copyStream(originalResponseStream,responseStream);  }  log.info("set up response, result code was " + result);}  }
class C{  public String eval(String expr){  String result="undefined";  if (expr == null) {    return result;  }  ContextData contextData=currentContextData();  if (contextData == null || frameIndex >= contextData.frameCount()) {    return result;  }  StackFrame frame=contextData.getFrame(frameIndex);  if (contextData.eventThreadFlag) {    Context cx=Context.getCurrentContext();    result=do_eval(cx,frame,expr);  } else {synchronized (monitor) {      if (insideInterruptLoop) {        evalRequest=expr;        evalFrame=frame;        monitor.notify();        do {          try {            monitor.wait();          } catch (          InterruptedException exc) {            Thread.currentThread().interrupt();            break;          }        } while (evalRequest != null);        result=evalResult;      }    }  }  return result;}  }
class C{  public boolean checkTableExists(TableDefinition table){  String column=null;  for (  FieldDefinition field : table.getFields()) {    if (column == null) {      column=field.getName();    } else     if (field.isPrimaryKey()) {      column=field.getName();      break;    }  }  String sql="SELECT " + column + " FROM "+ table.getFullName()+ " WHERE "+ column+ " <> "+ column;  DataReadQuery query=new DataReadQuery(sql);  query.setMaxRows(1);  try {    session.executeQuery(query);    return true;  } catch (  Exception notFound) {    return false;  } finally {  }}  }
class C{  synchronized public static void unregisterAll(final Class<? extends EventBusListener> listenerClass){  for (  final List<EventBusListener> list : map.values()) {    for (    final EventBusListener listener : list) {      if (listenerClass.isAssignableFrom(listener.getClass())) {        list.remove(listener);      }    }  }}  }
class C{  public static void readFully(FileChannel channel,ByteBuffer dst) throws IOException {  do {    int r=channel.read(dst);    if (r < 0) {      throw new EOFException();    }  } while (dst.remaining() > 0);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;case main_region__final_:return stateVector[0] == State.main_region__final_;default :return false;}}  }
class C{  public void assertBool(boolean b){  TestUtils.assertBool(b);}  }
class C{  public UrlValidator(RegexValidator authorityValidator,long options){  this(null,authorityValidator,options);}  }
class C{  protected void moveToNextWindow(){  Block block=getOrCreateCurrentBlock();  if (!block.isClear()) {    throw new RuntimeException("Current block not clear, should NOT move to next window. Please call toSlice() to output data first");  }  if (block.size() > 0) {    moveToNextBlock();  }  windowToBlockIds.put(currentWindowId,currentBlockIndex);}  }
class C{  public ListeningPoint createListeningPoint(int port,String transport) throws TransportNotSupportedException, InvalidArgumentException {  if (super.stackAddress == null)   throw new NullPointerException("Stack does not have a default IP Address!");  return this.createListeningPoint(super.stackAddress,port,transport);}  }
class C{  public BIRCHCluster(){  super();  setNumClusters(defaultNumClusters());  setMinInstNum(defaultMinInstNum());  setMaxInstNum(defaultMaxInstNum());  setMinRadius(defaultMinRadius());  setMaxRadius(defaultMaxRadius());  setPattern(defaultPattern());  setDistMult(defaultDistMult());  setNumCycles(defaultNumCycles());  setInputOrder(defaultInputOrder());  setNoiseRate(defaultNoiseRate());}  }
class C{  public static int multiplyColorAlpha(int color,int alpha){  if (alpha == 255) {    return color;  }  if (alpha == 0) {    return color & 0x00FFFFFF;  }  alpha=alpha + (alpha >> 7);  int colorAlpha=color >>> 24;  int multipliedAlpha=colorAlpha * alpha >> 8;  return (multipliedAlpha << 24) | (color & 0x00FFFFFF);}  }
class C{  protected int lengthOfByteStream(AbstractMRMessage m){  return m.getNumDataElements();}  }
class C{  public boolean match(float ieVersion,String expression){  expression=StringUtil.removeChars(expression,"()");  expression=expression.substring(3);  String[] andChunks=StringUtil.splitc(expression,'&');  boolean valid=true;  for (  String andChunk : andChunks) {    String[] orChunks=StringUtil.splitc(andChunk,'|');    boolean innerValid=false;    for (    String orChunk : orChunks) {      orChunk=orChunk.trim();      if (orChunk.startsWith("IE ")) {        String value=orChunk.substring(3);        float number=Float.parseFloat(value);        if (versionToCompare(ieVersion,number) == number) {          innerValid=true;          break;        }        continue;      }      if (orChunk.startsWith("!IE ")) {        String value=orChunk.substring(4);        float number=Float.parseFloat(value);        if (versionToCompare(ieVersion,number) != number) {          innerValid=true;          break;        }        continue;      }      if (orChunk.startsWith("lt IE ")) {        String value=orChunk.substring(6);        float number=Float.parseFloat(value);        if (ieVersion < number) {          innerValid=true;          break;        }        continue;      }      if (orChunk.startsWith("lte IE ")) {        String value=orChunk.substring(7);        float number=Float.parseFloat(value);        if (versionToCompare(ieVersion,number) <= number) {          innerValid=true;          break;        }        continue;      }      if (orChunk.startsWith("gt IE ")) {        String value=orChunk.substring(6);        float number=Float.parseFloat(value);        if (versionToCompare(ieVersion,number) > number) {          innerValid=true;          break;        }        continue;      }      if (orChunk.startsWith("gte IE ")) {        String value=orChunk.substring(7);        float number=Float.parseFloat(value);        if (ieVersion >= number) {          innerValid=true;          break;        }        continue;      }    }    valid=valid && innerValid;  }  return valid;}  }
class C{  private void useOurUIs(){  for (  String uiName : UI_LIST) {    uiName=uiName + "UI";    uiDefaults.put(uiName,UI_PACKAGE_PREFIX + uiName);  }}  }
class C{  private char readEscapeCharacter() throws IOException {  if (pos == limit && !fillBuffer(1)) {    throw syntaxError("Unterminated escape sequence");  }  char escaped=buffer[pos++];switch (escaped) {case 'u':    if (pos + 4 > limit && !fillBuffer(4)) {      throw syntaxError("Unterminated escape sequence");    }  char result=0;for (int i=pos, end=i + 4; i < end; i++) {  char c=buffer[i];  result<<=4;  if (c >= '0' && c <= '9') {    result+=(c - '0');  } else   if (c >= 'a' && c <= 'f') {    result+=(c - 'a' + 10);  } else   if (c >= 'A' && c <= 'F') {    result+=(c - 'A' + 10);  } else {    throw new NumberFormatException("\\u" + stringPool.get(buffer,pos,4));  }}pos+=4;return result;case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  public Builder jsonFormatter(JsonFormatter jsonFormatter){  this.jsonFormatter=jsonFormatter;  return this;}  }
class C{  public void end(String endType) throws IOException {  link.end(endType);}  }
class C{  public synchronized void addClass(IdentifierToken t){  singles.addElement(t);}  }
class C{  public void ifPresent(IntConsumer action){  if (isPresent) {    action.accept(value);  }}  }
class C{  public void cancelRowUpdates() throws SQLException {  checkUpdatable();  rowUpdater.cancelRowUpdates();}  }
class C{  @SuppressWarnings("unchecked") private void processGroup(final AST2BOpContext context,final QueryRoot queryRoot,final QueryBase queryBase,final GraphPatternGroup<IGroupMemberNode> group){  if (group == null)   return;  int nfound=0;{    final int arity=group.arity();    ASTBase prior=null;    for (int i=0; i < arity; i++) {      final IGroupMemberNode child=(IGroupMemberNode)group.get(i);      if (child instanceof StatementPatternNode) {        final StatementPatternNode sp=(StatementPatternNode)child;        if (!isQueryHint(sp)) {          prior=sp;          continue;        }        applyQueryHint(context,queryRoot,queryBase,group,prior,sp);        nfound++;        continue;      }      if (child instanceof GraphPatternGroup<?>) {        processGroup(context,queryRoot,queryBase,(GraphPatternGroup<IGroupMemberNode>)child);      } else       if (child instanceof SubqueryRoot) {        processGroup(context,queryRoot,(SubqueryRoot)child,((SubqueryRoot)child).getWhereClause());      } else       if (child instanceof ServiceNode) {        processGroup(context,queryRoot,queryBase,((ServiceNode)child).getGraphPattern());      } else       if (child instanceof FilterNode && ((FilterNode)child).getValueExpressionNode() instanceof SubqueryFunctionNodeBase) {        final GraphPatternGroup<IGroupMemberNode> filterGraphPattern=((SubqueryFunctionNodeBase)((FilterNode)child).getValueExpressionNode()).getGraphPattern();        processGroup(context,queryRoot,queryBase,filterGraphPattern);      }      prior=(ASTBase)child;    }  }  if (nfound > 0) {    for (int i=0; i < group.arity(); ) {      final IGroupMemberNode child=(IGroupMemberNode)group.get(i);      if (!(child instanceof StatementPatternNode)) {        i++;        continue;      }      final StatementPatternNode sp=(StatementPatternNode)child;      if (isQueryHint(sp)) {        group.removeArg(sp);        continue;      }      i++;    }  }}  }
class C{  public static void checkForDuplicateArraySnapshotName(String requestedName,URI sourceURI,DbClient dbClient){  ArgValidator.checkFieldLengthMaximum(requestedName,SmisConstants.MAX_SNAPSHOT_NAME_LENGTH,"snapshotName");  String modifiedRequestedName=ResourceOnlyNameGenerator.removeSpecialCharsForName(requestedName,SmisConstants.MAX_SNAPSHOT_NAME_LENGTH);  List<BlockSnapshotSession> snapSessions=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,BlockSnapshotSession.class,ContainmentConstraint.Factory.getParentSnapshotSessionConstraint(sourceURI));  for (  BlockSnapshotSession snapSession : snapSessions) {    if (modifiedRequestedName.equals(snapSession.getSessionLabel())) {      throw APIException.badRequests.duplicateLabel(requestedName);    }  }  List<BlockSnapshot> sourceSnapshots=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,BlockSnapshot.class,ContainmentConstraint.Factory.getVolumeSnapshotConstraint(sourceURI));  for (  BlockSnapshot snapshot : sourceSnapshots) {    URIQueryResultList queryResults=new URIQueryResultList();    dbClient.queryByConstraint(ContainmentConstraint.Factory.getLinkedTargetSnapshotSessionConstraint(snapshot.getId()),queryResults);    Iterator<URI> queryResultsIter=queryResults.iterator();    if ((!queryResultsIter.hasNext()) && (modifiedRequestedName.equals(snapshot.getSnapsetLabel()))) {      throw APIException.badRequests.duplicateLabel(requestedName);    }  }}  }
class C{  protected void write(OutStream out) throws IOException {  out.writeUI8(flags);  out.writeUI16(id);  out.writeUI16(layer);  matrix.write(out);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == VariableEnvironmentElement.class) {switch (baseFeatureID) {default :    return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :  return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseFeatureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:return N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST__DECLARED_NAME;default :return -1;}}if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == PropertyAssignment.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void allowMultiple(){  this.allowMultiple=true;}  }
class C{  public boolean isFastMergePossible(OutputFileMetadata outputFileMetadata) throws IOException, BlockNotFoundException {  short replicationFactor=0;  boolean sameReplicationFactor=true;  boolean multipleOfBlockSize=true;  int numBlocks=outputFileMetadata.getNumberOfBlocks();  LOG.debug("fileMetadata.getNumberOfBlocks(): {}",outputFileMetadata.getNumberOfBlocks());  long[] blocksArray=outputFileMetadata.getBlockIds();  LOG.debug("fileMetadata.getBlockIds().len: {}",outputFileMetadata.getBlockIds().length);  for (int index=0; index < numBlocks && (sameReplicationFactor && multipleOfBlockSize); index++) {    Path blockFilePath=new Path(blocksDir + Path.SEPARATOR + blocksArray[index]);    if (!appFS.exists(blockFilePath)) {      throw new BlockNotFoundException(blockFilePath);    }    FileStatus status=appFS.getFileStatus(new Path(blocksDir + Path.SEPARATOR + blocksArray[index]));    if (index == 0) {      replicationFactor=status.getReplication();      LOG.debug("replicationFactor: {}",replicationFactor);    } else {      sameReplicationFactor=(replicationFactor == status.getReplication());      LOG.debug("sameReplicationFactor: {}",sameReplicationFactor);    }    if (index != numBlocks - 1) {      multipleOfBlockSize=(status.getLen() % defaultBlockSize == 0);      LOG.debug("multipleOfBlockSize: {}",multipleOfBlockSize);    }  }  return sameReplicationFactor && multipleOfBlockSize;}  }
class C{  public boolean supportsANSI92IntermediateSQL() throws SQLException {  return false;}  }
class C{  public ActivityChooserView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardPieSectionLabelGenerator)) {    return false;  }  StandardPieSectionLabelGenerator that=(StandardPieSectionLabelGenerator)obj;  if (!this.attributedLabels.equals(that.attributedLabels)) {    return false;  }  return super.equals(obj);}  }
class C{  public boolean isSystem(){  return system;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public boolean includes(MessageUid uid){switch (type) {case ALL:    return true;case FROM:  if (getUidFrom().compareTo(uid) <= 0) {    return true;  }case RANGE:if (getUidFrom().compareTo(uid) <= 0 && getUidTo().compareTo(uid) >= 0) {  return true;}case ONE:if (getUidFrom().equals(uid)) {return true;}default :break;}return false;}  }
class C{  public static String toString(int value){  return Integer.toString(value);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.ASSIGNMENT_EXPRESSION__VAR_REF:    setVarRef((Expression)newValue);  return;case ExpressionsPackage.ASSIGNMENT_EXPRESSION__OPERATOR:setOperator((AssignmentOperator)newValue);return;case ExpressionsPackage.ASSIGNMENT_EXPRESSION__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isSmapSuppressed(){  return smapSuppressed;}  }
class C{  private CosuConfig(Context context,InputStream in) throws XmlPullParserException, IOException {  mContext=context;  mDownloadManager=(DownloadManager)mContext.getSystemService(Context.DOWNLOAD_SERVICE);  try {    XmlPullParser parser=Xml.newPullParser();    parser.setInput(in,null);    while (parser.next() != XmlPullParser.END_DOCUMENT) {      if (parser.getEventType() != XmlPullParser.START_TAG) {        continue;      }      String name=parser.getName();      if (TAG_COSU_CONFIG.equals(name)) {        mMode=parser.getAttributeValue(null,ATTRIBUTE_MODE);      } else       if (TAG_POLICIES.equals(name)) {        readPolicies(parser);      } else       if (TAG_ENABLE_APPS.equals(name)) {        readApps(parser,mEnableSystemApps);      } else       if (TAG_HIDE_APPS.equals(name)) {        readApps(parser,mHideApps);      } else       if (TAG_KIOSK_APPS.equals(name)) {        readApps(parser,mKioskApps);      } else       if (TAG_DOWNLOAD_APPS.equals(name)) {        readDownloadApps(parser,mDownloadApps);      }    }  }  finally {    in.close();  }}  }
class C{  private boolean checkOrgInList(Long orgId,List<Long> org) throws Exception {  return org != null && org.contains(orgId);}  }
class C{  public static NamedLocationIdentity immutable(String name){  return create(name,true);}  }
class C{  public EditableLabeledOMSpline(GraphicAttributes ga){  super(ga);}  }
class C{  protected final void writeRaster(Raster raster,DataType dataType) throws IOException {  int rasterWidth=raster.getWidth();  int rasterLength=raster.getLength();  int numBytes=raster.getBytesPerSample();  byte[] bData=new byte[rasterWidth * numBytes];  for (int i=0; i < rasterLength; ++i) {    raster.get(i,bData);    dataStream.write(bData[i]);  }}  }
class C{  public void test_getServerSocketFactory() throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext[] sslC=createSSLCon();  assertNotNull("SSLContext objects were not created",sslC);  String tAlg=TrustManagerFactory.getDefaultAlgorithm();  String kAlg=KeyManagerFactory.getDefaultAlgorithm();  if (tAlg == null) {    fail("TrustManagerFactory default algorithm is not defined");    return;  }  if (kAlg == null) {    fail("KeyManagerFactory default algorithm is not defined");    return;  }  KeyManagerFactory kmf=KeyManagerFactory.getInstance(kAlg);  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());  try {    ks.load(null,null);  } catch (  Exception e) {    fail(e + " was thrown for method load(null, null)");  }  kmf.init(ks,new char[10]);  KeyManager[] kms=kmf.getKeyManagers();  TrustManagerFactory tmf=TrustManagerFactory.getInstance(tAlg);  tmf.init(ks);  TrustManager[] tms=tmf.getTrustManagers();  for (int i=0; i < sslC.length; i++) {    sslC[i].init(kms,tms,new SecureRandom());    assertNotNull("No SSLServerSocketFactory available",sslC[i].getServerSocketFactory());    assertNotNull("No SSLSocketFactory available",sslC[i].getSocketFactory());  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof lalr_item))   return false; else   return equals((lalr_item)other);}  }
class C{  public synchronized void scale(double scale){  for (int i=0; i < size; i++) {    u[i]*=scale;  }}  }
class C{  public void requestFocus(){  m_text.requestFocus();}  }
class C{  public static BundleFile newInstance(Resource res){  try {    BundleFile bf=new BundleFile(res);    if (bf.isBundle())     return bf;  } catch (  Throwable t) {  }  return null;}  }
class C{  public ReactiveElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @SuppressWarnings({"SuspiciousMethodCalls"}) public static boolean containsAll(Map<?,?> base,Map<?,?> map){  assert base != null;  assert map != null;  for (  Map.Entry<?,?> entry : map.entrySet())   if (base.containsKey(entry.getKey())) {    Object val=base.get(entry.getKey());    if (val == null && entry.getValue() == null)     continue;    if (val == null || entry.getValue() == null || !val.equals(entry.getValue()))     return false;  } else   return false;  return true;}  }
class C{  public static <K,V>EntryWeigher<K,V> asEntryWeigher(final Weigher<? super V> weigher){  return (weigher == singleton()) ? Weighers.<K,V>entrySingleton() : new EntryWeigherView<K,V>(weigher);}  }
class C{  public int size(){  return data.length;}  }
class C{  private static String digestMD5(String secret,String data){  return checksumMD5(secret + ":" + data);}  }
class C{  public final CC endGroupX(String s){  hor.setEndGroup(s);  return this;}  }
class C{  @Override protected void doAction(){  generateSecret();}  }
class C{  public static byte[] toByteArray(final URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    IOUtils.close(conn);  }}  }
class C{  public int tableLength(){  return ByteArray.readU16bit(info,0);}  }
class C{  @Override public void updateBigDecimal(int columnIndex,BigDecimal x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBigDecimal(" + columnIndex + ", "+ quoteBigDecimal(x)+ ");");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueDecimal.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public T remove(double lat,double lon,T obj){  return top.remove(lat,lon,obj);}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  private void requestInstantMix(){  if (tangible.DotNetToJavaStringHelper.isNullOrEmpty(mItem.getType()))   return;  if (mItem.getType().equalsIgnoreCase("Audio")) {    SimilarItemsQuery query=new SimilarItemsQuery();    query.setId(mItem.getId());    query.setUserId(MainApplication.getInstance().API.getCurrentUserId());    query.setLimit(50);    MainApplication.getInstance().API.GetInstantMixFromSongAsync(query,new GetInstantMixResponse(mContext));  } else   if (mItem.getType().equalsIgnoreCase("MusicAlbum")) {    SimilarItemsQuery query=new SimilarItemsQuery();    query.setId(mItem.getId());    query.setUserId(MainApplication.getInstance().API.getCurrentUserId());    query.setLimit(50);    MainApplication.getInstance().API.GetInstantMixFromAlbumAsync(query,new GetInstantMixResponse(mContext));  } else   if (mItem.getType().equalsIgnoreCase("musicartist")) {    SimilarItemsQuery query=new SimilarItemsQuery();    query.setId(mItem.getId());    query.setUserId(MainApplication.getInstance().API.getCurrentUserId());    query.setLimit(50);    MainApplication.getInstance().API.GetInstantMixFromArtistAsync(query,new GetInstantMixResponse(mContext));  } else   if (mItem.getType().equalsIgnoreCase("musicgenre")) {    SimilarItemsQuery query=new SimilarItemsQuery();    query.setId(mItem.getId());    query.setUserId(MainApplication.getInstance().API.getCurrentUserId());    query.setLimit(50);    MainApplication.getInstance().API.GetInstantMixFromMusicGenreAsync(query,new GetInstantMixResponse(mContext));  }}  }
class C{  public long convertUPSToGeodetic(String Hemisphere,double Easting,double Northing){  long Error_Code=UPS_NO_ERROR;  if (!AVKey.NORTH.equals(Hemisphere) && !AVKey.SOUTH.equals(Hemisphere))   Error_Code|=UPS_HEMISPHERE_ERROR;  if ((Easting < MIN_EAST_NORTH) || (Easting > MAX_EAST_NORTH))   Error_Code|=UPS_EASTING_ERROR;  if ((Northing < MIN_EAST_NORTH) || (Northing > MAX_EAST_NORTH))   Error_Code|=UPS_NORTHING_ERROR;  if (AVKey.NORTH.equals(Hemisphere))   UPS_Origin_Latitude=MAX_ORIGIN_LAT;  if (AVKey.SOUTH.equals(Hemisphere))   UPS_Origin_Latitude=-MAX_ORIGIN_LAT;  if (Error_Code == UPS_NO_ERROR) {    polarConverter.setPolarStereographicParameters(UPS_a,UPS_f,UPS_Origin_Latitude,UPS_Origin_Longitude,UPS_False_Easting,UPS_False_Northing);    polarConverter.convertPolarStereographicToGeodetic(Easting,Northing);    Latitude=polarConverter.getLatitude();    Longitude=polarConverter.getLongitude();    if ((Latitude < 0) && (Latitude > MIN_SOUTH_LAT))     Error_Code|=UPS_LAT_ERROR;    if ((Latitude >= 0) && (Latitude < MIN_NORTH_LAT))     Error_Code|=UPS_LAT_ERROR;  }  return Error_Code;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"B");  if (instruction.getMnemonic().startsWith("BL")) {    translateAll(environment,instruction,"BL",instructions);  } else {    translateAll(environment,instruction,"B",instructions);  }}  }
class C{  public DropItemAction(final String itemName){  this.itemName=checkNotNull(itemName);  this.amount=1;}  }
class C{  public static Dialog createConfirmationDialog(Context context,String title,String confirmText,String dismissText,Runnable command){  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(context);  dialogBuilder.setCancelable(true);  dialogBuilder.setIcon(R.drawable.icon);  dialogBuilder.setTitle(title);  dialogBuilder.setInverseBackgroundForced(true);  dialogBuilder.setPositiveButton(confirmText,new DialogCommandWrapper(command));  dialogBuilder.setNegativeButton(dismissText,new DialogCommandWrapper(NO_OP));  return dialogBuilder.create();}  }
class C{  public String discoveryEventName(){  return U.gridEventName(discoEvtType);}  }
class C{  public boolean isHostName(){  for (  String label : labels) {    if (!isHostNameLabel(label)) {      return false;    }  }  return true;}  }
class C{  public void deleteFromCursor(int p_146175_1_){  if (text.length() != 0)   if (selectionEnd != cursorPosition)   writeText(""); else {    boolean var2=p_146175_1_ < 0;    int var3=var2 ? cursorPosition + p_146175_1_ : cursorPosition;    int var4=var2 ? cursorPosition : cursorPosition + p_146175_1_;    String var5="";    if (var3 >= 0)     var5=text.substring(0,var3);    if (var4 < text.length())     var5=var5 + text.substring(var4);    text=var5;    if (var2)     moveCursorBy(p_146175_1_);    if (field_175210_x != null)     field_175210_x.func_175319_a(field_175208_g,text);  }}  }
class C{  public void createBuffer(BufferInfo bufferInfo,BufferType type,Buffer buffer,int target){  createBuffer(bufferInfo,type,buffer,target,bufferInfo.usage);}  }
class C{  private void shiftSegment(Segment segment,int leftBound,int offset){  if (segment.left > leftBound) {    segment.left+=offset;    segment.right+=offset;  }}  }
class C{  public AnsibleRunner retainTempDirectory(){  return retainTempDirectory(true);}  }
class C{  public static String abbreviate(String s,int offset,int maxWidth){  if (maxWidth < 4) {    throw new IllegalArgumentException("Minimum abbreviation width is 4");  }  if (s.length() <= maxWidth) {    return s;  }  if (offset > s.length()) {    offset=s.length();  }  if ((s.length() - offset) < (maxWidth - 3)) {    offset=s.length() - (maxWidth - 3);  }  if (offset <= 4) {    return s.substring(0,maxWidth - 3) + "...";  }  if (maxWidth < 7) {    throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");  }  if ((offset + (maxWidth - 3)) < s.length()) {    return "..." + abbreviate(s.substring(offset),maxWidth - 3);  }  return "..." + s.substring(s.length() - (maxWidth - 3));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:37.886 -0400",hash_original_method="94DC0A67074803592AE1A1EB602923E4",hash_generated_method="52C08A3C302F9CD911BDFD3DD36B55D1") void handleMaxbuf(ParsedDirective pd) throws SaslException {  if (-1 != m_maxBuf)   throw new SaslException("Too many maxBuf directives.");  m_maxBuf=Integer.parseInt(pd.getValue());  if (0 == m_maxBuf)   throw new SaslException("Max buf value must be greater than zero.");}  }
class C{  public static Command show(String title,String text,Command defaultCommand,Command[] cmds,int type,Image icon,long timeout){  return show(title,text,defaultCommand,cmds,type,icon,timeout,null);}  }
class C{  public void scribe(ScribeEvent event){  recordEventAsync(event,false);}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public void addTradestrategy(Tradestrategy tradestrategy){  this.tradestrategies.add(tradestrategy);}  }
class C{  protected void writeMessage(ProtocolMessage msg) throws IOException {  oos.writeObject(msg);  oos.flush();  objectsSent++;  if (objectsSent >= resetPeriod) {    objectsSent=0;    oos.reset();  }}  }
class C{  public static void reload(){  if (Bukkit.getPluginManager().useTimings()) {    for (    CustomTimingsHandler timings : HANDLERS) {      timings.reset();    }  }  TimingsCommand.timingStart=System.nanoTime();}  }
class C{  public static void resetOmniPositionState(boolean animate){  if (!animate) {    resetOmniPositionState();    return;  }  OmniboxAnimations.resetOmni();}  }
class C{  private void integrity(IgniteAtomicSequence seq,long calcVal) throws Exception {  assert calcVal == seq.get();  getAndAdd(seq,1);  assert calcVal + 1 == seq.get();  addAndGet(seq,1);  assert calcVal + 2 == seq.get();  getAndIncrement(seq);  assert calcVal + BATCH_SIZE == seq.get();  incrementAndGet(seq);  assert calcVal + 4 == seq.get();}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  public boolean answerCallbackQuery(String callbackQueryId,String text,boolean showAlert){  if (callbackQueryId != null && text != null) {    HttpResponse<String> response;    JSONObject jsonResponse;    try {      MultipartBody requests=Unirest.post(getBotAPIUrl() + "answerCallbackQuery").field("callback_query_id",callbackQueryId,"application/json; charset=utf8;").field("text",text,"application/json; charset=utf8;").field("show_alert",showAlert);      response=requests.asString();      jsonResponse=Utils.processResponse(response);      if (jsonResponse != null) {        if (jsonResponse.getBoolean("result"))         return true;      }    } catch (    UnirestException e) {      e.printStackTrace();    }  }  return false;}  }
class C{  public static void main(String[] args){  int x=-5;  System.out.println(x + " % " + 3+ " = "+ (x % 3));  String s="a";  while (s.length() < 1024) {    int h=s.hashCode();    s=s + "a";    if (h < 0) {      System.out.println("hash of \"" + s + "\" is "+ h);      break;    }  }}  }
class C{  public Long zrank(final byte[] key,final byte[] member){  checkIsInMulti();  client.zrank(key,member);  return client.getIntegerReply();}  }
class C{  public static final void drawLineSegment(GL2 gl,Vector2 p1,Vector2 p2,boolean points){  RenderUtilities.drawLineSegment(gl,p1.x,p1.y,p2.x,p2.y,points);}  }
class C{  private static Intent createCallActivityIntent(Context context,URLSpan[] urlSpans){  TelephonyManager tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (tm.getPhoneType() == TelephonyManager.PHONE_TYPE_NONE) {    return null;  }  for (int span_i=0; span_i < urlSpans.length; span_i++) {    URLSpan urlSpan=urlSpans[span_i];    String urlString=urlSpan.getURL();    if (urlString.startsWith(TEL_PREFIX)) {      Intent callIntent=new Intent(Intent.ACTION_DIAL,Uri.parse(urlString));      callIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      return callIntent;    }  }  return null;}  }
class C{  public Process(final URL url) throws IOException, XMLException {  initContext();  Reader in=new InputStreamReader(WebServiceTools.openStreamFromURL(url),getEncoding(null));  readProcess(in);  in.close();}  }
class C{  protected TDULinkControlMessage(TDULinkControlMessage message){  super(message.getSourceMessage(),DataUnitID.TDULC,message.getAliasList());  mCRC=message.getCRC();}  }
class C{  public void info(Object message,Throwable t){}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.DOCLET_ELEMENT;}  }
class C{  static boolean useSystemFonts(){  if (isWindows() && useSystemFonts) {    if (METAL_LOOK_AND_FEEL_INITED) {      Object value=UIManager.get("Application.useSystemFontSettings");      return (value == null || Boolean.TRUE.equals(value));    }    return true;  }  return false;}  }
class C{  public CarRosterMenu(String pMenuName,int pMenuType,CarsTableFrame carsTableFrame){  super(pMenuName);  AbstractAction importAction=new ImportCarRosterAction(Bundle.getMessage("MenuItemImport"),carsTableFrame);  importAction.setEnabled(false);  AbstractAction exportAction=new ExportCarRosterAction(Bundle.getMessage("MenuItemExport"),carsTableFrame);  exportAction.setEnabled(false);  AbstractAction deleteAction=new DeleteCarRosterAction(carsTableFrame);  deleteAction.setEnabled(false);  AbstractAction resetMovesAction=new ResetCarMovesAction(Bundle.getMessage("MenuItemResetMoves"),carsTableFrame);  resetMovesAction.setEnabled(false);  Frame newFrame=new Frame();  AbstractAction printAction=new PrintCarRosterAction(Bundle.getMessage("MenuItemPrint"),newFrame,false,carsTableFrame);  printAction.setEnabled(false);  AbstractAction previewAction=new PrintCarRosterAction(Bundle.getMessage("MenuItemPreview"),newFrame,true,carsTableFrame);  previewAction.setEnabled(false);  add(importAction);  add(exportAction);  add(deleteAction);  add(resetMovesAction);  add(printAction);  add(previewAction);switch (pMenuType) {case MAINMENU:    importAction.setEnabled(true);  exportAction.setEnabled(true);deleteAction.setEnabled(true);resetMovesAction.setEnabled(true);printAction.setEnabled(true);previewAction.setEnabled(true);break;case SELECTMENU:case ENTRYMENU:printAction.setEnabled(true);previewAction.setEnabled(true);break;default :log.error("RosterMenu constructed without a valid menuType parameter: " + pMenuType);}}  }
class C{  PBEKey(PBEKeySpec keySpec,String keytype) throws InvalidKeySpecException {  char[] passwd=keySpec.getPassword();  if (passwd == null) {    passwd=new char[0];  }  if (!(passwd.length == 1 && passwd[0] == 0)) {    for (int i=0; i < passwd.length; i++) {      if ((passwd[i] < '\u0020') || (passwd[i] > '\u007E')) {        throw new InvalidKeySpecException("Password is not ASCII");      }    }  }  this.key=new byte[passwd.length];  for (int i=0; i < passwd.length; i++)   this.key[i]=(byte)(passwd[i] & 0x7f);  java.util.Arrays.fill(passwd,' ');  type=keytype;}  }
class C{  public void test() throws Exception {  assertEquals(BM25Similarity.class,getSimilarity("text").getClass());}  }
class C{  public boolean okToSend(){  if (CheckBuffer) {    if (log.isDebugEnabled()) {      log.debug("Buffer Empty: " + OutputBufferEmpty);    }    return (OutputBufferEmpty);  } else {    if (log.isDebugEnabled()) {      log.debug("No Flow Control or Buffer Check");    }    return (true);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_BODY__PATTERN:    return getPattern();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  private static MatrixBlock[] computeQR(MatrixObject in) throws DMLRuntimeException {  Array2DRowRealMatrix matrixInput=DataConverter.convertToArray2DRowRealMatrix(in);  QRDecomposition qrdecompose=new QRDecomposition(matrixInput);  RealMatrix H=qrdecompose.getH();  RealMatrix R=qrdecompose.getR();  MatrixBlock mbH=DataConverter.convertToMatrixBlock(H.getData());  MatrixBlock mbR=DataConverter.convertToMatrixBlock(R.getData());  return new MatrixBlock[]{mbH,mbR};}  }
class C{  public void configureManagers(){  InstanceManager.setLightManager(new jmri.jmrix.powerline.simulator.SpecificLightManager(getTrafficController()));  InstanceManager.setSensorManager(new jmri.jmrix.powerline.simulator.SpecificSensorManager(getTrafficController()));  InstanceManager.setTurnoutManager(new jmri.jmrix.powerline.SerialTurnoutManager(getTrafficController()));}  }
class C{  public void fireQueueSimulationBeforeCleanupEvent(){  MobsimBeforeCleanupEvent<Mobsim> event=new MobsimBeforeCleanupEvent<Mobsim>(this.sim);  MobsimBeforeCleanupListener[] listener=this.listenerList.getListeners(MobsimBeforeCleanupListener.class);  for (int i=0; i < listener.length; i++) {    listener[i].notifyMobsimBeforeCleanup(event);  }}  }
class C{  public static Float[] toObject(final float[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;  }  final Float[] result=new Float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Float(array[i]);  }  return result;}  }
class C{  public void run(){  String vmName=System.getProperty("java.vm.name");  String vmVersion=System.getProperty("java.vm.version");  inform("Using Java=" + vmName + " "+ vmVersion);  inform("");  boolean found=false;  boolean foundJDBC=false;  inform("*** Testing connection to Server: " + m_host + " ***");  if (m_host == null || m_host.length() == 0) {    inform("ERROR: invalid host name");    return;  }  String host=m_host;  inform("Trying Echo - Port 7");  found=testHostPort(host,7);  inform("Trying FTP - Port 21");  if (testHostPort(host,21) && !found)   found=true;  inform("Trying HTTP - Port 80");  if (testHostPort(host,80) && !found)   found=true;  inform("Trying Kerberos - Port 88");  if (testHostPort(host,88) && !found)   found=true;  inform("Trying NetBios Session - Port 139");  if (testHostPort(host,139) && !found)   found=true;  inform("Trying RMI - Port 1099");  if (testHostPort(host,1099) && !found)   found=true;  inform("Trying Oracle Connection Manager - Port 1630");  if (testHostPort(host,1630) && !found)   found=true;  inform("Trying Oracle JDBC - TCP Port 1521");  foundJDBC=testHostPort(host,1521);  int jdbcPort=0;  try {    jdbcPort=Integer.parseInt(m_port);  } catch (  Exception e) {    inform("ERROR: Cannot parse port=" + m_port);    inform(e.getMessage());    return;  }  if (jdbcPort != 1521) {    inform("Trying Oracle JDBC - TCP Port " + jdbcPort);    if (testHostPort(host,jdbcPort) && !foundJDBC)     foundJDBC=true;  }  if (m_worker != null && m_worker.isInterrupted())   return;  if (found && foundJDBC) {    inform("*** Server found: " + host + " ***");    inform("");  } else   if (!found && foundJDBC) {    inform("*** Server found: " + host + " (JDBC only) ***");    inform("");  } else   if (found && !foundJDBC) {    inform("ERROR: Server found: " + host + " - but no JDBC ***");    inform("Make sure that the Oracle Listener process is active");    return;  } else {    inform("ERROR: Server NOT found: " + host + "***");    inform("End Test: Make sure that you can ping the Server");    return;  }  inform("Connect to DB: " + m_dbName);  inform("Connect with entered parameters");  if (!testJDBC(host,jdbcPort,m_dbName,m_uid,m_pwd)) {    if (m_worker != null && m_worker.isInterrupted())     return;    if (jdbcPort != 1521) {      inform("Connect with standard JDBC port 1521");      if (testJDBC(host,1521,m_dbName,m_uid,m_pwd)) {        inform("Please set port to 1521");        return;      }      if (m_worker != null && m_worker.isInterrupted())       return;    }    inform("Connect with user system/manager");    if (testJDBC(host,1521,m_dbName,"system","manager")) {      inform("Please check ADEMPIERE user id and password");      inform(".... and please change SYSTEM password");      return;    }  }  inform("*** Adempiere database found: " + host + ":"+ jdbcPort+ "/"+ m_dbName+ " ***");  if (m_worker != null && m_worker.isInterrupted())   return;  inform("");  inform("Testing available application users:");  testAdempiereUsers(host,jdbcPort);  inform("");  inform("*** Test complete **");}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  DatosUsuario oUser=new DatosUsuario();  oUser.setUser((String)oForm.get(Constants.USUARIO_USUARIO_FIELD));  request.setAttribute(USER_KEY,oUser);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public static long reallocateMemory(long addr,long len){  return UNSAFE.reallocateMemory(addr,len);}  }
class C{  void recomposeWhiteSpaceInfo(WhiteSpaceInfo wsi){  if (null == m_whiteSpaceInfoList)   m_whiteSpaceInfoList=new TemplateList();  m_whiteSpaceInfoList.setTemplate(wsi);}  }
class C{  public T caseTemplateLiteral(TemplateLiteral object){  return null;}  }
class C{  private static void write3dEquilNetwork(String path,Scenario sc){  LOG.info("Writing the elevation network to CSV file...");  BufferedWriter bw=IOUtils.getBufferedWriter(path + "data/equil_elevation.csv.gz");  Counter counter=new Counter("  link # ");  ObjectAttributes linkAttributes=new ObjectAttributes();  try {    bw.write("lid,fx,fy,fz,tx,ty,tz,length,grade");    bw.newLine();    for (    Link l : sc.getNetwork().getLinks().values()) {      Coord cf=l.getFromNode().getCoord();      Coord ct=l.getToNode().getCoord();      double grade=Utils3D.calculateGrade(l);      linkAttributes.putAttribute(l.getId().toString(),"grade",grade);      String line=String.format("%s,%.6f,%.6f,%.6f,%.6f,%.6f,%.6f,%.1f,%.6f\n",l.getId().toString(),cf.getX(),cf.getY(),cf.getZ(),ct.getX(),ct.getY(),ct.getZ(),l.getLength(),grade);      bw.write(line);      counter.incCounter();    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to elevation file.");  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close elevation file.");    }  }  counter.printCounter();}  }
class C{  public static boolean isKeyword(String s,boolean supportOffsetFetch){  if (s == null || s.length() == 0) {    return false;  }  return getSaveTokenType(s,supportOffsetFetch) != IDENTIFIER;}  }
class C{  public int calcHeaderWidth(int col){  return calcHeaderWidth(getJTable(),col);}  }
class C{  public MethodInfo(ConstPool cp,String methodname,MethodInfo src,Map classnameMap) throws BadBytecode {  this(cp);  read(src,methodname,classnameMap);}  }
class C{  public void eor(int size,Register dst,Register src1,Register src2){  super.eor(size,dst,src1,src2,ShiftType.LSL,0);}  }
class C{  public DDFField findField(String pszName,int iFieldIndex){  for (Iterator it=paoFields.iterator(); it.hasNext(); ) {    DDFField ddff=(DDFField)it.next();    if (pszName.equalsIgnoreCase(ddff.getFieldDefn().getName())) {      if (iFieldIndex == 0) {        return ddff;      } else {        iFieldIndex--;      }    }  }  return null;}  }
class C{  public TriggerDefinitionDataException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static String decodeURL(final String s){  boolean needToChange=false;  final int numChars=s.length();  final StringBuilder sb=new StringBuilder(numChars > 500 ? numChars / 2 : numChars);  int i=0;  boolean insearchpart=false;  char c;  byte[] bytes=null;  while (i < numChars) {    c=s.charAt(i);switch (c) {case '?':      sb.append(c);    i++;  insearchpart=true;break;case '+':if (insearchpart) {sb.append(' ');needToChange=true;} else {sb.append(c);}i++;break;case '%':try {if (bytes == null) bytes=new byte[(numChars - i) / 3];int pos=0;while (((i + 2) < numChars) && (c == '%')) {final int v=Integer.parseInt(s.substring(i + 1,i + 3),16);if (v < 0) {return s;}bytes[pos++]=(byte)v;i+=3;if (i < numChars) c=s.charAt(i);}if ((i < numChars) && (c == '%')) {return s;}sb.append(new String(bytes,0,pos,StandardCharsets.UTF_8));} catch (final NumberFormatException e) {return s;}needToChange=true;break;default :sb.append(c);i++;break;}}return (needToChange ? sb.toString() : s);}  }
class C{  public String toProperString(){  if (toProperString == null) {    if (numerator == 0) {      toProperString="0";    } else     if (numerator == denominator) {      toProperString="1";    } else     if (numerator == -1 * denominator) {      toProperString="-1";    } else     if ((numerator > 0 ? -numerator : numerator) < -denominator) {      final int properNumerator=getProperNumerator();      if (properNumerator == 0) {        toProperString=Integer.toString(getProperWhole());      } else {        toProperString=new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();      }    } else {      toProperString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();    }  }  return toProperString;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static int size(short[] array){  return Array.getLength(array);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public static java.util.List<Position> computeAltitude(Globe globe,java.util.List<? extends Position> positions,String altitudeMode){  java.util.List<Position> outPositions=new ArrayList<Position>(positions.size());  for (  Position p : positions) {    outPositions.add(computeAltitude(globe,p,altitudeMode));  }  return outPositions;}  }
class C{  @Override public CharSequence convertToString(Cursor cursor){  if (cursor == null) {    return null;  }  String query=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_QUERY);  if (query != null) {    return query;  }  return null;}  }
class C{  private static int[][] parse(String members){  Vector theRanges=new Vector();  int n=(members == null ? 0 : members.length());  int i=0;  int state=0;  int lb=0;  int ub=0;  char c;  int digit;  while (i < n) {    c=members.charAt(i++);switch (state) {case 0:      if (Character.isWhitespace(c)) {        state=0;      } else       if ((digit=Character.digit(c,10)) != -1) {        lb=digit;        state=1;      } else {        throw new IllegalArgumentException();      }    break;case 1:  if (Character.isWhitespace(c)) {    state=2;  } else   if ((digit=Character.digit(c,10)) != -1) {    lb=10 * lb + digit;    state=1;  } else   if (c == '-' || c == ':') {    state=3;  } else   if (c == ',') {    accumulate(theRanges,lb,lb);    state=6;  } else {    throw new IllegalArgumentException();  }break;case 2:if (Character.isWhitespace(c)) {state=2;} else if (c == '-' || c == ':') {state=3;} else if (c == ',') {accumulate(theRanges,lb,lb);state=6;} else {throw new IllegalArgumentException();}break;case 3:if (Character.isWhitespace(c)) {state=3;} else if ((digit=Character.digit(c,10)) != -1) {ub=digit;state=4;} else {throw new IllegalArgumentException();}break;case 4:if (Character.isWhitespace(c)) {state=5;} else if ((digit=Character.digit(c,10)) != -1) {ub=10 * ub + digit;state=4;} else if (c == ',') {accumulate(theRanges,lb,ub);state=6;} else {throw new IllegalArgumentException();}break;case 5:if (Character.isWhitespace(c)) {state=5;} else if (c == ',') {accumulate(theRanges,lb,ub);state=6;} else {throw new IllegalArgumentException();}break;case 6:if (Character.isWhitespace(c)) {state=6;} else if ((digit=Character.digit(c,10)) != -1) {lb=digit;state=1;} else {throw new IllegalArgumentException();}break;}}switch (state) {case 0:break;case 1:case 2:accumulate(theRanges,lb,lb);break;case 4:case 5:accumulate(theRanges,lb,ub);break;case 3:case 6:throw new IllegalArgumentException();}return canonicalArrayForm(theRanges);}  }
class C{  public TraceCollector collector(){  return collector;}  }
class C{  public final void update(){  update(null);}  }
class C{  public boolean isCompatible(){  return isCompatible(new Version());}  }
class C{  public void add(StreetRouter.State lastState){  boolean first=true;  for (StreetRouter.State cur=lastState; cur != null; cur=cur.backState) {    if (first && firstState.vertex == cur.vertex) {      states.removeFirst();      edges.removeFirst();    }    first=false;    states.addFirst(cur);    if (cur.backEdge != -1 && cur.backState != null) {      edges.addFirst(cur.backEdge);    }  }  firstState=states.getFirst();  distance+=lastState.distance;}  }
class C{  public DataSet filter(DataSet dataSet){  return DataUtils.removeConstantColumns(dataSet);}  }
class C{  void executeOp(StreamOp op,boolean success){  closeLock.readLock().lock();  try {    if (StreamStatus.isUnavailable(status)) {      op.fail(new StreamUnavailableException("Stream " + name + " is closed."));      return;    }    doExecuteOp(op,success);  }  finally {    closeLock.readLock().unlock();  }}  }
class C{  protected void transformPage(View view,float position){  int pageWidth=view.getWidth();  if (position < -1) {    view.setAlpha(0);  } else   if (position <= 0) {    view.setAlpha(1);    if (virtualPos > 0) {      view.setTranslationX(pageWidth * -position * 2);    } else {      view.setTranslationX(0);    }    float scaleFactor=MIN_SCALE + (1 - MIN_SCALE) * (1 - Math.abs(position));    view.setScaleX(scaleFactor);    view.setScaleY(scaleFactor);  } else   if (position <= 1) {    view.setAlpha(1 - position);    view.setTranslationX(pageWidth * -position);    float scaleFactor=MIN_SCALE + (1 - MIN_SCALE) * (1 - Math.abs(position));    view.setScaleX(scaleFactor);    view.setScaleY(scaleFactor);  } else {    view.setAlpha(0);  }}  }
class C{  protected List<String> startServers(int nServer) throws Exception {  String temporaryCollection="tmp_collection";  System.setProperty("collection",temporaryCollection);  for (int i=1; i <= nServer; i++) {    File jettyDir=createTempDir("jetty").toFile();    jettyDir.mkdirs();    setupJettySolrHome(jettyDir);    JettySolrRunner jetty=createJetty(jettyDir,null,"shard" + i);    jettys.add(jetty);  }  ZkStateReader zkStateReader=jettys.get(0).getCoreContainer().getZkController().getZkStateReader();  for (int i=1; i <= shardCount; i++) {    this.printLayout();    zkStateReader.getLeaderRetry(temporaryCollection,"shard" + i,15000);  }  List<String> nodeNames=new ArrayList<>();  for (  Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {    for (    Replica replica : shard.getReplicas()) {      nodeNames.add(replica.getNodeName());    }  }  this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader,true);  this.deleteCollection(temporaryCollection);  this.waitForCollectionToDisappear(temporaryCollection);  System.clearProperty("collection");  return nodeNames;}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    if (functionName != null) {      functionName.visit(v);    }    for (    AstNode param : getParams()) {      param.visit(v);    }    getBody().visit(v);    if (!isExpressionClosure) {      if (memberExprNode != null) {        memberExprNode.visit(v);      }    }  }}  }
class C{  public void rename(Name oldName,Name newName) throws NamingException {  if (_nc == null)   throw new ConfigurationException("Context does not have a corresponding NamingContext");  if (oldName.size() == 0 || newName.size() == 0)   throw new InvalidNameException("One or both names empty");  java.lang.Object obj=lookup(oldName);  bind(newName,obj);  unbind(oldName);}  }
class C{  private Document cleanDom(Document jsoupDoc){  String[] tagsToRemove={"head","script",".hidden","embedded"};  for (  String tag : tagsToRemove) {    Elements selectedTags=jsoupDoc.select(tag);    for (    Element element : selectedTags) {      element.remove();    }  }  return jsoupDoc;}  }
class C{  public UserFeed(){  super();  getCategories().add(UserData.USER_CATEGORY);  this.delegate=new UserDataImpl(this);}  }
class C{  public QueryAutoStopWordAnalyzer(Analyzer delegate,IndexReader indexReader,float maxPercentDocs) throws IOException {  this(delegate,indexReader,MultiFields.getIndexedFields(indexReader),maxPercentDocs);}  }
class C{  public void checkWarehouse(boolean sbf){  if (warehouse == null) {    logger.fine("need to create warehouse");    if (lst != null && lst.getDatabaseName() != null && lst.getDatabaseName().equals("DCW")) {      warehouse=new VPFLayerDCWWarehouse();    } else     if (sbf) {      warehouse=new VPFFeatureGraphicWarehouse();    } else {      warehouse=new VPFLayerGraphicWarehouse();    }  } else   if ((sbf && !(warehouse instanceof VPFFeatureGraphicWarehouse)) || (!sbf && warehouse instanceof VPFFeatureGraphicWarehouse)) {    warehouse=null;    checkWarehouse(sbf);  }}  }
class C{  public static SignatureData sign(PrivateKey signerKey,SecurityAlgorithm algorithm,byte[] dataToSign) throws NoSuchAlgorithmException, SignatureException, InvalidKeyException {  try {    return CryptoUtil.signAsymm(signerKey,algorithm,dataToSign);  } catch (  ServiceResultException e) {    throw new SignatureException(e);  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  private Token toPrefixToken(ILeafNode leaf){  Lexer lexer=new InternalN4JSLexer();  String text=leaf.getText();  String prefix=text.substring(0,endOffset - leaf.getTotalOffset());  ANTLRStringStream stream=new ANTLRStringStream(prefix);  lexer.setCharStream(stream);  Token nextToken=lexer.nextToken();  return new CommonToken(nextToken.getType(),nextToken.getText());}  }
class C{  public ScatterChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);  size=renderer.getPointSize();}  }
class C{  public TimeSeriesWrapper2(DataWrapper data,Parameters params){  DataModelList dataSets=data.getDataModelList();  DataModelList timeSeriesDataSets=new DataModelList();  for (  DataModel dataModel : dataSets) {    if (!(dataModel instanceof DataSet)) {      throw new IllegalArgumentException("Only tabular data sets can be converted to time lagged form.");    }    DataSet dataSet=(DataSet)dataModel;    DataSet timeSeries=TimeSeriesUtils.createLagDataWithIndex(dataSet,params.getInt("numTimeLags",1));    if (dataSet.getName() != null) {      timeSeries.setName(dataSet.getName());    }    timeSeriesDataSets.add(timeSeries);  }  this.setDataModel(timeSeriesDataSets);  this.setSourceGraph(data.getSourceGraph());  LogDataUtils.logDataModelList("Expansion of parent data into lagged data.",getDataModelList());}  }
class C{  public ObjectVector(int blocksize,int increaseSize){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_map=new Object[blocksize];}  }
class C{  private int drawLabelString(Object nativeFont,String text,int x,int y,int textSpaceW,boolean isTickerRunning,int tickerShiftText,int textDecoration,boolean rtl,boolean endsWith3Points,int textWidth,int fontHeight){  int cx=getClipX();  int cy=getClipY();  int cw=getClipWidth();  int ch=getClipHeight();  clipRect(x,cy,textSpaceW,ch);  int drawnW=drawLabelText(textDecoration,rtl,isTickerRunning,endsWith3Points,nativeFont,textWidth,textSpaceW,tickerShiftText,text,x,y,fontHeight);  setClip(cx,cy,cw,ch);  return drawnW;}  }
class C{  public void printTreeForHumans(final EvolutionState state,final int log,final int verbosity){  if (printStyle == PRINT_STYLE_C)   state.output.print(child.makeCTree(true,printTerminalsAsVariablesInC,printTwoArgumentNonterminalsAsOperatorsInC),log); else   if (printStyle == PRINT_STYLE_LATEX)   state.output.print(child.makeLatexTree(),log); else   if (printStyle == PRINT_STYLE_DOT)   state.output.print(child.makeGraphvizTree(),log); else   child.printRootedTreeForHumans(state,log,0,0);  state.output.println("",log);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public SingleRequestSender(CloseableHttpAsyncClient client){  this.client=client;}  }
class C{  private void updateStateView(Metrics metrics){  Platform.runLater(null);  simPaneCtrl.waitAfterStep();}  }
class C{  public E peek(){  if (isEmpty()) {    return null;  }  return elements[0];}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:04.529 -0500",hash_original_method="32E394B127D16A29C22D9E79131F0326",hash_generated_method="D3D0AFA3A0D72548038FAC82CEAAF4E7") private static void addParagraphSpan(Spannable buffer,Object what,int start,int end){  int len=buffer.length();  if (start != 0 && start != len && buffer.charAt(start - 1) != '\n') {    for (start--; start > 0; start--) {      if (buffer.charAt(start - 1) == '\n') {        break;      }    }  }  if (end != 0 && end != len && buffer.charAt(end - 1) != '\n') {    for (end++; end < len; end++) {      if (buffer.charAt(end - 1) == '\n') {        break;      }    }  }  buffer.setSpan(what,start,end,Spannable.SPAN_PARAGRAPH);}  }
class C{  private static void print(String txt){  System.out.println(txt);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  @CanIgnoreReturnValue @Override public int remove(@Nullable Object element,int occurrences){  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  AtomicInteger existingCounter=Maps.safeGet(countMap,element);  if (existingCounter == null) {    return 0;  }  while (true) {    int oldValue=existingCounter.get();    if (oldValue != 0) {      int newValue=Math.max(0,oldValue - occurrences);      if (existingCounter.compareAndSet(oldValue,newValue)) {        if (newValue == 0) {          countMap.remove(element,existingCounter);        }        return oldValue;      }    } else {      return 0;    }  }}  }
class C{  public i removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public Vertex parseGotoByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex equation=network.createTemporyVertex();  equation.addRelationship(Primitive.INSTANTIATION,Primitive.GOTO);  long id=dataStream.readLong();  if (id == 0) {    return equation;  }  Vertex element=network.findById(id);  if (element == null) {    return equation;  }  if (element.is(Primitive.FINALLY)) {    equation.addRelationship(Primitive.FINALLY,Primitive.FINALLY);    id=dataStream.readLong();    if (id == 0) {      return equation;    }    element=network.findById(id);    if (element == null) {      return equation;    }  }  equation.addRelationship(Primitive.GOTO,element);  id=dataStream.readLong();  if (id == 0) {    return equation;  }  element=network.findById(id);  if (element == null) {    return equation;  }  if (element.is(Primitive.ARGUMENT)) {    id=dataStream.readLong();    while (id > 0) {      element=network.findById(id);      if (element != null) {        equation.addRelationship(Primitive.ARGUMENT,element,Integer.MAX_VALUE);      }      id=dataStream.readLong();    }    id=dataStream.readLong();  }  return equation;}  }
class C{  public static Number exp(Number a){  return Math.exp(a.doubleValue());}  }
class C{  private void alertDialog(boolean gpsEnabled,boolean networkLocationEnabled,boolean cellularEnabled){  if (!gpsEnabled || !networkLocationEnabled) {    sendCallback(PluginResult.Status.ERROR,JSONHelper.errorJSON(PROVIDER_PRIMARY,ErrorMessages.LOCATION_SERVICES_UNAVAILABLE()));    final DialogFragment gpsFragment=new GPSAlertDialogFragment();    gpsFragment.show(_cordovaActivity.getFragmentManager(),"GPSAlert");  }  if (!cellularEnabled) {    sendCallback(PluginResult.Status.ERROR,JSONHelper.errorJSON(PROVIDER_PRIMARY,ErrorMessages.CELL_DATA_NOT_AVAILABLE()));    final DialogFragment networkUnavailableFragment=new NetworkUnavailableDialogFragment();    networkUnavailableFragment.show(_cordovaActivity.getFragmentManager(),"NetworkUnavailableAlert");  }}  }
class C{  public IncrementMove(int pos){  if (pos < 0 || pos > 1) {    throw new IllegalArgumentException("Only two spaces to be incremented.");  }  this.pos=pos;}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  put(key,new Long(value));  return this;}  }
class C{  public boolean contains(int s){  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    int node=m_map[i];    if (node == s)     return true;  }  return false;}  }
class C{  final Entry<K,V> removeMapping(Object o){  if (!(o instanceof Map.Entry))   return null;  Map.Entry<K,V> entry=(Map.Entry<K,V>)o;  Object key=entry.getKey();  int hash=(key == null) ? 0 : hash(keyEquality.hashCode(key));  int i=indexFor(hash,table.length);  Entry<K,V> prev=table[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (e.hash == hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      e.recordRemoval(this);      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void signalLifecycleChange(Stage stage,Activity activity){  Log.d(TAG,"Lifecycle status change: " + activity + " in: "+ stage);  boolean needsAdd=true;  Iterator<ActivityStatus> statusIterator=mActivityStatuses.iterator();  while (statusIterator.hasNext()) {    ActivityStatus status=statusIterator.next();    Activity statusActivity=status.mActivityRef.get();    if (null == statusActivity) {      statusIterator.remove();    } else     if (activity == statusActivity) {      needsAdd=false;      status.mLifecycleStage=stage;    }  }  if (needsAdd) {    mActivityStatuses.add(new ActivityStatus(activity,stage));  }synchronized (mCallbacks) {    Iterator<WeakReference<ActivityLifecycleCallback>> refIter=mCallbacks.iterator();    while (refIter.hasNext()) {      ActivityLifecycleCallback callback=refIter.next().get();      if (null == callback) {        refIter.remove();      } else {        try {          Log.d(TAG,"running callback: " + callback);          callback.onActivityLifecycleChanged(activity,stage);          Log.d(TAG,"callback completes: " + callback);        } catch (        RuntimeException re) {          Log.e(TAG,String.format("Callback threw exception! (callback: %s activity: %s stage: %s)",callback,activity,stage),re);        }      }    }  }}  }
class C{  public boolean isIntersectionType(){  return this.otherBounds != null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean isPrimitive(Type type) throws Exception {  return isPrimitive(type.getType());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.309 -0500",hash_original_method="1725E87F4919C96ACB03BE0E2182C74B",hash_generated_method="90C5B29A4950490C67CE08A54E835D64") public static void appendQuotedShellArgs(StringBuilder command,String[] args){  for (  String arg : args) {    command.append(" '").append(arg.replace("'","'\\''")).append("'");  }}  }
class C{  public static HashMap<String,String> queryProviderSettings(ContentResolver cr,long providerId){  HashMap<String,String> settings=new HashMap<String,String>();  String[] projection={NAME,VALUE};  Cursor c=cr.query(ContentUris.withAppendedId(CONTENT_URI,providerId),projection,null,null,null);  if (c == null) {    return null;  }  while (c.moveToNext()) {    settings.put(c.getString(0),c.getString(1));  }  c.close();  return settings;}  }
class C{  public TrayNotification(String title,String body,Image img,Paint rectangleFill,Notification notification){  initTrayNotification(title,body,notification);  setImage(img);  setRectangleFill(rectangleFill);}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum < 2)   reportWrongNumberArgs();}  }
class C{  public Portfolio findDefault(){  try {    Portfolio portfolio=null;    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Portfolio> query=builder.createQuery(Portfolio.class);    Root<Portfolio> from=query.from(Portfolio.class);    query.select(from);    List<Portfolio> items=entityManager.createQuery(query).getResultList();    for (    Portfolio item : items) {      if (item.getIsDefault()) {        item.getPortfolioAccounts().size();        portfolio=item;        break;      }    }    entityManager.getTransaction().commit();    return portfolio;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public CSearchAction(final JComponent parent,final IViewContainer container){  super("Search View");  checkArguments(parent);  m_container=Preconditions.checkNotNull(container,"IE01149: Project argument can not be null");  m_parent=null;  m_parentComponent=parent;  putValue(MNEMONIC_KEY,(int)"HK_MENU_SEARCH_VIEW".charAt(0));}  }
class C{  public VariableReference addMethodFor(TestCase test,VariableReference callee,GenericMethod method,int position) throws ConstructionFailedException {  logger.debug("Adding method {} for {} (Generating {})",method,callee,method.getGeneratedClass());  if (position <= callee.getStPosition()) {    throw new ConstructionFailedException("Cannot insert call on object before the object is defined");  }  currentRecursion.clear();  int length=test.size();  boolean allowNull=true;  Constraints constraints=method.getMethod().getAnnotation(Constraints.class);  if (constraints != null && constraints.noNullInputs()) {    allowNull=false;  }  List<VariableReference> parameters=satisfyParameters(test,callee,Arrays.asList(method.getParameterTypes()),position,1,allowNull,false,true);  int newLength=test.size();  position+=(newLength - length);  Statement st=new MethodStatement(test,method,callee,parameters);  VariableReference ret=test.addStatement(st,position);  ret.setDistance(callee.getDistance() + 1);  logger.debug("Success: Adding method {}",method);  return ret;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    double east=0, west=0, north=0, south=0;    if (inputFile.toLowerCase().endsWith(".dep")) {      WhiteboxRaster input=new WhiteboxRaster(inputFile,"r");      double gridResX=input.getCellSizeX();      double gridResY=input.getCellSizeY();      east=input.getEast();      west=input.getWest();      north=input.getNorth();      south=input.getSouth();      input.close();    } else     if (inputFile.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputFile);      east=input.getxMax();      west=input.getxMin();      north=input.getyMax();      south=input.getyMin();    } else {      showFeedback("There was a problem reading the input file.");      return;    }    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON,fields);    if (inputFile.toLowerCase().endsWith(".shp")) {      output.setProjectionStringFromOtherShapefile(new ShapeFile(inputFile));    }    int[] parts={0};    PointsList points=new PointsList();    points.addPoint(west,north);    points.addPoint(east,north);    points.addPoint(east,south);    points.addPoint(west,south);    points.addPoint(west,north);    Polygon poly=new Polygon(parts,points.getPointsArray());    Object[] rowData=new Object[1];    rowData[0]=new Double(1);    output.addRecord(poly,rowData);    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void verifyVersion(URI uri) throws ControllerException {  NetworkSystem networkDev=getDeviceObject(uri);  NetworkSystemDevice networkDevice=getDevice();  if (networkDevice == null) {    throw NetworkDeviceControllerException.exceptions.verifyVersionFailedNull(uri.toString());  }  String version=null;  try {    version=networkDevice.getVersion(networkDev);    networkDev.setVersion(version);    String minimumSupportedVersion=VersionChecker.getMinimumSupportedVersion(Type.valueOf(networkDev.getSystemType()));    _log.info("Verifying version details : Minimum Supported Version {} - Discovered Firmware Version {}",minimumSupportedVersion,version);    if (VersionChecker.verifyVersionDetails(minimumSupportedVersion,version) < 0) {      networkDev.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.INCOMPATIBLE.name());      throw NetworkDeviceControllerException.exceptions.versionNotSupported(version,minimumSupportedVersion);    } else {      networkDev.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    }  } catch (  Exception ex) {    Date date=new Date();    networkDev.setLastDiscoveryStatusMessage(ex.getMessage());    throw NetworkDeviceControllerException.exceptions.verifyVersionFailed(uri.toString(),date.toString(),ex);  } finally {    if (networkDev != null) {      try {        dbClient.persistObject(networkDev);      } catch (      DatabaseException ex) {        _log.error("Error while persisting object to DB",ex);      }    }  }}  }
class C{  public boolean contains(final StringBuilder s){  return this.dict.contains(s);}  }
class C{  @POST @Path("job/{noteId}/{paragraphId}") @ZeppelinApi public Response runParagraph(@PathParam("noteId") String noteId,@PathParam("paragraphId") String paragraphId,String message) throws IOException, IllegalArgumentException {  LOG.info("run paragraph job asynchronously {} {} {}",noteId,paragraphId,message);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse<>(Status.NOT_FOUND,"note not found.").build();  }  Paragraph paragraph=note.getParagraph(paragraphId);  if (paragraph == null) {    return new JsonResponse<>(Status.NOT_FOUND,"paragraph not found.").build();  }  handleParagraphParams(message,note,paragraph);  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  paragraph.setAuthenticationInfo(subject);  note.persist(subject);  note.run(paragraph.getId());  return new JsonResponse<>(Status.OK).build();}  }
class C{  @Override public void updateBlob(String columnLabel,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,-1);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void paintBox(Graphics g,JComponent c){  int w=c.getWidth();  int h=c.getHeight() - 1;  if (w <= 0 || h <= 0) {    return;  }  Graphics2D g2=(Graphics2D)g;  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  if (c.isEnabled()) {    if (Boolean.parseBoolean(String.valueOf(c.getClientProperty(RapidLookTools.PROPERTY_INPUT_BACKGROUND_DARK)))) {      g2.setColor(Colors.COMBOBOX_BACKGROUND_DARK);    } else {      g2.setColor(Colors.COMBOBOX_BACKGROUND);    }  } else {    g2.setColor(Colors.COMBOBOX_BACKGROUND_DISABLED);  }  g2.fillRoundRect(0,0,w - 1,h,RapidLookAndFeel.CORNER_DEFAULT_RADIUS,RapidLookAndFeel.CORNER_DEFAULT_RADIUS);  int ny=c.getSize().height / 2 - 3;  int nx=c.getWidth() - 15;  if (isDown && c.isEnabled()) {    nx++;    ny++;  }  g2.translate(nx,ny);  if (c.isEnabled()) {    g2.setColor(Colors.COMBOBOX_ARROW);  } else {    g2.setColor(Colors.COMBOBOX_ARROW_DISABLED);  }  w=14;  Polygon arrow=new Polygon(new int[]{0,4,8},new int[]{0,6,0},3);  g2.fillPolygon(arrow);  g2.translate(-nx,-ny);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.414 -0500",hash_original_method="757A7F1755FBEFCF499F2AF609552311",hash_generated_method="668D0695CBFE9527D8AC9CE7602B8447") public boolean onDownloadStart(String url,String userAgent,String contentDisposition,String mimetype,long contentLength){  if (mDownloadListener == null) {    return false;  }  Message msg=obtainMessage(DOWNLOAD_FILE);  Bundle bundle=msg.getData();  bundle.putString("url",url);  bundle.putString("userAgent",userAgent);  bundle.putString("mimetype",mimetype);  bundle.putLong("contentLength",contentLength);  bundle.putString("contentDisposition",contentDisposition);  sendMessage(msg);  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String inputFilesString=null;  WhiteboxRaster.DataScale dataScale=WhiteboxRaster.DataScale.CONTINUOUS;  String[] imageFiles;  int numImages=0;  int i;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      if (args[i].toLowerCase().contains("bool")) {        dataScale=WhiteboxRaster.DataScale.BOOLEAN;      } else       if (args[i].toLowerCase().contains("cat")) {        dataScale=WhiteboxRaster.DataScale.CATEGORICAL;      } else       if (args[i].toLowerCase().contains("con")) {        dataScale=WhiteboxRaster.DataScale.CONTINUOUS;      } else       if (args[i].toLowerCase().contains("rgb")) {        dataScale=WhiteboxRaster.DataScale.RGB;      }    }  }  if (inputFilesString == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      inputHeader=imageFiles[i];      WhiteboxRaster wbr=new WhiteboxRaster(inputHeader,"r");      if (dataScale == WhiteboxRaster.DataScale.RGB && wbr.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("Data scale RGB is only compatible with data type 'float'. " + "This tool will not execute");        return;      }      wbr.setDataScale(dataScale);      wbr.writeHeaderFile();      wbr.close();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isSuperOp(User user){  return getDao().levelContainsUser(UserLevel.SUPEROP,this,user);}  }
class C{  protected static void computePi(int i,double[] dist_i,double[] pij_i,double perplexity,double logPerp){  double beta=estimateInitialBeta(dist_i,perplexity);  double diff=computeH(i,dist_i,pij_i,-beta) - logPerp;  double betaMin=0.;  double betaMax=Double.POSITIVE_INFINITY;  for (int tries=0; tries < PERPLEXITY_MAXITER && Math.abs(diff) > PERPLEXITY_ERROR; ++tries) {    if (diff > 0) {      betaMin=beta;      beta+=(betaMax == Double.POSITIVE_INFINITY) ? beta : ((betaMax - beta) * .5);    } else {      betaMax=beta;      beta-=(beta - betaMin) * .5;    }    diff=computeH(i,dist_i,pij_i,-beta) - logPerp;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TYPE_ARGS:    return ((InternalEList<?>)getTypeArgs()).basicRemove(otherEnd,msgs);case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TARGET:  return basicSetTarget(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isDefined(final String register){  System.out.println(registers.keySet());  return registers.containsKey(register);}  }
class C{  public void workAroundCase874(){  getView().setCenter(CViewSettingsGenerator.createDoubleSetting(getSettings().rawSettings,"view_center_x",0),CViewSettingsGenerator.createDoubleSetting(getSettings().rawSettings,"view_center_y",0));  getView().setWorldRect(CViewSettingsGenerator.createIntegerSetting(getSettings().rawSettings,"world_rect_x",0),CViewSettingsGenerator.createIntegerSetting(getSettings().rawSettings,"world_rect_y",0),CViewSettingsGenerator.createIntegerSetting(getSettings().rawSettings,"world_rect_width",800),CViewSettingsGenerator.createIntegerSetting(getSettings().rawSettings,"world_rect_height",600));  getView().setZoom(CViewSettingsGenerator.createDoubleSetting(getSettings().rawSettings,"zoom",1));  updateViews();}  }
class C{  public void addArgumentArray(String key,String... value){  addArgument(key,value);}  }
class C{  @Override public DescribeSubnetsResult describeSubnets(AmazonEC2Client ec2Client,DescribeSubnetsRequest describeSubnetsRequest){  List<Subnet> subnets=new ArrayList<>();  List<String> requestedSubnetIds=describeSubnetsRequest.getSubnetIds();  if (requestedSubnetIds.isEmpty()) {    requestedSubnetIds.addAll(mockSubnets.keySet());  }  for (  String requestedSubnetId : requestedSubnetIds) {    MockSubnet mockSubnet=mockSubnets.get(requestedSubnetId);    if (mockSubnet == null) {      AmazonServiceException amazonServiceException;      if (requestedSubnetId.startsWith("throw.")) {        String errorCode=requestedSubnetId.substring("throw.".length());        amazonServiceException=new AmazonServiceException(errorCode);        amazonServiceException.setErrorCode(errorCode);        amazonServiceException.setStatusCode(500);      } else {        amazonServiceException=new AmazonServiceException("The subnet ID '" + requestedSubnetId + "' does not exist");        amazonServiceException.setErrorCode(Ec2DaoImpl.ERROR_CODE_SUBNET_ID_NOT_FOUND);        amazonServiceException.setStatusCode(400);      }      throw amazonServiceException;    }    subnets.add(mockSubnet.toAwsObject());  }  DescribeSubnetsResult describeSubnetsResult=new DescribeSubnetsResult();  describeSubnetsResult.setSubnets(subnets);  return describeSubnetsResult;}  }
class C{  public synchronized void start(){  if (this.taskThread == null) {    taskThread=new Thread(this);    taskThread.setName("store-" + thl.getName() + "-"+ taskId);    taskThread.start();  }}  }
class C{  public WrappedByteBuffer(){  this(INITIAL_CAPACITY);}  }
class C{  @Override public void scheduledMonitoring(){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());synchronized (cacheLock) {    try {      stopMonitoringStaleSystem();      handleVNXFileSubscription();    } catch (    IOException e) {      _logger.error(e.getMessage(),e);    }catch (    ConnectionManagerException e) {      _logger.error(e.getMessage(),e);    }  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Sensor validateSensor(String sensorName,Component openFrame){  if (sensorName == null || sensorName.length() < 1) {    if (occupancyNamedSensor != null) {      setOccupancySensorName(null);    }    return null;  }  Sensor s=InstanceManager.sensorManagerInstance().getSensor(sensorName);  if (s == null) {    JOptionPane.showMessageDialog(openFrame,java.text.MessageFormat.format(rb.getString("Error7"),new Object[]{sensorName}),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    return null;  }  if (!sensorName.equals(s.getUserName())) {    sensorName=sensorName.toUpperCase();  }  NamedBeanHandle<Sensor> savedNamedSensor=occupancyNamedSensor;  occupancyNamedSensor=null;  LayoutBlock b=InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class).getBlockWithSensorAssigned(s);  if (b != null) {    if (b.getUseCount() > 0) {      occupancyNamedSensor=savedNamedSensor;      JOptionPane.showMessageDialog(openFrame,java.text.MessageFormat.format(rb.getString("Error6"),new Object[]{sensorName,b.getID()}),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      return null;    } else {      b.setOccupancySensorName(null);    }  }  setOccupancySensorName(sensorName);  return s;}  }
class C{  public boolean isLocationGroupCountingActive(){  return locationGroupCountingActive;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isLeftHandSideDestructuringPattern(Expression expr){  return expr instanceof ObjectLiteral || expr instanceof ArrayLiteral;}  }
class C{  public Namespace pop(String prefix){  if (prefix == null) {    prefix="";  }  Namespace namespace=null;  for (int i=namespaceStack.size() - 1; i >= 0; i--) {    Namespace ns=namespaceStack.get(i);    if (prefix.equals(ns.getPrefix())) {      remove(i);      namespace=ns;      break;    }  }  if (namespace == null) {    System.out.println("Warning: missing namespace prefix ignored: " + prefix);  }  return namespace;}  }
class C{  private int minChild(int i){  int loBound=d * i + 1, hiBound=d * i + d;  int min=loBound;  for (int cur=loBound; cur <= hiBound; cur++) {    if (cur < n && greater(min,cur))     min=cur;  }  return min;}  }
class C{  public double doOperation() throws OperatorFailedException {  double newValue;  final Bounds<Double> bounds=variable.getBounds();  final int dim=variable.getSize();  if (updateAllIndependently) {    for (int i=0; i < dim; i++) {      newValue=coltNormal.nextDouble(model.getMean().getValue(i),1.0 / Math.sqrt(model.getPrecision().getValue(i)));      if (newValue < bounds.getLowerLimit(i) || newValue > bounds.getUpperLimit(i)) {        throw new OperatorFailedException("proposed value outside boundaries");      }      variable.setValue(i,newValue);    }  }  return 0;}  }
class C{  private void checkReadAccess(WindowsPath file) throws IOException {  try {    Set<OpenOption> opts=Collections.emptySet();    FileChannel fc=WindowsChannelFactory.newFileChannel(file.getPathForWin32Calls(),file.getPathForPermissionCheck(),opts,0L);    fc.close();  } catch (  WindowsException exc) {    try {      new WindowsDirectoryStream(file,null).close();    } catch (    IOException ioe) {      exc.rethrowAsIOException(file);    }  }}  }
class C{  public boolean determines(List<Node> z,Node x) throws UnsupportedOperationException {  int[] parents=new int[z.size()];  for (int j=0; j < parents.length; j++) {    parents[j]=covMatrix.getVariables().indexOf(z.get(j));  }  int i=covMatrix.getVariables().indexOf(x);  TetradMatrix matrix2D=covMatrix.getMatrix();  double variance=matrix2D.get(i,i);  if (parents.length > 0) {    TetradMatrix Czz=matrix2D.getSelection(parents,parents);    TetradMatrix inverse;    try {      inverse=Czz.inverse();    } catch (    Exception e) {      return true;    }    TetradVector Cyz=matrix2D.getColumn(i);    Cyz=Cyz.viewSelection(parents);    TetradVector b=inverse.times(Cyz);    variance-=Cyz.dotProduct(b);  }  return variance < 1e-20;}  }
class C{  @Override public String childByText(Selector collection,Selector child,String text) throws UiObjectNotFoundException {  UiObject obj;  if (exist(collection) && objInfo(collection).isScrollable()) {    obj=new UiScrollable(collection.toUiSelector()).getChildByText(child.toUiSelector(),text);  } else {    obj=new UiCollection(collection.toUiSelector()).getChildByText(child.toUiSelector(),text);  }  return addUiObject(obj);}  }
class C{  @Override public boolean scrollToBeginning(Selector obj,boolean isVertical,int maxSwipes,int steps) throws UiObjectNotFoundException {  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());  if (isVertical)   scrollable.setAsVerticalList(); else   scrollable.setAsHorizontalList();  return scrollable.scrollToBeginning(maxSwipes,steps);}  }
class C{  static int multiplyByInt(int a[],final int aSize,final int factor){  return multiplyByInt(a,a,aSize,factor);}  }
class C{  public boolean isEmpty(){synchronized (lock) {    return annotationsDrawOrder.isEmpty();  }}  }
class C{  public static ArrayList<MediaFile> generateFilename(Movie movie,MediaFile mf,String videoFileName){  ArrayList<MediaFile> newFiles=new ArrayList<>();  boolean newDestIsMultiMovieDir=movie.isMultiMovieDir();  String newPathname="";  String pattern=MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerPathname();  if (!pattern.isEmpty()) {    if (MovieRenamer.isFolderPatternUnique(pattern)) {      newDestIsMultiMovieDir=false;    } else {      newDestIsMultiMovieDir=true;    }    newPathname=MovieRenamer.createDestinationForFoldername(pattern,movie);  } else {    newPathname=Utils.relPath(Paths.get(movie.getDataSource()),movie.getPathNIO());  }  Path newMovieDir=Paths.get(movie.getDataSource(),newPathname);  String newFilename=videoFileName;  if (newFilename == null || newFilename.isEmpty()) {    newFilename=MovieRenamer.createDestinationForFilename(MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerFilename(),movie);  }  if (!isFilePatternValid() && !movie.isDisc()) {    MediaFile newMF=new MediaFile(mf);    newMF.setPath(newMovieDir.toString());    newFiles.add(newMF);    return newFiles;  }  MediaFile defaultMF=null;  String defaultMFext="";  defaultMF=new MediaFile(mf);  defaultMF.replacePathForRenamedFolder(movie.getPathNIO(),newMovieDir);  defaultMFext="." + FilenameUtils.getExtension(defaultMF.getFilename());switch (mf.getType()) {case VIDEO:    MediaFile vid=new MediaFile(mf);  if (movie.isDisc() || mf.isDiscFile()) {    vid.replacePathForRenamedFolder(movie.getPathNIO(),newMovieDir);  } else {    newFilename+=getStackingString(mf);    newFilename+="." + mf.getExtension();    vid.setFile(newMovieDir.resolve(newFilename));  }newFiles.add(vid);break;case TRAILER:MediaFile trail=new MediaFile(mf);newFilename+="-trailer." + mf.getExtension();trail.setFile(newMovieDir.resolve(newFilename));newFiles.add(trail);break;case SAMPLE:MediaFile sample=new MediaFile(mf);newFilename+="-sample." + mf.getExtension();sample.setFile(newMovieDir.resolve(newFilename));newFiles.add(sample);break;case SUBTITLE:List<MediaFileSubtitle> mfsl=mf.getSubtitles();newFilename+=getStackingString(mf);if (mfsl != null && mfsl.size() > 0) {MediaFileSubtitle mfs=mfsl.get(0);if (!mfs.getLanguage().isEmpty()) {String lang=LanguageStyle.getLanguageCodeForStyle(mfs.getLanguage(),MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerLanguageStyle());if (StringUtils.isBlank(lang)) {lang=mfs.getLanguage();}newFilename+="." + lang;}if (mfs.isForced()) {newFilename+=".forced";}}newFilename+="." + mf.getExtension();MediaFile sub=new MediaFile(mf);sub.setFile(newMovieDir.resolve(newFilename));newFiles.add(sub);break;case NFO:if (MovieConnectors.isValidNFO(mf.getFileAsPath())) {List<MovieNfoNaming> nfonames=new ArrayList<>();if (newDestIsMultiMovieDir) {if (MovieModuleManager.MOVIE_SETTINGS.getMovieNfoFilenames().size() > 1) {nfonames.add(MovieNfoNaming.FILENAME_NFO);}} else {nfonames=MovieModuleManager.MOVIE_SETTINGS.getMovieNfoFilenames();}for (MovieNfoNaming name : nfonames) {String newNfoName=movie.getNfoFilename(name,newFilename + ".avi");if (newNfoName.isEmpty()) {continue;}MediaFile nfo=new MediaFile(mf);nfo.setFile(newMovieDir.resolve(newNfoName));newFiles.add(nfo);}} else {if (!MovieModuleManager.MOVIE_SETTINGS.isMovieRenamerNfoCleanup()) {newFiles.add(new MediaFile(mf));}}break;case POSTER:for (MoviePosterNaming name : MovieArtworkHelper.getPosterNamesForMovie(movie)) {String newPosterName=MovieArtworkHelper.getPosterFilename(name,movie,newFilename);if (newPosterName != null && !newPosterName.isEmpty()) {String curExt=mf.getExtension().replaceAll("jpeg","jpg");if (curExt.equalsIgnoreCase("tbn")) {String cont=mf.getContainerFormat();if (cont.equalsIgnoreCase("PNG")) {curExt="png";} else if (cont.equalsIgnoreCase("JPEG")) {curExt="jpg";}}if (!curExt.equals(FilenameUtils.getExtension(newPosterName))) {continue;}}if (StringUtils.isNotBlank(newPosterName)) {MediaFile pos=new MediaFile(mf);pos.setFile(newMovieDir.resolve(newPosterName));newFiles.add(pos);}}break;case FANART:for (MovieFanartNaming name : MovieArtworkHelper.getFanartNamesForMovie(movie)) {String newFanartName=MovieArtworkHelper.getFanartFilename(name,movie,newFilename);if (newFanartName != null && !newFanartName.isEmpty()) {String curExt=mf.getExtension().replaceAll("jpeg","jpg");if (curExt.equalsIgnoreCase("tbn")) {String cont=mf.getContainerFormat();if (cont.equalsIgnoreCase("PNG")) {curExt="png";} else if (cont.equalsIgnoreCase("JPEG")) {curExt="jpg";}}if (!curExt.equals(FilenameUtils.getExtension(newFanartName))) {continue;}}if (StringUtils.isNotBlank(newFanartName)) {MediaFile fan=new MediaFile(mf);fan.setFile(newMovieDir.resolve(newFanartName));newFiles.add(fan);}}break;case BANNER:if (MovieModuleManager.MOVIE_SETTINGS.isImageBanner()) {defaultMFext=defaultMFext.toLowerCase().replaceAll("jpeg","jpg");if (newDestIsMultiMovieDir) {defaultMF.setFilename(newFilename + "-" + mf.getType().name().toLowerCase()+ defaultMFext);} else {defaultMF.setFilename(mf.getType().name().toLowerCase() + defaultMFext);}newFiles.add(defaultMF);}break;case CLEARART:if (MovieModuleManager.MOVIE_SETTINGS.isImageClearart()) {defaultMFext=defaultMFext.toLowerCase().replaceAll("jpeg","jpg");if (newDestIsMultiMovieDir) {defaultMF.setFilename(newFilename + "-" + mf.getType().name().toLowerCase()+ defaultMFext);} else {defaultMF.setFilename(mf.getType().name().toLowerCase() + defaultMFext);}newFiles.add(defaultMF);}break;case DISCART:if (MovieModuleManager.MOVIE_SETTINGS.isImageDiscart()) {defaultMFext=defaultMFext.toLowerCase().replaceAll("jpeg","jpg");if (newDestIsMultiMovieDir) {defaultMF.setFilename(newFilename + "-disc" + defaultMFext);} else {defaultMF.setFilename("disc" + defaultMFext);}newFiles.add(defaultMF);}break;case LOGO:case CLEARLOGO:if (MovieModuleManager.MOVIE_SETTINGS.isImageLogo()) {defaultMFext=defaultMFext.toLowerCase().replaceAll("jpeg","jpg");if (newDestIsMultiMovieDir) {defaultMF.setFilename(newFilename + "-" + mf.getType().name().toLowerCase()+ defaultMFext);} else {defaultMF.setFilename(mf.getType().name().toLowerCase() + defaultMFext);}newFiles.add(defaultMF);}break;case THUMB:if (MovieModuleManager.MOVIE_SETTINGS.isImageThumb()) {defaultMFext=defaultMFext.toLowerCase().replaceAll("jpeg","jpg");if (newDestIsMultiMovieDir) {defaultMF.setFilename(newFilename + "-" + mf.getType().name().toLowerCase()+ defaultMFext);} else {defaultMF.setFilename(mf.getType().name().toLowerCase() + defaultMFext);}newFiles.add(defaultMF);}break;case EXTRAFANART:if (MovieModuleManager.MOVIE_SETTINGS.isImageExtraFanart() && !newDestIsMultiMovieDir) {newFiles.add(defaultMF);}break;case EXTRATHUMB:if (MovieModuleManager.MOVIE_SETTINGS.isImageExtraThumbs() && !newDestIsMultiMovieDir) {newFiles.add(defaultMF);}break;case AUDIO:case GRAPHIC:case SEASON_POSTER:case TEXT:case UNKNOWN:case VIDEO_EXTRA:default :newFiles.add(defaultMF);break;}return newFiles;}  }
class C{  public boolean isSelectionEmpty(){  return getSelectionModel().isSelectionEmpty();}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    IOUtils.closeQuietly(journalWriter);  }  Writer writer=null;  try {    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),HTTP.US_ASCII));    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(UPDATE + " " + entry.diskKey+ '\n');      } else {        writer.write(CLEAN + " " + entry.diskKey+ " "+ EXPIRY_PREFIX+ entry.expiryTimestamp+ entry.getLengths()+ '\n');      }    }  }  finally {    IOUtils.closeQuietly(writer);  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),HTTP.US_ASCII));}  }
class C{  public void computeMovementEnvelope(Entity suggestion){  if (!GUIPreferences.getInstance().getBoolean(GUIPreferences.MOVE_ENVELOPE)) {    clientgui.bv.clearMovementEnvelope();    return;  }  Entity en=ce();  int mvMode=gear;  if ((en == null) && (suggestion == null)) {    return;  } else   if (en == null) {    en=suggestion;    mvMode=GEAR_LAND;  } else {    en=suggestion;  }  if (en.isDone()) {    return;  }  Map<Coords,MovePath> mvEnvData=new HashMap<Coords,MovePath>();  MovePath mp=new MovePath(clientgui.getClient().getGame(),en);  int maxMP;  if (mvMode == GEAR_JUMP || mvMode == GEAR_DFA) {    maxMP=en.getJumpMP();  } else   if (mvMode == GEAR_BACKUP) {    maxMP=en.getWalkMP();  } else {    if (clientgui.getClient().getGame().getOptions().booleanOption("tacops_sprint")) {      maxMP=en.getSprintMP();    } else {      maxMP=en.getRunMP();    }  }  MoveStepType stepType=(mvMode == GEAR_BACKUP) ? MoveStepType.BACKWARDS : MoveStepType.FORWARDS;  if (mvMode == GEAR_JUMP || mvMode == GEAR_DFA) {    mp.addStep(MoveStepType.START_JUMP);  }  ShortestPathFinder pf=ShortestPathFinder.newInstanceOfOneToAll(maxMP,stepType,en.getGame());  pf.run(mp);  mvEnvData=pf.getAllComputedPaths();  Map<Coords,Integer> mvEnvMP=new HashMap<Coords,Integer>((int)((mvEnvData.size() * 1.25) + 1));  for (  Coords c : mvEnvData.keySet()) {    mvEnvMP.put(c,mvEnvData.get(c).countMp(mvMode == GEAR_JUMP));  }  clientgui.bv.setMovementEnvelope(mvEnvMP,en.getWalkMP(),en.getRunMP(),en.getJumpMP(),mvMode);}  }
class C{  @Override public void updateCycleView(Cycle cycle){  textAdapter.setCycle(cycle);}  }
class C{  public void updatePlotProperties(Plot plot){  plot.setOutlinePaint(getOutlinePaint());  plot.setOutlineStroke(getOutlineStroke());  plot.setBackgroundPaint(getBackgroundPaint());  plot.setInsets(getPlotInsets());  if (this.domainAxisPropertyPanel != null) {    Axis domainAxis=null;    if (plot instanceof CategoryPlot) {      CategoryPlot p=(CategoryPlot)plot;      domainAxis=p.getDomainAxis();    } else     if (plot instanceof XYPlot) {      XYPlot p=(XYPlot)plot;      domainAxis=p.getDomainAxis();    }    if (domainAxis != null) {      this.domainAxisPropertyPanel.setAxisProperties(domainAxis);    }  }  if (this.rangeAxisPropertyPanel != null) {    Axis rangeAxis=null;    if (plot instanceof CategoryPlot) {      CategoryPlot p=(CategoryPlot)plot;      rangeAxis=p.getRangeAxis();    } else     if (plot instanceof XYPlot) {      XYPlot p=(XYPlot)plot;      rangeAxis=p.getRangeAxis();    } else     if (plot instanceof PolarPlot) {      PolarPlot p=(PolarPlot)plot;      rangeAxis=p.getAxis();    }    if (rangeAxis != null) {      this.rangeAxisPropertyPanel.setAxisProperties(rangeAxis);    }  }  if (this.plotOrientation != null) {    if (plot instanceof CategoryPlot) {      CategoryPlot p=(CategoryPlot)plot;      p.setOrientation(this.plotOrientation);    } else     if (plot instanceof XYPlot) {      XYPlot p=(XYPlot)plot;      p.setOrientation(this.plotOrientation);    }  }  if (this.drawLines != null) {    if (plot instanceof CategoryPlot) {      CategoryPlot p=(CategoryPlot)plot;      CategoryItemRenderer r=p.getRenderer();      if (r instanceof LineAndShapeRenderer) {        ((LineAndShapeRenderer)r).setLinesVisible(this.drawLines.booleanValue());      }    } else     if (plot instanceof XYPlot) {      XYPlot p=(XYPlot)plot;      XYItemRenderer r=p.getRenderer();      if (r instanceof StandardXYItemRenderer) {        ((StandardXYItemRenderer)r).setPlotLines(this.drawLines.booleanValue());      }    }  }  if (this.drawShapes != null) {    if (plot instanceof CategoryPlot) {      CategoryPlot p=(CategoryPlot)plot;      CategoryItemRenderer r=p.getRenderer();      if (r instanceof LineAndShapeRenderer) {        ((LineAndShapeRenderer)r).setShapesVisible(this.drawShapes.booleanValue());      }    } else     if (plot instanceof XYPlot) {      XYPlot p=(XYPlot)plot;      XYItemRenderer r=p.getRenderer();      if (r instanceof StandardXYItemRenderer) {        ((StandardXYItemRenderer)r).setBaseShapesVisible(this.drawShapes.booleanValue());      }    }  }  if (this.colorBarAxisPropertyPanel != null) {    ColorBar colorBar=null;    if (plot instanceof ContourPlot) {      ContourPlot p=(ContourPlot)plot;      colorBar=p.getColorBar();    }    if (colorBar != null) {      this.colorBarAxisPropertyPanel.setAxisProperties(colorBar);    }  }}  }
class C{  void addReadBlocks(int total,int secondary){  IgniteBiTuple<LongAdder8,LongAdder8> blocksRead0=blocksRead;  blocksRead0.get1().add(total);  blocksRead0.get2().add(secondary);}  }
class C{  private VdcPreCheckResponse preCheck(){  log.info("Starting precheck on vdc connect ...");  if (!isRemoteVdcVersionCompatible(vdcInfo)) {    throw GeoException.fatals.connectVdcPrecheckFail(myVdcId,"Software version from remote vdc is lower than v2.3.");  }  log.info("Send vdc precheck to remote vdc");  VdcPreCheckResponse vdcResp=sendVdcPrecheckRequest(vdcInfo,true);  log.info("Check VIP of remote vdc is used as the ApiEndpoint");  String virtualIP=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);  if (!InetAddresses.isInetAddress(virtualIP)) {    log.info("FQDN or hostname used: {}",virtualIP);    try {      virtualIP=InetAddress.getByName(vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT)).getHostAddress();      vdcInfo.setProperty(GeoServiceJob.VDC_API_ENDPOINT,virtualIP);      log.info("virtual ip of new vdc {}",virtualIP);    } catch (    UnknownHostException e) {      throw GeoException.fatals.invalidFQDNEndPoint(vdcInfo.getProperty(GeoServiceJob.VDC_NAME),virtualIP);    }  }  if (vdcResp.getHostIPv4AddressesMap().containsValue(virtualIP) || vdcResp.getHostIPv6AddressesMap().containsValue(virtualIP)) {    throw GeoException.fatals.wrongIPSpecification(vdcInfo.getProperty(GeoServiceJob.VDC_NAME));  }  log.info("Check vdc stable");  if (!vdcResp.isClusterStable()) {    throw GeoException.fatals.unstableVdcFailure(vdcInfo.getProperty(GeoServiceJob.VDC_NAME));  }  URI unstable=checkAllVdcStable(false,false);  if (unstable != null) {    VirtualDataCenter vdc=dbClient.queryObject(VirtualDataCenter.class,unstable);    String vdcName=(vdc != null) ? vdc.getLabel() : "";    throw GeoException.fatals.unstableVdcFailure(vdcName);  }  log.info("vdc config retrieved: vip={}, IPv4Addresses={}, IPv6Addresses={} isHasData={}",new Object[]{vdcResp.getApiEndpoint(),vdcResp.getHostIPv4AddressesMap(),vdcResp.getHostIPv6AddressesMap(),vdcResp.isHasData()});  if (vdcResp.isHasData()) {    throw GeoException.fatals.remoteVDCContainData();  }  if (!isGeoCompatible(vdcResp)) {    throw GeoException.fatals.remoteVDCInLowerVersion();  }  if (hasTripleVdcVersionsInFederation(vdcResp)) {    throw GeoException.fatals.hasTripleVDCVersionsInFederation();  }  if (!isCompatibleVersion(vdcResp)) {    throw GeoException.fatals.remoteVDCIncompatibleVersion();  }  if (!checkNodeConnectivity(vdcResp)) {    throw GeoException.fatals.failedToCheckConnectivity(errMsg);  }  return vdcResp;}  }
class C{  public ConfigException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ProgrammerManager.class)) {    return true;  }  if (type.equals(jmri.GlobalProgrammerManager.class)) {    return getProgrammerManager().isGlobalProgrammerAvailable();  }  if (type.equals(jmri.AddressedProgrammerManager.class)) {    return getProgrammerManager().isAddressedModePossible();  }  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  return false;}  }
class C{  public IgniteCacheProxy<K,V> cacheNoGate(){  return new IgniteCacheProxy<>(ctx,delegate,opCtx,isAsync(),false);}  }
class C{  public static void renameDownloadedFiles(){  File file=new File("getdown-new.jar");  if (file.exists() && file.length() > 100000) {    File cur=new File("getdown.jar");    if (file.length() != cur.length() || !cur.exists()) {      try {        FileUtils.copyFile(file,cur);      } catch (      IOException e) {        LOGGER.error("Could not update the updater!");      }    }  }  if (Platform.isWindows()) {    file=new File("tinyMediaManager.new");    if (file.exists() && file.length() > 10000 && file.length() < 50000) {      File cur=new File("tinyMediaManager.exe");      try {        FileUtils.copyFile(file,cur);      } catch (      IOException e) {        LOGGER.error("Could not update tmm!");      }    }    file=new File("tinyMediaManagerUpd.new");    if (file.exists() && file.length() > 10000 && file.length() < 50000) {      File cur=new File("tinyMediaManagerUpd.exe");      try {        FileUtils.copyFile(file,cur);      } catch (      IOException e) {        LOGGER.error("Could not update the updater!");      }    }    file=new File("tinyMediaManagerCMD.new");    if (file.exists() && file.length() > 10000 && file.length() < 50000) {      File cur=new File("tinyMediaManagerCMD.exe");      try {        FileUtils.copyFile(file,cur);      } catch (      IOException e) {        LOGGER.error("Could not update CMD TMM!");      }    }  }  if (Platform.isMac()) {    file=new File("JavaApplicationStub.new");    if (file.exists() && file.length() > 0) {      File cur=new File("../../MacOS/JavaApplicationStub");      try {        FileUtils.copyFile(file,cur);      } catch (      IOException e) {        LOGGER.error("Could not update JavaApplicationStub");      }    }  }  if (Platform.isMac()) {    file=new File("Info.plist");    if (file.exists() && file.length() > 0) {      File cur=new File("../../Info.plist");      try {        FileUtils.copyFile(file,cur);      } catch (      IOException e) {        LOGGER.error("Could not update JavaApplicationStub");      }    }  }}  }
class C{  public File nextFile(){  final StringBuffer sb=new StringBuffer();  sb.append(m_baseFile);  if (m_formatter == null) {    sb.append(System.currentTimeMillis());  } else {    final String dateString=m_formatter.format(new Date());    sb.append(dateString);  }  if (m_suffix != null) {    sb.append(m_suffix);  }  return new File(sb.toString());}  }
class C{  public static void assertEqual(Object expected,Object actual){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ")");  }  assertBool(expected.equals(actual));}  }
class C{  public void treeNodesChanged(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    TreeStateNode changedNode;    changedIndexs=e.getChildIndices();    changedNode=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    if (changedNode != null) {      Object changedValue=changedNode.getValue();      changedNode.updatePreferredSize();      if (changedNode.hasBeenExpanded() && changedIndexs != null) {        int counter;        TreeStateNode changedChildNode;        for (counter=0; counter < changedIndexs.length; counter++) {          changedChildNode=(TreeStateNode)changedNode.getChildAt(changedIndexs[counter]);          changedChildNode.setUserObject(treeModel.getChild(changedValue,changedIndexs[counter]));          changedChildNode.updatePreferredSize();        }      } else       if (changedNode == root) {        changedNode.updatePreferredSize();      }      if (!isFixedRowHeight()) {        int aRow=changedNode.getRow();        if (aRow != -1)         this.updateYLocationsFrom(aRow);      }      this.visibleNodesChanged();    }  }}  }
class C{  final public TermNode o(){  return (TermNode)get(2);}  }
class C{  public JavaNumberFormatter(){  super();  initFormats();}  }
class C{  public void assertSeenPrompts(String... prompts){  Assert.assertEquals(Arrays.asList(prompts),seenPrompts);}  }
class C{  public GitlabProject createUserProject(Integer userId,String name,String description,String defaultBranch,Boolean issuesEnabled,Boolean wallEnabled,Boolean mergeRequestsEnabled,Boolean wikiEnabled,Boolean snippetsEnabled,Boolean publik,Integer visibilityLevel,String importUrl) throws IOException {  Query query=new Query().append("name",name).appendIf("description",description).appendIf("default_branch",defaultBranch).appendIf("issues_enabled",issuesEnabled).appendIf("wall_enabled",wallEnabled).appendIf("merge_requests_enabled",mergeRequestsEnabled).appendIf("wiki_enabled",wikiEnabled).appendIf("snippets_enabled",snippetsEnabled).appendIf("public",publik).appendIf("visibility_level",visibilityLevel).appendIf("import_url",importUrl);  String tailUrl=GitlabProject.URL + "/user/" + userId+ query.toString();  return dispatch().to(tailUrl,GitlabProject.class);}  }
class C{  private void openSyncSettings(final String accountName){  if (TextUtils.isEmpty(accountName))   return;  Intent intent=PreferencesLauncher.createIntentForSettingsPage(mActivity,SyncCustomizationFragment.class.getName());  Bundle args=new Bundle();  args.putString(SyncCustomizationFragment.ARGUMENT_ACCOUNT,accountName);  intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT_ARGUMENTS,args);  mActivity.startActivity(intent);}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  for (  Map.Entry<DateTime,? extends Map<DateTime,Money>> entry : delegate.entrySet()) {    builder.append(String.format(" - %s\n",entry.getKey()));    for (    Map.Entry<DateTime,Money> subEntry : entry.getValue().entrySet()) {      builder.append(String.format("   - %s - %s\n",subEntry.getKey(),subEntry.getValue()));    }  }  return builder.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedMediaFileCall(stack,0)) {    return makeNetworkedCall(stack);  }  MediaFile mf=getMediaFile(stack);  return new Long(mf == null ? 0 : mf.getSize());}  }
class C{  public static float trunc(Float number,int precision){  if (number < 0f) {    return (float)(Math.ceil(number.doubleValue() * Math.pow(10,precision)) / Math.pow(10,precision));  }  return (float)(Math.floor(number.doubleValue() * Math.pow(10,precision)) / Math.pow(10,precision));}  }
class C{  public boolean attackEntityFrom(DamageSource source,float amount){  return !this.isEntityInvulnerable(source) && super.attackEntityFrom(source,amount);}  }
class C{  static double fabs(double a){  return Math.abs(a);}  }
class C{  private FormSpecParser(String source,String description,LayoutMap layoutMap,boolean horizontal){  checkNotNull(source,"The %S must not be null.",description);  checkNotNull(layoutMap,"The LayoutMap must not be null.");  this.layoutMap=layoutMap;  this.source=this.layoutMap.expand(source,horizontal);}  }
class C{  public BaseMutation(String table,PersistenceController ctrl){  if (table == null || table.trim().isEmpty())   throw new IllegalArgumentException("Table name should be specified");  if (ctrl == null)   throw new IllegalArgumentException("Persistence controller should be specified");  this.table=table;  this.ctrl=ctrl;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <T,P>boolean removeIfWith(Iterable<T> iterable,Predicate2<? super T,? super P> predicate,P parameter){  if (iterable instanceof MutableCollection) {    return ((MutableCollection<T>)iterable).removeIfWith(predicate,parameter);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.removeIfWith((ArrayList<T>)iterable,predicate,parameter);  }  if (iterable instanceof List) {    return ListIterate.removeIfWith((List<T>)iterable,predicate,parameter);  }  if (iterable != null) {    return IterableIterate.removeIfWith(iterable,predicate,parameter);  }  throw new IllegalArgumentException("Cannot perform a remove on null");}  }
class C{  protected void peekPanel(StateChangeReason reason){  startShowing();  animatePanelToState(PanelState.PEEKED,reason);}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  public static double normalCDF(double x){  return (0.5 * (1.0 + (erf(x / (Math.sqrt(2.0))))));}  }
class C{  protected void write(DataOutput out) throws IOException {  out.write(fieldName);  out.write(new byte[11 - fieldName.length]);  out.writeByte(dataType.symbol);  out.writeInt(0x00);  out.writeByte(fieldLength);  out.writeByte(decimalCount);  out.writeShort((short)0x00);  out.writeByte((byte)0x00);  out.writeShort((short)0x00);  out.writeByte((byte)0x00);  out.write(new byte[7]);  out.writeByte((byte)0x00);}  }
class C{  public int length(){  return builder.length();}  }
class C{  private void processNewPort(DatapathId sw,OFPort p){  if (isLinkDiscoverySuppressed(sw,p)) {    return;  }  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null) {    return;  }  NodePortTuple npt=new NodePortTuple(sw,p);  discover(sw,p);  addToQuarantineQueue(npt);}  }
class C{  public static List<Node> replaceNodes(List<Node> originalNodes,List<Node> newNodes){  List<Node> convertedNodes=new LinkedList<>();  for (  Node node : originalNodes) {    for (    Node _node : newNodes) {      if (node.getName().equals(_node.getName())) {        convertedNodes.add(_node);        break;      }    }  }  return convertedNodes;}  }
class C{  public Rotate3dAnimation(float fromDegrees,float toDegrees,float centerX,float centerY,float depthZ,boolean reverse){  mFromDegrees=fromDegrees;  mToDegrees=toDegrees;  mCenterX=centerX;  mCenterY=centerY;  mDepthZ=depthZ;  mReverse=reverse;}  }
class C{  public static boolean extract(File zip,File out){  ZipInputStream zis;  try {    zis=new ZipInputStream(new FileInputStream(zip));  } catch (  FileNotFoundException e) {    Log.error("Couldn't extract %s: File not found.",zip.getName());    e.printStackTrace();    return false;  }  try {    ZipEntry ze;    while ((ze=zis.getNextEntry()) != null) {      if (ze.isDirectory())       continue;      File dst=new File(out,ze.getName());      delete(dst);      mkdirs(dst);      FileOutputStream fos=new FileOutputStream(dst);      byte[] data=new byte[65536];      int read;      while ((read=zis.read(data)) > 0)       fos.write(data,0,read);      close(fos);    }    return true;  } catch (  FileNotFoundException e) {    Log.error("Couldn't extract a file from %s. Maybe you're missing some permissions?",zip.getName());    e.printStackTrace();    return false;  }catch (  IOException e) {    Log.error("IOException while extracting %s.",zip.getName());    e.printStackTrace();    return false;  } finally {    close(zis);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_BINDING__DEFINED_VARIABLE:    setDefinedVariable((TVariable)null);  return;}super.eUnset(featureID);}  }
class C{  public final String name(){  return m_Name;}  }
class C{  public static Method findMethod(Object self,String name,String desc){  Method m=findMethod2(self.getClass(),name,desc);  if (m == null)   error(self.getClass(),name,desc);  return m;}  }
class C{  private void sendStageProgressPatch(State current,TaskState.TaskStage stage){  if (current.isSelfProgressionDisabled) {    return;  }  this.sendSelfPatch(buildPatch(stage,null));}  }
class C{  private static void addGroup(String testName){  String testNameSplit[]=testName.replace('.','_').split("_");  String group=testNameSplit[0];  for (int i=1; i < LEVEL; i++) {    group=group + "." + testNameSplit[i];  }  if (!groups.contains(group)) {    groups.add(group);    groupNames.put(group,getDisplayGroupName(group));  }}  }
class C{  public KEYRecord(Name name,int dclass,long ttl,int flags,int proto,int alg,PublicKey key) throws DNSSEC.DNSSECException {  super(name,Type.KEY,dclass,ttl,flags,proto,alg,DNSSEC.fromPublicKey(key,alg));  publicKey=key;}  }
class C{  public boolean applyOptions() throws IOException {  LibrarySettings.DIRECTORIES_TO_INCLUDE.setValue(new HashSet<File>());  LibrarySettings.DIRECTORIES_NOT_TO_INCLUDE.setValue(new HashSet<File>());  for (  File f : directoryPanel.getRootsToInclude()) {    if (f != null) {      LibrarySettings.DIRECTORIES_TO_INCLUDE.add(f);    }  }  for (  File f : directoryPanel.getFoldersToExclude()) {    if (f != null) {      if (f.equals(SharingSettings.TORRENT_DATA_DIR_SETTING.getValue())) {        LibrarySettings.DIRECTORIES_TO_INCLUDE.add(f);      } else {        System.out.println("Not including " + f.getAbsolutePath());        LibrarySettings.DIRECTORIES_NOT_TO_INCLUDE.add(f);      }    }  }  LibraryMediator.instance().clearDirectoryHolderCaches();  return false;}  }
class C{  public static final byte[] decode(String encoded) throws Base64DecodingException {  if (encoded == null) {    return null;  }  byte[] bytes=new byte[encoded.length()];  int len=getBytesInternal(encoded,bytes);  return decodeInternal(bytes,len);}  }
class C{  private static boolean validate(SearchInformation info){switch (validateInfo(info)) {case QUERY_EMPTY:    return false;case QUERY_TOO_SHORT:  GUIMediator.showMessage(I18n.tr("Your search must be at least three characters to avoid congesting the network."));return false;case QUERY_TOO_LONG:GUIMediator.showMessage(I18n.tr("Your search is too long. Please make your search smaller and try again."));return false;case QUERY_VALID:return true;default :return true;}}  }
class C{  private void handleUri(Uri uri){  if (uri.toString().matches(".*/user/[^/]+/resetpass/[^/]+")) {    Intent intent=new Intent(this,PasswordRecoveryActivity.class);    intent.putExtra("url",uri.toString());    startActivity(intent);    return;  }  Optional<FeedFilterWithStart> result=FeedFilterWithStart.fromUri(uri);  if (result.isPresent()) {    FeedFilter filter=result.get().getFilter();    Optional<ItemWithComment> start=result.get().getStart();    boolean clear=shouldClearOnIntent();    gotoFeedFragment(filter,clear,start);  } else {    gotoFeedFragment(defaultFeedFilter(),true);  }}  }
class C{  public void removeLayoutComponent(Component comp){}  }
class C{  private InputFactory(){}  }
class C{  public long startTime(){  return DistributionStats.getStatTime();}  }
class C{  public MutableDouble3D(final MutableDouble2D p){  x=p.x;  y=p.y;  z=0.0;}  }
class C{  private void addOutsideTurn(int orientation,boolean addStartPoint){  if (offset0.p1.distance(offset1.p0) < distance * OFFSET_SEGMENT_SEPARATION_FACTOR) {    segList.addPt(offset0.p1);    return;  }  if (bufParams.getJoinStyle() == BufferParameters.JOIN_MITRE) {    addMitreJoin(s1,offset0,offset1,distance);  } else   if (bufParams.getJoinStyle() == BufferParameters.JOIN_BEVEL) {    addBevelJoin(offset0,offset1);  } else {    if (addStartPoint)     segList.addPt(offset0.p1);    addFillet(s1,offset0.p1,offset1.p0,orientation,distance);    segList.addPt(offset1.p0);  }}  }
class C{  public boolean isSuppressRepeats(){  Object oo=get_Value(COLUMNNAME_IsSuppressRepeats);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public double evaluateExpression(Instance instance) throws Exception {  double[] vals=new double[instance.numAttributes() + 1];  for (int i=0; i < instance.numAttributes(); i++) {    if (instance.isMissing(i)) {      vals[i]=Utils.missingValue();    } else {      vals[i]=instance.value(i);    }  }  evaluateExpression(vals);  return vals[vals.length - 1];}  }
class C{  public int[] valueArray(int[] array){  if (array == null || array.length != size()) {    array=new int[count];  }  System.arraycopy(values,0,array,0,count);  return array;}  }
class C{  private boolean cmd_save(){  ListItem listitem=orderField.getSelectedItem();  KeyNamePair pp=null;  if (listitem != null)   pp=listitem.toKeyNamePair();  if (pp != null && pp.getKey() > 0)   return cmd_saveOrder(pp.getKey());  listitem=invoiceField.getSelectedItem();  pp=null;  if (listitem != null)   pp=listitem.toKeyNamePair();  if (pp != null && pp.getKey() > 0)   return cmd_saveInvoice(pp.getKey());  listitem=projectField.getSelectedItem();  pp=null;  if (listitem != null)   pp=listitem.toKeyNamePair();  if (pp != null && pp.getKey() > 0)   return cmd_saveProject(pp.getKey());  log.log(Level.SEVERE,"Nothing selected");  return false;}  }
class C{  static private float dataPercent(final long usedData,final long totalData){  if (totalData == 0)   return 0.0f;  final BigDecimal used=new BigDecimal(100 * usedData);  final BigDecimal total=new BigDecimal(totalData);  return used.divide(total,2,RoundingMode.HALF_UP).floatValue();}  }
class C{  public static Color createColor(int red,int green,int blue,int alpha){  return createColor(red,green,blue,alpha,true);}  }
class C{  @Override public void handle(String target,HttpServletRequest request,HttpServletResponse response,int dispatch) throws IOException, ServletException {  final Request baseRequest=(request instanceof Request) ? ((Request)request) : HttpConnection.getCurrentConnection().getRequest();  final Response baseResponse=(response instanceof Response) ? ((Response)response) : HttpConnection.getCurrentConnection().getResponse();  HttpMon httpMon=null;  try {    httpMon=httpMonFactory.start(baseRequest,baseResponse);    super.handle(target,request,response,dispatch);  } catch (  Throwable e) {    httpMon.throwException(e);  } finally {    httpMon.stop();  }}  }
class C{  final void close(){  _isClose=true;  LockSupport.unpark(this);}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(this.getModifiers());}  }
class C{  public void registerSource(ProgressSource pi){synchronized (progressSourceList) {    if (progressSourceList.contains(pi))     return;    progressSourceList.add(pi);  }  if (progressListenerList.size() > 0) {    ArrayList<ProgressListener> listeners=new ArrayList<ProgressListener>();synchronized (progressListenerList) {      for (Iterator<ProgressListener> iter=progressListenerList.iterator(); iter.hasNext(); ) {        listeners.add(iter.next());      }    }    for (Iterator<ProgressListener> iter=listeners.iterator(); iter.hasNext(); ) {      ProgressListener pl=iter.next();      ProgressEvent pe=new ProgressEvent(pi,pi.getURL(),pi.getMethod(),pi.getContentType(),pi.getState(),pi.getProgress(),pi.getExpected());      pl.progressStart(pe);    }  }}  }
class C{  public static void validateOfficeCode(String sessionID,String code,String entidad) throws SessionException, ValidationException {  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  Transaction tran=null;  try {    Session session=HibernateUtil.currentSession(entidad);    tran=session.beginTransaction();    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    ScrOfic scrOfic=ISicresQueries.getScrOficByCode(session,code);    if (scrOfic == null) {      throw new ValidationException(ValidationException.ERROR_ATTRIBUTE_NOT_FOUND);    }    List openBooks=new ArrayList();    for (Iterator it=cacheBag.keySet().iterator(); it.hasNext(); ) {      Object o=it.next();      if (o instanceof Integer) {        Integer bookID=(Integer)o;        StringBuffer query=new StringBuffer();        query.append("FROM ");        query.append(HIBERNATE_Idocfdrstat);        query.append(" scr WHERE scr.archid=? AND scr.userid=? and scr.stat=1");        int result=session.delete(query.toString(),new Object[]{bookID,user.getId()},new Type[]{Hibernate.INTEGER,Hibernate.INTEGER});        if (log.isDebugEnabled()) {          log.debug("Desbloqueos  [" + result + "]");        }        openBooks.add(bookID);      }    }    for (Iterator it=openBooks.iterator(); it.hasNext(); ) {      Integer bookIdForDelete=(Integer)it.next();      if (cacheBag.containsKey(bookIdForDelete)) {        cacheBag.remove(bookIdForDelete);      }    }    DBEntityDAOFactory.getCurrentDBEntityDAO().deleteIdsGenerationTable(user.getId(),entidad);    user.setDeptid(new Integer(scrOfic.getDeptid()));    ScrTmzofic scrtmzofic=getScrTmzofic(session,scrOfic.getId());    if (cacheBag.containsKey(HIBERNATE_ScrOfic)) {      cacheBag.remove(HIBERNATE_ScrOfic);    }    cacheBag.put(HIBERNATE_ScrOfic,scrOfic);    cacheBag.remove(HIBERNATE_Iuseruserhdr);    cacheBag.put(HIBERNATE_Iuseruserhdr,user);    if (cacheBag.containsKey(HIBERNATE_ScrTmzofic)) {      cacheBag.remove(HIBERNATE_ScrTmzofic);    }    if (scrtmzofic != null) {      cacheBag.put(HIBERNATE_ScrTmzofic,scrtmzofic);    }    HibernateUtil.commitTransaction(tran);  } catch (  SessionException sE) {    HibernateUtil.rollbackTransaction(tran);    throw sE;  }catch (  ValidationException sE) {    HibernateUtil.rollbackTransaction(tran);    throw sE;  }catch (  Exception e) {    HibernateUtil.rollbackTransaction(tran);    log.error("Impossible to validate office code: " + code + " for session ["+ sessionID+ "]",e);    throw new ValidationException(ValidationException.ERROR_ATTRIBUTE_NOT_FOUND);  } finally {    HibernateUtil.closeSession(entidad);  }}  }
class C{  @Override public void mediaOpened(MediaPlayer mediaPlayer,MediaSource mediaSource){  currentPlayListItem=mediaSource;  setVolumeValue();  if (mediaSource.getURL() == null && mediaPlayer.canSeek()) {    setProgressEnabled(true);    progressSongLength.setText(LibraryUtils.getSecondsInDDHHMMSS((int)mediaPlayer.getDurationInSecs()));  } else {    setProgressEnabled(false);    progressSongLength.setText("--:--:--");  }  updateTitle(mediaSource);  updateSocialButton(mediaSource);  updateMediaSourceButton(mediaSource);}  }
class C{  protected void performBoostingCV() throws Exception {  int completedIterations=m_maxIterations;  Instances allData=new Instances(m_train);  allData.stratify(m_numFoldsBoosting);  double[] error=new double[m_maxIterations + 1];  SimpleLinearRegression[][] backup=m_regressions;  for (int i=0; i < m_numFoldsBoosting; i++) {    Instances train=allData.trainCV(m_numFoldsBoosting,i);    Instances test=allData.testCV(m_numFoldsBoosting,i);    m_numRegressions=0;    m_regressions=copyRegressions(backup);    int iterations=performBoosting(train,test,error,completedIterations);    if (iterations < completedIterations) {      completedIterations=iterations;    }  }  int bestIteration=getBestIteration(error,completedIterations);  m_numRegressions=0;  m_regressions=backup;  performBoosting(bestIteration);}  }
class C{  public void testCreation() throws Exception {  GridClientConfiguration cfg=new GridClientConfiguration();  cfg.setServers(Arrays.asList("localhost:11211"));  validateConfig(0,cfg);  cfg=new GridClientConfiguration();  cfg.setServers(Arrays.asList("localhost:11211"));  validateConfig(0,cfg);  Properties props=loadProperties(1,GRID_CLIENT_CONFIG);  validateConfig(0,new GridClientConfiguration(props));  Properties props2=new Properties();  for (  Map.Entry<Object,Object> e : props.entrySet())   props2.put("new." + e.getKey(),e.getValue());  validateConfig(0,new GridClientConfiguration("new.ignite.client",props2));  validateConfig(0,new GridClientConfiguration("new.ignite.client.",props2));  File tmp=uncommentProperties(GRID_CLIENT_CONFIG);  props=loadProperties(25,tmp.toURI().toURL());  validateConfig(2,new GridClientConfiguration(props));  props2=new Properties();  for (  Map.Entry<Object,Object> e : props.entrySet())   props2.put("new." + e.getKey(),e.getValue());  validateConfig(2,new GridClientConfiguration("new.ignite.client",props2));  validateConfig(2,new GridClientConfiguration("new.ignite.client.",props2));  props2=new Properties();  for (  Map.Entry<Object,Object> e : props.entrySet())   props2.put(e.getKey().toString().replace("ignite.client.",""),e.getValue());  validateConfig(2,new GridClientConfiguration("",props2));  validateConfig(2,new GridClientConfiguration(".",props2));}  }
class C{  private boolean existBillingSharesResultEntry(long startOfLastMonth,long endOfLastMonth,Long orgKey,BillingSharesResultType resultType){  List<BillingSharesResult> billingSharesResult=sharesRetrievalService.loadBillingSharesResultForOrganization(orgKey,resultType,Long.valueOf(startOfLastMonth),Long.valueOf(endOfLastMonth));  if (billingSharesResult.size() > 0) {    return true;  } else {    return false;  }}  }
class C{  public static boolean isTransient(int flags){  return (flags & AccTransient) != 0;}  }
class C{  public static void main(String[] args){  ArrayList<String> boys=new ArrayList<>();  ArrayList<String> girls=new ArrayList<>();  ArrayList<String> line=new ArrayList<>();  print();  for (int year=2010; year >= 2001; year--) {    try {      java.net.URL url=new java.net.URL(getURL(year));      Scanner input=new Scanner(url.openStream());      for (int i=0; i < 5 && input.hasNext(); i++) {        readURL(input,line);        boys.add(line.get(1));        girls.add(line.get(3));      }    } catch (    java.net.MalformedURLException ex) {      System.out.println("Invalid URL");    }catch (    java.io.IOException ex) {      System.out.println("I/O Errors: no such file");    }    print(year,boys,girls);    boys.clear();    girls.clear();  }}  }
class C{  public boolean isArray(){  return clazz != null && clazz.isArray();}  }
class C{  public void destroyParticlesInGroup(ParticleGroup group){  destroyParticlesInGroup(group,false);}  }
class C{  public static String addToCartBulkRequirements(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  String catalogId=CatalogWorker.getCurrentCatalogId(request);  result=cartHelper.addToCartBulkRequirements(catalogId,paramMap);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    return "success";  }}  }
class C{  public InlineQueryResultMpeg4Gif.InlineQueryResultMpeg4GifBuilder id(String id){  this.id=id;  return this;}  }
class C{  private Locale read(String[] locale) throws Exception {  String[] list=new String[]{"","",""};  for (int i=0; i < list.length; i++) {    if (i < locale.length) {      list[i]=locale[i];    }  }  return new Locale(list[0],list[1],list[2]);}  }
class C{  public static <E>void merge(E[] list1,E[] list2,E[] temp,Comparator<? super E> comparator){  int current1=0;  int current2=0;  int current3=0;  while (current1 < list1.length && current2 < list2.length) {    if (comparator.compare(list1[current1],list2[current2]) < 0)     temp[current3++]=list1[current1++]; else     temp[current3++]=list2[current2++];  }  while (current1 < list1.length)   temp[current3++]=list1[current1++];  while (current2 < list2.length)   temp[current3++]=list2[current2++];}  }
class C{  public boolean removeItem(K key,V item){  Set<V> values=map.get(key);  if (values != null)   return values.remove(item);  return false;}  }
class C{  private static String resovlePropConfigFile(String prop){  if (prop != null && prop.startsWith("file://")) {    try {      String filePath=prop.substring(7);      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(filePath),"UTF-8"));      StringBuffer sb=new StringBuffer();      String str=br.readLine();      while (str != null) {        sb.append(str);        str=br.readLine();      }      return sb.toString();    } catch (    IOException e) {      System.err.println("read classpath failed!");      throw new RuntimeException(" read classpath failed ",e);    }  }  return prop;}  }
class C{  public void makeNoiseChance(int prob,final String state){  if (Rand.rand(prob) == 1) {    makeNoise(state);  }}  }
class C{  public static Coord4D read(ByteBuf dataStream){  return new Coord4D(dataStream.readInt(),dataStream.readInt(),dataStream.readInt(),dataStream.readInt());}  }
class C{  public void removeOverflowCommand(Command cmd){  overflowCommands.remove(cmd);}  }
class C{  public boolean endsWith(String string){  if (string == null)   return false;  int strlen=string.length();  if (_length < strlen)   return false;  char[] buffer=_buffer;  int offset=_offset + _length - strlen;  while (--strlen >= 0) {    if (buffer[offset + strlen] != string.charAt(strlen))     return false;  }  return true;}  }
class C{  public static void onscreen(EntityPlayer player,String message,String... formatArguments){  NotifyImplementation.instance.doSendOnscreenMessage(player,message,formatArguments);}  }
class C{  @Override public boolean relative(int rowCount) throws SQLException {  try {    debugCodeCall("relative",rowCount);    checkClosed();    int row=result.getRowId() + 1 + rowCount;    if (row < 0) {      row=0;    } else     if (row > result.getRowCount()) {      row=result.getRowCount() + 1;    }    return absolute(row);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isHierarchyDone(Universe universe,Domain domain,Integer timeoutMs) throws InterruptedException, TimeoutException, ExecutionException {  DomainHierarchy hierarchy=hierarchies.get(domain.getId());  if (hierarchy != null) {    return hierarchy.isDone(timeoutMs);  } else {    return false;  }}  }
class C{  public void incEarlyAcks(){  this.stats.incInt(earlyAcksId,1);}  }
class C{  public TestSuiteBuilder includePackages(String... packageNames){  testGrouping.addPackagesRecursive(packageNames);  return this;}  }
class C{  public void addNodeOnPath(DTNHost node){  this.path.add(node);}  }
class C{  public void ReInit(CharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  public void addItems(List<T> items){  if (items == null || items.isEmpty()) {    return;  }  if (mItemList != null && mItemList.isEmpty()) {    mItemList.addAll(items);  } else {    mItemList.addAll(items);  }  mScrollAdapter=new AutoScrollPagerAdapter<T>(mItemList,this);  this.setAdapter(mScrollAdapter);}  }
class C{  private Expression implementFieldAccess(Environment env,Context ctx,Expression base,boolean isLHS){  ClassDefinition abase=accessBase(env,ctx);  if (abase != null) {    if (field.isFinal()) {      Expression e=(Expression)field.getValue();      if ((e != null) && e.isConstant() && !isLHS) {        return e.copyInline(ctx);      }    }    MemberDefinition af=abase.getAccessMember(env,ctx,field,isQualSuper());    if (!isLHS) {      if (field.isStatic()) {        Expression args[]={};        Expression call=new MethodExpression(where,null,af,args);        return new CommaExpression(where,base,call);      } else {        Expression args[]={base};        return new MethodExpression(where,null,af,args);      }    }  }  return null;}  }
class C{  public static DbException convertIOException(IOException e,String message){  if (message == null) {    Throwable t=e.getCause();    if (t instanceof DbException) {      return (DbException)t;    }    return get(ErrorCode.IO_EXCEPTION_1,e,e.toString());  }  return get(ErrorCode.IO_EXCEPTION_2,e,e.toString(),message);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node child;  String nodeName;  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("title");  htmlExpected.add("class");  java.util.Collection expected=new java.util.ArrayList();  expected.add("title");  expected.add("class");  expected.add("dir");  java.util.Collection actual=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();  for (int indexN10070=0; indexN10070 < attributes.getLength(); indexN10070++) {    child=(Node)attributes.item(indexN10070);    nodeName=child.getNodeName();    actual.add(nodeName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("attrName_html",htmlExpected,actual);  } else {    assertEquals("attrName",expected,actual);  }}  }
class C{  public void testReceive_UnconnectedBufZero() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_ZERO);  assertNull(this.channel1.receive(dst));}  }
class C{  public ScreenAnnotation(String text,Point position){  this.init(text,position,null,null);}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, DEMHeader, outputHeader;  int row, col, x, y;  int progress;  int c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag;  double flowDir, flowLength, flowLengthThroughCell;  double zSt, zCurrent, zLastCell;  double rad2Deg=180.0 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  DEMHeader=args[1];  outputHeader=args[2];  double d=Double.parseDouble(args[3]);  if (d <= 0) {    showFeedback("The vertical drop parameter must be set to a positive numerical value.");    return;  }  String outputType=args[4].toLowerCase().trim();  if (pointerHeader.isEmpty() || DEMHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    double noData=pointer.getNoDataValue();    double gridResX=pointer.getCellSizeX();    double gridResY=pointer.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster dem=new WhiteboxRaster(DEMHeader,"r");    if (dem.getNumberColumns() != cols || dem.getNumberRows() != rows) {      showFeedback("Each of the input images must have the same dimensions (i.e. rows and columns).");      return;    }    double demNoData=dem.getNoDataValue();    if (pointer.getXYUnits().toLowerCase().contains("deg") || dem.getXYUnits().toLowerCase().contains("deg")) {      double p1=111412.84;      double p2=-93.5;      double p3=0.118;      double lat=Math.toRadians((pointer.getNorth() - pointer.getSouth()) / 2.0);      double longlen=(p1 * Math.cos(lat)) + (p2 * Math.cos(3 * lat)) + (p3 * Math.cos(5 * lat));      for (int i=0; i < 8; i++) {        gridLengths[i]=gridLengths[i] * longlen;      }    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);switch (outputType) {case "tangent":      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {            zSt=dem.getValue(row,col);            flag=false;            x=col;            y=row;            flowLength=0;            do {              zLastCell=dem.getValue(row,col);              flowDir=pointer.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                zCurrent=dem.getValue(y,x);                if (zCurrent != demNoData) {                  if ((zSt - zCurrent) < d) {                    flowLength+=gridLengths[c];                  } else {                    flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);                    flowLength+=flowLengthThroughCell;                    output.setValue(row,col,d / flowLength);                    flag=true;                  }                } else {                  if (flowLength > 0) {                    output.setValue(row,col,(zSt - zLastCell) / flowLength);                  } else {                    output.setValue(row,col,noData);                  }                  flag=true;                }              } else {                if (flowLength > 0) {                  output.setValue(row,col,(zSt - zLastCell) / flowLength);                } else {                  output.setValue(row,col,noData);                }                flag=true;              }            } while (!flag);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    break;case "degrees":  for (row=0; row < rows; row++) {    for (col=0; col < cols; col++) {      if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {        zSt=dem.getValue(row,col);        flag=false;        x=col;        y=row;        flowLength=0;        do {          zLastCell=dem.getValue(row,col);          flowDir=pointer.getValue(y,x);          if (flowDir > 0) {            c=(int)(Math.log(flowDir) / LnOf2);            x+=dX[c];            y+=dY[c];            zCurrent=dem.getValue(y,x);            if (zCurrent != demNoData) {              if ((zSt - zCurrent) < d) {                flowLength+=gridLengths[c];              } else {                flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);                flowLength+=flowLengthThroughCell;                output.setValue(row,col,Math.atan(d / flowLength) * rad2Deg);                flag=true;              }            } else {              if (flowLength > 0) {                output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength) * rad2Deg);              } else {                output.setValue(row,col,noData);              }              flag=true;            }          } else {            if (flowLength > 0) {              output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength) * rad2Deg);            } else {              output.setValue(row,col,noData);            }            flag=true;          }        } while (!flag);      }    }    if (cancelOp) {      cancelOperation();      return;    }    progress=(int)(100f * row / (rows - 1));    updateProgress(progress);  }break;case "radians":for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {  if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {    zSt=dem.getValue(row,col);    flag=false;    x=col;    y=row;    flowLength=0;    do {      zLastCell=dem.getValue(row,col);      flowDir=pointer.getValue(y,x);      if (flowDir > 0) {        c=(int)(Math.log(flowDir) / LnOf2);        x+=dX[c];        y+=dY[c];        zCurrent=dem.getValue(y,x);        if (zCurrent != demNoData) {          if ((zSt - zCurrent) < d) {            flowLength+=gridLengths[c];          } else {            flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);            flowLength+=flowLengthThroughCell;            output.setValue(row,col,Math.atan(d / flowLength));            flag=true;          }        } else {          if (flowLength > 0) {            output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength));          } else {            output.setValue(row,col,noData);          }          flag=true;        }      } else {        if (flowLength > 0) {          output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength));        } else {          output.setValue(row,col,noData);        }        flag=true;      }    } while (!flag);  }}if (cancelOp) {  cancelOperation();  return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}break;case "distance":for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {zSt=dem.getValue(row,col);flag=false;x=col;y=row;flowLength=0;do {  zLastCell=dem.getValue(row,col);  flowDir=pointer.getValue(y,x);  if (flowDir > 0) {    c=(int)(Math.log(flowDir) / LnOf2);    x+=dX[c];    y+=dY[c];    zCurrent=dem.getValue(y,x);    if (zCurrent != demNoData) {      if ((zSt - zCurrent) < d) {        flowLength+=gridLengths[c];      } else {        flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);        flowLength+=flowLengthThroughCell;        output.setValue(row,col,flowLength);        flag=true;      }    } else {      if (flowLength > 0) {        output.setValue(row,col,flowLength);      } else {        output.setValue(row,col,noData);      }      flag=true;    }  } else {    if (flowLength > 0) {      output.setValue(row,col,flowLength);    } else {      output.setValue(row,col,noData);    }    flag=true;  }} while (!flag);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}break;}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());pointer.close();dem.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static boolean directoryExists(String directoryName){  File directory=new File(directoryName);  return directory.exists();}  }
class C{  public void roamChanged(boolean roaming){  if (mService != null && isEnabled()) {    try {      mService.roamChanged(roaming);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }}  }
class C{  public DoubleVector(){  this(0,0,0);}  }
class C{  protected IdThread[] startWorkers(AbstractChecker checker,int checkIndex){  for (int i=0; i < this.workers.length; i++) {    this.workers[i]=new DFIDWorker(i,checkIndex,checker);    this.workers[i].start();  }  return this.workers;}  }
class C{  @SuppressWarnings("deprecation") private void checkTrackControllerPosition(){  View controller=EndToEndTestUtils.SOLO.getCurrentActivity().findViewById(R.id.track_controler_container);  Display display=EndToEndTestUtils.SOLO.getCurrentActivity().getWindowManager().getDefaultDisplay();  int width=display.getWidth();  int height=display.getHeight();  if (width > height) {    Assert.assertTrue(controller.getWidth() < controller.getHeight());    Assert.assertTrue(controller.getTop() < height / 2);    Assert.assertTrue(controller.getRight() < width / 2);  } else {    Assert.assertTrue(controller.getWidth() > controller.getHeight());    Assert.assertTrue(controller.getTop() > height / 2);    Assert.assertTrue(controller.getRight() > width / 2);  }}  }
class C{  public static RuntimeException throwInternalError(){  return throwInternalError("Unexpected code path");}  }
class C{  public static PsiElement findChildWithType(@NotNull PsiElement element,IElementType type){  PsiElement[] children=element.getChildren();  for (  PsiElement child : children) {    if (child.getNode().getElementType() == type) {      return child;    }  }  return null;}  }
class C{  public static void write(File file,String text) throws IOException {  write(file,text,false);}  }
class C{  public EditableRegistration addContact(URI contact){  editContacts.add(contact);  return this;}  }
class C{  public NumericRange(int begin,int end){  init(new int[]{begin,end});}  }
class C{  public InfoDisplayEvent(Object source,String info){  super(source);  information=info;}  }
class C{  private CNodeUpdaterInitializer(){}  }
class C{  public Reader create(InputStream is,String javaEncoding){  return new UTF8Reader(is);}  }
class C{  public StringIndexOutOfBoundsException(int sourceLength,int index){  super("length=" + sourceLength + "; index="+ index);}  }
class C{  public static String encodeBase64(byte[] data,boolean lineBreaks){  return encodeBase64(data,0,data.length,lineBreaks);}  }
class C{  public void testConstructor_StringI() throws Exception {  int sport=startServer("Cons String,I");  int[] invalidPort={-1,Integer.MIN_VALUE,65536,Integer.MAX_VALUE};  SSLSocket ssl=getSSLSocket(InetAddress.getLocalHost().getHostName(),sport);  assertNotNull(ssl);  assertEquals(sport,ssl.getPort());  ssl.close();  try {    getSSLSocket("localhost",8082);    fail();  } catch (  IOException expected) {  }  for (int i=0; i < invalidPort.length; i++) {    try {      getSSLSocket(InetAddress.getLocalHost().getHostName(),invalidPort[i]);      fail();    } catch (    IllegalArgumentException expected) {    }  }  try {    getSSLSocket("bla-bla",sport);    fail();  } catch (  UnknownHostException expected) {  }}  }
class C{  void emitNext(Object n){  if (!fastPath) {synchronized (this) {      first=false;      if (emitting) {        if (queue == null) {          queue=new ArrayList<Object>();        }        queue.add(n);        return;      }    }    fastPath=true;  }  NotificationLite.accept(actual,n);}  }
class C{  @Override public final long readLong() throws IOException {  dis.readFully(work,0,8);  return (long)(work[7]) << 56 | (long)(work[6] & 0xff) << 48 | (long)(work[5] & 0xff) << 40 | (long)(work[4] & 0xff) << 32 | (long)(work[3] & 0xff) << 24 | (long)(work[2] & 0xff) << 16 | (long)(work[1] & 0xff) << 8 | work[0] & 0xff;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.459 -0500",hash_original_method="3ECE715C4DC492B6D08AC6D2EACB5C9C",hash_generated_method="D3C877EA97EE198EBB16512ACEC3EFD7") public JSONArray names(){  return nameValuePairs.isEmpty() ? null : new JSONArray(new ArrayList<String>(nameValuePairs.keySet()));}  }
class C{  public static boolean branchExists(final GitRepositoryManager repoManager,final Branch.NameKey branch) throws RepositoryNotFoundException, IOException {  try (Repository repo=repoManager.openRepository(branch.getParentKey())){    boolean exists=repo.getRefDatabase().exactRef(branch.get()) != null;    if (!exists) {      exists=repo.getFullBranch().equals(branch.get());    }    return exists;  } }  }
class C{  public boolean openRd(){  read=true;  try {    in=new FileInputStream(file);    buffIn=new BufferedInputStream(in);    address=999999;    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  @ObjectiveCName("sendMessageWithPeer:withText:withMentions:") public void sendMessage(@NotNull Peer peer,@NotNull String text,@Nullable ArrayList<Integer> mentions){  sendMessage(peer,text,null,mentions,false);}  }
class C{  public static Option createOption(String name,int numvalues,String description){  return new Option(Type.OPTION,name,numvalues,description);}  }
class C{  public EaseInOut(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.548 -0400",hash_original_method="C5D886AD22E328503E0353CA28EDA453",hash_generated_method="731DBBFBD966B892D1B6CE90D69AC2A3") public Tailer(File file,TailerListener listener,long delayMillis){  this(file,listener,delayMillis,false);}  }
class C{  private void saveProperties(){  if (isDataValid()) {    int bSize=Integer.parseInt(Bundle.getMessage("FrameSize"));    JInternalFrame myFrame;    frame.setTitleText(titleField.getText());    frame.setTitleTextType(titleTextTypes[titleType.getSelectedIndex()]);    frame.getCurrentThrottleFrame().setFrameTitle();    if (((javax.swing.plaf.basic.BasicInternalFrameUI)frame.getCurrentThrottleFrame().getControlPanel().getUI()).getNorthPane() != null) {      if (borderOff.isSelected()) {        bSize=0;      }      myFrame=frame.getCurrentThrottleFrame().getControlPanel();      ((javax.swing.plaf.basic.BasicInternalFrameUI)myFrame.getUI()).getNorthPane().setPreferredSize(new Dimension(0,bSize));      if (myFrame.isVisible()) {        myFrame.setVisible(false);        myFrame.setVisible(true);      }      myFrame=frame.getCurrentThrottleFrame().getFunctionPanel();      ((javax.swing.plaf.basic.BasicInternalFrameUI)myFrame.getUI()).getNorthPane().setPreferredSize(new Dimension(0,bSize));      if (myFrame.isVisible()) {        myFrame.setVisible(false);        myFrame.setVisible(true);      }      myFrame=frame.getCurrentThrottleFrame().getAddressPanel();      ((javax.swing.plaf.basic.BasicInternalFrameUI)myFrame.getUI()).getNorthPane().setPreferredSize(new Dimension(0,bSize));      if (myFrame.isVisible()) {        myFrame.setVisible(false);        myFrame.setVisible(true);      }    }    finishEdit();  }}  }
class C{  @Override protected void dispatchDraw(@NonNull Canvas canvas){  super.dispatchDraw(canvas);  if (mHoverCell != null) {    mHoverCell.draw(canvas);  }}  }
class C{  @Override protected void finalize() throws IOException {  try {    if (guard != null) {      guard.warnIfOpen();    }    close();  }  finally {    try {      super.finalize();    } catch (    Throwable t) {      throw new AssertionError(t);    }  }}  }
class C{  @Override protected void createTopMenuBar(){  if (GUI.debugFX) {    System.out.println("createTopMenuBar is not yet implemented for JavaFX in JavaFxGUI.java");  }  topPane.setStyle("-fx-background-color: #F5F6F7;");}  }
class C{  public boolean isExceptionE(){  return (flags & EXCEPTION_E) != 0;}  }
class C{  public void changeTo(int pageNumber,boolean doMathWithIndexPages){  currentCategory.setPage(pageNumber + (doMathWithIndexPages ? currentCategory.getIndexPages() : 0),this);}  }
class C{  protected void retrieveExtras(){  Bundle extras=getIntent().getExtras();  selectedIndex=extras.getInt(EXTRA_INDEX,0);}  }
class C{  public static boolean writeList(final File listFile,final String[] list){  final StringBuilder out=new StringBuilder(list.length * 40 + 1);  for (  final String element : list) {    out.append(element).append(CR).append(LF);  }  return FileUtils.writeList(listFile,new String(out));}  }
class C{  public boolean equals(Object other){  if (!(other instanceof symbol_part))   return false; else   return equals((symbol_part)other);}  }
class C{  public Image flipHorizontally(boolean maintainOpacity){  return Display.impl.flipImageHorizontally(this,maintainOpacity);}  }
class C{  public void modifyExport(String id,String zoneName,IsilonExport exp) throws IsilonException {  String uriWithZoneName=getURIWithZoneName(id,zoneName);  modify(_baseUrl.resolve(URI_NFS_EXPORTS),uriWithZoneName,"export",exp);}  }
class C{  public View2D showInWindow(final GraphWindow window,final View view){  Preconditions.checkNotNull(view,"Error: View argument can not be null");  final ViewContainer container=view.getContainer();  if (container instanceof Module) {    final Module module=(Module)container;    return show(window.getNative(),view,new CModuleContainer(container.getDatabase().getNative(),module.getNative()));  } else {    final Project project=(Project)container;    return show(window.getNative(),view,new CProjectContainer(container.getDatabase().getNative(),project.getNative()));  }}  }
class C{  protected void internalCallStatListeners(long timestamp,int[] listenerIds,double[] values){  ListenerIdMap.Entry[] entries=null;  List listenersToRemove=new ArrayList();synchronized (this.statListenersLock) {    entries=this.statListeners.entries();  }  for (int j=0; j < entries.length; j++) {    int listenerId=entries[j].getKey();    StatListener sl=(StatListener)entries[j].getValue();    int i;    for (i=0; i < listenerIds.length; i++) {      if (listenerIds[i] == listenerId || listenerIds[i] == -listenerId) {        break;      }    }    if (i == listenerIds.length) {      sl.statValueUnchanged(timestamp);    } else     if (listenerIds[i] < 0) {      listenersToRemove.add(Integer.valueOf(listenerId));    } else {      sl.statValueChanged(values[i],timestamp);    }  }synchronized (this.statListenersLock) {    for (Iterator iter=listenersToRemove.iterator(); iter.hasNext(); ) {      int i=((Integer)iter.next()).intValue();      statListeners.remove(i);      cancelStatListener(i);    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.FUNCTION_DECLARATION__DECLARED_MODIFIERS:    return getDeclaredModifiers();case N4JSPackage.FUNCTION_DECLARATION__BODY:  return getBody();case N4JSPackage.FUNCTION_DECLARATION__LOK:return get_lok();case N4JSPackage.FUNCTION_DECLARATION__DEFINED_TYPE:if (resolve) return getDefinedType();return basicGetDefinedType();case N4JSPackage.FUNCTION_DECLARATION__FPARS:return getFpars();case N4JSPackage.FUNCTION_DECLARATION__RETURN_TYPE_REF:return getReturnTypeRef();case N4JSPackage.FUNCTION_DECLARATION__GENERATOR:return isGenerator();case N4JSPackage.FUNCTION_DECLARATION__DECLARED_ASYNC:return isDeclaredAsync();case N4JSPackage.FUNCTION_DECLARATION__TYPE_VARS:return getTypeVars();case N4JSPackage.FUNCTION_DECLARATION__NAME:return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String randomUUID(){  return randomUUID(10);}  }
class C{  public static Geo[] removeDups(Geo[] ga){  Geo[] r=new Geo[ga.length];  int p=0;  for (int i=0; i < ga.length; i++) {    if (p == 0 || !(r[p - 1].equals(ga[i]))) {      r[p]=ga[i];      p++;    }  }  if (p != ga.length) {    Geo[] x=new Geo[p];    System.arraycopy(r,0,x,0,p);    return x;  } else {    return ga;  }}  }
class C{  public String name(){  return this.name;}  }
class C{  public boolean greaterThan(FXGVersion version){  return (compareTo(version) > 0);}  }
class C{  public static Intent createOpenMapSearchIntent(String addressOrPlaceName){  return createGeoUriIntent("geo:0,0?q=" + Uri.encode(addressOrPlaceName));}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  public DisambiguationDialog(final Context context,final DisambiguationRequest request){  super(context,android.R.style.Theme_Translucent_NoTitleBar);  mRequest=request;}  }
class C{  private void markShown(){  PreferenceManager.getDefaultSharedPreferences(getContext()).edit().putBoolean(prefsKey,true).apply();}  }
class C{  public ProjectionTransverseMercator(Angle centralMeridian,Angle centralLatitude){  super(makeProjectionLimits(centralMeridian,DEFAULT_WIDTH));  if (centralMeridian == null) {    String message=Logging.getMessage("nullValue.CentralMeridianIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (centralLatitude == null) {    String message=Logging.getMessage("nullValue.CentralLatitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centralMeridian=centralMeridian;  this.centralLatitude=centralLatitude;}  }
class C{  public static double parseDouble(FXGNode node,String value,String name){  try {    return Double.parseDouble(value);  } catch (  NumberFormatException e) {    throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidDoubleValue",name,value);  }}  }
class C{  protected String handleBigDecimal(BigDecimal decimal){  return decimal == null ? "" : decimal.toString();}  }
class C{  public static void closeEL(InputStream is,OutputStream os){  closeEL(is);  closeEL(os);}  }
class C{  public SimpleTrigger deepCopy(){  return new SimpleTrigger(this);}  }
class C{  private View fillSpecific(int position,int top){  View temp=makeAndAddView(position,top,true,false);  mFirstPosition=position;  final int dividerHeight=mDividerHeight;  if (!mStackFromBottom) {    fillUp(position - 1,getFillChildTop());    adjustViewsUpOrDown();    fillDown(position + 1,getFillChildBottom() + mDividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooHigh(childCount);    }  } else {    fillDown(position + 1,temp.getBottom() + dividerHeight);    adjustViewsUpOrDown();    fillUp(position - 1,getFillChildTop());    int childCount=getChildCount();    if (childCount > 0) {      correctTooLow(childCount);    }  }  return null;}  }
class C{  public static UserQos parseGetUserQos(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    UserQos userQos=new UserQos();    if (root.getChild("StorageCapacity") != null) {      userQos.setStorageCapacity(Integer.parseInt(root.getChildText("StorageCapacity")));    }    return userQos;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public static ListNode rotateRightB(ListNode head,int n){  if (head == null || head.next == null)   return head;  int len=listLength(head);  n%=len;  if (n == 0)   return head;  if (n < 0)   n+=len;  n=len - n;  ListNode p=new ListNode(0);  p.next=head;  while (n > 0) {    p=p.next;    n--;  }  ListNode newHead=p.next;  p.next=null;  ListNode cur=newHead;  while (cur.next != null)   cur=cur.next;  cur.next=head;  return newHead;}  }
class C{  public BOMTree(String productId,String bomTypeId,Date inDate,int type,Delegator delegator,LocalDispatcher dispatcher,GenericValue userLogin) throws GenericEntityException {  if (productId == null || bomTypeId == null || delegator == null || dispatcher == null)   return;  if (inDate == null)   inDate=new Date();  this.delegator=delegator;  this.dispatcher=dispatcher;  inputProduct=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();  String productIdForRules=productId;  List<GenericValue> productFeaturesAppl=EntityQuery.use(delegator).from("ProductFeatureAppl").where("productId",productId,"productFeatureApplTypeId","STANDARD_FEATURE").queryList();  List<GenericValue> productFeatures=FastList.newInstance();  GenericValue oneProductFeatureAppl=null;  for (int i=0; i < productFeaturesAppl.size(); i++) {    oneProductFeatureAppl=productFeaturesAppl.get(i);    productFeatures.add(oneProductFeatureAppl.getRelatedOne("ProductFeature",false));  }  GenericValue manufacturedAsProduct=manufacturedAsProduct(productId,inDate);  GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",(manufacturedAsProduct != null ? manufacturedAsProduct.getString("productIdTo") : productId)).queryOne();  if (product == null)   return;  BOMNode originalNode=new BOMNode(product,dispatcher,userLogin);  originalNode.setTree(this);  if (!hasBom(product,inDate)) {    List<GenericValue> virtualProducts=product.getRelated("AssocProductAssoc",UtilMisc.toMap("productAssocTypeId","PRODUCT_VARIANT"),null,false);    virtualProducts=EntityUtil.filterByDate(virtualProducts,inDate);    GenericValue virtualProduct=EntityUtil.getFirst(virtualProducts);    if (virtualProduct != null) {      productIdForRules=virtualProduct.getString("productId");      manufacturedAsProduct=manufacturedAsProduct(virtualProduct.getString("productId"),inDate);      product=EntityQuery.use(delegator).from("Product").where("productId",(manufacturedAsProduct != null ? manufacturedAsProduct.getString("productIdTo") : virtualProduct.get("productId"))).queryOne();    }  }  if (product == null)   return;  try {    root=new BOMNode(product,dispatcher,userLogin);    root.setTree(this);    root.setProductForRules(productIdForRules);    root.setSubstitutedNode(originalNode);    if (type == IMPLOSION) {      root.loadParents(bomTypeId,inDate,productFeatures);    } else {      root.loadChildren(bomTypeId,inDate,productFeatures,type);    }  } catch (  GenericEntityException gee) {    root=null;  }  this.bomTypeId=bomTypeId;  this.inDate=inDate;  rootQuantity=BigDecimal.ONE;  rootAmount=BigDecimal.ZERO;}  }
class C{  public void addLayoutComponent(String name,Component comp){  invalidateLayout();}  }
class C{  public static double asinInRange(final double value){  if (value <= -1.0) {    return -Math.PI / 2;  } else   if (value >= 1.0) {    return Math.PI / 2;  } else {    return asin(value);  }}  }
class C{  public void releaseSelections(Set<Entity> items){  for (  Entity item : items) {    releaseSelection(item);  }}  }
class C{  public SVGOMFontElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  void checkConnected(){  if ((mTag.getConnectedTechnology() != mSelectedTechnology) || (mTag.getConnectedTechnology() == -1)) {    throw new IllegalStateException("Call connect() first!");  }}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("weblogic8x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic8xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic8x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogicExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic9x10x103x12xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic9x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogicExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic10x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic9x10x103x12xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic10x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogicExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic103x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic9x10x103x12xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic103x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogicExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic103x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WebLogicWlstRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic12x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic9x10x103x12xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic12x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogicExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic121x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogicWlstStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic121x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogicExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic121x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WebLogicWlstRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic122x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogicWlstStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic122x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogicExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("weblogic122x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WebLogicWlstRuntimeConfigurationCapability.class);}  }
class C{  public List<String> extractCashtags(final String text){  if (text == null || text.length() == 0)   return Collections.emptyList();  final ArrayList<String> extracted=new ArrayList<String>();  for (  final Entity entity : extractCashtagsWithIndices(text)) {    extracted.add(entity.value);  }  return extracted;}  }
class C{  public boolean isRotationInverted(){  return isInverted;}  }
class C{  public static void main(String[] args) throws IgniteException {  Ignition.start(configuration());}  }
class C{  public static void show(Context context,@StringRes Integer toast){  Toast.makeText(context,toast,Toast.LENGTH_SHORT).show();}  }
class C{  public void add(final Player player,final List<String> args){  if (args.size() == 3) {    final String myZone=args.get(0);    if ("-".equals(myZone)) {      sandbox.setZone(sandbox.getZone(player));    } else {      if (!sandbox.setZone(myZone)) {        sandbox.privateText(player,"Zone not found.");        return;      }    }    int x=0;    if ("-".equals(args.get(1))) {      x=player.getX();    } else {      x=MathHelper.parseInt(args.get(1));    }    int y=0;    if ("-".equals(args.get(2))) {      y=player.getY();    } else {      y=MathHelper.parseInt(args.get(2));    }    final Chest chest=new Chest();    chest.setPosition(x,y);    sandbox.add(chest);    chestcounter++;    storage.put(Integer.valueOf(chestcounter),chest);  } else {    sandbox.privateText(player,"This script creates, lists or removes chests. Syntax: \r\nSummonChest.class <zone> <x> <y>. The first 3 parameters can be \"-\".\r\nSummonChest.class list\r\nSummonChest.class del <n>");  }}  }
class C{  private VirtualNAS findvNasByNativeId(StorageSystem system,String nativeId){  URIQueryResultList results=new URIQueryResultList();  VirtualNAS vNas=null;  String nasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nativeId,NativeGUIDGenerator.VIRTUAL_NAS);  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVirtualNASByNativeGuidConstraint(nasNativeGuid),results);  Iterator<URI> iter=results.iterator();  VirtualNAS tmpVnas=null;  while (iter.hasNext()) {    tmpVnas=_dbClient.queryObject(VirtualNAS.class,iter.next());    if (tmpVnas != null && !tmpVnas.getInactive()) {      vNas=tmpVnas;      _log.info("found virtual NAS {}",tmpVnas.getNativeGuid() + ":" + tmpVnas.getNasName());      break;    }  }  return vNas;}  }
class C{  private void loopMovementSound(){  movementSoundEvent=new SoundEvent(movementSound,SOUND_RADIUS,100,SoundLayer.CREATURE_NOISE);  this.addEvent(movementSoundEvent);  this.notifyWorldAboutChanges();}  }
class C{  void clearAllLinks(){  storageSource.deleteRowsAsync(LINK_TABLE_NAME,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public WeakHashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  table=newTable(capacity);  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);}  }
class C{  public void testIsolatedMode() throws Exception {  processTest(DeploymentMode.ISOLATED);}  }
class C{  @Nullable public static IgnoreDescriptor forClass(Class cls){  Class cls0=cls;  while (Test.class.isAssignableFrom(cls0)) {    if (cls0.isAnnotationPresent(IgniteIgnore.class)) {      IgniteIgnore ignore=(IgniteIgnore)cls0.getAnnotation(IgniteIgnore.class);      String reason=ignore.value();      if (F.isEmpty(reason))       throw new IllegalArgumentException("Reason is not set for ignored test [class=" + cls0.getName() + ']');      return new IgnoreDescriptor(reason,ignore.forceFailure());    }    cls0=cls0.getSuperclass();  }  return null;}  }
class C{  public Bundler putDouble(String key,double value){  bundle.putDouble(key,value);  return this;}  }
class C{  public NBTTagCompound write(NBTTagCompound nbtTags){  type.write(nbtTags);  nbtTags.setInteger("amount",amount);  return nbtTags;}  }
class C{  public static void truncateTablesAndIndexes(Schema schema,KeyValueService kvs){  schema.validate();  kvs.truncateTables(getExistingTablesAlsoPresentInSchema(schema,kvs));}  }
class C{  public void triggerSignalCallback(int cbid,int listId,int listPc,int behavior,int callbackNotifyArg1){  triggerAsyncCallback(cbid,listId,listPc,behavior,callbackNotifyArg1,signalCallbacks);}  }
class C{  protected SurfaceData initAcceleratedSurface(){  SurfaceData sData;  try {    XRGraphicsConfig gc=(XRGraphicsConfig)vImg.getGraphicsConfig();    ColorModel cm=gc.getColorModel();    long drawable=0;    if (context instanceof Long) {      drawable=((Long)context).longValue();    }    sData=XRSurfaceData.createData(gc,vImg.getWidth(),vImg.getHeight(),cm,vImg,drawable,vImg.getTransparency());  } catch (  NullPointerException ex) {    sData=null;  }catch (  OutOfMemoryError er) {    sData=null;  }  return sData;}  }
class C{  static String toName(PotionType type){  for (  PotionTypeTable table : values()) {    if (type == table.type)     return table.name;  }  return type.name().toLowerCase();}  }
class C{  public void addAnimation(CCAnimation anim){  if (animations_ == null)   initAnimationDictionary();  animations_.put(anim.name(),anim);}  }
class C{  public static void addAppender(FileAppender a){  A.notNull(a,"a");  fileAppenders.add(a);}  }
class C{  public int size(){  return size;}  }
class C{  public static boolean isReplyPath(byte esmClass){  return isSpecificFeatures(esmClass,SMPPConstant.ESMCLS_REPLY_PATH);}  }
class C{  private void defineSchemes(){  schemes=new ArrayList<>();  schemes.add(new Scheme(rbc.getString("ConsoleSchemeGreenOnBlack"),Color.GREEN,Color.BLACK));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeOrangeOnBlack"),Color.ORANGE,Color.BLACK));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeWhiteOnBlack"),Color.WHITE,Color.BLACK));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeBlackOnWhite"),Color.BLACK,Color.WHITE));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeWhiteOnBlue"),Color.WHITE,Color.BLUE));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeBlackOnLightGray"),Color.BLACK,Color.LIGHT_GRAY));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeBlackOnGray"),Color.BLACK,Color.GRAY));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeWhiteOnGray"),Color.WHITE,Color.GRAY));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeWhiteOnDarkGray"),Color.WHITE,Color.DARK_GRAY));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeGreenOnDarkGray"),Color.GREEN,Color.DARK_GRAY));  schemes.add(new Scheme(rbc.getString("ConsoleSchemeOrangeOnDarkGray"),Color.ORANGE,Color.DARK_GRAY));}  }
class C{  public Object loadFromInputStream(final InputStream inputStream) throws XMLException {  Object readObject=null;  try {    readObject=unmarshaller.unmarshal(inputStream);    if (readObject instanceof JAXBElement) {      readObject=((JAXBElement)readObject).getValue();    }  } catch (  JAXBException e) {    throw new XMLException("Cannot unmarshal the XML ",e);  }catch (  IllegalArgumentException e) {    throw new XMLException("Cannot unmarshal the XML ",e);  }  return readObject;}  }
class C{  public void removeTransaction(SIPTransaction sipTransaction){  if (isLoggingEnabled()) {    stackLogger.logDebug("Removing Transaction = " + sipTransaction.getTransactionId() + " transaction = "+ sipTransaction);  }  if (sipTransaction instanceof SIPServerTransaction) {    if (isLoggingEnabled())     stackLogger.logStackTrace();    String key=sipTransaction.getTransactionId();    Object removed=serverTransactionTable.remove(key);    String method=sipTransaction.getMethod();    this.removePendingTransaction((SIPServerTransaction)sipTransaction);    this.removeTransactionPendingAck((SIPServerTransaction)sipTransaction);    if (method.equalsIgnoreCase(Request.INVITE)) {      this.removeFromMergeTable((SIPServerTransaction)sipTransaction);    }    SipProviderImpl sipProvider=(SipProviderImpl)sipTransaction.getSipProvider();    if (removed != null && sipTransaction.testAndSetTransactionTerminatedEvent()) {      TransactionTerminatedEvent event=new TransactionTerminatedEvent(sipProvider,(ServerTransaction)sipTransaction);      sipProvider.handleEvent(event,sipTransaction);    }  } else {    String key=sipTransaction.getTransactionId();    Object removed=clientTransactionTable.remove(key);    if (isLoggingEnabled()) {      stackLogger.logDebug("REMOVED client tx " + removed + " KEY = "+ key);      if (removed != null) {        SIPClientTransaction clientTx=(SIPClientTransaction)removed;        if (clientTx.getMethod().equals(Request.INVITE) && this.maxForkTime != 0) {          RemoveForkedTransactionTimerTask ttask=new RemoveForkedTransactionTimerTask(clientTx);          this.timer.schedule(ttask,this.maxForkTime * 1000);        }      }    }    if (removed != null && sipTransaction.testAndSetTransactionTerminatedEvent()) {      SipProviderImpl sipProvider=(SipProviderImpl)sipTransaction.getSipProvider();      TransactionTerminatedEvent event=new TransactionTerminatedEvent(sipProvider,(ClientTransaction)sipTransaction);      sipProvider.handleEvent(event,sipTransaction);    }  }}  }
class C{  protected String doIt(){  createBalanceLine();  createDetailLines();  int AD_PrintFormat_ID=134;  if (Ini.isClient())   getProcessInfo().setTransientObject(MPrintFormat.get(getCtx(),AD_PrintFormat_ID,false)); else   getProcessInfo().setSerializableObject(MPrintFormat.get(getCtx(),AD_PrintFormat_ID,false));  log.fine((System.currentTimeMillis() - m_start) + " ms");  return "";}  }
class C{  private int handleP(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 1) == 'H') {    result.append('F');    index+=2;  } else {    result.append('P');    index=contains(value,index + 1,1,"P","B") ? index + 2 : index + 1;  }  return index;}  }
class C{  public View detachCurrentView(){  assert getChildCount() > 1;  View view=getChildAt(CONTENT_INDEX);  removeView(view);  return view;}  }
class C{  @Override public void onDryRunCompleted(final int id){  completedExports+=1;  Log.i(TAG,"Session " + id + " exported");  Log.i(TAG,"Exported " + completedExports + "/"+ pendingExports.size()+ " sessions");  if (pendingExports.size() == 1) {    Log.i(TAG,"Export simulated");    pendingExports.clear();    completedExports=0;    hideUploadTaskDialog();    releaseWifiLock();  } else   if (pendingExports.size() == completedExports + failedExports) {    Log.i(TAG,"All exports simulated");    if (failedExports > 0) {      try {        AlertDialogUtils.newInstance(ID_EXPORT_FAILED,getResources().getString(R.string.export_error_title),getResources().getString(R.string.export_error),String.valueOf(id),true).show(getSupportFragmentManager(),"failed");      } catch (      IllegalStateException e) {      }    }    pendingExports.clear();    completedExports=0;    failedExports=0;    hideUploadTaskDialog();    releaseWifiLock();    reloadListFragment();  } else {    showUploadTaskDialog();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.233 -0400",hash_original_method="BAF4B95A6524226CE08A8B2424D408F3",hash_generated_method="BA3619B7F6642E30999D150F7DFA521C") public static void copy(InputStream input,Writer output,String encoding) throws IOException {  InputStreamReader in=new InputStreamReader(input,encoding);  copy(in,output);}  }
class C{  public DefaultMosaicProperties(final Collection<NemProperty> properties){  final Properties props=new Properties();  properties.stream().forEach(null);  this.properties=new NemProperties(props);  this.validateProperties();}  }
class C{  public void firePropertyChange(String name,Object oldValue,Object newValue){  beanContextChildSupport.firePropertyChange(name,oldValue,newValue);}  }
class C{  public void mouseClicked(MouseEvent evt){  if (evt.isPopupTrigger()) {    createPopup(evt.getPoint());  }}  }
class C{  public void clearAll(){  map.clear();}  }
class C{  public RootNotification(Serializable data){  this.data=data;}  }
class C{  public boolean disconnect(){  if (outpoint.fromTx == null)   return false;  TransactionOutput output=outpoint.fromTx.getOutput((int)outpoint.getIndex());  if (output.getSpentBy() == this) {    output.markAsUnspent();    outpoint.fromTx=null;    return true;  } else {    return false;  }}  }
class C{  private List<TransitRouteStop> computeNewRouteProfile(TransitScheduleFactoryImpl factory,TransitRoute refTransitRoute,Map<Id<TransitRoute>,TransitRoute> transitRoutes,String[] listOfRoutes,List<TransitRouteStop> stops){  LinkedList<TransitRouteStop> newStops=new LinkedList<TransitRouteStop>();  for (int i=0; i < refTransitRoute.getStops().size(); i++) {    double arrivalOffset=0;    int arrCounter=0;    double departureOffset=0;    int depCounter=0;    for (int j=0; j < listOfRoutes.length; j++) {      TransitRoute route=transitRoutes.get(Id.create(listOfRoutes[j],TransitRoute.class));      TransitRouteStop stop=route.getStops().get(i);      arrivalOffset+=stop.getArrivalOffset() * route.getDepartures().size();      arrCounter++;      departureOffset+=stop.getDepartureOffset() * route.getDepartures().size();      depCounter++;    }    TransitRouteStop newStop=factory.createTransitRouteStop(refTransitRoute.getStops().get(i).getStopFacility(),arrivalOffset / (arrCounter),departureOffset / (depCounter));    newStop.setAwaitDepartureTime(refTransitRoute.getStops().get(i).isAwaitDepartureTime());    newStops.addLast(newStop);  }  return newStops;}  }
class C{  public String toQuoted(int maxLength){  String string=toHuman();  int length=string.length();  String ellipses;  if (length <= (maxLength - 2)) {    ellipses="";  } else {    string=string.substring(0,maxLength - 5);    ellipses="...";  }  return '\"' + string + ellipses+ '\"';}  }
class C{  public void arcTo(double rx,double ry,double xAxisRotation,boolean largeArcFlag,boolean sweepFlag,double x,double y){  if (rx == 0 || ry == 0) {    lineTo(x,y);    return;  }  Node lastPoint=get(size() - 1);  double x0=((lastPoint.mask & C2_MASK) == C2_MASK) ? lastPoint.x[2] : lastPoint.x[0];  double y0=((lastPoint.mask & C2_MASK) == C2_MASK) ? lastPoint.y[2] : lastPoint.y[0];  if (x0 == x && y0 == y) {    return;  }  double dx2=(x0 - x) / 2d;  double dy2=(y0 - y) / 2d;  double angle=Math.toRadians(xAxisRotation);  double cosAngle=Math.cos(angle);  double sinAngle=Math.sin(angle);  double x1=(cosAngle * dx2 + sinAngle * dy2);  double y1=(-sinAngle * dx2 + cosAngle * dy2);  rx=Math.abs(rx);  ry=Math.abs(ry);  double Prx=rx * rx;  double Pry=ry * ry;  double Px1=x1 * x1;  double Py1=y1 * y1;  double radiiCheck=Px1 / Prx + Py1 / Pry;  if (radiiCheck > 1) {    rx=Math.sqrt(radiiCheck) * rx;    ry=Math.sqrt(radiiCheck) * ry;    Prx=rx * rx;    Pry=ry * ry;  }  double sign=(largeArcFlag == sweepFlag) ? -1 : 1;  double sq=((Prx * Pry) - (Prx * Py1) - (Pry * Px1)) / ((Prx * Py1) + (Pry * Px1));  sq=(sq < 0) ? 0 : sq;  double coef=(sign * Math.sqrt(sq));  double cx1=coef * ((rx * y1) / ry);  double cy1=coef * -((ry * x1) / rx);  double sx2=(x0 + x) / 2.0;  double sy2=(y0 + y) / 2.0;  double cx=sx2 + (cosAngle * cx1 - sinAngle * cy1);  double cy=sy2 + (sinAngle * cx1 + cosAngle * cy1);  double ux=(x1 - cx1) / rx;  double uy=(y1 - cy1) / ry;  double vx=(-x1 - cx1) / rx;  double vy=(-y1 - cy1) / ry;  double p, n;  n=Math.sqrt((ux * ux) + (uy * uy));  p=ux;  sign=(uy < 0) ? -1d : 1d;  double angleStart=Math.toDegrees(sign * Math.acos(p / n));  n=Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));  p=ux * vx + uy * vy;  sign=(ux * vy - uy * vx < 0) ? -1d : 1d;  double angleExtent=Math.toDegrees(sign * Math.acos(p / n));  if (!sweepFlag && angleExtent > 0) {    angleExtent-=360f;  } else   if (sweepFlag && angleExtent < 0) {    angleExtent+=360f;  }  angleExtent%=360f;  angleStart%=360f;  Arc2D.Double arc=new Arc2D.Double(cx - rx,cy - ry,rx * 2d,ry * 2d,-angleStart,-angleExtent,Arc2D.OPEN);  PathIterator i=arc.getPathIterator(AffineTransform.getRotateInstance(angle,arc.getCenterX(),arc.getCenterY()));  double[] coords=new double[6];  i.next();  while (!i.isDone()) {    int type=i.currentSegment(coords);switch (type) {case PathIterator.SEG_CLOSE:      break;case PathIterator.SEG_CUBICTO:    curveTo(coords[0],coords[1],coords[2],coords[3],coords[4],coords[5]);  break;case PathIterator.SEG_LINETO:lineTo(coords[0],coords[1]);break;case PathIterator.SEG_MOVETO:break;case PathIterator.SEG_QUADTO:quadTo(coords[0],coords[1],coords[2],coords[3]);break;}i.next();}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.469 -0500",hash_original_method="586B8F3F36F41AEEA37D2D7C84643BDD",hash_generated_method="86E2CB6863C9F186FD4556610E97B0D6") private static int findAnyZero(double[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    double middleValue=a[middle];    if (middleValue < 0.0d) {      low=middle + 1;    } else     if (middleValue > 0.0d) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  public int compare(SearchResultDataLine ta,SearchResultDataLine tb){  if (_activeColumn == SearchTableColumns.TYPE_IDX) {    return AbstractTableMediator.compare(ta.getExtension(),tb.getExtension()) * _ascending;  } else   if (!isSorted() || _activeColumn != SearchTableColumns.COUNT_IDX) {    return super.compare(ta,tb);  } else {    return compareCount(ta,tb);  }}  }
class C{  public void filter(double[] x){  for (int i=0; i < x.length; i++)   x[i]=filter(x[i]);}  }
class C{  private String escapeString(String s){  return (s == null) ? null : s.replaceAll("\"","\\\\\"");}  }
class C{  String operationString(){  return operationString;}  }
class C{  private void printWarning(final String message,final boolean showConsole){  final String messageFormat="warning stream: {0}";  final String messageLog=MessageFormat.format(messageFormat,message);  log.debug(messageLog);  getStream(WARNING_STREAM_ID).println(message);  if (showConsole) {    showConsole();  }}  }
class C{  public boolean hasChanceNodes(Collection<String> nodeIds){  for (  String nodeId : nodeIds) {    if (!chanceNodes.containsKey(nodeId)) {      return false;    }  }  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getInlineStateMachine_();}  }
class C{  public synchronized void add(double x,double y){  while (mXY.get(x) != null) {    x+=getPadding(x);  }  mXY.put(x,y);  updateRange(x,y);}  }
class C{  public boolean isClassSubclassOfIncluding(SootClass child,SootClass possibleParent){  child.checkLevel(SootClass.HIERARCHY);  possibleParent.checkLevel(SootClass.HIERARCHY);  return getSuperclassesOfIncluding(child).contains(possibleParent);}  }
class C{  public void ReInit(CharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  private int convertWorldXToScaledScreen(double x){  return (int)(convertWorldToPixelUnits(x - svx / (double)SIZE_UNIT_PIXELS) * scale) + svx;}  }
class C{  default B scaling(final MapMeta src){  this.meta().setScaling(src.getScaling());  return this.getBuilder();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Seconds toStandardSeconds(){  checkYearsAndMonths("Seconds");  long seconds=getMillis() / DateTimeConstants.MILLIS_PER_SECOND;  seconds=FieldUtils.safeAdd(seconds,getSeconds());  seconds=FieldUtils.safeAdd(seconds,((long)getMinutes()) * ((long)DateTimeConstants.SECONDS_PER_MINUTE));  seconds=FieldUtils.safeAdd(seconds,((long)getHours()) * ((long)DateTimeConstants.SECONDS_PER_HOUR));  seconds=FieldUtils.safeAdd(seconds,((long)getDays()) * ((long)DateTimeConstants.SECONDS_PER_DAY));  seconds=FieldUtils.safeAdd(seconds,((long)getWeeks()) * ((long)DateTimeConstants.SECONDS_PER_WEEK));  return Seconds.seconds(FieldUtils.safeToInt(seconds));}  }
class C{  @Override public void putNextEntry(ZipEntry ze) throws IOException {  super.putNextEntry(ze);}  }
class C{  public static DoubleMatrix2D plus(DoubleMatrix2D A,double s){  return A.assign(F.plus(s));}  }
class C{  private byte[] cypheredWriteRead(final byte[] plainOut) throws TransportException, CryptoException {  final byte[] cypherOut=cryptoK.encryptData(plainOut);  final byte[] cypherIn=transport.command(cypherOut);  final byte[] plainIn=cryptoK.decryptData(cypherIn);  return plainIn;}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  @Override public void exceptionCaught(IoSession session,Throwable cause) throws Exception {  ExceptionHandler<Throwable> handler=findExceptionHandler(cause.getClass());  if (handler != null) {    handler.exceptionCaught(session,cause);  } else {    throw new UnknownMessageTypeException("No handler found for exception type: " + cause.getClass().getSimpleName());  }}  }
class C{  private boolean verifyPaymentAllocateSum(MPaymentAllocate[] pAllocs){  BigDecimal sumPaymentAllocates=Env.ZERO;  if (pAllocs.length > 0) {    for (    MPaymentAllocate pAlloc : pAllocs)     sumPaymentAllocates=sumPaymentAllocates.add(pAlloc.getAmount());    if (getPayAmt().compareTo(sumPaymentAllocates) != 0)     return false;  }  return true;}  }
class C{  private boolean checkStorageQuotaDirectoryExistsInDB(String nativeGuid) throws IOException {  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getQuotaDirsByNativeGuid(nativeGuid),result);  if (result.iterator().hasNext()) {    return true;  }  return false;}  }
class C{  private boolean urlDataRequestValidate(String url){  boolean result=false;  if (url.indexOf("/qryfmtmp") == -1) {    result=true;  }  return result;}  }
class C{  @Override public void writeProcessingInstruction(String target,String data) throws XMLStreamException {  throw new UnsupportedOperationException("Not supported yet.");}  }
class C{  @Nullable private static Pair<String,String> parsePackedRefsLine(@NotNull String line){  line=line.trim();  if (line.isEmpty()) {    return null;  }  char firstChar=line.charAt(0);  if (firstChar == '#') {    return null;  }  if (firstChar == '^') {    return null;  }  String hash=null;  int i;  for (i=0; i < line.length(); i++) {    char c=line.charAt(i);    if (!Character.isLetterOrDigit(c)) {      hash=line.substring(0,i);      break;    }  }  if (hash == null) {    LOG.warn("Ignoring invalid packed-refs line: [" + line + "]");    return null;  }  String branch=null;  int start=i;  if (start < line.length() && line.charAt(start++) == ' ') {    for (i=start; i < line.length(); i++) {      char c=line.charAt(i);      if (Character.isWhitespace(c)) {        break;      }    }    branch=line.substring(start,i);  }  if (branch == null || !branch.startsWith(REFS_HEADS_PREFIX) && !branch.startsWith(REFS_REMOTES_PREFIX)) {    return null;  }  return Pair.create(shortBuffer(branch),shortBuffer(hash.trim()));}  }
class C{  public static Preamble fromLogK(int logK){  if (logK > 255) {    throw new SketchesArgumentException("logK is greater than a byte, make it smaller");  }  byte flags=new PreambleFlags.Builder().setBigEndian(false).setReadOnly(true).setEmpty(true).setSharedPreambleMode(true).setSparseMode(true).setUnionMode(true).setEightBytePadding(false).build();  short seedHash=computeSeedHash(Util.DEFAULT_UPDATE_SEED);  return new Builder().setLogConfigK((byte)logK).setFlags(flags).setSeedHash(seedHash).build();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION_END___MULTIPLICITY_1:    return getMultiplicity_1();case UmplePackage.INLINE_ASSOCIATION_END___IS_SORTED_1:  return getIsSorted_1();case UmplePackage.INLINE_ASSOCIATION_END___ROLE_NAME_1:return getRoleName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override protected ShardIterator shards(ClusterState clusterState,InternalRequest request){  ShardRouting primaryShardRouting=new ShardRouting(request.concreteIndex(),0,clusterService.localNode().id(),true,ShardRoutingState.STARTED);  return new PlainShardIterator(primaryShardRouting.shardId(),Collections.singletonList(primaryShardRouting));}  }
class C{  public final GVector interpolateTo(GVector v,double alpha){  if (length != v.length) {    throw new MatrixSizeException();  }  return new GVector(this).interpolateToSelf(v,alpha);}  }
class C{  protected void err(String message){  errorCount++;  indent(indentLevel + 1);  log.print(message);  log.flush();  if (!nothrow) {    throw new RuntimeException(message);  }}  }
class C{  public void removeDownload(DownloadInfoRunnable downloadInfoRunnable){  mCompletedList.remove(downloadInfoRunnable);}  }
class C{  public static boolean useDarkTheme(){  return sDarkTheme;}  }
class C{  public void mouseReleased(final MouseEvent mouseEvent){  if (drawingWalls) {    setWallPoint2(mouseEvent.getPoint());    draggingPoint=null;  }}  }
class C{  private MSalesHistory importMSalesHistory(X_I_SalesHistory salesHistoryImporth) throws SQLException {  final String whereClause=I_C_SalesHistory.COLUMNNAME_C_SalesHistory_ID + "= ? ";  MSalesHistory salesHistory=new Query(Env.getCtx(),I_C_SalesHistory.Table_Name,whereClause,get_TrxName()).setClient_ID().setParameters(salesHistoryImporth.getC_SalesHistory_ID()).first();  if (salesHistory == null) {    salesHistory=new MSalesHistory(Env.getCtx(),0,get_TrxName());    salesHistory.setAD_Org_ID(salesHistoryImporth.getAD_Org_ID());    salesHistory.setM_Product_ID(salesHistoryImporth.getM_Product_ID());    salesHistory.setC_BPartner_ID(salesHistoryImporth.getC_BPartner_ID());    salesHistory.setM_Warehouse_ID(salesHistoryImporth.getM_Warehouse_ID());  }  salesHistory.setC_BPartner_Location_ID(salesHistoryImporth.getC_BPartner_Location_ID());  salesHistory.setC_BP_Group_ID(salesHistoryImporth.getC_BP_Group_ID());  salesHistory.setSalesRep_ID(salesHistoryImporth.getSalesRep_ID());  salesHistory.setM_Product_Category_ID(salesHistoryImporth.getM_Product_Category_ID());  salesHistory.setM_Product_Class_ID(salesHistoryImporth.getM_Product_Class_ID());  salesHistory.setM_Product_Classification_ID(salesHistoryImporth.getM_Product_Classification_ID());  salesHistory.setM_Product_Group_ID(salesHistoryImporth.getM_Product_Group_ID());  salesHistory.setDateInvoiced(salesHistoryImporth.getDateInvoiced());  salesHistory.setQty(salesHistoryImporth.getQty());  salesHistory.setTotalInvQty(salesHistoryImporth.getTotalInvQty());  salesHistory.setCostAmt(salesHistoryImporth.getCostAmt());  salesHistory.setTotalInvCost(salesHistoryImporth.getTotalInvCost());  salesHistory.setPriceInvoiced(salesHistoryImporth.getPriceInvoiced());  salesHistory.setDocumentNo(salesHistoryImporth.getDocumentNo());  salesHistory.setTotalInvAmt(salesHistoryImporth.getTotalInvAmt());  salesHistory.setC_Project_ID(salesHistoryImporth.getC_Project_ID());  salesHistory.setC_ProjectPhase_ID(salesHistoryImporth.getC_ProjectPhase_ID());  salesHistory.setC_ProjectTask_ID(salesHistoryImporth.getC_ProjectTask_ID());  salesHistory.setC_Campaign_ID(salesHistoryImporth.getC_Campaign_ID());  salesHistory.setC_Activity_ID(salesHistoryImporth.getC_Activity_ID());  salesHistory.setUser1_ID(salesHistoryImporth.getUser1_ID());  salesHistory.setUser2_ID(salesHistoryImporth.getUser2_ID());  salesHistory.saveEx();  isImported=true;  return salesHistory;}  }
class C{  private void mergeNetworks(Network tzone,Network sZone){  List<String> addedEndPoints=new ArrayList<String>(sZone.retrieveEndpoints());  StringSet newEndPoints=sZone.retrieveEndpoints();  for (  String endpoint : tzone.retrieveEndpoints()) {    if (newEndPoints.contains(endpoint)) {      addedEndPoints.remove(endpoint);    }  }  if (!addedEndPoints.isEmpty()) {    tzone.addEndpoints(addedEndPoints,true);  }  tzone.setNativeGuid(sZone.getNativeGuid());}  }
class C{  public CannotFindMethodException(SootClass clz,SootMethodRef method){  super(String.format("Cannot find or resolve %s in %s.",method,clz));}  }
class C{  public boolean isEmptyStringAllowed(){  return emptyStringAllowed;}  }
class C{  public static boolean bytesEqual(byte[] a,int aOff,byte[] b,int bOff,int len){  if (aOff + len > a.length || bOff + len > b.length)   return false; else {    for (int i=0; i < len; i++)     if (a[aOff + i] != b[bOff + i])     return false;    return true;  }}  }
class C{  private void initialize(){  this.setModalityType(ModalityType.DOCUMENT_MODAL);  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(500,375);  }  this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);  this.setContentPane(getJContentPane());}  }
class C{  public void trackEvent(String category,String action,String label,long value){  Log.d(TAG,String.format("Logging event %s (%s) label %s value %d",action,category,label,value));  tracker.send(eventBuilder.setCategory(category).setAction(action).setLabel(label).setValue(value).build());}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (dialog != null) {    dialog.setVisible(false);  }}  }
class C{  @Override public boolean is2D(){  return true;}  }
class C{  @SideEffectFree public void logp(Level level,@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable String msg,@Nullable Throwable thrown){  throw new RuntimeException();}  }
class C{  private void resetState(){  state=0;}  }
class C{  public void notifyAppWidgetViewDataChanged(int appWidgetId,int viewId){  notifyAppWidgetViewDataChanged(new int[]{appWidgetId},viewId);}  }
class C{  public boolean isWatchedScript(Script script){  lock.lock();  try {    return watchedScripts.contains(script);  }  finally {    lock.unlock();  }}  }
class C{  static String sqlToRegexLike(String sqlPattern,CharSequence escapeStr){  final char escapeChar;  if (escapeStr != null) {    if (escapeStr.length() != 1) {      throw invalidEscapeCharacter(escapeStr.toString());    }    escapeChar=escapeStr.charAt(0);  } else {    escapeChar=0;  }  return sqlToRegexLike(sqlPattern,escapeChar);}  }
class C{  public Web1TFileAccessProvider(String language,File indexPath,int minN,int maxN) throws IOException {  searcher=new JWeb1TSearcher(indexPath,minN,maxN);  basePath=indexPath.getAbsolutePath();  this.language=language;}  }
class C{  @Override public Bundle addAccount(AccountAuthenticatorResponse response,String accountType,String authTokenType,String[] requiredFeatures,Bundle options) throws NetworkErrorException {  Bundle bundle=new Bundle();  Intent intent=new Intent(mContext,SetupRcsAccount.class);  intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE,response);  bundle.putParcelable(AccountManager.KEY_INTENT,intent);  return bundle;}  }
class C{  public int capacity(){  return c.length;}  }
class C{  protected Connection createConnection() throws Exception {  return getConnectionFactory().createConnection();}  }
class C{  public static int toInt(byte[] data){  if (data == null || data.length != 4)   return 0x0;  return (int)((0xff & data[0]) << 24 | (0xff & data[1]) << 16 | (0xff & data[2]) << 8 | (0xff & data[3]) << 0);}  }
class C{  protected static void createInvoiceLines(Properties ctx,MInvoice invoice,MOrder order,String trxName) throws OperationException {  MOrderLine[] orderLines=order.getLines();  MInvoiceLine invoiceLine;  for (int i=0; i < orderLines.length; i++) {    invoiceLine=new MInvoiceLine(invoice);    invoiceLine.setOrderLine(orderLines[i]);    invoiceLine.setQty(orderLines[i].getQtyEntered());    PoManager.save(invoiceLine);  }}  }
class C{  private void logUsage(final Player player,final RPObject object){  String name=object.get("type");  if (object.has("name")) {    name=object.get("name");  }  String infostring="";  if (object.has("infostring")) {    infostring=object.get("infostring");  }  new GameEvent(player.getName(),USE,name,infostring).raise();}  }
class C{  public boolean isStorageOpen(StorageData storageData){  for (  StorageData existing : openedStoragesMap.keySet()) {    if (existing.getId().equals(storageData.getId())) {      return true;    }  }  return false;}  }
class C{  boolean isMarker(){  return value == this;}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  public boolean isReceiveMobileNotification(){  return receiveMobileNotification;}  }
class C{  public String convertEnumLiteralPropertyAttributeTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public void restrictToProposition(Proposition proposition){  if (proposition.getVariableSource() != this.variableSource) {    throw new IllegalArgumentException("Can only restrict to " + "propositions for the same variable source.");  }  for (int i=0; i < allowedCategories.length; i++) {    for (int j=0; j < allowedCategories[i].length; j++) {      if (!proposition.allowedCategories[i][j]) {        this.allowedCategories[i][j]=false;      }    }  }}  }
class C{  public static void initTables(){  int antiOptim=0;  antiOptim+=MyTSinCos.sinTab.length;  antiOptim+=MyTTan.tanTab.length;  antiOptim+=MyTAsin.asinTab.length;  antiOptim+=MyTAsinPow.asinPowTab.length;  antiOptim+=MyTAtan.atanTab.length;  antiOptim+=MyTExp.expHiTab.length;  antiOptim+=MyTLog.logXTab.length;  antiOptim+=MyTTwoPow.twoPowTab.length;  antiOptim+=MyTSqrt.sqrtXSqrtHiTab.length;  antiOptim+=MyTCbrt.cbrtXCbrtHiTab.length;  if (StrictMath.cos(antiOptim) == 0.0) {    throw new AssertionError();  }}  }
class C{  public String post(String url,String postBody,Bundle headers,boolean isPatchRequest) throws ParseException, ClientProtocolException, IOException {  final DefaultHttpClient client=newClient();  HttpPost post=null;  if (isPatchRequest) {    post=new HttpPatch(url);  } else {    post=new HttpPost(url);  }  AndroidHttpClient.modifyRequestToAcceptGzipResponse(post);  if (headers != null) {    for (    String key : headers.keySet()) {      post.addHeader(key,headers.getString(key));    }  }  StringEntity se=new StringEntity(postBody);  se.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE,"application/json"));  post.setEntity(se);  HttpResponse response=client.execute(post);  int statusCode=response.getStatusLine().getStatusCode();  if (statusCode != HttpStatus.OK) {    logger.debug("Response of HTTP " + statusCode);    JSONObject json=new JSONObject();    try {      json.put("error",String.valueOf(statusCode));    } catch (    JSONException e) {      logger.error(e);    }    client.getConnectionManager().shutdown();    return json.toString();  }  InputStream inputStream=AndroidHttpClient.getUngzippedContent(response.getEntity());  String strRes=IOUtils.toString(inputStream,Charset.defaultCharset());  client.getConnectionManager().shutdown();  return strRes;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public boolean hasEntryAction(State state){  EList<Expression> entryActions=getFirstEntryActions(state);  if (entryActions != null && !entryActions.isEmpty()) {    return true;  }  return false;}  }
class C{  public DocumentName(String documentName,Locale locale){  super(documentName,locale);}  }
class C{  public static char[] cloneCharArray(char[] chars){  if (chars == null) {    return null;  }  int len=chars.length;  if (len == 0) {    return chars;  }  char[] copy=new char[len];  System.arraycopy(chars,0,copy,0,len);  return copy;}  }
class C{  public DrawerBuilder withHeaderDivider(boolean headerDivider){  this.mHeaderDivider=headerDivider;  return this;}  }
class C{  @Override protected IgfsSecondaryFileSystem createSecondaryFileSystemStack() throws Exception {  final File workDir=new File(FS_WORK_DIR);  if (!workDir.exists())   assert workDir.mkdirs();  LocalIgfsSecondaryFileSystem second=new LocalIgfsSecondaryFileSystem();  second.setWorkDirectory(workDir.getAbsolutePath());  igfsSecondary=new IgfsLocalSecondaryFileSystemTestAdapter(workDir);  return second;}  }
class C{  public void reportNewSAT(){  nrOfSATs++;}  }
class C{  public static long[] toPrimitive(final Long[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_LONG_ARRAY;  }  final long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].longValue();  }  return result;}  }
class C{  private String buildClassPath(){  String classPath=null;  if (classPath != null) {    return classPath;  }  if (classPath == null && _loader instanceof DynamicClassLoader) {    classPath=((DynamicClassLoader)_loader).getClassPath();  } else {    StringBuilder sb=new StringBuilder();    sb.append(CauchoUtil.getClassPath());    if (_loader != null)     buildClassPath(sb,_loader);    classPath=sb.toString();  }  String srcDirName=getSourceDirName();  String classDirName=getClassDirName();  char sep=CauchoUtil.getPathSeparatorChar();  if (_extraClassPath != null)   classPath=classPath + sep + _extraClassPath;  if (!srcDirName.equals(classDirName))   classPath=srcDirName + sep + classPath;  classPath=classDirName + sep + classPath;  return classPath;}  }
class C{  public static boolean isLocationEnabled(Context context){  LocationManager locationManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);}  }
class C{  protected AccessMonitorNode(NodeClass<? extends AccessMonitorNode> c,ValueNode object,MonitorIdNode monitorId){  super(c,StampFactory.forVoid());  this.object=object;  this.monitorId=monitorId;}  }
class C{  public PutIndexTemplateRequest source(byte[] source){  return source(source,0,source.length);}  }
class C{  protected AbstractAnalysisFactory(Map<String,String> args){  originalArgs=Collections.unmodifiableMap(new HashMap<>(args));  String version=get(args,LUCENE_MATCH_VERSION_PARAM);  if (version == null) {    luceneMatchVersion=Version.LATEST;  } else {    try {      luceneMatchVersion=Version.parseLeniently(version);    } catch (    ParseException pe) {      throw new IllegalArgumentException(pe);    }  }  args.remove(CLASS_NAME);}  }
class C{  public void writeTreeLikelihood(PartitionData partition,XMLWriter writer){  AncestralStatesComponentOptions ancestralStatesOptions=(AncestralStatesComponentOptions)options.getComponentOptions(AncestralStatesComponentOptions.class);  PartitionSubstitutionModel model=partition.getPartitionSubstitutionModel();  if (model.isDolloModel()) {    return;  }  String treeLikelihoodTag=TreeLikelihoodParser.TREE_LIKELIHOOD;  if (ancestralStatesOptions.usingAncestralStates(partition)) {    treeLikelihoodTag=TreeLikelihoodParser.ANCESTRAL_TREE_LIKELIHOOD;    if (ancestralStatesOptions.isCountingStates(partition)) {      if (!ancestralStatesOptions.dNdSRobustCounting(partition)) {        treeLikelihoodTag=MarkovJumpsTreeLikelihoodParser.MARKOV_JUMP_TREE_LIKELIHOOD;      }    }  }  if (model.getDataType().getType() == DataType.NUCLEOTIDES && model.getCodonHeteroPattern() != null) {    for (int i=1; i <= model.getCodonPartitionCount(); i++) {      writeTreeLikelihood(treeLikelihoodTag,TreeLikelihoodParser.TREE_LIKELIHOOD,i,partition,writer);    }  } else {    writeTreeLikelihood(treeLikelihoodTag,TreeLikelihoodParser.TREE_LIKELIHOOD,-1,partition,writer);  }}  }
class C{  public void reset(){  syncInitialization=null;}  }
class C{  public AList(){  size=0;  items=(Item[])new Object[100];}  }
class C{  public T caseAssociationEnd_(AssociationEnd_ object){  return null;}  }
class C{  public Builder(@NonNull RegistrationRequest request){  setRequest(request);}  }
class C{  public Subscription(String subscriptionJid){  this(subscriptionJid,null,null,null);}  }
class C{  public List<String> executeAndReturnStdout(String[] rawArgs,boolean mergeArgsWithDefaultOptions) throws IOException, InterruptedException, MameExecutionException {  Process mameProcess=this.initMameProcess(rawArgs,false,mergeArgsWithDefaultOptions);  BufferedReader mameRuntimeStdout=new BufferedReader(new InputStreamReader(mameProcess.getInputStream()));  List<String> stdout=new ArrayList<>();  String s;  while ((s=mameRuntimeStdout.readLine()) != null) {    stdout.add(s);  }  int exitValue=mameProcess.waitFor();  if (exitValue != 0) {    throw new MameExecutionException(String.format("Mame process returned exit value %s",exitValue));  }  return stdout;}  }
class C{  public Signature(String signatureXml){  this(new ByteArrayInputStream(signatureXml.getBytes(StandardCharsets.UTF_8)));}  }
class C{  private void changeValueRandomly(Random r,int numOfValues,int indexOfAtt,Instance instance,boolean useMissing){  int currValue;  if (instance.isMissing(indexOfAtt)) {    currValue=numOfValues;  } else {    currValue=(int)instance.value(indexOfAtt);  }  if ((numOfValues == 2) && (!instance.isMissing(indexOfAtt))) {    instance.setValue(indexOfAtt,(currValue + 1) % 2);  } else {    while (true) {      int newValue;      if (useMissing) {        newValue=(int)(r.nextDouble() * (numOfValues + 1));      } else {        newValue=(int)(r.nextDouble() * numOfValues);      }      if (newValue != currValue) {        if (newValue == numOfValues) {          instance.setMissing(indexOfAtt);        } else {          instance.setValue(indexOfAtt,newValue);        }        break;      }    }  }}  }
class C{  public SQLiteDatabaseConfiguration(String path,int openFlags){  if (path == null) {    throw new IllegalArgumentException("path must not be null.");  }  this.path=path;  label=stripPathForLogs(path);  this.openFlags=openFlags;  maxSqlCacheSize=25;  locale=Locale.getDefault();}  }
class C{  public final int findNext(Finder f) throws BasicException {  return m_bd.findNext(m_iIndex,f);}  }
class C{  public Address minus(Extent extent){  return new Address(value.minus(extent.toLong()));}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:08.493 -0500",hash_original_method="558F46FD0EDA24F51E513C644847EA22",hash_generated_method="57CFD73F472AD8C72010E38B2FDA71B6") public void sendStartDecodingMessageParams(RilMessage rilMsg){  Message msg=obtainMessage(CMD_START);  msg.obj=rilMsg;  sendMessage(msg);}  }
class C{  private State buildPatch(final TaskState.TaskStage stage,final TaskState.SubStage subSatge,final Throwable e){  State s=new State();  s.taskInfo=new TaskState();  s.taskInfo.stage=stage;  s.taskInfo.subStage=subSatge;  if (e != null) {    s.taskInfo.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public static String prepare(String s){  return s != null ? s.trim().toLowerCase() : "";}  }
class C{  public void addRegionOfInterest(GliderRegionOfInterest region){  if (region == null) {    String message=Logging.getMessage("nullValue.RegionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  region.removePropertyChangeListener(this.regionListener);  region.addPropertyChangeListener(this.regionListener);  if (this.regionTable.add(region))   this.firePropertyChange(GLIDER_REGIONS_OF_INTEREST,null,this.getRegionsOfInterest());}  }
class C{  public void saveParam(ScannerParam param){  int targets=0;  if (this.getChkInjectableQueryString().isSelected()) {    targets|=ScannerParam.TARGET_QUERYSTRING;  }  if (this.getChkInjectableUrlPath().isSelected()) {    targets|=ScannerParam.TARGET_URLPATH;  }  if (this.getChkInjectablePostData().isSelected()) {    targets|=ScannerParam.TARGET_POSTDATA;  }  if (this.getChkInjectableHeaders().isSelected()) {    targets|=ScannerParam.TARGET_HTTPHEADERS;  }  param.setScanHeadersAllRequests(getChkInjectableHeadersAllRequests().isSelected());  if (this.getChkInjectableCookie().isSelected()) {    targets|=ScannerParam.TARGET_COOKIE;  }  param.setTargetParamsInjectable(targets);  int enabledRpc=0;  if (this.getChkRPCMultipart().isSelected()) {    enabledRpc|=ScannerParam.RPC_MULTIPART;  }  if (this.getChkRPCXML().isSelected()) {    enabledRpc|=ScannerParam.RPC_XML;  }  if (this.getChkRPCJSON().isSelected()) {    enabledRpc|=ScannerParam.RPC_JSON;  }  if (this.getChkRPCGWT().isSelected()) {    enabledRpc|=ScannerParam.RPC_GWT;  }  if (this.getChkRPCoData().isSelected()) {    enabledRpc|=ScannerParam.RPC_ODATA;  }  if (this.getChkRPCDWR().isSelected()) {    enabledRpc|=ScannerParam.RPC_DWR;  }  if (this.getChkRPCCustom().isSelected()) {    enabledRpc|=ScannerParam.RPC_CUSTOM;  }  param.setTargetParamsEnabledRPC(enabledRpc);  param.setExcludedParamList(getExcludedParameterModel().getElements());}  }
class C{  public void addKnot(int x,int color,int type){  int[] nx=new int[numKnots + 1];  int[] ny=new int[numKnots + 1];  byte[] nt=new byte[numKnots + 1];  System.arraycopy(xKnots,0,nx,0,numKnots);  System.arraycopy(yKnots,0,ny,0,numKnots);  System.arraycopy(knotTypes,0,nt,0,numKnots);  xKnots=nx;  yKnots=ny;  knotTypes=nt;  xKnots[numKnots]=xKnots[numKnots - 1];  yKnots[numKnots]=yKnots[numKnots - 1];  knotTypes[numKnots]=knotTypes[numKnots - 1];  xKnots[numKnots - 1]=x;  yKnots[numKnots - 1]=color;  knotTypes[numKnots - 1]=(byte)type;  numKnots++;  sortKnots();  rebuildGradient();}  }
class C{  public Arrow(Message message,ArrowStroke stroke,Direction align,int y){  this(message,message.getCaller(),message.getCallee(),stroke,align,y);}  }
class C{  public static PrivateKey parseKey(DerValue in) throws IOException {  AlgorithmId algorithm;  PrivateKey privKey;  if (in.tag != DerValue.tag_Sequence)   throw new IOException("corrupt private key");  BigInteger parsedVersion=in.data.getBigInteger();  if (!version.equals(parsedVersion)) {    throw new IOException("version mismatch: (supported: " + Debug.toHexString(version) + ", parsed: "+ Debug.toHexString(parsedVersion));  }  algorithm=AlgorithmId.parse(in.data.getDerValue());  try {    privKey=buildPKCS8Key(algorithm,in.data.getOctetString());  } catch (  InvalidKeyException e) {    throw new IOException("corrupt private key");  }  if (in.data.available() != 0)   throw new IOException("excess private key");  return privKey;}  }
class C{  protected void checkForListType(OneRowChange orc) throws SQLException, ReplicatorException {  checkForListType(orc,"ENUM");}  }
class C{  private boolean isASCIIDigit(char c){  return (c >= '0' && c <= '9');}  }
class C{  public static void showMessageBox(final String message){  showMessageBox(message,true);}  }
class C{  public static double parseDouble(String text) throws DataParseException {  try {    return Double.parseDouble(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  @Override public void stop(){  mIsRunning.set(false);}  }
class C{  public void drawPalette(int[] colors,int selectedColor,CharSequence[] colorContentDescriptions){  if (colors == null) {    return;  }  mColors=colors;  mSelectedColor=selectedColor;  mColorContentDescriptions=colorContentDescriptions;  final int effectiveNumColumns;  try {    effectiveNumColumns=getEffectiveNumColumns();  } catch (  Exception ex) {    mRedrawPalette=true;    return;  }  this.removeAllViews();  int tableElements=0;  int rowElements=0;  int rowNumber=0;  TableRow row=createTableRow();  for (  int color : colors) {    View colorSwatch=createColorSwatch(color,selectedColor);    setSwatchDescription(rowNumber,tableElements,rowElements,color == selectedColor,colorSwatch,colorContentDescriptions,effectiveNumColumns);    addSwatchToRow(row,colorSwatch,rowNumber);    tableElements++;    rowElements++;    if (rowElements == effectiveNumColumns) {      addView(row);      row=createTableRow();      rowElements=0;      rowNumber++;    }  }  if (rowElements > 0) {    while (rowElements != effectiveNumColumns) {      addSwatchToRow(row,createBlankSpace(),rowNumber);      rowElements++;    }    addView(row);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_TYPE_2__TRACER_ARGUMENT_1:    setTracerArgument_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected SVGOMRadialGradientElement(){}  }
class C{  private void dynInit(){  int AD_Column_ID=7670;  MLookup lookupPS=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,AD_Column_ID,DisplayType.Search);  paySelectSearch=new WSearchEditor("C_PaySelection_ID",true,false,true,lookupPS);  paySelectSearch.addValueChangeListener(this);}  }
class C{  public static int packInt(final byte[] array,final JBBPIntCounter position,final int value){  if ((value & 0xFFFFFF80) == 0) {    array[position.getAndIncrement()]=(byte)value;    return 1;  } else   if ((value & 0xFFFF0000) == 0) {    array[position.getAndIncrement()]=(byte)0x80;    array[position.getAndIncrement()]=(byte)(value >>> 8);    array[position.getAndIncrement()]=(byte)value;    return 3;  }  array[position.getAndIncrement()]=(byte)0x81;  array[position.getAndIncrement()]=(byte)(value >>> 24);  array[position.getAndIncrement()]=(byte)(value >>> 16);  array[position.getAndIncrement()]=(byte)(value >>> 8);  array[position.getAndIncrement()]=(byte)value;  return 5;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"EOR");  translateAll(environment,instruction,"EOR",instructions);}  }
class C{  public static boolean isEqualsLimit(Integer limit1,Integer limit2){  if (limit1 == null) {    limit1=0;  }  if (limit2 == null) {    limit2=0;  }  return limit1.equals(limit2);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static boolean hasSecurityManager(){  return (System.getSecurityManager() != null);}  }
class C{  public WifiTransport(final String host,final boolean wifiForced){  super(host);  this.forced=wifiForced;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.288 -0500",hash_original_method="2D3305654C6E379145E705984DE22DF2",hash_generated_method="5570DE3BCBE6276A5E09638DE2DD058C") public void invalidate(){  this.authScheme=null;  this.authScope=null;  this.credentials=null;}  }
class C{  public static ActionBarBackground changeColor(AppCompatActivity activity,int newColor,Boolean fade){  ActionBarBackground abColor=new ActionBarBackground(activity,newColor);  abColor.changeColor(fade);  return abColor;}  }
class C{  public void acquire(){  acquireCount.incrementAndGet();}  }
class C{  public static void createDefaultVarray(String defaultVarrayType){  boolean isVarrayAvail=false;  if (StringUtils.equals(defaultVarrayType,SIMPLE)) {    String existVarrayId=null;    List<VirtualArrayRestRep> availVarrays=VirtualArrayUtils.getVirtualArrays();    for (    VirtualArrayRestRep availVarray : availVarrays) {      if (StringUtils.equals(availVarray.getName(),ALL_FLASH_VARRAY)) {        existVarrayId=availVarray.getId().toString();        isVarrayAvail=true;        break;      }    }    if (isVarrayAvail && existVarrayId != null) {      HashMap<String,String> attachedStorageMaps=new HashMap<String,String>();      List<String> ids=Lists.newArrayList();      for (      StorageSystemRestRep storageSystem : StorageSystemUtils.getStorageSystemsByVirtualArray(existVarrayId)) {        attachedStorageMaps.put(storageSystem.getId().toString(),storageSystem.getId().toString());      }      for (      StorageSystemRestRep storageSystem : StorageSystemUtils.getStorageSystems()) {        if (attachedStorageMaps.isEmpty()) {          if (StringUtils.equals(XTREMIO,storageSystem.getSystemType())) {            ids.add(storageSystem.getId().toString());          }          if (StringUtils.equals(VMAX,storageSystem.getSystemType()) || StringUtils.equals(UNITY,storageSystem.getSystemType())) {            String modelType=storageSystem.getModel();            if (modelType != null && modelType.contains(SUFFIX_ALL_FLASH)) {              ids.add(storageSystem.getId().toString());            }          }        } else {          if (null == attachedStorageMaps.get(storageSystem.getId().toString())) {            if (StringUtils.equals(XTREMIO,storageSystem.getSystemType())) {              ids.add(storageSystem.getId().toString());            }            if (StringUtils.equals(VMAX,storageSystem.getSystemType()) || StringUtils.equals(UNITY,storageSystem.getSystemType())) {              String modelType=storageSystem.getModel();              if (modelType != null && modelType.contains(SUFFIX_ALL_FLASH)) {                ids.add(storageSystem.getId().toString());              }            }          }        }      }      addStorageSysVarray(existVarrayId,ids);    } else {      addAllFlashVirtualArray();    }  } else   if (StringUtils.equals(defaultVarrayType,MAPPING1X1)) {    List<VirtualArrayRestRep> availVarrays=VirtualArrayUtils.getVirtualArrays();    JsonObject dataObject=getCookieAsJson(GUIDE_DATA);    JsonArray storage_systems=dataObject.getAsJsonArray(STORAGE_SYSTEMS);    JsonArray varrays=dataObject.getAsJsonArray(VARRAYS);    if (varrays == null) {      varrays=new JsonArray();    }    if (storage_systems != null) {      for (      Object storageobject : storage_systems) {        JsonObject storage=(JsonObject)storageobject;        String storageid=storage.get("id").getAsString();        String storagename=storage.get("name").getAsString();        StorageSystemRestRep storageSystem=StorageSystemUtils.getStorageSystem(storageid);        if (storageSystem != null && isEMCAFA(storageSystem)) {          VirtualArrayForm virtualArray=new VirtualArrayForm();          String vArrayName=VARRAY_PREFIX + storagename;          for (          VirtualArrayRestRep availVarray : availVarrays) {            if (StringUtils.equals(availVarray.getName(),vArrayName)) {              Calendar localCalendar=Calendar.getInstance();              long currTime=localCalendar.getTimeInMillis() / 1000;              vArrayName=vArrayName + VARRAY_POSTFIX + currTime;              break;            }          }          virtualArray.name=vArrayName;          VirtualArrayRestRep varray=virtualArray.save();          virtualArray.load(varray);          addVarrayStorageSystem(virtualArray.id,storageid);          buildVarrayCookies(virtualArray.id,virtualArray.name,varrays);        }      }      dataObject.add(VARRAYS,varrays);      saveJsonAsCookie(GUIDE_DATA,dataObject);    } else {      HashMap<String,String> storageSysVarrayMap=new HashMap<String,String>();      for (      VirtualArrayRestRep availVarray : VirtualArrayUtils.getVirtualArrays()) {        for (        StorageSystemRestRep storageSystem : StorageSystemUtils.getStorageSystemsByVirtualArray(availVarray.getId().toString())) {          storageSysVarrayMap.put(storageSystem.getId().toString(),storageSystem.getId().toString());        }      }      for (      StorageSystemRestRep storageSystem : StorageSystemUtils.getStorageSystems()) {        if (storageSysVarrayMap.get(storageSystem.getId().toString()) == null) {          if (isEMCAFA(storageSystem)) {            createVirtualArray(storageSystem);          }        }      }    }    list();  } else {    list();  }}  }
class C{  private static RootNode initDirectory(){  PriorityQueue<Triplet<byte[],UserLeafNode,Operation>> initUsers=new PriorityQueue<Triplet<byte[],UserLeafNode,Operation>>(16384,new ServerUtils.PrefixComparator());  RootNode initRoot=TreeBuilder.copyExtendTree(null,initUsers);  initUsers.clear();  return initRoot;}  }
class C{  public static void validateMacTag(String participantId,String partnerParticipantId,BigInteger gx1,BigInteger gx2,BigInteger gx3,BigInteger gx4,BigInteger keyingMaterial,Digest digest,BigInteger partnerMacTag) throws CryptoException {  BigInteger expectedMacTag=calculateMacTag(partnerParticipantId,participantId,gx3,gx4,gx1,gx2,keyingMaterial,digest);  if (!expectedMacTag.equals(partnerMacTag)) {    throw new CryptoException("Partner MacTag validation failed. " + "Therefore, the password, MAC, or digest algorithm of each participant does not match.");  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_traceOptions_1_();}  }
class C{  @Override public final BufferedImage toBufferedImage(Resource res,String format) throws IOException {  InputStream is=null;  try {    return Sanselan.getBufferedImage(is=res.getInputStream());  } catch (  ImageReadException e) {    throw ExceptionUtil.toIOException(e);  } finally {    IOUtil.closeEL(is);  }}  }
class C{  public Hours minus(Hours hours){  if (hours == null) {    return this;  }  return minus(hours.getValue());}  }
class C{  public ContentAssistInvocationContext(ITextViewer viewer,int offset){  Assert.isNotNull(viewer);  fViewer=viewer;  fDocument=null;  fOffset=offset;}  }
class C{  protected Rows<String,CompositeColumnName> queryRowsWithAColumn(Keyspace keyspace,Collection<URI> ids,ColumnFamily<String,CompositeColumnName> cf,ColumnField column){  try {    OperationResult<Rows<String,CompositeColumnName>> result;    result=keyspace.prepareQuery(cf).getKeySlice(convertUriCollection(ids)).withColumnRange(CompositeColumnNameSerializer.get().buildRange().greaterThanEquals(column.getName()).lessThanEquals(column.getName())).execute();    return result.getResult();  } catch (  ConnectionException e) {    throw DatabaseException.retryables.connectionFailed(e);  }}  }
class C{  public static void computeSwitch(){  System.out.println("switch (prod) {");  for (int i=0; i < 100; i++) {    System.out.print("case " + i + ": ");    if (i % 10 != 0) {      System.out.print("result[iPos] += " + (i % 10) + ";");    }    if ((i / 10) != 0) {      System.out.print("result[iPosSubOne] += " + (i / 10) + ";");    }    System.out.println("break;");  }  System.out.println("};");  System.out.println("switch (result[iPos]) {");  for (int i=0; i < 100; i++) {    int tens=10 * (i / 10);    if (tens == 0) {      System.out.println("case " + i + ": break; ");    } else {      System.out.println("case " + i + ": result[iPosSubOne] += "+ (i / 10)+ "; result[iPos] -= "+ tens+ "; break; ");    }  }  System.out.println("};");}  }
class C{  private void verifyAccess() throws PdfSecurityException {  isPasswordSupplied=false;  extractionIsAllowed=false;  passwordStatus=PDFflags.NO_VALID_PASSWORD;  boolean isOwnerPassword=false, isUserPassword=false;  if (rev < 5) {    isOwnerPassword=testOwnerPassword();    isUserPassword=testPassword();  } else {    try {      isOwnerPassword=compareKeys(O,getV5Key(true,32),32);      if (isOwnerPassword) {        encryptionKey=v5Decrypt(OE,getV5Key(true,32));      } else {        isUserPassword=compareKeys(U,getV5Key(false,32),32);        if (isUserPassword) {          encryptionKey=v5Decrypt(UE,getV5Key(false,40));        }      }    } catch (    final NoSuchAlgorithmException e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }  }  if (isOwnerPassword) {    passwordStatus=PDFflags.VALID_OWNER_PASSWORD;  }  if (isUserPassword) {    passwordStatus+=PDFflags.VALID_USER_PASSWORD;  }  if (!isOwnerPassword || (isOwnerPassword && isUserPassword)) {    if (isUserPassword) {      if (encryptionPassword != null && encryptionPassword.length > 0) {        LogWriter.writeLog("Correct user password supplied ");      }      isFileViewable=true;      isPasswordSupplied=true;      if ((P & 16) == 16) {        extractionIsAllowed=true;      }    } else {      throw new PdfSecurityException("No valid password supplied");    }  } else {    LogWriter.writeLog("Correct owner password supplied");    isFileViewable=true;    isPasswordSupplied=true;    extractionIsAllowed=true;  }}  }
class C{  @Override public void resume(Task task) throws TException {  try {    resume(new TaskPojo(task));  } catch (  ServiceException e) {    throw new TException(e);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String lineup=getString(stack);  Channel c=getChannel(stack);  return Boolean.valueOf(c != null && c.isViewable(EPG.getInstance().getProviderIDForEPGDSName(lineup)));}  }
class C{  @DSComment("seems harmless") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.378 -0500",hash_original_method="ACCA642D1FA9BF396A2137FABFB57E8E",hash_generated_method="D7B2AD787E61C65024C69BB205A2F498") public static void loadTexture(int target,int level,int border,int fallbackFormat,int fallbackType,InputStream input) throws IOException {  loadTexture(target,level,border,fallbackFormat,fallbackType,createTexture(input));}  }
class C{  private void resumeLocking(){  if (DEBUG_SUSPEND_LOCK) {    Assert.assertHoldsLock(this.suspendLock,true);  }  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"Resume locking of {}",this.dlock);  }  this.lockingSuspendedBy=null;  this.suspendedLockId=INVALID_LOCK_ID;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=crossCheckStateCount;  stateCount[0]=0;  stateCount[1]=0;  stateCount[2]=0;  int i=startI;  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (i == maxI || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {    stateCount[2]++;    i++;  }  if (stateCount[2] > maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  public double distance(final Int3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void showConflictError(final Shell parent,final ConflictResolution resolution,final ConflictResolutionStatus status){  showConflictErrors(parent,new ConflictResolution[]{resolution},new ConflictResolutionStatus[]{status});}  }
class C{  public void close(){  if (!closed) {    closed=true;    for (    DataOutputStream d : dos)     try {      d.close();    } catch (    IOException e) {      throw new RuntimeException(e);    }    for (    File f : file)     f.delete();  }}  }
class C{  public Vector2f(Vector2f vector2f){  this.x=vector2f.x;  this.y=vector2f.y;}  }
class C{  private static void applyOverrides(){  InputStream stream=getContentTypesPropertiesStream();  if (stream == null) {    return;  }  try {    try {      Properties overrides=new Properties();      overrides.load(stream);      for (      Map.Entry<Object,Object> entry : overrides.entrySet()) {        String extension=(String)entry.getKey();        String mimeType=(String)entry.getValue();        add(mimeType,extension);      }    }  finally {      stream.close();    }  } catch (  IOException ignored) {  }}  }
class C{  protected void hideBalloon(){  if (this.balloon != null) {    this.balloon.setVisible(false);    this.balloon=null;  }  this.lastSelectedObject=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:38.057 -0500",hash_original_method="F3E55A7ADD1B924C0020F2B2D27D2CBA",hash_generated_method="31413DCEDDB1BC04FDF5FC122CF638E7") public int variant(){  return variant;}  }
class C{  public final void testIsSatisfiedWhenConstraintIsSatisfied(){  Constraint<Object> constraint=new ConstraintImplementation(true);  NegateConstraint<Object> negateConstraint=NegateConstraint.create(constraint);  assertFalse(negateConstraint.isSatisfied(new Object()));}  }
class C{  public boolean isSuppressNull(){  Object oo=get_Value(COLUMNNAME_IsSuppressNull);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void headOverflow(int arity){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(arity == queue.getArity());  if (head.NE(Deque.HEAD_INITIAL_VALUE))   closeAndInsertHead(arity);  head=queue.alloc();}  }
class C{  @RequestMapping(value="/{jobId}/resume",method={RequestMethod.PUT}) @ResponseBody public JobInstance resume(@PathVariable String jobId){  try {    final JobInstance jobInstance=jobService.getJobInstance(jobId);    jobService.resumeJob(jobInstance);    return jobService.getJobInstance(jobId);  } catch (  Exception e) {    logger.error(e.getLocalizedMessage(),e);    throw new InternalErrorException(e);  }}  }
class C{  public void preConcat(ColorMatrix prematrix){  setConcat(this,prematrix);}  }
class C{  public SingleRowCursor(Row row){  this.row=row;}  }
class C{  public boolean isIncludeNullsCampaign(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsCampaign);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static boolean CallNonvirtualBooleanMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualBooleanMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Boolean,true);  return Reflection.unwrapBoolean(returnObj);}  }
class C{  public void testSmallSampleCopy(){  int rightFiles=20;  String rightExtension=".txt";  createFile(rightFiles,rightExtension);  int wrongFiles=20;  String wrongExtention=".abc";  createFile(wrongFiles,wrongExtention);  MyFileFilter txtFilter=new MyFileFilter(rightExtension);  MyFileSampler textSampler=new MyFileSampler(textInputFolder.getAbsolutePath(),textOutputFolder.getAbsolutePath());  int numberToSample=(int)Math.max(1,Math.round(0.5 * rightFiles));  List<File> files=textSampler.sampleFiles(numberToSample,txtFilter);  assertEquals("Incorrect number of files sampled.",numberToSample,files.size());  assertEquals("Incorrect number of files copied.",numberToSample,textOutputFolder.listFiles().length);  for (  File file : textOutputFolder.listFiles()) {    String thisExtension=file.getName().substring(file.getName().indexOf("."),file.getName().length());    assertEquals("Wrong file identified by the filter",true,thisExtension.equals(rightExtension));  }}  }
class C{  public String GetImage(){  if (bufpos >= tokenBegin)   return new String(buffer,tokenBegin,bufpos - tokenBegin + 1); else   return new String(buffer,tokenBegin,bufsize - tokenBegin) + new String(buffer,0,bufpos + 1);}  }
class C{  private static void addToGB(Component comp,Container cont,GridBagLayout gridbag,GridBagConstraints constraints){  gridbag.setConstraints(comp,constraints);  cont.add(comp);}  }
class C{  protected boolean[] canHandleZeroTraining(AttrTypes attrTypes,int classType){  print("handle zero training instances");  printAttributeSummary(attrTypes,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("train");  accepts.add("value");  int numTrain=0, numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean attributeMissing=false, classMissing=false;  int numAtts=1;  int attrIndex=0;  return runBasicTest(attrTypes,numAtts,attrIndex,classType,missingLevel,attributeMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  public ArrayList<String> columns(){  if (this.columnames.isEmpty()) {    for (    final Map.Entry<byte[],Map<String,byte[]>> row : this) {      this.columnames.addAll(row.getValue().keySet());    }  }  final ArrayList<String> l=new ArrayList<String>();  l.addAll(this.columnames);  return l;}  }
class C{  private PropertyChangeListener createWindowPropertyChangeListener(){  return new PropertyChangeHandler();}  }
class C{  public Chunk3D(int x,int z,int dimension){  xCoord=x;  zCoord=z;  dimensionId=dimension;}  }
class C{  public SSLNetworkModule(SSLSocketFactory factory,String host,int port,String resourceContext){  super(factory,host,port,resourceContext);  this.host=host;  this.port=port;  log.setResourceName(resourceContext);}  }
class C{  public ColouredSlabGroup(String groupName,Material material){  low=createGroup(groupName,material,EnumColourGroup.LOW);  high=createGroup(groupName,material,EnumColourGroup.HIGH);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenormalize01.class,args);}  }
class C{  @Override public void beginWindow(long windowId){  emitted=false;}  }
class C{  public void recordType(CtClass t){  gen.recordType(t);}  }
class C{  @SuppressWarnings("unchecked") protected void receiveAttack(Packet c){  List<EntityAction> vector=(List<EntityAction>)c.getObject(0);  int charge=c.getIntValue(1);  boolean addAction=true;  for (  EntityAction ea : vector) {    int entityId=ea.getEntityId();    if ((ea instanceof TorsoTwistAction) && getGame().hasEntity(entityId)) {      TorsoTwistAction tta=(TorsoTwistAction)ea;      Entity entity=getGame().getEntity(entityId);      entity.setSecondaryFacing(tta.getFacing());    } else     if ((ea instanceof FlipArmsAction) && getGame().hasEntity(entityId)) {      FlipArmsAction faa=(FlipArmsAction)ea;      Entity entity=getGame().getEntity(entityId);      entity.setArmsFlipped(faa.getIsFlipped());    } else     if ((ea instanceof DodgeAction) && getGame().hasEntity(entityId)) {      Entity entity=getGame().getEntity(entityId);      entity.dodging=true;      addAction=false;    } else     if (ea instanceof AttackAction) {      if (ea instanceof ClubAttackAction) {        ClubAttackAction caa=(ClubAttackAction)ea;        Mounted club=caa.getClub();        club.restore();      }    }    if (addAction) {      if (charge == 0) {        getGame().addAction(ea);      } else       if (charge == 1) {        getGame().addCharge((AttackAction)ea);      }    }  }}  }
class C{  private static int hashCode(int addr,int bufferLengthInBytes,int lineWidthInBytes,int strideInBytes,int clutAddr,int clutNumBlocks,int mipmapLevels){  int hashCode=mipmapLevels;  if (addr != 0) {    if (VideoEngine.log.isDebugEnabled()) {      VideoEngine.log.debug("Texture.hashCode: " + bufferLengthInBytes + " bytes");    }    hashCode=Hash.getHashCode(hashCode,addr,bufferLengthInBytes,strideInBytes);  }  if (clutAddr != 0) {    hashCode=Hash.getHashCode(hashCode,clutAddr,clutNumBlocks * 32);  }  return hashCode;}  }
class C{  protected static Directory createLargeCFS(Directory dir) throws IOException {  List<String> files=new ArrayList<>();  SegmentInfo si=newSegmentInfo(dir,"_123");  for (int i=0; i < 20; i++) {    createSequenceFile(dir,"_123.f" + i,(byte)0,2000,si.getId(),"suffix");    files.add("_123.f" + i);  }  si.setFiles(files);  si.getCodec().compoundFormat().write(dir,si,IOContext.DEFAULT);  Directory cfs=si.getCodec().compoundFormat().getCompoundReader(dir,si,IOContext.DEFAULT);  return cfs;}  }
class C{  private static String hexEncode(byte data[]){  StringBuilder sb=new StringBuilder();  for (int i=0; i < data.length; ++i) {    sb.append(String.format("%02x",data[i]));  }  return sb.toString();}  }
class C{  public EncoderTestSuiteBuilder add(Test test){  _suite.addTest(test);  return this;}  }
class C{  public void quiesce(){  final String methodName="quiesce";  this.quiescing=true;synchronized (spaceAvailable) {    log.fine(CLASS_NAME,methodName,"711");    spaceAvailable.notifyAll();  }}  }
class C{  public String write(BigInteger value){  return value.toString();}  }
class C{  public int compareTo(Object o){  ObjectStreamField f=(ObjectStreamField)o;  boolean thisPrimitive=this.isPrimitive();  boolean fPrimitive=f.isPrimitive();  if (thisPrimitive != fPrimitive) {    return thisPrimitive ? -1 : 1;  }  return this.getName().compareTo(f.getName());}  }
class C{  public Ed25519GroupElement decode(){  final Ed25519FieldElement x=this.getAffineX();  final Ed25519FieldElement y=this.getAffineY();  return Ed25519GroupElement.p3(x,y,Ed25519Field.ONE,x.multiply(y));}  }
class C{  public static boolean isSubclass(String superclass,String otherclass){  try {    return isSubclass(Class.forName(superclass),Class.forName(otherclass));  } catch (  Exception e) {    return false;  }}  }
class C{  protected void fireInternalFrameEvent(int id){  Object[] listeners=listenerList.getListenerList();  InternalFrameEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == InternalFrameListener.class) {      if (e == null) {        e=new InternalFrameEvent(this,id);      }switch (e.getID()) {case InternalFrameEvent.INTERNAL_FRAME_OPENED:        ((InternalFrameListener)listeners[i + 1]).internalFrameOpened(e);      break;case InternalFrameEvent.INTERNAL_FRAME_CLOSING:    ((InternalFrameListener)listeners[i + 1]).internalFrameClosing(e);  break;case InternalFrameEvent.INTERNAL_FRAME_CLOSED:((InternalFrameListener)listeners[i + 1]).internalFrameClosed(e);break;case InternalFrameEvent.INTERNAL_FRAME_ICONIFIED:((InternalFrameListener)listeners[i + 1]).internalFrameIconified(e);break;case InternalFrameEvent.INTERNAL_FRAME_DEICONIFIED:((InternalFrameListener)listeners[i + 1]).internalFrameDeiconified(e);break;case InternalFrameEvent.INTERNAL_FRAME_ACTIVATED:((InternalFrameListener)listeners[i + 1]).internalFrameActivated(e);break;case InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED:((InternalFrameListener)listeners[i + 1]).internalFrameDeactivated(e);break;default :break;}}}}  }
class C{  public static int activityCount(){  return getInstance()._activityCount();}  }
class C{  public void writeSetBegin(TSet set) throws TException {  writeCollectionBegin(set.elemType,set.size);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  boolean newVal=evalBool(stack.pop());  if (uiMgr != null)   uiMgr.setCoreAnimationsEnabled(newVal);  return null;}  }
class C{  public void mousePressed(MouseEvent me){  if (MouseEvent.getMouseModifiersText(me.getModifiers()).equals("Shift+Button1")) {    return;  }  boolean overNode=false;  for (  DefaultNode node : this.paintedNodes) {    if (node.isPointOverNode(me.getPoint())) {      overNode=true;      if (!(node instanceof IndicatorNode)) {        if (this.component.getSelectedNode() != null) {          this.paintedNodes.add((DefaultNode)this.component.getSelectedNode().getNode());          this.paintedNodes.remove(this.component.getSelectedNode());        }        this.paintedNodes.remove(node);        this.component.setSelectedNode(new IndicatorNode(node,this.color,5));        this.paintedNodes.add(this.component.getSelectedNode());        break;      }    }  }  if (!overNode) {    if (this.component.getSelectedNode() != null) {      this.paintedNodes.add((DefaultNode)this.component.getSelectedNode().getNode());      this.paintedNodes.remove(this.component.getSelectedNode());      this.component.setSelectedNode(null);    }  }  this.component.repaint();}  }
class C{  @DSComment("Private Method") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:23.565 -0500",hash_original_method="608502985E1CF48EAA100E44A7EF5256",hash_generated_method="284C2C48A2187BEAE0F200C9428307C6") private void parse(KXmlParser parser,DocumentImpl document,Node node,int endToken) throws XmlPullParserException, IOException {  int token=parser.getEventType();  while (token != endToken && token != XmlPullParser.END_DOCUMENT) {    if (token == XmlPullParser.PROCESSING_INSTRUCTION) {      String text=parser.getText();      int dot=text.indexOf(' ');      String target=(dot != -1 ? text.substring(0,dot) : text);      String data=(dot != -1 ? text.substring(dot + 1) : "");      node.appendChild(document.createProcessingInstruction(target,data));    } else     if (token == XmlPullParser.DOCDECL) {      String name=parser.getRootElementName();      String publicId=parser.getPublicId();      String systemId=parser.getSystemId();      document.appendChild(new DocumentTypeImpl(document,name,publicId,systemId));    } else     if (token == XmlPullParser.COMMENT) {      if (!ignoreComments) {        node.appendChild(document.createComment(parser.getText()));      }    } else     if (token == XmlPullParser.IGNORABLE_WHITESPACE) {      if (!ignoreElementContentWhitespace && document != node) {        appendText(document,node,token,parser.getText());      }    } else     if (token == XmlPullParser.TEXT || token == XmlPullParser.CDSECT) {      appendText(document,node,token,parser.getText());    } else     if (token == XmlPullParser.ENTITY_REF) {      String entity=parser.getName();      if (entityResolver != null) {      }      String resolved=resolvePredefinedOrCharacterEntity(entity);      if (resolved != null) {        appendText(document,node,token,resolved);      } else {        node.appendChild(document.createEntityReference(entity));      }    } else     if (token == XmlPullParser.START_TAG) {      if (namespaceAware) {        String namespace=parser.getNamespace();        String name=parser.getName();        String prefix=parser.getPrefix();        if ("".equals(namespace)) {          namespace=null;        }        Element element=document.createElementNS(namespace,name);        element.setPrefix(prefix);        node.appendChild(element);        for (int i=0; i < parser.getAttributeCount(); i++) {          String attrNamespace=parser.getAttributeNamespace(i);          String attrPrefix=parser.getAttributePrefix(i);          String attrName=parser.getAttributeName(i);          String attrValue=parser.getAttributeValue(i);          if ("".equals(attrNamespace)) {            attrNamespace=null;          }          Attr attr=document.createAttributeNS(attrNamespace,attrName);          attr.setPrefix(attrPrefix);          attr.setValue(attrValue);          element.setAttributeNodeNS(attr);        }        token=parser.nextToken();        parse(parser,document,element,XmlPullParser.END_TAG);        parser.require(XmlPullParser.END_TAG,namespace,name);      } else {        String name=parser.getName();        Element element=document.createElement(name);        node.appendChild(element);        for (int i=0; i < parser.getAttributeCount(); i++) {          String attrName=parser.getAttributeName(i);          String attrValue=parser.getAttributeValue(i);          Attr attr=document.createAttribute(attrName);          attr.setValue(attrValue);          element.setAttributeNode(attr);        }        token=parser.nextToken();        parse(parser,document,element,XmlPullParser.END_TAG);        parser.require(XmlPullParser.END_TAG,"",name);      }    }    token=parser.nextToken();  }}  }
class C{  public static synchronized void unregisterTransactionServicePlugin(TransactionServicePlugin l){  if (service_ != null) {    service_.removeTSListener(l);  }  tsListenersList_.remove(l);}  }
class C{  private boolean isMineshafterPresent(){  try {    Class.forName("mineshafter.MineServer");    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void disconnectFromBeanContext() throws PropertyVetoException {  BeanContext bc=getBeanContext();  if (bc != null) {    bc.removeBeanContextMembershipListener(this);    beanContextChildSupport.setBeanContext(null);  }}  }
class C{  protected Control createInfoTextArea(Composite parent){  infoLabel=new Label(parent,SWT.RIGHT);  infoLabel.setText(infoText);  GridDataFactory.fillDefaults().grab(true,false).align(SWT.FILL,SWT.BEGINNING).applyTo(infoLabel);  infoLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW));  return infoLabel;}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  private SmallDocSet visit(Cell cell,Bits acceptContains) throws IOException {  if (thisTerm == null)   return null;  SmallDocSet combinedSubResults=null;  Shape subCellsFilter=queryShape;  if (cell.getLevel() != 0 && ((cell.getShapeRel() == null || cell.getShapeRel() == SpatialRelation.WITHIN))) {    subCellsFilter=null;    assert cell.getShape().relate(queryShape) == SpatialRelation.WITHIN;  }  CellIterator subCells=cell.getNextLevelCells(subCellsFilter);  while (subCells.hasNext()) {    Cell subCell=subCells.next();    if (!seek(subCell)) {      combinedSubResults=null;    } else     if (subCell.getLevel() == detailLevel) {      combinedSubResults=getDocs(subCell,acceptContains);    } else     if (!multiOverlappingIndexedShapes && subCell.getShapeRel() == SpatialRelation.WITHIN) {      combinedSubResults=getLeafDocs(subCell,acceptContains);    } else {      SmallDocSet leafDocs=getLeafDocs(subCell,acceptContains);      SmallDocSet subDocs=visit(subCell,acceptContains);      combinedSubResults=union(leafDocs,subDocs);    }    if (combinedSubResults == null)     break;    acceptContains=combinedSubResults;  }  return combinedSubResults;}  }
class C{  public BasicBlock(final IBlockNode block,final Function parentFunction){  m_block=Preconditions.checkNotNull(block,"Error: Block argument can't be null");  m_parentFunction=Preconditions.checkNotNull(parentFunction,"Error: Parent function argument can't be null");  for (  final INaviInstruction instruction : m_block.getBlock().getInstructions()) {    m_instructions.add(new Instruction(instruction));  }  if (m_instructions.isEmpty()) {    throw new IllegalArgumentException("Error: Block without instructions can not exist.");  }}  }
class C{  public static String translateHadoopNodeConstraint(License license){  String limit;  try {    limit=license.getConstraints().getConstraintValue(LicenseConstants.NODES_CONSTRAINT);    try {      int numLimit=Integer.parseInt(limit);      if (numLimit == -1) {        limit=I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.value.unlimited.label");      } else {        limit=NumberFormat.getInstance().format(numLimit);      }    } catch (    NumberFormatException e) {    }  } catch (  ConstraintNotRestrictedException e) {    limit=I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.value.unlimited.label");  }  return I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.hadoop_node.label",limit);}  }
class C{  private void fireCouplingRemoved(Coupling<?> coupling){  for (  CouplingListener listeners : couplingListeners) {    listeners.couplingRemoved(coupling);  }}  }
class C{  public static String toString(byte[] array,String prefix){  final String[] offsetPrefix={"","000","00","0",""};  StringBuilder sb=new StringBuilder();  StringBuilder charForm=new StringBuilder();  int i=0;  for (i=0; i < array.length; i++) {    if (i % 16 == 0) {      sb.append(prefix);      String offset=Integer.toHexString(i);      sb.append(offsetPrefix[offset.length()]);      sb.append(offset);      charForm.delete(0,charForm.length());    }    sb.append(' ');    sb.append(Byte.toHexString(array[i],false));    int currentByte=(0xff & array[i]);    char currentChar=(char)(currentByte & 0xffff);    charForm.append((Character.isISOControl(currentChar) ? '.' : currentChar));    if ((i + 1) % 8 == 0) {      sb.append(' ');    }    if ((i + 1) % 16 == 0) {      sb.append(' ');      sb.append(charForm.toString());      sb.append('\n');    }  }  if (i % 16 != 0) {    int ws2add=16 - i % 16;    for (int j=0; j < ws2add; j++) {      sb.append("   ");    }    if (ws2add > 8) {      sb.append(' ');    }    sb.append("  ");    sb.append(charForm.toString());    sb.append('\n');  }  return sb.toString();}  }
class C{  synchronized public void close(){  if (connected) {    info("Closing socket.");    try {      out.close();      in.close();      socket.close();    } catch (    IOException ex) {      warning("Error closing socket: " + ex);    }    if (disconnectReason == -1) {      disconnectReason=Irc.ERROR_CONNECTION_CLOSED;    }    if (disconnectMessage == null) {      disconnectMessage="";    }    irc.disconnected(disconnectReason,disconnectMessage);  }  connected=false;}  }
class C{  private ValueLobDb(Reader in,long remaining) throws IOException {  this.type=Value.CLOB;  this.small=null;  this.lobId=0;  this.fileName=createTempLobFileName();  long tmpPrecision=0;  try {    char[] buff=new char[Constants.IO_BUFFER_SIZE];    while (true) {      int len=getBufferSize(remaining);      len=IOUtils.readFully(in,buff,len);      if (len == 0) {        break;      }    }  }  finally {  }  this.precision=tmpPrecision;}  }
class C{  public final void notifyEvent(final int nID,final JIPTerm term,final int nQueryHandle){  notifyEvent(nID,term.getTerm(),nQueryHandle);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void deleteColumns(int start,int len) throws FitsException {  ensureData();  Object[] newData=new Object[this.nFields - len];  int[] newOffsets=new int[this.nFields - len];  int[] newLengths=new int[this.nFields - len];  Class<?>[] newTypes=new Class[this.nFields - len];  String[] newNulls=new String[this.nFields - len];  System.arraycopy(this.data,0,newData,0,start);  System.arraycopy(this.lengths,0,newLengths,0,start);  System.arraycopy(this.types,0,newTypes,0,start);  System.arraycopy(this.nulls,0,newNulls,0,start);  System.arraycopy(this.data,start + len,newData,start,this.nFields - start - len);  System.arraycopy(this.lengths,start + len,newLengths,start,this.nFields - start - len);  System.arraycopy(this.types,start + len,newTypes,start,this.nFields - start - len);  System.arraycopy(this.nulls,start + len,newNulls,start,this.nFields - start - len);  for (int i=start; i < start + len; i+=1) {    this.rowLen-=this.lengths[i] + 1;  }  this.data=newData;  this.offsets=newOffsets;  this.lengths=newLengths;  this.types=newTypes;  this.nulls=newNulls;  if (this.isNull != null) {    boolean found=false;    boolean[] newIsNull=new boolean[this.nRows * (this.nFields - len)];    for (int i=0; i < this.nRows; i+=1) {      int oldOff=this.nFields * i;      int newOff=(this.nFields - len) * i;      for (int col=0; col < start; col+=1) {        newIsNull[newOff + col]=this.isNull[oldOff + col];        found=found || this.isNull[oldOff + col];      }      for (int col=start + len; col < this.nFields; col+=1) {        newIsNull[newOff + col - len]=this.isNull[oldOff + col];        found=found || this.isNull[oldOff + col];      }    }    if (found) {      this.isNull=newIsNull;    } else {      this.isNull=null;    }  }  this.buffer=null;  this.nFields-=len;}  }
class C{  public static void resetLinkLength(Network network,String networkMode){  for (  Link link : network.getLinks().values()) {    if (link.getAllowedModes().contains(networkMode)) {      double l=CoordUtils.calcEuclideanDistance(link.getFromNode().getCoord(),link.getToNode().getCoord());      link.setLength(l > 0 ? l : 1);    }  }}  }
class C{  private PriorityQueue<ScoreTerm> createQueue(Map<String,Int> words) throws IOException {  return createQueue(words,this.fieldNames);}  }
class C{  private void postReevaluateRemote(){  sendMsg(mAudioHandler,MSG_REEVALUATE_REMOTE,SENDMSG_QUEUE,0,0,null,0);}  }
class C{  public boolean isPeriod(){  String pt=getPAPeriodType();  if (pt == null)   return false;  return PAPERIODTYPE_Period.equals(pt);}  }
class C{  public Bag[] objectsHitBy(final Point2D point){  return objectsHitBy(new Rectangle2D.Double(point.getX(),point.getY(),1,1));}  }
class C{  private static <E>List<E> iterableToList(Iterable<E> iterable){  List<E> list=null;  if (iterable instanceof List) {    list=(List<E>)iterable;  } else   if (iterable instanceof Collection) {    list=new ArrayList<>((Collection<E>)iterable);  } else {    list=new ArrayList<>();    Iterator<E> iterator=iterable.iterator();    while (iterator.hasNext()) {      list.add(iterator.next());    }  }  return list;}  }
class C{  public static Dashboard findByNameAndOwner(EntityManager em,String dashboardName,PrincipalUser owner){  TypedQuery<Dashboard> query=em.createNamedQuery("Dashboard.findByNameAndOwner",Dashboard.class);  try {    query.setParameter("name",dashboardName);    query.setParameter("owner",owner);    return query.getSingleResult();  } catch (  NoResultException ex) {    return null;  }}  }
class C{  @NonNull protected PendingIntent createPendingIntent(@NonNull String action,@NonNull Class<? extends Service> serviceClass){  Intent intent=new Intent(context,serviceClass);  intent.setAction(action);  return PendingIntent.getService(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);}  }
class C{  public ThrownException duplicate(){  return new ThrownException(type,explicit);}  }
class C{  public void disableAllClassDependencies(){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (cap.isClass()) {      disableDependency(cap);    }  }}  }
class C{  public void restorePercentageMax(double value){  restore(value / 100 * maxValue);}  }
class C{  public MapBackedRegistry(final Map<K,V> map){  super(map);}  }
class C{  public ExecOSAScriptCommand(String playlist,File[] files){  this.playlist=playlist;  this.files=files;}  }
class C{  public EquationFakeDefinition createEquationFakeDefinition(){  EquationFakeDefinitionImpl equationFakeDefinition=new EquationFakeDefinitionImpl();  return equationFakeDefinition;}  }
class C{  @Override public void filter(ContainerRequestContext request,ContainerResponseContext response) throws IOException {  String sessionCookieName=sessionCookieConfig.getName();  if (response.getCookies().containsKey(sessionCookieName)) {    return;  }  if (!request.getCookies().containsKey(sessionCookieName)) {    return;  }  Cookie requestCookie=request.getCookies().get(sessionCookieName);  Optional<User> optionalUser=authenticator.authenticate(requestCookie);  if (optionalUser.isPresent()) {    sessionLoginResource.cookiesForUser(optionalUser.get()).forEach(null);  }}  }
class C{  public void bite(){  bites++;}  }
class C{  public int loadUnsigned16(int addr){  return (loadUnsigned8(addr) << 8) | loadUnsigned8(addr + 1);}  }
class C{  @SuppressWarnings("unchecked") protected void notifyDataSetLoaded(DataSetEvent e){  Vector<DataSourceListener> l;synchronized (this) {    l=(Vector<DataSourceListener>)m_listeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptDataSet(e);    }    m_dataSet=null;  }}  }
class C{  public TaskForce(){  super(TF_REGEX,false,1.0);}  }
class C{  public ExtractorHolder(Extractor[] extractors,ExtractorOutput extractorOutput){  this.extractors=extractors;  this.extractorOutput=extractorOutput;}  }
class C{  public IndexTable(final File location,int keysize,int payloadsize,final boolean useTailCache,final boolean exceed134217727) throws IOException {  final Row row=new Row("byte[] key-" + keysize + ", "+ "long num-"+ payloadsize+ " {b256}",NaturalOrder.naturalOrder);  Table t;  try {    t=new Table(location,row,1024 * 1024,0,useTailCache,exceed134217727,true);  } catch (  final SpaceExceededException e) {    try {      t=new Table(location,row,0,0,false,exceed134217727,true);    } catch (    kelondroException|SpaceExceededException e1) {      throw new IOException(e);    }  }  this.table=t;}  }
class C{  private Map<String,String> updateAliasesStrategy(MDSDialog dialog,List<ZoneWwnAliasUpdate> updatingAliases) throws NetworkDeviceControllerException {  Long time=System.currentTimeMillis();  Map<String,String> updatedAliasesName=new HashMap<String,String>();  try {    dialog.config();    dialog.deviceAliasConfig();    Map<String,String> aliasMap=dialog.showDeviceAliasDatabase();    for (    ZoneWwnAliasUpdate updatingAlias : updatingAliases) {      String name=updatingAlias.getName();      String newName=updatingAlias.getNewName();      String oldWwn=updatingAlias.getAddress();      String newWwn=updatingAlias.getNewAddress();      _log.info("Starting update alias {}",name);      String currentWwn=aliasMap.get(name);      String updateStatus=NO_CHANGE;      try {        if (StringUtils.isEmpty(newWwn) && StringUtils.isEmpty(newName)) {          _log.info("No new alias or WWN were specified.  Nothing to update");        } else         if (StringUtils.equals(name,newName) && !StringUtils.isEmpty(newWwn) && StringUtils.equalsIgnoreCase(oldWwn,newWwn)) {          _log.info("Old and new name {} are the same. Nothing to do.",name,currentWwn);          _log.info("Old and new WWN {} are the same. Nothing to do.",newWwn,currentWwn);        } else         if (StringUtils.isEmpty(currentWwn)) {          _log.info("Alias {} was not found.  Nothing to do",name);        } else         if (StringUtils.isEmpty(newName) && StringUtils.equalsIgnoreCase(currentWwn,newWwn)) {          _log.info("The existing alias {} already has the desired WWN {}. Nothing to do.",name,currentWwn);        } else         if (aliasMap.containsValue(newWwn)) {          throw NetworkDeviceControllerException.exceptions.wwnAssignedToAnotherAlias(newWwn,name,getAliasForWwn(aliasMap,newWwn));        } else         if (!StringUtils.isEmpty(oldWwn) && !StringUtils.equalsIgnoreCase(oldWwn,currentWwn)) {          throw NetworkDeviceControllerException.exceptions.aliasWithDifferentWwnExists(name,currentWwn,oldWwn);        } else         if (!StringUtils.isEmpty(newName) && aliasMap.containsKey(newName)) {          throw NetworkDeviceControllerException.exceptions.aliasAlreadyInNetworkSystem(newName,"");        } else         if (!StringUtils.isEmpty(newName) || !StringUtils.isEmpty(newWwn)) {          boolean wwnUpdated=false;          if (!StringUtils.isEmpty(newWwn) && (StringUtils.isEmpty(oldWwn) || StringUtils.equalsIgnoreCase(oldWwn,currentWwn))) {            _log.info("The existing alias {} 's WWN is updated to {}",name,newWwn);            dialog.deviceAliasName(name,currentWwn,true);            dialog.deviceAliasName(name,newWwn,false);            aliasMap.put(name,newWwn);            wwnUpdated=true;          }          if (!StringUtils.isEmpty(newName) && !StringUtils.equals(name,newName)) {            _log.info("Renaming alias {} to {}",name,newName);            try {              dialog.deviceAliasRename(name,newName);            } catch (            Exception ex) {              if (wwnUpdated) {                _log.info("Failed to rename.  Rollback update wwn");                dialog.deviceAliasName(name,newWwn,true);                dialog.deviceAliasName(name,currentWwn,false);                aliasMap.put(name,currentWwn);              }              throw ex;            }            aliasMap.put(newName,aliasMap.get(name));            aliasMap.remove(name);          }          updateStatus=SUCCESS;        }      } catch (      Exception ex) {        _log.warn("Exception was encountered but will try the rest of the batch. " + "Error message: " + ex.getMessage());        updateStatus=ERROR;      }      updatedAliasesName.put(name,updateStatus);    }    if (!updatedAliasesName.isEmpty()) {      dialog.deviceAliasCommit();      dialog.copyRunningConfigToStartupFabric();    } else {      dialog.exitToConfig();    }    time=System.currentTimeMillis() - time;    _log.info("Aliases update time (msec): " + time.toString());    return updatedAliasesName;  } catch (  Exception ex) {    dialog.deviceAliasAbort();    throw NetworkDeviceControllerException.exceptions.updateAliasesStrategyFailed(ex);  } finally {    dialog.endConfig();  }}  }
class C{  private void loadDeviceInfoActivity(){  Intent intent=new Intent(AlreadyRegisteredActivity.this,DisplayDeviceInfoActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());  startActivity(intent);}  }
class C{  public PutRequestMessage(PutRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersionedValue()) {    this.versionedValue=new VersionedValue(other.versionedValue);  }  if (other.isSetValue()) {    this.value=org.apache.thrift.TBaseHelper.copyBinary(other.value);    ;  }}  }
class C{  public static String leftPad(String str,int len,String fill){  StringBuilder sb=new StringBuilder(len);  if (str.length() < len) {    for (int i=str.length(); i < len; i++) {      sb.append(fill);    }  }  sb.append(str);  return sb.toString();}  }
class C{  public Builder convertDurationsTo(TimeUnit durationUnit){  this.durationUnit=durationUnit;  return this;}  }
class C{  public void parse(XMLInputSource source) throws XNIException, IOException {  if (fParseInProgress) {    throw new XNIException("FWK005 parse may not be called while parsing.");  }  fParseInProgress=true;  try {    setInputSource(source);    parse(true);  } catch (  XNIException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  IOException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  RuntimeException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  Exception ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw new XNIException(ex);  } finally {    fParseInProgress=false;    this.cleanup();  }}  }
class C{  public static void main(String[] args) throws Exception {  SauceCommandLineArguments arguments=SauceCommandLineArguments.initialize(args);  checkArguments(arguments);  List<Module> modules=Lists.newArrayList(new SauceLabsModule());  Injector injector=Guice.createInjector(modules);  SauceREST sauceREST=injector.getInstance(SauceREST.class);  long start=System.currentTimeMillis();  LOG.info(String.format("Uploading file %s to SauceLabs, overwriting %s",arguments.file().getFileName().toString(),arguments.overwrite()));  sauceREST.uploadFile(arguments.file().toFile(),arguments.file().getFileName().toString(),arguments.overwrite());  LOG.info(String.format("Finishing uploading file %s in %s",arguments.file().getFileName().toString(),Util.TO_PRETTY_FORMAT.apply(System.currentTimeMillis() - start)));}  }
class C{  public synchronized void abortGrabbing(){  imageComplete(IMAGEABORTED);}  }
class C{  public ObjectMatrix2D like2D(int rows,int columns){  return new DenseObjectMatrix2D(rows,columns);}  }
class C{  public static Level logWriterLeveltoLog4jLevel(final int logWriterLevel){switch (logWriterLevel) {case InternalLogWriter.SEVERE_LEVEL:    return Level.FATAL;case InternalLogWriter.ERROR_LEVEL:  return Level.ERROR;case InternalLogWriter.WARNING_LEVEL:return Level.WARN;case InternalLogWriter.CONFIG_LEVEL:return Level.INFO;case InternalLogWriter.INFO_LEVEL:return Level.INFO;case InternalLogWriter.FINE_LEVEL:return Level.DEBUG;case InternalLogWriter.FINER_LEVEL:return Level.DEBUG;case InternalLogWriter.FINEST_LEVEL:return Level.TRACE;case InternalLogWriter.ALL_LEVEL:return Level.ALL;case InternalLogWriter.NONE_LEVEL:return Level.OFF;}throw new IllegalArgumentException("Unknown LogWriter level [" + logWriterLevel + "].");}  }
