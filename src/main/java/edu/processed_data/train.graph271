class C{  @SuppressWarnings({"rawtypes","unchecked"}) public MovieToMpNfoConnector(){  actors=new ArrayList();  producers=new ArrayList();  genres=new ArrayList<>();  genresNoWrap=new ArrayList<>();  fanart=new ArrayList<>();  sets=new ArrayList<>();  ids=new HashMap<>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.944 -0500",hash_original_method="F90E0E400E4B2900768FED2E3201C465",hash_generated_method="8DD0927B2454292A063335F6E08625C5") final synchronized void _sendSubnegotiation(int subn[]) throws IOException {  if (debug) {    System.err.println("SEND SUBNEGOTIATION: ");    if (subn != null) {      for (int ii=0; ii < subn.length; ii++) {        System.err.println("subn[" + ii + "]="+ subn[ii]);      }    }  }  if (subn != null) {    byte byteresp[]=new byte[subn.length];    for (int ii=0; ii < subn.length; ii++) {      byteresp[ii]=(byte)subn[ii];    }    _output_.write(_COMMAND_SB);    _output_.write(byteresp);    _output_.write(_COMMAND_SE);    _output_.flush();  }}  }
class C{  public void close(){  this.isClosed=true;  try {    for (    ElectionContext context : electionContexts.values()) {      try {        context.close();      } catch (      Exception e) {        log.error("Error closing overseer",e);      }    }  }  finally {    try {      try {        overseer.close();      } catch (      Exception e) {        log.error("Error closing overseer",e);      }    }  finally {      try {        try {          zkStateReader.close();        } catch (        Exception e) {          log.error("Error closing zkStateReader",e);        }      }  finally {        try {          zkClient.close();        } catch (        Exception e) {          log.error("Error closing zkClient",e);        }      }    }  }}  }
class C{  public XYSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){  super(key);  this.data=new java.util.ArrayList();  this.autoSort=autoSort;  this.allowDuplicateXValues=allowDuplicateXValues;  this.minX=Double.NaN;  this.maxX=Double.NaN;  this.minY=Double.NaN;  this.maxY=Double.NaN;}  }
class C{  public void assertException(RuntimeException exception,Runnable expression,String message){  TestUtils.assertException(exception,expression,message);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  public void testDynDateSortMissingFirst() throws Exception {  checkSortMissingFirst("dyn_datedv_missingfirst","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public static long fieldsToDay(int year,int month,int dom){  int y=year - 1;  long julian=365 * y + floorDivide(y,4) + (JULIAN_1_CE - 3) + floorDivide(y,400) - floorDivide(y,100) + 2 + DAYS_BEFORE[month + (isLeapYear(year) ? 12 : 0)] + dom;  return julian - JULIAN_1970_CE;}  }
class C{  public static ArrayList<CiFunction> extractFunctions(File file) throws FileNotFoundException, IllegalArgumentException {  if (!FileExtractor.isPHPFile(file)) {    throw new IllegalArgumentException(String.format("%s is not a .php file\n",file.getAbsolutePath()));  }  ArrayList<CiFunction> retval=new ArrayList<CiFunction>();  TokenSequence<PHPTokenId> tokenSeq=getTokensFromFile(file);  if (tokenSeq != null) {    while (tokenSeq.moveNext()) {      Token token=tokenSeq.token();      if (token.id().equals(PHPTokenId.PHP_FUNCTION)) {        int backCount=1;        boolean isPublic=true;        while (tokenSeq.movePrevious()) {          PHPTokenId id=tokenSeq.token().id();          if (!id.equals(PHPTokenId.WHITESPACE)) {            if (id.equals(PHPTokenId.PHP_PROTECTED) || id.equals(PHPTokenId.PHP_PRIVATE)) {              isPublic=false;            }            break;          }          backCount++;        }        for (int i=0; i < backCount; i++) {          tokenSeq.moveNext();        }        if (isPublic) {          String funcName=null;          while (tokenSeq.moveNext()) {            if (tokenSeq.token().id().equals(PHPTokenId.PHP_STRING)) {              funcName=tokenSeq.token().text().toString();              break;            }          }          if (funcName != null) {            StringBuilder stringBuilder=new StringBuilder();            while (tokenSeq.moveNext()) {              if (tokenSeq.token().text().equals("(")) {                break;              }            }            int count=1;            while (tokenSeq.moveNext()) {              if (tokenSeq.token().text().equals(")")) {                count--;              } else               if (tokenSeq.token().text().equals("(")) {                count++;              }              if (count == 0) {                break;              } else {                stringBuilder=stringBuilder.append(tokenSeq.token().text());              }            }            Vector<CiParameter> params=parseParameterString(stringBuilder.toString());            CiFunction func=new CiFunction(funcName,params);            retval.add(func);          }        }      }    }  }  return retval;}  }
class C{  public Method findFactoryMethod(Class<?>... expArgTypes){  for (  AnnotatedMethod am : _classInfo.getStaticMethods()) {    if (isFactoryMethod(am)) {      Class<?> actualArgType=am.getParameterClass(0);      for (      Class<?> expArgType : expArgTypes) {        if (actualArgType.isAssignableFrom(expArgType)) {          return am.getAnnotated();        }      }    }  }  return null;}  }
class C{  private void initValues(GLSurfaceView mGlSurfaceView){  mWidth=mGlSurfaceView.getWidth();  mHeight=mGlSurfaceView.getHeight();}  }
class C{  BarcodeRow(int width){  this.row=new byte[width];  currentLocation=0;}  }
class C{  public static void validateSteppedPrice(VOSteppedPrice steppedPrice) throws ValidationException {  if (steppedPrice == null) {    throw new IllegalArgumentException("Input value is null");  }  if (steppedPrice.getLimit() != null) {    BLValidator.isPositiveAndNonZeroNumber(FIELD_NAME_LIMIT,steppedPrice.getLimit().longValue());  }  BLValidator.isNonNegativeNumber(FIELD_NAME_PRICE,steppedPrice.getPrice());  BLValidator.isValidPriceScale(FIELD_NAME_PRICE,steppedPrice.getPrice());}  }
class C{  public T caseMoreCode_(MoreCode_ object){  return null;}  }
class C{  public PlatformCache withExpiryPolicy(final long create,final long update,final long access){  IgniteCache cache0=rawCache.withExpiryPolicy(new InteropExpiryPolicy(create,update,access));  return copy(cache0,keepBinary);}  }
class C{  public boolean intersectsBox(AABB box){  Vec3D t=box.sub(this);  return MathUtils.abs(t.x) <= (extent.x + box.extent.x) && MathUtils.abs(t.y) <= (extent.y + box.extent.y) && MathUtils.abs(t.z) <= (extent.z + box.extent.z);}  }
class C{  protected void checkRow(int row){  if (row < 0 || row >= rows)   throw new IndexOutOfBoundsException("Attempted to access " + toStringShort() + " at row="+ row);}  }
class C{  public int next() throws IOException {  tagOffset=offset;  tag=read();  length=read();  if (length != 0x80) {    if ((length & 0x80) != 0) {      int numOctets=length & 0x7F;      if (numOctets > 5) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }      length=read();      for (int i=1; i < numOctets; i++) {        int ch=read();        length=(length << 8) + ch;      }      if (length > 0xFFFFFF) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }    }  } else {    length=INDEFINIT_LENGTH;  }  contentOffset=offset;  return tag;}  }
class C{  public void checkLoadScript(){  throw se;}  }
class C{  private void addDumpFiles(String[] files){  for (int i=0; i < files.length; i++) {    try {      dumpCounter=1;      addDumpStream(new FileInputStream(files[i]),files[i],true);    } catch (    FileNotFoundException ex) {      JOptionPane.showMessageDialog(this.getRootPane(),"Error opening " + ex.getMessage() + ".","Error opening file",JOptionPane.ERROR_MESSAGE);    }  }}  }
class C{  public static SortClause asc(String item){  return new SortClause(item,ORDER.asc);}  }
class C{  private static KafkaSpout createKafkaSpout(String zookeeperUrl,String sensorType,SpoutConfig.Offset offset,EnumMap<SpoutConfigOptions,Object> kafkaSpoutConfigOptions,SensorParserConfig parserConfig){  String inputTopic=parserConfig.getSensorTopic() != null ? parserConfig.getSensorTopic() : sensorType;  SpoutConfig spoutConfig=new SpoutConfig(new ZkHosts(zookeeperUrl),inputTopic,"",inputTopic).from(offset);  SpoutConfigOptions.configure(spoutConfig,kafkaSpoutConfigOptions);  return new KafkaSpout(spoutConfig);}  }
class C{  public void checkLastTagWas(final int value) throws InvalidProtocolBufferException {  if (lastTag != value) {    throw InvalidProtocolBufferException.invalidEndTag();  }}  }
class C{  public NodeListModel(Object nodes){  Object node=nodes;  if (nodes instanceof Collection) {    this.nodes=new ArrayList((Collection)nodes);    node=this.nodes.isEmpty() ? null : this.nodes.get(0);  } else   if (nodes != null) {    this.nodes=Collections.singletonList(nodes);  } else {    throw new IllegalArgumentException("nodes == null");  }  if (DOM_NODE_CLASS != null && DOM_NODE_CLASS.isInstance(node)) {    navigator=DOM_NAVIGATOR;  } else   if (DOM4J_NODE_CLASS != null && DOM4J_NODE_CLASS.isInstance(node)) {    navigator=DOM4J_NAVIGATOR;  } else {    navigator=JDOM_NAVIGATOR;  }  namespaces=createNamespaces();}  }
class C{  public void init(MyPerfContext context){  logger.info("Initialize InstanceStatesManager");  File root=new File(new File(this.rootPath),STORAGE_DIR);  if (!root.exists())   root.mkdirs();  File objFile=new File(root,OBJ_FILE_NAME);  if (objFile.exists()) {    logger.info("Load saved status");    Map<Integer,InstanceStates> savedState=readObject(objFile);    if (savedState != null) {      for (      Map.Entry<Integer,InstanceStates> e : savedState.entrySet())       this.statesMap.put(e.getKey(),e.getValue());    }  }  for (  Map.Entry<String,DBGroupInfo> e : context.getDbInfoManager().getClusters().entrySet()) {    for (    DBInstanceInfo dbinfo : e.getValue().getInstances()) {      if (!this.statesMap.containsKey(dbinfo.getDbid()))       this.statesMap.put(dbinfo.getDbid(),new InstanceStates());    }  }  logger.info("Initialized InstanceStatesManager");}  }
class C{  public void startTicker(){  startTicker(getUIManager().getLookAndFeel().getTickerSpeed(),true);}  }
class C{  public SSLSocketFactory sslSocketFactory(){  return sslSocketFactory;}  }
class C{  LayoutControlPanel(ButtonDemo demo){  this.demo=demo;  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  setAlignmentX(LEFT_ALIGNMENT);  setAlignmentY(TOP_ALIGNMENT);  JLabel l;  absolutePositions=true;  textPosition=new DirectionPanel(true,"E",new TextPositionListener());  labelAlignment=new DirectionPanel(true,"C",new LabelAlignmentListener());  for (int i=0; i < demo.getCurrentControls().size(); i++) {    Component c=(Component)demo.getCurrentControls().elementAt(i);    setPosition(c,RIGHT,CENTER);    setAlignment(c,CENTER,CENTER);  }  l=N9ComponentFactory.createLabel_style4(demo.getString("LayoutControlPanel.textposition_label"));  add(l);  add(textPosition);  add(Box.createRigidArea(new Dimension(1,33)));  l=N9ComponentFactory.createLabel_style4(demo.getString("LayoutControlPanel.contentalignment_label"));  add(l);  add(labelAlignment);  add(Box.createGlue());}  }
class C{  public Vertex(double x,double y,double z,double u,double v){  this(new Vector3D(x,y,z),new Vector2D(u,v));}  }
class C{  public synchronized Integer findVersionById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<TradestrategyLite> query=builder.createQuery(TradestrategyLite.class);    Root<TradestrategyLite> from=query.from(TradestrategyLite.class);    CriteriaQuery<TradestrategyLite> select=query.multiselect(from.get("idTradeStrategy"),from.get("version"));    Predicate predicate=builder.equal(from.get("idTradeStrategy"),id);    query.where(predicate);    TypedQuery<TradestrategyLite> typedQuery=entityManager.createQuery(select);    List<TradestrategyLite> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0).getVersion();    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void testRejectCatalogTableDDL() throws ReplicatorException, InterruptedException {  CatalogDataFilter tcf=new CatalogDataFilter();  tcf.setTungstenSchema("tungsten_foo");  filterHelper.setFilter(tcf);  verifyStmtIgnore(filterHelper,0,null,"CREATE TABLE tungsten_foo.consistency (db CHAR(64) NOT NULL, tbl CHAR(64) NOT NULL, id NUMBER NOT NULL, " + "row_offset NUMBER NOT NULL, row_limit NUMBER NOT NULL, this_crc CHAR(40), this_cnt NUMBER, " + "master_crc CHAR(40), master_cnt NUMBER, ts TIMESTAMP, method CHAR(32), PRIMARY KEY (db, tbl, id))");  verifyStmtIgnore(filterHelper,0,null,"create table tungsten_foo.heartbeat (id int primary key, data varchar(25))");  verifyStmtIgnore(filterHelper,2,"tungsten_foo","ALTER TABLE TREP_COMMIT_SEQNO ADD my_new_col varchar2(45);");  verifyStmtIgnore(filterHelper,3,null,"DROP TABLE tungsten_foo.trep_shard");  verifyStmtIgnore(filterHelper,1,"tungsten_foo","drop table tungsten_foo.trep_SHARD_channel cascade");  filterHelper.done();}  }
class C{  public long convertMGRSToGeodetic(String MGRSString){  latitude=0;  longitude=0;  long error_code=checkZone(MGRSString);  if (error_code == MGRS_NO_ERROR) {    UTMCoord UTM=convertMGRSToUTM(MGRSString);    if (UTM != null) {      latitude=UTM.getLatitude().radians;      longitude=UTM.getLongitude().radians;    } else     error_code=MGRS_UTM_ERROR;  } else   if (error_code == MGRS_NOZONE_WARNING) {    UPSCoord UPS=convertMGRSToUPS(MGRSString);    if (UPS != null) {      latitude=UPS.getLatitude().radians;      longitude=UPS.getLongitude().radians;    } else     error_code=MGRS_UPS_ERROR;  }  return (error_code);}  }
class C{  @Override public boolean isCellEditable(int row,int column){  if (this.editable) {    if ((column == 0) || (column == 1)) {      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  synchronized public void sendInsteonSequence(InsteonSequence s,SerialListener l){  s.reset();  InsteonSequence.Command c;  while ((c=s.getCommand()) != null) {    SpecificMessage m;    if (c.isAddress()) {      m=SpecificMessage.getInsteonAddress(-1,-1,-1);    } else {      InsteonSequence.Function f=(InsteonSequence.Function)c;      m=SpecificMessage.getInsteonFunction(f.getAddressHigh(),f.getAddressMiddle(),f.getAddressLow(),f.getFunction(),f.getFlag(),f.getCommand1(),f.getCommand2());    }    sendSerialMessage(m,l);  }}  }
class C{  @Nullable public static List<String> extractFromScript(@NotNull VirtualFile script) throws IOException {  String text=VfsUtil.loadText(script);  Pattern pat=Pattern.compile("(?:^\\s*(['\"])(.*)(\\1),\\s*$)|(\\])",Pattern.MULTILINE);  final String bait_string="sys.path[0:0]";  int pos=text.indexOf(bait_string);  List<String> ret=null;  if (pos >= 0) {    pos+=bait_string.length();    Matcher scanner=pat.matcher(text);    while (scanner.find(pos)) {      String value=scanner.group(2);      if (value != null) {        if (ret == null) {          ret=new ArrayList<String>();        }        ret.add(value);        pos=scanner.end();      } else {        break;      }    }  }  return ret;}  }
class C{  public static void eachDirRecurse(final Path self,@ClosureParams(value=SimpleType.class,options="java.nio.file.Path") final Closure closure) throws IOException {  eachFileRecurse(self,FileType.DIRECTORIES,closure);}  }
class C{  public synchronized void config(String sourceClass,String sourceMethod,String msg,Object[] params){  LogRecord record=new LogRecord(Level.CONFIG,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  public static double expm1(double value){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.expm1(value) : Math.expm1(value);  }  if (Math.abs(value) < EXP_LO_DISTANCE_TO_ZERO) {    int i=(int)(value * EXP_LO_INDEXING);    double delta=value - i * (1.0 / EXP_LO_INDEXING);    return expLoPosTab[i + EXP_LO_TAB_MID_INDEX] * (expLoNegTab[i + EXP_LO_TAB_MID_INDEX] + delta * (1 + delta * (1.0 / 2 + delta * (1.0 / 6 + delta * (1.0 / 24 + delta * (1.0 / 120))))));  } else {    return FastMath.exp(value) - 1;  }}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (m_Train == null) {    throw new Exception("No training instance structure set!");  } else   if (m_Train.equalHeaders(instance.dataset()) == false) {    throw new Exception("Incompatible instance types\n" + m_Train.equalHeadersMsg(instance.dataset()));  }  if (!instance.classIsMissing()) {    m_NNSearch.update(instance);    m_Train.add(instance);  }}  }
class C{  public InstanceFieldRef newInstanceFieldRef(Value base,SootFieldRef f){  return new JInstanceFieldRef(base,f);}  }
class C{  public MergeXslt(File directory){  this.workingDirectory=directory;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ThisTarget.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == TypeDefiningElement.class) {switch (derivedFeatureID) {case N4JSPackage.OBJECT_LITERAL__DEFINED_TYPE:    return N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toXML(){  StringBuffer buffer=new StringBuffer();  buffer.append("<AxSfQueryField fldId='");  buffer.append(fldId);  buffer.append("' operator='");  buffer.append(operator);  buffer.append("'>");  buffer.append(value);  buffer.append("</AxSfQueryField>");  return buffer.toString();}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  int assign(Object obj){  if (size >= entries.length)   grow();  entries[size]=obj;  return size++;}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  ColorSpace cs=null;  ;  if (destCM == null) {    if (CSList == null) {      int nProfiles=profileList.length;      if (nProfiles == 0) {        throw new IllegalArgumentException("Destination ColorSpace is undefined");      }      ICC_Profile destProfile=profileList[nProfiles - 1];      cs=new ICC_ColorSpace(destProfile);    } else {      int nSpaces=CSList.length;      cs=CSList[nSpaces - 1];    }  }  return createCompatibleDestImage(src,destCM,cs);}  }
class C{  public static boolean isUnix(){  return unix;}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public RegionState(S id,Collection<Region<S,E>> regions,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions){  super(id,deferred,entryActions,exitActions,null,regions);}  }
class C{  public StringBuffer(int capacity){  super(capacity);}  }
class C{  public void appendRemainingName(Name name){  if (name != null) {    if (this.remainingName != null) {      try {        this.remainingName.addAll(name);      } catch (      InvalidNameException e) {      }    } else {      this.remainingName=(Name)(name.clone());    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static byte[] randomData(long sequenceNumber,int desiredLength){  StringBuilder sb=new StringBuilder();  sb.append("RECORD ");  sb.append(Long.toString(sequenceNumber));  sb.append(" ");  while (sb.length() < desiredLength - 1) {    sb.append(ALPHABET.charAt(RANDOM.nextInt(ALPHABET.length())));  }  sb.append("\n");  return sb.toString().getBytes(StandardCharsets.UTF_8);}  }
class C{  public PlotEntity(Shape area,Plot plot,String toolTipText){  this(area,plot,toolTipText,null);}  }
class C{  public BerEncoder(){  this(DEFAULT_BUFSIZE);}  }
class C{  public NotificationChain basicSetProvidedRuntimeLibraries(ProvidedRuntimeLibraries newProvidedRuntimeLibraries,NotificationChain msgs){  ProvidedRuntimeLibraries oldProvidedRuntimeLibraries=providedRuntimeLibraries;  providedRuntimeLibraries=newProvidedRuntimeLibraries;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DESCRIPTION__PROVIDED_RUNTIME_LIBRARIES,oldProvidedRuntimeLibraries,newProvidedRuntimeLibraries);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void drawChars(char data[],int offset,int length,int x,int y){  DebugGraphicsInfo info=info();  Font font=graphics.getFont();  if (debugLog()) {    info().log(toShortString() + " Drawing chars at " + new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawChars(data,offset,length,x,y);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawChars(data,offset,length,x,y);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawChars(data,offset,length,x,y);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public boolean provides(Class<?> type){  if (adapterMemo.getDisabled()) {    return false;  }  return false;}  }
class C{  public static final ArrayList readListXml(InputStream in) throws XmlPullParserException, IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (ArrayList)readValueXml(parser,new String[1]);}  }
class C{  private boolean more(){  if (nextOffset < 0) {    return false;  }  int skippedWS=0;  char c=0;  while (nextOffset + skippedWS < nextFencePost) {    c=s.charAt(nextOffset + skippedWS);    if (Character.isWhitespace(c)) {      skippedWS++;    } else {      break;    }  }  if (nextOffset + 1 + skippedWS < nextFencePost && c == '*' && s.charAt(skippedWS + nextOffset + 1) == '/') {    nextOffset=-1;    return false;  }  if (nextOffset + skippedWS < nextFencePost) {    return true;  }  nextOffset=-1;  return false;}  }
class C{  public static void deleteDirectoryRecursively(Context context,File f,Boolean onlyContent) throws IOException {  if (f.isDirectory()) {    for (    File c : f.listFiles()) {      deleteDirectoryRecursively(context,c,false);    }  }  if (!onlyContent) {    if (!f.delete()) {      throw new IOException("Failed to delete file: " + f);    }    context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,Uri.parse("file://" + f.getAbsolutePath())));  }}  }
class C{  private Metric filter(Metric metric){  if (tags.isEmpty()) {    return metric;  }  final String host=metric.getHost() != null ? metric.getHost() : this.host;  final Map<String,String> mergedTags=Maps.newHashMap(tags);  mergedTags.putAll(metric.getTags());  final Set<String> mergedRiemannTags=Sets.newHashSet(riemannTags);  mergedRiemannTags.addAll(metric.getRiemannTags());  final Date time=metric.getTime() != null ? metric.getTime() : new Date();  return new Metric(metric.getKey(),metric.getValue(),time,host,mergedRiemannTags,mergedTags,metric.getProc());}  }
class C{  private static DateValue[] allMonthsInYear(DateValue start){  return monthsInYear(start,1);}  }
class C{  @Override protected void parseURL(URL url,String spec,int start,int end){  if (end < start) {    return;  }  String parseString="";  if (start < end) {    parseString=spec.substring(start,end).replace('\\','/');  }  super.parseURL(url,parseString,0,parseString.length());}  }
class C{  public void addSample(Assignment sample){  samples.add(sample);  discreteCache=null;  continuousCache=null;  variables.addAll(sample.getVariables());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public Encrypted(Object object,byte[] key) throws Exception {  this.encrypted=encrypt(Serializer.getInstance().serialize(object),key);}  }
class C{  public SphereRegionParser(Element element) throws RegionException {  String originValue=element.getAttributeValue("origin");  if (originValue == null) {    throw new MissingRegionAttributeException("origin",element);  }  origin=Numbers.getVector(originValue);  if (origin == null) {    throw new InvalidRegionAttributeException("origin",element);  }  String radiusValue=element.getAttributeValue("radius");  if (radiusValue == null) {    throw new MissingRegionAttributeException("radius",element);  }  if (!Numbers.isDecimal(radiusValue)) {    throw new InvalidRegionAttributeException("radius",element);  }  radius=Numbers.parseDouble(radiusValue);}  }
class C{  public void onKernalStop(boolean cancel){}  }
class C{  @Override public void messageReceived(IoSession session,Object message) throws Exception {  String str=message.toString();  if (str.trim().equalsIgnoreCase("quit")) {    session.close(true);    return;  }  Date date=new Date();  session.write(date.toString());  System.out.println("Message written...");}  }
class C{  public XSTR(){  this(seedUniquifier() ^ System.nanoTime());}  }
class C{  public static boolean isEdgeListItem(AccessibilityNodeInfoCompat node,TraversalStrategy traversalStrategy){  return isEdgeListItem(node,0,null,traversalStrategy);}  }
class C{  void removeNode(BinarySearchTreeNode<E> node){  boolean isLeftChild=node.isLeftChild();  if (node.left != null && node.right != null) {    BinarySearchTreeNode<E> min=this.getMinimum(node.right);    if (min != node.right) {      min.parent.left=min.right;      if (min.right != null) {        min.right.parent=min.parent;      }      min.right=node.right;    }    if (node.right != null)     node.right.parent=min;    if (node.left != null)     node.left.parent=min;    if (node == this.root) {      this.root=min;    } else     if (isLeftChild) {      node.parent.left=min;    } else {      node.parent.right=min;    }    min.left=node.left;    min.parent=node.parent;    if (this.selfBalancing)     this.balanceTree(min.parent);  } else   if (node.left != null) {    if (node == this.root) {      this.root=node.left;    } else     if (isLeftChild) {      node.parent.left=node.left;    } else {      node.parent.right=node.left;    }    if (node.left != null) {      node.left.parent=node.parent;    }  } else   if (node.right != null) {    if (node == this.root) {      this.root=node.right;    } else     if (isLeftChild) {      node.parent.left=node.right;    } else {      node.parent.right=node.right;    }    if (node.right != null) {      node.right.parent=node.parent;    }  } else {    if (node == this.root) {      this.root=null;    } else     if (isLeftChild) {      node.parent.left=null;    } else {      node.parent.right=null;    }  }  this.size--;}  }
class C{  public InputStream openClassfile(String classname){  String cname=classname.replace('.','/') + ".class";  ClassLoader cl=(ClassLoader)clref.get();  if (cl == null)   return null; else   return cl.getResourceAsStream(cname);}  }
class C{  public void fromAngleNormalAxis(float angle,Vector3f axis){  float fCos=FastMath.cos(angle);  float fSin=FastMath.sin(angle);  float fOneMinusCos=((float)1.0) - fCos;  float fX2=axis.x * axis.x;  float fY2=axis.y * axis.y;  float fZ2=axis.z * axis.z;  float fXYM=axis.x * axis.y * fOneMinusCos;  float fXZM=axis.x * axis.z * fOneMinusCos;  float fYZM=axis.y * axis.z * fOneMinusCos;  float fXSin=axis.x * fSin;  float fYSin=axis.y * fSin;  float fZSin=axis.z * fSin;  m00=fX2 * fOneMinusCos + fCos;  m01=fXYM - fZSin;  m02=fXZM + fYSin;  m10=fXYM + fZSin;  m11=fY2 * fOneMinusCos + fCos;  m12=fYZM - fXSin;  m20=fXZM - fYSin;  m21=fYZM + fXSin;  m22=fZ2 * fOneMinusCos + fCos;}  }
class C{  public WrongPredictionCondition(ExampleSet exampleSet,String parameterString){  if (exampleSet.getAttributes().getLabel() == null) {    throw new IllegalArgumentException("FalsePredictionCondition needs an example set with label attribute!");  }  if (exampleSet.getAttributes().getPredictedLabel() == null) {    throw new IllegalArgumentException("FalsePredictionCondition needs an example set with predicted label attribute!");  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private static String fromHtmlEntity(String str){  Character ch=map.get(str);  return (ch != null) ? ch.toString() : str;}  }
class C{  public static final double slugsToKilograms(double slugs){  return slugs * SLUG_TO_KILOGRAM;}  }
class C{  public static void append(Appendable out,Object object) throws IOException {  if (object instanceof String) {    out.append((String)object);  } else   if (object instanceof Object[]) {    out.append(toArrayString((Object[])object));  } else   if (object instanceof Map) {    out.append(toMapString((Map)object));  } else   if (object instanceof Collection) {    out.append(toListString((Collection)object));  } else   if (object instanceof Writable) {    Writable writable=(Writable)object;    StringWriter stringWriter=new StringWriter();    writable.writeTo(stringWriter);    out.append(stringWriter.toString());  } else   if (object instanceof InputStream || object instanceof Reader) {    Reader reader;    if (object instanceof InputStream) {      reader=new InputStreamReader((InputStream)object);    } else {      reader=(Reader)object;    }    char[] chars=new char[8192];    int i;    while ((i=reader.read(chars)) != -1) {      for (int j=0; j < i; j++) {        out.append(chars[j]);      }    }    reader.close();  } else {    out.append(toString(object));  }}  }
class C{  public static <T extends FlyweightPrototype<T>>T copy(final T prototype){  return prototype != null ? prototype.copy() : null;}  }
class C{  private static void execute(String dmlScriptStr,String fnameOptConfig,Map<String,String> argVals,String[] allArgs,boolean parsePyDML) throws ParseException, IOException, DMLRuntimeException, LanguageException, HopsException, LopsException {  printStartExecInfo(dmlScriptStr);  DMLConfig dmlconf=DMLConfig.readConfigurationFile(fnameOptConfig);  ConfigurationManager.setGlobalConfig(dmlconf);  CompilerConfig cconf=OptimizerUtils.constructCompilerConfig(dmlconf);  ConfigurationManager.setGlobalConfig(cconf);  LOG.debug("\nDML config: \n" + dmlconf.getConfigInfo());  if (dmlconf.getBooleanValue(DMLConfig.YARN_APPMASTER)) {    DMLAppMasterUtils.setupConfigRemoteMaxMemory(dmlconf);  }  Statistics.startCompileTimer();  AParserWrapper parser=AParserWrapper.createParser(parsePyDML);  DMLProgram prog=parser.parse(DML_FILE_PATH_ANTLR_PARSER,dmlScriptStr,argVals);  DMLTranslator dmlt=new DMLTranslator(prog);  dmlt.liveVariableAnalysis(prog);  dmlt.validateParseTree(prog);  dmlt.constructHops(prog);  if (LOG.isDebugEnabled()) {    LOG.debug("\n********************** HOPS DAG (Before Rewrite) *******************");    dmlt.printHops(prog);    DMLTranslator.resetHopsDAGVisitStatus(prog);  }  dmlt.rewriteHopsDAG(prog);  if (LOG.isDebugEnabled()) {    LOG.debug("\n********************** HOPS DAG (After Rewrite) *******************");    dmlt.printHops(prog);    DMLTranslator.resetHopsDAGVisitStatus(prog);    LOG.debug("\n********************** OPTIMIZER *******************\n" + "Level = " + OptimizerUtils.getOptLevel() + "\n"+ "Available Memory = "+ ((double)InfrastructureAnalyzer.getLocalMaxMemory() / 1024 / 1024)+ " MB"+ "\n"+ "Memory Budget = "+ ((double)OptimizerUtils.getLocalMemBudget() / 1024 / 1024)+ " MB"+ "\n");  }  dmlt.constructLops(prog);  if (LOG.isDebugEnabled()) {    LOG.debug("\n********************** LOPS DAG *******************");    dmlt.printLops(prog);    dmlt.resetLopsDAGVisitStatus(prog);  }  Program rtprog=prog.getRuntimeProgram(dmlconf);  if (OptimizerUtils.isOptLevel(OptimizationLevel.O4_GLOBAL_TIME_MEMORY)) {    LOG.warn("Optimization level '" + OptimizationLevel.O4_GLOBAL_TIME_MEMORY + "' "+ "is still in experimental state and not intended for production use.");    rtprog=GlobalOptimizerWrapper.optimizeProgram(prog,rtprog);  }  if (dmlconf.getBooleanValue(DMLConfig.YARN_APPMASTER)) {    if (!isActiveAM() && DMLYarnClientProxy.launchDMLYarnAppmaster(dmlScriptStr,dmlconf,allArgs,rtprog))     return;    if (isActiveAM())     DMLAppMasterUtils.setupProgramMappingRemoteMaxMemory(rtprog);  }  ExplainCounts counts=Explain.countDistributedOperations(rtprog);  Statistics.resetNoOfCompiledJobs(counts.numJobs);  if (EXPLAIN != ExplainType.NONE) {    LOG.info("EXPLAIN (" + EXPLAIN.toString() + "):\n"+ Explain.explainMemoryBudget(counts)+ "\n"+ Explain.explainDegreeOfParallelism(counts)+ Explain.explain(prog,rtprog,EXPLAIN));  }  Statistics.stopCompileTimer();  Statistics.startRunTimer();  ExecutionContext ec=null;  try {    initHadoopExecution(dmlconf);    ec=ExecutionContextFactory.createContext(rtprog);    rtprog.execute(ec);  }  finally {    if (DMLScript.USE_ACCELERATOR && ec != null) {      ec.destroyGPUContext();    }    if (ec != null && ec instanceof SparkExecutionContext) {      ((SparkExecutionContext)ec).close();    }    Statistics.stopRunTimer();    LOG.info(Statistics.display());    LOG.info("END DML run " + getDateTime());    cleanupHadoopExecution(dmlconf);  }}  }
class C{  public boolean wouldHaveBeenAKaboom(){  return getBaseKind() == NO_KABOOM_NN;}  }
class C{  public boolean browserHasBack(PeerComponent browserPeer){  return ((SEBrowserComponent)browserPeer).hasBack();}  }
class C{  public ProjectSelection(List<Project> projects){  super(new JFrame(),true);  initComponents();  setLocationRelativeTo(null);  this.projects=projects;  jComboBox1.removeAllItems();  for (Iterator<Project> it=projects.iterator(); it.hasNext(); ) {    Project project=it.next();    ProjectInformation info=project.getLookup().lookup(ProjectInformation.class);    jComboBox1.addItem(info.getName());  }}  }
class C{  public void remove(T object){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.remove(object);    } else {      mObjects.remove(object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public StorageCenterAPIException(String message){  super(message);}  }
class C{  public boolean started(){  return state == ShardRoutingState.STARTED;}  }
class C{  void storeProperties(NamedBean t,Element elem){  java.util.Set<String> s=t.getPropertyKeys();  if (s.size() == 0) {    return;  }  Element ret=new Element("properties");  elem.addContent(ret);  for (  String key : s) {    Object value=t.getProperty(key);    Element p=new Element("property");    ret.addContent(p);    p.addContent(new Element("key").setText(key));    if (value != null) {      p.addContent(new Element("value").setAttribute("class",value.getClass().getName()).setText(value.toString()));    }  }}  }
class C{  public IsA(final String type){  setType(type);}  }
class C{  protected DoubleMatrix1D like1D(int size,int zero,int stride){  throw new InternalError();}  }
class C{  public static Object callMethod(Object obj,String methodName,Object... args){  try {    return findMethodBestMatch(obj.getClass(),methodName,args).invoke(obj,args);  } catch (  IllegalAccessException e) {    DexposedBridge.log(e);    throw new IllegalAccessError(e.getMessage());  }catch (  IllegalArgumentException e) {    throw e;  }catch (  InvocationTargetException e) {    throw new InvocationTargetError(e.getCause());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.118 -0400",hash_original_method="C1FC5B201D56EA47798B278DAD9B56A2",hash_generated_method="922B2E0468B96AD4E0BA173F4EE13A5B") void runBluetooth(){  autoConnect();  long ident=Binder.clearCallingIdentity();  try {    mBatteryStats.noteBluetoothOn();  } catch (  RemoteException e) {    Log.e(TAG,"",e);  } finally {    Binder.restoreCallingIdentity(ident);  }}  }
class C{  public AffineTransformer(AffineTransform transform){  if (transform != null)   this.transform=transform;}  }
class C{  public static void fadeIn(View v){  if (v == null)   return;  v.startAnimation(fadeInAnimation(500,v));}  }
class C{  public void mkdir(String dir){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.mkdir"),dir);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());}  }
class C{  public void printAdjacencies(){  log.info("");  log.info("Adjacencies for block " + this.getDisplayName());  log.info("Neighbour, Direction, mutual, relationship, metric");  for (int i=0; i < neighbours.size(); i++) {    log.info(neighbours.get(i).getBlock().getDisplayName() + ", " + Path.decodeDirection(neighbours.get(i).getDirection())+ ", "+ neighbours.get(i).isMutual()+ ", "+ decodePacketFlow(neighbours.get(i).getPacketFlow())+ ", "+ neighbours.get(i).getMetric());  }}  }
class C{  public static <K,V>ImmutableSetMultimap<K,V> of(K k1,V v1){  ImmutableSetMultimap.Builder<K,V> builder=ImmutableSetMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  public int resumeDownload(long... ids){  initResumeMethod();  if (resumeDownload == null) {    return -1;  }  try {    return ((Integer)resumeDownload.invoke(downloadManager,ids)).intValue();  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  public String parameterToString(Object param){  if (param == null) {    return "";  } else   if (param instanceof Date) {    return formatDate((Date)param);  } else   if (param instanceof Collection) {    StringBuilder b=new StringBuilder();    for (    Object o : (Collection)param) {      if (b.length() > 0) {        b.append(",");      }      b.append(String.valueOf(o));    }    return b.toString();  } else {    return String.valueOf(param);  }}  }
class C{  public boolean enableDescriptorNotification(BluetoothGattDescriptor descriptor,BleDescriptorCallback bleCallback){  handleDescriptorNotificationCallback(bleCallback);  return setDescriptorNotification(getBluetoothGatt(),descriptor,true);}  }
class C{  protected int clusterProcessedInstance(Instance instance){  double minDist=Double.MAX_VALUE;  int bestCluster=0;  for (int i=0; i < m_NumClusters; i++) {    double dist=distance(instance,m_ClusterCentroids.instance(i));    if (dist < minDist) {      minDist=dist;      bestCluster=i;    }  }  return bestCluster;}  }
class C{  public void testManagingDeletes() throws Exception {  for (long ver=1010; ver < 1020; ver++) {    for (    String id : new String[]{"aaa","bbb","ccc","ddd"}) {      assertU(adoc("id",id,"name","name_" + id,"my_version_l","" + ver));    }  }  assertU(adoc("id","aaa","name","name_aaa","my_version_l","1030"));  assertU(commit());  assertJQ(req("q","*:*","fq","live_b:true"),"/response/numFound==4");  assertJQ(req("q","id:aaa","fq","live_b:true","fl","id,my_version_l"),"/response/numFound==1","/response/docs==[{'id':'aaa','my_version_l':1030}]}");  deleteAndGetVersion("aaa",params("del_version","1031"));  assertU(commit());  assertJQ(req("q","*:*","fq","live_b:true"),"/response/numFound==3");  assertJQ(req("q","id:aaa","fq","live_b:true"),"/response/numFound==0");  assertJQ(req("q","id:aaa","fq","live_b:false","fq","timestamp_tdt:[* TO *]","fl","id,live_b,my_version_l"),"/response/numFound==1","/response/docs==[{'id':'aaa','my_version_l':1031,'live_b':false}]}");  assertU(adoc("id","aaa","name","XX","my_version_l","1025"));  assertU(commit());  assertJQ(req("q","id:aaa","fq","live_b:true"),"/response/numFound==0");  assertU(delQ("+live_b:false"));  assertU(commit());  assertU(adoc("id","aaa","name","aaa","my_version_l","7"));  assertU(commit());  assertJQ(req("q","id:aaa","fq","live_b:true","fl","id,live_b,my_version_l"),"/response/numFound==1","/response/docs==[{'id':'aaa','my_version_l':7,'live_b':true}]}");}  }
class C{  public boolean isInDefaultEventSet(){  return inDefaultEventSet;}  }
class C{  public boolean reweightExamples(ExampleSet exampleSet,int posIndex,int coveredSubset) throws OperatorException {  Iterator<Example> reader=exampleSet.iterator();  Attribute timesCoveredAttrib=null;  if (this.additive) {    timesCoveredAttrib=exampleSet.getAttributes().get(SDRulesetInduction.TIMES_COVERED);  }  double sumPosWeight=0;  double sumNegWeight=0;  while (reader.hasNext()) {    Example example=reader.next();    double weight=example.getWeight();    int label=((int)example.getLabel());    if (label == posIndex) {      int predicted=((int)example.getPredictedLabel());      if (predicted == coveredSubset) {        if (this.additive == true) {          int timesCovered=((int)example.getValue(timesCoveredAttrib)) + 1;          weight=this.reweightAdd(weight,timesCovered);          example.setValue(timesCoveredAttrib,timesCovered);        } else {          weight=this.reweightMult(weight);        }        example.setWeight(weight);      }      sumPosWeight+=weight;    } else {      sumNegWeight+=weight;    }  }  double ratio=sumPosWeight / sumNegWeight;  if (Tools.isNotEqual(ratio,1)) {    reader=exampleSet.iterator();    while (reader.hasNext()) {      Example example=reader.next();      if ((int)(example.getLabel()) != posIndex) {        example.setWeight(example.getWeight() * ratio);      }    }  }  return true;}  }
class C{  protected static FontUIResource _getUserTextFont(){  if (userFont == null) {    try {      userFont=new FontUIResource(Font.getFont("swing.plaf.metal.userFont",new Font(FONT_DEFAULT,Font.PLAIN,FONT_SIZE)));    } catch (    Exception e) {      userFont=new FontUIResource(FONT_DEFAULT,Font.PLAIN,FONT_SIZE);    }  }  return userFont;}  }
class C{  public static RuntimeException throwInternalError(String s){  RuntimeException e=new RuntimeException(s);  DbException.traceThrowable(e);  throw e;}  }
class C{  public static URI toURI(String location) throws URISyntaxException {  return new URI(StringUtils.replace(location," ","%20"));}  }
class C{  public void processReference(TraceLocal trace){  if (cleared)   return;  ObjectReference newRef=trace.getForwardedReferent(ref);  if (Trace.isEnabled(Item.REFERENCES)) {    Clock.stop();    Trace.trace(Item.REFERENCES,"Forwarded reference %x: %s reference (%s -> %s)",id,semantics,ObjectModel.getString(ref),ObjectModel.getString(newRef));    Clock.start();  }  ref=newRef;}  }
class C{  @Override protected SystemMemberBridgeServerImpl createSystemMemberBridgeServer(AdminBridgeServer bridge) throws AdminException {  SystemMemberBridgeServerJmxImpl managedSystemMemberBridgeServer=null;synchronized (this.managedCacheServerResourcesMap) {    SystemMemberBridgeServerJmxImpl managedCacheServerResource=managedCacheServerResourcesMap.get(bridge.getId());    if (managedCacheServerResource != null) {      managedSystemMemberBridgeServer=managedCacheServerResource;    } else {      managedSystemMemberBridgeServer=new SystemMemberBridgeServerJmxImpl(this,bridge);      managedCacheServerResourcesMap.put(bridge.getId(),managedSystemMemberBridgeServer);    }  }  return managedSystemMemberBridgeServer;}  }
class C{  public ServiceInfo browseService(String path){  return client.getURI(ServiceInfo.class,catalogPath(path));}  }
class C{  public AbstractViewAction(Application app,@Nullable View view){  this.app=app;  this.view=view;  this.enabled=true;  app.addPropertyChangeListener(new WeakPropertyChangeListener(applicationListener));  if (view != null) {    view.addPropertyChangeListener(viewListener);  }}  }
class C{  public String transform(List series){  StringBuffer xml=new StringBuffer("<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>");  xml.append("<Series>");  for (int i=0; i < series.size(); i++) {    InfoSerie serie=(InfoSerie)series.get(i);    xml.append("<Serie>");    xml.append("<Id_Serie>").append(serie.getId() != null ? Constants.addCData(serie.getId()) : "").append("</Id_Serie>");    xml.append("<Cod_Referencia>").append(serie.getCodigo() != null ? Constants.addCData(serie.getCodigo()) : "").append("</Cod_Referencia>");    xml.append("<Titulo>").append(Constants.addCData(serie.getTitulo())).append("</Titulo>");    xml.append("</Serie>");  }  xml.append("</Series>");  return xml.toString();}  }
class C{  public static final void removeAllDownloadsByPackage(Context context,String notification_package,String notification_class){  context.getContentResolver().delete(Impl.CONTENT_URI,QUERY_WHERE_CLAUSE,new String[]{notification_package,notification_class});}  }
class C{  public static void yield(){  model.yield();}  }
class C{  public static Ignite start(String springCfgPath,@Nullable String gridName,@Nullable GridSpringResourceContext springCtx,@Nullable ClassLoader ldr) throws IgniteCheckedException {  URL url=U.resolveSpringUrl(springCfgPath);  return start(url,gridName,springCtx,ldr);}  }
class C{  public MicroPipelineResource(final MicroPipelineManager microPipelineManager) throws RequiredInputMissingException {  if (microPipelineManager == null)   throw new RequiredInputMissingException("Missing required micro pipeline manager instance");  this.microPipelineManager=microPipelineManager;}  }
class C{  @Override public Instances kNearestNeighbours(Instance target,int k) throws Exception {  if (m_Stats != null) {    m_Stats.searchStart();  }  CoverTree querytree=new CoverTree();  Instances insts=new Instances(m_Instances,0);  insts.add(target);  querytree.setInstances(insts);  Stack<NeighborList> result=new Stack<NeighborList>();  batch_nearest_neighbor(k,this.m_Root,querytree.m_Root,result);  if (m_Stats != null) {    m_Stats.searchFinish();  }  insts=new Instances(m_Instances,0);  NeighborNode node=result.element(0).getFirst();  m_DistanceList=new double[result.element(0).currentLength()];  int i=0;  while (node != null) {    insts.add(node.m_Instance);    m_DistanceList[i]=node.m_Distance;    i++;    node=node.m_Next;  }  return insts;}  }
class C{  @Override public void onTurnReached(final int currentTurn){  respawn();  if (creatures.size() == maximum) {    respawning=false;  } else {    SingletonRepository.getTurnNotifier().notifyInTurns(calculateNextRespawnTurn(),this);  }}  }
class C{  Type attribBase(JCTree tree,Env<AttrContext> env,boolean classExpected,boolean interfaceExpected,boolean checkExtensible){  Type t=tree.type != null ? tree.type : attribType(tree,env);  return checkBase(t,tree,env,classExpected,interfaceExpected,checkExtensible);}  }
class C{  public void validateArchivedS3Files(List<StorageFile> expectedStorageFiles,List<S3ObjectSummary> actualS3Files,String storageName,BusinessObjectDataKey businessObjectDataKey){  validateS3Files(expectedStorageFiles,actualS3Files,storageName,businessObjectDataKey,"archived");}  }
class C{  public boolean checkValidity(){  Matcher matcher=sValidityPattern.matcher(fieldName);  isValid=matcher.find();  return isValid;}  }
class C{  public ThresholdFilter(){  this(127);}  }
class C{  public long readGranuleOfLastPage(ExtractorInput input) throws IOException, InterruptedException {  Assertions.checkArgument(input.getLength() != C.LENGTH_UNBOUNDED);  OggUtil.skipToNextPage(input);  pageHeader.reset();  while ((pageHeader.type & 0x04) != 0x04 && input.getPosition() < input.getLength()) {    OggUtil.populatePageHeader(input,pageHeader,headerArray,false);    input.skipFully(pageHeader.headerSize + pageHeader.bodySize);  }  return pageHeader.granulePosition;}  }
class C{  public TimestampToken generateTimestampToken(final TimestampType timestampType,final XAdESSignatureParameters signatureParameters,final byte[] references){  if (timestampType == null) {    throw new NullPointerException();  }  if (signatureParameters == null) {    throw new NullPointerException();  }  final TimestampParameters contentTimestampParameters=signatureParameters.getContentTimestampParameters();  if (contentTimestampParameters == null) {    throw new NullPointerException();  }  final DigestAlgorithm digestAlgorithm=contentTimestampParameters.getDigestAlgorithm();  if (digestAlgorithm == null) {    throw new NullPointerException();  }  byte[] digest=DSSUtils.digest(digestAlgorithm,references);  if (LOG.isTraceEnabled()) {    LOG.trace("Bytes to digest : [" + new String(references) + "]");    LOG.trace("Digest to timestamp: " + Base64.encodeBase64String(digest));  }  final TimeStampToken timeStampResponse=tspSource.getTimeStampResponse(digestAlgorithm,digest);  final TimestampToken token=new TimestampToken(timeStampResponse,timestampType,certificatePool);  token.setCanonicalizationMethod(contentTimestampParameters.getCanonicalizationMethod());  if (TimestampType.INDIVIDUAL_DATA_OBJECTS_TIMESTAMP.equals(timestampType)) {    addTimestampTokenIncludes(signatureParameters.getReferences(),token);  }  return token;}  }
class C{  @Override protected void resetEditorFrom(DLangRunDubConfiguration config){  comboModule.fillModules(config.getProject(),DLangModuleType.getInstance());  comboModule.setSelectedModule(config.getConfigurationModule().getModule());  cbRunAfterBuild.setSelected(config.isRunAfterBuild());  cbVerbose.setSelected(config.isVerbose());  cbQuiet.setSelected(config.isQuiet());  pathWorkingDir.setText(config.getWorkingDir());  textParameters.setText(config.getAdditionalParams());  Map<String,String> envVars=config.getEnvVars();  if (envVars != null) {    envVariables.setEnvs(config.getEnvVars());  }}  }
class C{  public boolean isDynazoomAvailable(String userAgent){  if (this.defaultMaster || this.isEmpty())   return false;  MuninNode node=getChildren().get(0);  if (node == null)   return false;  MuninPlugin plugin=node.getPlugin(0);  return plugin != null && isDynazoomAvailable(plugin,userAgent);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public Date saveValue(CreateAutoTimestamp pojoValue){  return firstNonNull(pojoValue.getTimestamp(),ofy().getTransactionTime()).toDate();}  }
class C{  public void curve(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4){  beginShape();  curveVertex(x1,y1);  curveVertex(x2,y2);  curveVertex(x3,y3);  curveVertex(x4,y4);  endShape();}  }
class C{  public boolean isFullyConfirmed(){  return getTargetQty().compareTo(getConfirmedQty()) == 0;}  }
class C{  public static void closeBufferedReader(BufferedReader stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing BufferedReader." + e);    }  }}  }
class C{  public Set<String> keySet(){  HashSet<String> set=new HashSet<String>();  set.addAll(container.keySet());  set.addAll(cache.keySet());  return set;}  }
class C{  public int read(byte[] buffer,int offset,int length) throws IOException {  log.finest("random-read(0x" + Long.toHexString(getFilePointer()) + ","+ length+ ")");  return _file.read(buffer,offset,length);}  }
class C{  public boolean isChanged(){  return m_change;}  }
class C{  private void addToContent(final String name,final byte[] byteContents){  Iterator<TransferContent> it=contents.iterator();  while (it.hasNext()) {    if (name.equals(it.next().name)) {      logger.info("Replacing old '" + name + "' layer.");      it.remove();    }  }  final TransferContent content=new TransferContent();  content.name=name;  content.cacheable=true;  logger.debug("Layer timestamp: " + Integer.toString(content.timestamp));  content.data=byteContents;  content.timestamp=CRC.cmpCRC(content.data);  contents.add(content);}  }
class C{  @SuppressWarnings("unchecked") protected Object convertToString(Class type,Object value){  if (value instanceof Date) {    DateFormat df=new SimpleDateFormat(DateUtil.getDatePattern());    if (value instanceof Timestamp) {      df=new SimpleDateFormat(DateUtil.getDateTimePattern());    }    try {      return df.format(value);    } catch (    Exception e) {      throw new ConversionException("Error converting Date to String");    }  } else {    return value.toString();  }}  }
class C{  public Task<FileShareRestRep> deleteShareACL(URI id,String shareName){  return deleteTask(getShareACLsUrl(),id,shareName);}  }
class C{  @Override public void run(){  while (true) {    Controller[] controllers=ControllerEnvironment.getDefaultEnvironment().getControllers();    if (controllers.length == 0) {      try {        Thread.sleep(1000);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        return;      }      continue;    }    for (int i=0; i < controllers.length; i++) {      controllers[i].poll();      EventQueue queue=controllers[i].getEventQueue();      Event event=new Event();      while (queue.getNextEvent(event)) {        Component comp=event.getComponent();        float value=event.getValue();        if (log.isDebugEnabled()) {          StringBuffer buffer=new StringBuffer("Name [");          buffer.append(controllers[i].getName());          buffer.append("] Component [");          buffer.append(comp.getName()).append("] changed to ");          if (comp.isAnalog()) {            buffer.append(value);          } else {            if (value == 1.0f) {              buffer.append("On");            } else {              buffer.append("Off");            }          }          log.debug(new String(buffer));        }        new Report(controllers[i],comp,value);      }    }    try {      Thread.sleep(20);    } catch (    InterruptedException e) {      return;    }  }}  }
class C{  public IndexOutOfBoundsException(){}  }
class C{  @Override public boolean match(SimEvent ev){  int src=ev.getSource();  for (  int id : ids) {    if (src == id) {      return true;    }  }  return false;}  }
class C{  private StreamWriter newStreamWriter(String stream,ExpectedVersion version){  return new StreamWriter(eventstore,stream,version);}  }
class C{  public void updateFrameId(int val){  if (val <= 0 || val > 0xff) {    throw new IllegalArgumentException("invalid frame id");  }  this.sequentialFrameId=val;}  }
class C{  public static Vehicles createVehicles(TransitSchedule schedule){  log.info("Creating vehicles from schedule...");  Vehicles vehicles=VehicleUtils.createVehiclesContainer();  VehiclesFactory vf=vehicles.getFactory();  Map<String,VehicleType> vehicleTypes=new HashMap<>();  long vehId=0;  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      if (!vehicleTypes.containsKey(route.getTransportMode())) {        Id<VehicleType> vehicleTypeId=Id.create(route.getTransportMode(),VehicleType.class);        VehicleType vehicleType=vf.createVehicleType(vehicleTypeId);        VehicleCapacity capacity=new VehicleCapacityImpl();        capacity.setSeats(50);        capacity.setStandingRoom(0);        vehicleType.setCapacity(capacity);        vehicles.addVehicleType(vehicleType);        vehicleTypes.put(route.getTransportMode(),vehicleType);      }      VehicleType vehicleType=vehicleTypes.get(route.getTransportMode());      for (      Departure departure : route.getDepartures().values()) {        Vehicle veh=vf.createVehicle(Id.create("veh_" + Long.toString(vehId++) + "_"+ route.getTransportMode(),Vehicle.class),vehicleType);        vehicles.addVehicle(veh);        departure.setVehicleId(veh.getId());      }    }  }  return vehicles;}  }
class C{  public void dispose(){  if (image != null) {    Display.impl.releaseImage(image);  }  image=null;}  }
class C{  private ODGFigure readCustomShapeElement(IXMLElement elem) throws IOException {  String styleName=elem.getAttribute("style-name",DRAWING_NAMESPACE,null);  Map<AttributeKey,Object> a=styles.getAttributes(styleName,"graphic");  Rectangle2D.Double figureBounds=new Rectangle2D.Double(toLength(elem.getAttribute("x",SVG_NAMESPACE,"0"),1),toLength(elem.getAttribute("y",SVG_NAMESPACE,"0"),1),toLength(elem.getAttribute("width",SVG_NAMESPACE,"0"),1),toLength(elem.getAttribute("height",SVG_NAMESPACE,"0"),1));  ODGFigure figure=null;  for (  IXMLElement child : elem.getChildrenNamed("enhanced-geometry",DRAWING_NAMESPACE)) {    figure=readEnhancedGeometryElement(child,a,figureBounds);  }  return figure;}  }
class C{  private boolean matchStrings(String pattern,String str,Map<String,String> uriTemplateVariables){  return getStringMatcher(pattern).matchStrings(str,uriTemplateVariables);}  }
class C{  public _DeleteOptions(final _DeleteOptions_Flag[] flags){  super(flags);}  }
class C{  public Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public static TestCaseLocalSearch selectTestCaseLocalSearch(){  final double nextDouble=Randomness.nextDouble();  boolean useDSE=nextDouble < Properties.DSE_PROBABILITY;  if (useDSE) {    return new DSETestCaseLocalSearch();  } else {    return new AVMTestCaseLocalSearch();  }}  }
class C{  private static void invokePrint(String method,String tag,String message,Throwable e){  if (SDebug)   try {    Class<android.util.Log> logClass=android.util.Log.class;    Method logMethod=logClass.getMethod(method,String.class,String.class,Throwable.class);    logMethod.setAccessible(true);    logMethod.invoke(null,tag,message,e);  } catch (  Exception e1) {    System.out.println(tag + ": " + message);  }}  }
class C{  public void subtract(final double operand){  this.value-=operand;}  }
class C{  public XmlDocument(){  m_domDoc=null;}  }
class C{  public JobAttributes(){  setCopiesToDefault();  setDefaultSelection(DefaultSelectionType.ALL);  setDestination(DestinationType.PRINTER);  setDialog(DialogType.NATIVE);  setMaxPage(Integer.MAX_VALUE);  setMinPage(1);  setMultipleDocumentHandlingToDefault();  setSidesToDefault();}  }
class C{  public synchronized T fetch(Object key){  return get(key);}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public static ApplicationExceptionBeanE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ApplicationExceptionBeanE object=new ApplicationExceptionBeanE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","ApplicationExceptionBean").equals(reader.getName())) {          object.setApplicationExceptionBean(ApplicationExceptionBean.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  Collection list=(Collection)source;  for (  Object item : list) {    if (item != null) {      OutputNode child=node.getChild(parent);      if (!isOverridden(child,item)) {        root.write(child,item);      }    }  }}  }
class C{  synchronized void checkStateAndTransmit() throws BKTransmitException, WriteException, InvalidEnvelopedEntryException, LockingException {  checkStateBeforeTransmit();  transmit();}  }
class C{  private boolean isPersistedRole(OrganizationRoleType... role){  return isRoleAvailable(operatorSelectOrgBean.getOrganization(),role);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void line(double x0,double y0,double x1,double y1){  offscreen.draw(new Line2D.Double(scaleX(x0),scaleY(y0),scaleX(x1),scaleY(y1)));  draw();}  }
class C{  @Override protected ReturnValue parseCommandLineArguments(String[] args,ApplicationContext applicationContext){  ReturnValue returnValue=super.parseCommandLineArguments(args,applicationContext);  if (returnValue != null) {    return returnValue;  }  try {    maxRetryAttempts=argParser.getIntegerValue(maxRetryAttemptsOpt,MAX_RETRY_ATTEMPTS_DEFAULT,MAX_RETRY_ATTEMPTS_MIN,MAX_RETRY_ATTEMPTS_MAX);    retryDelaySecs=argParser.getIntegerValue(retryDelaySecsOpt,RETRY_DELAY_SECS_DEFAULT,RETRY_DELAY_SECS_MIN,RETRY_DELAY_SECS_MAX);  } catch (  Exception ex) {    LOGGER.error("Error parsing command line arguments: " + ex.getMessage() + "\n"+ argParser.getUsageInformation());    return ReturnValue.FAILURE;  }  return null;}  }
class C{  public static Response createConnectionBindResponse() throws IllegalArgumentException {  Response connectSuccessResponse=new Response();  connectSuccessResponse.setMessageType(Message.CONNECTION_BIND_SUCCESS_RESPONSE);  return connectSuccessResponse;}  }
class C{  public void catchException(final Label start,final Label end,final Type exception){  Label doCatch=new Label();  if (exception == null) {    mv.visitTryCatchBlock(start,end,doCatch,null);  } else {    mv.visitTryCatchBlock(start,end,doCatch,exception.getInternalName());  }  mark(doCatch);}  }
class C{  @Override public int graphType(){  if (m_Classifier instanceof Drawable) {    return ((Drawable)m_Classifier).graphType();  } else {    return Drawable.NOT_DRAWABLE;  }}  }
class C{  public synchronized boolean initThematicIndex(String path){  try {    if (thematicIndex == null) {      String thematicIndexName=getTileThematicFileName();      if (thematicIndexName != null) {        thematicIndex=new DcwThematicIndex(path + thematicIndexName,byteorder);      }    }  } catch (  FormatException fe) {    if (Debug.debugging("vpf.FormatException")) {      Debug.output("FeatureClassInfo.initTI: " + fe.getClass() + " "+ fe.getMessage());    }    return false;  }  return (thematicIndex != null);}  }
class C{  public JVMMetrics showJVMMetrics(String member) throws Exception {  MemberMXBean bean=validateMember(member);  return bean.showJVMMetrics();}  }
class C{  @NotNull public static PsiElement resolveToTheTop(@NotNull final PsiElement elementToResolve){  PsiElement currentElement=elementToResolve;  while (true) {    final PsiReference reference=currentElement.getReference();    if (reference == null) {      break;    }    final PsiElement resolve=reference.resolve();    if ((resolve == null) || resolve.equals(currentElement) || !inSameFile(resolve,currentElement)) {      break;    }    currentElement=resolve;  }  return currentElement;}  }
class C{  public void startConsensus(int cid,byte[] value){  communication.send(this.controller.getCurrentViewAcceptors(),factory.createPropose(cid,0,value));}  }
class C{  public long show_bits(int n){  long tmp;  int re_index=this.index;  long re_cache=0;  int pos=buffer_offset + (re_index >> 3);  re_cache=buffer[pos + 0];  re_cache=(re_cache << 8) | buffer[pos + 1];  re_cache=(re_cache << 8) | buffer[pos + 2];  re_cache=(re_cache << 8) | buffer[pos + 3];  re_cache=(re_cache << (re_index & 0x07));  re_cache=re_cache & 0xffffffffl;  tmp=(((re_cache)) >> (32 - (n)));  return tmp;}  }
class C{  public boolean isEndPos(MovePath path){  if (EntityMovementType.MOVE_ILLEGAL == movementType) {    return true;  }  if (path == null) {    return true;  }  Vector<MoveStep> steps=path.getStepVector();  boolean lastStep=true;  for (int i=steps.size() - 1; i >= 0; i--) {    MoveStep step=steps.get(i);    boolean stepMatch=this.equals(step);    if (lastStep) {      lastStep&=step.getMovementType(true) == EntityMovementType.MOVE_ILLEGAL;    }    if ((step.getMovementType(lastStep) != EntityMovementType.MOVE_ILLEGAL) && !stepMatch) {      return false;    } else     if (stepMatch) {      return true;    }  }  return false;}  }
class C{  public static int matchPathOne(String path,String[] patterns){  for (int i=0; i < patterns.length; i++) {    if (matchPath(path,patterns[i]) == true) {      return i;    }  }  return -1;}  }
class C{  public final void clear(){  final int bgR=(int)(this.backgroundCol >> 16);  final int bgG=(int)((this.backgroundCol >> 8) & 0xff);  final int bgB=(int)(this.backgroundCol & 0xff);  if (this.frame == null) {    final Graphics2D gr=this.image.createGraphics();    Color c=new Color(bgR,bgG,bgB);    gr.setBackground(c);    gr.clearRect(0,0,this.width,this.height);    gr.setColor(c);    gr.fillRect(0,0,this.width,this.height);  } else {    int p=0;    for (int i=0; i < width; i++) {      this.frame[p++]=(byte)bgR;      this.frame[p++]=(byte)bgG;      this.frame[p++]=(byte)bgB;    }    final int rw=width * 3;    for (int i=1; i < height; i++) {      System.arraycopy(this.frame,0,this.frame,i * rw,rw);    }  }}  }
class C{  public boolean isActive() throws UnknownHostException {  checkNodeStatusData();  return isActive;}  }
class C{  @Override public String generateToolTipFragment(String toolTipText){  return " title=\"" + ImageMapUtilities.htmlEscape(toolTipText) + "\" alt=\"\"";}  }
class C{  protected final void fireIndexedPropertyChange(String propertyName,int index,Object oldValue,Object newValue){  PropertyChangeSupport aChangeSupport=this.changeSupport;  if (aChangeSupport == null) {    return;  }  aChangeSupport.fireIndexedPropertyChange(propertyName,index,oldValue,newValue);}  }
class C{  public static NbtOutputStream writeInflated(NbtTag tag,File file) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new InflaterOutputStream(new FileOutputStream(file,false)));  out.write(tag);  return out;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:06.974 -0500",hash_original_method="91FEA98D86997027CFAF7FA478DE35E9",hash_generated_method="60C95DD0E7EBC2810B285986FF80A9EA") private void formDidBlur(int nodePointer){  if (mWebView == null)   return;  Message.obtain(mWebView.mPrivateHandler,WebView.FORM_DID_BLUR,nodePointer,0).sendToTarget();}  }
class C{  public SQLTimeoutException(Throwable cause){  super(cause);}  }
class C{  public boolean isOdd(){  return isOdd(value);}  }
class C{  public final DD subtract(double y){  return add(-y);}  }
class C{  public static long parseBE4BytesAsUnsigned(byte[] data,int offset){  long value=((long)(data[offset + 0] & 0xFF) << 24) | ((long)(data[offset + 1] & 0xFF) << 16) | ((long)(data[offset + 2] & 0xFF) << 8)| ((long)(data[offset + 3] & 0xFF) << 0);  return value;}  }
class C{  public void removePage(){  long p=pos;  if (p == 0) {    removedInMemory=true;  }  map.removePage(p,memory);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node textNode;  Node retval;  Node refChild=null;  Document otherDoc;  doc=(Document)load("hc_staff",true);  otherDoc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=otherDoc.createTextNode("terday");{    boolean success=false;    try {      retval=titleAttr.insertBefore(textNode,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public static File downloadBitmapToFile(Context context,String urlString,String uniqueName){  final File cacheDir=ImageCache.getDiskCacheDir(context,uniqueName);  if (!cacheDir.exists()) {    cacheDir.mkdir();  }  if (BuildConfig.DEBUG) {    Log.d(TAG,"downloadBitmap - downloading - " + urlString);  }  HttpURLConnection urlConnection=null;  BufferedOutputStream out=null;  try {    final File tempFile=File.createTempFile("bitmap",null,cacheDir);    final URL url=new URL(urlString);    urlConnection=(HttpURLConnection)url.openConnection();    if (urlConnection.getResponseCode() != HttpURLConnection.HTTP_OK) {      return null;    }    final InputStream in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE_BYTES);    out=new BufferedOutputStream(new FileOutputStream(tempFile),IO_BUFFER_SIZE_BYTES);    int b;    while ((b=in.read()) != -1) {      out.write(b);    }    return tempFile;  } catch (  final IOException e) {    Log.e(TAG,"Error in downloadBitmap - " + e);  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    if (out != null) {      try {        out.close();      } catch (      final IOException e) {        Log.e(TAG,"Error in downloadBitmap - " + e);      }    }  }  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          if (p > 0) {            curv=(Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / Math.pow(p,1.5);            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static JVMStats.JVMStatsSample gatherStats(){  JVMStats.JVMStatsSample sample=new JVMStats.JVMStatsSample();  MemoryMXBean memory=ManagementFactory.getMemoryMXBean();  sample.heapAllocated=memory.getHeapMemoryUsage().getCommitted();  sample.heapUsed=memory.getHeapMemoryUsage().getUsed();  sample.heapMax=memory.getHeapMemoryUsage().getMax();  sample.nonHeapAllocated=memory.getNonHeapMemoryUsage().getCommitted();  sample.nonHeapUsed=memory.getNonHeapMemoryUsage().getUsed();  sample.nonHeapMax=memory.getNonHeapMemoryUsage().getMax();  sample.pendingFinalization=memory.getObjectPendingFinalizationCount();  ClassLoadingMXBean classloading=ManagementFactory.getClassLoadingMXBean();  sample.currentlyLoadedClasses=classloading.getLoadedClassCount();  sample.totalLoadedClasses=classloading.getTotalLoadedClassCount();  sample.unloadedClasses=classloading.getUnloadedClassCount();  RuntimeMXBean runtime=ManagementFactory.getRuntimeMXBean();  sample.jvmUptimeMillis=runtime.getUptime();  ThreadMXBean thread=ManagementFactory.getThreadMXBean();  sample.threadInfos=thread.dumpAllThreads(false,false);  List<GarbageCollectorMXBean> gcBeans=ManagementFactory.getGarbageCollectorMXBeans();  for (  GarbageCollectorMXBean gcBean : gcBeans) {    sample.collectionCount.add(gcBean.getCollectionCount());    sample.collectionTimeMillis.add(gcBean.getCollectionTime());  }  sample.currentSampleMicros=Utils.getNowMicrosUtc();  return sample;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isMissing(){  return missing;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void not(){  push(1);  math(XOR,Type.INT_TYPE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.655 -0500",hash_original_method="80E7DE8B78F72228CE1CBFCE791EFB84",hash_generated_method="B65E30465F363197B705A3C86C2FABCB") @Deprecated public void injectInsrumentation(Instrumentation instrumentation){  injectInstrumentation(instrumentation);}  }
class C{  private void populateProjects(){  projects=workItemClient.getProjects().getProjects();  projectCombo.add(Messages.getString("WorkItemPickerDialog.AnyProjectChoice"));  int initialSelectIx=0;  for (int i=0; i < projects.length; i++) {    projectCombo.add(projects[i].getName());    if (projects[i] == initialProject) {      initialSelectIx=(i + 1);    }  }  projectCombo.select(initialSelectIx);}  }
class C{  public void addMouseListener(MouseListener m){  bheader.addMouseListener(m);}  }
class C{  @Parameterized.Parameters public static Collection<Object[]> data(){  return Arrays.asList(new Object[][]{{"scss",OutputStyle.COMPRESSED},{"scss",OutputStyle.NESTED},{"sass",OutputStyle.COMPRESSED},{"sass",OutputStyle.NESTED}});}  }
class C{  public static boolean isValidIPv4(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ".";  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf('.',start)) > start) {    if (octets == 4) {      return false;    }    try {      octet=Integer.parseInt(temp.substring(start,pos));    } catch (    NumberFormatException ex) {      return false;    }    if (octet < 0 || octet > 255) {      return false;    }    start=pos + 1;    octets++;  }  return octets == 4;}  }
class C{  public KeyValuePair(final String name,final String value){  if (name == null) {    throw new IllegalArgumentException("Name may not be null");  }  this.key=name;  this.value=value;}  }
class C{  public int inverse(int a){  int d=(1 << degree) - 2;  return exp(a,d);}  }
class C{  public static String nullSafeToString(Object obj){  if (obj == null) {    return NULL_STRING;  }  if (obj instanceof String) {    return (String)obj;  }  if (obj instanceof Object[]) {    return nullSafeToString((Object[])obj);  }  if (obj instanceof boolean[]) {    return nullSafeToString((boolean[])obj);  }  if (obj instanceof byte[]) {    return nullSafeToString((byte[])obj);  }  if (obj instanceof char[]) {    return nullSafeToString((char[])obj);  }  if (obj instanceof double[]) {    return nullSafeToString((double[])obj);  }  if (obj instanceof float[]) {    return nullSafeToString((float[])obj);  }  if (obj instanceof int[]) {    return nullSafeToString((int[])obj);  }  if (obj instanceof long[]) {    return nullSafeToString((long[])obj);  }  if (obj instanceof short[]) {    return nullSafeToString((short[])obj);  }  String str=obj.toString();  return (str != null ? str : EMPTY_STRING);}  }
class C{  protected void sequence_OctalIntLiteral(ISerializationContext context,OctalIntLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getOctalIntLiteralAccess().getValueOCTAL_INTTerminalRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  public void close() throws IOException {  if (!closed) {    try {      finish();    }  finally {      out.close();      closed=true;    }  }}  }
class C{  public void addFirst(String seq){  queue=seq + queue.substring(pos);  pos=0;}  }
class C{  private ConditionTreeFlattener(){}  }
class C{  public static void logNormalPrioritySearchRequestOutcome(boolean isFailure){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchNormalPrioritySearchRequestStatus",isFailure ? REQUEST_FAILED : REQUEST_NOT_FAILED,REQUEST_BOUNDARY);}  }
class C{  private ValueLobDb(DataHandler handler,Reader in,long remaining) throws IOException {  this.type=Value.CLOB;  this.handler=handler;  this.small=null;  this.lobId=0;  this.hmac=null;  this.fileName=createTempLobFileName(handler);  this.tempFile=this.handler.openFile(fileName,"rw",false);  this.tempFile.autoDelete();  long tmpPrecision=0;  try (FileStoreOutputStream out=new FileStoreOutputStream(tempFile,null,null)){    char[] buff=new char[Constants.IO_BUFFER_SIZE];    while (true) {      int len=getBufferSize(this.handler,false,remaining);      len=IOUtils.readFully(in,buff,len);      if (len == 0) {        break;      }      byte[] data=new String(buff,0,len).getBytes("UTF-8");      out.write(data);      tmpPrecision+=len;    }  }   this.precision=tmpPrecision;}  }
class C{  public long putHourMinSec(long millis){  long hours=0, minutes=0, seconds=0;  hours=millis / (1000 * 60 * 60);  minutes=(millis - (hours * 1000 * 60* 60)) / (1000 * 60);  seconds=(millis - (hours * 1000 * 60* 60) - (minutes * 1000 * 60)) / 1000;  putByte((byte)hours);  putByte((byte)minutes);  putByte((byte)seconds);  return millis - millis % 1000;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.209 -0500",hash_original_method="5F145FC62F46FF5FAD786BED834DE8D5",hash_generated_method="296FEC93AA3A03604C3649376F898A7D") public final void lazySet(V newValue){  set(newValue);}  }
class C{  public String computeTable(){  StringBuilder sb=new StringBuilder();  sb.append(buildHeader());  sb.append("\n");  Iterator<Long> it=timings.keySet().iterator();  while (it.hasNext()) {    long n=it.next();    sb.append(buildRow(n));    sb.append("\n");  }  return sb.toString();}  }
class C{  public boolean login() throws LoginException {  sLog.debug("Performing db authentication ... ");  if (getCallbackHandler() == null)   throw new LoginException("Error: no CallbackHandler available ");  Callback[] callbacks=new Callback[2];  callbacks[0]=new NameCallback("User Name: ");  callbacks[1]=new PasswordCallback("Password: ",true);  try {    getCallbackHandler().handle(callbacks);    String n=((NameCallback)callbacks[0]).getName();    String p=String.valueOf(((PasswordCallback)callbacks[1]).getPassword());    HashMap userProps=new HashMap();    userProps.put("username",n);    userProps.put("password",p);    if (doAuthenticate(userProps))     return true;    sLog.debug("Db authentication failed ... ");    setAuthSucceeded(false);    return false;  } catch (  Exception ex) {    sLog.debug("Db authentication failed ... " + ex.getMessage(),ex);    setAuthSucceeded(false);    return false;  }}  }
class C{  public void addItem(String title,String value){  mItemMap.put(title,value);  mAdapter.add(title);}  }
class C{  private synchronized void switchCamera(){  if (LogUtils.isActive) {    Log.d(LOGTAG,"Switch camera");  }  closeCamera();  if (mOpenedCameraId.getValue() == CameraOptions.BACK.getValue()) {    mOpenedCameraId=CameraOptions.FRONT;  } else {    mOpenedCameraId=CameraOptions.BACK;  }  openCamera();}  }
class C{  DependencySpec createModuleDependency(ArtifactResult i,boolean forceExport){  if (JDK_MODULE_NAMES.contains(i.name()))   return JDK_DEPENDENCY;  final ModuleIdentifier mi=createModuleIdentifier(i);  final boolean export=forceExport || (i.importType() == ImportType.EXPORT);  return DependencySpec.createModuleDependencySpec(PathFilters.getMetaInfSubdirectoriesWithoutMetaInfFilter(),(export ? PathFilters.acceptAll() : PathFilters.rejectAll()),this,mi,i.importType() == ImportType.OPTIONAL);}  }
class C{  private void editRayAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxRay) {      SandboxRay ray=(SandboxRay)node.getUserObject();synchronized (Simulation.LOCK) {        SandboxRay nRay=EditRayDialog.show(ControlUtilities.getParentWindow(this),ray);        this.simulation.getRays().remove(ray);        this.simulation.getRays().add(nRay);        node.setUserObject(nRay);      }    }  }}  }
class C{  public DiffusionFilter(){  setMatrix(diffusionMatrix);}  }
class C{  JvmMemMgrPoolRelTableCache(JvmMemMgrPoolRelTableMetaImpl meta,long validity){  this.validity=validity;  this.meta=meta;}  }
class C{  protected synchronized void removeAttributeSetAt(int index){  int numAttrs=attrs.length;  AttributeSet[] newAttrs=new AttributeSet[numAttrs - 1];  if (numAttrs > 0) {    if (index == 0) {      System.arraycopy(attrs,1,newAttrs,0,numAttrs - 1);    } else     if (index < (numAttrs - 1)) {      System.arraycopy(attrs,0,newAttrs,0,index);      System.arraycopy(attrs,index + 1,newAttrs,index,numAttrs - index - 1);    } else {      System.arraycopy(attrs,0,newAttrs,0,numAttrs - 1);    }  }  attrs=newAttrs;}  }
class C{  public static float nextFloat(final float startInclusive,final float endInclusive){  Validate.isTrue(endInclusive >= startInclusive,"Start value must be smaller or equal to end value.");  Validate.isTrue(startInclusive >= 0,"Both range values must be non-negative.");  if (startInclusive == endInclusive) {    return startInclusive;  }  return startInclusive + ((endInclusive - startInclusive) * RANDOM.nextFloat());}  }
class C{  protected void addHostMetrics(){  addHostInfoMetrics();  addHostCPUMetrics();  addHostMemoryMetrics();  addHostDiskMetrics();}  }
class C{  protected void addContextToChild(BridgeContext ctx,Element e){  if (SVG_NAMESPACE_URI.equals(e.getNamespaceURI())) {    String ln=e.getLocalName();    if (ln.equals(SVG12Constants.SVG_FLOW_DIV_TAG) || ln.equals(SVG12Constants.SVG_FLOW_LINE_TAG) || ln.equals(SVG12Constants.SVG_FLOW_PARA_TAG)|| ln.equals(SVG12Constants.SVG_FLOW_SPAN_TAG)) {      ((SVGOMElement)e).setSVGContext(new FlowContentBridge(ctx,this,e));    }  }  Node child=getFirstChild(e);  while (child != null) {    if (child.getNodeType() == Node.ELEMENT_NODE) {      addContextToChild(ctx,(Element)child);    }    child=getNextSibling(child);  }}  }
class C{  public LongConverter(){  super(false);}  }
class C{  private void addKeybindSet(JPanel panel,String labelText,String commandID,KeyModifier defaultModifier,int defaultKeyValue){  addKeybindLabel(panel,labelText);  String buttonText=defaultModifier.toString() + " + " + KeyEvent.getKeyText(defaultKeyValue);  if (defaultKeyValue == -1)   buttonText="NONE";  JButton b=addKeybindButton(panel,buttonText);  KeybindSet kbs=new KeybindSet(b,commandID,defaultModifier,defaultKeyValue);  KeyboardHandler.keybindSetList.add(kbs);  setKeybindButtonText(kbs);  b.addActionListener(this.clickListener);  b.addKeyListener(this.rebindListener);  b.addFocusListener(focusListener);  b.setFocusable(false);  KeyboardHandler.defaultKeybindSetList.put(commandID,new KeybindSet(null,commandID,defaultModifier,defaultKeyValue));}  }
class C{  public synchronized void removeSchemaObject(Session session,SchemaObject obj){  int type=obj.getType();  if (type == DbObject.TABLE_OR_VIEW) {    Table table=(Table)obj;    if (table.isTemporary()) {      session.removeLocalTempTable(table);      return;    }  }  obj.getSchema().remove(obj);}  }
class C{  public ObjectMatrix3D make(int slices,int rows,int columns){  if (this == sparse)   return new SparseObjectMatrix3D(slices,rows,columns);  return new DenseObjectMatrix3D(slices,rows,columns);}  }
class C{  public THashSet(TObjectHashingStrategy<E> strategy){  super(strategy);}  }
class C{  private void doTokenizerTest(Tokenizer tokenizer,String sentence,String[] tokens,IntPair[] offsets){  System.out.println(sentence);  Pair<String[],IntPair[]> tokenize=tokenizer.tokenizeSentence(sentence);  assertEquals(tokens.length,tokenize.getFirst().length);  assertEquals(tokens.length,tokenize.getSecond().length);  for (int i=0; i < tokens.length; i++) {    assertEquals(tokens[i],tokenize.getFirst()[i]);    assertEquals(offsets[i],tokenize.getSecond()[i]);  }}  }
class C{  public Builder updateExternalId(String externalID){  this.externalId=externalID;  return this;}  }
class C{  private void loadOrgAccessAdd(ArrayList<OrgAccess> list,OrgAccess oa){  if (list.contains(oa))   return;  list.add(oa);  if (getAD_Tree_Org_ID() == 0)   return;  MOrg org=MOrg.get(getCtx(),oa.AD_Org_ID);  if (!org.isSummary())   return;  MTree_Base tree=MTree_Base.get(getCtx(),getAD_Tree_Org_ID(),get_TrxName());  String sql="SELECT AD_Client_ID, AD_Org_ID FROM AD_Org " + "WHERE IsActive='Y' AND AD_Org_ID IN (SELECT Node_ID FROM " + tree.getNodeTableName() + " WHERE AD_Tree_ID=? AND Parent_ID=? AND IsActive='Y')";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,tree.getAD_Tree_ID());    pstmt.setInt(2,org.getAD_Org_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      int AD_Client_ID=rs.getInt(1);      int AD_Org_ID=rs.getInt(2);      loadOrgAccessAdd(list,new OrgAccess(AD_Client_ID,AD_Org_ID,oa.readOnly));    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  public void updateBackgroundAsync(String url){  mBackgroundUrl=url;  if (null != mBackgroundTimer) {    mBackgroundTimer.cancel();  }  mBackgroundTimer=new Timer();  mBackgroundTimer.schedule(new UpdateBackgroundTask(),BACKGROUND_UPDATE_DELAY);}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true; else   if (!(o instanceof HashKey))   return false;  HashKey key=(HashKey)o;  byte[] hashA=_hash;  byte[] hashB=key._hash;  int len=hashA.length;  if (len != hashB.length)   return false;  for (int i=0; i < len; i++) {    if (hashA[i] != hashB[i])     return false;  }  return true;}  }
class C{  private void initialize(){  this.setContentPane(getJPanel());  this.pack();  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(406,193);  }  getConnPanel().passwordFocus();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Blade before(String path,RouteHandler handler){  routers.route(path,handler,HttpMethod.BEFORE);  return this;}  }
class C{  public String toString(){  return "DAT file " + levelDir.getAbsolutePath() + "/level.dat:\n"+ root;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (params == null) {    throw new NullPointerException();  }  if (this.source == null) {    throw new NullPointerException();  }}  }
class C{  public void testNextLongBounded2(){  for (long least=-86028121; least < MAX_LONG_BOUND; least+=982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      long f=ThreadLocalRandom.current().nextLong(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      long j;      while (i < NCALLS && (j=ThreadLocalRandom.current().nextLong(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public static void trace(final String message){  if (JQuantLib.logger != null) {    JQuantLib.logger.trace(message);  } else {    System.err.printf("TRACE: %s\n",message);  }}  }
class C{  @Override public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if ((access & Opcodes.ACC_FINAL) == Opcodes.ACC_FINAL) {    finalClasses.add(name.replace('/','.'));  }  super.visit(version,access & ~Opcodes.ACC_FINAL,name,signature,superName,interfaces);}  }
class C{  private static void testPowers(){  for (int i=-1074; i <= +1023; i++) {    double d=Math.scalb(1.0,i);    BigDecimal d_BD=new BigDecimal(d);    BigDecimal lowerBound=d_BD.subtract(new BigDecimal(Math.ulp(Math.nextUp(-d))).multiply(HALF));    BigDecimal upperBound=d_BD.add(new BigDecimal(Math.ulp(d)).multiply(HALF));    check(lowerBound.toString());    check(upperBound.toString());  }  check(new BigDecimal(Double.MAX_VALUE).add(new BigDecimal(Math.ulp(Double.MAX_VALUE)).multiply(HALF)).toString());}  }
class C{  public Substitution(){  map=new LinkedHashMap<>();  rawMap=new LinkedHashMap<>();}  }
class C{  public SVGCreateFromFileTool(ImageHolderFigure imagePrototype,CompositeFigure groupPrototype){  super(imagePrototype);  this.groupPrototype=groupPrototype;  this.imagePrototype=imagePrototype;}  }
class C{  @SuppressWarnings("unchecked") public StateMachineTestPlanStepBuilder expectStateExited(S... states){  this.expectStatesExited.addAll(Arrays.asList(states));  return this;}  }
class C{  static List<PatternLevel> readLevelResourceFile(InputStream stream){  List<PatternLevel> levels=null;  if (stream != null) {    try {      levels=configureClassLevels(stream);    } catch (    IOException e) {      System.err.println("IO exception reading the log properties file '" + LOCAL_LOG_PROPERTIES_FILE + "': "+ e);    } finally {      try {        stream.close();      } catch (      IOException e) {      }    }  }  return levels;}  }
class C{  public int hashCode(){  int total=0;  if (representationClass != null) {    total+=representationClass.hashCode();  }  if (mimeType != null) {    String primaryType=mimeType.getPrimaryType();    if (primaryType != null) {      total+=primaryType.hashCode();    }    if ("text".equals(primaryType)) {      if (DataTransferer.doesSubtypeSupportCharset(this) && representationClass != null && !isStandardTextRepresentationClass()) {        String charset=DataTransferer.canonicalName(getParameter("charset"));        if (charset != null) {          total+=charset.hashCode();        }      }      if ("html".equals(getSubType())) {        String document=this.getParameter("document");        if (document != null) {          total+=document.hashCode();        }      }    }  }  return total;}  }
class C{  protected String rebuildUserQuery(List<Clause> clauses,boolean lowercaseOperators){  StringBuilder sb=new StringBuilder();  for (int i=0; i < clauses.size(); i++) {    Clause clause=clauses.get(i);    String s=clause.raw;    if (lowercaseOperators && i > 0 && i + 1 < clauses.size()) {      if ("AND".equalsIgnoreCase(s)) {        s="AND";      } else       if ("OR".equalsIgnoreCase(s)) {        s="OR";      }    }    sb.append(s);    sb.append(' ');  }  return sb.toString();}  }
class C{  public ItemHit itemCode(String value){  setString(ITEM_CODE,value);  return this;}  }
class C{  public static boolean hasMultipleSites(){  boolean hasMultipleSites=false;  final String[] cmds={SYSTOOL_CMD,GET_VDCPROPS};  Exec.Result result=Exec.sudo(CMD_TIMEOUT,cmds);  if (!result.exitedNormally() || result.getExitValue() != 0) {    log.error("Failed to get vdc properties with errcode: {}, error: {}",result.getExitValue(),result.getStdError());    throw new IllegalStateException("Failed to get vdc properties");  }  String[] props=result.getStdOutput().split("\n");  for (  String s : props) {    String key=s.split(PropertyConstants.DELIMITER)[0];    String value=s.split(PropertyConstants.DELIMITER)[1];    if (!key.equals(VDCPROP_SITEIDS))     continue;    if (value.contains(",")) {      hasMultipleSites=true;      break;    }  }  return hasMultipleSites;}  }
class C{  @Override synchronized protected int next(final int bits){  int y;  if (mti >= N) {    int kk;    final int[] mt=this.m_mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=m_mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  return y >>> (32 - bits);}  }
class C{  public ChronoLocalDate create(int year,int month,int day,Chronology chronology){  return chronology.date(year,month,day);}  }
class C{  private void removeTooltipTextView(View tooltipTextView){  ViewGroup parentView=((ViewGroup)tooltipTextView.getParent());  parentView.removeView(tooltipTextView);}  }
class C{  public void unexpectedAttribute(String systemID,int lineNr,String elementName,String attributeName) throws XMLValidationException {  XMLUtil.errorUnexpectedAttribute(systemID,lineNr,elementName,attributeName);}  }
class C{  public boolean add(ObserveRelation relation){  if (relation == null)   throw new NullPointerException();  ObserveRelation previous=observeRelations.put(relation.getKey(),relation);  if (null != previous) {    previous.cancel();    return true;  }  return false;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x4F3D84D5,version=271) public int sceUsbCamSetBrightness(int brightness){  this.brightness=brightness;  return 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementwrongdocumenterr.class,args);}  }
class C{  public RemoteConnector(DialogueSystem system){  this.system=system;  try {    local=new ServerSocket(0);    new Thread(null).start();  } catch (  IOException e) {    throw new RuntimeException("cannot initialise remote connector: " + e);  }}  }
class C{  @Override protected boolean isHostOverUtilized(PowerContainerHost host){  addHistoryEntry(host,getUtilizationThreshold());  double totalRequestedMips=0;  for (  ContainerVm vm : host.getVmList()) {    totalRequestedMips+=vm.getCurrentRequestedTotalMips();  }  double utilization=totalRequestedMips / host.getTotalMips();  return utilization > getUtilizationThreshold();}  }
class C{  protected void onNewChannelCreated(Channel ch){}  }
class C{  JdkMarshallerOutputStreamWrapper(OutputStream out){  assert out != null;  this.out=out;}  }
class C{  public void updateSessionManagement(Boolean sessionManagement) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  scope.setAttribute("sessionmanagement",Caster.toString(sessionManagement,""));}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  private void writeJarPostResource(Element postResourceEl,String path){  postResourceEl.setAttribute("className",JAR_RESOURCE_SET);  postResourceEl.setAttribute("base",path.replace("&","&amp;"));}  }
class C{  public Matrix(double vals[],int m){  this.m=m;  n=(m != 0 ? vals.length / m : 0);  if (m * n != vals.length) {    throw new IllegalArgumentException("Array length must be a multiple of m.");  }  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=vals[i + j * m];    }  }}  }
class C{  @Override public Population createInitialPopulation(ExampleSet es) throws UndefinedParameterError {  this.generationsWOImp=getParameterAsInt(PARAMETER_GENERATIONS_WITHOUT_IMPROVAL);  this.maxGenerations=es.getAttributes().size();  Population initP=new Population();  double[] weights=new double[es.getAttributes().size()];  if (maxWeightIndex >= 0) {    weights[maxWeightIndex]=1.0d;  } else {    weights[0]=1.0d;  }  initP.add(new Individual(weights));  return initP;}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  if (eventName.compareTo("instance") == 0) {    if (!(m_ClassifierTemplate instanceof weka.classifiers.UpdateableClassifier)) {      if (m_log != null) {        String msg=statusMessagePrefix() + "WARNING: " + m_ClassifierTemplate.getClass().getName()+ " Is not an updateable classifier. This "+ "classifier will only be evaluated on incoming "+ "instance events and not trained on them.";        m_log.logMessage("[Classifier] " + msg);        m_log.statusMessage(msg);      }    }  }  if (eventName.equals("testSet") && m_listenees.containsKey("testSet") && m_log != null) {    if (!Utils.getDontShowDialog("weka.gui.beans.ClassifierMultipleTestSetConnections") && !java.awt.GraphicsEnvironment.isHeadless()) {      String msg="You have more than one incoming test set connection to \n" + "'" + getCustomName() + "'. In order for this setup to run properly\n"+ "and generate correct evaluation results you MUST execute the flow\n"+ "by launching start points sequentially (second play button). In order\n"+ "to specify the order you'd like the start points launched in you can\n"+ "set the name of each start point (right click on start point and select\n"+ "'Set name') to include a number prefix - e.g. '1: load my arff file'.";      JCheckBox dontShow=new JCheckBox("Do not show this message again");      Object[] stuff=new Object[2];      stuff[0]=msg;      stuff[1]=dontShow;      JOptionPane.showMessageDialog(null,stuff,"Classifier test connection",JOptionPane.OK_OPTION);      if (dontShow.isSelected()) {        try {          Utils.setDontShowDialog("weka.gui.beans.ClassifierMultipleTestSetConnections");        } catch (        Exception ex) {        }      }    }  }  if (connectionAllowed(eventName)) {    List<Object> listenee=m_listenees.get(eventName);    if (listenee == null) {      listenee=new ArrayList<Object>();      m_listenees.put(eventName,listenee);    }    listenee.add(source);  }}  }
class C{  public static boolean startsWithIgnoreCase(String s,String prefix){  final int pl=prefix.length();  if (s.length() < pl)   return false;  for (int i=0; i < pl; i++) {    char sc=s.charAt(i);    char pc=prefix.charAt(i);    if (sc != pc) {      sc=Character.toUpperCase(sc);      pc=Character.toUpperCase(pc);      if (sc != pc) {        sc=Character.toLowerCase(sc);        pc=Character.toLowerCase(pc);        if (sc != pc)         return false;      }    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.293 -0500",hash_original_method="85620320EA37710A8866ECA4B349D636",hash_generated_method="17B15A15CB497DC07A940E8E9144F966") public String debugDump(int indent){  int save=indentation;  indentation=indent;  String retval=this.debugDump();  indentation=save;  return retval;}  }
class C{  private NativeIterator(){}  }
class C{  public TrapUnitGraph(Body body){  super(body);  int size=unitChain.size();  if (Options.v().time())   Timers.v().graphTimer.start();  unitToSuccs=new HashMap(size * 2 + 1,0.7f);  unitToPreds=new HashMap(size * 2 + 1,0.7f);  buildUnexceptionalEdges(unitToSuccs,unitToPreds);  buildExceptionalEdges(unitToSuccs,unitToPreds);  makeMappedListsUnmodifiable(unitToSuccs);  makeMappedListsUnmodifiable(unitToPreds);  buildHeadsAndTails();  if (Options.v().time())   Timers.v().graphTimer.end();}  }
class C{  @Override public boolean isPagingUrl(String url){  if (mSuffixLen != 0 && !url.endsWith(mSuffix))   return false;  final int suffixStart=url.length() - mSuffixLen;  if (!url.startsWith(mPrefix))   return false;  if (mPlaceholderSegmentStart == suffixStart || (suffixStart == mPlaceholderSegmentStart - 1 && mUrlStr.charAt(suffixStart) == '/')) {    return true;  }  String diffPart=url.substring(mPlaceholderSegmentStart,suffixStart).toLowerCase();  if (sSlashOrHtmExtRegExp == null) {    sSlashOrHtmExtRegExp=RegExp.compile("^\\/|(.html?)$","i");  }  if (sSlashOrHtmExtRegExp.test(diffPart))   return true;  if (!url.regionMatches(mPlaceholderSegmentStart,mUrlStr,mPlaceholderSegmentStart,mPlaceholderStart - mPlaceholderSegmentStart)) {    return false;  }  return PageParameterDetector.isPlainNumber(url.substring(mPlaceholderStart,suffixStart));}  }
class C{  public void addObjectPartForAbsentKey(Object key,Object value,VersionTag version){  addPart(key,value,KEY_NOT_AT_SERVER,version);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("SHSAX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SHSAX");    translateAll(environment,instruction,"SHSAX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SHSUBADDX");    translateAll(environment,instruction,"SHSUBADDX",instructions);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.552 -0500",hash_original_method="BC527AFE730427BE036B66CE7C20403C",hash_generated_method="57901D9491D199549A641CDD99485838") public final long decrementAndGet(){  return value--;}  }
class C{  public NamespacedProperties(String prefix){  this(prefix,System.getProperties(),true);}  }
class C{  public void verifyAssertsAndReset(){  assertFalse("First failure: " + mFirstFailureStackTrace,mGotFailure);  assertTrue("Received no assertions during the test!",mGotSuccess);  mGotFailure=false;  mGotSuccess=false;  mFirstFailureStackTrace=null;}  }
class C{  boolean isNavigatable(int offset){  if (!getAllowsInvalid()) {    return (offset < getMaxLength() && !isLiteral(offset));  }  return true;}  }
class C{  public void addChildScope(Scope child){  if (childScopes == null) {    childScopes=new ArrayList<Scope>();  }  childScopes.add(child);  child.setParentScope(this);}  }
class C{  public void runAsync(String localName,ModelService service,Map<String,? extends Object> context,boolean persist) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  this.runAsync(localName,service,context,null,persist);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.844 -0500",hash_original_method="DB744ED9820BBBCA493477D061843B3C",hash_generated_method="41AD1FE5158B575E3C2B467EA63CC194") public static boolean isMethodTracingActive(){  return VMDebug.isMethodTracingActive();}  }
class C{  public static String toHexString(byte b){  byte[] ba=new byte[1];  ba[0]=b;  return toHexString(ba,0,ba.length);}  }
class C{  @Override public boolean isReadOnly(){  return (mSetter == null && mField == null);}  }
class C{  protected void createSetterMethod(ClassNode declaringClass,PropertyNode propertyNode,String setterName,Statement setterBlock){  MethodNode setter=new MethodNode(setterName,PropertyNodeUtils.adjustPropertyModifiersForMethod(propertyNode),ClassHelper.VOID_TYPE,params(param(propertyNode.getType(),"value")),ClassNode.EMPTY_ARRAY,setterBlock);  setter.setSynthetic(true);  declaringClass.addMethod(setter);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void addExtension(String extension,String MIMEType){  extToMIMEMap.put(extension,MIMEType);}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearBaseUrl(){  baseUrl=null;  fieldSetFlags()[0]=false;  return this;}  }
class C{  public static org.oscm.vo.VOPaymentInfo convertToApi(org.oscm.internal.vo.VOPaymentInfo oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOPaymentInfo newVO=new org.oscm.vo.VOPaymentInfo();  newVO.setAccountNumber(oldVO.getAccountNumber());  newVO.setId(oldVO.getId());  newVO.setKey(oldVO.getKey());  newVO.setPaymentType(convertToApi(oldVO.getPaymentType()));  newVO.setProviderName(oldVO.getProviderName());  newVO.setVersion(oldVO.getVersion());  return newVO;}  }
class C{  public Tasks<BlockSnapshotSessionRestRep> createForVolume(URI volumeId,SnapshotSessionCreateParam param){  return postTasks(param,getByVolumeUrl(),volumeId);}  }
class C{  private QuotaLineItem add(QuotaLineItem val1,QuotaLineItem val2){  return operate(OpCode.ADD,val1,val2);}  }
class C{  protected BCSChild createBCSChild(Object child,Object proxyPeer){  return new BCSSChild(child,proxyPeer);}  }
class C{  public MarkdownProcessor(){  listLevel=0;}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public ArrayList<Location> astarPath(HaitiFood world,Node start,Node goal){  if (start == null || goal == null) {    System.out.println("Error: invalid node provided to AStar");  }  HashMap<Node,AStarNodeWrapper> foundNodes=new HashMap<Node,AStarNodeWrapper>();  AStarNodeWrapper startNode=new AStarNodeWrapper(start);  AStarNodeWrapper goalNode=new AStarNodeWrapper(goal);  foundNodes.put(start,startNode);  foundNodes.put(goal,goalNode);  startNode.gx=0;  startNode.hx=heuristic(start,goal);  startNode.fx=heuristic(start,goal);  ArrayList<AStarNodeWrapper> closedSet=new ArrayList<AStarNodeWrapper>(), openSet=new ArrayList<AStarNodeWrapper>();  openSet.add(startNode);  while (openSet.size() > 0) {    AStarNodeWrapper x=findMin(openSet);    if (x.node == goal) {      return reconstructPath(goalNode);    }    openSet.remove(x);    closedSet.add(x);    for (    Edge l : x.node.links) {      Node n=(Node)l.from();      if (n == x.node) {        n=(Node)l.to();      }      AStarNodeWrapper nextNode;      if (foundNodes.containsKey(n)) {        nextNode=foundNodes.get(n);      } else {        nextNode=new AStarNodeWrapper(n);        foundNodes.put(n,nextNode);      }      if (closedSet.contains(nextNode)) {        continue;      }      double tentativeCost=x.gx + (Integer)l.info;      boolean better=false;      if (!openSet.contains(nextNode)) {        openSet.add(nextNode);        nextNode.hx=heuristic(n,goal);        better=true;      } else       if (tentativeCost < nextNode.gx) {        better=true;      }      if (better) {        nextNode.cameFrom=x;        nextNode.gx=tentativeCost;        nextNode.fx=nextNode.gx + nextNode.hx;      }    }  }  return null;}  }
class C{  public String globalInfo(){  return "Replaces all missing values for nominal and numeric attributes in a " + "dataset with the modes and means from the training data.";}  }
class C{  public boolean hasAlbumArtist(){  return hasExtension(AlbumArtist.class);}  }
class C{  public int size(){  return count.get();}  }
class C{  public void destroyDynamicRegion(String fullRegionName) throws CacheException {  if (!dynamicRegionList.containsKey(fullRegionName)) {    throw new RegionDestroyedException(LocalizedStrings.DynamicRegionFactory_DYNAMIC_REGION_0_HAS_NOT_BEEN_CREATED.toLocalizedString(fullRegionName),fullRegionName);  }  if (isClosed()) {    throw new IllegalStateException("Dynamic region factory is closed");  }  Region region=c.getRegion(fullRegionName);  if (region != null) {    DistributedMember mbr=getMember(null);    doBeforeRegionDestroyed(region,false,false,false,mbr);    region.localDestroyRegion();    destroyDynamicRegionImpl(fullRegionName);    doAfterRegionDestroyed(region,false,false,false,mbr);  } else {    destroyDynamicRegionImpl(fullRegionName);  }}  }
class C{  public String routing(){  return this.routing;}  }
class C{  public boolean containseEquivalentCoupling(final Coupling<?> toCheck){  for (  Coupling<?> coupling : getCouplings()) {    boolean consumersMatch=attributesMatch(coupling.getConsumer(),toCheck.getConsumer());    boolean producersMatch=attributesMatch(coupling.getProducer(),toCheck.getProducer());    if (consumersMatch && producersMatch) {      return true;    }  }  return false;}  }
class C{  public static void rotateM(double[] m,int mOffset,double a,double x,double y,double z){synchronized (sTemp) {    setRotateM(sTemp,0,a,x,y,z);    multiplyMM(sTemp,16,m,mOffset,sTemp,0);    System.arraycopy(sTemp,16,m,mOffset,16);  }}  }
class C{  public DLSequence(ASN1Encodable obj){  super(obj);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.HISTORY_ENTRY__INITIAL_STEP:    return basicSetInitialStep(null,msgs);case SexecPackage.HISTORY_ENTRY__HISTORY_STEP:  return basicSetHistoryStep(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean stringIsNullOrEmpty(@Nullable String string){  return string == null || string.isEmpty();}  }
class C{  static void blur(int[] srcPixels,int[] dstPixels,int width,int height,float[] kernel,int radius){  float a;  float r;  float g;  float b;  int ca;  int cr;  int cg;  int cb;  for (int y=0; y < height; y++) {    int index=y;    int offset=y * width;    for (int x=0; x < width; x++) {      a=r=g=b=0.0f;      for (int i=-radius; i <= radius; i++) {        int subOffset=x + i;        if (subOffset < 0 || subOffset >= width) {          subOffset=(x + width) % width;        }        int pixel=srcPixels[offset + subOffset];        float blurFactor=kernel[radius + i];        a+=blurFactor * ((pixel >> 24) & 0xFF);        r+=blurFactor * ((pixel >> 16) & 0xFF);        g+=blurFactor * ((pixel >> 8) & 0xFF);        b+=blurFactor * ((pixel) & 0xFF);      }      ca=(int)(a + 0.5f);      cr=(int)(r + 0.5f);      cg=(int)(g + 0.5f);      cb=(int)(b + 0.5f);      dstPixels[index]=((ca > 255 ? 255 : ca) << 24) | ((cr > 255 ? 255 : cr) << 16) | ((cg > 255 ? 255 : cg) << 8)| (cb > 255 ? 255 : cb);      index+=height;    }  }}  }
class C{  protected T createValue(Prolog engine){  return null;}  }
class C{  public DenseVector(int length){  if (length < 0)   throw new ArithmeticException("You can not have a negative dimension vector");  array=new double[length];  startIndex=0;  endIndex=array.length;}  }
class C{  @Override protected List refreshTicksHorizontal(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List result=new java.util.ArrayList();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  if (isAutoTickUnitSelection()) {    selectAutoTickUnit(g2,dataArea,edge);  }  double unit=getTickUnit().getSize();  double cycleBound=getCycleBound();  double currentTickValue=Math.ceil(cycleBound / unit) * unit;  double upperValue=getRange().getUpperBound();  boolean cycled=false;  boolean boundMapping=this.boundMappedToLastCycle;  this.boundMappedToLastCycle=false;  CycleBoundTick lastTick=null;  float lastX=0.0f;  if (upperValue == cycleBound) {    currentTickValue=calculateLowestVisibleTickValue();    cycled=true;    this.boundMappedToLastCycle=true;  }  while (currentTickValue <= upperValue) {    boolean cyclenow=false;    if ((currentTickValue + unit > upperValue) && !cycled) {      cyclenow=true;    }    double xx=valueToJava2D(currentTickValue,dataArea,edge);    String tickLabel;    NumberFormat formatter=getNumberFormatOverride();    if (formatter != null) {      tickLabel=formatter.format(currentTickValue);    } else {      tickLabel=getTickUnit().valueToString(currentTickValue);    }    float x=(float)xx;    TextAnchor anchor;    TextAnchor rotationAnchor;    double angle=0.0;    if (isVerticalTickLabels()) {      if (edge == RectangleEdge.TOP) {        angle=Math.PI / 2.0;      } else {        angle=-Math.PI / 2.0;      }      anchor=TextAnchor.CENTER_RIGHT;      if ((lastTick != null) && (lastX == x) && (currentTickValue != cycleBound)) {        anchor=isInverted() ? TextAnchor.TOP_RIGHT : TextAnchor.BOTTOM_RIGHT;        result.remove(result.size() - 1);        result.add(new CycleBoundTick(this.boundMappedToLastCycle,lastTick.getNumber(),lastTick.getText(),anchor,anchor,lastTick.getAngle()));        this.internalMarkerWhenTicksOverlap=true;        anchor=isInverted() ? TextAnchor.BOTTOM_RIGHT : TextAnchor.TOP_RIGHT;      }      rotationAnchor=anchor;    } else {      if (edge == RectangleEdge.TOP) {        anchor=TextAnchor.BOTTOM_CENTER;        if ((lastTick != null) && (lastX == x) && (currentTickValue != cycleBound)) {          anchor=isInverted() ? TextAnchor.BOTTOM_LEFT : TextAnchor.BOTTOM_RIGHT;          result.remove(result.size() - 1);          result.add(new CycleBoundTick(this.boundMappedToLastCycle,lastTick.getNumber(),lastTick.getText(),anchor,anchor,lastTick.getAngle()));          this.internalMarkerWhenTicksOverlap=true;          anchor=isInverted() ? TextAnchor.BOTTOM_RIGHT : TextAnchor.BOTTOM_LEFT;        }        rotationAnchor=anchor;      } else {        anchor=TextAnchor.TOP_CENTER;        if ((lastTick != null) && (lastX == x) && (currentTickValue != cycleBound)) {          anchor=isInverted() ? TextAnchor.TOP_LEFT : TextAnchor.TOP_RIGHT;          result.remove(result.size() - 1);          result.add(new CycleBoundTick(this.boundMappedToLastCycle,lastTick.getNumber(),lastTick.getText(),anchor,anchor,lastTick.getAngle()));          this.internalMarkerWhenTicksOverlap=true;          anchor=isInverted() ? TextAnchor.TOP_RIGHT : TextAnchor.TOP_LEFT;        }        rotationAnchor=anchor;      }    }    CycleBoundTick tick=new CycleBoundTick(this.boundMappedToLastCycle,new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);    if (currentTickValue == cycleBound) {      this.internalMarkerCycleBoundTick=tick;    }    result.add(tick);    lastTick=tick;    lastX=x;    currentTickValue+=unit;    if (cyclenow) {      currentTickValue=calculateLowestVisibleTickValue();      upperValue=cycleBound;      cycled=true;      this.boundMappedToLastCycle=true;    }  }  this.boundMappedToLastCycle=boundMapping;  return result;}  }
class C{  public UID(){synchronized (lock) {    if (!hostUniqueSet) {      hostUnique=(new SecureRandom()).nextInt();      hostUniqueSet=true;    }    unique=hostUnique;    if (lastCount == Short.MAX_VALUE) {      boolean interrupted=Thread.interrupted();      boolean done=false;      while (!done) {        long now=System.currentTimeMillis();        if (now == lastTime) {          try {            Thread.sleep(1);          } catch (          InterruptedException e) {            interrupted=true;          }        } else {          lastTime=(now < lastTime) ? lastTime + 1 : now;          lastCount=Short.MIN_VALUE;          done=true;        }      }      if (interrupted) {        Thread.currentThread().interrupt();      }    }    time=lastTime;    count=lastCount++;  }}  }
class C{  public void reject(){  manager.rejectIncomingFileTransfer(this);}  }
class C{  public static <T>Mapping<Optional<T>> optional(Mapping<T> base,Constraint... constraints){  String mname="optional " + base.meta().name;  return new FieldMapping<Optional<T>>(base.options()._inputMode(),(null),(null),new MappingMeta(mname,Optional.class,base)).options(null).constraint(constraints);}  }
class C{  public static void assertTrue(boolean b,Object message){  if (!b) {    throwError(message);  }}  }
class C{  private void emitStoreResult(Name name){  if (name != null && name.type != V_TYPE) {    emitStoreInsn(name.type,name.index());  }}  }
class C{  public SmsPortAddressedTextMessage(SmsPort destPort,SmsPort origPort,String msg){  super(destPort,origPort);  smsTextMessage_=new SmsTextMessage(msg);}  }
class C{  public boolean unregister(Context context){  if (isRegistered) {    context.unregisterReceiver(this);    isRegistered=false;    return true;  }  return false;}  }
class C{  public final int maxClass(){  double maxCount=0;  int maxIndex=0;  int i;  for (i=0; i < m_perClass.length; i++) {    if (Utils.gr(m_perClass[i],maxCount)) {      maxCount=m_perClass[i];      maxIndex=i;    }  }  return maxIndex;}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  private void sendHandshakeSetConfig(){  OFSetConfig configSet=factory.buildSetConfig().setXid(handshakeTransactionIds--).setMissSendLen(0xffff).build();  OFBarrierRequest barrier=factory.buildBarrierRequest().setXid(handshakeTransactionIds--).build();  OFGetConfigRequest configReq=factory.buildGetConfigRequest().setXid(handshakeTransactionIds--).build();  List<OFMessage> msgList=ImmutableList.<OFMessage>of(configSet,barrier,configReq);  mainConnection.write(msgList);}  }
class C{  @Deprecated public static void dragQuarterScreenUp(ActivityInstrumentationTestCase test){  dragQuarterScreenUp(test,test.getActivity());}  }
class C{  protected void validatePatch(State current,State patch){  checkState(current.taskInfo.stage.ordinal() < TaskState.TaskStage.FINISHED.ordinal(),"Invalid stage update. Can not patch anymore when in final stage %s",current.taskInfo.stage);  if (patch.taskInfo != null) {    checkState(patch.taskInfo.stage != null,"Invalid stage update. 'stage' can not be null in patch");    checkState(patch.taskInfo.stage.ordinal() >= current.taskInfo.stage.ordinal(),"Invalid stage update. Can not revert to %s from %s",patch.taskInfo.stage,current.taskInfo.stage);    if (patch.taskInfo.subStage != null && current.taskInfo.subStage != null) {      checkState(patch.taskInfo.subStage.ordinal() >= current.taskInfo.subStage.ordinal(),"Invalid stage update. 'subStage' cannot move back.");    }  }  checkArgument(patch.image == null,"image field cannot be updated in a patch");  checkArgument(patch.datastore == null,"datastore field cannot be updated in a patch");}  }
class C{  @Override public void resetData(){  super.resetData();  usedSpaceStream.resetData();  objectsStream.resetData();  refFromImmortalStream.resetData();  totalUsedSpace=0;  totalObjects=0;  totalRefFromImmortal=0;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.680 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="BBFCFD2AD6BD270AD38D8FE87FD0572B") protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public boolean isAttached(){  return isDebuggerAttached;}  }
class C{  public static void createCarbonStore(){  try {    String factFilePath=new File("src/test/resources/data.csv").getCanonicalPath();    File storeDir=new File(absoluteTableIdentifier.getStorePath());    CarbonUtil.deleteFoldersAndFiles(storeDir);    CarbonProperties.getInstance().addProperty(CarbonCommonConstants.STORE_LOCATION_HDFS,absoluteTableIdentifier.getStorePath());    String kettleHomePath="../processing/carbonplugins";    int currentRestructureNumber=0;    CarbonTable table=createTable();    writeDictionary(factFilePath,table);    CarbonDataLoadSchema schema=new CarbonDataLoadSchema(table);    LoadModel loadModel=new LoadModel();    String partitionId="0";    loadModel.setSchema(schema);    loadModel.setSchemaName(absoluteTableIdentifier.getCarbonTableIdentifier().getDatabaseName());    loadModel.setCubeName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());    loadModel.setTableName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());    loadModel.setFactFilePath(factFilePath);    loadModel.setLoadMetadataDetails(new ArrayList<LoadMetadataDetails>());    executeGraph(loadModel,absoluteTableIdentifier.getStorePath(),kettleHomePath,currentRestructureNumber);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Builder requireExitStatus(Predicate<Integer> exitStatusVerifier){  this.exitStatusVerifier=exitStatusVerifier;  return this;}  }
class C{  public SIPServerTransaction findMergedTransaction(SIPRequest sipRequest){  if (!sipRequest.getMethod().equals(Request.INVITE)) {    return null;  }  String mergeId=sipRequest.getMergeId();  SIPServerTransaction mergedTransaction=(SIPServerTransaction)this.mergeTable.get(mergeId);  if (mergeId == null) {    return null;  } else   if (mergedTransaction != null && !mergedTransaction.isMessagePartOfTransaction(sipRequest)) {    return mergedTransaction;  } else {    for (    Dialog dialog : this.dialogTable.values()) {      SIPDialog sipDialog=(SIPDialog)dialog;      if (sipDialog.getFirstTransaction() != null && sipDialog.getFirstTransaction() instanceof ServerTransaction) {        SIPServerTransaction serverTransaction=((SIPServerTransaction)sipDialog.getFirstTransaction());        SIPRequest transactionRequest=((SIPServerTransaction)sipDialog.getFirstTransaction()).getOriginalRequest();        if ((!serverTransaction.isMessagePartOfTransaction(sipRequest)) && sipRequest.getMergeId().equals(transactionRequest.getMergeId())) {          return (SIPServerTransaction)sipDialog.getFirstTransaction();        }      }    }    return null;  }}  }
class C{  public double remove(final int index){  int _numObjs=numObjs;  if (index >= _numObjs)   throw new ArrayIndexOutOfBoundsException(index);  double[] _objs=this.objs;  double ret=_objs[index];  _objs[index]=_objs[_numObjs - 1];  numObjs--;  return ret;}  }
class C{  public int compareTo(ObjectName name){  if (name == this)   return 0;  int domainValue=this.getDomain().compareTo(name.getDomain());  if (domainValue != 0)   return domainValue;  String thisTypeKey=this.getKeyProperty("type");  String anotherTypeKey=name.getKeyProperty("type");  if (thisTypeKey == null)   thisTypeKey="";  if (anotherTypeKey == null)   anotherTypeKey="";  int typeKeyValue=thisTypeKey.compareTo(anotherTypeKey);  if (typeKeyValue != 0)   return typeKeyValue;  return this.getCanonicalName().compareTo(name.getCanonicalName());}  }
class C{  protected static Pair<String,String> asrImmediate(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String immediateNodeValue){  long baseOffset=offset;  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  if (immediateNodeValue.equals("0")) {    final String tmpVar1=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,thirtyOneSet,byteSize,tmpVar1));    instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,tmpVar1,byteSize,oneSet,byteSize,shifterCarryOut));    instructions.add(ReilHelpers.createSub(baseOffset++,byteSize,shifterCarryOut,byteSize,String.valueOf(1),dWordSize,shifterOperand));    return new Pair<String,String>(shifterOperand,shifterCarryOut);  } else {    final String tmpVar1=environment.getNextVariableString();    final String tmpVar2=environment.getNextVariableString();    final String tmpVar3=environment.getNextVariableString();    final String tmpVar4=environment.getNextVariableString();    final String tmpVar5=environment.getNextVariableString();    instructions.add(ReilHelpers.createAdd(baseOffset++,dWordSize,registerNodeValue,dWordSize,bitMaskHighestBitSet,qWordSize,tmpVar1));    instructions.add(ReilHelpers.createBsh(baseOffset++,qWordSize,tmpVar1,wordSize,"-" + immediateNodeValue,dWordSize,tmpVar2));    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,bitMaskHighestBitSet,wordSize,"-" + immediateNodeValue,dWordSize,tmpVar3));    instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,tmpVar2,dWordSize,tmpVar3,qWordSize,tmpVar4));    instructions.add(ReilHelpers.createAnd(baseOffset++,qWordSize,tmpVar4,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,dWordSize,String.valueOf(-(Integer.decode(immediateNodeValue) - 1)),wordSize,tmpVar5));    instructions.add(ReilHelpers.createAnd(baseOffset++,wordSize,tmpVar5,byteSize,oneSet,byteSize,shifterCarryOut));    return new Pair<String,String>(shifterOperand,shifterCarryOut);  }}  }
class C{  @RequestMapping(value="/stub/admin/users/{userid}",method=RequestMethod.GET) public ResponseEntity<?> readUser(@PathVariable(value="userid") Long id) throws UserServiceException {  fr.gael.dhus.service.UserService userService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UserService.class);  try {    User user=userService.getUser(id);    LockedAccessRestriction lock=null;    for (    AccessRestriction restriction : userService.getRestrictions(user.getId())) {      if (restriction instanceof LockedAccessRestriction) {        lock=(LockedAccessRestriction)restriction;      }    }    List<RoleData> roles=new ArrayList<RoleData>();    for (    Role role : user.getRoles()) {      roles.add(RoleData.valueOf(role.name()));    }    UserData userData=new UserData(user.getId(),user.getUsername(),user.getFirstname(),user.getLastname(),user.getEmail(),roles,user.getPhone(),user.getAddress(),lock == null ? null : lock.getBlockingReason(),user.getCountry(),user.getUsage(),user.getSubUsage(),user.getDomain(),user.getSubDomain());    return new ResponseEntity<>(userData,HttpStatus.OK);  } catch (  AccessDeniedException e) {    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    throw new UserServiceException(e.getMessage());  }}  }
class C{  Env<AttrContext> initEnv(JCVariableDecl tree,Env<AttrContext> env){  Env<AttrContext> localEnv=env.dupto(new AttrContextEnv(tree,env.info.dup()));  if (tree.sym.owner.kind == TYP) {    localEnv.info.scope=env.info.scope.dupUnshared();    localEnv.info.scope.owner=tree.sym;  }  if ((tree.mods.flags & STATIC) != 0 || ((env.enclClass.sym.flags() & INTERFACE) != 0 && env.enclMethod == null))   localEnv.info.staticLevel++;  return localEnv;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final String encode(final byte[] in){  int rfc1521compliantLength=((in.length + 2) / 3) * 4;  if (!this.rfc1521compliant)   rfc1521compliantLength-=in.length % 3 == 2 ? 1 : in.length % 3 == 1 ? 2 : 0;  return ASCII.String(encodeSubstring(in,rfc1521compliantLength));}  }
class C{  private final JsonToken parseNumberText2(boolean negative) throws IOException, JsonParseException {  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();  int outPtr=0;  if (negative) {    outBuf[outPtr++]='-';  }  char c;  int intLen=0;  boolean eof=false;  int_loop:   while (true) {    if (_inputPtr >= _inputEnd && !loadMore()) {      c=CHAR_NULL;      eof=true;      break int_loop;    }    c=_inputBuffer[_inputPtr++];    if (c < INT_0 || c > INT_9) {      break int_loop;    }    ++intLen;    if (intLen == 2) {      if (outBuf[outPtr - 1] == '0') {        reportInvalidNumber("Leading zeroes not allowed");      }    }    if (outPtr >= outBuf.length) {      outBuf=_textBuffer.finishCurrentSegment();      outPtr=0;    }    outBuf[outPtr++]=c;  }  if (intLen == 0) {    reportInvalidNumber("Missing integer part (next char " + _getCharDesc(c) + ")");  }  int fractLen=0;  if (c == '.') {    outBuf[outPtr++]=c;    fract_loop:     while (true) {      if (_inputPtr >= _inputEnd && !loadMore()) {        eof=true;        break fract_loop;      }      c=_inputBuffer[_inputPtr++];      if (c < INT_0 || c > INT_9) {        break fract_loop;      }      ++fractLen;      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      outBuf[outPtr++]=c;    }    if (fractLen == 0) {      reportUnexpectedNumberChar(c,"Decimal point not followed by a digit");    }  }  int expLen=0;  if (c == 'e' || c == 'E') {    if (outPtr >= outBuf.length) {      outBuf=_textBuffer.finishCurrentSegment();      outPtr=0;    }    outBuf[outPtr++]=c;    c=(_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar("expected a digit for number exponent");    if (c == '-' || c == '+') {      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      outBuf[outPtr++]=c;      c=(_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar("expected a digit for number exponent");    }    exp_loop:     while (c <= INT_9 && c >= INT_0) {      ++expLen;      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      outBuf[outPtr++]=c;      if (_inputPtr >= _inputEnd && !loadMore()) {        eof=true;        break exp_loop;      }      c=_inputBuffer[_inputPtr++];    }    if (expLen == 0) {      reportUnexpectedNumberChar(c,"Exponent indicator not followed by a digit");    }  }  if (!eof) {    --_inputPtr;  }  _textBuffer.setCurrentLength(outPtr);  return reset(negative,intLen,fractLen,expLen);}  }
class C{  public void delete(){  ((FileBytes)bytes).delete();}  }
class C{  private void initBuildIdAndDate(){  if (buildId != null) {    return;  }  buildId="-1";  buildDate="";  final InputStream in=FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream("/META-INF/MANIFEST.MF");  String str=null;  if (in != null) {    final Properties prop=PropertiesLoader.loadProperties(in);    str=prop.getProperty("Implementation-Version");  }  if (str == null) {    return;  }  final int sep=str.lastIndexOf("-");  buildId=str.substring(0,sep);  SimpleDateFormat inFormat=new SimpleDateFormat("yyyyMMddHHmmss");  SimpleDateFormat outFormat=new SimpleDateFormat("yyyy/MM/dd");  try {    buildDate=outFormat.format(inFormat.parse(str.substring(sep + 1)));  } catch (  ParseException e) {    logger.error(e.getMessage());  }}  }
class C{  public boolean isBlacklisted(String name){  if (getBlacklistEnabled() == false) {    return false;  }  return isOnList(blacklist,name);}  }
class C{  public static void aligned8Copy(Address dstPtr,Address srcPtr,int copyBytes){  if (USE_NATIVE && copyBytes > NATIVE_THRESHOLD) {    memcopy(dstPtr,srcPtr,copyBytes);  } else {    if (copyBytes >= BYTES_IN_COPY && (srcPtr.toWord().and(Word.fromIntZeroExtend(BYTES_IN_COPY - 1)).EQ((dstPtr.toWord().and(Word.fromIntZeroExtend(BYTES_IN_COPY - 1)))))) {      Address endPtr=srcPtr.plus(copyBytes);      Address wordEndPtr=endPtr.toWord().and(Word.fromIntZeroExtend(BYTES_IN_COPY - 1).not()).toAddress();      if (BYTES_IN_COPY == 8) {        if (srcPtr.toWord().and(Word.fromIntZeroExtend(1)).NE(Word.zero())) {          copy1Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(1);          dstPtr=dstPtr.plus(1);        }        if (srcPtr.toWord().and(Word.fromIntZeroExtend(2)).NE(Word.zero())) {          copy2Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(2);          dstPtr=dstPtr.plus(2);        }        if (srcPtr.toWord().and(Word.fromIntZeroExtend(4)).NE(Word.zero())) {          copy4Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(4);          dstPtr=dstPtr.plus(4);        }      } else {        if (srcPtr.toWord().and(Word.fromIntZeroExtend(1)).NE(Word.zero())) {          copy1Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(1);          dstPtr=dstPtr.plus(1);        }        if (srcPtr.toWord().and(Word.fromIntZeroExtend(2)).NE(Word.zero())) {          copy2Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(2);          dstPtr=dstPtr.plus(2);        }      }      while (srcPtr.LT(wordEndPtr)) {        if (BYTES_IN_COPY == 8) {          copy8Bytes(dstPtr,srcPtr);        } else {          copy4Bytes(dstPtr,srcPtr);        }        srcPtr=srcPtr.plus(BYTES_IN_COPY);        dstPtr=dstPtr.plus(BYTES_IN_COPY);      }      if (BYTES_IN_COPY == 8) {        if (endPtr.toWord().and(Word.fromIntZeroExtend(4)).NE(Word.zero())) {          copy4Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(4);          dstPtr=dstPtr.plus(4);        }        if (endPtr.toWord().and(Word.fromIntZeroExtend(2)).NE(Word.zero())) {          copy2Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(2);          dstPtr=dstPtr.plus(2);        }        if (endPtr.toWord().and(Word.fromIntZeroExtend(1)).NE(Word.zero())) {          copy1Bytes(dstPtr,srcPtr);        }      } else {        if (endPtr.toWord().and(Word.fromIntZeroExtend(2)).NE(Word.zero())) {          copy2Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(2);          dstPtr=dstPtr.plus(2);        }        if (endPtr.toWord().and(Word.fromIntZeroExtend(1)).NE(Word.zero())) {          copy1Bytes(dstPtr,srcPtr);        }      }    } else {      Address endPtr=srcPtr.plus(copyBytes);      while (srcPtr.LT(endPtr)) {        dstPtr.store(srcPtr.loadByte());        srcPtr=srcPtr.plus(1);        dstPtr=dstPtr.plus(1);      }    }  }}  }
class C{  protected void removeFromBuildSpec(String builderID) throws CoreException {  MarkerUtil.removeMarkers(getProject());  IProjectDescription description=getProject().getDescription();  ICommand[] commands=description.getBuildSpec();  for (int i=0; i < commands.length; ++i) {    if (commands[i].getBuilderName().equals(builderID)) {      ICommand[] newCommands=new ICommand[commands.length - 1];      System.arraycopy(commands,0,newCommands,0,i);      System.arraycopy(commands,i + 1,newCommands,i,commands.length - i - 1);      description.setBuildSpec(newCommands);      getProject().setDescription(description,null);      return;    }  }}  }
class C{  public void ensureCapacity(int minCapacity){  minCapacity=Math.max(4,minCapacity);  if (minCapacity >= data.length) {    int[] d=new int[minCapacity];    System.arraycopy(data,0,d,0,data.length);    data=d;  }}  }
class C{  synchronized public void add(final long timestamp,final T value){  if (log.isInfoEnabled())   log.info("timestamp=" + timestamp + ", value="+ value);  if (timestamp <= 0) {    throw new IllegalArgumentException("timestamp=" + timestamp + ", value="+ value);  }  final long logicalSlot=timestamp / period;  if (lastLogicalSlot != -1) {    if ((lastLogicalSlot - logicalSlot) >= capacity) {      if (log.isInfoEnabled())       log.info("Timestamp out of order?",new TimestampOrderException("timestamp=" + timestamp + ", value="+ value));    }  }  final int physicalSlot=(int)(logicalSlot % capacity);  if (lastLogicalSlot == -1) {    assert lastLogicalSlot == -1;    assert size == 0;    timestamps[physicalSlot]=timestamp;    counts[physicalSlot]=1;    data[physicalSlot]=value;    size=1;  } else {    final int lastPhysicalSlot=(int)(lastLogicalSlot % capacity);    final long lastModified=timestamps[lastPhysicalSlot];    assert lastModified > 0 : "lastModified=" + lastModified;    for (long ls=lastLogicalSlot + 1; ls <= logicalSlot; ls++) {      final int ps=(int)(ls % capacity);      if (ps == 0 && sink != null) {        final long t=ls * period;        final T avg=getAverage();        if (log.isInfoEnabled())         log.info("overflow: t=" + t + ", avg="+ avg);        sink.add(t,avg);      }      if (data[ps] != null) {        if (!overwrite) {          throw new RuntimeException("Would overwrite data: ps=" + ps + ", capacity="+ capacity+ ", size="+ size);        }        size--;        assert size >= 0 : "size=" + size;        data[ps]=null;        counts[ps]=0;        timestamps[ps]=0L;      }    }    if (data[physicalSlot] == null) {      size++;    }    data[physicalSlot]=(data[physicalSlot] == null || !isNumeric() ? value : valueOf(((Number)data[physicalSlot]).doubleValue() + ((Number)value).doubleValue()));    counts[physicalSlot]++;    timestamps[physicalSlot]=timestamp;    if (size > capacity) {      log.warn("size=" + size + ", capacity="+ capacity);    }  }  lastLogicalSlot=Math.max(lastLogicalSlot,logicalSlot);}  }
class C{  public static long tenPow(int n){  assert n >= 0;  return n < POWERS_OF_TEN_LONG.length ? POWERS_OF_TEN_LONG[n] : (long)Math.pow(10,n);}  }
class C{  public ExternalProject(File file,String natureId,String builderId){  this(file,singleton(natureId),singleton(builderId));}  }
class C{  public synchronized void clear(){  Entry tab[]=table;  for (int index=tab.length; --index >= 0; ) {    tab[index]=null;  }  count=0;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.427 -0500",hash_original_method="CFF098965464555AD1B1F596C34C16A1",hash_generated_method="2538C69C4CF5B9AC37A2752308A2AD4B") public SIPTransaction findTransaction(SIPMessage sipMessage,boolean isServer){  SIPTransaction retval=null;  try {    if (isServer) {      Via via=sipMessage.getTopmostVia();      if (via.getBranch() != null) {        String key=sipMessage.getTransactionId();        retval=(SIPTransaction)serverTransactionTable.get(key);        if (stackLogger.isLoggingEnabled())         getStackLogger().logDebug("serverTx: looking for key " + key + " existing="+ serverTransactionTable);        if (key.startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE)) {          return retval;        }      }      Iterator<SIPServerTransaction> it=serverTransactionTable.values().iterator();      while (it.hasNext()) {        SIPServerTransaction sipServerTransaction=(SIPServerTransaction)it.next();        if (sipServerTransaction.isMessagePartOfTransaction(sipMessage)) {          retval=sipServerTransaction;          return retval;        }      }    } else {      Via via=sipMessage.getTopmostVia();      if (via.getBranch() != null) {        String key=sipMessage.getTransactionId();        if (stackLogger.isLoggingEnabled())         getStackLogger().logDebug("clientTx: looking for key " + key);        retval=(SIPTransaction)clientTransactionTable.get(key);        if (key.startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE)) {          return retval;        }      }      Iterator<SIPClientTransaction> it=clientTransactionTable.values().iterator();      while (it.hasNext()) {        SIPClientTransaction clientTransaction=(SIPClientTransaction)it.next();        if (clientTransaction.isMessagePartOfTransaction(sipMessage)) {          retval=clientTransaction;          return retval;        }      }    }  }  finally {    if (this.getStackLogger().isLoggingEnabled()) {      this.getStackLogger().logDebug("findTransaction: returning  : " + retval);    }  }  return retval;}  }
class C{  private static boolean isUrlBlacklisted(final BlacklistType blacklistType,final DigestURL url){  final boolean isBlacklisted=Switchboard.urlBlacklist.isListed(blacklistType,url.getHost().toLowerCase(),url.getFile());  if (isBlacklisted) {    Switchboard.getSwitchboard().crawlQueues.errorURL.push(url,996,null,FailCategory.FINAL_LOAD_CONTEXT,"url in blacklist",-1);    ConcurrentLog.fine("snippet fetch","MEDIA-SNIPPET Rejecting URL '" + url.toNormalform(false) + "'. URL is in blacklist.");  }  return isBlacklisted;}  }
class C{  private void enterDefaultValue(final JCExpression defaultValue,final Env<AttrContext> localEnv,final MethodSymbol m){  m.defaultValue=annotate.enterAttributeValue(m.type.getReturnType(),defaultValue,localEnv);}  }
class C{  @Deprecated public static void init(Resources res){  mMetrics=res.getDisplayMetrics();  mMinimumFlingVelocity=ViewConfiguration.getMinimumFlingVelocity();  mMaximumFlingVelocity=ViewConfiguration.getMaximumFlingVelocity();}  }
class C{  public EditorColorChooserAction(DrawingEditor editor,AttributeKey<Color> key,@Nullable String name){  this(editor,key,name,null);}  }
class C{  List<DBItem> sample(Key key,int max_entries,DHTtype forType,boolean preferPeers){  PeersSeeds keyEntry=null;  PeerAddressDBItem[] seedSnapshot=null;  PeerAddressDBItem[] peerSnapshot=null;  keyEntry=items.get(key);  if (keyEntry == null)   return null;  seedSnapshot=keyEntry.seeds.snapshot();  peerSnapshot=keyEntry.peers.snapshot();  int lengthSum=peerSnapshot.length + seedSnapshot.length;  if (lengthSum == 0)   return null;  List<DBItem> peerlist=new ArrayList<DBItem>(Math.min(max_entries,lengthSum));  preferPeers&=lengthSum > max_entries;  PeerAddressDBItem[] source;  if (preferPeers)   source=peerSnapshot; else {    source=ThreadLocalRandom.current().nextInt(lengthSum) < peerSnapshot.length ? peerSnapshot : seedSnapshot;  }  fill(peerlist,source,max_entries);  source=source == peerSnapshot ? seedSnapshot : peerSnapshot;  fill(peerlist,source,max_entries);  return peerlist;}  }
class C{  @Override public void serialize(Message message,OutputStream out) throws IOException {  String name=names.get(message.getClass());  if (name == null) {    throw new Error("BitcoinSerializer doesn't currently know how to serialize " + message.getClass());  }  serialize(name,message.bitcoinSerialize(),out);}  }
class C{  boolean fullScroll(int direction){  boolean moved=false;  if (direction == FOCUS_UP) {    mLayoutMode=LAYOUT_SET_SELECTION;    setSelectionInt(0);    invokeOnItemScrollListener();    moved=true;  } else   if (direction == FOCUS_DOWN) {    mLayoutMode=LAYOUT_SET_SELECTION;    setSelectionInt(mItemCount - 1);    invokeOnItemScrollListener();    moved=true;  }  if (moved) {    awakenScrollBars();  }  return moved;}  }
class C{  private String toLocalNumber(double n){  return mDecimalFormat.format(n);}  }
class C{  public boolean visitBinaryOperation(ExpressionOwner owner,Operation op){  return true;}  }
class C{  public final void finish(){  if (mDebug)   Slog.v(TAG,"finish()");  finishInternal();}  }
class C{  public ManagedThread(){  super();  setPriority(Thread.NORM_PRIORITY);  setUncaughtExceptionHandler(HANDLER);}  }
class C{  public LWL(Classifier classifier,int k,DistanceMetric dm,KernelFunction kf){  this(classifier,k,dm,kf,new DefaultVectorCollectionFactory<VecPaired<Vec,Double>>());}  }
class C{  private void initWriters(){  Map<PluginInfo,QueryResponseWriter> writers=new LinkedHashMap<>();  for (  PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {    try {      QueryResponseWriter writer;      String startup=info.attributes.get("startup");      if (startup != null) {        if ("lazy".equals(startup)) {          log.info("adding lazy queryResponseWriter: " + info.className);          writer=new LazyQueryResponseWriterWrapper(this,info.className,info.initArgs);        } else {          throw new Exception("Unknown startup value: '" + startup + "' for: "+ info.className);        }      } else {        writer=createQueryResponseWriter(info.className);      }      writers.put(info,writer);      QueryResponseWriter old=registerResponseWriter(info.name,writer);      if (old != null) {        log.warn("Multiple queryResponseWriter registered to the same name: " + info.name + " ignoring: "+ old.getClass().getName());      }      if (info.isDefault()) {        if (defaultResponseWriter != null)         log.warn("Multiple default queryResponseWriter registered, using: " + info.name);        defaultResponseWriter=writer;      }      log.info("created " + info.name + ": "+ info.className);    } catch (    Exception ex) {      SolrException e=new SolrException(SolrException.ErrorCode.SERVER_ERROR,"QueryResponseWriter init failure",ex);      SolrException.log(log,null,e);      throw e;    }  }  for (  Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {    PluginInfo info=entry.getKey();    QueryResponseWriter writer=entry.getValue();    responseWriters.put(info.name,writer);    if (writer instanceof PluginInfoInitialized) {      ((PluginInfoInitialized)writer).init(info);    } else {      writer.init(info.initArgs);    }  }  NamedList emptyList=new NamedList();  for (  Map.Entry<String,QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {    if (responseWriters.get(entry.getKey()) == null) {      responseWriters.put(entry.getKey(),entry.getValue());      entry.getValue().init(emptyList);    }  }  if (defaultResponseWriter == null) {    defaultResponseWriter=responseWriters.get("standard");  }}  }
class C{  public ObsHistory(Patient patient){  this.patient=patient;}  }
class C{  public static void writeMediumInt(IoBuffer out,int value){  byte[] bytes=new byte[3];  bytes[0]=(byte)((value >>> 16) & 0x000000FF);  bytes[1]=(byte)((value >>> 8) & 0x000000FF);  bytes[2]=(byte)(value & 0x00FF);  out.put(bytes);}  }
class C{  public static void statusChanged(String currentStatus){  ClusterInfo clusterInfo=getSysClient().upgrade().getClusterInfo();  String clusterState=calculateClusterState(clusterInfo);  if (currentStatus.equals(DOWNLOADING_CLUSTER_STATE)) {    renderJSON(!clusterState.equals(currentStatus) && !isStandbySiteDownloading());  } else {    boolean statusChanged=!clusterState.equals(currentStatus);    renderJSON(statusChanged);  }}  }
class C{  public ImageServer(Properties props){  setProperties(props);}  }
class C{  public StatusBar(){  setLayout(LookAndFeelTweaks.createHorizontalPercentLayout());  idToZones=new Hashtable();  setZoneBorder(BorderFactory.createLineBorder(Color.lightGray));}  }
class C{  public boolean hasRunningIssues(){  return !runningIssues.isEmpty();}  }
class C{  public EtchedBorder(Color highlight,Color shadow){  this(LOWERED,highlight,shadow);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  ThreadDao.dropTable(db,ifExists);  ThreadInfoDao.dropTable(db,ifExists);  ThreadReplyDao.dropTable(db,ifExists);  ReadThreadDao.dropTable(db,ifExists);  ImageCacheDao.dropTable(db,ifExists);}  }
class C{  public Bundler putLongArray(String key,long[] value){  bundle.putLongArray(key,value);  return this;}  }
class C{  public double convertToAttribY(double scy){  double temp=m_YaxisEnd - m_YaxisStart;  double temp2=((scy - m_YaxisEnd) * (m_maxY - m_minY)) / temp;  temp2=-(temp2 - m_minY);  return temp2;}  }
class C{  public PieChartComponent(final String name,final PieChartModel model){  super(name);  this.model=model;  initializeAttributes();  addListener();}  }
class C{  public int unFinishSize(){  return mUnFinishQueue.size();}  }
class C{  public CDefaultProximityUpdater(final JFrame parent,final ZyGraph graph){  super(graph);  m_parent=Preconditions.checkNotNull(parent,"IE02100: Parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE02362: graph argument can not be null");  m_graph.getSettings().getProximitySettings().addListener(m_proximityListener);}  }
class C{  public static boolean intersectRayTriangles(Ray ray,float[] vertices,short[] indices,int vertexSize,Vector3 intersection){  float min_dist=Float.MAX_VALUE;  boolean hit=false;  if ((indices.length % 3) != 0)   throw new RuntimeException("triangle list size is not a multiple of 3");  for (int i=0; i < indices.length; i+=3) {    int i1=indices[i] * vertexSize;    int i2=indices[i + 1] * vertexSize;    int i3=indices[i + 2] * vertexSize;    boolean result=intersectRayTriangle(ray,tmp1.set(vertices[i1],vertices[i1 + 1],vertices[i1 + 2]),tmp2.set(vertices[i2],vertices[i2 + 1],vertices[i2 + 2]),tmp3.set(vertices[i3],vertices[i3 + 1],vertices[i3 + 2]),tmp);    if (result == true) {      float dist=ray.origin.tmp().sub(tmp).len2();      if (dist < min_dist) {        min_dist=dist;        best.set(tmp);        hit=true;      }    }  }  if (hit == false)   return false; else {    if (intersection != null)     intersection.set(best);    return true;  }}  }
class C{  public Socket connect() throws IOException, ConfigurationException {  if (useSSL) {    sslFactory=SSLSocketFactory.getDefault();    SSLSocket sslSocket=(SSLSocket)sslFactory.createSocket();    SecurityHelper.setCiphersAndProtocolsToSSLSocket(sslSocket,SecurityHelper.getCiphers(),SecurityHelper.getProtocols());    socket=sslSocket;  } else {    SocketChannel channel=SocketChannel.open();    socket=channel.socket();  }  setSocket(socket);  try {    socket.connect(address,connectTimeout);  } catch (  IOException e) {    if (done) {      throw new SocketTerminationException("Socket has been terminated",e);    } else {      throw e;    }  }  socket.setTcpNoDelay(true);  socket.setKeepAlive(true);  socket.setSoTimeout(readTimeout);  return socket;}  }
class C{  public ByteMemberValue(int index,ConstPool cp){  super('B',cp);  this.valueIndex=index;}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeSetDTM clone=(NodeSetDTM)super.clone();  return clone;}  }
class C{  public boolean isValid(String inetAddress){  return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public static void regenerateJaasConfiguration(){  jaasConfig=new SolrJaasConfiguration();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:40.851 -0500",hash_original_method="7168E8EA0FE72B98E042580455F1047F",hash_generated_method="5599A5A0AB8018CDB5583F62BE874D5E") @Override public boolean performClick(){  if (!super.performClick() && mIME != null) {    mIME.onExtractedTextClicked();    return true;  }  return false;}  }
class C{  public <T>T fromXML(final HierarchicalStreamDriver driver,final String xml) throws ClassNotFoundException, ObjectStreamException {  try {    return fromXML(driver,new StringReader(xml));  } catch (  final ObjectStreamException e) {    throw e;  }catch (  final IOException e) {    throw new StreamException("Unexpected IO error from a StringReader",e);  }}  }
class C{  public static long hash64(final byte[] data,int length){  return hash64(data,length,0xe17a1465);}  }
class C{  public String dateAcct(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive())   return NO_ERROR;  if (value == null || !(value instanceof Timestamp))   return NO_ERROR;  mTab.setValue("DateAcct",value);  return NO_ERROR;}  }
class C{  public Iterator<DetectorFactory> iterator(){  return orderedFactoryList.iterator();}  }
class C{  public int compareToIgnoreCase(LangString o){  if (this == o)   return 0;  if (o == null)   return 1;  int result=this.getLang().compareToIgnoreCase(o.getLang());  if (result == 0)   return this.toString().compareToIgnoreCase(o.toString());  return result;}  }
class C{  public synchronized void removePvChangeListener(PvChangeListener l){  log.debug("-PvListener:" + String.valueOf(this) + "->"+ String.valueOf(l));  PvChangeListeners.remove(l);}  }
class C{  private CertPath buildCertPath(X509Certificate endCert) throws CertificatePathBuildingException {  CertPathBuilder cpb=null;  try {    cpb=CertPathBuilder.getInstance("PKIX");  } catch (  NoSuchAlgorithmException e) {    throw new CertificatePathBuildingException("Error building CertPathBuilder:" + e.getMessage(),e);  }  PKIXBuilderParameters params=CreatePKIXBuilderParameters(endCert);  CertPathBuilderResult cpbResult;  try {    cpbResult=cpb.build(params);  } catch (  CertPathBuilderException e) {    throw new CertificatePathBuildingException(e.getMessage(),e.getCause());  }catch (  InvalidAlgorithmParameterException e) {    throw new CertificatePathBuildingException(e.getMessage(),e);  }  CertPath cp=cpbResult.getCertPath();  return cp;}  }
class C{  public DJarInfo(JFrame parent) throws IOException {  this(parent,res.getString("DJarInfo.Title"),ModalityType.DOCUMENT_MODAL);}  }
class C{  public static void assertArrayEqual(long[] expected,long[] actual,double maxRelativeError){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],maxRelativeError);  }}  }
class C{  public ThreadLocal(){}  }
class C{  private void verifyCreateResults(){  if (TOTAL_RETURNS != TOTAL_THREADS)   fail("Failed -- Total thread returned is not same as number of threads created");  if (TOTAL_PR_CREATED != (TOTAL_THREADS / 2))   fail("Failed -- Total Partioned Region created is not correct");  if (TOTAL_PR_CREATION_FAIL != (TOTAL_THREADS / 2))   fail("Failed -- Total Partioned Region creation failures is not correct");}  }
class C{  public static void openMapSearch(Context context,double latitude,double longitude,String addressOrPlaceName){  Intent intent=createOpenMapSearchIntent(latitude,longitude,addressOrPlaceName);  checkContext(context,intent);  context.startActivity(intent);}  }
class C{  private final void addMod3(final long[] y){  final long[] x=this.bits;  long isNotEmpty=0;  for (int i=x.length; i-- != 0; )   isNotEmpty|=(x[i]=addMod3(x[i],y[i]));  isEmpty=isNotEmpty == 0;}  }
class C{  private void recordStoragePoolPortEvent(OperationTypeEnum opType,String description,URI resourcdId,String resType){  String evType;  evType=opType.getEvType(true);  String service=PORT_EVENT_SERVICE_TYPE;  String eventSource=PORT_EVENT_SERVICE_SOURCE;  if (resType.equalsIgnoreCase("StoragePool")) {    service=POOL_EVENT_SERVICE_TYPE;    eventSource=POOL_EVENT_SERVICE_SOURCE;  }  RecordableBourneEvent event=new RecordableBourneEvent(evType,null,URI.create("ViPR-User"),null,null,service,resourcdId,description,System.currentTimeMillis(),"",null,RecordType.Event.name(),eventSource,"","");  try {    _evtMgr.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error: ",description,ex);  }}  }
class C{  XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2,String k3,int v3){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  m_enums=new StringToIntTable(3);  m_enums.put(k1,v1);  m_enums.put(k2,v2);  m_enums.put(k3,v3);}  }
class C{  @CliCommand(value=CliStrings.EXPORT_STACKTRACE,help=CliStrings.EXPORT_STACKTRACE__HELP) @CliMetaData(shellOnly=false,relatedTopic={CliStrings.TOPIC_GEODE_DEBUG_UTIL}) @ResourceOperation(resource=Resource.CLUSTER,operation=Operation.READ) public Result exportStackTrace(@CliOption(key=CliStrings.EXPORT_STACKTRACE__MEMBER,optionContext=ConverterHint.ALL_MEMBER_IDNAME,help=CliStrings.EXPORT_STACKTRACE__HELP) String memberNameOrId,@CliOption(key=CliStrings.EXPORT_STACKTRACE__GROUP,optionContext=ConverterHint.ALL_MEMBER_IDNAME,help=CliStrings.EXPORT_STACKTRACE__GROUP) String group,@CliOption(key=CliStrings.EXPORT_STACKTRACE__FILE,mandatory=true,help=CliStrings.EXPORT_STACKTRACE__FILE__HELP) String fileName){  Result result=null;  try {    Cache cache=CacheFactory.getAnyInstance();    GemFireCacheImpl gfeCacheImpl=(GemFireCacheImpl)cache;    InternalDistributedSystem ads=gfeCacheImpl.getSystem();    InfoResultData resultData=ResultBuilder.createInfoResultData();    if (!fileName.endsWith(".txt")) {      return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION,".txt"));    }    Map<String,byte[]> dumps=new HashMap<String,byte[]>();    Set<DistributedMember> targetMembers=null;    if ((group == null || group.isEmpty()) && (memberNameOrId == null || memberNameOrId.isEmpty())) {      targetMembers=CliUtil.getAllMembers(cache);    } else {      targetMembers=CliUtil.findAllMatchingMembers(group,memberNameOrId);    }    ResultCollector<?,?> rc=CliUtil.executeFunction(getStackTracesFunction,null,targetMembers);    ArrayList<Object> resultList=(ArrayList<Object>)rc.getResult();    for (    Object resultObj : resultList) {      if (resultObj instanceof StackTracesPerMember) {        StackTracesPerMember stackTracePerMember=(StackTracesPerMember)resultObj;        dumps.put(stackTracePerMember.getMemberNameOrId(),stackTracePerMember.getStackTraces());      }    }    String filePath=writeStacksToFile(dumps,fileName);    resultData.addLine(CliStrings.format(CliStrings.EXPORT_STACKTRACE__SUCCESS,filePath));    resultData.addLine(CliStrings.EXPORT_STACKTRACE__HOST + ads.getDistributedMember().getHost());    result=ResultBuilder.buildResult(resultData);  } catch (  CommandResultException crex) {    return crex.getResult();  }catch (  Exception ex) {    result=ResultBuilder.createGemFireErrorResult(CliStrings.EXPORT_STACKTRACE__ERROR + ex.getMessage());  }  return result;}  }
class C{  public static DoubleMatrix2D less(DoubleMatrix2D A,double s){  return A.assign(F.less(s));}  }
class C{  public void redo() throws CannotRedoException {  super.redo();  Enumeration cursor=edits.elements();  while (cursor.hasMoreElements()) {    ((UndoableEdit)cursor.nextElement()).redo();  }}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public static void stopThreads(){  stopping=true;  stopProctor();  stopWatchDog();}  }
class C{  public GetNetworksParams withFilters(Filters filters){  this.filters=filters;  return this;}  }
class C{  public boolean hasInReplyTo(){  return hasExtension(InReplyTo.class);}  }
class C{  public TLongHashSet(long[] array){  this(array.length);  addAll(array);}  }
class C{  @Reference(authors="T. Vincenty",title="Direct and inverse solutions of geodesics on the ellipsoid with application of nested equations",booktitle="Survey review 23 176, 1975",url="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf") public static double sphericalVincentyFormulaRad(double lat1,double lon1,double lat2,double lon2){  final double dlnh=Math.abs(lon1 - lon2);  final double slat1=Math.sin(lat1), clat1=MathUtil.sinToCos(lat1,slat1);  final double slat2=Math.sin(lat2), clat2=MathUtil.sinToCos(lat2,slat2);  final double slond=Math.sin(dlnh), clond=MathUtil.sinToCos(dlnh,slond);  final double a=clat2 * slond;  final double b=(clat1 * slat2) - (slat1 * clat2 * clond);  return Math.atan2(Math.sqrt(a * a + b * b),slat1 * slat2 + clat1 * clat2 * clond);}  }
class C{  private StateSet closure(StateSet startStates){  StateSet result=new StateSet(numStates);  if (startStates != null) {    states.reset(startStates);    while (states.hasMoreElements())     result.add(closure(states.nextElement()));  }  return result;}  }
class C{  @RpcMethod public void detachDisks(String vmId,List<String> diskIds,AsyncMethodCallback<Host.AsyncClient.detach_disks_call> handler) throws RpcException {  ensureClient();  VmDisksDetachRequest vmDisksDetachRequest=new VmDisksDetachRequest(vmId,diskIds);  clientProxy.setTimeout(DETACH_DISKS_TIMEOUT_MS);  logger.info("detach_disks vm {}, disks {}, target {}, request {}",vmId,diskIds,getHostIp(),vmDisksDetachRequest);  try {    clientProxy.detach_disks(vmDisksDetachRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix10.class,args);}  }
class C{  public static InlineQueryResultCachedAudioBuilder builder(){  return new InlineQueryResultCachedAudioBuilder();}  }
class C{  protected AdapterImpl(){  super();}  }
class C{  public static void transferCashBookToCashBook(Properties ctx,int fromCashBookId,int toCashBookId,int currencyId,BigDecimal amount,Timestamp dateAcct,String trxName) throws OperationException {  MCash fromJournal=MCash.get(ctx,fromCashBookId,dateAcct,trxName);  transferFromJournalToCashBook(ctx,fromJournal,toCashBookId,currencyId,amount,dateAcct,trxName);}  }
class C{  public static void migrateOldPOSTerminal(Properties ctx) throws OperationException {  Trx trx=Trx.get(Trx.createTrxName(),true);  trx.start();  try {    String whereClause="IsActive='Y' AND AD_Client_ID=" + Env.getAD_Client_ID(ctx);    int oldPosIds[]=MPOS.getAllIDs(MPOS.Table_Name,whereClause,trx.getTrxName());    for (int i=0; i < oldPosIds.length; i++) {      MPOS oldPOS=new MPOS(ctx,oldPosIds[i],trx.getTrxName());      String posName=oldPOS.getName();      int warehouseId=oldPOS.getM_Warehouse_ID();      int soPriceListId=oldPOS.getM_PriceList_ID();      int cashBookId=oldPOS.getC_CashBook_ID();      int cashBPartnerId=oldPOS.getC_BPartnerCashTrx_ID();      int adOrgId=oldPOS.getAD_Org_ID();      int bankAccountId=BankManager.getDefaultBankAccountId(ctx,adOrgId,trx.getTrxName());      int salesRepId=oldPOS.getSalesRep_ID();      MStore store=StoreManager.getStore(ctx);      if (store.get_ID() == 0) {        throw new OperationException("Store could not be loaded");      }      int poPriceListId=store.getM_PriceList_ID();      MPOSTerminal terminal=createPOSTerminal(ctx,adOrgId,posName,cashBookId,bankAccountId,poPriceListId,soPriceListId,warehouseId,cashBPartnerId,salesRepId,trx.getTrxName());      StringBuffer updateStmt=new StringBuffer();      updateStmt.append("UPDATE C_Order SET C_POS_ID=").append(terminal.get_ID());      updateStmt.append(" WHERE C_POS_ID=").append(oldPOS.get_ID());      DB.executeUpdate(updateStmt.toString(),trx.getTrxName());      oldPOS.setIsActive(false);      PoManager.save(oldPOS);      trx.commit();    }  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Could not migrate old pos terminal",ex);  } finally {    trx.rollback();    trx.close();  }}  }
class C{  public long createMyContact() throws ContactManagerException {  try {    if (!mRcsSettings.isSocialPresenceSupported()) {      return INVALID_ID;    }    long imsRawContactId=getRawContactIdForMe();    if (INVALID_ID != imsRawContactId) {      if (sLogger.isActivated()) {        sLogger.error("\"Me\" contact already exists, no need to recreate");      }      return imsRawContactId;    }    if (sLogger.isActivated()) {      sLogger.error("\"Me\" contact does not already exists, creating it");    }    ArrayList<ContentProviderOperation> ops=new ArrayList<>();    int rawContactRefIms=ops.size();    ops.add(ContentProviderOperation.newInsert(RawContacts.CONTENT_URI).withValue(RawContacts.ACCOUNT_TYPE,RcsAccountManager.ACCOUNT_MANAGER_TYPE).withValue(RawContacts.ACCOUNT_NAME,mContext.getString(R.string.rcs_core_account_username)).withValue(RawContacts.SOURCE_ID,MYSELF).withValue(RawContacts.AGGREGATION_MODE,RawContacts.AGGREGATION_MODE_DISABLED).build());    ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,rawContactRefIms).withValue(Data.MIMETYPE,StructuredName.CONTENT_ITEM_TYPE).withValue(StructuredName.DISPLAY_NAME,mContext.getString(R.string.rcs_core_my_profile)).build());    long rcsGroupId=getRcsGroupIdFromContactsContractGroups();    if (INVALID_ID != rcsGroupId) {      ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,rawContactRefIms).withValue(Data.MIMETYPE,GroupMembership.CONTENT_ITEM_TYPE).withValue(GroupMembership.GROUP_ROW_ID,rcsGroupId).build());    }    ContentProviderResult[] results=mContentResolver.applyBatch(ContactsContract.AUTHORITY,ops);    imsRawContactId=ContentUris.parseId(results[rawContactRefIms].uri);    ops.clear();    List<ContentProviderOperation> registrationStateOps=modifyContactRegistrationStateForMyself(imsRawContactId,RegistrationState.ONLINE,RegistrationState.UNKNOWN,"","");    for (    ContentProviderOperation registrationStateOp : registrationStateOps) {      if (registrationStateOp != null) {        ops.add(registrationStateOp);      }    }    mContentResolver.applyBatch(ContactsContract.AUTHORITY,ops);    return imsRawContactId;  } catch (  RemoteException|OperationApplicationException e) {    throw new ContactManagerException("Unable to apply batch updates!",e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.076 -0500",hash_original_method="F403C2DD7869661F9202FB887EC75E9B",hash_generated_method="C71F29B723820B743949EE2ADEE8C074") public long skip(long n) throws IOException {  if (n <= 0) {    return 0;  }  byte[] buffer=new byte[BUFFER_SIZE];  long remaining=Math.min(n,this.contentLength - this.pos);  long count=0;  while (remaining > 0) {    int l=read(buffer,0,(int)Math.min(BUFFER_SIZE,remaining));    if (l == -1) {      break;    }    count+=l;    remaining-=l;  }  this.pos+=count;  return count;}  }
class C{  public void incFunctionExecutionsCompleted(){  this._stats.incInt(_functionExecutionsCompletedId,1);  aggregateStats.incFunctionExecutionsCompleted();}  }
class C{  public static String[] splitLines(final String in){  final BufferedReader sr=new BufferedReader(new StringReader(in));  final ArrayList<String> results=new ArrayList<>();  String line;  try {    while ((line=sr.readLine()) != null) {      results.add(line);    }  } catch (  final IOException ioe) {    throw new RuntimeException(ioe);  }  return results.toArray(new String[results.size()]);}  }
class C{  public boolean isValid(){  return isValid;}  }
class C{  public static Completable monoToCompletable(Mono<?> source){  return new CompletableFromPublisher<>(source);}  }
class C{  private static void checkArguments(final Window parent,final IDebugger debugger,final IAddress offset){  checkArguments(parent,debugger);  Preconditions.checkNotNull(offset,"IE01432: Offset argument can not be null");}  }
class C{  public static void logOut(){  SecurityContextHolder.getContext().setAuthentication(null);}  }
class C{  public SimpleProcessImage(){}  }
class C{  @Override public void start(){  super.start();  final GameData data=getData();  if (m_needToInitialize) {    if (games.strategy.triplea.Properties.getTriggers(data)) {      final Match<TriggerAttachment> purchaseDelegateTriggerMatch=new CompositeMatchAnd<>(AbstractTriggerAttachment.availableUses,AbstractTriggerAttachment.whenOrDefaultMatch(null,null),new CompositeMatchOr<TriggerAttachment>(TriggerAttachment.prodMatch(),TriggerAttachment.prodFrontierEditMatch(),TriggerAttachment.purchaseMatch()));      final HashSet<TriggerAttachment> toFirePossible=TriggerAttachment.collectForAllTriggersMatching(new HashSet<>(Collections.singleton(m_player)),purchaseDelegateTriggerMatch,m_bridge);      if (!toFirePossible.isEmpty()) {        final HashMap<ICondition,Boolean> testedConditions=TriggerAttachment.collectTestsForAllTriggers(toFirePossible,m_bridge);        final Set<TriggerAttachment> toFireTestedAndSatisfied=new HashSet<>(Match.getMatches(toFirePossible,AbstractTriggerAttachment.isSatisfiedMatch(testedConditions)));        TriggerAttachment.triggerProductionChange(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);        TriggerAttachment.triggerProductionFrontierEditChange(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);        TriggerAttachment.triggerPurchase(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);      }    }    giveBonusIncomeToAI();    m_needToInitialize=false;  }}  }
class C{  public static String[] splitOptions(String quotedOptionString) throws Exception {  Vector<String> optionsVec=new Vector<String>();  String str=new String(quotedOptionString);  int i;  while (true) {    i=0;    while ((i < str.length()) && (Character.isWhitespace(str.charAt(i))))     i++;    str=str.substring(i);    if (str.length() == 0)     break;    if (str.charAt(0) == '"') {      i=1;      while (i < str.length()) {        if (str.charAt(i) == str.charAt(0))         break;        if (str.charAt(i) == '\\') {          i+=1;          if (i >= str.length())           throw new Exception("String should not finish with \\");        }        i+=1;      }      if (i >= str.length())       throw new Exception("Quote parse error.");      String optStr=str.substring(1,i);      optStr=unbackQuoteChars(optStr);      optionsVec.addElement(optStr);      str=str.substring(i + 1);    } else {      i=0;      while ((i < str.length()) && (!Character.isWhitespace(str.charAt(i))))       i++;      String optStr=str.substring(0,i);      optionsVec.addElement(optStr);      str=str.substring(i);    }  }  String[] options=new String[optionsVec.size()];  for (i=0; i < optionsVec.size(); i++) {    options[i]=(String)optionsVec.elementAt(i);  }  return options;}  }
class C{  public static Document loadDocument(InputStream stream) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  return builder.parse(stream);}  }
class C{  public void deleteButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  if (javax.swing.JOptionPane.OK_OPTION == javax.swing.JOptionPane.showConfirmDialog(this,rb.getString("ConfirmDelete1") + "\n" + rb.getString("ConfirmDelete2"),rb.getString("ConfirmDeleteTitle"),javax.swing.JOptionPane.OK_CANCEL_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE)) {    SerialTrafficController.instance().deleteNode(nodeAddress);    resetNotes();    statusText1.setText(rb.getString("FeedBackDelete") + " " + Integer.toString(nodeAddress));    errorInStatus1=true;    changedNode=true;  } else {    resetNotes();  }}  }
class C{  @DELETE @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public GenericServiceAPIResponseEntity deleteByQuery(@QueryParam("query") String query,@QueryParam("startTime") String startTime,@QueryParam("endTime") String endTime,@QueryParam("pageSize") int pageSize,@QueryParam("startRowkey") String startRowkey,@QueryParam("treeAgg") boolean treeAgg,@QueryParam("timeSeries") boolean timeSeries,@QueryParam("intervalmin") long intervalmin,@QueryParam("top") int top,@QueryParam("filterIfMissing") boolean filterIfMissing,@QueryParam("parallel") int parallel,@QueryParam("metricName") String metricName,@QueryParam("verbose") Boolean verbose){  RawQuery rawQuery=RawQuery.build().query(query).startTime(startTime).endTime(endTime).pageSize(pageSize).startRowkey(startRowkey).treeAgg(treeAgg).timeSeries(timeSeries).intervalMin(intervalmin).top(top).filerIfMissing(filterIfMissing).parallel(parallel).metricName(metricName).verbose(verbose).done();  GenericServiceAPIResponseEntity response=new GenericServiceAPIResponseEntity();  Map<String,Object> meta=new HashMap<String,Object>();  DataStorage dataStorage=null;  StopWatch stopWatch=new StopWatch();  try {    stopWatch.start();    dataStorage=DataStorageManager.getDataStorageByEagleConfig();    if (dataStorage == null) {      LOG.error("Data storage is null");      throw new IllegalDataStorageException("Data storage is null");    }    DeleteStatement deleteStatement=new DeleteStatement(rawQuery);    ModifyResult<String> deleteResult=deleteStatement.execute(dataStorage);    if (deleteResult.isSuccess()) {      meta.put(ELAPSEDMS,stopWatch.getTime());      response.setObj(deleteResult.getIdentifiers(),String.class);      response.setSuccess(true);      response.setMeta(meta);    }    return response;  } catch (  Exception e) {    response.setException(e);    LOG.error(e.getMessage(),e);  } finally {    stopWatch.stop();  }  return response;}  }
class C{  public Entry(int hash,Object key1,Object key2,Object key3,Object value,Entry next){  this.hash=hash;  this.key1=key1;  this.key2=key2;  this.key3=key3;  this.value=value;  this.next=next;}  }
class C{  public void computeDepthParity(){  while (true) {    PolygonizeDirectedEdge de=null;    if (de == null)     return;    computeDepthParity(de);  }}  }
class C{  @NotNull public static TextDiffType deriveApplied(@NotNull TextDiffType source){  return new TextDiffType(source.myType,source.myDisplayName,source.myAttributesKey,true,false);}  }
class C{  public int compare(Object o1,Object o2){  if (!(o1 instanceof MAssignmentSlot && o2 instanceof MAssignmentSlot))   throw new ClassCastException("MAssignmentSlot.compare arguments not MAssignmentSlot");  MAssignmentSlot s1=(MAssignmentSlot)o1;  MAssignmentSlot s2=(MAssignmentSlot)o2;  int result=s1.getStartTime().compareTo(s2.getStartTime());  if (result != 0)   return result;  result=s2.getStatus() - s1.getStatus();  if (result != 0)   return result;  result=s1.getEndTime().compareTo(s2.getEndTime());  if (result != 0)   return result;  result=s1.getName().compareTo(s2.getName());  if (result != 0)   return result;  return s1.getDescription().compareTo(s2.getDescription());}  }
class C{  protected void fromExperiment(){  m_ModelClassifiers.removeAllElements();  for (  MultiLabelClassifier classifier : m_Experiment.getClassifiers())   m_ModelClassifiers.addElement(OptionUtils.toCommandLine(classifier));  m_GOEDatasets.setValue(m_Experiment.getDatasetProvider());  m_GOEEvaluator.setValue(m_Experiment.getEvaluator());  m_GOEStatisticsHandler.setValue(m_Experiment.getStatisticsHandler());  m_Notes=m_Experiment.getNotes();}  }
class C{  void checkMutability() throws IllegalStateException {  if (isFrozen) {    throw new IllegalStateException("Attempting to modify a frozen AIS");  }}  }
class C{  public String toString(){  return "MWindow[" + m_vo.WindowNo + ","+ m_vo.Name+ " ("+ m_vo.AD_Window_ID+ ")]";}  }
class C{  public static void appendVarArgs(StringBuilder sb,String... strings){  for (  String str : strings) {    sb.append(str);  }}  }
class C{  public synchronized void addBatchClustererListener(BatchClustererListener cl){  m_batchClustererListeners.addElement(cl);}  }
class C{  public CoverageTable(String path,String covtype,CoverageAttributeTable cat){  this(path,covtype);  this.cat=cat;}  }
class C{  @Override public void updateBlob(int columnIndex,InputStream x) throws SQLException {  updateBlob(columnIndex,x,-1);}  }
class C{  public CGraphWindowMenuBarSynchronizer(final ZyGraphViewSettings settings,final JCheckBoxMenuItem proximityBrowsingMenu,final JCheckBoxMenuItem autoLayoutMenu){  m_settings=settings;  m_proximityBrowsingMenu=proximityBrowsingMenu;  m_autoLayoutMenu=autoLayoutMenu;  m_settings.getLayoutSettings().addListener(m_listener);  m_settings.getProximitySettings().addListener(m_proximityListener);}  }
class C{  public Object sessionDataBy(String key){  return conversationData.get(key);}  }
class C{  @Timed @ExceptionMetered @DELETE @Path("{name}") public Response deleteSecretSeries(@Auth AutomationClient automationClient,@PathParam("name") String name){  secretDAO.getSecretByName(name).orElseThrow(null);  secretDAO.deleteSecretsByName(name);  auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_DELETE,automationClient.getName(),name));  return Response.noContent().build();}  }
class C{  protected void uninstallKeyboardActions(){  SwingUtilities.replaceUIInputMap(header,JComponent.WHEN_FOCUSED,null);  SwingUtilities.replaceUIActionMap(header,null);}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  SVGOMToBeImplementedElement ae=(SVGOMToBeImplementedElement)n;  ae.localName=localName;  return n;}  }
class C{  public NotificationChain basicSetDefaultExportedExpression(Expression newDefaultExportedExpression,NotificationChain msgs){  Expression oldDefaultExportedExpression=defaultExportedExpression;  defaultExportedExpression=newDefaultExportedExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORTED_EXPRESSION,oldDefaultExportedExpression,newDefaultExportedExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void actionPerformed(ActionEvent e){  m_isOK=false;  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    if (saveParameters()) {      m_isOK=true;      dispose();    }  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  int progress=0;  double xllcenter=0;  double yllcenter=0;  double xllcorner=0;  double yllcorner=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double arcNoData=-9999;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      arcFile=imageFiles[i];      if (!((new File(arcFile)).exists())) {        showFeedback("ArcGIS raster file does not exist.");        return;      }      if (arcFile.lastIndexOf(".") >= 0) {        String extension=arcFile.substring(arcFile.lastIndexOf("."));        whiteboxHeaderFile=arcFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=arcFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(arcFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (arcFile != null) {        String line;        String[] str;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("ncols")) {            cols=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("nrows")) {            rows=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("xllcenter")) {            xllcenter=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("yllcenter")) {            yllcenter=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("xllcorner")) {            xllcorner=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("yllcorner")) {            yllcorner=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("cellsize")) {            cellsize=Double.parseDouble(str[str.length - 1]);            if (xllcorner != 0) {              east=xllcorner + cols * cellsize;              west=xllcorner;              south=yllcorner;              north=yllcorner + rows * cellsize;            } else {              east=xllcenter - (0.5 * cellsize) + cols * cellsize;              west=xllcenter - (0.5 * cellsize);              south=yllcenter - (0.5 * cellsize);              north=yllcenter - (0.5 * cellsize) + rows * cellsize;            }          } else           if (str[0].toLowerCase().contains("nodata")) {            arcNoData=Double.parseDouble(str[str.length - 1]);          } else {            break;          }        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t-32768";        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        delimiter=" ";        row=0;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("ncols")) {          } else           if (str[0].toLowerCase().contains("nrows")) {          } else           if (str[0].toLowerCase().contains("xllcenter")) {          } else           if (str[0].toLowerCase().contains("yllcenter")) {          } else           if (str[0].toLowerCase().contains("xllcorner")) {          } else           if (str[0].toLowerCase().contains("yllcorner")) {          } else           if (str[0].toLowerCase().contains("cellsize")) {          } else           if (str[0].toLowerCase().contains("nodata")) {          } else {            for (i=0; i < str.length; i++) {              z=Double.parseDouble(str[i]);              if (z != arcNoData) {                wbr.setValue(row,col,z);              } else {                wbr.setValue(row,col,whiteboxNoData);              }              col++;              if (col == cols) {                col=0;                row++;              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  ThermometerPlot clone=(ThermometerPlot)super.clone();  if (clone.dataset != null) {    clone.dataset.addChangeListener(clone);  }  clone.rangeAxis=(ValueAxis)ObjectUtilities.clone(this.rangeAxis);  if (clone.rangeAxis != null) {    clone.rangeAxis.setPlot(clone);    clone.rangeAxis.addChangeListener(clone);  }  clone.valueFormat=(NumberFormat)this.valueFormat.clone();  clone.subrangePaint=(Paint[])this.subrangePaint.clone();  return clone;}  }
class C{  public void salvageRemote(GridCacheVersion ver){  assert ver != null;  GridCacheMvccCandidate cand=candidate(rmts,ver);  if (cand != null) {    assert rmts != null;    assert !rmts.isEmpty();    for (Iterator<GridCacheMvccCandidate> iter=rmts.iterator(); iter.hasNext(); ) {      GridCacheMvccCandidate rmt=iter.next();      if (rmt == cand)       break;      assert !rmt.nearLocal();      IgniteInternalTx tx=cctx.tm().tx(rmt.version());      if (tx != null) {        tx.systemInvalidate(true);        rmt.setOwner();        rmt.setUsed();      } else       iter.remove();    }  }}  }
class C{  public LabeledBorder(Border border){  this(border,null);}  }
class C{  public boolean wasMultiPacket(){  return this.wasMultiPacket;}  }
class C{  protected WebView createMacWebView(Dimension frameSize){  return new MacWebView(frameSize);}  }
class C{  public void testConsistentOrder() throws IOException {  Path raw=createTempDir();  for (int i=0; i < 100; i++) {    Files.createFile(raw.resolve("file" + i));  }  long seed=random().nextLong();  Path dirExpected=wrap(raw,seed);  List<String> expected=new ArrayList<>();  try (DirectoryStream<Path> stream=Files.newDirectoryStream(dirExpected)){    for (    Path path : stream) {      expected.add(path.getFileName().toString());    }  }   for (int i=0; i < 100; i++) {    Path scrambled=wrap(raw,random().nextLong());    Path ordered=wrap(scrambled,seed);    List<String> seen=new ArrayList<>();    try (DirectoryStream<Path> stream=Files.newDirectoryStream(ordered)){      for (      Path path : stream) {        seen.add(path.getFileName().toString());      }    }     assertEquals(expected,seen);  }}  }
class C{  public static boolean testSphereSphere(Vector3d centerA,double radiusSquaredA,Vector3d centerB,double radiusSquaredB){  return testSphereSphere(centerA.x,centerA.y,centerA.z,radiusSquaredA,centerB.x,centerB.y,centerB.z,radiusSquaredB);}  }
class C{  private ExifFilterUtils(){}  }
class C{  public void fireEffectorAdded(final Effector effector){  for (  WorldListener listener : listenerList) {    listener.effectorAdded(effector);  }}  }
class C{  private FrameLayout.LayoutParams createRootViewLayoutParams(){  FrameLayout.LayoutParams layoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT);  layoutParams.gravity=Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL;  return layoutParams;}  }
class C{  @Dev public QuestInStateCondition(final String questname,@Dev(defaultValue="0") final int index,final String state){  this.questname=checkNotNull(questname);  this.index=index;  this.state=checkNotNull(state);}  }
class C{  public int read() throws IOException {  int b=in.read();  if (b != -1) {    cksum.update(b);  }  return b;}  }
class C{  public static double[] listToArray(final List<? extends Number> list){  double[] array=new double[list.size()];  for (int i=0; i < array.length; i++) {    array[i]=list.get(i).doubleValue();  }  return array;}  }
class C{  protected void engineInit(int keysize,SecureRandom random){  if ((keysize != 112) && (keysize != 168)) {    throw new InvalidParameterException("Wrong keysize: must be " + "equal to 112 or 168");  }  this.keysize=keysize;  this.engineInit(random);}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  @Override @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="TLW_TWO_LOCK_WAIT") void checkQueueSizeConstraint() throws InterruptedException {  if (this.haContainer instanceof HAContainerMap && isPrimary()) {    if (Thread.interrupted())     throw new InterruptedException();synchronized (this.putGuard) {      if (putPermits <= 0) {synchronized (this.permitMon) {          if (reconcilePutPermits() <= 0) {            if (region.getSystem().getConfig().getRemoveUnresponsiveClient()) {              isClientSlowReciever=true;            } else {              try {                long logFrequency=CacheClientNotifier.DEFAULT_LOG_FREQUENCY;                CacheClientNotifier ccn=CacheClientNotifier.getInstance();                if (ccn != null) {                  logFrequency=ccn.getLogFrequency();                }                if ((this.maxQueueSizeHitCount % logFrequency) == 0) {                  logger.warn(LocalizedMessage.create(LocalizedStrings.HARegionQueue_CLIENT_QUEUE_FOR_0_IS_FULL,new Object[]{region.getName()}));                  this.maxQueueSizeHitCount=0;                }                ++this.maxQueueSizeHitCount;                this.region.checkReadiness();                this.permitMon.wait(CacheClientNotifier.eventEnqueueWaitTime);                this.region.checkReadiness();                reconcilePutPermits();                if ((this.maxQueueSizeHitCount % logFrequency) == 1) {                  logger.info(LocalizedMessage.create(LocalizedStrings.HARegionQueue_RESUMING_WITH_PROCESSING_PUTS));                }              } catch (              InterruptedException ex) {                this.permitMon.notify();                throw ex;              }            }          }        }      }      --putPermits;    }  }}  }
class C{  public static Map toMap(Object o,boolean duplicate,Map defaultValue){  try {    return toMap(o,duplicate);  } catch (  PageException e) {    return defaultValue;  }}  }
class C{  public SuperMatchBucket(final SimpleSuperMatch superMatch){  if (superMatch == null) {    throw new IllegalArgumentException("A SuperMatchBucket cannot be instantiated with a null superMatch reference");  }  supermatches.add(superMatch);  this.type=superMatch.getType();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Placing match to " + superMatch.getFirstEntry().getAc() + ", "+ superMatch.getLocation().getStart()+ " - "+ superMatch.getLocation().getEnd()+ " into NEW bucket "+ this.toString());  }}  }
class C{  public static boolean writeXMPMeta(InputStream inputStream,OutputStream outputStream,XMPMeta meta){  List<Section> sections=parse(inputStream,false);  sections=insertXMPSection(sections,meta);  if (sections == null) {    return false;  }  try {    writeJpegFile(outputStream,sections);  } catch (  IOException e) {    Log.d(TAG,"Write to stream failed",e);    return false;  } finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      IOException e) {      }    }  }  return true;}  }
class C{  public Pan(AbstractChart chart){  super(chart);}  }
class C{  public static boolean isSolarisSparc(){  return solaris && sparc;}  }
class C{  public void selectCard(SelectCardOptions sco,String s,int maxOpened,boolean exactOpened){  this.sco=sco;  this.maxOpened=maxOpened;  this.exactOpened=exactOpened;  prompt=s;  firstPass=false;  resetButtons();  HapticFeedback.vibrate(getContext(),AlertType.SELECT);  select.setVisibility(VISIBLE);  if (sco.isPassable()) {    pass.setVisibility(VISIBLE);    pass.setText(sco.passString);  } else   pass.setVisibility(INVISIBLE);  selectButtonState();}  }
class C{  @Deprecated public void createBusinessNoteStoreClientAsync(final OnClientCallback<AsyncBusinessNoteStoreClient> callback){  AsyncReflector.execute(this,callback,"createBusinessNoteStoreClient");}  }
class C{  private void optimize(){  root.getChildren().sortChildren();  isSorted=true;}  }
class C{  public void bindDouble(int index,double value){}  }
class C{  public static short binaryToShort(final boolean[] src,final int srcPos,final short dstInit,final int dstPos,final int nBools){  if ((src.length == 0 && srcPos == 0) || 0 == nBools) {    return dstInit;  }  if (nBools - 1 + dstPos >= 16) {    throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 16");  }  short out=dstInit;  int shift=0;  for (int i=0; i < nBools; i++) {    shift=i + dstPos;    final int bits=(src[i + srcPos] ? 1 : 0) << shift;    final int mask=0x1 << shift;    out=(short)((out & ~mask) | bits);  }  return out;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void init(Toast impl){  UsageReporting.report(FRCNetworkCommunicationsLibrary.tResourceType.kResourceType_Framework,1);  StateTracker.impl=impl;  boolean isAlive;  if (ToastBootstrap.isVerification)   VerificationWorker.begin();  while (true) {    if (impl.isDisabled()) {      if (!_state_disabled_init) {        transition(DISABLED);        _state_disabled_init=true;        _state_autonomous_init=false;        _state_teleop_init=false;        _state_test_init=false;      }      if (nextPeriodReady()) {        FRCHooks.observeDisabled();        tick(RobotState.DISABLED);      }    } else     if (impl.isAutonomous()) {      if (!_state_autonomous_init) {        transition(AUTONOMOUS);        _state_autonomous_init=true;        _state_disabled_init=false;        _state_teleop_init=false;        _state_test_init=false;      }      if (nextPeriodReady()) {        FRCHooks.observeAutonomous();        tick(RobotState.AUTONOMOUS);      }    } else     if (impl.isTest()) {      if (!_state_test_init) {        transition(TEST);        _state_test_init=true;        _state_disabled_init=false;        _state_autonomous_init=false;        _state_teleop_init=false;      }      if (nextPeriodReady()) {        FRCHooks.observeTest();        tick(RobotState.TEST);      }    } else {      if (!_state_teleop_init) {        transition(TELEOP);        _state_teleop_init=true;        _state_disabled_init=false;        _state_autonomous_init=false;        _state_test_init=false;      }      if (nextPeriodReady()) {        FRCHooks.observeTeleop();        tick(RobotState.TELEOP);      }    }    impl.station().waitForData();  }}  }
class C{  public static Beta serializableInstance(){  return new Beta();}  }
class C{  public void printInt(int v) throws IOException {  print(String.valueOf(v));}  }
class C{  public KeepWordFilterFactory(Map<String,String> args){  super(args);  wordFiles=get(args,"words");  ignoreCase=getBoolean(args,"ignoreCase",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static final synchronized HttpClient createHttpClient(int timeout){  SocketConfig socketConfig=SocketConfig.copy(SocketConfig.DEFAULT).setSoTimeout(2 * timeout).build();  List<String> targetPreferredAuthSchemes=new ArrayList<String>();  targetPreferredAuthSchemes.add(AuthSchemes.DIGEST);  targetPreferredAuthSchemes.add(AuthSchemes.BASIC);  RequestConfig requestConfig=RequestConfig.copy(RequestConfig.DEFAULT).setConnectTimeout(timeout).setAuthenticationEnabled(true).setRedirectsEnabled(true).setMaxRedirects(1).setCircularRedirectsAllowed(true).setTargetPreferredAuthSchemes(targetPreferredAuthSchemes).setCookieSpec(CookieSpecs.DEFAULT).build();  CloseableHttpClient httpClient=HttpClientBuilder.create().setDefaultSocketConfig(socketConfig).setDefaultRequestConfig(requestConfig).build();  return httpClient;}  }
class C{  public Message deepCopy(){  return new Message(this);}  }
class C{  public void removeTag(String aName){  int tagIndex;  if ((tagIndex=searchForTag(aName)) != -1) {    mTagList.remove(tagIndex);  }}  }
class C{  public CipherOutputStream(OutputStream os,BufferedBlockCipher cipher){  super(os);  this.bufferedBlockCipher=cipher;}  }
class C{  public OrganizationAlreadyExistsException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public String toMonitorString(){  String test=Constants.toMonitorString(this);  return "Send[" + getNumDataElements() + "]: "+ test+ "\n";}  }
class C{  private void closeContext(DirContext ctx){  if (ctx != null) {    try {      ctx.close();    } catch (    Exception e) {      logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_CLOSE_DIRECTORY_CONTEXT_FAILED);    }  }}  }
class C{  public static boolean pathExsits(String path){  return ((new File(path)).exists());}  }
class C{  public static XMLEventReader openEventReaderStream(InputStream inputStream){  if (inputStream == null) {    String message=Logging.getMessage("nullValue.InputStreamIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return openEventReaderStream(inputStream,true);}  }
class C{  public synchronized byte[] readMarkup() throws IOException {  if (Cfg.DEBUG) {    Check.requires(markupId != null,"agentId null");  }  final String markupName=makeMarkupName(markupId,true);  if (Cfg.DEBUG) {    Check.asserts(markupName != "","markupName empty");  }  final AutoFile fileRet=new AutoFile(markupName);  if (fileRet.exists()) {    final byte[] encData=fileRet.read();    final int len=ByteArray.byteArrayToInt(encData,0);    byte[] plain=null;    try {      plain=encryption.decryptData(encData,len,4);    } catch (    final CryptoException e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(TAG + " (readMarkup) Error: " + e);      }      return null;    }    if (Cfg.DEBUG) {      Check.asserts(plain != null,"wrong decryption: null");    }    if (Cfg.DEBUG) {      Check.asserts(plain.length == len,"wrong decryption: len");    }    return plain;  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error (readMarkup): Markup file does not exists");    }    return null;  }}  }
class C{  private void leaveZKDoubleBarrier(DistributedDoubleBarrier barrier,String path){  try {    log.info("Leaving the barrier {}",path);    boolean leaved=barrier.leave(DR_SWITCH_BARRIER_TIMEOUT,TimeUnit.SECONDS);    if (!leaved) {      log.warn("Unable to leave barrier for {}",path);    }  } catch (  Exception ex) {    log.warn("Unexpected errors during leaving barrier",ex);  }}  }
class C{  public VeriniceSearchResultTable(String typeId,String name,String[] propertyTypeIds){  this.id=typeId;  this.results=new HashSet<VeriniceSearchResultRow>(0);  this.name=name;  this.propertyTypeIds=propertyTypeIds;}  }
class C{  public static RoundingParams fromCornersRadii(float topLeft,float topRight,float bottomRight,float bottomLeft){  return (new RoundingParams()).setCornersRadii(topLeft,topRight,bottomRight,bottomLeft);}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  public UnrecoverableException(){  super();}  }
class C{  protected void layoutNorth(DockWrapper base,int x,int y,int maxwidth,int maxheight){  for (Iterator iter=base.getDockedWrappers().iterator(); iter.hasNext(); ) {    DockWrapper dw=(DockWrapper)iter.next();    Dimension d=dw.getPreferredSize();    int w=min(d.width,maxwidth);    int h=min(d.height,maxheight);    dw.setBounds(x,y,w,h);    if (!dw.canOcclude()) {      updateTop(backgroundBounds,y + h);    }    updateTop(occludingBounds,y + h);    layoutNorth(dw,x,y + h,maxwidth,maxheight - h);    x+=w;    maxwidth-=w;  }}  }
class C{  public static void save(File file,Class root){  try {    if (!file.exists()) {      file.getParentFile().mkdirs();      file.createNewFile();    }    PrintWriter writer=new PrintWriter(file);    Class clazz=root;    Object instance=root.newInstance();    save(writer,clazz,instance,0);    writer.close();  } catch (  Throwable e) {    e.printStackTrace();  }}  }
class C{  public TCompactProtocol(TTransport transport,long stringLengthLimit,long containerLengthLimit){  super(transport);  this.stringLengthLimit_=stringLengthLimit;  this.containerLengthLimit_=containerLengthLimit;}  }
class C{  @NonNull private NinePatchDrawable addTopLeftPatch(boolean isShadow,int xTo,int yTop){  NinePatchDrawable topStartDrawable;  NinePatchDrawable topStartBorderDrawable;  if (mBlock.getPreviousConnection() != null) {    mHelper.setPointMaybeFlip(mPreviousConnectorOffset,mOutputConnectorMargin,yTop);    topStartDrawable=getColoredPatchDrawable(isShadow ? R.drawable.top_start_previous_shadow : R.drawable.top_start_previous);    topStartBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.top_start_previous_border);    mPreviousConnectorHighlightPatch=mPatchManager.getPatchDrawable(R.drawable.top_start_previous_connection);  } else   if (mBlock.getOutputConnection() != null) {    mHelper.setPointMaybeFlip(mOutputConnectorOffset,mOutputConnectorMargin,yTop);    topStartDrawable=getColoredPatchDrawable(isShadow ? R.drawable.top_start_output_shadow : R.drawable.top_start_output);    topStartBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.top_start_output_border);    mOutputConnectorHighlightPatch=mPatchManager.getPatchDrawable(R.drawable.top_start_output_connection);  } else   if (mUseHat) {    topStartDrawable=getColoredPatchDrawable(isShadow ? R.drawable.top_start_hat_shadow : R.drawable.top_start_hat);    topStartBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.top_start_hat_border);  } else {    topStartDrawable=getColoredPatchDrawable(isShadow ? R.drawable.top_start_default_shadow : R.drawable.top_start_default);    topStartBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.top_start_default_border);  }  mHelper.setRtlAwareBounds(tempRect,mBlockViewSize.x,0,0,xTo,topStartDrawable.getIntrinsicHeight());  topStartDrawable.setBounds(tempRect);  topStartBorderDrawable.setBounds(tempRect);  if (mPreviousConnectorHighlightPatch != null) {    mPreviousConnectorHighlightPatch.setBounds(tempRect);  }  if (mOutputConnectorHighlightPatch != null) {    mOutputConnectorHighlightPatch.setBounds(tempRect);  }  mBlockPatches.add(topStartDrawable);  mBlockBorderPatches.add(topStartBorderDrawable);  return topStartDrawable;}  }
class C{  public void removeResolver(TemplateVariableResolver resolver){  Assert.isNotNull(resolver);  fResolvers.remove(resolver.getType());}  }
class C{  @Override public final boolean sendValues(){  return false;}  }
class C{  public void saveBytes(String filename,byte buffer[]){  saveBytes(saveFile(filename),buffer);}  }
class C{  public void processHttpRequestMessage(HttpMessage message){  HttpSessionTokensSet siteTokensSet=extension.getHttpSessionTokensSet(getSite());  if (siteTokensSet == null) {    log.debug("No session tokens for: " + this.getSite());    return;  }  List<HttpCookie> requestCookies=message.getRequestHeader().getHttpCookies();  HttpSession session=getMatchingHttpSession(requestCookies,siteTokensSet);  if (log.isDebugEnabled()) {    log.debug("Matching session for request message (for site " + getSite() + "): "+ session);  }  if (activeSession != null && activeSession != session) {    CookieBasedSessionManagementHelper.processMessageToMatchSession(message,requestCookies,activeSession);  } else {    if (activeSession == session) {      log.debug("Session of request message is the same as the active session, so no request changes needed.");    } else {      log.debug("No active session is selected.");    }    message.setHttpSession(session);  }}  }
class C{  public static SnmpOid toOid(long[] index,int start) throws SnmpStatusException {  try {    return new SnmpOid(index[start]);  } catch (  IndexOutOfBoundsException e) {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  }}  }
class C{  public final synchronized int size(){  return size;}  }
class C{  public static Map<String,String> strToMap(String str){  return strToMap(str,"|",false);}  }
class C{  public void addSetupActionLazy(Action<List<SetupAction>> lazyInternalSetupAction){  setupActions.addLazyAction(lazyInternalSetupAction);}  }
class C{  public boolean userCanCreateArch(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int parentArchMgrId=Defs.NULL_ID;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (dirId == Defs.NULL_ID || dirId == Defs.ROOT_DIR_ID)     parentArchMgrId=0; else     parentArchMgrId=getDirMgrId(dirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_CREATE,Defs.NULL_ID,parentArchMgrId,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  private static boolean compareStrings(final String s1,final String s2){  if (s1 == s2) {    return true;  }  if (s1 == null) {    return false;  }  return s1.equals(s2);}  }
class C{  public String locatorsString(){  return this.toString(true);}  }
class C{  public static GTEPercentage gtePercentage(final float percentage){  return new GTEPercentage(percentage);}  }
class C{  public TokenizerTextAnnotationBuilder(Tokenizer tokenizer){  this.tokenizer=tokenizer;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public RenewTokenRequestBuilder(SamlToken token,long tokenLifetime,JAXBContext jaxbContext,int requestValidityInSeconds){  assert token != null;  assert tokenLifetime > 0 : tokenLifetime;  this.token=token;  this.tokenLifetimeSec=tokenLifetime;  this.requestBuilderHelper=new RequestBuilderHelper(jaxbContext,requestValidityInSeconds,RENEW_SOAP_ACTION);}  }
class C{  @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @DSVerified @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.234 -0500",hash_original_method="854E1155516A65D2A0AC69045B4275C1",hash_generated_method="131BF72B6B1D1DE1F995D238334481A4") public void onLoadResource(WebView view,String url){}  }
class C{  public void output(String msg){  PrintStream out=this.out instanceof PrintStream ? (PrintStream)this.out : new PrintStream(this.out,true);  out.println(msg);}  }
class C{  public Pointer<T> map(CLQueue queue,MapFlags flags,CLEvent... eventsToWaitFor) throws CLException.MapFailure {  return map(queue,flags,0,getElementCount(),true,eventsToWaitFor).getFirst();}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream seq=new DerOutputStream();  name.encode(seq);  if (minimum != MIN_DEFAULT) {    DerOutputStream tmp=new DerOutputStream();    tmp.putInteger(minimum);    seq.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,false,TAG_MIN),tmp);  }  if (maximum != -1) {    DerOutputStream tmp=new DerOutputStream();    tmp.putInteger(maximum);    seq.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,false,TAG_MAX),tmp);  }  out.write(DerValue.tag_Sequence,seq);}  }
class C{  public _DeleteOptions(){  super();}  }
class C{  public void updateComboBox(JComboBox<Track> box,RollingStock rs,boolean filter,boolean destination){  updateComboBox(box);  if (!filter || rs == null) {    return;  }  List<Track> tracks=getTrackByNameList(null);  for (  Track track : tracks) {    String status="";    if (destination) {      status=rs.testDestination(this,track);    } else {      status=rs.testLocation(this,track);    }    if (status.equals(Track.OKAY) && (!destination || !track.getTrackType().equals(Track.STAGING))) {      box.setSelectedItem(track);      log.debug("Available track: {} for location: {}",track.getName(),getName());    } else {      box.removeItem(track);    }  }}  }
class C{  public void addValues(Set<Value> values){  for (  Value v : values) {    addValue(v);  }}  }
class C{  public static void write(final String data,final Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public Function createFunction(){  FunctionImpl function=new FunctionImpl();  return function;}  }
class C{  private static void parseSection(final int pendingC,final Reader reader,final boolean writingString,final StringBuilder templateExpressions) throws IOException {  if (writingString) {    templateExpressions.append("\"\"\"; ");  }  templateExpressions.append((char)pendingC);  while (true) {    int c=reader.read();    if (c == -1)     break;    if (c == '%') {      c=reader.read();      if (c == '>')       break;      templateExpressions.append('%');    }    templateExpressions.append((char)c);  }  templateExpressions.append(";\n ");}  }
class C{  public void testSetDate_int_Date() throws SQLException {  Calendar cal=new GregorianCalendar(1799,5,26);  Date[] dates={new Date(cal.getTimeInMillis()),new Date(Integer.MAX_VALUE),new Date(123456789)};  PreparedStatement ps=null;  PreparedStatement ps1=null;  try {    String query="insert into type (dateVal) values (?);";    ps=conn.prepareStatement(query);    for (int i=0; i < dates.length; i++) {      ps.setDate(1,dates[i]);      assertFalse(ps.execute());      assertTrue(ps.getUpdateCount() > 0);    }    try {      ps.setDate(2,dates[0]);      fail("SQLException is not thrown");    } catch (    Exception sqle) {    }    ps.close();    try {      ps.setDate(1,dates[0]);      fail("SQLException is not thrown");    } catch (    SQLException sqle) {    }    String query1="insert into type (Tint) values (?);";    ps1=conn.prepareStatement(query1);    try {      ps1.setDate(1,dates[0]);      fail("SQLException is not thrown");    } catch (    SQLException sqle) {      assertEquals("SQLite.Exception: error in prepare",sqle.getMessage());    }  }  finally {    try {      if (ps != null)       ps.close();      if (ps1 != null)       ps1.close();    } catch (    SQLException ee) {    }  }}  }
class C{  private void scrollToPosition(final long position){  m_scrollbar.setValue((int)position / (2 * m_bytesPerRow));}  }
class C{  public void reset(String groupColumnName,String functionColumnName){  String key=groupColumnName + DELIMITER + functionColumnName;  PrintDataFunction pdf=(PrintDataFunction)m_groupFunction.get(key);  if (pdf != null)   pdf.reset();}  }
class C{  public boolean hasOpenAccess(){  return hasExtension(OpenAccess.class);}  }
class C{  @SuppressWarnings("unchecked") public void add(T... elements){  for (  T element : elements) {    add(element);  }}  }
class C{  @Override protected void exportDone(JComponent source,Transferable data,int action){}  }
class C{  private void doShardReport(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (!isReadable(getServletContext(),req,resp)) {    return;  }  if (!getBigdataRDFContext().isScaleOut()) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Not scale-out");    return;  }  final boolean doRangeCount=true;  final Resource s;  final URI p;  final Value o;  final Resource c;  try {    s=EncodeDecodeValue.decodeResource(req.getParameter("s"));    p=EncodeDecodeValue.decodeURI(req.getParameter("p"));    o=EncodeDecodeValue.decodeValue(req.getParameter("o"));    c=EncodeDecodeValue.decodeResource(req.getParameter("c"));  } catch (  IllegalArgumentException ex) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,ex.getLocalizedMessage());    return;  }  if (log.isInfoEnabled())   log.info("SHARDS: access path: (s=" + s + ", p="+ p+ ", o="+ o+ ", c="+ c+ ")");  try {    submitApiTask(new ShardsTask(req,resp,getNamespace(req),getTimestamp(req),s,p,o,c,doRangeCount)).get();  } catch (  Throwable t) {    launderThrowable(t,resp,"SHARDS: access path: (s=" + s + ", p="+ p+ ", o="+ o+ ", c="+ c+ ")");  }}  }
class C{  public void testExtensionb(){  final ShortChunks sc=new ShortChunks(200,7);  sc.integrity();  assertEquals(2,sc.arrayLength());  assertEquals(200,sc.length());  sc.set(0,42);  assertEquals(42,sc.get(0));  sc.set(199,43);  assertEquals(43,sc.get(199));  set(0,sc);  check(sc);  assertEquals(200,sc.extendBy(10));  assertEquals(210,sc.length());  assertEquals(2,sc.arrayLength());  set(200,sc);  check(sc);  assertEquals(210,sc.extendBy(10));  assertEquals(220,sc.length());  assertEquals(2,sc.arrayLength());  assertEquals(220,sc.extendBy(0));  assertEquals(220,sc.length());  assertEquals(2,sc.arrayLength());  assertEquals(220,sc.extendBy(100));  assertEquals(320,sc.length());  assertEquals(6,sc.arrayLength());  set(210,sc);  check(sc);  assertEquals(320,sc.extendBy(1000));  assertEquals(1320,sc.length());  assertEquals(14,sc.arrayLength());  set(320,sc);  check(sc);  try {    sc.extendBy(-1);    fail();  } catch (  final IllegalArgumentException e) {    assertEquals("-1",e.getMessage());  }}  }
class C{  public boolean isUsable(){  return usable;}  }
class C{  public SettingsActionProvider(Context context){  super(context);  mContext=context;}  }
class C{  public NineSwitchesGameBoard(StendhalRPZone zone,int x,int y){  this.zone=zone;  this.x=x;  this.y=y;  createSwitches();}  }
class C{  public void endCDATA() throws SAXException {  m_textType=DTM.TEXT_NODE;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  @Override public void actionPerformed(ActionEvent e){  WalletData perWalletModelData=this.bitcoinController.getModel().getActivePerWalletModelData();  boolean haveFilesChanged=this.bitcoinController.getFileHandler().haveFilesChanged(perWalletModelData);  if (haveFilesChanged) {    perWalletModelData.setFilesHaveBeenChangedByAnotherProcess(true);    this.bitcoinController.fireFilesHaveBeenChangedByAnotherProcess(perWalletModelData);  } else {    Image image=getImageFromClipboard();    if (image != null) {      if (tradePanel != null) {        tradePanel.processDroppedImage(image);      }    } else {      TextTransfer textTransfer=new TextTransfer();      String stringToPaste=textTransfer.getClipboardContents();      if (stringToPaste != null) {        stringToPaste=WhitespaceTrimmer.trim(stringToPaste);        if (tradePanel != null) {          tradePanel.processDecodedString(stringToPaste,null);        }      }    }    controller.displayView(controller.getCurrentView());  }}  }
class C{  @Override public void draw(Graphics2D g){  Figure o=getOwner();  if (o.get(LINK) != null && o.get(LINK).trim().length() > 0) {    g.setColor((Color)getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR));    Rectangle r=basicGetBounds();    g.drawLine(r.x + (r.width / 2) - 1,r.y,r.x,r.y);    g.drawLine(r.x,r.y,r.x,r.y + r.height - 1);    g.drawLine(r.x,r.y + r.height - 1,r.x + (r.width / 2) - 1,r.y + r.height - 1);    g.drawLine(r.x + (r.width / 3),r.y + r.height / 2,r.x + r.width - 1,r.y + r.height / 2);    g.drawLine(r.x + r.width - 1,r.y + r.height / 2,(int)(r.x + r.width * .75 - 1),(int)(r.y + r.height * .25));    g.drawLine(r.x + r.width - 1,r.y + r.height / 2,(int)(r.x + r.width * .75 - 1),(int)(r.y + r.height * .75));  }}  }
class C{  protected FileStore(DataHandler handler,String name,String mode){  this.handler=handler;  this.name=name;  try {    boolean exists=FileUtils.exists(name);    if (exists && !FileUtils.canWrite(name)) {      mode="r";    } else {      FileUtils.createDirectories(FileUtils.getParent(name));    }    file=FileUtils.open(name,mode);    if (exists) {      fileLength=file.size();    }  } catch (  IOException e) {    throw DbException.convertIOException(e,"name: " + name + " mode: "+ mode);  }  this.mode=mode;}  }
class C{  public FrameState duplicate(int newBci){  return graph().add(new FrameState(outerFrameState(),code,newBci,values,localsSize,stackSize,rethrowException,duringCall,monitorIds,virtualObjectMappings));}  }
class C{  public void addListener(final T listener){  Preconditions.checkNotNull(listener,"Internal Error: Listener cannot be null");  if (m_listeners == null) {synchronized (this) {      if (m_listeners == null) {        m_listeners=new LinkedHashSet<WeakReference<T>>();      }    }  }synchronized (m_listeners) {    if (!m_listeners.add(new ComparableReference(listener))) {    }  }}  }
class C{  public Vec4[] clip(Vec4 pa,Vec4 pb){  if (pa == null || pb == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (pa.equals(pb))   return null;  Line line=Line.fromSegment(pa,pb);  double ldotv=this.n.dot3(line.getDirection());  if (ldotv == 0) {    double ldots=this.n.dot4(line.getOrigin());    if (ldots == 0)     return new Vec4[]{pa,pb}; else     return null;  }  double t=-this.n.dot4(line.getOrigin()) / ldotv;  if (t < 0 || t > 1)   return null;  Vec4 p=line.getPointAt(t);  if (ldotv > 0)   return new Vec4[]{p,pb}; else   return new Vec4[]{pa,p};}  }
class C{  protected void deleteLink(Link link,String reason){  if (link == null)   return;  List<Link> linkList=new ArrayList<Link>();  linkList.add(link);  deleteLinks(linkList,reason);}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  public void applyConfig(final ConfigSettings config){  map.get(PanelKeys.PANEL_VALUES).applyConfig(config);  map.get(PanelKeys.PANEL_EXTERNALS).applyConfig(config);  map.get(PanelKeys.PANEL_INPUT).applyConfig(config);  map.get(PanelKeys.PANEL_OUTPUT).applyConfig(config);  map.get(PanelKeys.PANEL_SQL).applyConfig(config);  map.get(PanelKeys.PANEL_CACHE).applyConfig(config);  map.get(PanelKeys.PANEL_LOGGING).applyConfig(config);  map.get(PanelKeys.PANEL_DEBUG).applyConfig(config);  map.get(PanelKeys.PANEL_FILTER).applyConfig(config);}  }
class C{  public Builder onCircuitBreakerEvent(CircuitBreakerEventListener circuitBreakerEventListener){  if (circuitBreakerEventListener == null) {    throw new IllegalArgumentException("circuitBreakerEventListener must not be null");  }  this.circuitBreakerEventListener=circuitBreakerEventListener;  return this;}  }
class C{  public boolean isNotEmpty(){  return !isEmpty();}  }
class C{  public int size(){  return m_lookup.size();}  }
class C{  protected boolean isEqualValue(Object value1,Object value2){  return (value1 == value2 || value1.equals(value2));}  }
class C{  @After public void unregisterIdlingResource(){  Espresso.unregisterIdlingResources(MyApplication.getInstance().getCountingIdlingResource());}  }
class C{  public static int GetId(){  return ((IdThread)Thread.currentThread()).id;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @Override public AbstractFrame openFrame(@Nullable Component parent,String windowAlias,Map<String,Object> params){  return (AbstractFrame)frame.openFrame(parent,windowAlias,params);}  }
class C{  public static final LocoNetMessage createIplSpecificSlaveQueryPacket(Integer slaveMfr,Integer slaveDevice){  LocoNetMessage m=createQueryAllIplDevicesPacket();  m.setElement(7,slaveMfr);  m.setElement(6,slaveDevice);  return m;}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  protected TraceStateExitedImpl(){  super();}  }
class C{  protected void initializeBeanContextResources(){}  }
class C{  public static Edge findEdge(Vertex v1,Vertex v2){  Edge e=null;  int cnt=v1.getEdges().size();  for (int i=0; i < cnt; i++) {    e=v1.getEdges().get(i);    if (e.getOpposite(v1) == v2) {      return e;    }  }  return null;}  }
class C{  static BodyQName createBOSH(final String local){  return createWithPrefix(BOSH_NS_URI,local,null);}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
class C{  @Override public void addRemove(EventBean[] newData,EventBean[] oldData){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qIndexAddRemove(this,newData,oldData);  }  if (oldData != null) {    for (    EventBean theEvent : oldData) {      remove(theEvent);    }  }  if (newData != null) {    for (    EventBean theEvent : newData) {      add(theEvent);    }  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aIndexAddRemove();  }}  }
class C{  public void initialize(){  lineState=new LinkedListLineState();  eq=new EventQueue();  super.initialize();}  }
class C{  public Map<String,AnnotatedMember> findBackReferenceProperties(){  HashMap<String,AnnotatedMember> result=null;  for (  BeanPropertyDefinition property : _properties) {    AnnotatedMember am=property.getMutator();    if (am == null) {      continue;    }    AnnotationIntrospector.ReferenceProperty refDef=_annotationIntrospector.findReferenceType(am);    if (refDef != null && refDef.isBackReference()) {      if (result == null) {        result=new HashMap<String,AnnotatedMember>();      }      String refName=refDef.getName();      if (result.put(refName,am) != null) {        throw new IllegalArgumentException("Multiple back-reference properties with name '" + refName + "'");      }    }  }  return result;}  }
class C{  public static void insertContextOperation(TaskCompleter taskCompleter,String operation,Object... args){  if (taskCompleter != null) {    ExportOperationContext context=(ExportOperationContext)WorkflowService.getInstance().loadStepData(taskCompleter.getOpId());    if (context != null) {      context.insertOperation(operation,args);      WorkflowService.getInstance().storeStepData(taskCompleter.getOpId(),context);    } else {      _log.warn("Rollback context was not found for op: " + taskCompleter.getOpId());    }  }}  }
class C{  public void test_wrap_06(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,0,bbA.length,bb);  } catch (  Exception ex) {    fail("Unexpected exception: " + ex);  }}  }
class C{  protected void addTestFile(String fileName,ProtocolSession session) throws Exception {  fileName=scriptDirectory + fileName;  InputStream is=this.getClass().getResourceAsStream(fileName);  if (is == null) {    throw new Exception("Test Resource '" + fileName + "' not found.");  }  try {    builder.addProtocolLinesFromStream(is,session,fileName);  }  finally {    IOUtils.closeQuietly(is);  }}  }
class C{  @Override public PLIImage crop(CGRect rect){  return this.crop(rect.x,rect.y,rect.width,rect.height);}  }
class C{  public static void shiftLeft(int[] vix,double[] vmb){  int iCurInd=0;  for (int i=0; i < vix.length; i++) {    double dPrevVal=vmb[iCurInd];    while (i < vix.length && dPrevVal == vmb[i])     i++;    if (i < vix.length) {      for (int j=iCurInd; j < i; ++j)       vix[j]=vix[i];      iCurInd=i;    }  }}  }
class C{  public KernelDensityFunction(double[][] points){  this.points=points;  if (points.length == 0) {    throw new RuntimeException("KDE must contain at least one point");  }  isBounded=shouldBeBounded();  bandwidths=estimateBandwidths();  samplingDeviation=Arrays.stream(bandwidths).map(null).toArray();}  }
class C{  @SuppressWarnings("unchecked") private void check(Class cls) throws Exception {  cache.put(1,createInstance(cls,10));  cache.put(2,createInstance(cls,20));  cache.put(3,createInstance(cls,30));  Iterator iter=cache.query(new SqlQuery(cls,"val=20")).iterator();  assert iter.hasNext();  Cache.Entry res=(Cache.Entry)iter.next();  assertEquals(2,res.getKey());  assertEquals(Integer.valueOf(20),U.field(res.getValue(),"val"));  assert !iter.hasNext();  iter=cache.query(new SqlFieldsQuery("SELECT p.val FROM " + cls.getSimpleName() + " p WHERE p.val=20")).iterator();  assert iter.hasNext();  List<Object> fieldsRes=(List<Object>)iter.next();  assertEquals(20,fieldsRes.get(0));  assert !iter.hasNext();}  }
class C{  public final void init(Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {  if (spi != null) {    spi.engineInit(key,params);  } else {    chooseProvider(key,params);  }  initialized=true;  if (!skipDebug && pdebug != null) {    pdebug.println("Mac." + algorithm + " algorithm from: "+ this.provider.getName());  }}  }
class C{  public void info(Object message){  log(LogSystem.INFO_ID,message);}  }
class C{  void _m30(float m30){  this.m30=m30;}  }
class C{  protected void onNickChange(String oldNick,String login,String hostname,String newNick){}  }
class C{  static void usage(){  System.out.println("Usage:");  System.out.println("      -s (in order to serialize)");  System.out.println("      -d (in order to deserialize)");}  }
class C{  public ListQueryBinding(TupleSet ts,String field){  this(ts,field,true);}  }
class C{  public GridLayoutAnimationController(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.GridLayoutAnimation);  Animation.Description d=Animation.Description.parseValue(a.peekValue(com.android.internal.R.styleable.GridLayoutAnimation_columnDelay));  mColumnDelay=d.value;  d=Animation.Description.parseValue(a.peekValue(com.android.internal.R.styleable.GridLayoutAnimation_rowDelay));  mRowDelay=d.value;  mDirection=a.getInt(com.android.internal.R.styleable.GridLayoutAnimation_direction,DIRECTION_LEFT_TO_RIGHT | DIRECTION_TOP_TO_BOTTOM);  mDirectionPriority=a.getInt(com.android.internal.R.styleable.GridLayoutAnimation_directionPriority,PRIORITY_NONE);  a.recycle();}  }
class C{  public static String[] toStringArray(Object[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=StringUtil.toString(array[i]);  }  return result;}  }
class C{  public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures){  List<ShardOperationFailedException> uniqueFailures=new ArrayList<>();  Set<GroupBy> reasons=new HashSet<>();  for (  ShardOperationFailedException failure : failures) {    GroupBy reason=new GroupBy(failure.getCause());    if (reasons.contains(reason) == false) {      reasons.add(reason);      uniqueFailures.add(failure);    }  }  return uniqueFailures.toArray(new ShardOperationFailedException[0]);}  }
class C{  public static <K extends HasIdentity,T extends ServerResource<K>>Restlet newInstance(Module module,Router router,Class<T> resourceClass,Class<K> entityClass){  @SuppressWarnings("unchecked") ResourceFactory<K,T> factory=module.newObject(DefaultResourceFactoryImpl.class,resourceClass,router);  return module.newObject(ZestEntityRestlet.class,factory,router,entityClass,new ZestConverter(module));}  }
class C{  private void cmd_searchTo(){  int row=xMatchedTable.getSelectedRow();  log.config("Row=" + row);  double qty=0.0;  if (row < 0) {    xMatchedToTable.setRowCount(0);  } else {    String displayString=(String)matchTo.getSelectedItem().getLabel();    int matchToType=matchFrom.getSelectedIndex();    double docQty=((Double)xMatchedTable.getValueAt(row,I_QTY)).doubleValue();    double matchedQty=((Double)xMatchedTable.getValueAt(row,I_MATCHED)).doubleValue();    qty=docQty - matchedQty;    xMatchedToTable=(WListbox)cmd_searchTo(xMatchedTable,xMatchedToTable,displayString,matchToType,sameBPartner.isSelected(),sameProduct.isSelected(),sameQty.isSelected(),matchMode.getSelectedIndex() == MODE_MATCHED);  }  m_xMatched=new BigDecimal(qty);  xMatched.setValue(m_xMatched);  xMatchedTo.setValue(Env.ZERO);  difference.setValue(m_xMatched);  statusBar.setStatusLine(matchFrom.getSelectedItem().getLabel() + "# = " + xMatchedTable.getRowCount()+ " - "+ getMatchToLabel()+ "# = "+ xMatchedToTable.getRowCount(),xMatchedToTable.getRowCount() == 0);  statusBar.setStatusDB("0");}  }
class C{  private Query analyzeMultiBoolean(String field,TokenStream stream,BooleanClause.Occur operator) throws IOException {  BooleanQuery.Builder q=newBooleanQuery();  List<Term> currentQuery=new ArrayList<>();  TermToBytesRefAttribute termAtt=stream.getAttribute(TermToBytesRefAttribute.class);  PositionIncrementAttribute posIncrAtt=stream.getAttribute(PositionIncrementAttribute.class);  stream.reset();  while (stream.incrementToken()) {    if (posIncrAtt.getPositionIncrement() != 0) {      add(q,currentQuery,operator);      currentQuery.clear();    }    currentQuery.add(new Term(field,termAtt.getBytesRef()));  }  add(q,currentQuery,operator);  return q.build();}  }
class C{  public CostMatrix(CostMatrix toCopy){  this(toCopy.size());  for (int i=0; i < m_size; i++) {    for (int j=0; j < m_size; j++) {      setCell(i,j,toCopy.getCell(i,j));    }  }}  }
class C{  protected void initFailureDetectionTimeout(){  if (failureDetectionTimeoutEnabled) {    failureDetectionTimeout=ignite.configuration().getFailureDetectionTimeout();    if (failureDetectionTimeout <= 0)     throw new IgniteSpiException("Invalid failure detection timeout value: " + failureDetectionTimeout); else     if (failureDetectionTimeout <= 10)     log.warning("Failure detection timeout is too low, it may lead to unpredictable behaviour " + "[failureDetectionTimeout=" + failureDetectionTimeout + ']');  } else   if (ignite.configuration().getFailureDetectionTimeout() != IgniteConfiguration.DFLT_FAILURE_DETECTION_TIMEOUT)   log.warning("Failure detection timeout will be ignored (one of SPI parameters has been set explicitly)");}  }
class C{  public int rtf(XPathContext support){  return DTM.NULL;}  }
class C{  @org.junit.Test public void verify303Response() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  try {    String str=client.invokeAPI("/issue-128","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);    fail("expected non-200 response");  } catch (  ApiException e) {    assertTrue(e.getCode() == 303);    assertEquals(e.getMessage(),"\"http://foo.bar/other\"");  }}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  public boolean isPaintable(){  return false;}  }
class C{  public boolean isWildcardType(){  return type instanceof WildcardType;}  }
class C{  public static double interpolateAngle360(double amount,double degrees1,double degrees2){  double angle1=normalizeAngle180(degrees1);  double angle2=normalizeAngle180(degrees2);  if (angle1 - angle2 > 180) {    angle2+=360;  } else   if (angle1 - angle2 < -180) {    angle1+=360;  }  double angle=(1 - amount) * angle1 + amount * angle2;  return normalizeAngle360(angle);}  }
class C{  public LoaderCtrl(String configFile,TungstenProperties loaderProperties) throws Exception {  this.configFile=configFile;  this.loaderProperties=loaderProperties;}  }
class C{  public void step(SimState state){  Asteroids asteroids=(Asteroids)state;  orientation+=rotationalVelocity;  Double2D location=asteroids.field.getObjectLocation(this);  if (location == null)   return;  asteroids.field.setObjectLocation(this,new Double2D(asteroids.field.stx(location.x + velocity.x),asteroids.field.sty(location.y + velocity.y)));}  }
class C{  static void enableInstrumentation(){  instrumentationEnabled=true;}  }
class C{  boolean readModule(int row,int column,int numRows,int numColumns){  if (row < 0) {    row+=numRows;    column+=4 - ((numRows + 4) & 0x07);  }  if (column < 0) {    column+=numColumns;    row+=4 - ((numColumns + 4) & 0x07);  }  readMappingMatrix.set(column,row);  return mappingBitMatrix.get(column,row);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  protected void illegalMessageReceived(OFMessage m){  String msg=getSwitchStateMessage(m,"Switch should never send this message in the current state");  throw new SwitchStateException(msg);}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  @Override public String hmset(final String key,final Map<String,String> hash){  checkIsInMultiOrPipeline();  client.hmset(key,hash);  return client.getStatusCodeReply();}  }
class C{  private void updateContact(int index){  Contact contact=contacts.get(index);  Intent intent=new Intent(this,ViewActivity.class);  intent.putExtra("CONTACT",contact);  startActivity(intent);}  }
class C{  public void updateNotificationsFromServer(UpdatePolicy updatePolicy){  updateNotificationsFromServer(updatePolicy,null);}  }
class C{  public CouldntLoadDriverException(final String msg){  super(msg);}  }
class C{  public static VisorIgfsProfilerEntry aggregateIgfsProfilerEntries(List<VisorIgfsProfilerEntry> entries){  assert !F.isEmpty(entries);  if (entries.size() == 1)   return entries.get(0); else {    String path=entries.get(0).path();    Collections.sort(entries,VisorIgfsProfilerEntry.ENTRY_TIMESTAMP_COMPARATOR);    long ts=0;    long size=0;    long bytesRead=0;    long readTime=0;    long userReadTime=0;    long bytesWritten=0;    long writeTime=0;    long userWriteTime=0;    IgfsMode mode=null;    VisorIgfsProfilerUniformityCounters counters=new VisorIgfsProfilerUniformityCounters();    for (    VisorIgfsProfilerEntry entry : entries) {      ts=entry.timestamp();      size=entry.size();      mode=entry.mode();      bytesRead+=entry.bytesRead();      readTime+=entry.readTime();      userReadTime+=entry.userReadTime();      bytesWritten+=entry.bytesWritten();      writeTime+=entry.writeTime();      userWriteTime+=entry.userWriteTime();      counters.aggregate(entry.counters());    }    return new VisorIgfsProfilerEntry(path,ts,mode,size,bytesRead,readTime,userReadTime,bytesWritten,writeTime,userWriteTime,counters);  }}  }
class C{  public void listDirectory(){  listDirectory(null,false,"null");}  }
class C{  @SuppressWarnings("unchecked") private void handleWhereClause(final ASTQuery astQuery,final QueryBase queryRoot) throws VisitorException {  final ASTWhereClause whereClause=astQuery.getWhereClause();  if (whereClause != null) {    final ASTGraphPatternGroup graphPatternGroup=whereClause.getGraphPatternGroup();    graphPattern=scopedGroupGraphPattern(astQuery);    final GraphPatternGroup<IGroupMemberNode> ret=(GraphPatternGroup<IGroupMemberNode>)graphPatternGroup.jjtAccept(this,null);    queryRoot.setWhereClause(ret);  }}  }
class C{  public void removeReservedCapacityForVolumes(Collection<String> objectIdStrings){  if (objectIdStrings != null && _reservedCapacityMap != null) {    for (    String idString : objectIdStrings) {      _reservedCapacityMap.remove(idString);    }  }}  }
class C{  public void indentWithSpaces(int tabToSpaces){  customLazy("indentWithSpaces",null);}  }
class C{  public static List<Long> entropyTest(GeoTimeSerie gts,int buckets_per_period) throws WarpScriptException {  doubleCheck(gts);  List<Long> anomalous_ticks=new ArrayList<Long>();  if (true) {    throw new WarpScriptException("entropyTest: Work In Progress. Consider using entropyHybridTest");  }  return anomalous_ticks;}  }
class C{  public RyaStatementWritable(RyaTripleContext ryaContext){  this.ryaContext=ryaContext;}  }
class C{  public void readMap(File file,MapBuilder builder){  try {    MapBuilderProxy proxy;    if (boundingBox != null)     proxy=new BBBuilderProxy(builder,boundingBox); else     if (attFilter != null)     proxy=new FilteringBuilderProxy(builder,attFilter); else     proxy=new MapBuilderProxy(builder);    parseMap(createFileStream(file),proxy);    if (proxy.nodeRefsWithoutDefsAdded()) {      if (boundingBox != null || attFilter != null) {        LOG.info("Starting to parse the map file a second time.");        proxy.incrementCounter();        parseMap(createFileStream(file),proxy);      } else {        LOG.warning("Nodes were referenced in ways but not defined before.");      }    }  } catch (  FileNotFoundException e) {    LOG.warning("File does not exist " + file);  }catch (  Exception e) {    LOG.warning("The map could not be read. " + e);    e.printStackTrace();  } finally {    boundingBox=null;    attFilter=null;  }}  }
class C{  public static void sendCompressedFile(HttpServletRequest request,HttpServletResponse response,File file) throws IOException {  try (ZipOutputStream zip=new ZipOutputStream(response.getOutputStream());InputStream fileInput=new BufferedInputStream(new FileInputStream(file))){    response.setContentType("application/zip");    response.setHeader("Content-Disposition","attachment; filename=" + file.getName() + ".zip");    zip.putNextEntry(new ZipEntry(file.getName()));    byte[] buffer=new byte[4096];    long len;    while ((len=fileInput.read(buffer)) > 0) {      zip.write(buffer,0,(int)len);    }    zip.closeEntry();  } }  }
class C{  public sun.net.ftp.FtpClient siteCmd(String cmd) throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("SITE " + cmd);  return this;}  }
class C{  static AttrRequests createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrRequests(str);  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  protected String bratInitLaterCommand(){  return "Wicket.$('" + vis.getMarkupId() + "').dispatcher.post('ajax', "+ "[{action: 'getCollectionInformation',collection: '"+ getCollection()+ "'}, 'collectionLoaded', {collection: '"+ getCollection()+ "',keep: true}]);";}  }
class C{  public void makeCurrent(){  mEglCore.makeCurrent(mEGLSurface);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  return Boolean.valueOf(o instanceof sage.vfs.MediaNode);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document anotherDoc;  Node node;  doc=(Document)load("staffNS",true);  anotherDoc=(Document)load("staffNS",true);{    boolean success=false;    try {      node=doc.importNode(anotherDoc,false);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
class C{  @Override public String toString(){  return "ReadCharactersFromHallOfFameCommand [fametype=" + fametype + ", characterNames="+ characterNames+ ", max="+ max+ ", ascending="+ ascending+ "]";}  }
class C{  public DownloadingInfo cancel(){  return new DownloadingInfo(this._version,this._size,0,DownloadStatus.CANCELLED,this._errorCounter);}  }
class C{  public static boolean isSubset(Set<? extends Statement> model1,Set<? extends Statement> model2){  if (model1.size() > model2.size()) {    return false;  }  return isSubsetInternal(model1,model2);}  }
class C{  public EditorFileFilter(String description){  desc=description;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public static void ensureIncreasingLastModifiedTime(Path... files){  final int maxDelta=(int)(2 * getFileTimeResolution());  final int minDelta=(int)getFileTimeResolution();  long fileTime=System.currentTimeMillis() - files.length * maxDelta;  try {    for (    Path file : files) {      Files.setLastModifiedTime(file,FileTime.fromMillis(fileTime));      fileTime+=ThreadLocalRandom.current().nextInt(minDelta,maxDelta);    }  } catch (  IOException e) {    Throwables.propagate(e);  }}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (objectToCompare instanceof Rule) {    if (null == this.getIdRule() || null == this.getVersion()) {      return false;    }    if (this.getStrategy().getIdStrategy().equals(((Rule)objectToCompare).getStrategy().getIdStrategy()) && this.getVersion().equals(((Rule)objectToCompare).getVersion())) {      return true;    }  }  return false;}  }
class C{  public void selectAttributesCVSplit(Instances split) throws Exception {  double[][] attributeRanking=null;  if (m_trainInstances == null) {    m_trainInstances=split;  }  if (m_rankResults == null && m_subsetResults == null) {    m_subsetResults=new double[split.numAttributes()];    m_rankResults=new double[4][split.numAttributes()];  }  m_ASEvaluator.buildEvaluator(split);  int[] attributeSet=m_searchMethod.search(m_ASEvaluator,split);  attributeSet=m_ASEvaluator.postProcess(attributeSet);  if ((m_searchMethod instanceof RankedOutputSearch) && (m_doRank == true)) {    attributeRanking=((RankedOutputSearch)m_searchMethod).rankedAttributes();    for (int j=0; j < attributeRanking.length; j++) {      m_rankResults[0][(int)attributeRanking[j][0]]+=attributeRanking[j][1];      m_rankResults[2][(int)attributeRanking[j][0]]+=(attributeRanking[j][1] * attributeRanking[j][1]);      m_rankResults[1][(int)attributeRanking[j][0]]+=(j + 1);      m_rankResults[3][(int)attributeRanking[j][0]]+=(j + 1) * (j + 1);    }  } else {    for (int j=0; j < attributeSet.length; j++) {      m_subsetResults[attributeSet[j]]++;    }  }}  }
class C{  private Cast(){  throw new UnsupportedOperationException();}  }
class C{  protected static CharacterReference lookup(CharacterReference key){  String string;  int index;  String kernel;  char character;  CharacterReference test;  CharacterReference ret;  ret=null;  index=java.util.Arrays.binarySearch(mCharacterReferences,key);  string=key.getKernel();  if (index < mCharacterReferences.length && index >= 0) {    ret=mCharacterReferences[index];    kernel=ret.getKernel();    if (!string.regionMatches(0,kernel,0,kernel.length())) {      ret=null;    }  }  if (null == ret) {    character=string.charAt(0);    while (--index >= 0) {      test=mCharacterReferences[index];      kernel=test.getKernel();      if (character == kernel.charAt(0)) {        if (string.regionMatches(0,kernel,0,kernel.length())) {          ret=test;          break;        }      } else       break;    }  }  return (ret);}  }
class C{  public void saveProject(){  getProjectUIFacade().saveProject(getProject());}  }
class C{  public boolean isInJavadoc(){  return this.javadoc != 0;}  }
class C{  private static boolean isElementVisible(WebElement element){  Preconditions.checkNotNull(element);  return element.isDisplayed();}  }
class C{  public long sigignore(){  return Long.parseLong(fields[32]);}  }
class C{  public Set<String> names(){  return states.keySet();}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public String renamePattern(){  return renamePattern;}  }
class C{  public String produce(File file,String offset,int maxBatchSize,BatchMaker batchMaker) throws StageException, BadSpoolFileException {  String sourceFile=file.getName();  try {    if (parser == null) {switch (conf.dataFormat) {case AVRO:        parser=parserFactory.getParser(file,offset);      break;case WHOLE_FILE:    FileRef localFileRef=new LocalFileRef.Builder().filePath(file.getAbsolutePath()).bufferSize(conf.dataFormatConfig.wholeFileMaxObjectLen).createMetrics(true).totalSizeInBytes(Files.size(file.toPath())).build();  parser=parserFactory.getParser(file.getName(),getFileMetadata(file),localFileRef);break;default :parser=parserFactory.getParser(file.getName(),new FileInputStream(file),offset);}}int i=0;while (i < maxBatchSize) {try {Record record;try {record=parser.parse();} catch (RecoverableDataParserException ex) {record=ex.getUnparsedRecord();setHeaders(record,file,offset);errorRecordHandler.onError(new OnRecordErrorException(record,ex.getErrorCode(),ex.getParams()));continue;}if (record != null) {setHeaders(record,file,offset);batchMaker.addRecord(record);i++;offset=parser.getOffset();} else {parser.close();parser=null;offset=MINUS_ONE;break;}} catch (ObjectLengthException ex) {String exOffset=offset;offset=MINUS_ONE;errorRecordHandler.onError(Errors.SPOOLDIR_02,sourceFile,exOffset,ex);}}} catch (IOException|DataParserException ex) {if (ex instanceof ClosedByInterruptException || ex.getCause() instanceof ClosedByInterruptException) {} else {offset=MINUS_ONE;String exOffset;if (ex instanceof OverrunException) {exOffset=String.valueOf(((OverrunException)ex).getStreamOffset());} else {try {exOffset=(parser != null) ? parser.getOffset() : MINUS_ONE;} catch (IOException ex1) {LOG.warn("Could not get the file offset to report with error, reason: {}",ex1.toString(),ex);exOffset=MINUS_ONE;}}switch (getContext().getOnErrorRecord()) {case DISCARD:break;case TO_ERROR:throw new BadSpoolFileException(file.getAbsolutePath(),exOffset,ex);case STOP_PIPELINE:getContext().reportError(Errors.SPOOLDIR_04,sourceFile,exOffset,ex.toString(),ex);throw new StageException(Errors.SPOOLDIR_04,sourceFile,exOffset,ex.toString());default :throw new IllegalStateException(Utils.format("Unknown OnError value '{}'",getContext().getOnErrorRecord(),ex));}}} finally {if (MINUS_ONE.equals(offset)) {if (parser != null) {try {parser.close();parser=null;} catch (IOException ex) {}}}}return offset;}  }
class C{  public static SipResponse createResponse(SipRequest request,int code) throws PayloadException {  try {    Response response=SipUtils.MSG_FACTORY.createResponse(code,request.getStackMessage());    SipResponse resp=new SipResponse(response);    resp.setStackTransaction(request.getStackTransaction());    return resp;  } catch (  ParseException e) {    throw new PayloadException("Can't create SIP response",e);  }}  }
class C{  protected static final MediaCodecInfo selectVideoCodec(final String mimeType){  if (DEBUG)   Log.v(TAG,"selectVideoCodec:");  final int numCodecs=MediaCodecList.getCodecCount();  for (int i=0; i < numCodecs; i++) {    final MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(i);    if (!codecInfo.isEncoder()) {      continue;    }    final String[] types=codecInfo.getSupportedTypes();    for (int j=0; j < types.length; j++) {      if (types[j].equalsIgnoreCase(mimeType)) {        if (DEBUG)         Log.i(TAG,"codec:" + codecInfo.getName() + ",MIME="+ types[j]);        final int format=selectColorFormat(codecInfo,mimeType);        if (format > 0) {          return codecInfo;        }      }    }  }  return null;}  }
class C{  public UserTypeImpl(Token tok,String name){  super(name);  this.ast=new AbstractAST(tok);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  HideFileDao.createTable(db,ifNotExists);}  }
class C{  public static void fillTaxonomyCheckPaths(TaxonomyWriter tw) throws IOException {  for (int i=0; i < categories.length; i++) {    int ordinal=tw.addCategory(new FacetLabel(categories[i]));    int expectedOrdinal=expectedPaths[i][expectedPaths[i].length - 1];    if (ordinal != expectedOrdinal) {      fail("For category " + showcat(categories[i]) + " expected ordinal "+ expectedOrdinal+ ", but got "+ ordinal);    }    for (int j=expectedPaths[i].length - 2; j >= 0; j--) {      ordinal=tw.getParent(ordinal);      expectedOrdinal=expectedPaths[i][j];      if (ordinal != expectedOrdinal) {        fail("For category " + showcat(categories[i]) + " expected ancestor level "+ (expectedPaths[i].length - 1 - j)+ " was "+ expectedOrdinal+ ", but got "+ ordinal);      }    }  }}  }
class C{  public static <T,R>Cases<T,R> of(final Case<T,R>... cazes){  return ofPStack(Stream.of(cazes).map(null).reduce(ConsPStack.empty(),null));}  }
class C{  public static void dismiss(long threadId){  if (sThreadId == threadId) {    sThreadId=0;    System.exit(0);  }}  }
class C{  public void checkNotAllowedMethod(String methodName) throws MethodNotAllowedException {  boolean needToBlock=false;  ConfigurationEntity configurationEntity=configurationDao.getConfigurationByKey(ConfigurationValue.NOT_ALLOWED_HERD_ENDPOINTS.getKey());  if (configurationEntity != null && StringUtils.isNotBlank(configurationEntity.getValueClob())) {    List<String> methodsToBeBlocked=herdStringHelper.splitStringWithDefaultDelimiter(configurationEntity.getValueClob());    needToBlock=methodsToBeBlocked.contains(methodName);  }  if (needToBlock) {    throw new MethodNotAllowedException("The requested method is not allowed.");  }}  }
class C{  @Override public String cipherSuite(){  SSLSocket sslSocket=_sslSocket;  if (sslSocket == null) {    return super.cipherSuite();  }  SSLSession sslSession=sslSocket.getSession();  if (sslSession != null) {    return sslSession.getCipherSuite();  } else {    return null;  }}  }
class C{  protected Rectangle computeRotatedScreenExtent(Rectangle rect,int x,int y,Angle rotation){  Rectangle r=new Rectangle(rect);  r.translate(-x,-y);  Vec4[] corners={new Vec4(r.getMaxX(),r.getMaxY()),new Vec4(r.getMaxX(),r.getMinY()),new Vec4(r.getMinX(),r.getMaxY()),new Vec4(r.getMinX(),r.getMinY())};  Matrix rotationMatrix=Matrix.fromRotationZ(rotation);  for (int i=0; i < corners.length; i++) {    corners[i]=corners[i].transformBy3(rotationMatrix);  }  int minX=Integer.MAX_VALUE;  int minY=Integer.MAX_VALUE;  int maxX=-Integer.MAX_VALUE;  int maxY=-Integer.MAX_VALUE;  for (  Vec4 v : corners) {    if (v.x > maxX)     maxX=(int)v.x;    if (v.x < minX)     minX=(int)v.x;    if (v.y > maxY)     maxY=(int)v.y;    if (v.y < minY)     minY=(int)v.y;  }  r.setBounds(minX,minY,maxX - minX,maxY - minY);  r.translate(x,y);  return r;}  }
class C{  public XPathException(String message,Node styleNode,Exception e){  super(message);  m_styleNode=styleNode;  this.m_exception=e;}  }
class C{  public static ExecutorService newWorkStealingPool(int parallelism){  return new ForkJoinPool(parallelism,ForkJoinPool.defaultForkJoinWorkerThreadFactory,null,true);}  }
class C{  private void createContextMenus(){  this.popWorld=new JPopupMenu();  JMenuItem mnuShiftWorld=new JMenuItem(Messages.getString("menu.context.world.shift"));  mnuShiftWorld.setActionCommand("shiftWorld");  mnuShiftWorld.addActionListener(this);  mnuShiftWorld.setIcon(Icons.SHIFT);  JMenuItem mnuEditWorld=new JMenuItem(Messages.getString("menu.context.world.edit"));  mnuEditWorld.setActionCommand("editWorld");  mnuEditWorld.addActionListener(this);  mnuEditWorld.setIcon(Icons.EDIT_WORLD);  JMenuItem mnuClearWorld=new JMenuItem(Messages.getString("menu.context.world.removeAll"));  mnuClearWorld.setActionCommand("clear-all");  mnuClearWorld.addActionListener(this);  mnuClearWorld.setIcon(Icons.REMOVE);  JMenuItem mnuSettings=new JMenuItem(Messages.getString("menu.context.world.settings"));  mnuSettings.setActionCommand("settings");  mnuSettings.addActionListener(this);  mnuSettings.setIcon(Icons.SETTINGS);  this.popWorld.add(mnuEditWorld);  this.popWorld.add(mnuSettings);  this.popWorld.add(mnuShiftWorld);  this.popWorld.addSeparator();  this.popWorld.add(mnuClearWorld);  this.popBounds=new JPopupMenu();  JMenuItem mnuSetBounds=new JMenuItem(Messages.getString("menu.context.bounds.set"));  mnuSetBounds.setActionCommand("set-bounds");  mnuSetBounds.addActionListener(this);  mnuSetBounds.setIcon(Icons.SET_BOUNDS);  JMenuItem mnuUnsetBounds=new JMenuItem(Messages.getString("menu.context.bounds.unset"));  mnuUnsetBounds.setActionCommand("unset-bounds");  mnuUnsetBounds.addActionListener(this);  mnuUnsetBounds.setIcon(Icons.UNSET_BOUNDS);  this.popBounds.add(mnuSetBounds);  this.popBounds.add(mnuUnsetBounds);  this.popBodyFolder=new JPopupMenu();  JMenuItem mnuAddbody=new JMenuItem(Messages.getString("menu.context.bodyFolder.addBody"));  JMenuItem mnuRemoveAllBodies=new JMenuItem(Messages.getString("menu.context.bodyFolder.removeAll"));  mnuAddbody.setActionCommand("addBody");  mnuRemoveAllBodies.setActionCommand("removeAllBodies");  mnuAddbody.addActionListener(this);  mnuRemoveAllBodies.addActionListener(this);  mnuAddbody.setIcon(Icons.ADD_BODY);  mnuRemoveAllBodies.setIcon(Icons.REMOVE);  this.popBodyFolder.add(mnuAddbody);  this.popBodyFolder.addSeparator();  this.popBodyFolder.add(mnuRemoveAllBodies);  this.popJointFolder=new JPopupMenu();  JMenuItem mnuAddAngleJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addAngleJoint"));  JMenuItem mnuAddDistanceJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addDistanceJoint"));  JMenuItem mnuAddFrictionJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addFrictionJoint"));  JMenuItem mnuAddPrismaticJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addPrismaticJoint"));  JMenuItem mnuAddPulleyJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addPulleyJoint"));  JMenuItem mnuAddRevoluteJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addRevoluteJoint"));  JMenuItem mnuAddRopeJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addRopeJoint"));  JMenuItem mnuAddWeldJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addWeldJoint"));  JMenuItem mnuAddWheelJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addWheelJoint"));  JMenuItem mnuAddMotorJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addMotorJoint"));  JMenuItem mnuAddMouseJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addMouseJoint"));  JMenuItem mnuRemoveAllJoints=new JMenuItem(Messages.getString("menu.context.jointFolder.removeAll"));  mnuAddAngleJoint.setIcon(Icons.ADD_ANGLE_JOINT);  mnuAddDistanceJoint.setIcon(Icons.ADD_DISTANCE_JOINT);  mnuAddFrictionJoint.setIcon(Icons.ADD_FRICTION_JOINT);  mnuAddMouseJoint.setIcon(Icons.ADD_MOUSE_JOINT);  mnuAddPrismaticJoint.setIcon(Icons.ADD_PRISMATIC_JOINT);  mnuAddPulleyJoint.setIcon(Icons.ADD_PULLEY_JOINT);  mnuAddRevoluteJoint.setIcon(Icons.ADD_REVOLUTE_JOINT);  mnuAddRopeJoint.setIcon(Icons.ADD_ROPE_JOINT);  mnuAddWeldJoint.setIcon(Icons.ADD_WELD_JOINT);  mnuAddWheelJoint.setIcon(Icons.ADD_WHEEL_JOINT);  mnuAddMotorJoint.setIcon(Icons.ADD_MOTOR_JOINT);  mnuRemoveAllJoints.setIcon(Icons.REMOVE);  mnuAddAngleJoint.setActionCommand("addAngleJoint");  mnuAddDistanceJoint.setActionCommand("addDistanceJoint");  mnuAddFrictionJoint.setActionCommand("addFrictionJoint");  mnuAddPrismaticJoint.setActionCommand("addPrismaticJoint");  mnuAddPulleyJoint.setActionCommand("addPulleyJoint");  mnuAddRevoluteJoint.setActionCommand("addRevoluteJoint");  mnuAddRopeJoint.setActionCommand("addRopeJoint");  mnuAddWeldJoint.setActionCommand("addWeldJoint");  mnuAddWheelJoint.setActionCommand("addWheelJoint");  mnuAddMouseJoint.setActionCommand("addMouseJoint");  mnuAddMotorJoint.setActionCommand("addMotorJoint");  mnuRemoveAllJoints.setActionCommand("removeAllJoints");  mnuAddAngleJoint.addActionListener(this);  mnuAddDistanceJoint.addActionListener(this);  mnuAddFrictionJoint.addActionListener(this);  mnuAddPrismaticJoint.addActionListener(this);  mnuAddPulleyJoint.addActionListener(this);  mnuAddRevoluteJoint.addActionListener(this);  mnuAddRopeJoint.addActionListener(this);  mnuAddWeldJoint.addActionListener(this);  mnuAddWheelJoint.addActionListener(this);  mnuAddMouseJoint.addActionListener(this);  mnuAddMotorJoint.addActionListener(this);  mnuRemoveAllJoints.addActionListener(this);  this.popJointFolder.add(mnuAddDistanceJoint);  this.popJointFolder.add(mnuAddMouseJoint);  this.popJointFolder.add(mnuAddPrismaticJoint);  this.popJointFolder.add(mnuAddPulleyJoint);  this.popJointFolder.add(mnuAddRevoluteJoint);  this.popJointFolder.add(mnuAddRopeJoint);  this.popJointFolder.add(mnuAddWeldJoint);  this.popJointFolder.add(mnuAddWheelJoint);  this.popJointFolder.addSeparator();  this.popJointFolder.add(mnuAddAngleJoint);  this.popJointFolder.add(mnuAddFrictionJoint);  this.popJointFolder.add(mnuAddMotorJoint);  this.popJointFolder.addSeparator();  this.popJointFolder.add(mnuRemoveAllJoints);  this.popBody=new JPopupMenu();  JMenuItem mnuEditBody=new JMenuItem(Messages.getString("menu.context.body.edit"));  JMenuItem mnuRemoveBody=new JMenuItem(Messages.getString("menu.context.body.remove"));  JMenuItem mnuAddCircle=new JMenuItem(Messages.getString("menu.context.body.addCircleFixture"));  JMenuItem mnuAddRectangle=new JMenuItem(Messages.getString("menu.context.body.addRectangleFixture"));  JMenuItem mnuAddPolygon=new JMenuItem(Messages.getString("menu.context.body.addConvexPolygonFixture"));  JMenuItem mnuAddSegment=new JMenuItem(Messages.getString("menu.context.body.addSegmentFixture"));  JMenuItem mnuAddHull=new JMenuItem(Messages.getString("menu.context.body.addConvexHullFixture"));  JMenuItem mnuAddDecompose=new JMenuItem(Messages.getString("menu.context.body.addNonConvexPolygonFixtures"));  JMenuItem mnuRemoveAllFixtures=new JMenuItem(Messages.getString("menu.context.body.removeAll"));  JMenuItem mnuApplyForce=new JMenuItem(Messages.getString("menu.context.body.applyForce"));  JMenuItem mnuApplyTorque=new JMenuItem(Messages.getString("menu.context.body.applyTorque"));  JMenuItem mnuApplyForceAtPoint=new JMenuItem(Messages.getString("menu.context.body.applyForceAtPoint"));  JMenuItem mnuClearForce=new JMenuItem(Messages.getString("menu.context.body.clearAccumulatedForce"));  JMenuItem mnuClearTorque=new JMenuItem(Messages.getString("menu.context.body.clearAccumulatedTorque"));  JMenuItem mnuCenterOnOrigin=new JMenuItem(Messages.getString("menu.context.body.centerOnOrigin"));  mnuEditBody.setIcon(Icons.EDIT_BODY);  mnuRemoveBody.setIcon(Icons.REMOVE_BODY);  mnuAddCircle.setIcon(Icons.ADD_CIRCLE);  mnuAddRectangle.setIcon(Icons.ADD_RECTANGLE);  mnuAddPolygon.setIcon(Icons.ADD_POLYGON);  mnuAddSegment.setIcon(Icons.ADD_SEGMENT);  mnuAddHull.setIcon(Icons.ADD_CONVEX_HULL);  mnuAddDecompose.setIcon(Icons.ADD_NON_CONVEX_POLYGON);  mnuRemoveAllFixtures.setIcon(Icons.REMOVE);  mnuApplyForce.setIcon(Icons.FORCE);  mnuApplyTorque.setIcon(Icons.TORQUE);  mnuApplyForceAtPoint.setIcon(Icons.FORCE_AT_POINT);  mnuClearForce.setIcon(Icons.CLEAR_ALL);  mnuClearTorque.setIcon(Icons.CLEAR_ALL);  mnuCenterOnOrigin.setIcon(Icons.CENTER_ON_ORIGIN);  mnuEditBody.setActionCommand("editBody");  mnuRemoveBody.setActionCommand("removeBody");  mnuAddCircle.setActionCommand("addCircleFixture");  mnuAddRectangle.setActionCommand("addRectangleFixture");  mnuAddPolygon.setActionCommand("addPolygonFixture");  mnuAddSegment.setActionCommand("addSegmentFixture");  mnuAddHull.setActionCommand("addHullFixture");  mnuAddDecompose.setActionCommand("addDecompose");  mnuRemoveAllFixtures.setActionCommand("removeAllFixtures");  mnuApplyForce.setActionCommand("applyForce");  mnuApplyTorque.setActionCommand("applyTorque");  mnuApplyForceAtPoint.setActionCommand("applyForceAtPoint");  mnuClearForce.setActionCommand("clearForce");  mnuClearTorque.setActionCommand("clearTorque");  mnuCenterOnOrigin.setActionCommand("centerOnOrigin");  mnuEditBody.addActionListener(this);  mnuRemoveBody.addActionListener(this);  mnuAddCircle.addActionListener(this);  mnuAddRectangle.addActionListener(this);  mnuAddPolygon.addActionListener(this);  mnuAddSegment.addActionListener(this);  mnuAddHull.addActionListener(this);  mnuAddDecompose.addActionListener(this);  mnuRemoveAllFixtures.addActionListener(this);  mnuApplyForce.addActionListener(this);  mnuApplyTorque.addActionListener(this);  mnuApplyForceAtPoint.addActionListener(this);  mnuClearForce.addActionListener(this);  mnuClearTorque.addActionListener(this);  mnuCenterOnOrigin.addActionListener(this);  this.popBody.add(mnuEditBody);  this.popBody.add(mnuRemoveBody);  this.popBody.addSeparator();  this.popBody.add(mnuAddCircle);  this.popBody.add(mnuAddRectangle);  this.popBody.add(mnuAddPolygon);  this.popBody.add(mnuAddSegment);  this.popBody.addSeparator();  this.popBody.add(mnuAddHull);  this.popBody.add(mnuAddDecompose);  this.popBody.addSeparator();  this.popBody.add(mnuRemoveAllFixtures);  this.popBody.addSeparator();  this.popBody.add(mnuApplyForce);  this.popBody.add(mnuApplyTorque);  this.popBody.add(mnuApplyForceAtPoint);  this.popBody.addSeparator();  this.popBody.add(mnuClearForce);  this.popBody.add(mnuClearTorque);  this.popBody.addSeparator();  this.popBody.add(mnuCenterOnOrigin);  this.popFixture=new JPopupMenu();  JMenuItem mnuEditFixture=new JMenuItem(Messages.getString("menu.context.fixture.edit"));  JMenuItem mnuRemoveFixture=new JMenuItem(Messages.getString("menu.context.fixture.remove"));  mnuEditFixture.setIcon(Icons.EDIT_POLYGON);  mnuRemoveFixture.setIcon(Icons.REMOVE_POLYGON);  mnuEditFixture.setActionCommand("editFixture");  mnuRemoveFixture.setActionCommand("removeFixture");  mnuEditFixture.addActionListener(this);  mnuRemoveFixture.addActionListener(this);  this.popFixture.add(mnuEditFixture);  this.popFixture.add(mnuRemoveFixture);  this.popJoint=new JPopupMenu();  JMenuItem mnuEditJoint=new JMenuItem(Messages.getString("menu.context.joint.edit"));  JMenuItem mnuRemoveJoint=new JMenuItem(Messages.getString("menu.context.joint.remove"));  mnuEditJoint.setIcon(Icons.EDIT_ANGLE_JOINT);  mnuRemoveJoint.setIcon(Icons.REMOVE_ANGLE_JOINT);  mnuEditJoint.setActionCommand("editJoint");  mnuRemoveJoint.setActionCommand("removeJoint");  mnuEditJoint.addActionListener(this);  mnuRemoveJoint.addActionListener(this);  this.popJoint.add(mnuEditJoint);  this.popJoint.add(mnuRemoveJoint);  this.popRayFolder=new JPopupMenu();  JMenuItem mnuAddRay=new JMenuItem(Messages.getString("menu.context.ray.add"));  JMenuItem mnuRemoveAllRays=new JMenuItem(Messages.getString("menu.context.ray.removeAll"));  mnuAddRay.setIcon(Icons.ADD_RAY);  mnuRemoveAllRays.setIcon(Icons.REMOVE);  mnuAddRay.setActionCommand("addRay");  mnuRemoveAllRays.setActionCommand("removeAllRays");  mnuAddRay.addActionListener(this);  mnuRemoveAllRays.addActionListener(this);  this.popRayFolder.add(mnuAddRay);  this.popRayFolder.addSeparator();  this.popRayFolder.add(mnuRemoveAllRays);  this.popRay=new JPopupMenu();  JMenuItem mnuEditRay=new JMenuItem(Messages.getString("menu.context.ray.edit"));  JMenuItem mnuRemoveRay=new JMenuItem(Messages.getString("menu.context.ray.remove"));  mnuEditRay.setIcon(Icons.EDIT_RAY);  mnuRemoveRay.setIcon(Icons.REMOVE_RAY);  mnuEditRay.setActionCommand("editRay");  mnuRemoveRay.setActionCommand("removeRay");  mnuEditRay.addActionListener(this);  mnuRemoveRay.addActionListener(this);  this.popRay.add(mnuEditRay);  this.popRay.add(mnuRemoveRay);}  }
class C{  public synchronized void release(){  if (Counter.availablePermits() < 1)   Counter.release(1);}  }
class C{  public static void main(String[] args){  TestRunner.run(suite());}  }
class C{  private void purgeArray(char[] array){  Arrays.fill(array,'0');}  }
class C{  @Override public Object toObject(ByteBuffer content,Type targetType){  return Charset.defaultCharset().decode(content).toString();}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Context context=getContext();  if (sStatusBar == null) {    sStatusBar=(StatusBarManager)context.getSystemService(Context.STATUS_BAR_SERVICE);  }  Window window=getWindow();  window.requestFeature(Window.FEATURE_NO_TITLE);  window.setType(WindowManager.LayoutParams.TYPE_RECENTS_OVERLAY);  window.setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);  window.setTitle("Recents");  setContentView(com.android.internal.R.layout.recent_apps_dialog);  final WindowManager.LayoutParams params=window.getAttributes();  params.width=WindowManager.LayoutParams.MATCH_PARENT;  params.height=WindowManager.LayoutParams.MATCH_PARENT;  window.setAttributes(params);  window.setFlags(0,WindowManager.LayoutParams.FLAG_DIM_BEHIND);  mIcons[0]=(TextView)findViewById(com.android.internal.R.id.button0);  mIcons[1]=(TextView)findViewById(com.android.internal.R.id.button1);  mIcons[2]=(TextView)findViewById(com.android.internal.R.id.button2);  mIcons[3]=(TextView)findViewById(com.android.internal.R.id.button3);  mIcons[4]=(TextView)findViewById(com.android.internal.R.id.button4);  mIcons[5]=(TextView)findViewById(com.android.internal.R.id.button5);  mIcons[6]=(TextView)findViewById(com.android.internal.R.id.button6);  mIcons[7]=(TextView)findViewById(com.android.internal.R.id.button7);  mNoAppsText=findViewById(com.android.internal.R.id.no_applications_message);  for (  TextView b : mIcons) {    b.setOnClickListener(this);  }}  }
class C{  public final static boolean inLongRange(char[] digitChars,int offset,int len,boolean negative){  String cmpStr=negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;  int cmpLen=cmpStr.length();  if (len < cmpLen)   return true;  if (len > cmpLen)   return false;  for (int i=0; i < cmpLen; ++i) {    if (digitChars[offset + i] > cmpStr.charAt(i)) {      return false;    }  }  return true;}  }
class C{  private String keyStorePassword(){  String password=_config.get(_prefix + ".ssl.key-store-password");  if (password != null) {    return password;  } else {    return _config.get(_prefix + ".ssl.password");  }}  }
class C{  public EigenvalueDecomposition(double[][] A){  n=A.length;  V=new double[n][n];  d=new double[n];  e=new double[n];  issymmetric=true;  for (int j=0; (j < n) && issymmetric; j++) {    for (int i=0; (i < n) && issymmetric; i++) {      issymmetric=(A[i][j] == A[j][i]);      if (Double.isNaN(A[i][j])) {        throw new IllegalArgumentException("NaN in EigenvalueDecomposition!");      }      if (Double.isInfinite(A[i][j])) {        throw new IllegalArgumentException("+-inf in EigenvalueDecomposition!");      }    }  }  if (issymmetric) {    for (int i=0; i < n; i++) {      System.arraycopy(A[i],0,V[i],0,n);    }    tred2();    tql2();  } else {    H=new double[n][n];    ort=new double[n];    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        H[i][j]=A[i][j];      }    }    orthes();    hqr2();  }}  }
class C{  public LocalDateTime toLocalDateTime(LocalTime time){  if (time == null) {    throw new IllegalArgumentException("The time must not be null");  }  if (getChronology() != time.getChronology()) {    throw new IllegalArgumentException("The chronology of the time does not match");  }  long localMillis=getLocalMillis() + time.getLocalMillis();  return new LocalDateTime(localMillis,getChronology());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void coloredTextAvailable(String text,Key attributes){  textAvailable(text,attributes);  notifyColoredListeners(text,attributes);}  }
class C{  private void handleEmptyAxis(T firstLeft,T firstRight){  if (firstLeft == null) {    mLeftAxisMax=mRightAxisMax;    mLeftAxisMin=mRightAxisMin;  } else   if (firstRight == null) {    mRightAxisMax=mLeftAxisMax;    mRightAxisMin=mLeftAxisMin;  }}  }
class C{  public AttributedString toAttributedString(){  AttributedString rval=new AttributedString(toString());  for (  AttributeDefinition def : attributeList) {    def.apply(rval);  }  return rval;}  }
class C{  private static CacheConfiguration createCache(String name,CacheMode mode){  CacheConfiguration<?,?> cc=defaultCacheConfiguration();  cc.setName(name);  cc.setCacheMode(mode);  cc.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cc.setRebalanceMode(SYNC);  cc.setSwapEnabled(true);  cc.setAtomicityMode(TRANSACTIONAL);  if (mode == CacheMode.PARTITIONED)   cc.setIndexedTypes(Integer.class,FactPurchase.class); else   if (mode == CacheMode.REPLICATED)   cc.setIndexedTypes(Integer.class,DimProduct.class,Integer.class,DimStore.class); else   throw new IllegalStateException("mode: " + mode);  return cc;}  }
class C{  public String urlTipText(){  return "The URL of the database";}  }
class C{  public List<Double> readVectorNumber(){  throw new RuntimeException("Vector objects not supported with AMF0");}  }
class C{  public void reportStart(){  mStartedRequests++;}  }
class C{  default Filterable<T> retainAll(final Iterable<? extends T> it){  return retainAll(StreamUtils.stream(it));}  }
class C{  public ExtractSuperclassDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.EXTRACT_SUPERCLASS,project,description,comment,arguments,flags);}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public FilterLeafReader(LeafReader in){  super();  if (in == null) {    throw new NullPointerException("incoming LeafReader must not be null");  }  this.in=in;  in.registerParentReader(this);}  }
class C{  public boolean isSwitch(){switch (getOpcode()) {case TABLESWITCH:case LOOKUPSWITCH:    return true;default :  return false;}}  }
class C{  public Watch(WatchPredicate<E> predicate,int taskCount,WatchAction<E> action){  this.predicate=predicate;  this.action=action;  this.matched=new boolean[taskCount];}  }
class C{  @Override public void onDestroy(){  LOG.d(TAG,"CordovaActivity.onDestroy()");  super.onDestroy();  if (this.appView != null) {    appView.handleDestroy();  }}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  for (  String attribute : attributes) {    if (!action.has(attribute)) {      logger.warn("Internal Error: Action " + action.get("type") + " is missing required attribute "+ attribute);      return "This action requires more information.";    }  }  return null;}  }
class C{  @Override public void onMissing(FaceDetector.Detections<Face> detectionResults){  mOverlay.remove(mFaceGraphic);}  }
class C{  public static String loadHostInfo() throws ServletException {  try {    File file=new File(HOST_INFO_FILE_PATH);    if (!file.exists()) {      hostInfoFileExists=false;      _hostInfo=null;      _hostInfoLastModified=0;      return HOST_INFO_FILE_PATH + " doesn't exist";    }    StringBuilder ipsBuilder=new StringBuilder(512);    FileInputStream fis=new FileInputStream(HOST_INFO_FILE_PATH);    Scanner scan=new Scanner(fis);    while (scan.hasNextLine()) {      String line=scan.nextLine();      ipsBuilder.append(line);    }    scan.close();    fis.close();    _hostInfo=ipsBuilder.toString();    _hostInfoLastModified=new File(HOST_INFO_FILE_PATH).lastModified();    String hostInfo="/htmlspeed/" + _hostInfo;    _servlet.initHostInfo(hostInfo);    hostInfoFileExists=true;    return hostInfo;  } catch (  Exception exc) {    hostInfoFileExists=false;    _hostInfo=null;    _hostInfoLastModified=0;    throw new ServletException(exc);  }}  }
class C{  public static boolean approxEquals(final double a,final double b,final double tolerance){  if (Double.isNaN(a) || Double.isNaN(b)) {    return false;  }  if (a == b) {    return true;  }  if (Double.isInfinite(a) || Double.isInfinite(b)) {    return false;  }  if (a >= (b - tolerance) && a <= (b + tolerance)) {    return true;  }  return false;}  }
class C{  public final void showAlert(String message){}  }
class C{  public static ValueTimestamp fromMillisNanos(long ms,int nanos){  long dateValue=DateTimeUtils.dateValueFromDate(ms);  long timeNanos=nanos + DateTimeUtils.nanosFromDate(ms);  return fromDateValueAndNanos(dateValue,timeNanos);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.STRUCTURED_TEXT__ROOT_ELEMENT:    setRootElement((EObject)null);  return;}super.eUnset(featureID);}  }
class C{  @Override public final synchronized Object deleteMin(){  while (isEmpty()) {    try {      callback.aboutToWait();      wait();      callback.doneWaiting();    } catch (    InterruptedException e) {      VM.sysWrite("Interrupted Exception occurred!\n");    }  }  return super.deleteMin();}  }
class C{  public static String attributeDoubleQuoted(CharSequence value){  return encode(value,ATTR_DQ,LEN);}  }
class C{  private void crawlKeyInfoElements(){  for (  Node ki : keyInfoElements) {    List<Element> l=DomUtilities.findChildren(ki,"X509Certificate",NamespaceConstants.URI_NS_DS,true);    if (l.size() > 0) {      Node x509cert=l.get(0);      if (x509cert != null && x509cert.getLocalName().equals("X509Certificate")) {        certificates.add(x509cert.getTextContent());      }    }  }}  }
class C{  @Override public java.lang.Iterable<? extends IAgent> iterable(final IScope scope){  final List<java.lang.Iterable<? extends IAgent>> result=new ArrayList<>();  for (  final IPopulationSet p : populationSets) {    result.add(p.iterable(scope));  }  return Iterables.concat(result);}  }
class C{  public MaximizationFixWindowListener(Frame owner,boolean enabled,int wait){  this(owner,enabled,wait,false);}  }
class C{  public void testWickedLongTerm() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter w=new RandomIndexWriter(random(),dir,new StringSplitAnalyzer());  char[] chars=new char[DocumentsWriterPerThread.MAX_TERM_LENGTH_UTF8];  Arrays.fill(chars,'x');  Document hugeDoc=new Document();  final String bigTerm=new String(chars);  String contents="abc xyz x" + bigTerm + " another term";  hugeDoc.add(new TextField("content",contents,Field.Store.NO));  expectThrows(IllegalArgumentException.class,null);  Document doc=new Document();  doc.add(new TextField("content","abc bbb ccc",Field.Store.NO));  w.addDocument(doc);  w.forceMerge(1);  IndexReader reader=w.getReader();  w.close();  assertEquals(1,reader.docFreq(new Term("content","abc")));  assertEquals(1,reader.docFreq(new Term("content","bbb")));  assertEquals(0,reader.docFreq(new Term("content","term")));  assertEquals("document with wicked long term is in the index!",1,reader.numDocs());  reader.close();  dir.close();  dir=newDirectory();  doc=new Document();  FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);  customType.setTokenized(false);  Field contentField=new Field("content","",customType);  doc.add(contentField);  IndexWriterConfig iwc=newIndexWriterConfig();  iwc.setCodec(TestUtil.getDefaultCodec());  RandomIndexWriter w2=new RandomIndexWriter(random(),dir,iwc);  contentField.setStringValue("other");  w2.addDocument(doc);  contentField.setStringValue("term");  w2.addDocument(doc);  contentField.setStringValue(bigTerm);  w2.addDocument(doc);  contentField.setStringValue("zzz");  w2.addDocument(doc);  reader=w2.getReader();  w2.close();  assertEquals(1,reader.docFreq(new Term("content",bigTerm)));  reader.close();  dir.close();}  }
class C{  private void generate(String s) throws SAXException {  handler.startElement("",STRING,STRING,EMPTY);  handler.characters(s.toCharArray(),0,s.length());  handler.endElement("",STRING,STRING);}  }
class C{  public void removeProgressListener(ProgressListener listener){  listeners.removeListener(listener);}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  int blockSize=cipher.getBlockSize();  int resultLen=0;  if (forEncryption) {    if (bufOff == blockSize) {      if ((outOff + 2 * blockSize) > out.length) {        reset();        throw new OutputLengthException("output buffer too short");      }      resultLen=cipher.processBlock(buf,0,out,outOff);      bufOff=0;    }    padding.addPadding(buf,bufOff);    resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);    reset();  } else {    if (bufOff == blockSize) {      resultLen=cipher.processBlock(buf,0,buf,0);      bufOff=0;    } else {      reset();      throw new DataLengthException("last block incomplete in decryption");    }    try {      resultLen-=padding.padCount(buf);      System.arraycopy(buf,0,out,outOff,resultLen);    }  finally {      reset();    }  }  return resultLen;}  }
class C{  final void internalSetSuperclass(Name superclassName){  supportedOnlyIn2();  ASTNode oldChild=this.optionalSuperclassName;  preReplaceChild(oldChild,superclassName,SUPERCLASS_PROPERTY);  this.optionalSuperclassName=superclassName;  postReplaceChild(oldChild,superclassName,SUPERCLASS_PROPERTY);}  }
class C{  public static boolean isActionButton(MenuItem item){  if (item instanceof MenuItemImpl) {    return ((MenuItemImpl)item).isActionButton();  }  if (nativeIsActionButton == null) {    try {      Class<?> MenuItemImpl=Class.forName("com.android.internal.view.menu.MenuItemImpl");      nativeIsActionButton=MenuItemImpl.getDeclaredMethod("isActionButton");      if (!nativeIsActionButton.isAccessible()) {        nativeIsActionButton.setAccessible(true);      }    } catch (    Exception ignored) {    }  }  try {    return (boolean)nativeIsActionButton.invoke(item,(Object[])null);  } catch (  Exception e) {    e.printStackTrace();  }  return true;}  }
class C{  public CModuleDragHandler(final CModulesTable table){  Preconditions.checkNotNull(table,"IE01927: Table argument can't be null");  m_table=table;}  }
class C{  public DocumentType createDocumentType(String qualifiedName,String publicId,String systemId) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Not Implemented");}  }
class C{  private int handleX(String value,DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('S');    index++;  } else {    if (!((index == value.length() - 1) && (contains(value,index - 3,3,"IAU","EAU") || contains(value,index - 2,2,"AU","OU")))) {      result.append("KS");    }    index=contains(value,index + 1,1,"C","X") ? index + 2 : index + 1;  }  return index;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix04.class,args);}  }
class C{  public ChangeableHighlightPainter(Paint paint){  this(paint,false);}  }
class C{  @Override public void readEntityFromNBT(NBTTagCompound compound){  this.health=compound.getShort("Health");  this.age=compound.getShort("Age");  this.direction=EnumFacing.values()[compound.getInteger("direction")];  this.canBePickedUp=compound.getBoolean("canBePickedUp");  NBTTagCompound nbttagcompound=compound.getCompoundTag("Item");  this.setEntityItemStack(ItemStack.loadItemStackFromNBT(nbttagcompound));  ItemStack item=this.getDataManager().get(ITEM).orNull();  if (item == null || item.stackSize <= 0)   this.setDead();  if (compound.hasKey("Lifespan"))   lifespan=compound.getInteger("Lifespan");}  }
class C{  public void area(String srcName,Paint color,String legend,boolean stack){  if (legend != null) {    comments.add(new LegendText(color,legend));  }  SourcedPlotElement parent=stack ? findParent() : null;  plotElements.add(new Area(srcName,color,parent));}  }
class C{  static HttpClient New(SSLSocketFactory sf,URL url,HostnameVerifier hv,boolean useCache,HttpURLConnection httpuc) throws IOException {  return HttpsClient.New(sf,url,hv,(String)null,-1,useCache,httpuc);}  }
class C{  public void putDialog(SIPDialog dialog){  String dialogId=dialog.getDialogId();  if (dialogTable.containsKey(dialogId)) {    if (isLoggingEnabled()) {      stackLogger.logDebug("putDialog: dialog already exists" + dialogId + " in table = "+ dialogTable.get(dialogId));    }    return;  }  if (isLoggingEnabled()) {    stackLogger.logDebug("putDialog dialogId=" + dialogId + " dialog = "+ dialog);  }  dialog.setStack(this);  if (isLoggingEnabled())   stackLogger.logStackTrace();  dialogTable.put(dialogId,dialog);}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") @Override public void run(){  while (true) {    try {      if (!cleanUp(queue.remove())) {        break;      }    } catch (    InterruptedException e) {    }  }}  }
class C{  public ExampleSourceConfigurationWizardCreator(){}  }
class C{  public SocketTimeoutException(String msg){  super(msg);}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  return right.checkValue(env,ctx,vset,exp);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  public static String dumpLongAsString(int i){  byte[] b=new byte[]{(byte)(i >> 24 & 0xff),(byte)(i >> 16 & 0xff),(byte)(i >> 8 & 0xff),(byte)(i & 0xff)};  String s;  try {    s=new String(b,"US-ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("Guaranteed encoding US-ASCII missing.");  }  return s;}  }
class C{  public void start(ServletContext servletContext,DolphinPlatformConfiguration configuration){  Assert.requireNonNull(servletContext,"servletContext");  Assert.requireNonNull(configuration,"configuration");  LOG.debug("Dolphin Platform starts with value for useCrossSiteOriginFilter=" + configuration.isUseCrossSiteOriginFilter());  LOG.debug("Dolphin Platform starts with value for dolphinPlatformServletMapping=" + configuration.getDolphinPlatformServletMapping());  LOG.debug("Dolphin Platform starts with value for openDolphinLogLevel=" + configuration.getOpenDolphinLogLevel());  final ClasspathScanner classpathScanner=new ClasspathScanner(configuration.getRootPackageForClasspathScan());  MBeanRegistry.getInstance().setMbeanSupport(configuration.isMBeanRegistration());  final ContainerManager containerManager=findManager();  containerManager.init(servletContext);  final DolphinContextCommunicationHandler communicationHandler=new DolphinContextCommunicationHandler(configuration,this);  final DolphinSessionListenerProvider dolphinSessionListenerProvider=new DolphinSessionListenerProvider(containerManager,classpathScanner);  DolphinContextFactory dolphinContextFactory=new DefaultDolphinContextFactory(containerManager,dolphinEventBus,classpathScanner);  servletContext.addServlet(DOLPHIN_SERVLET_NAME,new DolphinPlatformServlet(communicationHandler)).addMapping(configuration.getDolphinPlatformServletMapping());  if (configuration.isUseSessionInvalidationServlet()) {    servletContext.addServlet(DOLPHIN_INVALIDATION_SERVLET_NAME,new InvalidationServlet()).addMapping(DEFAULT_DOLPHIN_INVALIDATION_SERVLET_MAPPING);  }  if (configuration.isUseCrossSiteOriginFilter()) {    servletContext.addFilter(DOLPHIN_CROSS_SITE_FILTER_NAME,new CrossSiteOriginFilter()).addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class),true,"/*");  }  servletContext.addFilter(DOLPHIN_CLIENT_ID_FILTER_NAME,new DolphinContextFilter(configuration,containerManager,dolphinContextFactory,dolphinSessionListenerProvider)).addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class),true,configuration.getIdFilterUrlMappings().toArray(new String[configuration.getIdFilterUrlMappings().size()]));  LOG.debug("Dolphin Platform initialized under context \"" + servletContext.getContextPath() + "\"");  LOG.debug("Dolphin Platform endpoint defined as " + configuration.getDolphinPlatformServletMapping());  DolphinHttpSessionListener contextCleaner=new DolphinHttpSessionListener();  contextCleaner.init(configuration);  servletContext.addListener(contextCleaner);  java.util.logging.Logger openDolphinLogger=Logger.getLogger("org.opendolphin");  openDolphinLogger.setLevel(configuration.getOpenDolphinLogLevel());}  }
class C{  private String anonymizePassword(String password){  if (password == null) {    return "null";  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < password.length(); i++) {    sb.append('*');  }  return sb.toString();}  }
class C{  @Override public String toString(){  return "RegionQueue on " + this.regionName + "("+ (this.isPrimary ? "primary" : "backup")+ ")";}  }
class C{  public KolabSyncAdapter(Context context,boolean autoInitialize){  super(context,autoInitialize);  mContentResolver=context.getContentResolver();}  }
class C{  @Override protected final boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion r,long startTime) throws EntryExistsException, DataLocationException, IOException {  this.setInternalDs(r.getSystem());  PartitionedRegionDataStore ds=r.getDataStore();  boolean sendReply=true;  InternalDistributedMember eventSender=originalSender;  if (eventSender == null) {    eventSender=getSender();  }  @Released final EntryEventImpl ev=EntryEventImpl.create(r,getOperation(),getKey(),null,getCallbackArg(),false,eventSender,true,false);  try {    if (this.versionTag != null) {      this.versionTag.replaceNullIDs(getSender());      ev.setVersionTag(this.versionTag);    }    if (this.bridgeContext != null) {      ev.setContext(this.bridgeContext);    }    Assert.assertTrue(eventId != null);    ev.setEventId(eventId);    ev.setCausedByMessage(this);    ev.setInvokePRCallbacks(!notificationOnly);    ev.setPossibleDuplicate(this.posDup);    ev.setDeltaBytes(this.deltaBytes);    if (this.hasDelta) {      this.valObj=null;      ev.setNewValue(this.valObj);    } else {switch (this.deserializationPolicy) {case DistributedCacheOperation.DESERIALIZATION_POLICY_LAZY:        ev.setSerializedNewValue(getValBytes());      break;case DistributedCacheOperation.DESERIALIZATION_POLICY_NONE:    ev.setNewValue(getValBytes());  break;default :throw new AssertionError("unknown deserialization policy: " + deserializationPolicy);}}if (!notificationOnly) {if (ds == null) {throw new AssertionError("This process should have storage" + " for this operation: " + this.toString());}try {ev.setOriginRemote(false);result=r.getDataView().putEntryOnRemote(ev,this.ifNew,this.ifOld,this.expectedOldValue,this.requireOldValue,this.lastModified,true);if (!this.result) {r.checkReadiness();}} catch (CacheWriterException cwe) {sendReply(getSender(),getProcessorId(),dm,new ReplyException(cwe),r,startTime);return false;}catch (PrimaryBucketException pbe) {sendReply(getSender(),getProcessorId(),dm,new ReplyException(pbe),r,startTime);return false;}catch (InvalidDeltaException ide) {sendReply(getSender(),getProcessorId(),dm,new ReplyException(ide),r,startTime);r.getCachePerfStats().incDeltaFullValuesRequested();return false;}if (logger.isTraceEnabled(LogMarker.DM)) {logger.trace(LogMarker.DM,"PutMessage {} with key: {} val: {}",(result ? "updated bucket" : "did not update bucket"),getKey(),(getValBytes() == null ? "null" : "(" + getValBytes().length + " bytes)"));}} else {@Released EntryEventImpl e2=createListenerEvent(ev,r,dm.getDistributionManagerId());final EnumListenerEvent le;try {if (e2.getOperation().isCreate()) {le=EnumListenerEvent.AFTER_CREATE;} else {le=EnumListenerEvent.AFTER_UPDATE;}r.invokePutCallbacks(le,e2,r.isInitialized(),true);}  finally {if (e2 != ev) {e2.release();}}result=true;}setOperation(ev.getOperation());if (sendReply) {sendReply(getSender(),getProcessorId(),dm,null,r,startTime,ev);}return false;}  finally {ev.release();}}  }
class C{  public void actionPerformed(ActionEvent e){  showHelpPage();}  }
class C{  final boolean casRight(Index<K,V> cmp,Index<K,V> val){  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);}  }
class C{  @Override public synchronized String chooseClientAlias(String[] arg0,Principal[] arg1,Socket arg2){  Log.d(TAG,"chooseClientAlias");  return null;}  }
class C{  public void callAsync(String key,Object[] params,Callback callback){  context.callAsync(this,this,params,callback);}  }
class C{  @Ignore("NotSupported") @Test public void testNonPersistentPartitionedRegionWithGatewaySenderPersistenceEnabled_Restart(){  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  String diskStore1=(String)vm4.invoke(null);  String diskStore2=(String)vm5.invoke(null);  String diskStore3=(String)vm6.invoke(null);  String diskStore4=(String)vm7.invoke(null);  LogWriterUtils.getLogWriter().info("The DS are: " + diskStore1 + ","+ diskStore2+ ","+ diskStore3+ ","+ diskStore4);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(createPartitionedRegionRunnable());  vm5.invoke(createPartitionedRegionRunnable());  vm6.invoke(createPartitionedRegionRunnable());  vm7.invoke(createPartitionedRegionRunnable());  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm4.invoke(waitForSenderRunnable());  vm5.invoke(waitForSenderRunnable());  vm6.invoke(waitForSenderRunnable());  vm7.invoke(waitForSenderRunnable());  vm4.invoke(pauseSenderRunnable());  vm5.invoke(pauseSenderRunnable());  vm6.invoke(pauseSenderRunnable());  vm7.invoke(pauseSenderRunnable());  vm4.invoke(null);  LogWriterUtils.getLogWriter().info("Completed puts in the region");  vm4.invoke(killSenderRunnable());  vm5.invoke(killSenderRunnable());  vm6.invoke(killSenderRunnable());  vm7.invoke(killSenderRunnable());  LogWriterUtils.getLogWriter().info("Killed all the senders. The local site has been brought down.");  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Created back the cache");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created the senders back from the disk store.");  vm4.invoke(createPartitionedRegionRunnable());  vm5.invoke(createPartitionedRegionRunnable());  vm6.invoke(createPartitionedRegionRunnable());  vm7.invoke(createPartitionedRegionRunnable());  LogWriterUtils.getLogWriter().info("Created back the partitioned regions");  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Started the senders.");  LogWriterUtils.getLogWriter().info("Waiting for senders running.");  vm4.invoke(waitForSenderRunnable());  vm5.invoke(waitForSenderRunnable());  vm6.invoke(waitForSenderRunnable());  vm7.invoke(waitForSenderRunnable());  LogWriterUtils.getLogWriter().info("All the senders are now running...");  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  public Vector4d sub(Vector4dc v){  x-=v.x();  y-=v.y();  z-=v.z();  w-=v.w();  return this;}  }
class C{  public Shape createSliderThumbContinuous(final int x,final int y,final int diameter){  return createEllipseInternal(x,y,diameter,diameter);}  }
class C{  public List<String> readAllParameters(final ErrorDrain errors){  final List<String> params=new Vector<String>();  do {    skipWhitespace();    final String param=getNextParameter(errors);    if (param == null) {      break;    }    params.add(param);  } while (!errors.hasError());  return params;}  }
class C{  private long addLocation(String locationSetting,String cityName,double lat,double lon){  long locationId;  Log.v(LOG_TAG,"inserting " + cityName + ", with coord: "+ lat+ ", "+ lon);  Cursor locationCursor=this.getContentResolver().query(WeatherContract.LocationEntry.CONTENT_URI,new String[]{WeatherContract.LocationEntry._ID},WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING + " = ?",new String[]{locationSetting},null);  if (locationCursor.moveToFirst()) {    int locationIdIndex=locationCursor.getColumnIndex(WeatherContract.LocationEntry._ID);    locationId=locationCursor.getLong(locationIdIndex);  } else {    ContentValues locationValues=new ContentValues();    locationValues.put(WeatherContract.LocationEntry.COLUMN_CITY_NAME,cityName);    locationValues.put(WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING,locationSetting);    locationValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LAT,lat);    locationValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LONG,lon);    Uri insertedUri=this.getContentResolver().insert(WeatherContract.LocationEntry.CONTENT_URI,locationValues);    locationId=ContentUris.parseId(insertedUri);  }  locationCursor.close();  return locationId;}  }
class C{  private static byte divmod(byte[] number,int firstDigit,int base,int divisor){  int remainder=0;  for (int i=firstDigit; i < number.length; i++) {    int digit=(int)number[i] & 0xFF;    int temp=remainder * base + digit;    number[i]=(byte)(temp / divisor);    remainder=temp % divisor;  }  return (byte)remainder;}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  public void put(String key,Integer value){  mValues.put(key,value);}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_GL_MAP_RESOURCE_FLAGS_NONE";  }  String result="";  if ((n & CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY) != 0)   result+="CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY ";  if ((n & CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD) != 0)   result+="CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD ";  return result;}  }
class C{  public Holiday(LocalDate date,String propertiesKey,HolidayType type){  super();  this.type=type;  this.date=date;  this.propertiesKey=propertiesKey == null ? "" : propertiesKey;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEConvolveMatrixElement(prefix,(AbstractDocument)doc);}  }
class C{  private void verifyVirtualPoolChangeSupportedForVolumeAndVirtualPool(Volume volume,VirtualPool newVpool){  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());  URI systemURI=volume.getStorageController();  StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);  String systemType=system.getSystemType();  StringBuffer notSuppReasonBuff=new StringBuffer();  notSuppReasonBuff.setLength(0);  if (volume.getApplication(_dbClient) != null) {    if (!VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesHighAvailability(newVpool)) {      notSuppReasonBuff.append("Non VPLEX volumes in applications cannot be moved into VPLEX pools");      throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());    }    if (!VirtualPool.vPoolSpecifiesProtection(currentVpool) && VirtualPool.vPoolSpecifiesProtection(newVpool)) {      notSuppReasonBuff.append("Non RP volumes in applications cannot be moved into RP pools");      throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());    }    if (VirtualPool.vPoolSpecifiesProtection(currentVpool) && !VirtualPool.vPoolSpecifiesProtection(newVpool)) {      notSuppReasonBuff.append("RP volumes in applications cannot be moved into non RP pools");      throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());    }    if (!VirtualPool.vPoolSpecifiesSRDF(currentVpool) && VirtualPool.vPoolSpecifiesSRDF(newVpool)) {      notSuppReasonBuff.append("volumes in applications cannot be moved into SRDF pools");      throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());    }  }  if (VirtualPoolChangeAnalyzer.isSupportedPathParamsChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff)) {    ExportPathUpdater updater=new ExportPathUpdater(_dbClient);    ExportPathParams newParam=new ExportPathParams(newVpool.getNumPaths(),newVpool.getMinPaths(),newVpool.getPathsPerInitiator());    updater.validateChangePathParams(volume.getId(),newParam);    _log.info("New VPool specifies an Export Path Params change");    return;  }  notSuppReasonBuff.setLength(0);  if (VirtualPoolChangeAnalyzer.isSupportedAutoTieringPolicyAndLimitsChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff)) {    _log.info("New VPool specifies an Auto-tiering policy change");    return;  }  if (VirtualPoolChangeAnalyzer.isSupportedReplicationModeChange(currentVpool,newVpool,notSuppReasonBuff)) {    _log.info("New VPool specifies a replication mode change");    return;  }  if (DiscoveredDataObject.Type.vplex.name().equals(systemType)) {    _log.info("Volume is a VPlex virtual volume.");    if (!VirtualPool.vPoolSpecifiesHighAvailability(newVpool)) {      _log.info("New VirtualPool does not specify VPlex high availability.");      throw new ServiceCodeException(ServiceCode.API_VOLUME_VPOOL_CHANGE_DISRUPTIVE,"New VirtualPool {0} does not specify vplex high availability",new Object[]{newVpool.getId()});    } else {      notSuppReasonBuff.setLength(0);      if (volume.checkPersonality(Volume.PersonalityTypes.METADATA)) {        if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {          verifyVPlexVolumeForDataMigration(volume,currentVpool,newVpool,_dbClient);          return;        }      }      if (volume.checkForRp() && VirtualPool.vPoolSpecifiesProtection(currentVpool) && !VirtualPool.vPoolSpecifiesProtection(newVpool)) {        notSuppReasonBuff.setLength(0);        if (!VirtualPoolChangeAnalyzer.isSupportedRPRemoveProtectionVirtualPoolChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff)) {          throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());        }      } else       if (VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) {        notSuppReasonBuff.setLength(0);        if (VirtualPool.vPoolSpecifiesRPVPlex(currentVpool)) {          if (VirtualPoolChangeAnalyzer.isSupportedRPVPlexMigrationVirtualPoolChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff,null)) {            verifyVPlexVolumeForDataMigration(volume,currentVpool,newVpool,_dbClient);          } else           if (!VirtualPoolChangeAnalyzer.isSupportedUpgradeToMetroPointVirtualPoolChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff)) {            _log.warn("RP Change Protection VirtualPool change for volume is not supported: {}",notSuppReasonBuff.toString());            throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());          }        } else         if (!VirtualPoolChangeAnalyzer.isSupportedAddRPProtectionVirtualPoolChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff)) {          _log.warn("RP+VPLEX VirtualPool change for volume is not supported: {}",notSuppReasonBuff.toString());          throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());        } else         if (BlockFullCopyUtils.volumeHasFullCopySession(volume,_dbClient)) {          throw APIException.badRequests.volumeForRPVpoolChangeHasFullCopies(volume.getLabel());        }      } else {        VirtualPoolChangeOperationEnum vplexVpoolChangeOperation=VirtualPoolChangeAnalyzer.getSupportedVPlexVolumeVirtualPoolChangeOperation(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff);        if (vplexVpoolChangeOperation == null) {          _log.warn("VPlex volume VirtualPool change not supported {}",notSuppReasonBuff.toString());          throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());        } else         if (VPlexUtil.isVolumeBuiltOnBlockSnapshot(_dbClient,volume)) {          throw APIException.badRequests.vpoolChangeNotAllowedVolumeIsExposedSnapshot(volume.getId().toString());        } else         if (vplexVpoolChangeOperation == VirtualPoolChangeOperationEnum.VPLEX_DATA_MIGRATION) {          verifyVPlexVolumeForDataMigration(volume,currentVpool,newVpool,_dbClient);        }      }    }  } else   if (DiscoveredDataObject.Type.vmax.name().equals(systemType) || DiscoveredDataObject.Type.vnxblock.name().equals(systemType) || DiscoveredDataObject.Type.hds.name().equals(systemType)|| DiscoveredDataObject.Type.xtremio.name().equals(systemType)|| DiscoveredDataObject.Type.ibmxiv.name().equals(systemType)|| DiscoveredDataObject.Type.unity.name().equals(systemType)) {    if (VirtualPool.vPoolSpecifiesHighAvailability(newVpool)) {      notSuppReasonBuff.setLength(0);      if (!VirtualPoolChangeAnalyzer.isVPlexImport(volume,currentVpool,newVpool,notSuppReasonBuff) || (!VirtualPoolChangeAnalyzer.doesVplexVpoolContainVolumeStoragePool(volume,newVpool,notSuppReasonBuff))) {        _log.warn("VNX/VMAX cos change for volume is not supported: {}",notSuppReasonBuff.toString());        throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());      }      if (volume.isVolumeExported(_dbClient)) {        throw APIException.badRequests.cannotImportExportedVolumeToVplex(volume.getId());      } else       if (BlockFullCopyUtils.volumeHasFullCopySession(volume,_dbClient)) {        throw APIException.badRequests.volumeForVpoolChangeHasFullCopies(volume.getLabel());      } else {        List<BlockSnapshotSession> snapSessions=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,BlockSnapshotSession.class,ContainmentConstraint.Factory.getParentSnapshotSessionConstraint(volume.getId()));        if (!snapSessions.isEmpty()) {          throw APIException.badRequests.cannotImportVolumeWithSnapshotSessions(volume.getLabel());        }      }    } else     if (VirtualPool.vPoolSpecifiesProtection(newVpool)) {      notSuppReasonBuff.setLength(0);      if (!VirtualPoolChangeAnalyzer.isSupportedAddRPProtectionVirtualPoolChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff)) {        _log.warn("VirtualPool change to Add RP Protection for volume is not supported: {}",notSuppReasonBuff.toString());        throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());      } else       if (BlockFullCopyUtils.volumeHasFullCopySession(volume,_dbClient)) {        throw APIException.badRequests.volumeForRPVpoolChangeHasFullCopies(volume.getLabel());      } else {        List<BlockSnapshotSession> snapSessions=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,BlockSnapshotSession.class,ContainmentConstraint.Factory.getParentSnapshotSessionConstraint(volume.getId()));        if (!snapSessions.isEmpty()) {          throw APIException.badRequests.volumeForRPVpoolChangeHasSnapshotSessions(volume.getLabel());        }      }    } else     if (VirtualPool.vPoolSpecifiesProtection(currentVpool) && !VirtualPool.vPoolSpecifiesProtection(newVpool)) {      notSuppReasonBuff.setLength(0);      if (!VirtualPoolChangeAnalyzer.isSupportedRPRemoveProtectionVirtualPoolChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff)) {        throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());      }    } else     if (VirtualPool.vPoolSpecifiesSRDF(newVpool)) {      notSuppReasonBuff.setLength(0);      if (!VirtualPoolChangeAnalyzer.isSupportedSRDFVolumeVirtualPoolChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff)) {        _log.warn("VMAX VirtualPool change for volume is not supported: {}",notSuppReasonBuff.toString());        throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());      } else       if (BlockFullCopyUtils.volumeHasFullCopySession(volume,_dbClient)) {        Map<URI,VpoolRemoteCopyProtectionSettings> remoteCopySettingsMap=VirtualPool.getRemoteProtectionSettings(newVpool,_dbClient);        VpoolRemoteCopyProtectionSettings remoteCopyProtectionSettings=remoteCopySettingsMap.values().iterator().next();        if (SupportedCopyModes.ASYNCHRONOUS.toString().equalsIgnoreCase(remoteCopyProtectionSettings.getCopyMode())) {          throw APIException.badRequests.volumeForSRDFVpoolChangeHasFullCopies(volume.getLabel());        }      }    } else     if (!NullColumnValueGetter.isNullNamedURI(volume.getSrdfParent()) || (volume.getSrdfTargets() != null && !volume.getSrdfTargets().isEmpty())) {      throw APIException.badRequests.srdfVolumeVPoolChangeToNonSRDFVPoolNotSupported(volume.getId());    } else     if (VirtualPool.vPoolSpecifiesMirrors(newVpool,_dbClient)) {      notSuppReasonBuff.setLength(0);      if (!VirtualPoolChangeAnalyzer.isSupportedAddMirrorsVirtualPoolChange(volume,currentVpool,newVpool,_dbClient,notSuppReasonBuff)) {        _log.warn("VirtualPool change to add continuous copies for volume {} is not supported: {}",volume.getId(),notSuppReasonBuff.toString());        throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());      }    } else {      String errMsg="there was an invalid property mismatch between source and target vPools.";      _log.error(errMsg);      notSuppReasonBuff.append(errMsg);      throw APIException.badRequests.changeToVirtualPoolNotSupported(newVpool.getLabel(),notSuppReasonBuff.toString());    }  } else {    _log.info("VirtualPool change volume is not a vplex, vmax or vnxblock volume");    throw new ServiceCodeException(ServiceCode.API_VOLUME_VPOOL_CHANGE_DISRUPTIVE,"VirtualPool change is not supported for volume {0}",new Object[]{volume.getId()});  }}  }
class C{  protected AbstractCategoryItemLabelGenerator(String labelFormat,DateFormat formatter){  ParamChecks.nullNotPermitted(labelFormat,"labelFormat");  ParamChecks.nullNotPermitted(formatter,"formatter");  this.labelFormat=labelFormat;  this.numberFormat=null;  this.percentFormat=NumberFormat.getPercentInstance();  this.dateFormat=formatter;  this.nullValueString="-";}  }
class C{  private void beginUpdatePendingChanges(){  boolean sendEvent;synchronized (operationDepthAndModificationLock) {    sendEvent=(operationDepth == 0);    if (operationDepth == 0) {      changesModifiedInOperation=false;    }    ++operationDepth;  }  if (sendEvent) {    final PendingChangeCacheEvent event=new PendingChangeCacheEvent(this);    getListener().onBeforeUpdatePendingChanges(event);  }}  }
class C{  public boolean reserve(long size){  if (total == 0) {    allocated.addAndGet(size);    return true;  }  long mem=allocated.addAndGet(size);  long max=total;  return mem <= max;}  }
class C{  @Override public void receive(float sample){  if (sample > 0.0) {    if (sample >= THRESHOLD) {      dispatch(Dibit.D01_PLUS_3);    } else {      dispatch(Dibit.D00_PLUS_1);    }  } else {    if (sample > -THRESHOLD) {      dispatch(Dibit.D10_MINUS_1);    } else {      dispatch(Dibit.D11_MINUS_3);    }  }}  }
class C{  public boolean isXMLName(Context cx,Object nameObj){  String name;  try {    name=ScriptRuntime.toString(nameObj);  } catch (  EcmaError ee) {    if ("TypeError".equals(ee.getName())) {      return false;    }    throw ee;  }  int length=name.length();  if (length != 0) {    if (isNCNameStartChar(name.charAt(0))) {      for (int i=1; i != length; ++i) {        if (!isNCNameChar(name.charAt(i))) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("AccessSqlParser[");  if (m_tableInfo == null)   sb.append(m_sqlOriginal); else {    for (int i=0; i < m_tableInfo.size(); i++) {      if (i > 0)       sb.append("|");      TableInfo[] info=(TableInfo[])m_tableInfo.get(i);      for (int ii=0; ii < info.length; ii++) {        if (ii > 0)         sb.append(",");        sb.append(info[ii].toString());      }    }  }  sb.append("|").append(getMainSqlIndex());  sb.append("]");  return sb.toString();}  }
class C{  protected void checkClosed(boolean write){  if (session == null) {    throw DbException.get(ErrorCode.OBJECT_CLOSED);  }  if (session.isClosed()) {    throw DbException.get(ErrorCode.DATABASE_CALLED_AT_SHUTDOWN);  }  if (session.isReconnectNeeded(write)) {    trace.debug("reconnect");    closePreparedCommands();    session=session.reconnect(write);    trace=session.getTrace();  }}  }
class C{  protected int readBytes(byte b[],int off,int len) throws IOException {  if (endOfFile) {    return -1;  }  int bytesAvailable=(int)(dataEnd - filePosition);  if (bytesAvailable < 1) {    seek(filePosition);    return readBytes(b,off,len);  }  int copyLength=(bytesAvailable >= len) ? len : bytesAvailable;  System.arraycopy(buffer,(int)(filePosition - bufferStart),b,off,copyLength);  filePosition+=copyLength;  if (copyLength < len) {    int extraCopy=len - copyLength;    if (extraCopy > buffer.length) {      extraCopy=read_(filePosition,b,off + copyLength,len - copyLength);    } else {      seek(filePosition);      if (!endOfFile) {        extraCopy=(extraCopy > dataSize) ? dataSize : extraCopy;        System.arraycopy(buffer,0,b,off + copyLength,extraCopy);      } else {        extraCopy=-1;      }    }    if (extraCopy > 0) {      filePosition+=extraCopy;      return copyLength + extraCopy;    }  }  return copyLength;}  }
class C{  public void projectionChanged(ProjectionEvent e){  graphics.generate(e.getProjection());  repaint();}  }
class C{  protected File makeTempFile(URL url,String contentType){  String suffix=this.makeSuffix(url.toString(),contentType);  if (suffix == null)   suffix=WWIO.getSuffix(url.toString());  if (!suffix.startsWith("."))   suffix="." + suffix;  try {    File file=File.createTempFile("wwfs",suffix);    file.deleteOnExit();    return file;  } catch (  IOException e) {    String message=Logging.getMessage("generic.CannotCreateTempFile");    Logging.logger().fine(message);    return null;  }}  }
class C{  public void testUserDataHandlerNotifiedOfDeepImports(){  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Document newDocument=builder.newDocument();  Element importedName=(Element)newDocument.importNode(name,true);  Attr importedStandard=importedName.getAttributeNode("a:standard");  Text importedWaffles=(Text)importedName.getChildNodes().item(0);  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_IMPORTED,"a","apple",name,importedName));  expected.add(notification(NODE_IMPORTED,"b","banana",name,importedName));  expected.add(notification(NODE_IMPORTED,"c","cat",standard,importedStandard));  expected.add(notification(NODE_IMPORTED,"d","dog",waffles,importedWaffles));  assertEquals(expected,handler.calls);}  }
class C{  IntrinsicScope(BytecodeParser parser,JavaKind[] argSlotKinds,ValueNode[] args){  assert !parser.parsingIntrinsic();  this.parser=parser;  mark=parser.getGraph().getMark();  stateBefore=parser.frameState.create(parser.bci(),parser.getNonIntrinsicAncestor(),false,argSlotKinds,args);}  }
class C{  public static void writeArrayOfExternalSortable(ExternalSortable[] A,int start,int finish,OutputStream out) throws IOException {  for (int i=start; i <= finish; i++)   A[i].write(out);}  }
class C{  public boolean isQuestInState(final String name,final String... states){  final String questState=getQuest(name);  if (questState != null) {    for (    final String state : states) {      if (questState.equals(state)) {        return true;      }    }  }  return false;}  }
class C{  @Override public double eval(double[] x,double[] y){  double result=1.0d / (1.0d + Math.pow(lengthScale,-2) * norm2(x,y));  return result;}  }
class C{  @Nullable public HTMLMasonMethodDefinition findMethodDefinitionByNameInThisOrParents(String name){  HTMLMasonMethodDefinitionSeeker seeker=new HTMLMasonMethodDefinitionSeeker(name);  processMethodDefinitionsInThisOrParents(seeker);  return seeker.getResult();}  }
class C{  private void outputTests(List<ExecutableSequence> sequences,String junitPrefix){  if (!GenInputsAbstract.noprogressdisplay) {    System.out.printf("Writing JUnit tests...%n");  }  writeJUnitTests(junit_output_dir,sequences,null,junitPrefix);}  }
class C{  private static double scoreSequence(List<LatLong> pts){  LatLong prev=pts.get(pts.size() - 1);  LatLong prevprev=pts.get(pts.size() - 2);  double prevAngle=Math.atan2(prev.lat - prevprev.lat,prev.lng - prevprev.lng);  double score=0;  for (  LatLong pt : pts) {    double angle=Math.atan2(pt.lat - prev.lat,pt.lng - prev.lng);    double diff=prevAngle - angle;    if (diff > Math.PI)     diff-=Math.PI * 2; else     if (diff < -Math.PI)     diff+=Math.PI * 2;    if (diff < 0)     score+=10; else     score+=diff;    prev=pt;    prevAngle=angle;  }  return score;}  }
class C{  private boolean isNoiseWord(String term){  int len=term.length();  if (minWordLen > 0 && len < minWordLen) {    return true;  }  if (maxWordLen > 0 && len > maxWordLen) {    return true;  }  return stopWords != null && stopWords.contains(term);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  String returnHeaderFile="";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  String outDir=(new File(imageFiles[0])).getParentFile().toString();  if (args.length > 1) {    outDir=args[1];  }  if (!outDir.endsWith(File.separator)) {    outDir=outDir + File.separator;  }  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      File file=new File(fileName);      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String shortFileName=file.getName().replace("." + fileExtension,"");      long fileLength=file.length();      file=null;      String srtmFormat="SRTM1";      if (fileLength == 3601 * 3601 * 2) {        rows=3601;        cols=3601;      } else       if (fileLength == 1201 * 1201 * 2) {        rows=1201;        cols=1201;        srtmFormat="SRTM3";      } else {        showFeedback("The input SRTM file does not appear to be supported by the import tool.");        return;      }      double cellSize=1.0 / cols;      char[] charArray=shortFileName.toCharArray();      char[] tmp=new char[2];      tmp[0]=charArray[1];      tmp[1]=charArray[2];      double south=Double.parseDouble(new String(tmp));      if (charArray[0] == 'S' || charArray[0] == 's') {        south=-south;      }      south=south - (0.5 * cellSize);      tmp=new char[3];      tmp[0]=charArray[4];      tmp[1]=charArray[5];      tmp[2]=charArray[6];      double west=Double.parseDouble(new String(tmp));      if (charArray[3] == 'W' || charArray[3] == 'w') {        west=-west;      }      west=west - (0.5 * cellSize);      double north=south + 1.0 + cellSize;      double east=west + 1.0 + cellSize;      String whiteboxHeaderFile=outDir + shortFileName + ".dep";      if (i == 0) {        returnHeaderFile=whiteboxHeaderFile;      }      WhiteboxRaster output=new WhiteboxRaster(whiteboxHeaderFile,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.INTEGER,noData,noData);      RandomAccessFile rIn=null;      FileChannel inChannel=null;      ByteBuffer buf=ByteBuffer.allocate((int)fileLength);      rIn=new RandomAccessFile(fileName,"r");      inChannel=rIn.getChannel();      inChannel.position(0);      inChannel.read(buf);      java.nio.ByteOrder byteorder=java.nio.ByteOrder.BIG_ENDIAN;      buf.order(byteorder);      buf.rewind();      byte[] ba=new byte[(int)fileLength];      buf.get(ba);      double z;      row=0;      col=0;      int pos=0;      int oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=(double)buf.getShort(pos);          output.setValue(row,col,z);          pos+=2;        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Importing SRTM file...",progress);          oldProgress=progress;        }      }      inChannel.close();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.setXYUnits("degrees");      output.setProjection("geographic coordinates");      output.setZUnits("metres");      output.writeHeaderFile();      output.close();    }    returnData(returnHeaderFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void unsetValue(Project project,VirtualFile root,String key) throws VcsException {  GitSimpleHandler h=new GitSimpleHandler(project,root,GitCommand.CONFIG);  h.setSilent(true);  h.ignoreErrorCode(1);  h.addParameters("--unset",key);  h.run();}  }
class C{  @SuppressWarnings("TypeMayBeWeakened") public static FollowFragment newInstance(Type type,String userId){  FollowFragment followFragment=new FollowFragment();  Bundle args=new Bundle();  args.putSerializable(KEY_TYPE,type);  args.putString(KEY_USER_ID,userId);  followFragment.setArguments(args);  return followFragment;}  }
class C{  public boolean complete(T value){  return this.completableFuture.complete(value);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SETTINGS\"";  db.execSQL(sql);}  }
class C{  @Override public synchronized boolean delete(T dto) throws Exception {  int confirm=db.delete(transformer.getTableName(),transformer.getWhereClause(dto),null);  return confirm != 0;}  }
class C{  public void migrateProperties(){  Network memory=getBot().memory().newMemory();  Vertex mood=memory.createVertex(getClass());  Vertex property=mood.getRelationship(Primitive.ENABLED);  if (property != null) {    setEnabled((Boolean)property.getData());  }  mood.internalRemoveRelationships(Primitive.ENABLED);  memory.save();  saveProperties();}  }
class C{  private String[] buildJavacArgs(String srcFiles[]){  List<String> args=new ArrayList<String>();  if (classpath != null) {    args.add("-classpath");    args.add(classpath);  }  if (outputdir != null) {    args.add("-d");    args.add(outputdir);  }  if (sourcepath != null) {    args.add("-sourcepath");    args.add(sourcepath);  }  if (bootclasspath != null) {    args.add("-bootclasspath");    args.add(bootclasspath);  }  if (extdirs != null) {    args.add("-extdirs");    args.add(extdirs);  }  if (encoding != null) {    args.add("-encoding");    args.add(encoding);  }  if (target != null) {    args.add("-target");    args.add(target);  }  for (int i=0; i < srcFiles.length; i++) {    args.add(srcFiles[i]);  }  return args.toArray(new String[args.size()]);}  }
class C{  boolean needsAltMetafactory(){  return tree.targets.length() > 1 || isSerializable() || bridges.length() > 1;}  }
class C{  public void testTake() throws InterruptedException {  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.take());  }}  }
class C{  private void adjustNameAndPosition(SessionNodeWrapper wrapper,List sessionNodeWrappers,int deltaX,int deltaY){  String originalName=wrapper.getSessionName();  String base=extractBase(originalName);  String uniqueName=nextUniqueName(base,sessionNodeWrappers);  if (!uniqueName.equals(originalName)) {    wrapper.setSessionName(uniqueName);    wrapper.setCenterX(wrapper.getCenterX() + deltaX);    wrapper.setCenterY(wrapper.getCenterY() + deltaY);  }}  }
class C{  public void rotate(float axisX,float axisY,float axisZ,float degrees){  transformMatrix.rotate(axisX,axisY,axisZ,degrees);  matrixDirty=true;}  }
class C{  public RoleChangedEvent(Object source){  super(source);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  void cacheSortables(){  sortablesToStrings=new HashMap<Sortables,String[]>();}  }
class C{  public static boolean hasRole(String role){  return getRoleManager().hasRole(role);}  }
class C{  synchronized public void remove(T item){  if (item == null)   return;  List<String> bitsToClear=new ArrayList<String>();  for (  Map.Entry<String,List<T>> entry : this.items.entrySet()) {    List<T> itemList=entry.getValue();    if (itemList == null)     continue;    if (itemList.contains(item))     itemList.remove(item);    if (itemList.size() == 0)     bitsToClear.add(entry.getKey());  }  for (  String bitNum : bitsToClear) {    this.bits.clear(Integer.parseInt(bitNum));  }}  }
class C{  public void openDrawer(){}  }
class C{  @Override public void updateRow() throws SQLException {  try {    debugCodeCall("updateRow");    checkUpdatable();    if (insertRow != null) {      throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);    }    checkOnValidRow();    if (updateRow != null) {      JdbcUpdatableRow row=getUpdatableRow();      Value[] current=new Value[columnCount];      for (int i=0; i < updateRow.length; i++) {        current[i]=get(i + 1);      }      row.updateRow(current,updateRow);      for (int i=0; i < updateRow.length; i++) {        if (updateRow[i] == null) {          updateRow[i]=current[i];        }      }      Value[] patch=row.readRow(updateRow);      patchCurrentRow(patch);      updateRow=null;    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public E putLongArray(final String key,@Nullable final long[] value){  this.bundle.putLongArray(key,value);  return (E)this;}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  mView.removeCallbacks(mAnimationStarter);  mView.postOnAnimation(mAnimationStarter);}  }
class C{  @Override public void switchPortChanged(DatapathId switchId,OFPortDesc port,PortChangeType type){switch (type) {case UP:    processNewPort(switchId,port.getPortNo());  break;case DELETE:case DOWN:handlePortDown(switchId,port.getPortNo());break;case OTHER_UPDATE:case ADD:break;}}  }
class C{  @SuppressWarnings("unchecked") public <T extends WebMediumConfig>T update(T config){  config.addCredentials(this);  String xml=POST(this.url + "/update-" + config.getType(),config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=(T)config.getClass().newInstance();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public PropertyType createPropertyType(){  PropertyTypeImpl propertyType=new PropertyTypeImpl();  return propertyType;}  }
class C{  private void processPatch(final State state){  if (state.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping patch operation processing (disabled)");    return;  }  try {switch (state.taskState.stage) {case STARTED:      this.queryStaleAvailabilityZones(state);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :this.failTask(new IllegalStateException(String.format("Un-expected stage: %s",state.taskState.stage)),null);}} catch (Throwable e) {failTask(e,null);}}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  if (bufOff + outOff > out.length) {    throw new DataLengthException("output buffer to small in doFinal");  }  int blockSize=cipher.getBlockSize();  int len=bufOff - blockSize;  byte[] block=new byte[blockSize];  if (forEncryption) {    cipher.processBlock(buf,0,block,0);    if (bufOff < blockSize) {      throw new DataLengthException("need at least one block of input for CTS");    }    for (int i=bufOff; i != buf.length; i++) {      buf[i]=block[i - blockSize];    }    for (int i=blockSize; i != bufOff; i++) {      buf[i]^=block[i - blockSize];    }    if (cipher instanceof CBCBlockCipher) {      BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();      c.processBlock(buf,blockSize,out,outOff);    } else {      cipher.processBlock(buf,blockSize,out,outOff);    }    System.arraycopy(block,0,out,outOff + blockSize,len);  } else {    byte[] lastBlock=new byte[blockSize];    if (cipher instanceof CBCBlockCipher) {      BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();      c.processBlock(buf,0,block,0);    } else {      cipher.processBlock(buf,0,block,0);    }    for (int i=blockSize; i != bufOff; i++) {      lastBlock[i - blockSize]=(byte)(block[i - blockSize] ^ buf[i]);    }    System.arraycopy(buf,blockSize,block,0,len);    cipher.processBlock(block,0,out,outOff);    System.arraycopy(lastBlock,0,out,outOff + blockSize,len);  }  int offset=bufOff;  reset();  return offset;}  }
class C{  public void highlightActionbarItem(int activeItemId){  for (int i=0; i < customActionbar.getIcContainer().getChildCount(); i++) {    customActionbar.getIcContainer().getChildAt(i).setBackgroundResource(R.color.custom_actionbar_bg);  }  if (activeItemId != ITEMS.SETTINGS.numVal) {    customActionbar.getIcContainer().findViewById(activeItemId).setBackgroundResource(R.color.custom_actionbar_item_highlight_bg);    Log.v(TAG,"highlight the icon: " + String.valueOf(activeItemId));  }}  }
class C{  public static long intersectionCount(FixedBitSet a,FixedBitSet b){  return BitUtil.pop_intersect(a.bits,b.bits,0,Math.min(a.numWords,b.numWords));}  }
class C{  @SuppressWarnings("unchecked") public final T column(String column){  this.column=column;  return (T)this;}  }
class C{  public static boolean removeUnusedVariables(TestCase t){  List<Integer> to_delete=new ArrayList<Integer>();  boolean has_deleted=false;  int num=0;  for (  Statement s : t) {    VariableReference var=s.getReturnValue();    if (!t.hasReferences(var)) {      to_delete.add(num);      has_deleted=true;    }    num++;  }  Collections.sort(to_delete,Collections.reverseOrder());  for (  Integer position : to_delete) {    t.remove(position);  }  return has_deleted;}  }
class C{  private void searchNode(final NaviNode node,final String searchString){  m_results.addAll(CNodeSearcher.search(node,searchString,m_settings.isRegEx(),m_settings.isCaseSensitive()));  if (!m_results.isEmpty()) {    m_cursor.reset();  }}  }
class C{  public boolean equivTo(Object other){  return (other instanceof ValueUnitPair) && ((ValueUnitPair)other).getValue().equivTo(this.getValue()) && ((ValueUnitPair)other).getUnit().equals(getUnit());}  }
class C{  public static void beforeTcpBind(FileDescriptor fdObj,InetAddress address,int port) throws IOException {}  }
class C{  public final void applyForce(Vec2 force,Vec2 point){  if (m_type != BodyType.DYNAMIC) {    return;  }  if (isAwake() == false) {    setAwake(true);  }  m_force.x+=force.x;  m_force.y+=force.y;  m_torque+=(point.x - m_sweep.c.x) * force.y - (point.y - m_sweep.c.y) * force.x;}  }
class C{  public void pauseAll() throws SchedulerException {  sched.pauseAll();}  }
class C{  public void addListener(String listenerTypeName,JAMonListener listener){synchronized (monData) {    Listeners listeners;    if (monData.hasListeners())     listeners=monData.getListeners(); else     listeners=monData.createListeners();    listeners.getListenerType(listenerTypeName).addListener(listener);  }}  }
class C{  void rescheduleJobs(final EvolutionState state){  while (true) {    Job job=null;synchronized (jobs) {      if (jobs.isEmpty()) {        return;      }      job=(Job)(jobs.removeFirst());    }    debug(Thread.currentThread().getName() + " Waiting for a slave to reschedule the evaluation.");    job.sent=false;    slaveMonitor.scheduleJobForEvaluation(state,job);    debug(Thread.currentThread().getName() + " Got a slave to reschedule the evaluation.");  }}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  service.getConnection(server.getId()).sendRawLineViaQueue("AWAY");}  }
class C{  public PoliticalActionAttachment waitForPoliticalAction(final boolean firstRun,final IPoliticsDelegate iPoliticsDelegate){  return m_politicsPanel.waitForPoliticalAction(firstRun,iPoliticsDelegate);}  }
class C{  private void fillFieldValues(){  if (isCreationPanel) {    label.setText("" + StraightMovement.DEFAULT_LABEL);    bma.setText("" + StraightMovement.DEFAULT_SCALING_FACTOR);  } else {    label.setText("" + straightEffector.getLabel());    bma.setText("" + straightEffector.getScalingFactor());  }}  }
class C{  public OpenSSLPBEParametersGenerator(){}  }
class C{  protected int whichSubset(Instance instance) throws Exception {  if (instance.isMissing(m_AttIndex)) {    return 2;  } else   if (instance.attribute(m_AttIndex).isNominal()) {    if ((int)instance.value(m_AttIndex) == m_SplitPoint) {      return 0;    } else {      return 1;    }  } else {    if (instance.value(m_AttIndex) <= m_SplitPoint) {      return 0;    } else {      return 1;    }  }}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(CONFIGURATION.getColorModel())) {    return image;  }  BufferedImage compatibleImage=CONFIGURATION.createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public CloudSqlDao(final String url) throws SQLException {  dataSource.setUrl(url);  final String createTableSql="CREATE TABLE IF NOT EXISTS books5 ( id INT NOT NULL " + "AUTO_INCREMENT, author VARCHAR(255), createdBy VARCHAR(255), createdById VARCHAR(255), " + "description VARCHAR(255), publishedDate VARCHAR(255), title VARCHAR(255), imageUrl "+ "VARCHAR(255), PRIMARY KEY (id))";  try (Connection conn=dataSource.getConnection()){    conn.createStatement().executeUpdate(createTableSql);  } }  }
class C{  private void buildDescriptionSection(PathOperation operation,MarkupDocBuilder docBuilder){  MarkupDocBuilder descriptionBuilder=copyMarkupDocBuilder();  applyPathsDocumentExtension(new Context(Position.OPERATION_DESCRIPTION_BEGIN,descriptionBuilder,operation));  buildDescriptionParagraph(operation.getOperation().getDescription(),descriptionBuilder);  applyPathsDocumentExtension(new Context(Position.OPERATION_DESCRIPTION_END,descriptionBuilder,operation));  String descriptionContent=descriptionBuilder.toString();  applyPathsDocumentExtension(new Context(Position.OPERATION_DESCRIPTION_BEFORE,docBuilder,operation));  if (isNotBlank(descriptionContent)) {    buildSectionTitle(DESCRIPTION,docBuilder);    docBuilder.text(descriptionContent);  }  applyPathsDocumentExtension(new Context(Position.OPERATION_DESCRIPTION_AFTER,docBuilder,operation));}  }
class C{  public static List<Emoji> data(){  return emojiData;}  }
class C{  public final void addValidationErrors(Iterable<String> errors){  for (  String error : errors) {    validationErrors.add(error);  }}  }
class C{  @Override public void onContainersAllocated(List<Container> containers){  List<SamzaResource> resources=new ArrayList<SamzaResource>();  for (  Container container : containers) {    log.info("Container allocated from RM on " + container.getNodeId().getHost());    final String id=container.getId().toString();    String host=container.getNodeId().getHost();    int memory=container.getResource().getMemory();    int numCores=container.getResource().getVirtualCores();    SamzaResource resource=new SamzaResource(numCores,memory,host,id);    allocatedResources.put(resource,container);    resources.add(resource);  }  clusterManagerCallback.onResourcesAvailable(resources);}  }
class C{  public static void debug(final String message,final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.debug(message,t);  } else {    System.err.printf("DEBUG: %s : %s\n",message,t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  @DebugLog public int delete(List<CollectionItem> items,int gameId){  if (items == null || items.size() == 0) {    return 0;  }  List<Integer> collectionIds=ResolverUtils.queryInts(resolver,Collection.CONTENT_URI,Collection.COLLECTION_ID,"collection." + Collection.GAME_ID + "=?",new String[]{String.valueOf(gameId)});  for (  CollectionItem item : items) {    collectionIds.remove(Integer.valueOf(item.collectionId()));  }  if (collectionIds.size() > 0) {    ArrayList<ContentProviderOperation> batch=new ArrayList<>();    for (    Integer collectionId : collectionIds) {      batch.add(ContentProviderOperation.newDelete(Collection.CONTENT_URI).withSelection(Collection.COLLECTION_ID + "=?",new String[]{String.valueOf(collectionId)}).build());    }    ResolverUtils.applyBatch(context,batch);  }  return collectionIds.size();}  }
class C{  public double nextExponential(){  return -Math.log(1.0 - super.nextDouble());}  }
class C{  public static CCAnimate action(CCAnimation anim,boolean restore){  assert anim != null : "Animate: argument Animation must be non-null";  return new CCAnimate(anim,restore);}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to AES init - " + params.getClass().getName());}  }
class C{  public boolean isNamespaceAware(){  return getFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES);}  }
class C{  public void forceRewriteExif(String filename) throws FileNotFoundException, IOException {  forceRewriteExif(filename,getAllTags());}  }
class C{  private Properties buildSSLProperties(DistributedSystemConfig config,boolean forCommandLine){  if (!config.isSSLEnabled())   return null;  String prefix="";  if (forCommandLine)   prefix=DistributionConfig.GEMFIRE_PREFIX;  Properties sslProps=(Properties)config.getSSLProperties().clone();  sslProps.setProperty(prefix + MCAST_PORT,"0");  sslProps.setProperty(prefix + CLUSTER_SSL_ENABLED,String.valueOf(config.isSSLEnabled()));  sslProps.setProperty(prefix + CLUSTER_SSL_CIPHERS,config.getSSLCiphers());  sslProps.setProperty(prefix + CLUSTER_SSL_PROTOCOLS,config.getSSLProtocols());  sslProps.setProperty(prefix + CLUSTER_SSL_REQUIRE_AUTHENTICATION,String.valueOf(config.isSSLAuthenticationRequired()));  return sslProps;}  }
class C{  public CacheReflectionTmLookup(){}  }
class C{  public static void showError(final String message,final Switch ignore){  closeStartupDialogs();  MessageService.instance().showError(message,ignore);}  }
class C{  private void processCGMirrors(CloseableIterator<CIMInstance> syncVolumeIter,WBEMClient client,DbClient dbClient,SmisCommandHelper helper,StorageSystem storage,List<BlockMirror> mirrors,String repGroupID,String syncInst,String syncType) throws Exception {  Map<String,BlockMirror> volIdToMirrorMap=new HashMap<String,BlockMirror>();  for (  BlockMirror mirror : mirrors) {    Volume volume=dbClient.queryObject(Volume.class,mirror.getSource());    volIdToMirrorMap.put(volume.getNativeId(),mirror);  }  Map<String,String> tgtToSrcMap=getConsistencyGroupSyncPairs(dbClient,helper,storage,volIdToMirrorMap.keySet(),SmisConstants.MIRROR_VALUE);  Calendar now=Calendar.getInstance();  while (syncVolumeIter.hasNext()) {    CIMInstance syncVolume=syncVolumeIter.next();    CIMObjectPath syncVolumePath=syncVolume.getObjectPath();    String syncDeviceID=syncVolumePath.getKeyValue(SmisConstants.CP_DEVICE_ID).toString();    String elementName=CIMPropertyFactory.getPropertyValue(syncVolume,SmisConstants.CP_ELEMENT_NAME);    String wwn=CIMPropertyFactory.getPropertyValue(syncVolume,SmisConstants.CP_WWN_NAME);    String alternateName=CIMPropertyFactory.getPropertyValue(syncVolume,SmisConstants.CP_NAME);    String volumeDeviceID=tgtToSrcMap.get(syncDeviceID);    BlockMirror mirror=volIdToMirrorMap.get(volumeDeviceID);    mirror.setReplicationGroupInstance(repGroupID);    mirror.setProvisionedCapacity(getProvisionedCapacityInformation(client,syncVolume));    mirror.setAllocatedCapacity(getAllocatedCapacityInformation(client,syncVolume));    mirror.setWWN(wwn);    mirror.setAlternateName(alternateName);    mirror.setNativeId(syncDeviceID);    mirror.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,mirror));    mirror.setDeviceLabel(elementName);    mirror.setInactive(false);    mirror.setCreationTime(now);    mirror.setSynchronizedInstance(syncInst);    mirror.setSyncType(syncType);    dbClient.persistObject(mirror);    _log.info(String.format("For target mirror volume %1$s, going to set BlockMirror %2$s nativeId to %3$s (%4$s). Associated volume is %5$s",syncVolumePath.toString(),mirror.getId().toString(),syncDeviceID,elementName,volumeDeviceID));  }}  }
class C{  public SpecificationRunnerExecutor stopOnFirstFailure(boolean stop){  this.stopOnFirstFailure=stop;  return this;}  }
class C{  @Deprecated @Override public void putAll(Map<? extends TypeToken<? extends B>,? extends B> map){  throw new UnsupportedOperationException();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  public JCTree.JCCompilationUnit parse(JavaFileObject filename){  JavaFileObject prev=log.useSource(filename);  try {    JCTree.JCCompilationUnit t=parse(filename,readSource(filename));    if (t.endPositions != null)     log.setEndPosTable(filename,t.endPositions);    return t;  }  finally {    log.useSource(prev);  }}  }
class C{  private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  public static final boolean contains(String input,String pattern,boolean ignoreCase){  final int n=pattern.length();  int last=0;  for (int i=0; i < n; ) {    char c=' ';    int j=i;    for (; j < n; j++) {      char c2=pattern.charAt(j);      if (c2 == ' ' || c2 == '+' || c2 == '*') {        c=c2;        break;      }    }    int k=subset(pattern,i,j,input,last,ignoreCase);    if (k < 0) {      return false;    }    if (c == ' ' || c == '+') {      last=0;    } else     if (c == '*') {      last=k + j - i;    }    i=j + 1;  }  return true;}  }
class C{  public void close() throws java.io.IOException {  return;}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  public IndTestFisherZRecursive(DataSet dataSet,double alpha){  if (!(dataSet.isContinuous())) {    throw new IllegalArgumentException("Data set must be continuous.");  }  this.covMatrix=new CovarianceMatrix(dataSet);  this._covMatrix=covMatrix.getMatrix();  List<Node> nodes=covMatrix.getVariables();  this.variables=Collections.unmodifiableList(nodes);  this.indexMap=indexMap(variables);  this.nameMap=mapNames(variables);  setAlpha(alpha);  this.dataSet=DataUtils.center(dataSet);  this.recursivePartialCorrelation=new RecursivePartialCorrelation(variables,_covMatrix);}  }
class C{  public static void zArraySet(boolean[] a,int i,boolean v){  try {    a[i]=v;  } catch (  Throwable t) {    a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)]=v;  }}  }
class C{  public KeywordMap(boolean ignoreCase,int mapLength){  this.mapLength=mapLength;  this.ignoreCase=ignoreCase;  map=new Keyword[mapLength];}  }
class C{  public static void igniteBlock(GlowBlock tntBlock,boolean ignitedByExplosion){  tntBlock.setType(Material.AIR);  World world=tntBlock.getWorld();  GlowTNTPrimed tnt=(GlowTNTPrimed)world.spawnEntity(tntBlock.getLocation().add(0.5,0,0.5),EntityType.PRIMED_TNT);  tnt.setIgnitedByExplosion(ignitedByExplosion);  world.playSound(tntBlock.getLocation(),Sound.ENTITY_TNT_PRIMED,1,1);}  }
class C{  public static void validateSelection(String selection,Set<String> allowedColumns){  try {    if (selection == null || selection.isEmpty()) {      return;    }    Lexer lexer=new Lexer(selection,allowedColumns);    parseExpression(lexer);    if (lexer.currentToken() != Lexer.TOKEN_END) {      throw new IllegalArgumentException("syntax error");    }  } catch (  RuntimeException ex) {    LLog.d("invalid selection [" + selection + "] triggered "+ ex);  }}  }
class C{  public boolean stillHasRelatedImageView(){  if (null == mFirstImageViewHolder || mFirstImageViewHolder.getImageView() == null) {    return false;  } else {    return true;  }}  }
class C{  public void expectSuccess(){  expectedApiCalls.add(new ApiCall(SUCCESS));}  }
class C{  static protected boolean hasList(Class<?> sipHdrClass){  if (!initialized)   initializeListMap();  return headerListTable.get(sipHdrClass) != null;}  }
class C{  public void addAll(T... items){  int start;synchronized (mLock) {    start=getItemCount();    Collections.addAll(mObjects,items);  }  if (mNotifyOnChange)   notifyItemRangeInserted(start,items.length);}  }
class C{  String inprogressZNodeName(long ledgerId,long firstTxId,long logSegmentSeqNo){  if (DistributedLogConstants.LOGSEGMENT_NAME_VERSION == conf.getLogSegmentNameVersion()) {    return String.format("%s_%018d",DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX,logSegmentSeqNo);  } else {    return DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX + "_" + Long.toString(firstTxId,16);  }}  }
class C{  public static int outcode(Rectangle r1,Rectangle r2){  int outcode=0;  if (r2.x > r1.x + r1.width) {    outcode=OUT_RIGHT;  } else   if (r2.x + r2.width < r1.x) {    outcode=OUT_LEFT;  }  if (r2.y > r1.y + r1.height) {    outcode|=OUT_BOTTOM;  } else   if (r2.y + r2.height < r1.y) {    outcode|=OUT_TOP;  }  return outcode;}  }
class C{  public void write(int c) throws IOException {  checkWrite();  super.write(c);}  }
class C{  static void downSamplingMergeInto(final HeapDoublesSketch src,final HeapDoublesSketch tgt){  final int targetK=tgt.getK();  final int sourceK=src.getK();  if ((sourceK % targetK) != 0) {    throw new SketchesArgumentException("source.getK() must equal target.getK() * 2^(nonnegative integer).");  }  final int downFactor=sourceK / targetK;  checkIfPowerOf2(downFactor,"source.getK()/target.getK() ratio");  final int lgDownFactor=Integer.numberOfTrailingZeros(downFactor);  final double[] sourceLevels=src.getCombinedBuffer();  final double[] sourceBaseBuffer=src.getCombinedBuffer();  final long nFinal=tgt.getN() + src.getN();  for (int i=0; i < src.getBaseBufferCount(); i++) {    tgt.update(sourceBaseBuffer[i]);  }  DoublesUpdateImpl.maybeGrowLevels(nFinal,tgt);  final double[] scratchBuf=new double[2 * targetK];  final double[] downBuf=new double[targetK];  long srcBitPattern=src.getBitPattern();  for (int srcLvl=0; srcBitPattern != 0L; srcLvl++, srcBitPattern>>>=1) {    if ((srcBitPattern & 1L) > 0L) {      justZipWithStride(sourceLevels,((2 + srcLvl) * sourceK),downBuf,0,targetK,downFactor);      DoublesUpdateImpl.inPlacePropagateCarry(srcLvl + lgDownFactor,downBuf,0,scratchBuf,0,false,tgt);    }  }  tgt.n_=nFinal;  assert tgt.getN() / (2 * targetK) == tgt.getBitPattern();  final double srcMax=src.getMaxValue();  final double srcMin=src.getMinValue();  final double tgtMax=tgt.getMaxValue();  final double tgtMin=tgt.getMinValue();  if (srcMax > tgtMax)   tgt.putMaxValue(srcMax);  if (srcMin < tgtMin)   tgt.putMinValue(srcMin);}  }
class C{  public String mapInvokeDynamicMethodName(String name,String desc){  return name;}  }
class C{  public final TestSubscriber<T> requestedFusionMode(int requestMode){  this.requestedFusionMode=requestMode;  return this;}  }
class C{  public int removeBatches(long... batchIds){  if (batchIds == null || batchIds.length == 0) {    throw new IllegalArgumentException("called with nothing to remove. input param 'batchIds' can't be null");  }  setDeletingStatusFor(batchIds);  return markBatchesToBeDeleted(batchIds);}  }
class C{  int helper(TreeNode root){  if (root == null)   return 0;  int left=helper(root.left);  int right=helper(root.right);  int curMax=Math.max(root.val,Math.max(left,right) + root.val);  max=Math.max(max,Math.max(curMax,left + right + root.val));  return curMax;}  }
class C{  public static <T>Range<T> open(T lowerBound,T upperBound){  return range(lowerBound,BoundType.OPEN,upperBound,BoundType.OPEN);}  }
class C{  @Override public String replacePath(String inputURI){  return inputURI;}  }
class C{  public DGeneratingKeyPair(JFrame parent,KeyPairType keyPairType,String curveName,Provider provider){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.keyPairType=keyPairType;  this.curveName=curveName;  this.provider=provider;  initComponents();}  }
class C{  private boolean isNodeAcceptingQueryHints(final BOp op){  if (op instanceof IValueExpressionNode) {    return false;  }  if (op instanceof IValueExpression) {    return false;  }  return true;}  }
class C{  public Quaternion(){  super();  matrix=new Matrixf4x4();  loadIdentityQuat();}  }
class C{  private int moveBall(double deltaSec){  int event=EVENT_NONE;  float radius=mBall.getRadius();  float distance=(float)(mBall.getSpeed() * deltaSec);  if (mDebugSlowMotionFrames > 0) {    final float SLOW_FACTOR=8.0f;    final float RAMP_FRAMES=60.0f;    float div;    if (mDebugSlowMotionFrames > RAMP_FRAMES) {      div=SLOW_FACTOR;    } else {      final float STEP=(SLOW_FACTOR - 1.0f) / RAMP_FRAMES;      div=SLOW_FACTOR - (STEP * (RAMP_FRAMES - mDebugSlowMotionFrames));    }    distance/=div;    mDebugSlowMotionFrames--;  }  while (distance > 0.0f) {    float curX=mBall.getXPosition();    float curY=mBall.getYPosition();    float dirX=mBall.getXDirection();    float dirY=mBall.getYDirection();    float finalX=curX + dirX * distance;    float finalY=curY + dirY * distance;    float left, right, top, bottom;    if (curX < finalX) {      left=curX - radius;      right=finalX + radius;    } else {      left=finalX - radius;      right=curX + radius;    }    if (curY < finalY) {      bottom=curY - radius;      top=finalY + radius;    } else {      bottom=finalY - radius;      top=curY + radius;    }    mDebugCollisionRect.setPosition((curX + finalX) / 2,(curY + finalY) / 2);    mDebugCollisionRect.setScale(right - left,top - bottom);    int hits=0;    for (int i=0; i < mBricks.length; i++) {      if (mBricks[i].isAlive() && checkCoarseCollision(mBricks[i],left,right,bottom,top)) {        mPossibleCollisions[hits++]=mBricks[i];      }    }    for (int i=0; i < NUM_BORDERS; i++) {      if (checkCoarseCollision(mBorders[i],left,right,bottom,top)) {        mPossibleCollisions[hits++]=mBorders[i];      }    }    if (checkCoarseCollision(mPaddle,left,right,bottom,top)) {      mPossibleCollisions[hits++]=mPaddle;    }    if (false) {      for (int i=0; i < NUM_SCORE_DIGITS; i++) {        if (checkCoarseCollision(mScoreDigits[i],left,right,bottom,top)) {          mPossibleCollisions[hits++]=mScoreDigits[i];        }      }    }    if (hits != 0) {      BaseRect hit=findFirstCollision(mPossibleCollisions,hits,curX,curY,dirX,dirY,distance,radius);      if (hit == null) {        hits=0;      } else {        if (GameSurfaceRenderer.EXTRA_CHECK) {          if (mHitDistanceTraveled <= 0.0f) {            Log.e(TAG,"GLITCH: collision detection didn't move the ball");            mHitDistanceTraveled=distance;          }        }        float newPosX=curX + dirX * mHitDistanceTraveled + mHitXAdj;        float newPosY=curY + dirY * mHitDistanceTraveled + mHitYAdj;        mBall.setPosition(newPosX,newPosY);        if (DEBUG_COLLISIONS) {          Log.d(TAG,"COL: intermediate cx=" + newPosX + " cy="+ newPosY);        }        float newDirX=dirX;        float newDirY=dirY;switch (mHitFace) {case HIT_FACE_HORIZONTAL:          newDirY=-dirY;        break;case HIT_FACE_VERTICAL:      newDirX=-dirX;    break;case HIT_FACE_SHARPCORNER:  newDirX=-dirX;newDirY=-dirY;break;case HIT_FACE_NONE:default :Log.e(TAG,"GLITCH: unexpected hit face" + mHitFace);break;}if (hit instanceof Brick) {Brick brick=(Brick)hit;brick.setAlive(false);mLiveBrickCount--;mScore+=brick.getScoreValue() * mScoreMultiplier;if (mLiveBrickCount == 0) {Log.d(TAG,"*** won ***");event=EVENT_LAST_BRICK;distance=0.0f;}SoundResources.play(SoundResources.BRICK_HIT);} else if (hit == mPaddle) {if (mHitFace == HIT_FACE_HORIZONTAL) {float paddleWidth=mPaddle.getXScale();float paddleLeft=mPaddle.getXPosition() - paddleWidth / 2;float hitAdjust=(newPosX - paddleLeft) / paddleWidth;if (hitAdjust < 0.0f) {hitAdjust=0.0f;}if (hitAdjust > 1.0f) {hitAdjust=1.0f;}int hitPercent=(int)(hitAdjust * 100.0f);hitAdjust-=0.5f;if (Math.abs(hitAdjust) > 0.25) {if (dirX < 0 && hitAdjust > 0 || dirX > 0 && hitAdjust < 0) {hitAdjust*=1.6;} else {hitAdjust*=1.2;}}hitAdjust*=1.25;newDirX+=hitAdjust;float maxRatio=3.0f;if (Math.abs(newDirX) > Math.abs(newDirY) * maxRatio) {if (newDirY < 0) {maxRatio=-maxRatio;}newDirY=Math.abs(newDirX) / maxRatio;}}SoundResources.play(SoundResources.PADDLE_HIT);} else if (hit == mBorders[BOTTOM_BORDER]) {if (!mNeverLoseBall) {event=EVENT_BALL_LOST;distance=0.0f;SoundResources.play(SoundResources.BALL_LOST);} else {mScore-=500 * mScoreMultiplier;if (mScore < 0) {mScore=0;}SoundResources.play(SoundResources.WALL_HIT);}} else {SoundResources.play(SoundResources.WALL_HIT);}int speed=mBall.getSpeed();speed+=(mBallMaximumSpeed - mBallInitialSpeed) * 3 / 100;if (speed > mBallMaximumSpeed) {speed=mBallMaximumSpeed;}mBall.setSpeed(speed);mBall.setDirection(newDirX,newDirY);distance-=mHitDistanceTraveled;if (DEBUG_COLLISIONS) {Log.d(TAG,"COL: remaining dist=" + distance + " new dirX="+ mBall.getXDirection()+ " dirY="+ mBall.getYDirection());}}}if (hits == 0) {if (DEBUG_COLLISIONS) {Log.d(TAG,"COL: none (dist was " + distance + ")");}mBall.setPosition(finalX,finalY);distance=0.0f;}}return event;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  Attr streetAttr;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("class");  streetAttr=testEmployee.setAttributeNode(newAttribute);  assertNotNull("previousAttrNotNull",streetAttr);  value=streetAttr.getValue();  assertEquals("previousAttrValue","No",value);}  }
class C{  public static ProfilerEvent unpack(byte[] buf) throws Exception {  int pos=0;  byte eventType=buf[pos++];  long connectionId=readInt(buf,pos);  pos+=8;  int statementId=readInt(buf,pos);  pos+=4;  int resultSetId=readInt(buf,pos);  pos+=4;  long eventCreationTime=readLong(buf,pos);  pos+=8;  long eventDuration=readLong(buf,pos);  pos+=4;  byte[] eventDurationUnits=readBytes(buf,pos);  pos+=4;  if (eventDurationUnits != null) {    pos+=eventDurationUnits.length;  }  readInt(buf,pos);  pos+=4;  byte[] eventCreationAsBytes=readBytes(buf,pos);  pos+=4;  if (eventCreationAsBytes != null) {    pos+=eventCreationAsBytes.length;  }  byte[] message=readBytes(buf,pos);  pos+=4;  if (message != null) {    pos+=message.length;  }  return new ProfilerEvent(eventType,"","",connectionId,statementId,resultSetId,eventCreationTime,eventDuration,StringUtils.toString(eventDurationUnits,"ISO8859_1"),StringUtils.toString(eventCreationAsBytes,"ISO8859_1"),null,StringUtils.toString(message,"ISO8859_1"));}  }
class C{  private Double calculate(String s){  Stack<Double> mystack=new Stack<>();  int pointer1=0;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case ' ':      mystack.push(Double.parseDouble(s.substring(pointer1,i)));    pointer1=i + 1;  break;case '*':pointer1++;double a=mystack.pop() * mystack.pop();mystack.push(a);break;case '/':double b=mystack.pop();double e=mystack.pop();pointer1++;mystack.push(e / b);break;case '+':double d=mystack.pop() + mystack.pop();mystack.push(d);pointer1++;break;case '-':double g=mystack.pop();pointer1++;double f=mystack.pop();mystack.push(f - g);break;default :}}return mystack.pop();}  }
class C{  protected void onShow(){}  }
class C{  public void paintArrowButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static void writeHashMapStringAndString(Map<String,String> map,Parcel out,int flags){  if (map != null) {    out.writeInt(map.size());    for (    Entry<String,String> entry : map.entrySet()) {      out.writeString(entry.getKey());      out.writeString(entry.getValue());    }  } else {    out.writeInt(-1);  }}  }
class C{  public void sendBroadcast(Context context,Intent intent){  context.sendBroadcast(intent);}  }
class C{  public static void checkException(Exception e){  if (e instanceof JPlagException) {    JPlagException je=(JPlagException)e;    System.out.println("JPlagException: " + je.getDescription() + "\n"+ je.getRepair());  } else   if (e instanceof RemoteException) {    RemoteException re=(RemoteException)e;    Throwable cause=re.getCause();    if (cause != null && cause instanceof ClientTransportException) {      cause=((JAXRPCExceptionBase)cause).getLinkedException();      if (cause != null) {        System.out.println("Connection exception: " + cause.getMessage());        return;      }    }    System.out.println("Unexpected RemoteException: " + re.getMessage());    re.printStackTrace();  } else {    System.out.println("Unexpected Exception: " + e.getMessage());    e.printStackTrace();  }}  }
class C{  public void resetFiltering(){  OMGraphicList list=getList();  if (list != null)   list.setVisible(true);}  }
class C{  public Guard_ createGuard_(){  Guard_Impl guard_=new Guard_Impl();  return guard_;}  }
class C{  private static void arraycopyPiecemeal(Object[] src,int srcIdx,Object[] dst,int dstIdx,int len){  if ((src != dst) || srcIdx >= dstIdx) {    while (len-- != 0) {      dst[dstIdx++]=src[srcIdx++];    }  } else {    srcIdx+=len;    dstIdx+=len;    while (len-- != 0) {      dst[--dstIdx]=src[--srcIdx];    }  }}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) @Override void changeViewPosition(float xAxisDelta,float yAxisDelta){  float endLeftBoundPointX=calculateEndLeftBound(xAxisDelta);  float endTopBoundPointY=calculateEndTopBound(yAxisDelta);  getView().setX(endLeftBoundPointX);  getView().setY(endTopBoundPointY);  LOGGER.trace("Updated view position: leftX = {}, topY = {}",endLeftBoundPointX,endTopBoundPointY);}  }
class C{  public static boolean isBookSearchUrl(String url){  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");}  }
class C{  public boolean areEqual(final AnnotatedTypeMirror type1,final AnnotatedTypeMirror type2,final VisitHistory visited){  if (type1 == null) {    return type2 == null;  }  if (type2 == null) {    return false;  }  return AtmCombo.accept(type1,type2,visited,this);}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  BasicBlock(int startval,int bn){  blockNumber=bn;  start=startval;}  }
class C{  public void clearSelection(){  if (selection != null && selection.length > 0) {    int selSize=selection.length;    boolean[] newness=new boolean[selSize];    for (int counter=0; counter < selSize; counter++)     newness[counter]=false;    TreeSelectionEvent event=new TreeSelectionEvent(this,selection,newness,leadPath,null);    leadPath=null;    leadIndex=leadRow=-1;    uniquePaths.clear();    selection=null;    resetRowSelection();    fireValueChanged(event);  }}  }
class C{  protected void storeState(){  partialBufferHelper.storeState();  substitutionModelDelegate.storeState();  if (useScaleFactors || useAutoScaling) {    scaleBufferHelper.storeState();    System.arraycopy(scaleBufferIndices,0,storedScaleBufferIndices,0,scaleBufferIndices.length);  }  super.storeState();}  }
class C{  private void insert(Object key,Contact contact){  Contact existing=done.remove(key);  if (existing != null) {    if (isText(contact)) {      contact=existing;    }  }  done.put(key,contact);}  }
class C{  private static Properties parseJNDIContext() throws NamingException {  NamingEnumeration<?> bindings=ic.listBindings("");  Properties properties=new Properties();  enumerateBindings(bindings,properties);  return properties;}  }
class C{  void deleteVirtualVolume(String virtualVolumeName,boolean unclaimVolumes,boolean retryOnDismantleFailure) throws VPlexApiException {  s_logger.info("Deleting virtual volume {}",virtualVolumeName);  VPlexVirtualVolumeInfo virtualVolumeInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterInfo.getName(),virtualVolumeName,false);    if (virtualVolumeInfo != null) {      break;    }  }  if (virtualVolumeInfo != null) {    s_logger.info("Tearing down virtual volume {}",virtualVolumeName);    try {      dismantleResource(virtualVolumeInfo.getPath(),unclaimVolumes,false);    } catch (    VPlexApiException vae) {      if (retryOnDismantleFailure) {        s_logger.info("Tear down of virtual volume {} failed: {}",virtualVolumeName,vae.getMessage());        deleteVirtualVolume(virtualVolumeName,unclaimVolumes,false);      } else {        throw vae;      }    }  } else   if (virtualVolumeName.endsWith(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX)) {    String deviceName=virtualVolumeName.substring(0,virtualVolumeName.indexOf(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX));    if (deviceName.startsWith(VPlexApiConstants.DIST_DEVICE_PREFIX)) {      s_logger.info("Tearing down distributed device for virtual volume {}",virtualVolumeName);      deleteDistributedDevice(deviceName);    } else {      s_logger.info("Tearing down local device for virtual volume {}",virtualVolumeName);      deleteLocalDevice(deviceName);    }  }}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new HashMap<String,String>();  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public BusinessObjectDataEntity createDatabaseEntitiesForInitiateRestoreTesting(BusinessObjectDataKey businessObjectDataKey,String originStorageName,String originBucketName,String originStorageUnitStatus,String glacierStorageName,String glacierStorageBucketName,String glacierStorageUnitStatus,String glacierStorageDirectoryPath){  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(businessObjectDataKey,AbstractServiceTest.LATEST_VERSION_FLAG_SET,AbstractServiceTest.BDATA_STATUS);  StorageEntity originStorageEntity;  if (originBucketName != null) {    originStorageEntity=storageDaoTestHelper.createStorageEntity(originStorageName,StoragePlatformEntity.S3,configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),originBucketName);  } else {    originStorageEntity=storageDaoTestHelper.createStorageEntity(originStorageName,StoragePlatformEntity.S3);  }  StorageEntity glacierStorageEntity;  if (glacierStorageBucketName != null) {    glacierStorageEntity=storageDaoTestHelper.createStorageEntity(glacierStorageName,StoragePlatformEntity.GLACIER,configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),glacierStorageBucketName);  } else {    glacierStorageEntity=storageDaoTestHelper.createStorageEntity(glacierStorageName,StoragePlatformEntity.GLACIER);  }  StorageUnitEntity originStorageUnitEntity=storageUnitDaoTestHelper.createStorageUnitEntity(originStorageEntity,businessObjectDataEntity,originStorageUnitStatus,AbstractServiceTest.NO_STORAGE_DIRECTORY_PATH);  StorageUnitEntity glacierStorageUnitEntity=storageUnitDaoTestHelper.createStorageUnitEntity(glacierStorageEntity,businessObjectDataEntity,glacierStorageUnitStatus,glacierStorageDirectoryPath);  glacierStorageUnitEntity.setParentStorageUnit(originStorageUnitEntity);  for (  String relativeFilePath : AbstractServiceTest.LOCAL_FILES) {    storageFileDaoTestHelper.createStorageFileEntity(originStorageUnitEntity,String.format("%s/%s",AbstractServiceTest.TEST_S3_KEY_PREFIX,relativeFilePath),AbstractServiceTest.FILE_SIZE_1_KB,AbstractServiceTest.ROW_COUNT);  }  return businessObjectDataEntity;}  }
class C{  protected PolicyLimit(){  super(null);}  }
class C{  public ConnectMethod(final HostConfiguration targethost){  super();  if (targethost == null) {    throw new IllegalArgumentException("Target host may not be null");  }  this.targethost=targethost;}  }
class C{  public boolean isASIMandatory(boolean isSOTrx,int AD_Org_ID){  MAcctSchema[] mass=MAcctSchema.getClientAcctSchema(getCtx(),getAD_Client_ID(),get_TrxName());  for (  MAcctSchema as : mass) {    String cl=getCostingLevel(as);    if (MAcctSchema.COSTINGLEVEL_BatchLot.equals(cl)) {      return true;    }  }  int M_AttributeSet_ID=getM_AttributeSet_ID();  if (M_AttributeSet_ID != 0) {    MAttributeSet mas=MAttributeSet.get(getCtx(),M_AttributeSet_ID);    if (mas == null || !mas.isInstanceAttribute())     return false; else     if (isSOTrx)     return mas.isMandatory(); else     return mas.isMandatoryAlways();  }  return false;}  }
class C{  @Override protected Size2D arrangeNN(Graphics2D g2){  Range max=new Range(0.0,Float.MAX_VALUE);  return arrangeRR(g2,max,max);}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public void propertyChange(PropertyChangeEvent event){  if (event == null) {    String msg=Logging.getMessage("nullValue.EventIsNull");    Logging.logger().log(java.util.logging.Level.FINE,msg);    throw new IllegalArgumentException(msg);  }  if (event.getPropertyName().equals(AVKey.VERTICAL_EXAGGERATION)) {    this.updateControlPoints();  }}  }
class C{  public static String toHexString(final byte[] data,int offset,int length){  final StringBuilder hexBuilder=new StringBuilder(length * 2);  for (length+=offset; offset < length; offset++) {    final byte b=data[offset];    hexBuilder.append(HEX_DIGITS[(b & 0xff) >> 4]).append(HEX_DIGITS[b & 0x0f]);  }  return hexBuilder.toString();}  }
class C{  public void processFileAndScheduleJobs(String fileName,Scheduler sched) throws Exception {  processFileAndScheduleJobs(fileName,getSystemIdForFileName(fileName),sched);}  }
class C{  public static long toLongValue(double d){  return (long)d;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void handleMessages(LinkProperties props){  String value=props.getProperty(LPC_INFO);  if (value != null)   fireRequestInfoLine(value);  value=props.getProperty(LPC_URL);  if (value != null) {    fireRequestURL(value);  } else {    value=props.getProperty(LPC_HTML);    if (value != null)     fireRequestBrowserContent(value);  }  value=props.getProperty(LPC_MESSAGE);  if (value != null)   fireRequestMessage(value);}  }
class C{  public FloatMatrix maxi(FloatMatrix other,FloatMatrix result){  if (result == this) {    for (int i=0; i < length; i++) {      if (get(i) < other.get(i)) {        put(i,other.get(i));      }    }  } else {    for (int i=0; i < length; i++) {      if (get(i) < other.get(i)) {        result.put(i,other.get(i));      } else {        result.put(i,get(i));      }    }  }  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.178 -0500",hash_original_method="49DBB49355B8BD4E95F5FBA6E171926E",hash_generated_method="59EFD5B8330CF6583E735570D5217D7A") private BrowserFrame createWindow(boolean dialog,boolean userGesture){  return mCallbackProxy.createWindow(dialog,userGesture);}  }
class C{  private List<Statement> newBucketStatement(PolicyType policy,String prefix){  List<Statement> statements=new ArrayList<Statement>();  if (policy == PolicyType.NONE || bucketName == null || bucketName.isEmpty()) {    return statements;  }  Resources resources=new Resources(Constants.AWS_RESOURCE_PREFIX + bucketName);  Statement statement=new Statement();  statement.setActions(Constants.COMMON_BUCKET_ACTIONS);  statement.setEffect("Allow");  statement.setPrincipal(new Principal("*"));  statement.setResources(resources);  statement.setSid("");  statements.add(statement);  if (policy == PolicyType.READ_ONLY || policy == PolicyType.READ_WRITE) {    statement=new Statement();    statement.setActions(Constants.READ_ONLY_BUCKET_ACTIONS);    statement.setEffect("Allow");    statement.setPrincipal(new Principal("*"));    statement.setResources(resources);    statement.setSid("");    if (prefix != null && !prefix.isEmpty()) {      statement.setConditions(new ConditionMap("StringEquals",new ConditionKeyMap("s3:prefix",prefix)));    }    statements.add(statement);  }  if (policy == PolicyType.WRITE_ONLY || policy == PolicyType.READ_WRITE) {    statement=new Statement();    statement.setActions(Constants.WRITE_ONLY_BUCKET_ACTIONS);    statement.setEffect("Allow");    statement.setPrincipal(new Principal("*"));    statement.setResources(resources);    statement.setSid("");    statements.add(statement);  }  return statements;}  }
class C{  public static String printMediaType(MediaType mediaType){  return mediaType.getType() + "/" + mediaType.getSubtype();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String histoFile=null;  double range=0;  int numIterations=0;  double z=0;  int row, col;  float progress=0;  double[] data1;  double[] data2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      histoFile=args[i];    } else     if (i == 3) {      range=Double.parseDouble(args[i]);    } else     if (i == 4) {      numIterations=Integer.parseInt(args[i]);    } else     if (i == 5) {      numBands=Integer.parseInt(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    double[][] output=new double[rows][cols];    for (int iterationNum=0; iterationNum < numIterations; iterationNum++) {      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(0 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      tempGrid1=new double[rows][cols];      tempGrid2=new double[rows][cols];      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          tempGrid2[row][col]=noData;        }      }      TurningBandSimulation(range);      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(1 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      HistogramMatching(histoFile);      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(2 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      for (row=0; row < rows; row++) {        data1=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          if (data1[col] != noData) {            tempGrid1[row][col]=data1[col] + tempGrid2[row][col];          } else {            tempGrid1[row][col]=noData;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(3 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      FillDepressions();      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(4 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tempGrid2[row][col] > tempGrid1[row][col]) {            output[row][col]+=1;          }        }      }      progress=(float)(5 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      if (cancelOp) {        cancelOperation();        return;      }    }    outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    outputFile.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      data1=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (data1[col] != noData) {          outputFile.setValue(row,col,output[row][col]);        } else {          outputFile.setValue(row,col,noData);        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    DEM.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.FINAL_STATE;}  }
class C{  protected static void copy(InputStream in,OutputStream out){  byte[] buffer=new byte[1024];  int read;  try {    while ((read=in.read(buffer)) > -1) {      out.write(buffer,0,read);    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected void fireColumnSelectionChanged(ListSelectionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      ((TableColumnModelListener)listeners[i + 1]).columnSelectionChanged(e);    }  }}  }
class C{  public Compiler(ErrorListener errorHandler,SourceLocator locator,FunctionTable fTable){  m_errorHandler=errorHandler;  m_locator=locator;  m_functionTable=fTable;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return VERSIONS;case 2:  return TIMESTAMP;default :return null;}}  }
class C{  @DSComment("Touch event tracking") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:14.333 -0500",hash_original_method="E0F67E3C99A5EE80DA0668A59C0EFAE4",hash_generated_method="670C7475CA1A8676109F0146EDF2835F") public void recycle(){  sPool.release(this);}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public ShutdownGracefully(ActivationID id,MarshalledObject mo) throws RemoteException {  super(id,0);}  }
class C{  protected long unwrap(Object value){  return ((Long)value).longValue();}  }
class C{  private void finishInitialisation(){  observations=null;  observationsByHash=null;  bins=null;  useBins=true;  usingIntegerIndexBins=true;  mins=null;  multipliers=null;  rawData=null;  totalObservations=0;  kernelWidthsInUse=new double[dimensions];}  }
class C{  @Override public int compareTo(Object o){  Outlier outlier=(Outlier)o;  Point2D p1=getPoint();  Point2D p2=outlier.getPoint();  if (p1.equals(p2)) {    return 0;  } else   if ((p1.getX() < p2.getX()) || (p1.getY() < p2.getY())) {    return -1;  } else {    return 1;  }}  }
class C{  public void runValidation(final PojoClass pojoClass){  ValidationHelper.runValidation(pojoClass,rules,testers);}  }
class C{  public static IPackageFragmentRoot addSourceContainerWithImport(IJavaProject jproject,String containerName,File zipFile,String containerEncoding,IPath[] exclusionFilters) throws InvocationTargetException, CoreException, IOException {  ZipFile file=new ZipFile(zipFile);  try {    IPackageFragmentRoot root=addSourceContainer(jproject,containerName,exclusionFilters);    ((IContainer)root.getCorrespondingResource()).setDefaultCharset(containerEncoding,null);    importFilesFromZip(file,root.getPath(),null);    return root;  }  finally {    file.close();  }}  }
class C{  public QRBase(String id,String type,long countdown){  this(id,type);  setCountdown(countdown);}  }
class C{  private void exportNoteToText(String noteId,PrintStream ps){  Cursor dataCursor=mContext.getContentResolver().query(Notes.CONTENT_DATA_URI,DATA_PROJECTION,DataColumns.NOTE_ID + "=?",new String[]{noteId},null);  if (dataCursor != null) {    if (dataCursor.moveToFirst()) {      do {        String mimeType=dataCursor.getString(DATA_COLUMN_MIME_TYPE);        if (DataConstants.CALL_NOTE.equals(mimeType)) {          String phoneNumber=dataCursor.getString(DATA_COLUMN_PHONE_NUMBER);          long callDate=dataCursor.getLong(DATA_COLUMN_CALL_DATE);          String location=dataCursor.getString(DATA_COLUMN_CONTENT);          if (!TextUtils.isEmpty(phoneNumber)) {            ps.println(String.format(getFormat(FORMAT_NOTE_CONTENT),phoneNumber));          }          ps.println(String.format(getFormat(FORMAT_NOTE_CONTENT),DateFormat.format(mContext.getString(R.string.format_datetime_mdhm),callDate)));          if (!TextUtils.isEmpty(location)) {            ps.println(String.format(getFormat(FORMAT_NOTE_CONTENT),location));          }        } else         if (DataConstants.NOTE.equals(mimeType)) {          String content=dataCursor.getString(DATA_COLUMN_CONTENT);          if (!TextUtils.isEmpty(content)) {            ps.println(String.format(getFormat(FORMAT_NOTE_CONTENT),content));          }        }      } while (dataCursor.moveToNext());    }    dataCursor.close();  }  try {    ps.write(new byte[]{Character.LINE_SEPARATOR,Character.LETTER_NUMBER});  } catch (  IOException e) {    Log.e(TAG,e.toString());  }}  }
class C{  public Object clone(){  Matrix4f m1=null;  try {    m1=(Matrix4f)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  return m1;}  }
class C{  public static void main(String[] args){  int instr=Integer.parseInt(args[0],16);  int addr=Integer.parseInt(args[1],16);  System.out.println("instr = " + intAsHexString(instr) + " addr = "+ intAsHexString(addr));  System.out.println("result --> " + disasm(instr,addr));}  }
class C{  public void eliminarDetallePrevision(PrevisionVO prevision,String[] idDetallePrevision) throws ActionNotAllowedException {  Locale locale=getServiceClient().getLocale();  PistaAuditoriaTransferencias pistaAuditoria=AuditoriaTransferencias.crearPistaAuditoria(ArchivoActions.TRANSFERENCIAS_MODULE_EDICION_PREVISION_TRANSFERENCIA,this);  pistaAuditoria.addDetalleBasico(locale,prevision,TransferenciasConstants.TRANSFERENCIAS_TIPO_EDICION_ELIMIACION_LINEA_DETALLE);  checkPermission(TransferenciasSecurityManager.GESTION_PREVISION_EN_ORGANO_REMITENTE);  verificarPermisosGeneralesTransferencia(prevision);  PrevisionAuthorizationHelper authorizationHelper=getPrevisionAuthorizationHelper();  if (authorizationHelper.puedeSerEditada(prevision)) {    iniciarTransaccion();    int nUInstalacion=prevision.getNumuinstalacion();    int nDetallesAEliminar=idDetallePrevision.length;    DetallePrevisionVO detallePrevision=null;    int[] ordenDetallePrevision=new int[idDetallePrevision.length];    for (int i=0; i < nDetallesAEliminar; i++) {      detallePrevision=_detallePrevisionDBEntity.selectRow(idDetallePrevision[i]);      ordenDetallePrevision[i]=detallePrevision.getNumeroOrden();      _detallePrevisionDBEntity.dropRow(prevision.getId(),idDetallePrevision[i]);      nUInstalacion=nUInstalacion - detallePrevision.getNumUInstalacion();    }    Arrays.sort(ordenDetallePrevision);    String strOrdenDetalles=ArrayUtils.join(ordenDetallePrevision,",");    _previsionDbEntity.updateNUnidadesInstalacion(prevision.getId(),nUInstalacion);    _previsionDbEntity.updateEstadoAndFechaEstado(prevision.getId(),EstadoPrevision.ABIERTA.getIdentificador(),new Date());    Collection detallesPrevision=_detallePrevisionDBEntity.fetchRowsByCodigoPrevision(prevision.getId());    if (detallesPrevision != null) {      int newIndex=1;      for (Iterator itDetallesPrevision=detallesPrevision.iterator(); itDetallesPrevision.hasNext(); ) {        DetallePrevisionVO detalle=(DetallePrevisionVO)itDetallesPrevision.next();        detalle.setNumeroOrden(newIndex++);        _detallePrevisionDBEntity.updateRow(detalle);      }    }    pistaAuditoria.auditaPrevisionEliminarDetalle(locale,prevision,strOrdenDetalles,nUInstalacion,this);    commit();    prevision.setNumuinstalacion(nUInstalacion);  } else   throw new ActionNotAllowedException(authorizationHelper.getErrorCode());}  }
class C{  @Override public void updateByte(String columnLabel,byte x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateByte(" + columnLabel + ", "+ x+ ");");    }    update(columnLabel,ValueByte.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public QueryOrTemplateCall(Resource cls,TemplateCall templateCall){  this.cls=cls;  this.templateCall=templateCall;}  }
class C{  public void write(Object[] values,EventBean theEvent){  ObjectArrayBackedEventBean arrayEvent=(ObjectArrayBackedEventBean)theEvent;  Object[] arr=arrayEvent.getProperties();  for (int i=0; i < writers.length; i++) {    writers[i].write(values[i],arr);  }}  }
class C{  public void addSeriesRenderer(int index,SimpleSeriesRenderer renderer){  mRenderers.add(index,renderer);}  }
class C{  @HLEFunction(nid=0xB7660A23,version=150,checkInsideInterrupt=true) public int __sceSasSetNoise(int sasCore,int voice,int freq){  checkSasAndVoiceHandlesGood(sasCore,voice);  voices[voice].setNoise(freq);  return 0;}  }
class C{  public void dispose(){  m_hexView.removeHexListener(m_hexListener);  synchronizeDebugger(m_debugPerspectiveModel.getCurrentSelectedDebugger(),null);  m_debugPerspectiveModel.removeListener(m_debugListener);}  }
class C{  public void test_read$BII() throws IOException {  DigestInputStream dis=new DigestInputStream(inStream,digest);  int bytesToRead=inStream.available();  byte buf1[]=new byte[bytesToRead + 5];  byte buf2[]=new byte[bytesToRead + 5];  assertTrue("No data to read for this test",bytesToRead > 0);  int bytesRead1=dis.read(buf1,5,bytesToRead);  int bytesRead2=inStream1.read(buf2,5,bytesToRead);  assertEquals("Didn't read the same from each stream",bytesRead1,bytesRead2);  assertEquals("Didn't read the entire",bytesRead1,bytesToRead);  boolean same=true;  for (int i=0; i < bytesToRead + 5; i++) {    if (buf1[i] != buf2[i]) {      same=false;    }  }  assertTrue("Didn't get the same data",same);}  }
class C{  public ServerCommunicationSystem(ServerViewController controller,ServiceReplica replica) throws Exception {  super("Server CS");  this.controller=controller;  inQueue=new LinkedBlockingQueue<SystemMessage>(controller.getStaticConf().getInQueueSize());  serversConn=new ServersCommunicationLayer(controller,inQueue,replica);  clientsConn=CommunicationSystemServerSideFactory.getCommunicationSystemServerSide(controller);}  }
class C{  public static OMPoly read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  @Override public boolean isFirstTime(){  return !myIsRefresh;}  }
class C{  @Override public void execute(Runnable worker){  if (executor == null) {    executor=Executors.newSingleThreadExecutor();  }  executor.execute(worker);}  }
class C{  @Override public ArrayList<Object>[] mineCARs(Instances data) throws Exception {  m_car=true;  buildAssociations(data);  return m_allTheRules;}  }
class C{  public boolean isVlanRange(){  return vlanRange;}  }
class C{  private void loadReceiptDetails(){  setDeptId(receiptHeader.getReceiptMisc().getDepartment().getId().toString());  setDept(receiptHeader.getReceiptMisc().getDepartment());  if (!receiptHeader.getReceiptDetails().isEmpty()) {    final CFunction function=receiptHeader.getReceiptDetails().iterator().next().getFunction();    if (function != null) {      setFunctionId(function.getId());      setFunction(function);    }  }  setBoundary(receiptHeader.getReceiptMisc().getBoundary());  setServiceCategoryId(receiptHeader.getService().getServiceCategory().getId());  setServiceId(receiptHeader.getService().getId());  if (null != receiptHeader.getService() && null != receiptHeader.getService().getServiceCategory() && receiptHeader.getService().getServiceCategory().getId() != -1)   addDropdownData("serviceList",serviceDetailsService.findAllByNamedQuery(CollectionConstants.QUERY_SERVICE_BY_CATEGORY_FOR_TYPE,receiptHeader.getService().getServiceCategory().getId(),CollectionConstants.SERVICE_TYPE_CHALLAN_COLLECTION,Boolean.TRUE)); else   addDropdownData("serviceList",Collections.EMPTY_LIST);  setBillDetailslist(collectionCommon.setReceiptDetailsList(receiptHeader,CollectionConstants.COLLECTIONSAMOUNTTPE_BOTH));  setSubLedgerlist(collectionCommon.setAccountPayeeList(receiptHeader));  for (  final ReceiptDetail rDetails : receiptHeader.getReceiptDetails())   if (rDetails.getFunction() != null)   setFunction(rDetails.getFunction());  if (receiptHeader.getReceiptMisc().getBoundary() != null)   setBoundaryId(receiptHeader.getReceiptMisc().getBoundary().getId());  if (receiptHeader.getChallan() != null && receiptHeader.getChallan().getVoucherHeader() != null)   setVoucherNumber(receiptHeader.getChallan().getVoucherHeader().getVoucherNumber());  if (receiptHeader.getTotalAmount() != null)   receiptHeader.setTotalAmount(receiptHeader.getTotalAmount().setScale(CollectionConstants.AMOUNT_PRECISION_DEFAULT,BigDecimal.ROUND_UP));}  }
class C{  public DistributionStats(Statistics stats){  this.stats=stats;}  }
class C{  public ImmutableSet<BaseType> deleteMember(final TypeMember member){  Preconditions.checkNotNull(member,"IE02765: Member can not be null.");  return deleteMember(member.getParentType(),member.getBaseType());}  }
class C{  public void configs(Iterable<SwtPlatform> platforms){  for (  SwtPlatform platform : platforms) {    addArg("configs",platform.toString());  }}  }
class C{  public ThreadManagedMetaBeanProperty(Class declaringClass,String name,Class type,Closure initialValueCreator){  super(name,type,null,null);  this.type=type;  this.declaringClass=declaringClass;  this.getter=new ThreadBoundGetter(name);  this.setter=new ThreadBoundSetter(name);  this.initialValueCreator=initialValueCreator;  instance2Prop=getInstance2PropName(name);}  }
class C{  public static byte[] toByteArray(File file) throws IOException {  return asByteSource(file).read();}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(version);  if (originatorInfo != null) {    v.add(new DERTaggedObject(false,0,originatorInfo));  }  v.add(recipientInfos);  v.add(encryptedContentInfo);  if (unprotectedAttrs != null) {    v.add(new DERTaggedObject(false,1,unprotectedAttrs));  }  return new BERSequence(v);}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.DELEGATING_SETTER_DECLARATION;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.134 -0500",hash_original_method="769B7E21D870172A915EE6F0EB6B2D2C",hash_generated_method="E132C299AAE3D6417B8A2956E9FD212B") public void documentAsText(Message callback){  StringBuilder text=new StringBuilder();  if (callback.arg1 != 0) {    text.append(documentAsText());  }  if (callback.arg2 != 0) {    text.append(childFramesAsText());  }  callback.obj=text.toString();  callback.sendToTarget();}  }
class C{  public boolean acceptsBuiltDate(String date){  if (getBuiltStartYear().equals(NONE) && getBuiltEndYear().equals(NONE)) {    return true;  }  int startYear=0;  int endYear=99999;  int builtYear=-1900;  try {    startYear=Integer.parseInt(getBuiltStartYear());  } catch (  NumberFormatException e1) {    log.debug("Train (" + getName() + ") built start date not initialized, start: "+ getBuiltStartYear());  }  try {    endYear=Integer.parseInt(getBuiltEndYear());  } catch (  NumberFormatException e1) {    log.debug("Train (" + getName() + ") built end date not initialized, end: "+ getBuiltEndYear());  }  try {    builtYear=Integer.parseInt(date);  } catch (  NumberFormatException e1) {    String[] built=date.split("-");    if (built.length == 2) {      try {        builtYear=Integer.parseInt(built[1]);      } catch (      NumberFormatException e2) {        log.debug("Unable to parse car built date " + date);      }    }  }  if (builtYear < 100) {    builtYear=builtYear + 1900;  }  if (startYear < builtYear && builtYear < endYear) {    return true;  }  return false;}  }
class C{  private void maybeCacheBitmapDuringRender(int frameNumber,Bitmap bitmap){  boolean cacheBitmap=false;synchronized (this) {    boolean shouldCache=mBitmapsToKeepCached.get(frameNumber);    if (shouldCache) {      cacheBitmap=mCachedBitmaps.get(frameNumber) == null;    }  }  if (cacheBitmap) {    copyAndCacheBitmapDuringRendering(frameNumber,bitmap);  }}  }
class C{  @Override public String toString(){  StringBuilder strb=new StringBuilder("[");  StreamSupport.stream(spliterator(),false).map(null).collect(Collectors.joining(","));  strb.append("]");  return strb.toString();}  }
class C{  void addCaseToComposite(Vector<NodeRepresentation> nodeRepVector,Composite composite){  Composite comp;  GridData gridData;  GridLayout gridLayout;  Label assumeLabel;  for (int i=0; i < nodeRepVector.size(); i++) {    NodeRepresentation aRep=nodeRepVector.elementAt(i);    if ((aRep.nodeType == NodeRepresentation.NEW_NODE) || (aRep.nodeType == NodeRepresentation.OTHER_NODE) || ((aRep.nodeType == NodeRepresentation.EXPR_NODE) && (aRep.nodeSubtype != NodeRepresentation.OR_TYPE) && (aRep.nodeSubtype != NodeRepresentation.EXISTS_TYPE)&& (aRep.nodeSubtype != NodeRepresentation.SQSUB_TYPE))) {      String text=stringArrayToString(nodeRepVector.elementAt(i).primedNodeText());      while (nodeRepVector.elementAt(i).onSameLineAsNext) {        i++;        text=text + ", " + stringArrayToString(nodeRepVector.elementAt(i).primedNodeText());      }      assumeLabel=new Label(composite,SWT.NONE);      assumeLabel.setText(text);      assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));      gridData=new GridData();      gridData.horizontalSpan=3;      assumeLabel.setLayoutData(gridData);    } else     if (aRep.nodeType != NodeRepresentation.OR_DECOMP) {      String labelText=null;      if ((aRep.semanticNode != null) && (aRep.semanticNode.getKind() == ASTConstants.OpApplKind)) {switch (aRep.nodeSubtype) {case NodeRepresentation.AND_TYPE:          labelText=null;        break;case NodeRepresentation.OR_TYPE:case NodeRepresentation.SQSUB_TYPE:      labelText="\\/";    break;case NodeRepresentation.EXISTS_TYPE:  labelText="\\E";break;default :labelText=null;}}if (labelText != null) {Button button=new Button(composite,SWT.PUSH);setupActionButton(button,nodeRepVector.elementAt(i),labelText);if ((aRep.nodeSubtype == NodeRepresentation.AND_TYPE) || (aRep.nodeSubtype == NodeRepresentation.FORALL_TYPE)) {button.setEnabled(false);}} else {comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);assumeLabel=new Label(comp,SWT.NONE);assumeLabel.setText("  ");gridData=new GridData();gridData.horizontalIndent=25;comp.setLayoutData(gridData);}comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);comp.setSize(0,5);comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(3,false);comp.setLayout(gridLayout);if ((chosenSplit == -1) && (andSplitBegin <= i) && (i <= andSplitEnd)) {Button arrowButton=new Button(comp,SWT.ARROW | SWT.UP);arrowButton.addSelectionListener(new ArrowSelectionListener(i,SWT.UP,this));gridData=new GridData();gridData.verticalAlignment=SWT.TOP;arrowButton.setLayoutData(gridData);if (i == andSplitBegin) {arrowButton.setEnabled(false);}arrowButton=new Button(comp,SWT.ARROW | SWT.DOWN);arrowButton.addSelectionListener(new ArrowSelectionListener(i,SWT.DOWN,this));gridData=new GridData();gridData.verticalAlignment=SWT.TOP;arrowButton.setLayoutData(gridData);if (i == andSplitEnd) {arrowButton.setEnabled(false);}}assumeLabel=new Label(comp,SWT.NONE);String text=stringArrayToString(nodeRepVector.elementAt(i).primedNodeText());assumeLabel.setText(text);assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));gridData=new GridData();gridData.horizontalIndent=0;gridData.verticalAlignment=SWT.TOP;gridData.horizontalAlignment=SWT.LEFT;assumeLabel.setLayoutData(gridData);} else {{assumeLabel=new Label(composite,SWT.NONE);assumeLabel.setText("  ");comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);}comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);Composite inner=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(2,false);inner.setLayout(gridLayout);for (int j=0; j < aRep.children.size(); j++) {assumeLabel=new Label(inner,SWT.NONE);assumeLabel.setText("CASE");assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));Composite caseComp=new Composite(inner,SWT.BORDER);gridLayout=new GridLayout(3,false);caseComp.setLayout(gridLayout);addCaseToComposite(aRep.children.elementAt(j),caseComp);gridData=new GridData();gridData.verticalAlignment=SWT.TOP;caseComp.setLayoutData(gridData);}}}}  }
class C{  static void testTwoWatchers(Path dir) throws IOException {  System.out.println("-- Two watchers test --");  FileSystem fs=FileSystems.getDefault();  WatchService watcher1=fs.newWatchService();  WatchService watcher2=fs.newWatchService();  try {    Path name1=fs.getPath("gus1");    Path name2=fs.getPath("gus2");    Path file1=dir.resolve(name1);    System.out.format("create %s\n",file1);    Files.createFile(file1);    System.out.println("register for different events");    WatchKey key1=dir.register(watcher1,new WatchEvent.Kind<?>[]{ENTRY_CREATE});    WatchKey key2=dir.register(watcher2,new WatchEvent.Kind<?>[]{ENTRY_DELETE});    if (key1 == key2)     throw new RuntimeException("keys should be different");    Path file2=dir.resolve(name2);    System.out.format("create %s\n",file2);    Files.createFile(file2);    takeExpectedKey(watcher1,key1);    checkExpectedEvent(key1.pollEvents(),StandardWatchEventKinds.ENTRY_CREATE,name2);    WatchKey key=watcher2.poll();    if (key != null)     throw new RuntimeException("key not expected");    Files.delete(file1);    takeExpectedKey(watcher2,key2);    checkExpectedEvent(key2.pollEvents(),StandardWatchEventKinds.ENTRY_DELETE,name1);    key=watcher1.poll();    if (key != null)     throw new RuntimeException("key not expected");    key1.reset();    key2.reset();    System.out.println("register for same event");    key2=dir.register(watcher2,new WatchEvent.Kind<?>[]{ENTRY_CREATE});    System.out.format("create %s\n",file1);    Files.createFile(file1);    takeExpectedKey(watcher2,key2);    checkExpectedEvent(key2.pollEvents(),StandardWatchEventKinds.ENTRY_CREATE,name1);    System.out.println("OKAY");  }  finally {    watcher2.close();    watcher1.close();  }}  }
class C{  public static byte[] toByteArray(File file) throws IOException {  return asByteSource(file).read();}  }
class C{  public static void closeOutputStream(OutputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing ByteArrayOutputStream." + e);    }  }}  }
class C{  public String transformMethodDescriptor(String owner,String name,String desc){  return DescriptorMapping.getInstance().getMethodDesc(owner,name,desc);}  }
class C{  public void executeBatchMultiple(boolean mustExecuteOnMaster,ExecutionResult executionResult,final List<String> queries,int resultSetScrollType) throws QueryException {  cmdPrologue();  String firstSql=null;  int currentIndex=0;  int totalQueries=queries.size();  QueryException exception=null;  do {    try {      firstSql=queries.get(currentIndex++);      if (totalQueries == 1) {        writer.send(firstSql,Packet.COM_QUERY);      } else {        currentIndex=ComExecute.sendMultiple(writer,firstSql,queries,currentIndex);      }      getResult(executionResult,resultSetScrollType,false,true);    } catch (    QueryException queryException) {      addQueryInfo(firstSql,queryException);      if (!getOptions().continueBatchOnError)       throw queryException;      if (exception == null)       exception=queryException;    }catch (    MaxAllowedPacketException e) {      if (e.isMustReconnect())       connect();      throw new QueryException("Could not send query: " + e.getMessage(),-1,INTERRUPTED_EXCEPTION.getSqlState(),e);    }catch (    IOException e) {      throw new QueryException("Could not send query: " + e.getMessage(),-1,CONNECTION_EXCEPTION.getSqlState(),e);    } finally {      writer.releaseBufferIfNotLogging();    }  } while (currentIndex < totalQueries);  if (exception != null)   throw exception;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean isView(String tableName){  if (m_viewName == null)   loadAccess(true);  return m_viewName.contains(tableName.toUpperCase());}  }
class C{  public InputDescription(Class<?> inputType,boolean keepDefault,boolean parameter){  this(inputType,keepDefault,parameter,parameter ? convertClass2ParameterName(inputType) : null);}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  CheckContext(Context ctx,Statement stat){  super(ctx,stat);}  }
class C{  public void bufferDecoding(int amount){  decoderState=DECODER_BUFFER;  decoderBufferAmount=amount;}  }
class C{  private static ConfigureDhcpWorkflowDocument buildStartState(ConfigureDhcpWorkflowDocument.TaskState.TaskStage startStage,ConfigureDhcpWorkflowDocument.TaskState.SubStage subStage,int controlFlag){  ConfigureDhcpWorkflowDocument startState=new ConfigureDhcpWorkflowDocument();  startState.taskState=new ConfigureDhcpWorkflowDocument.TaskState();  startState.taskState.stage=startStage;  startState.taskState.subStage=subStage;  startState.controlFlags=controlFlag;  startState.nsxManagerEndpoint="https://192.168.1.1";  startState.username="username";  startState.password="password";  startState.dhcpServerAddresses=new ArrayList<>();  startState.dhcpServerAddresses.add("1.2.3.4");  return startState;}  }
class C{  public void removeAttributeDelegate(Closure attrDelegate){  getProxyBuilder().attributeDelegates.remove(attrDelegate);}  }
class C{  public SessionInterface connectEmbeddedOrServer(boolean openNew){  ConnectionInfo ci=connectionInfo;  if (ci.isRemote()) {    connectServer(ci);    return this;  }  boolean autoServerMode=Boolean.parseBoolean(ci.getProperty("AUTO_SERVER","false"));  ConnectionInfo backup=null;  try {    if (autoServerMode) {      backup=ci.clone();      connectionInfo=ci.clone();    }    if (openNew) {      ci.setProperty("OPEN_NEW","true");    }    if (sessionFactory == null) {      sessionFactory=(SessionFactory)Class.forName("org.h2.engine.Engine").getMethod("getInstance").invoke(null);    }    return sessionFactory.createSession(ci);  } catch (  Exception re) {    DbException e=DbException.convert(re);    if (e.getErrorCode() == ErrorCode.DATABASE_ALREADY_OPEN_1) {      if (autoServerMode) {        String serverKey=((JdbcSQLException)e.getSQLException()).getSQL();        if (serverKey != null) {          backup.setServerKey(serverKey);          backup.removeProperty("OPEN_NEW",null);          connectServer(backup);          return this;        }      }    }    throw e;  }}  }
class C{  public int EOF_sym(){  return 0;}  }
class C{  public Action(String content,int priority){  this.content=content.trim();  this.priority=priority;}  }
class C{  private String extractUnit(Element unitNode){  Assert.assertTrue(unitNode.getTagName().equals("unit"));  return extractText(unitNode);}  }
class C{  protected void initialize(){  this.callback.get();}  }
class C{  public Shape createArrowDown(final double x,final double y,final double w,final double h){  path.reset();  path.moveTo(x,y);  path.lineTo(x + w / 2,y + h);  path.lineTo(x + w,y);  path.closePath();  return path;}  }
class C{  public Builder(Activity activity){}  }
class C{  public TColor adjustConstrast(float amount){  return hsv[2] < 0.5 ? darken(amount) : lighten(amount);}  }
class C{  private int findSlashName(byte[] d,String name){  int i;  for (i=0; i < d.length; i++) {    if (d[i] == '/') {      boolean found=true;      for (int j=0; j < name.length(); j++) {        if (d[i + j + 1] != name.charAt(j)) {          found=false;          break;        }      }      if (found) {        return i;      }    }  }  return -1;}  }
class C{  public boolean shareText(CharSequence text){  return shareText(text,"TEXT_TYPE");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  Attr streetAttr;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("street");  streetAttr=testEmployee.setAttributeNode(newAttribute);  value=streetAttr.getValue();  assertEquals("streetNo","No",value);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void beforeEmitSchema(JavaFileWriter writer) throws IOException {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.033 -0500",hash_original_method="2EFEEBFBDE6ACF8543350ABFFB008A8F",hash_generated_method="7B0BD1B0AF3F3A86E7737297B110FC69") public void updateDefaultZoomDensity(float density){  assert density > 0;  if (Math.abs(density - mDefaultScale) > MINIMUM_SCALE_INCREMENT) {    final float originalDefault=mDefaultScale;    setDefaultZoomScale(density);    float scaleChange=(originalDefault > 0.0) ? density / originalDefault : 1.0f;    setZoomScale(mActualScale * scaleChange,true);  }}  }
class C{  private void jbInit() throws Exception {  info.setEditable(false);  info.setBackground(AdempierePLAF.getFieldBackground_Inactive());  infoScrollPane.getViewport().add(info,null);  infoScrollPane.setPreferredSize(new Dimension(500,300));  this.getContentPane().add(infoScrollPane,BorderLayout.CENTER);  this.getContentPane().add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);  confirmPanel.getOKButton().setEnabled(false);}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  static boolean followPath(final GuidedEntity entity){  final List<Node> path=entity.getGuide().path.getNodeList();  if (path == null) {    return true;  }  int pos=entity.getPathPosition();  Node actual=path.get(pos);  if ((actual.getX() == entity.getX()) && (actual.getY() == entity.getY())) {    logger.debug("Completed waypoint(" + pos + ")("+ actual.getX()+ ","+ actual.getY()+ ") on Path");    pos++;    if (pos < path.size()) {      entity.setPathPosition(pos);      actual=path.get(pos);      logger.debug("Moving to waypoint(" + pos + ")("+ actual.getX()+ ","+ actual.getY()+ ") on Path from ("+ entity.getX()+ ","+ entity.getY()+ ")");      entity.faceto(actual.getX(),actual.getY());      return false;    } else {      if (entity.isPathLoop()) {        entity.setPathPosition(0);      } else {        entity.stop();        entity.clearPath();      }      entity.onFinishedPath();      return true;    }  } else {    logger.debug("Moving to waypoint(" + pos + ")("+ actual.getX()+ ","+ actual.getY()+ ") on Path from ("+ entity.getX()+ ","+ entity.getY()+ ")");    entity.faceto(actual.getX(),actual.getY());    return false;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void updateComponents(final Money principal,final Money interest,final Money feeCharges,final Money penaltyCharges){  final MonetaryCurrency currency=principal.getCurrency();  this.principalPortion=defaultToNullIfZero(getPrincipalPortion(currency).plus(principal).getAmount());  this.interestPortion=defaultToNullIfZero(getInterestPortion(currency).plus(interest).getAmount());  updateChargesComponents(feeCharges,penaltyCharges);}  }
class C{  void clearWholeContent(){  setDisplayString(CHARACTER_ZERO);  this.lastOperator=CHARACTER_ZERO;  this.lastNumber=0;  this.displayMode=DISPLAY_MODE.INPUT;  this.clearOnNextDigit=true;}  }
class C{  protected final BufferedImage nonRGBJPEGToRGBImage(final byte[] data,int w,int h,final int pX,final int pY){  boolean isProcessed=false;  BufferedImage image=null;  ByteArrayInputStream in=null;  ImageReader iir=null;  ImageInputStream iin=null;  try {    if (CSToRGB == null) {      initCMYKColorspace();    }    CSToRGB=new ColorConvertOp(cs,rgbCS,ColorSpaces.hints);    in=new ByteArrayInputStream(data);    final int cmykType=getJPEGTransform(data);    try {      final Iterator<ImageReader> iterator=ImageIO.getImageReadersByFormatName("JPEG");      while (iterator.hasNext()) {        final ImageReader o=iterator.next();        iir=o;        if (iir.canReadRaster()) {          break;        }      }    } catch (    final Exception e) {      LogWriter.writeLog("Unable to find jars on classpath " + e);      return null;    }    ImageIO.setUseCache(false);    iin=ImageIO.createImageInputStream((in));    iir.setInput(iin,true);    Raster ras=iir.readRaster(0,null);    if (cmykType == 0 && cs.getNumComponents() == 1) {      image=JPEGDecoder.grayJPEGToRGBImage(data,pX,pY);      if (image != null) {        isProcessed=true;      }    } else     if (cs.getNumComponents() == 4) {      isProcessed=true;      try {        if (cmykType == 2) {          hasYCCKimages=true;          image=ColorSpaceConvertor.iccConvertCMYKImageToRGB(((DataBufferByte)ras.getDataBuffer()).getData(),w,h);        } else {          ras=cleanupRaster(ras,pX,pY,4);          w=ras.getWidth();          h=ras.getHeight();          image=CMYKtoRGB.convert(ras,w,h);        }      } catch (      final Exception e) {        LogWriter.writeLog("Problem with JPEG conversion " + e);      }    } else     if (cmykType != 0) {      image=iir.read(0);      image=cleanupImage(image,pX,pY);      isProcessed=true;    }    if (!isProcessed) {      final WritableRaster rgbRaster;      if (cmykType == 4) {        ras=cleanupRaster(ras,pX,pY,4);        final int width=ras.getWidth();        final int height=ras.getHeight();        rgbRaster=rgbModel.createCompatibleWritableRaster(width,height);        CSToRGB.filter(ras,rgbRaster);        image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);        image.setData(rgbRaster);      } else {        boolean isYCC=false;        try {          final IIOMetadata metadata=iir.getImageMetadata(0);          final String metadataFormat=metadata.getNativeMetadataFormatName();          final IIOMetadataNode iioNode=(IIOMetadataNode)metadata.getAsTree(metadataFormat);          final NodeList children=iioNode.getElementsByTagName("app14Adobe");          if (children.getLength() > 0) {            isYCC=true;          }        } catch (        final Exception ee) {          LogWriter.writeLog("[PDF] Unable to read metadata on Jpeg " + ee);        }        LogWriter.writeLog("COLOR_ID_YCbCr image");        if (isYCC) {          image=DefaultImageHelper.read(data);        } else {          image=ColorSpaceConvertor.algorithmicConvertYCbCrToRGB(((DataBufferByte)ras.getDataBuffer()).getData(),w,h);        }        image=cleanupImage(image,pX,pY);        image=ColorSpaceConvertor.convertToRGB(image);      }    }  } catch (  final Exception ee) {    image=null;    LogWriter.writeLog("Couldn't read JPEG, not even raster: " + ee);  }catch (  final Error err) {    LogWriter.writeLog("JPeg error " + err);    if (iir != null) {      iir.dispose();    }    if (iin != null) {      try {        iin.flush();      } catch (      final IOException e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    }  }  try {    if (in != null) {      in.close();    }    if (iir != null) {      iir.dispose();    }    if (iin != null) {      iin.close();    }  } catch (  final Exception ee) {    LogWriter.writeLog("Problem closing  " + ee);  }  return image;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.CASE_CLAUSE;}  }
class C{  public Main(String title){  dim=new Dim();  debugGui=new SwingGui(dim,title);}  }
class C{  private void genParameterCopy(Offset srcOffset){  int gpr=0;  int fpr=0;  GPR T=T0;  int dstOffset=0;  if (!method.isStatic()) {    if (gpr < NUM_PARAMETER_GPRS) {      asm.emitPUSH_Reg(T);      T=T1;      gpr++;    } else {      asm.emitPUSH_RegDisp(SP,srcOffset);    }    dstOffset-=WORDSIZE;  }  int[] fprOffset=new int[NUM_PARAMETER_FPRS];  boolean[] is32bit=new boolean[NUM_PARAMETER_FPRS];  int spIsOffBy=0;  for (  TypeReference t : method.getParameterTypes()) {    if (t.isLongType()) {      if (spIsOffBy != 0) {        adjustStack(-spIsOffBy,true);        spIsOffBy=0;      }      if (gpr < NUM_PARAMETER_GPRS) {        if (VM.BuildFor32Addr) {          asm.emitPUSH_Reg(T);          T=T1;          gpr++;          if (gpr < NUM_PARAMETER_GPRS) {            asm.emitPUSH_Reg(T);            gpr++;          } else {            asm.emitPUSH_RegDisp(SP,srcOffset);          }        } else {          adjustStack(-WORDSIZE,true);          asm.emitPUSH_Reg(T);          T=T1;          gpr++;        }      } else {        if (VM.BuildFor32Addr) {          asm.emitPUSH_RegDisp(SP,srcOffset);          asm.emitPUSH_RegDisp(SP,srcOffset);        } else {          adjustStack(-WORDSIZE,true);          asm.emitPUSH_RegDisp(SP,srcOffset);        }      }      dstOffset-=2 * WORDSIZE;    } else     if (t.isFloatType()) {      if (fpr < NUM_PARAMETER_FPRS) {        spIsOffBy+=WORDSIZE;        fprOffset[fpr]=dstOffset;        is32bit[fpr]=true;        fpr++;      } else {        if (spIsOffBy != 0) {          adjustStack(-spIsOffBy,true);          spIsOffBy=0;        }        asm.emitPUSH_RegDisp(SP,srcOffset);      }      dstOffset-=WORDSIZE;    } else     if (t.isDoubleType()) {      if (fpr < NUM_PARAMETER_FPRS) {        spIsOffBy+=2 * WORDSIZE;        dstOffset-=WORDSIZE;        fprOffset[fpr]=dstOffset;        dstOffset-=WORDSIZE;        is32bit[fpr]=false;        fpr++;      } else {        if (spIsOffBy != 0) {          adjustStack(-spIsOffBy,true);          spIsOffBy=0;        }        if (VM.BuildFor32Addr) {          asm.emitPUSH_RegDisp(SP,srcOffset);          asm.emitPUSH_RegDisp(SP,srcOffset);        } else {          adjustStack(-WORDSIZE,true);          asm.emitPUSH_RegDisp(SP,srcOffset);        }        dstOffset-=2 * WORDSIZE;      }    } else {      if (spIsOffBy != 0) {        adjustStack(-spIsOffBy,true);        spIsOffBy=0;      }      if (gpr < NUM_PARAMETER_GPRS) {        asm.emitPUSH_Reg(T);        T=T1;        gpr++;      } else {        asm.emitPUSH_RegDisp(SP,srcOffset);      }      dstOffset-=WORDSIZE;    }  }  if (spIsOffBy != 0) {    adjustStack(-spIsOffBy,true);  }  for (int i=fpr - 1; 0 <= i; i--) {    if (is32bit[i]) {      if (SSE2_BASE) {        asm.emitMOVSS_RegDisp_Reg(SP,Offset.fromIntSignExtend(fprOffset[i] - dstOffset - WORDSIZE),XMM.lookup(i));      } else {        asm.emitFSTP_RegDisp_Reg(SP,Offset.fromIntSignExtend(fprOffset[i] - dstOffset - WORDSIZE),FP0);      }    } else {      if (SSE2_BASE) {        asm.emitMOVSD_RegDisp_Reg(SP,Offset.fromIntSignExtend(fprOffset[i] - dstOffset - WORDSIZE),XMM.lookup(i));      } else {        asm.emitFSTP_RegDisp_Reg_Quad(SP,Offset.fromIntSignExtend(fprOffset[i] - dstOffset - WORDSIZE),FP0);      }    }  }}  }
class C{  public static boolean isWeak(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("key == null");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("key too short");  }  I:   for (int i=0; i < SEMIWEAKS.length; i++) {    for (int j=0; j < DES_KEY_LEN; j++) {      if (SEMIWEAKS[i][j] != key[offset + j]) {        continue I;      }    }    return true;  }  return false;}  }
class C{  protected void moveSelectionToFirstPosition(){  if (selectionTable.getSelectionCount() == 0) {    return;  }  int index=0;  for (  final TableItem tableItem : selectionTable.getSelection()) {    final DLItem item=(DLItem)tableItem.getData();    selection.remove(item);    selection.add(index++,item);  }  redrawTables();  selectionTable.select(0,index - 1);  selectionTable.forceFocus();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void clear(){  clear(DEFAULT_CAPACITY);}  }
class C{  public void elementAdded(TimedElement e){}  }
class C{  private void updateBindingSet(IBindingSet bs){  final IV eastIV=east.getValueExpression().get(bs);  final IV westIV=west.getValueExpression().get(bs);  final GeoUtils.Box box=new GeoUtils.Box(pointFromIV(eastIV),pointFromIV(westIV));  bs.set(getAssociatedVariable(east),new Constant<IV>(createIV(box.northEast())));  bs.set(getAssociatedVariable(west),new Constant<IV>(createIV(box.southWest())));}  }
class C{  public NumberFormatException(){  super();}  }
class C{  private char lookupHiraganaDakuten(char c){  return lookup(c,h2d,'\u304b');}  }
class C{  public Token(int type,String text,int startCharPositionInInput){  this.type=type;  this.text=text;  this.startCharPositionInInput=startCharPositionInInput;}  }
class C{  public DNSKEYRecord(Name name,int dclass,long ttl,int flags,int proto,int alg,byte[] key){  super(name,Type.DNSKEY,dclass,ttl,flags,proto,alg,key);}  }
class C{  protected Boolean isMarkSeenPermanent(){  Boolean markSeenPermanent;  if (null == (markSeenPermanent=isMarkSeenPermanentBasic())) {    updateMarkSeenPermanent();    return isMarkSeenPermanent();  }  return markSeenPermanent;}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public void testBug4718() throws SQLException {  if (versionMeetsMinimum(4,1,0) && ((com.mysql.jdbc.Connection)this.conn).getUseServerPreparedStmts()) {    this.pstmt=this.conn.prepareStatement("SELECT 1 LIMIT ?");    assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);    this.pstmt=this.conn.prepareStatement("SELECT 1 LIMIT 1");    assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);    this.pstmt=this.conn.prepareStatement("SELECT 1 LIMIT 1, ?");    assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);    try {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4718");      this.stmt.executeUpdate("CREATE TABLE testBug4718 (field1 char(32))");      this.pstmt=this.conn.prepareStatement("ALTER TABLE testBug4718 ADD INDEX (field1)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=this.conn.prepareStatement("SELECT 1");      assertTrue(this.pstmt instanceof ServerPreparedStatement);      this.pstmt=this.conn.prepareStatement("UPDATE testBug4718 SET field1=1");      assertTrue(this.pstmt instanceof ServerPreparedStatement);      this.pstmt=this.conn.prepareStatement("UPDATE testBug4718 SET field1=1 LIMIT 1");      assertTrue(this.pstmt instanceof ServerPreparedStatement);      this.pstmt=this.conn.prepareStatement("UPDATE testBug4718 SET field1=1 LIMIT ?");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=this.conn.prepareStatement("UPDATE testBug4718 SET field1='Will we ignore LIMIT ?,?'");      assertTrue(this.pstmt instanceof ServerPreparedStatement);    }  finally {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4718");    }  }}  }
class C{  public boolean isMultiEpisode(){  return multiEpisode;}  }
class C{  @Inject public ProjectWizard(@Assisted ImportProject dataObject,@Assisted ProjectWizardMode mode,@Assisted String projectPath,CoreLocalizationConstant localizationConstants,ProjectServiceClient projectServiceClient,DtoUnmarshallerFactory dtoUnmarshallerFactory,DtoFactory dtoFactory,DialogFactory dialogFactory,EventBus eventBus,AppContext appContext,ProjectExplorerPresenter projectExplorer){  super(dataObject);  this.mode=mode;  this.localizationConstants=localizationConstants;  this.projectServiceClient=projectServiceClient;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;  this.dtoFactory=dtoFactory;  this.dialogFactory=dialogFactory;  this.eventBus=eventBus;  this.appContext=appContext;  this.projectExplorer=projectExplorer;  context.put(WIZARD_MODE_KEY,mode.toString());  context.put(PROJECT_NAME_KEY,dataObject.getProject().getName());  if (mode == UPDATE || mode == CREATE_MODULE) {    context.put(PROJECT_PATH_KEY,projectPath);  }}  }
class C{  public void minlat(double parsed){  minlat=parsed;}  }
class C{  void impliesAction(NodeRepresentation nodeRep){  Decomposition decomp=nodeRep.decomposition;  hasChanged=true;  if (decomp.definedOp != null) {    assumpDefinitions.add(decomp.definedOp);  }  NodeTextRep newNodeText=null;  if ((decomp.definedOp != null) && (subexpressionButton.getSelection())) {    newNodeText=decomp.definedOpRep;  } else   if (nodeRep.isSubexpressionName) {    newNodeText=new NodeTextRep(nodeRep.nodeText,nodeRep.mapping);  }  NodeRepresentation nrep=decompositionChildToNodeRep(nodeRep,0,this.assumeReps,nodeRep.parentNode);  nrep.isCreated=true;  nrep.isPrimed=nrep.isPrimed || decomp.primed;  this.assumeReps.add(nrep);  nrep=decompositionChildToNodeRep(nodeRep,1,nodeRep.parentVector,nodeRep.parentNode);  nrep.isCreated=true;  this.goalRep=nrep;  raiseWindow();}  }
class C{  public boolean hasFailed(){  return this.failed;}  }
class C{  private LinkedList<Diff> diff_bisectSplit(String text1,String text2,int x,int y,long deadline){  String text1a=text1.substring(0,x);  String text2a=text2.substring(0,y);  String text1b=text1.substring(x);  String text2b=text2.substring(y);  LinkedList<Diff> diffs=diff_main(text1a,text2a,false,deadline);  LinkedList<Diff> diffsb=diff_main(text1b,text2b,false,deadline);  diffs.addAll(diffsb);  return diffs;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:20.019 -0500",hash_original_method="30B2B5AAE6BF00B7B5DE2415CD1C93C0",hash_generated_method="31F89698891865DDF37976A5038C7055") public CharSequence subSequence(int start,int end){  return substring(start,end);}  }
class C{  @Nullable public synchronized GridCacheMvccCandidate mappings(GridCacheVersion ver,Collection<ClusterNode> dhtNodeIds,Collection<ClusterNode> nearNodeIds) throws GridCacheEntryRemovedException {  checkObsolete();  GridCacheMvcc mvcc=mvccExtras();  GridCacheMvccCandidate cand=mvcc == null ? null : mvcc.candidate(ver);  if (cand != null)   cand.mappedNodeIds(dhtNodeIds,nearNodeIds);  return cand;}  }
class C{  static Text valueOf(TextBuilder tb,int start,int end){  int length=end - start;  if (length <= BLOCK_SIZE) {    Text text=Text.newPrimitive(length);    tb.getChars(start,end,text._data,0);    return text;  } else {    int half=((length + BLOCK_SIZE) >> 1) & BLOCK_MASK;    return Text.newComposite(Text.valueOf(tb,start,start + half),Text.valueOf(tb,start + half,end));  }}  }
class C{  private void injectBWInOut(String fileShareId,Map<String,Object> keyMap,Item volItem,List<Stat> statsList){  Iterator<Stat> statsItr=statsList.iterator();  while (statsItr.hasNext()) {    Stat stat=statsItr.next();    if (null != fileShareId && fetchNativeId(stat.getNativeGuid()).equals(fileShareId)) {      stat.setBandwidthOut(volItem.getBytesRead().longValue());      stat.setBandwidthIn(volItem.getBytesWritten().longValue());      break;    }  }}  }
class C{  public synchronized long totalBytes(){  long total=0;  for (  File file : fileDetails.values()) {    total+=file.length();  }  return total;}  }
class C{  public static byte[] copyRange(byte[] orig,int from,int to){  int length=to - from;  byte[] result=new byte[length];  int howMuchToCopy=orig.length - from < length ? orig.length - from : length;  System.arraycopy(orig,from,result,0,howMuchToCopy);  return result;}  }
class C{  public static String propertiesEncode(Properties pp){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    pp.store(bos,"adempiere");  } catch (  IOException e) {    log.log(Level.SEVERE,"store",e);  }  String result=new String(bos.toByteArray());  try {    result=URLEncoder.encode(result,MobileEnv.ENCODING);  } catch (  UnsupportedEncodingException e) {    log.log(Level.SEVERE,"encode" + MobileEnv.ENCODING,e);    String enc=System.getProperty("file.encoding");    try {      result=URLEncoder.encode(result,enc);      log.info("encode: " + enc);    } catch (    Exception ex) {      log.log(Level.SEVERE,"encode",ex);    }  }  return result;}  }
class C{  private synchronized boolean updateDerivedGauge(Object scanCounter,CounterMonitorObservedObject o){  boolean is_derived_gauge_valid;  if (differenceMode) {    if (o.getPreviousScanCounter() != null) {      setDerivedGaugeWithDifference((Number)scanCounter,null,o);      if (((Number)o.getDerivedGauge()).longValue() < 0L) {        if (modulus.longValue() > 0L) {          setDerivedGaugeWithDifference((Number)scanCounter,modulus,o);        }        o.setThreshold(initThreshold);        o.setEventAlreadyNotified(false);      }      is_derived_gauge_valid=true;    } else {      is_derived_gauge_valid=false;    }    o.setPreviousScanCounter((Number)scanCounter);  } else {    o.setDerivedGauge((Number)scanCounter);    is_derived_gauge_valid=true;  }  return is_derived_gauge_valid;}  }
class C{  public ResourceList<Deployment> listAll() throws IOException {  ResourceList<Deployment> deploymentResourceList=new ResourceList<>();  ResourceList<Deployment> resourceList=getDeploymentResourceList(getBasePath());  deploymentResourceList.setItems(resourceList.getItems());  while (resourceList.getNextPageLink() != null && !resourceList.getNextPageLink().isEmpty()) {    resourceList=getDeploymentResourceList(resourceList.getNextPageLink());    deploymentResourceList.getItems().addAll(resourceList.getItems());  }  return deploymentResourceList;}  }
class C{  private void adjustPoints(){  if (decodeArr != null) {    float xMin=decodeArr[0];    float xMax=decodeArr[1];    float yMin=decodeArr[2];    float yMax=decodeArr[3];    float xw=xMax - xMin;    float yw=yMax - yMin;    ArrayList<Point2D> tempPoints=new ArrayList<Point2D>();    for (    Point2D p : pp) {      float xx=(float)p.getX();      float yy=(float)p.getY();      xx=(xw * xx) + xMin;      yy=(yw * yy) + yMin;      tempPoints.add(new Point2D.Float(xx,yy));    }    pp.clear();    for (    Point2D t : tempPoints) {      pp.add(t);    }  }  Point2D[] pArr=new Point2D[pp.size()];  for (int i=0; i < pArr.length; i++) {    pArr[i]=pp.get(i);  }  int totalPatches=pp.size() / 12;  int offset=0;  for (int i=0; i < totalPatches; i++) {    Point2D[] pointArr=new Point2D[12];    Color[] colors={pc.get(i * 4),pc.get(i * 4 + 1),pc.get(i * 4 + 2),pc.get(i * 4 + 3)};    System.arraycopy(pArr,offset,pointArr,0,12);    Shape67 sh=new Shape67(pointArr,colors);    shapes.add(sh);    offset+=12;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.075 -0500",hash_original_method="559A3475151AFD9F125F7EFF6D7FC3A7",hash_generated_method="05BCDD7C20C6D87D800888A86047830C") public void absorbGlow(int x,int y,int oldX,int oldY,int rangeX,int rangeY){  if (rangeY > 0 || mHostView.getOverScrollMode() == View.OVER_SCROLL_ALWAYS) {    if (y < 0 && oldY >= 0) {      mEdgeGlowTop.onAbsorb((int)mHostView.mScroller.getCurrVelocity());      if (!mEdgeGlowBottom.isFinished()) {        mEdgeGlowBottom.onRelease();      }    } else     if (y > rangeY && oldY <= rangeY) {      mEdgeGlowBottom.onAbsorb((int)mHostView.mScroller.getCurrVelocity());      if (!mEdgeGlowTop.isFinished()) {        mEdgeGlowTop.onRelease();      }    }  }  if (rangeX > 0) {    if (x < 0 && oldX >= 0) {      mEdgeGlowLeft.onAbsorb((int)mHostView.mScroller.getCurrVelocity());      if (!mEdgeGlowRight.isFinished()) {        mEdgeGlowRight.onRelease();      }    } else     if (x > rangeX && oldX <= rangeX) {      mEdgeGlowRight.onAbsorb((int)mHostView.mScroller.getCurrVelocity());      if (!mEdgeGlowLeft.isFinished()) {        mEdgeGlowLeft.onRelease();      }    }  }}  }
class C{  public static void main(String[] args){  runDataGenerator(new BIRCHCluster(),args);}  }
class C{  public synchronized int indexOf(Object object,int location){  if (object != null) {    for (int i=location; i < elementCount; i++) {      if (object.equals(elementData[i])) {        return i;      }    }  } else {    for (int i=location; i < elementCount; i++) {      if (elementData[i] == null) {        return i;      }    }  }  return -1;}  }
class C{  public static Object paintCachedTeXFormula(String f,int style,int type,int size,int inset,Color fgcolor,Graphics2DInterface g) throws ParseException {  return paintCachedTeXFormula(new CachedTeXFormula(f,style,type,size,inset,fgcolor),g);}  }
class C{  public void testPosPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-2,-76,88,44,1,2,17,35,16,9,2,5,6,21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static Graphics2D createGraphics(BufferedImage bi,RenderingHints hints){  Graphics2D g2d=bi.createGraphics();  if (hints != null)   g2d.addRenderingHints(hints);  g2d.setRenderingHint(RenderingHintsKeyExt.KEY_BUFFERED_IMAGE,new WeakReference(bi));  g2d.clip(new Rectangle(0,0,bi.getWidth(),bi.getHeight()));  return g2d;}  }
class C{  public void show(){  gui.setVisible(true);}  }
class C{  public String toString(){  return "Operation: " + operation;}  }
class C{  public void acceptDataPoint(double[] dataPoint){  if (m_outputFrame != null && (m_xCount % m_refreshFrequency == 0)) {    double[] dp=new double[dataPoint.length + 1];    dp[dp.length - 1]=m_xCount;    System.arraycopy(dataPoint,0,dp,0,dataPoint.length);    for (    double element : dataPoint) {      if (element < m_min) {        m_oldMin=m_min;        m_min=element;        m_yScaleUpdate=true;      }      if (element > m_max) {        m_oldMax=m_max;        m_max=element;        m_yScaleUpdate=true;      }    }    if (m_yScaleUpdate) {      m_scalePanel.repaint();      m_yScaleUpdate=false;    }synchronized (m_dataList) {      m_dataList.add(m_dataList.size(),dp);      m_dataList.notifyAll();    }  }}  }
class C{  public static List<Territory> findUnitTerr(final GameData data,final PlayerID player,final Match<Unit> unitCondition){  final CompositeMatch<Unit> limitShips=new CompositeMatchAnd<>(unitCondition);  final List<Territory> shipTerr=new ArrayList<>();  final Collection<Territory> tNeighbors=data.getMap().getTerritories();  for (  final Territory t2 : tNeighbors) {    if (t2.getUnits().someMatch(limitShips)) {      shipTerr.add(t2);    }  }  return shipTerr;}  }
class C{  public WebLogicExistingLocalConfigurationCapability(){  this.propertySupportMap.put(WebLogicPropertySet.ADMIN_USER,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.ADMIN_PWD,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.SERVER,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.BEA_HOME,Boolean.TRUE);}  }
class C{  public <T>T put(final Object key,T value){  if (mCache != null) {    mCache.put(key,new WeakReference<Object>(value));  }  return value;}  }
