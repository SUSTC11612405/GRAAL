class C{  Attribute(String id){  name=id;}  }
class C{  public EncoderException(String pMessage){  super(pMessage);}  }
class C{  public String name(){  return theType.name();}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  PlotOrientation orientation=plot.getOrientation();  StackedXYAreaRendererState areaState=(StackedXYAreaRendererState)state;  TableXYDataset tdataset=(TableXYDataset)dataset;  int itemCount=tdataset.getItemCount();  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  boolean nullPoint=false;  if (Double.isNaN(y1)) {    y1=0.0;    nullPoint=true;  }  double ph1=getPreviousHeight(tdataset,series,item);  double transX1=domainAxis.valueToJava2D(x1,dataArea,plot.getDomainAxisEdge());  double transY1=rangeAxis.valueToJava2D(y1 + ph1,dataArea,plot.getRangeAxisEdge());  Paint seriesPaint=getItemPaint(series,item);  Paint seriesFillPaint=seriesPaint;  if (getUseFillPaint()) {    seriesFillPaint=getItemFillPaint(series,item);  }  Stroke seriesStroke=getItemStroke(series,item);  if (pass == 0) {    if (item == 0) {      areaState.setSeriesArea(new Polygon());      areaState.setLastSeriesPoints(areaState.getCurrentSeriesPoints());      areaState.setCurrentSeriesPoints(new Stack());      double transY2=rangeAxis.valueToJava2D(ph1,dataArea,plot.getRangeAxisEdge());      if (orientation == PlotOrientation.VERTICAL) {        areaState.getSeriesArea().addPoint((int)transX1,(int)transY2);      } else       if (orientation == PlotOrientation.HORIZONTAL) {        areaState.getSeriesArea().addPoint((int)transY2,(int)transX1);      }    }    if (orientation == PlotOrientation.VERTICAL) {      Point point=new Point((int)transX1,(int)transY1);      areaState.getSeriesArea().addPoint((int)point.getX(),(int)point.getY());      areaState.getCurrentSeriesPoints().push(point);    } else     if (orientation == PlotOrientation.HORIZONTAL) {      areaState.getSeriesArea().addPoint((int)transY1,(int)transX1);    }    if (getPlotLines()) {      if (item > 0) {        double x0=dataset.getXValue(series,item - 1);        double y0=dataset.getYValue(series,item - 1);        double ph0=getPreviousHeight(tdataset,series,item - 1);        double transX0=domainAxis.valueToJava2D(x0,dataArea,plot.getDomainAxisEdge());        double transY0=rangeAxis.valueToJava2D(y0 + ph0,dataArea,plot.getRangeAxisEdge());        if (orientation == PlotOrientation.VERTICAL) {          areaState.getLine().setLine(transX0,transY0,transX1,transY1);        } else         if (orientation == PlotOrientation.HORIZONTAL) {          areaState.getLine().setLine(transY0,transX0,transY1,transX1);        }        g2.setPaint(seriesPaint);        g2.setStroke(seriesStroke);        g2.draw(areaState.getLine());      }    }    if (getPlotArea() && item > 0 && item == (itemCount - 1)) {      double transY2=rangeAxis.valueToJava2D(ph1,dataArea,plot.getRangeAxisEdge());      if (orientation == PlotOrientation.VERTICAL) {        areaState.getSeriesArea().addPoint((int)transX1,(int)transY2);      } else       if (orientation == PlotOrientation.HORIZONTAL) {        areaState.getSeriesArea().addPoint((int)transY2,(int)transX1);      }      if (series != 0) {        Stack points=areaState.getLastSeriesPoints();        while (!points.empty()) {          Point point=(Point)points.pop();          areaState.getSeriesArea().addPoint((int)point.getX(),(int)point.getY());        }      }      g2.setPaint(seriesFillPaint);      g2.setStroke(seriesStroke);      g2.fill(areaState.getSeriesArea());      if (isOutline()) {        g2.setStroke(lookupSeriesOutlineStroke(series));        g2.setPaint(lookupSeriesOutlinePaint(series));        g2.draw(areaState.getSeriesArea());      }    }    int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);    int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);    updateCrosshairValues(crosshairState,x1,ph1 + y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);  } else   if (pass == 1) {    Shape shape=null;    if (getPlotShapes()) {      shape=getItemShape(series,item);      if (plot.getOrientation() == PlotOrientation.VERTICAL) {        shape=ShapeUtilities.createTranslatedShape(shape,transX1,transY1);      } else       if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {        shape=ShapeUtilities.createTranslatedShape(shape,transY1,transX1);      }      if (!nullPoint) {        if (getShapePaint() != null) {          g2.setPaint(getShapePaint());        } else {          g2.setPaint(seriesPaint);        }        if (getShapeStroke() != null) {          g2.setStroke(getShapeStroke());        } else {          g2.setStroke(seriesStroke);        }        g2.draw(shape);      }    } else {      if (plot.getOrientation() == PlotOrientation.VERTICAL) {        shape=new Rectangle2D.Double(transX1 - 3,transY1 - 3,6.0,6.0);      } else       if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {        shape=new Rectangle2D.Double(transY1 - 3,transX1 - 3,6.0,6.0);      }    }    if (state.getInfo() != null) {      EntityCollection entities=state.getEntityCollection();      if (entities != null && shape != null && !nullPoint) {        Area dataAreaHotspot=new Area(shape);        dataAreaHotspot.intersect(new Area(dataArea));        if (!dataAreaHotspot.isEmpty()) {          String tip=null;          XYToolTipGenerator generator=getToolTipGenerator(series,item);          if (generator != null) {            tip=generator.generateToolTip(dataset,series,item);          }          String url=null;          if (getURLGenerator() != null) {            url=getURLGenerator().generateURL(dataset,series,item);          }          XYItemEntity entity=new XYItemEntity(dataAreaHotspot,dataset,series,item,tip,url);          entities.add(entity);        }      }    }  }}  }
class C{  public TIntIntHashMap(TIntHashingStrategy strategy){  super(strategy);}  }
class C{  void swdLoaded(Session s) throws InProgressException {  if (isSwdLoading() && !isUnloaded()) {    try {      ((PlayerSession)s).requestSwfInfo(m_index,m_isolateId);    } catch (    NoResponseException nre) {    }    if (!m_swdLoading)     ; else     if (getSourceExpectedCount() > -1 && m_numRefreshes > 10)     setPopulated(); else     throw new InProgressException();  }}  }
class C{  public static boolean overlaps(SequenceNameLocus current,SequenceNameLocus other){  if (other.getStart() < 0 || other.getEnd() < 0 || current.getStart() < 0 || current.getEnd() < 0) {    throw new IllegalArgumentException();  }  if (!current.getSequenceName().equals(other.getSequenceName())) {    return false;  }  if (other.getStart() < current.getEnd() && other.getEnd() > current.getStart()) {    return true;  }  return false;}  }
class C{  private boolean isURLString(String string){  final Matcher urlMatcher=URL_PATTERN.matcher(string);  return urlMatcher.find();}  }
class C{  public void testOptional02(){  new Helper(){{      given=select(varNode(x),where(stmtPatternWithVarsOptional("x1","y1"),stmtPatternWithVar("x1")));      expected=select(varNode(x),where(stmtPatternWithVarsOptional("x1","y1"),stmtPatternWithVar("x1")));    }  }.testWhileIgnoringExplainHints();}  }
class C{  public static Timestamp convertTimestamp(Value value,Calendar calendar){  if (value == ValueNull.INSTANCE) {    return null;  }  ValueTimestamp ts=(ValueTimestamp)value.convertTo(Value.TIMESTAMP);  Calendar cal=(Calendar)calendar.clone();  cal.clear();  cal.setLenient(true);  long dateValue=ts.getDateValue();  long nanos=ts.getTimeNanos();  long millis=nanos / 1000000;  nanos-=millis * 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  setCalendarFields(cal,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),(int)h,(int)m,(int)s,(int)millis);  long ms=cal.getTimeInMillis();  Timestamp x=new Timestamp(ms);  x.setNanos((int)(nanos + millis * 1000000));  return x;}  }
class C{  public static String extractUsernameFromSecurityHeader(SecurityHeaderType secHdr){  Validate.notNull(secHdr);  UsernameTokenType usernameToken=secHdr.getUsernameToken();  if (usernameToken == null) {    return null;  }  AttributedString attrUsername=usernameToken.getUsername();  if (attrUsername == null) {    return null;  }  return attrUsername.getValue();}  }
class C{  @Override public String toString(){  return getURL();}  }
class C{  public String tabToken(){  return boundedToken('\t');}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_statistics);  mShownTypes=new ArrayList<>();  Toolbar myChildToolbar=(Toolbar)findViewById(R.id.toolbar);  setSupportActionBar(myChildToolbar);  ActionBar ab=getSupportActionBar();  if (ab != null)   ab.setDisplayHomeAsUpEnabled(true);  User user=mUserManager.getCurrentUser();  mCategoryId=getIntent().getLongExtra(ChallengeActivity.EXTRA_CATEGORY_ID,CategoryDataSource.CATEGORY_ID_ALL);  RecyclerView recyclerView=(RecyclerView)findViewById(R.id.statisticsRecycler);  recyclerView.setHasFixedSize(true);  int deviceOrientation=getResources().getConfiguration().orientation;  mIsLandscape=(deviceOrientation == Configuration.ORIENTATION_LANDSCAPE);  setShownTypes();  GridLayoutManager layoutManager=new GridLayoutManager(this,mIsLandscape ? 3 : 2,GridLayoutManager.VERTICAL,false);  layoutManager.setSpanSizeLookup(new StatisticsSpanSizeLookup(mShownTypes));  recyclerView.setLayoutManager(layoutManager);  mAdapter=new StatisticsAdapter(mUserLogicFactory,mChallengeDataSource,(BrainPhaserApplication)getApplication(),user,mCategoryId,mShownTypes);  recyclerView.setAdapter(mAdapter);}  }
class C{  public void gotoPhase(int phase) throws CompilationFailedException {  if (!this.phaseComplete) {    completePhase();  }  this.phase=phase;  this.phaseComplete=false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("PriceListProduct[");  sb.append(m_Product_ID).append("-").append(m_name).append("-").append(m_price).append("]");  return sb.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  final String cmd=getString(stack);  final String remoteName=getString(stack);  int portNum=getInt(stack);  final SFIRTuner tuney=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tuney == null)   return Boolean.FALSE;  Object rv;synchronized (tuney) {    rv=Boolean.valueOf(tuney.recordNewCommand(remoteName,cmd));    tuney.saveChanges();  }  return rv;}  }
class C{  @Override public List<BatchConsumpQueue> execute(String[] params){  try {    RegisterFileInfo registerFileInfo=new RegisterFileInfo();    List<BatchConsumpQueue> bcqs;    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String pid=commandLine.getOptionValue("parent-process-id");    LOGGER.debug("parentProcessId is " + pid);    String sId=commandLine.getOptionValue("server-id");    LOGGER.debug("serverId is " + sId);    String path=commandLine.getOptionValue("path");    LOGGER.debug("path is " + path);    String fSize=commandLine.getOptionValue("file-size");    LOGGER.debug("file size is " + fSize);    String fHash=commandLine.getOptionValue("file-hash");    LOGGER.debug("file-hash " + fHash);    String creationTs=commandLine.getOptionValue("creation-timestamp");    LOGGER.debug("creation Ts " + creationTs);    String batchId=commandLine.getOptionValue("batch-id");    LOGGER.debug("batchId " + batchId);    if ("0".equalsIgnoreCase(batchId) || "NULL".equalsIgnoreCase(batchId)) {      registerFileInfo.setBatchId(null);    } else {      registerFileInfo.setBatchId(new Long(batchId));    }    String batchMarking=commandLine.getOptionValue("batch-marking");    LOGGER.debug("batch-marking " + batchMarking);    registerFileInfo.setParentProcessId(Integer.parseInt(pid));    registerFileInfo.setPath(path);    registerFileInfo.setServerId(Integer.parseInt(sId));    registerFileInfo.setFileSize(Long.parseLong(fSize));    registerFileInfo.setFileHash(fHash);    registerFileInfo.setCreationTs(Timestamp.valueOf(creationTs));    registerFileInfo.setBatchMarking(batchMarking);    bcqs=batchEnqueuerDAO.batchEnqueue(registerFileInfo);    LOGGER.debug("registerFileInfo " + registerFileInfo.getPath() + " "+ registerFileInfo.getBatchId());    LOGGER.debug("registerFileInfo " + registerFileInfo.getParentProcessId() + " "+ registerFileInfo.getCreationTs());    return bcqs;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public InlineQueryResultCachedVoiceBuilder voiceFileId(String voiceFileId){  this.voice_file_id=voiceFileId;  return this;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public Vocabulary build(InputStream is) throws IOException, SAXException, ParserConfigurationException {  Digester digester=new Digester(saxf.newSAXParser());  digester.setNamespaceAware(true);  digester.setXIncludeAware(false);  digester.setRuleNamespaceURI(VOCABULARY_NAMESPACE);  Vocabulary tv=new Vocabulary();  digester.push(tv);  digester.addCallMethod("*/thesaurus","setTitle",1);  digester.addRule("*/thesaurus",new CallParamNoNSRule(0,"title"));  digester.addCallMethod("*/thesaurus","setIssuedDateAsString",1);  digester.addRule("*/thesaurus",new CallParamNoNSRule(0,"issued"));  digester.addCallMethod("*/thesaurus","setDescription",1);  digester.addRule("*/thesaurus",new CallParamNoNSRule(0,"description"));  digester.addCallMethod("*/thesaurus","setLink",1);  digester.addRule("*/thesaurus",new CallParamNoNSRule(0,"relation"));  digester.addCallMethod("*/thesaurus","setUriString",1);  digester.addRule("*/thesaurus",new CallParamNoNSRule(0,"URI"));  digester.addObjectCreate("*/concept",VocabularyConcept.class);  digester.addCallMethod("*/concept","setLink",1);  digester.addRule("*/concept",new CallParamNoNSRule(0,"relation"));  digester.addCallMethod("*/concept","setDescription",1);  digester.addRule("*/concept",new CallParamNoNSRule(0,"description"));  digester.addCallMethod("*/concept","setUri",1);  digester.addRule("*/concept",new CallParamNoNSRule(0,"URI"));  digester.addCallMethod("*/concept","setIdentifier",1);  digester.addRule("*/concept",new CallParamNoNSRule(0,"identifier"));  digester.addObjectCreate("*/preferred/term",VocabularyTerm.class);  digester.addCallMethod("*/preferred/term","setLang",1);  digester.addRule("*/preferred/term",new CallParamNoNSRule(0,"lang"));  digester.addCallMethod("*/preferred/term","setTitle",1);  digester.addRule("*/preferred/term",new CallParamNoNSRule(0,"title"));  digester.addSetNext("*/preferred/term","addPreferredTerm");  digester.addObjectCreate("*/alternative/term",VocabularyTerm.class);  digester.addCallMethod("*/alternative/term","setLang",1);  digester.addRule("*/alternative/term",new CallParamNoNSRule(0,"lang"));  digester.addCallMethod("*/alternative/term","setTitle",1);  digester.addRule("*/alternative/term",new CallParamNoNSRule(0,"title"));  digester.addSetNext("*/alternative/term","addAlternativeTerm");  digester.addSetNext("*/concept","addConcept");  digester.parse(is);  return tv;}  }
class C{  public static SimpleScheduleBuilder repeatSecondlyForTotalCount(int count,int seconds){  if (count < 1)   throw new IllegalArgumentException("Total count of firings must be at least one! Given count: " + count);  return simpleSchedule().withIntervalInSeconds(seconds).withRepeatCount(count - 1);}  }
class C{  public void addEvent(VEvent event){  addComponent(event);}  }
class C{  protected NumericLiteral(double n){  this(n,XMLSchema.DOUBLE);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRequisition[");  sb.append(get_ID()).append("-").append(getDocumentNo()).append(",Status=").append(getDocStatus()).append(",Action=").append(getDocAction()).append("]");  return sb.toString();}  }
class C{  private void initAllExtension(double progressFactor){  double factorPerc=progressFactor / getExtensionCount();  for (int i=0; i < getExtensionCount(); i++) {    try {      getExtension(i).init();      getExtension(i).databaseOpen(Model.getSingleton().getDb());      if (view != null) {        view.addSplashScreenLoadingCompletion(factorPerc);      }    } catch (    Throwable e) {      logger.error(e.getMessage(),e);    }  }}  }
class C{  public void infoCRLIsNotValid(){  addInfo("The CRL is not valid!");}  }
class C{  public void addTableModelListener(TableModelListener l){  listenerList.add(TableModelListener.class,l);}  }
class C{  public boolean isServiceStarted() throws RcsGenericException {  if (sAccurateLog) {    Log.d(LOG_TAG,"isServiceStarted: Request()");  }  Bundle result=queryRcsStackByIntent(new Intent(Intents.Service.ACTION_GET_SERVICE_STARTING_STATE));  boolean started=result.getBoolean(Intents.Service.EXTRA_GET_SERVICE_STARTING_STATE,false);  if (sAccurateLog) {    Log.d(LOG_TAG,"isServiceStarted: Response() -> " + started + " (in "+ result.getLong(TIME_SPENT,-1)+ "ms)");  }  return started;}  }
class C{  private boolean failMessage(Mail mail,Exception ex,boolean permanent){  StringWriter sout=new StringWriter();  PrintWriter out=new PrintWriter(sout,true);  if (permanent) {    out.print("Permanent");  } else {    out.print("Temporary");  }  String exceptionLog=exceptionToLogString(ex);  StringBuilder logBuffer=new StringBuilder(64).append(" exception delivering mail (").append(mail.getName());  if (exceptionLog != null) {    logBuffer.append(". ");    logBuffer.append(exceptionLog);  }  logBuffer.append(": ");  out.print(logBuffer.toString());  if (isDebug)   ex.printStackTrace(out);  log(sout.toString());  if (!permanent) {    if (!mail.getState().equals(Mail.ERROR)) {      mail.setState(Mail.ERROR);      mail.setErrorMessage("0");      mail.setLastUpdated(new Date());    }    int retries=0;    try {      retries=Integer.parseInt(mail.getErrorMessage());    } catch (    NumberFormatException e) {    }    if (retries < maxRetries) {      logBuffer=new StringBuilder(128).append("Storing message ").append(mail.getName()).append(" into outgoing after ").append(retries).append(" retries");      log(logBuffer.toString());      ++retries;      mail.setErrorMessage(retries + "");      mail.setLastUpdated(new Date());      return false;    } else {      logBuffer=new StringBuilder(128).append("Bouncing message ").append(mail.getName()).append(" after ").append(retries).append(" retries");      log(logBuffer.toString());    }  }  if (mail.getSender() == null) {    log("Null Sender: no bounce will be generated for " + mail.getName());    return true;  }  if (bounceProcessor != null) {    String cause;    if (ex instanceof MessagingException) {      cause=getErrorMsg((MessagingException)ex);    } else {      cause=ex.getMessage();    }    mail.setAttribute("delivery-error",cause);    mail.setState(bounceProcessor);    MailetContext mc=getMailetContext();    try {      mc.sendMail(mail);    } catch (    MessagingException e) {      log("Exception re-inserting failed mail: ",e);    }  } else {    bounce(mail,ex);  }  return true;}  }
class C{  private List<NodePair> allNodePairs(List<Node> nodes){  List<NodePair> nodePairs=new ArrayList<>();  for (int j=0; j < nodes.size() - 1; j++) {    for (int k=j + 1; k < nodes.size(); k++) {      nodePairs.add(new NodePair(nodes.get(j),nodes.get(k)));    }  }  return nodePairs;}  }
class C{  public static void runDemo(SymbolicRegression problem){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  Exception e) {  }  SymbolicRegressionGUI gui=new SymbolicRegressionGUI(problem);  int generation=0;  int maxGenerations=1000;  Algorithm algorithm=null;  Properties properties=new Properties();  properties.setProperty("populationSize","500");  try {    algorithm=AlgorithmFactory.getInstance().getAlgorithm("NSGAII",properties,problem);    while ((generation < maxGenerations) && !gui.isCanceled()) {      algorithm.step();      generation++;      gui.update(algorithm.getResult().get(0),generation,maxGenerations);    }  }  finally {    if (algorithm != null) {      algorithm.terminate();    }  }}  }
class C{  public byte[] toByteArray(){  return asByteArray();}  }
class C{  private ColorSetting(Properties defaultProps,Properties props,String key,String value){  super(defaultProps,props,key,value);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.REGION__VERTICES:    return ((InternalEList<?>)getVertices()).basicRemove(otherEnd,msgs);case SGraphPackage.REGION__COMPOSITE:  return basicSetComposite(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.792 -0500",hash_original_method="984560EB63068E6413989919BB90D187",hash_generated_method="00E0F0DA4A4EC476E43189431359F691") public final boolean matchAction(String action){  return hasAction(action);}  }
class C{  protected boolean isLatinChar(char c){  if (c < 255 && Character.isLetterOrDigit(c)) {    return true;  }  Character.UnicodeBlock block=Character.UnicodeBlock.of(c);  if (block == Character.UnicodeBlock.BASIC_LATIN || block == Character.UnicodeBlock.LATIN_1_SUPPLEMENT || block == Character.UnicodeBlock.LATIN_EXTENDED_ADDITIONAL || block == Character.UnicodeBlock.LATIN_EXTENDED_A || block == Character.UnicodeBlock.LATIN_EXTENDED_B || block == Character.UnicodeBlock.ARABIC || block == Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_A || block == Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_B) {    return true;  }  return false;}  }
class C{  public static DataFile makeDataFile(URL definitionUrl,String dataFileName) throws DataFileException {  ModelDataFileReader reader=ModelDataFileReader.getModelDataFileReader(definitionUrl);  if (reader == null) {    throw new DataFileException("Could not load definition file located at \"" + definitionUrl + "\"");  }  ModelDataFile modelDataFile=reader.getModelDataFile(dataFileName);  if (modelDataFile == null) {    throw new DataFileException("Could not find file definition for data file named \"" + dataFileName + "\"");  }  DataFile dataFile=new DataFile(modelDataFile);  return dataFile;}  }
class C{  protected void buildSuccessful(Notification notification,String successMessage,String prefixConsole){  notification.setMessage(successMessage);  notification.setStatus(FINISHED);  console.print(prefixConsole + "::" + successMessage);}  }
class C{  public void addConfigParam(IFloodlightModule mod,String key,String value){  Map<String,String> moduleParams=configParams.get(mod.getClass());  if (moduleParams == null) {    moduleParams=new HashMap<String,String>();    configParams.put(mod.getClass(),moduleParams);  }  moduleParams.put(key,value);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void randomize(List<Neuron> layer){  for (  Neuron neuron : layer) {    neuron.clear();    neuron.randomizeFanIn();    neuron.randomizeBias(-.5,.5);  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @Override public String toString(){  return this.imageSource != null ? this.imageSource.toString() : null;}  }
class C{  public void endObjectName(O object,String name){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static Object[] packageParameterFromVarArg(MethodReference targetMethod,Address argAddress){  TypeReference[] argTypes=targetMethod.getParameterTypes();  int argCount=argTypes.length;  Object[] argObjectArray=new Object[argCount];  Address vaListCopy=SysCall.sysCall.sysVaCopy(argAddress);  JNIEnvironment env=RVMThread.getCurrentThread().getJNIEnv();  for (int i=0; i < argCount; i++) {    if (argTypes[i].isReferenceType()) {      argObjectArray[i]=env.getJNIRef(SysCall.sysCall.sysVaArgJobject(vaListCopy));    } else     if (argTypes[i].isIntType()) {      argObjectArray[i]=SysCall.sysCall.sysVaArgJint(vaListCopy);    } else     if (argTypes[i].isLongType()) {      argObjectArray[i]=SysCall.sysCall.sysVaArgJlong(vaListCopy);    } else     if (argTypes[i].isBooleanType()) {      argObjectArray[i]=SysCall.sysCall.sysVaArgJboolean(vaListCopy);    } else     if (argTypes[i].isByteType()) {      argObjectArray[i]=SysCall.sysCall.sysVaArgJbyte(vaListCopy);    } else     if (argTypes[i].isCharType()) {      argObjectArray[i]=SysCall.sysCall.sysVaArgJchar(vaListCopy);    } else     if (argTypes[i].isShortType()) {      argObjectArray[i]=SysCall.sysCall.sysVaArgJshort(vaListCopy);    } else     if (argTypes[i].isFloatType()) {      argObjectArray[i]=SysCall.sysCall.sysVaArgJfloat(vaListCopy);    } else {      if (VM.VerifyAssertions)       VM._assert(argTypes[i].isDoubleType());      argObjectArray[i]=SysCall.sysCall.sysVaArgJdouble(vaListCopy);    }  }  SysCall.sysCall.sysVaEnd(vaListCopy);  return argObjectArray;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.763 -0500",hash_original_method="D7D85FA93E7D9B21BC4DF3FC01DC78AB",hash_generated_method="E3B6A5C43B6350A40B1B7DA5C9BB591E") public void onConfigurationChanged(){  if (mSearchable != null && isShowing()) {    updateSearchAppIcon();    updateSearchBadge();    if (isLandscapeMode(getContext())) {      mSearchAutoComplete.ensureImeVisible(true);    }  }}  }
class C{  public Collection<String> generateRequestUrlsForTenant(String tenant,MessageSource messageSource,Locale locale){  List<String> requestUrls=new ArrayList<String>();  log.debug("generateRequestsForTenant, tenant " + tenant);  Validate.notNull(this.validationResult);  if (this.validationResult.getResponseCode() == HttpServletResponse.SC_OK) {    try {      Validate.notNull(this.idmAccessor);      Validate.isTrue(this.logoutRequest != null || this.logoutResponse != null);      Validate.notNull(this.getIssuerValue());      Session session=this.getSession();      Validate.notNull(session);      try {        session.getLock().lock();        Collection<SessionParticipant> participants=session.getSessionParticipants();        LogoutRequestData logoutRequestData=session.getLogoutRequestData();        String originalRelyingParty=logoutRequestData != null ? logoutRequestData.getInitiator() : this.getIssuerValue();        String targetRelyingParty=null;        SessionParticipant targetParticipant=null;        for (        SessionParticipant participant : participants) {          if (!originalRelyingParty.equals(participant.getRelyingPartyUrl())) {            targetParticipant=participant;            targetRelyingParty=participant.getRelyingPartyUrl();            Validate.notNull(targetParticipant);            Validate.notNull(targetRelyingParty);            String sloEndpoint=this.idmAccessor.getSloForRelyingParty(targetRelyingParty,OasisNames.HTTP_REDIRECT);            if (sloEndpoint != null) {              this.idmAccessor.setTenant(tenant);              SamlService service=createSamlServiceForTenant(tenant,targetRelyingParty);              PrincipalId principal=session.getPrincipalId();              Validate.notNull(principal);              LogoutRequest request=service.createSamlLogoutRequest(null,sloEndpoint,OasisNames.UNSPECIFIED,principal.getName() + "@" + principal.getDomain(),targetParticipant.getSessionId());              String redirectUrl=generateRequestUrlForTenant(request,targetRelyingParty,service,tenant);              requestUrls.add(redirectUrl);              if (logoutRequestData == null) {                logoutRequestData=new LogoutRequestData(originalRelyingParty,this.getID());              }              logoutRequestData.setCurrent(targetRelyingParty);              logoutRequestData.setCurrentRequestId(request.getID());              session.setLogoutRequestData(logoutRequestData);              this.getSessionManager().update(session);            }          }        }      }  finally {        session.getLock().unlock();      }    } catch (    Exception e) {      log.debug("Caught exception while generating request " + e.toString() + ", will return 400");      this.validationResult=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest",null);      return null;    }  }  return requestUrls;}  }
class C{  final void delete(int index){  if (!isNominal() && !isString())   throw new IllegalArgumentException("Can only remove value of" + "nominal or string attribute!"); else {    m_Values=(FastVector)m_Values.copy();    m_Values.removeElementAt(index);    Hashtable hash=new Hashtable(m_Hashtable.size());    Enumeration Enum=m_Hashtable.keys();    while (Enum.hasMoreElements()) {      Object string=Enum.nextElement();      Integer valIndexObject=(Integer)m_Hashtable.get(string);      int valIndex=valIndexObject.intValue();      if (valIndex > index) {        hash.put(string,new Integer(valIndex - 1));      } else       if (valIndex < index) {        hash.put(string,valIndexObject);      }    }    m_Hashtable=hash;  }}  }
class C{  public void init() throws ServletException {}  }
class C{  protected Long wrapKey(long k){  return new Long(k);}  }
class C{  public static UserList createUserList(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return userListConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  private void zApplyInitialTime(){  if (allowEmptyTimes == true && initialTime == null) {    parent.setTime(null);  }  if (initialTime != null) {    parent.setTime(initialTime);  }}  }
class C{  public void addLMFragment(Tree fragment){  if (lmFragments == null)   return;  int fragmentDepth=fragment.getDepth();  if (MAX_DEPTH != 0 && fragmentDepth > MAX_DEPTH) {    LOG.warn("Skipping fragment {} (depth {} > {})",fragment,fragmentDepth,MAX_DEPTH);    return;  }  if (MIN_LEX_DEPTH > 1 && fragment.isLexicalized() && fragmentDepth < MIN_LEX_DEPTH) {    LOG.warn("Skipping fragment {} (lex depth {} < {})",fragment,fragmentDepth,MIN_LEX_DEPTH);    return;  }  if (lmFragments.get(fragment.getRule()) == null) {    lmFragments.put(fragment.getRule(),new ArrayList<>());  }  lmFragments.get(fragment.getRule()).add(fragment);  numFragments++;}  }
class C{  protected void verify(final OpenNode on) throws IOException {  log.debug("  VERIFY: " + tempFile);  final String computedSha1=IOUtils.sha1(new FileInputStream(tempFile));  if (computedSha1 != null) {    log.debug("    Computed sha1(" + tempFile + "): "+ computedSha1);    ByteArrayInputStream shaStream=new ByteArrayInputStream(computedSha1.getBytes("ASCII"));    Node shaNode=parent.getChild(on.getLabel() + AbstractNodeRepositoryManager.SHA1);    if (shaNode == null) {      log.debug("    Remote sha1 for (" + on + ") does not exist ");      on.addContent(AbstractNodeRepositoryManager.SHA1,shaStream,context);      shaStream.reset();    } else     if (shaNode.hasBinaries()) {      final String retrievedSha1=IOUtils.readSha1(shaNode.getInputStream());      if (retrievedSha1.length() != 40 || !retrievedSha1.matches("[a-z0-9]+")) {        throw new IOException("Remote SHA1 for " + on + " was corrupt: "+ retrievedSha1);      }      log.debug("    Retrieved " + shaNode + ": "+ retrievedSha1);      if (computedSha1.equals(retrievedSha1)) {        log.debug("    Yay, sha1's of " + tempFile + " match");      } else {        throw new IOException("Remote SHA1 for " + on + " differs from computed SHA1: "+ retrievedSha1+ " != "+ computedSha1);      }    } else {      log.warning("    Remote sha1 for (" + on + ") exists, but lacks content!");    }    OpenNode sl=((OpenNode)parent).addNode(on.getLabel() + AbstractNodeRepositoryManager.SHA1 + AbstractNodeRepositoryManager.LOCAL);    fileContentStore.putContent(sl,shaStream,context);  } else {    log.debug("  Could not calculate sha1 of : " + tempFile);  }}  }
class C{  public static final long crc64Long(String in){  if (in == null || in.length() == 0) {    return 0;  }  return crc64Long(getBytes(in));}  }
class C{  @Override public DiscreteDensityFunction copy(){  return new DiscreteDensityFunction(points);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static JavaPairRDD<MatrixIndexes,MatrixBlock> sortDataByValMemSort(JavaPairRDD<MatrixIndexes,MatrixBlock> val,JavaPairRDD<MatrixIndexes,MatrixBlock> data,boolean asc,long rlen,long clen,int brlen,int bclen,SparkExecutionContext sec,ReorgOperator r_op) throws DMLRuntimeException {  MatrixBlock inMatBlock=SparkExecutionContext.toMatrixBlock(val,(int)rlen,1,brlen,bclen,-1);  ReorgOperator lrop=new ReorgOperator(SortIndex.getSortIndexFnObject(1,!asc,true));  MatrixBlock sortedIx=(MatrixBlock)inMatBlock.reorgOperations(lrop,new MatrixBlock(),-1,-1,-1);  MatrixBlock sortedIxSrc=new MatrixBlock(sortedIx.getNumRows(),1,false);  for (int i=0; i < sortedIx.getNumRows(); i++)   sortedIxSrc.quickSetValue((int)sortedIx.quickGetValue(i,0) - 1,0,i + 1);  PartitionedBlock<MatrixBlock> pmb=new PartitionedBlock<MatrixBlock>(sortedIxSrc,brlen,bclen);  Broadcast<PartitionedBlock<MatrixBlock>> _pmb=sec.getSparkContext().broadcast(pmb);  JavaPairRDD<MatrixIndexes,RowMatrixBlock> ret=data.mapPartitionsToPair(new ShuffleMatrixBlockRowsInMemFunction(rlen,brlen,_pmb));  return RDDAggregateUtils.mergeRowsByKey(ret);}  }
class C{  public static float[] ensureCapacity(float[] array,int minCapacity){  int oldCapacity=array.length;  float[] newArray;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    newArray=new float[newCapacity];    System.arraycopy(array,0,newArray,0,oldCapacity);  } else {    newArray=array;  }  return newArray;}  }
class C{  public void initEdges(){  edges=new DenseMatrix(3,4);  Double2D curEdge;  for (int i=0; i < 3; i++) {    curEdge=new Double2D(vertices.vals[0][i + 1],vertices.vals[1][i + 1]).subtract(new Double2D(vertices.vals[0][i],vertices.vals[1][i])).normalize();    edges.vals[0][i]=curEdge.x;    edges.vals[1][i]=curEdge.y;    edges.vals[2][i]=1;  }  curEdge=new Double2D(vertices.vals[0][0],vertices.vals[1][0]).subtract(new Double2D(vertices.vals[0][3],vertices.vals[1][3])).normalize();  edges.vals[0][3]=curEdge.x;  edges.vals[1][3]=curEdge.y;  edges.vals[2][3]=1;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/update-vcenter-cluster") @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep updateVcenterCluster(@PathParam("id") URI id,VcenterClusterParam vcenterClusterParam){  List<URI> addHosts=vcenterClusterParam.getAddHosts();  List<URI> removeHosts=vcenterClusterParam.getRemoveHosts();  return createOrUpdateVcenterCluster(false,id,vcenterClusterParam.getId(),addHosts,removeHosts);}  }
class C{  public DrawerBuilder withStickyFooterDivider(boolean stickyFooterDivider){  this.mStickyFooterDivider=stickyFooterDivider;  return this;}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,10,10,8,8,new ECBlocks(5,new ECB(1,3))),new Version(2,12,12,10,10,new ECBlocks(7,new ECB(1,5))),new Version(3,14,14,12,12,new ECBlocks(10,new ECB(1,8))),new Version(4,16,16,14,14,new ECBlocks(12,new ECB(1,12))),new Version(5,18,18,16,16,new ECBlocks(14,new ECB(1,18))),new Version(6,20,20,18,18,new ECBlocks(18,new ECB(1,22))),new Version(7,22,22,20,20,new ECBlocks(20,new ECB(1,30))),new Version(8,24,24,22,22,new ECBlocks(24,new ECB(1,36))),new Version(9,26,26,24,24,new ECBlocks(28,new ECB(1,44))),new Version(10,32,32,14,14,new ECBlocks(36,new ECB(1,62))),new Version(11,36,36,16,16,new ECBlocks(42,new ECB(1,86))),new Version(12,40,40,18,18,new ECBlocks(48,new ECB(1,114))),new Version(13,44,44,20,20,new ECBlocks(56,new ECB(1,144))),new Version(14,48,48,22,22,new ECBlocks(68,new ECB(1,174))),new Version(15,52,52,24,24,new ECBlocks(42,new ECB(2,102))),new Version(16,64,64,14,14,new ECBlocks(56,new ECB(2,140))),new Version(17,72,72,16,16,new ECBlocks(36,new ECB(4,92))),new Version(18,80,80,18,18,new ECBlocks(48,new ECB(4,114))),new Version(19,88,88,20,20,new ECBlocks(56,new ECB(4,144))),new Version(20,96,96,22,22,new ECBlocks(68,new ECB(4,174))),new Version(21,104,104,24,24,new ECBlocks(56,new ECB(6,136))),new Version(22,120,120,18,18,new ECBlocks(68,new ECB(6,175))),new Version(23,132,132,20,20,new ECBlocks(62,new ECB(8,163))),new Version(24,144,144,22,22,new ECBlocks(62,new ECB(8,156),new ECB(2,155))),new Version(25,8,18,6,16,new ECBlocks(7,new ECB(1,5))),new Version(26,8,32,6,14,new ECBlocks(11,new ECB(1,10))),new Version(27,12,26,10,24,new ECBlocks(14,new ECB(1,16))),new Version(28,12,36,10,16,new ECBlocks(18,new ECB(1,22))),new Version(29,16,36,14,16,new ECBlocks(24,new ECB(1,32))),new Version(30,16,48,14,22,new ECBlocks(28,new ECB(1,49)))};}  }
class C{  public Connection openConnection(String uri,Properties info) throws SQLException {  if (info == null) {    return DriverManager.getConnection(uri);  } else {    return DriverManager.getConnection(uri,info);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:25.882 -0500",hash_original_method="422EAA7182FF45B88C4EE6C211DE4EBB",hash_generated_method="2FD83EFED6025F858EC91E81C4EFE5FC") protected AbstractSet(){}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"ManageBackupBucketReplyMessage process invoking reply processor with processorId: {}",this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"ManageBackupBucketReplyMessage processor not found");    }    return;  }  processor.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  public void initializeDefinition(String tableName,String columnName,String sortOrder,String sortNulls){  m_table=tableName;  m_column=columnName;  m_sortOrder=sortOrder;  m_sortNulls=sortNulls;  s_logger.log(Level.FINEST,toString());}  }
class C{  public static void verifyViewLocale(){  FacesContext fc=FacesContext.getCurrentInstance();  HttpServletRequest request=(HttpServletRequest)fc.getExternalContext().getRequest();  HttpSession session=request.getSession();  String localeString=null;  if (session != null) {    localeString=(String)session.getAttribute("loggedInUserLocale");  }  Locale locale=fc.getViewRoot().getLocale();  if (localeString != null && !locale.toString().equals(localeString)) {    Iterator<Locale> it=fc.getApplication().getSupportedLocales();    while (it.hasNext()) {      locale=it.next();      if (locale.toString().equals(localeString)) {        fc.getViewRoot().setLocale(locale);        return;      }    }    if (!fc.getViewRoot().getLocale().equals(fc.getApplication().getDefaultLocale())) {      fc.getViewRoot().setLocale(fc.getApplication().getDefaultLocale());    }  }}  }
class C{  public static URL resolveSpringUrl(String springCfgPath) throws IgniteCheckedException {  A.notNull(springCfgPath,"springCfgPath");  URL url;  try {    url=new URL(springCfgPath);  } catch (  MalformedURLException e) {    url=U.resolveIgniteUrl(springCfgPath);    if (url == null)     url=resolveInClasspath(springCfgPath);    if (url == null)     throw new IgniteCheckedException("Spring XML configuration path is invalid: " + springCfgPath + ". Note that this path should be either absolute or a relative local file system path, "+ "relative to META-INF in classpath or valid URL to IGNITE_HOME.",e);  }  return url;}  }
class C{  public void restoreKey(String key){  if (!key.equalsIgnoreCase("test_mode_opened")) {    String originalKey=key.substring(keyTestMode.length());    Object value=get(key);    put(originalKey,value);    clear(key);  }}  }
class C{  public char[][] toArray(){  char[][] result=new char[max + 1][];  for (  Map.Entry<Character,String> entry : map.entrySet()) {    result[entry.getKey()]=entry.getValue().toCharArray();  }  return result;}  }
class C{  public void insertQuad(FloatBuffer texCordBuffer,FloatBuffer vertexBuffer,int index){  assert (index >= 0 && index < capacity_) : "insert quad with texture_: Invalid index";  totalQuads_++;  int remaining=(totalQuads_ - 1) - index;  if (remaining > 0) {    arraycopyTexture(textureCoordinates,index,textureCoordinates,index + 1,remaining);    arraycopyVertex(vertexCoordinates,index,vertexCoordinates,index + 1,remaining);    if (withColorArray_) {      arraycopyColor(colors,index,colors,index + 1,remaining);    }  }  putTexCoords(texCordBuffer,index);  putVertex(vertexBuffer,index);}  }
class C{  public int startLineNo(){  return breaks.lineAt(startCharInFile);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:24.910 -0500",hash_original_method="498F687E010E97B616DAA29FD28A4DFC",hash_generated_method="714CC2DDD987CBCA3EFA76DDF3CD6A9D") @Override public void writeToParcel(Parcel out,int flags){  out.writeFloat(x);  out.writeFloat(y);}  }
class C{  @Inline public static void objectBulkCopy(Object[] src,Offset srcOffset,Object[] dst,Offset dstOffset,int bytes){  if (VM.VerifyAssertions)   VM._assert(OBJECT_BULK_COPY_SUPPORTED);  if (!Selected.Mutator.get().objectReferenceBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {    Memory.alignedWordCopy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private long acquireWrite(boolean interruptible,long deadline){  WNode node=null, p;  for (int spins=-1; ; ) {    long m, s, ns;    if ((m=(s=state) & ABITS) == 0L) {      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;    } else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0; else     if (spins > 0) {      if (nextSecondarySeed() >= 0)       --spins;    } else     if ((p=wtail) == null) {      WNode hd=new WNode(WMODE,null);      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;    } else     if (node == null)     node=new WNode(WMODE,p); else     if (node.prev != p)     node.prev=p; else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {      p.next=node;      break;    }  }  boolean wasInterrupted=false;  for (int spins=-1; ; ) {    WNode h, np, pp;    int ps;    if ((h=whead) == p) {      if (spins < 0)       spins=HEAD_SPINS; else       if (spins < MAX_HEAD_SPINS)       spins<<=1;      for (int k=spins; ; ) {        long s, ns;        if (((s=state) & ABITS) == 0L) {          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {            whead=node;            node.prev=null;            if (wasInterrupted)             Thread.currentThread().interrupt();            return ns;          }        } else         if (nextSecondarySeed() >= 0 && --k <= 0)         break;      }    } else     if (h != null) {      WNode c;      Thread w;      while ((c=h.cowait) != null) {        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);      }    }    if (whead == h) {      if ((np=node.prev) != p) {        if (np != null)         (p=np).next=node;      } else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING); else       if (ps == CANCELLED) {        if ((pp=p.prev) != null) {          node.prev=pp;          pp.next=node;        }      } else {        long time;        if (deadline == 0L)         time=0L; else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);        Thread wt=Thread.currentThread();        U.putObject(wt,PARKBLOCKER,this);        node.thread=wt;        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);        node.thread=null;        U.putObject(wt,PARKBLOCKER,null);        if (Thread.interrupted()) {          if (interruptible)           return cancelWaiter(node,node,true);          wasInterrupted=true;        }      }    }  }}  }
class C{  final private void cycle(IntGrid2D d,IntGrid2D buffer){  buffer.setTo(d);  int x;  int y;  int w=d.getWidth();  int h=d.getHeight();  for (y=0; y < h; y++) {    for (x=0; x < w; x++)     computeNextState(d,buffer,x,y);  }  for (y=0; y < h; y+=2) {    for (x=0; x < w; x+=2)     turn22(d,x,y);  }  for (y=1; y < h; y+=2) {    for (x=1; x < w; x+=2)     turn22(d,x,y);  }}  }
class C{  private void updateSystemVcenterCascadeTenancy(VcenterParam param,Vcenter vcenter){  if (vcenter == null) {    if (param.getCascadeTenancy() == null) {      param.setCascadeTenancy(Boolean.FALSE);    }  }  if (vcenter != null && param.getCascadeTenancy() == null) {    param.setCascadeTenancy(vcenter.getCascadeTenancy());  }}  }
class C{  static ProtocolVersion valueOf(String name){  if (name == null) {    throw new IllegalArgumentException("Protocol cannot be null");  }  if (FIPS && (name.equals(SSL30.name) || name.equals(SSL20Hello.name))) {    throw new IllegalArgumentException("Only TLS 1.0 or later allowed in FIPS mode");  }  if (name.equals(SSL30.name)) {    return SSL30;  } else   if (name.equals(TLS10.name)) {    return TLS10;  } else   if (name.equals(TLS11.name)) {    return TLS11;  } else   if (name.equals(TLS12.name)) {    return TLS12;  } else   if (name.equals(SSL20Hello.name)) {    return SSL20Hello;  } else {    throw new IllegalArgumentException(name);  }}  }
class C{  public boolean isInMigration(){  return inMigration;}  }
class C{  public static Element drawFrame(SVGPlot svgp,Projection2D proj,SpatialComparable box){  SVGPath path=new SVGPath();  ArrayList<double[]> edges=getVisibleEdges(proj,box);  final int dim=box.getDimensionality();  double[] min=new double[dim];  for (int i=0; i < dim; i++) {    min[i]=box.getMin(i);  }  double[] rv_min=proj.fastProjectDataToRenderSpace(min);  recDrawEdges(path,rv_min[0],rv_min[1],edges,BitsUtil.zero(edges.size()));  return path.makeElement(svgp);}  }
class C{  @Override public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("storesUpperCaseQuotedIdentifiers");  String m=getMode();  return m.equals("MySQL");}  }
class C{  public synchronized void addRoute(SIPRequest sipRequest){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("setContact: dialogState: " + this + "state = "+ this.getState());  }  if (this.dialogState == CONFIRMED_STATE && SIPRequest.isTargetRefresh(sipRequest.getMethod())) {    this.doTargetRefresh(sipRequest);  }  if (this.dialogState == CONFIRMED_STATE || this.dialogState == TERMINATED_STATE) {    return;  }  if (sipRequest.getToTag() != null)   return;  RecordRouteList rrlist=sipRequest.getRecordRouteHeaders();  if (rrlist != null) {    this.addRoute(rrlist);  } else {    this.routeList=new RouteList();  }  ContactList contactList=sipRequest.getContactHeaders();  if (contactList != null) {    this.setRemoteTarget((ContactHeader)contactList.getFirst());  }}  }
class C{  protected static float convertValuesToHueRotate(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_VALUES_ATTRIBUTE);  if (s.length() == 0)   return 0;  try {    return (float)Math.toRadians(SVGUtilities.convertSVGNumber(s));  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VALUES_ATTRIBUTE,s});  }}  }
class C{  public static ReplicaSets empty(){  return new ReplicaSets(null);}  }
class C{  private void computeVolumes(KNNQuery<O> knnq,int dim,DBIDs ids,WritableDoubleDataStore vols){  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Volume",ids.size(),LOG) : null;  double scaleconst=MathUtil.SQRTPI * Math.pow(GammaDistribution.gamma(1 + dim * .5),-1. / dim);  boolean warned=false;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    double dk=knnq.getKNNForDBID(iter,k).getKNNDistance();    double vol=dk > 0 ? MathUtil.powi(dk * scaleconst,dim) : 0.;    if (vol == Double.POSITIVE_INFINITY && !warned) {      LOG.warning("Variance of Volumes has hit double precision limits, results are not reliable.");      warned=true;    }    vols.putDouble(iter,vol);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);}  }
class C{  private void log(String message){  try {    System.out.println("Log - " + message);synchronized (RServer.this) {      logEntries.add(0,new Date(System.currentTimeMillis()).toString() + ": " + message);      if (logEntries.size() > logHistorySize) {        logEntries.remove(logHistorySize);      }    }    Calendar today=Calendar.getInstance();    String errorFile=logDir + "log_" + today.get(Calendar.YEAR)+ "-"+ (today.get(Calendar.MONTH) + 1)+ "-"+ today.get(Calendar.DAY_OF_MONTH);    FileWriter fileWriter=new FileWriter(errorFile,true);    BufferedWriter writer=new BufferedWriter(fileWriter);    writer.write(new Date(System.currentTimeMillis()).toString() + ": " + message+ "\n");    writer.close();  } catch (  Exception e) {    System.err.println("Failure during logging: " + e.getMessage());    e.printStackTrace();  }}  }
class C{  public static String randomAlphanumeric(int count){  return random(count,true,true);}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"Echo.shutdown")).start();}  }
class C{  protected void initToolbarHelper(){  if (this.mToolbar == null || this.mAppBarLayout == null)   return;  this.setSupportActionBar(this.mToolbar);  this.mActionBarHelper=this.createActionBarHelper();  this.mActionBarHelper.init();  if (Build.VERSION.SDK_INT >= 21) {    this.mAppBarLayout.setElevation(6.6f);  }}  }
class C{  public Plane(float width,float height,int segmentsW,int segmentsH,Axis upAxis,boolean createTextureCoordinates,boolean createVertexColorBuffer){  this(width,height,segmentsW,segmentsH,upAxis,createTextureCoordinates,createVertexColorBuffer,1);}  }
class C{  public BlinkConn(Sender sender,Receiver receiver,SendDelivery sendDelivery,ReceiveDelivery receiveDelivery,BlinkDelivery blinkDelivery,Resource resource,BlinkParser parser,float progressPrecision){  mSender=sender;  mReceiver=receiver;  mResource=resource;  mSendDelivery=sendDelivery;  mReceiveDelivery=receiveDelivery;  mBlinkDelivery=blinkDelivery;  mParser=parser;  Init(progressPrecision);}  }
class C{  public void clearNodeMap(){  nodeLoc.clear();}  }
class C{  public void close() throws SQLException {  cursorPos=0;  absolutePos=0;  numRows=0;  numDeleted=0;  initProperties();  rvh.clear();}  }
class C{  public void onDescriptorReadRequest(String address,int transId,int offset,boolean isLong,int srvcType,int srvcInstId,ParcelUuid srvcId,int charInstId,ParcelUuid charId,ParcelUuid descrId){  UUID srvcUuid=srvcId.getUuid();  UUID charUuid=charId.getUuid();  UUID descrUuid=descrId.getUuid();  if (DBG)   Log.d(TAG,"onCharacteristicReadRequest() - " + "service=" + srvcUuid + ", characteristic="+ charUuid+ "descriptor="+ descrUuid);  BluetoothDevice device=mAdapter.getRemoteDevice(address);  BluetoothGattService service=getService(srvcUuid,srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid);  if (characteristic == null)   return;  BluetoothGattDescriptor descriptor=characteristic.getDescriptor(descrUuid);  if (descriptor == null)   return;  try {    mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  public HtmlPolicyBuilder allowWithoutAttributes(String... elementNames){  invalidateCompiledState();  for (  String elementName : elementNames) {    elementName=HtmlLexer.canonicalName(elementName);    skipIfEmpty.remove(elementName);  }  return this;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public boolean hasVariants(){  return mVariants != null && !mVariants.isEmpty();}  }
class C{  public Builder addIm(Im im){  this.ims.add(im);  return this;}  }
class C{  public String pickColor(final Shell shell,final RGB initialColor){  Check.notNull(shell,"shell");  final ColorDialog dialog=new ColorDialog(shell);  if (initialColor != null) {    dialog.setRGB(initialColor);  }  final RGB rgb=dialog.open();  if (rgb != null) {    return String.format("#%1$02x%2$02x%3$02x",rgb.red,rgb.green,rgb.blue);  }  return null;}  }
class C{  public void paintSliderThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public TraxSource(final List<?> source,final XStream xstream){  super(new InputSource());  setSourceAsList(source);  setXStream(xstream);}  }
class C{  private static List<LogCommitFileInfo> expandCommitFileList(List<LogCommitFileInfo> logCommitFiles,Map<String,List<LogCommitFileInfo>> mapFiles){  Map<String,LogCommitFileInfo> map=new HashMap<String,LogCommitFileInfo>();  for (  LogCommitFileInfo commitFile : logCommitFiles)   map.put(commitFile.getTempId().toString(),commitFile);  while (hasRenamed(map.values())) {    List<LogCommitFileInfo> tempCommitFiles=new ArrayList<LogCommitFileInfo>(map.values());    for (    LogCommitFileInfo commitFile : tempCommitFiles) {      Status status=commitFile.getStatus();      if (status == Status.RENAMED) {        List<LogCommitFileInfo> newList=mapFiles.get(commitFile.getOldFileName());        if (newList == null) {          LOGGER.warn("ERROR in RENAME: No commits for old filename: " + commitFile.getOldFileName());        } else {          for (          LogCommitFileInfo newCommitFile : newList) {            if (!map.containsKey(newCommitFile.getTempId().toString()))             map.put(newCommitFile.getTempId().toString(),newCommitFile);          }        }        commitFile.setStatus(Status.RENAMED_TREATED);      }    }  }  return new ArrayList<LogCommitFileInfo>(map.values());}  }
class C{  public boolean isFailOnBuildDiffer(){  Object oo=get_Value(COLUMNNAME_IsFailOnBuildDiffer);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the number of students: ");  String[] students=new String[input.nextInt()];  int[] scores=new int[students.length];  System.out.println("Enter the name a score for each student:");  for (int i=0; i < students.length; i++) {    System.out.print("Student " + (i + 1) + ": ");    students[i]=input.next();    System.out.print("Score: ");    scores[i]=input.nextInt();  }  sortDecreasing(students,scores);  for (  String e : students) {    System.out.println(e);  }}  }
class C{  public void addOperatorToSelection(Operator selectedOperator){  List<Operator> newList=new ArrayList<>(getSelectedOperators().size() + 1);  newList.addAll(getSelectedOperators());  newList.add(selectedOperator);  this.selectedOperators=Collections.unmodifiableList(newList);}  }
class C{  public boolean isGenerator(){  return generator;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.162 -0500",hash_original_method="26AE2AF434B9C69ABDC8C488B6A433CD",hash_generated_method="A44B6950D86BF4113CFF8D24B474C899") private void nativeProvideVisitedHistory(String[] history){  addTaint(history[0].getTaint());}  }
class C{  protected RhythmSpecLayer inflateLayerInternal(LayerConfig config,int lineNumber){  RhythmSpecLayerFactory factory=mFactories.get(config.getLayerType());  if (factory == null) {    Object[] knownLayers=mFactories.keySet().toArray();    throw new RhythmInflationException("Unknown layer type \"" + config.getLayerType() + "\".\nAvailable types are: "+ Arrays.toString(knownLayers)).setLineNumber(lineNumber);  }  try {    return factory.getForArguments(config.getArgumentsBundle());  } catch (  RhythmInflationException e) {    throw e.setLineNumber(lineNumber);  }catch (  Exception e) {    throw new RhythmInflationException("Error inflating layer: " + e.getMessage(),e).setLineNumber(lineNumber);  }}  }
class C{  final public void print(char ch){  try {    _out.print(ch);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:26.588 -0500",hash_original_method="A473F9C9E320CD6CEDCE3CE271E08C07",hash_generated_method="5AD096FC9C61E6884323F08CF48B6FE0") public String next(){  return next(ANY_PATTERN);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void mousePressed(MouseEvent evt){  if (evt.isPopupTrigger()) {    createPopup(evt.getPoint());  }}  }
class C{  public int candyB(int[] ratings){  if (ratings.length < 2)   return ratings.length;  int res=1;  int dec=0;  int gap=0;  int curCandy=1;  for (int i=1; i < ratings.length; i++) {    if (ratings[i] < ratings[i - 1]) {      if (dec == 0)       gap=curCandy;      dec++;      curCandy=1;      res+=dec + curCandy;      if (gap > 1) {        gap--;        res--;      }    } else {      dec=0;      if (ratings[i] > ratings[i - 1])       curCandy++; else       curCandy=1;      res+=curCandy;    }  }  return res;}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String encryptionOID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  doAddSigner(key,subjectKeyID,encryptionOID,digestOID,signedAttrGen,unsignedAttrGen,null);}  }
class C{  public static StringBlock read(IntReader reader) throws IOException {  XmlResourceParser.readCheckType(reader,CHUNK_TYPE);  int chunkSize=reader.readInt();  int stringCount=reader.readInt();  int styleOffsetCount=reader.readInt();  reader.readInt();  int stringsOffset=reader.readInt();  int stylesOffset=reader.readInt();  StringBlock block=new StringBlock();  block.m_stringOffsets=reader.readIntArray(stringCount);  if (styleOffsetCount != 0) {    block.m_styleOffsets=reader.readIntArray(styleOffsetCount);  }{    int size=((stylesOffset == 0) ? chunkSize : stylesOffset) - stringsOffset;    if ((size % 4) != 0) {      throw new IOException("String data size is not multiple of 4 (" + size + ").");    }    block.m_strings=reader.readIntArray(size / 4);  }  if (stylesOffset != 0) {    int size=(chunkSize - stylesOffset);    if ((size % 4) != 0) {      throw new IOException("Style data size is not multiple of 4 (" + size + ").");    }    block.m_styles=reader.readIntArray(size / 4);  }  return block;}  }
class C{  public void close(){synchronized (asyncCloseExecutors) {    if (!this.closed) {      this.closed=true;      for (      ThreadPoolExecutor pool : asyncCloseExecutors.values()) {        pool.shutdown();      }      asyncCloseExecutors.clear();    }  }}  }
class C{  public void init(final Envelope3D env){  super.init(env);  this.minz=env.minz;  this.maxz=env.maxz;}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public int size(){  return this.size;}  }
class C{  @SmallTest public void testCreateSpeechRules_useRuleWithQuantityFormatter() throws Exception {  final String strategy="<ss:rule>" + "  <ss:formatter>" + "    <ss:template>@plurals/template_containers</ss:template>"+ "    <ss:quantity>itemCount</ss:quantity>"+ "    <ss:property>contentDescriptionOrText</ss:property>"+ "    <ss:property>itemCount</ss:property>"+ "  </ss:formatter>"+ "</ss:rule>";  final AccessibilityEvent oneEvent=AccessibilityEvent.obtain();  oneEvent.setPackageName("foo.bar.baz");  oneEvent.setContentDescription("List");  oneEvent.setItemCount(1);  final EventSpeechRuleProcessor processor=createProcessorWithStrategy(strategy,1);  Utterance utterance=new Utterance();  boolean processed=processor.processEvent(oneEvent,utterance);  assertTrue("The singleEvent must match the filter",processed);  assertFalse("An utterance must be produced",TextUtils.isEmpty(StringBuilderUtils.getAggregateText(utterance.getSpoken())));  assertFalse("The utterance produced by singleEvent must use the \"one\" plural option from the template resource",StringBuilderUtils.getAggregateText(utterance.getSpoken()).toString().contains("items"));  final AccessibilityEvent otherEvent=AccessibilityEvent.obtain();  otherEvent.setPackageName("foo.bar.baz");  otherEvent.setContentDescription("List");  otherEvent.setItemCount(6);  utterance=new Utterance();  processed=processor.processEvent(otherEvent,utterance);  assertTrue("The singleEvent must match the filter",processed);  assertFalse("An utterance must be produced",TextUtils.isEmpty(StringBuilderUtils.getAggregateText(utterance.getSpoken())));  assertTrue("The utterance produced by singleEvent must use the \"one\" plural option from the template resource",StringBuilderUtils.getAggregateText(utterance.getSpoken()).toString().contains("items"));}  }
class C{  private void throwISEwhenClosed(){  if (isClosed())   throw new IllegalStateException("Cache already closed: " + id());}  }
class C{  public FilteredQueryBuilder(@Nullable QueryBuilder queryBuilder,@Nullable QueryBuilder filterBuilder){  this.queryBuilder=queryBuilder;  this.filterBuilder=filterBuilder;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.281 -0500",hash_original_method="91B272278DB88F42B96F73872CBFFA74",hash_generated_method="2BAD7E2C66283498F1FE17C97BEBA274") private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public PaneServiceProgFrame(DecoderFile decoderFile,RosterEntry r,String name,String file,Programmer pProg){  super(decoderFile,r,name,file,pProg,false);  pack();  if (log.isDebugEnabled()) {    log.debug("PaneServiceProgFrame \"" + name + "\" constructed");  }}  }
class C{  private static int indexOfUnicodeEscape(@NotNull String text,int offset){  final int length=text.length();  for (int i=0; i < length; i++) {    final char c=text.charAt(i);    if (c != '\\') {      continue;    }    boolean isEscape=true;    int previousChar=i - 1;    while (previousChar >= 0 && text.charAt(previousChar) == '\\') {      isEscape=!isEscape;      previousChar--;    }    if (!isEscape) {      continue;    }    int nextChar=i;    do {      nextChar++;      if (nextChar >= length) {        break;      }    } while (text.charAt(nextChar) == 'u');    if (nextChar == i + 1 || nextChar + 3 >= length) {      break;    }    if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2))&& StringUtil.isHexDigit(text.charAt(nextChar + 3))) {      final int escapeEnd=nextChar + 4;      if (offset <= escapeEnd) {        return i;      }    }  }  return -1;}  }
class C{  public void debugPrint(){  System.out.println("Backup cells");  try {    for (int j=0; j < _size; j++) {      for (int k=0; k < _size; k++) {        if (_backupCells[j][k].getAlive()) {          System.out.print("X");        } else {          System.out.print(".");        }      }      System.out.println("");    }    System.out.println("Current cells:");    for (int j=0; j < _size; j++) {      for (int k=0; k < _size; k++) {        if (_cells[j][k].getAlive()) {          System.out.print("X");        } else {          System.out.print(".");        }      }      System.out.println("");    }  } catch (  Exception ex) {    System.out.println("Nothin' yet");  }}  }
class C{  public boolean isAltGraphDown(){  return (modifiers & ALT_GRAPH_MASK) != 0;}  }
class C{  public Iterable<TMember> inherited(){  return members(INHERITED);}  }
class C{  public void heal(final Player player){  player.heal();  player.getStatusList().removeAll(PoisonStatus.class);  SingletonRepository.getRPWorld().modify(player);}  }
class C{  @Override public String toString(){  return "BugCategory[" + category + "]{short="+ shortDescription+ ",abbrev="+ abbrev+ ",details="+ detailText+ '}';}  }
class C{  @Override public int hashCode(){  return Arrays.hashCode(data);}  }
class C{  public Aggregate(int type,Expression on,Select select,boolean distinct){  this.type=type;  this.on=on;  this.select=select;  this.distinct=distinct;}  }
class C{  private void loadOrgAccessRole(ArrayList<OrgAccess> list){  PreparedStatement pstmt=null;  ResultSet rs=null;  String sql="SELECT * FROM AD_Role_OrgAccess " + "WHERE AD_Role_ID=? AND IsActive='Y'";  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getAD_Role_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      MRoleOrgAccess oa=new MRoleOrgAccess(getCtx(),rs,get_TrxName());      loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);  }}  }
class C{  private ServerPod[] buildClusterServers(ClusterHeartbeat cluster,int serverCount){  ArrayList<ServerPod> serversPod=new ArrayList<>();  for (  ServerHeartbeat server : cluster.getServers()) {    ServerPod serverPod=new ServerPod(serversPod.size());    serversPod.add(serverPod);    serverPod.setServer(server);  }  while (serversPod.size() < serverCount) {    serversPod.add(new ServerPod(serversPod.size()));  }  ServerPod[] serverArray=new ServerPod[serverCount];  for (int i=0; i < serverCount; i++) {    serverArray[i]=serversPod.get(i);  }  return serverArray;}  }
class C{  public Builder convertRatesTo(TimeUnit rateUnit){  this.rateUnit=rateUnit;  return this;}  }
class C{  public FBBackupManager(){}  }
class C{  public Iterator<String> iterator(){  return names.iterator();}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildbaldemar(zone);}  }
class C{  private boolean iAmInChargeOfPeriodicDeletes(){  ZkController zk=core.getCoreDescriptor().getCoreContainer().getZkController();  if (null == zk)   return true;  CloudDescriptor desc=core.getCoreDescriptor().getCloudDescriptor();  String col=desc.getCollectionName();  List<Slice> slices=new ArrayList<Slice>(zk.getClusterState().getActiveSlices(col));  Collections.sort(slices,COMPARE_SLICES_BY_NAME);  if (slices.isEmpty()) {    log.error("Collection {} has no active Slices?",col);    return false;  }  Replica firstSliceLeader=slices.get(0).getLeader();  if (null == firstSliceLeader) {    log.warn("Slice in charge of periodic deletes for {} does not currently have a leader",col);    return false;  }  String leaderInCharge=firstSliceLeader.getName();  String myCoreNodeName=desc.getCoreNodeName();  boolean inChargeOfDeletesRightNow=leaderInCharge.equals(myCoreNodeName);  if (previouslyInChargeOfDeletes && !inChargeOfDeletesRightNow) {    log.info("Not currently in charge of periodic deletes for this collection, " + "will not trigger delete or log again until this changes");  }  previouslyInChargeOfDeletes=inChargeOfDeletesRightNow;  return inChargeOfDeletesRightNow;}  }
class C{  public static void constant(Tensor d,double c){  d.v=Nd4j.zeros(d.v.shape()).addi(c);}  }
class C{  private void selectTakeImageFromMenu(){  openActionBarOverflowOrOptionsMenu(getTargetContext());  onView(withText(R.string.take_picture)).perform(click());}  }
class C{  @Override public String generateLabel(XYDataset dataset,int series,int category){  return null;}  }
class C{  public void processCommandLineOptions(String[] options){  try {    File tmpFile=File.createTempFile("options",null,null);    PrintWriter out=new PrintWriter(new FileWriter(tmpFile));    for (int i=0; i < options.length; i++) {      String key=options[i].substring(1);      if (i + 1 == options.length || options[i + 1].startsWith("-")) {        out.println(key + " = true");      } else {        out.print(key + " =");        while (i + 1 < options.length && !options[i + 1].startsWith("-")) {          out.print(String.format(" %s",options[i + 1]));          i++;        }        out.println();      }    }    out.close();    this.readConfigFile(tmpFile.getCanonicalPath());    tmpFile.delete();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static byte[] ivCipherConcat(byte[] iv,byte[] cipherText){  byte[] combined=new byte[iv.length + cipherText.length];  System.arraycopy(iv,0,combined,0,iv.length);  System.arraycopy(cipherText,0,combined,iv.length,cipherText.length);  return combined;}  }
class C{  public boolean hasAbsoluteTime(){  return super.hasAttribute(ABSOLUTE_TIME);}  }
class C{  public static Map<String,Object> recalcOrderTax(DispatchContext ctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=ctx.getDispatcher();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  String orderItemSeqId=(String)context.get("orderItemSeqId");  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Security security=ctx.getSecurity();  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);  if (!hasPermission) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));  }  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderHeaderEntity",locale) + e.getMessage());  }  if (orderHeader == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorNoValidOrderHeaderFoundForOrderId",UtilMisc.toMap("orderId",orderId),locale));  }  List<GenericValue> orderTaxAdjustments=null;  try {    orderTaxAdjustments=EntityQuery.use(delegator).from("OrderAdjustment").where("orderId",orderId,"orderAdjustmentTypeId","SALES_TAX").queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"Unable to retrieve SALES_TAX adjustments for order : " + orderId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToRetrieveSalesTaxAdjustments",locale));  }  BigDecimal totalExistingOrderTax=ZERO;  for (  GenericValue orderTaxAdjustment : orderTaxAdjustments) {    if (orderTaxAdjustment.get("amount") != null) {      totalExistingOrderTax=totalExistingOrderTax.add(orderTaxAdjustment.getBigDecimal("amount").setScale(taxDecimals,taxRounding));    }  }  BigDecimal totalNewOrderTax=ZERO;  OrderReadHelper orh=new OrderReadHelper(orderHeader);  List<GenericValue> shipGroups=orh.getOrderItemShipGroups();  if (shipGroups != null) {    for (    GenericValue shipGroup : shipGroups) {      String shipGroupSeqId=shipGroup.getString("shipGroupSeqId");      List<GenericValue> validOrderItems=orh.getValidOrderItems(shipGroupSeqId);      if (validOrderItems != null) {        List<GenericValue> products=new ArrayList<GenericValue>(validOrderItems.size());        List<BigDecimal> amounts=new ArrayList<BigDecimal>(validOrderItems.size());        List<BigDecimal> shipAmts=new ArrayList<BigDecimal>(validOrderItems.size());        List<BigDecimal> itPrices=new ArrayList<BigDecimal>(validOrderItems.size());        List<BigDecimal> itQuantities=new ArrayList<BigDecimal>(validOrderItems.size());        List<GenericValue> allAdjustments=orh.getAdjustments();        List<GenericValue> orderHeaderAdjustments=OrderReadHelper.getOrderHeaderAdjustments(allAdjustments,shipGroupSeqId);        BigDecimal orderSubTotal=OrderReadHelper.getOrderItemsSubTotal(validOrderItems,allAdjustments);        BigDecimal orderShipping=OrderReadHelper.calcOrderAdjustments(orderHeaderAdjustments,orderSubTotal,false,false,true);        BigDecimal orderPromotions=OrderReadHelper.calcOrderPromoAdjustmentsBd(allAdjustments);        for (int i=0; i < validOrderItems.size(); i++) {          GenericValue orderItem=validOrderItems.get(i);          String productId=orderItem.getString("productId");          try {            products.add(i,EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne());            amounts.add(i,OrderReadHelper.getOrderItemSubTotal(orderItem,allAdjustments,true,false));            shipAmts.add(i,OrderReadHelper.getOrderItemAdjustmentsTotal(orderItem,allAdjustments,false,false,true));            itPrices.add(i,orderItem.getBigDecimal("unitPrice"));            itQuantities.add(i,orderItem.getBigDecimal("quantity"));          } catch (          GenericEntityException e) {            Debug.logError(e,"Cannot read order item entity : " + orderItem,module);            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCannotReadTheOrderItemEntity",locale));          }        }        GenericValue shippingAddress=orh.getShippingAddress(shipGroupSeqId);        if (shippingAddress == null) {          List<GenericValue> billingAddressList=orh.getBillingLocations();          if (billingAddressList.size() > 0) {            shippingAddress=billingAddressList.get(0);          }        }        if (shippingAddress == null) {          String facilityId=orderHeader.getString("originFacilityId");          if (facilityId != null) {            GenericValue facilityContactMech=ContactMechWorker.getFacilityContactMechByPurpose(delegator,facilityId,UtilMisc.toList("SHIP_ORIG_LOCATION","PRIMARY_LOCATION"));            if (facilityContactMech != null) {              try {                shippingAddress=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",facilityContactMech.getString("contactMechId")).queryOne();              } catch (              GenericEntityException e) {                Debug.logError(e,module);              }            }          }        }        if (shippingAddress == null) {          Debug.logWarning("Not calculating tax for Order [" + orderId + "] because there is no shippingAddress, and no address on the origin facility ["+ orderHeader.getString("originFacilityId")+ "]",module);          continue;        }        Map<String,Object> serviceContext=UtilMisc.<String,Object>toMap("productStoreId",orh.getProductStoreId(),"itemProductList",products,"itemAmountList",amounts,"itemShippingList",shipAmts,"itemPriceList",itPrices,"itemQuantityList",itQuantities,"orderShippingAmount",orderShipping);        serviceContext.put("shippingAddress",shippingAddress);        serviceContext.put("orderPromotionsAmount",orderPromotions);        if (orh.getBillToParty() != null)         serviceContext.put("billToPartyId",orh.getBillToParty().getString("partyId"));        if (orh.getBillFromParty() != null)         serviceContext.put("payToPartyId",orh.getBillFromParty().getString("partyId"));        Map<String,Object> serviceResult=null;        try {          serviceResult=dispatcher.runSync("calcTax",serviceContext);        } catch (        GenericServiceException e) {          Debug.logError(e,module);          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemOccurredInTaxService",locale));        }        if (ServiceUtil.isError(serviceResult)) {          return ServiceUtil.returnError(ServiceUtil.getErrorMessage(serviceResult));        }        List<GenericValue> orderAdj=UtilGenerics.checkList(serviceResult.get("orderAdjustments"));        List<List<GenericValue>> itemAdj=UtilGenerics.checkList(serviceResult.get("itemAdjustments"));        if (UtilValidate.isNotEmpty(orderAdj)) {          for (          GenericValue oa : orderAdj) {            if (oa.get("amount") != null) {              totalNewOrderTax=totalNewOrderTax.add(oa.getBigDecimal("amount").setScale(taxDecimals,taxRounding));            }          }        }        if (UtilValidate.isNotEmpty(itemAdj)) {          for (int i=0; i < itemAdj.size(); i++) {            List<GenericValue> itemAdjustments=itemAdj.get(i);            for (            GenericValue ia : itemAdjustments) {              if (ia.get("amount") != null) {                totalNewOrderTax=totalNewOrderTax.add(ia.getBigDecimal("amount").setScale(taxDecimals,taxRounding));              }            }          }        }      }    }    BigDecimal orderTaxDifference=totalNewOrderTax.subtract(totalExistingOrderTax).setScale(taxDecimals,taxRounding);    if (orderTaxDifference.signum() != 0) {      Map<String,Object> createOrderAdjContext=new HashMap<String,Object>();      createOrderAdjContext.put("orderAdjustmentTypeId","SALES_TAX");      createOrderAdjContext.put("orderId",orderId);      if (UtilValidate.isNotEmpty(orderItemSeqId)) {        createOrderAdjContext.put("orderItemSeqId",orderItemSeqId);      } else {        createOrderAdjContext.put("orderItemSeqId","_NA_");      }      createOrderAdjContext.put("shipGroupSeqId","_NA_");      createOrderAdjContext.put("description","Tax adjustment due to order change");      createOrderAdjContext.put("amount",orderTaxDifference);      createOrderAdjContext.put("userLogin",userLogin);      Map<String,Object> createOrderAdjResponse=null;      try {        createOrderAdjResponse=dispatcher.runSync("createOrderAdjustment",createOrderAdjContext);      } catch (      GenericServiceException e) {        String createOrderAdjErrMsg=UtilProperties.getMessage(resource_error,"OrderErrorCallingCreateOrderAdjustmentService",locale);        Debug.logError(createOrderAdjErrMsg,module);        return ServiceUtil.returnError(createOrderAdjErrMsg);      }      if (ServiceUtil.isError(createOrderAdjResponse)) {        Debug.logError(ServiceUtil.getErrorMessage(createOrderAdjResponse),module);        return ServiceUtil.returnError(ServiceUtil.getErrorMessage(createOrderAdjResponse));      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public boolean isJuliRoot(){  return "org.apache.juli.ClassLoaderLogManager$RootLogger".equals(getTargetClass());}  }
class C{  @Override protected void onListItemClick(ListView listView,View view,int position,long id){  super.onListItemClick(listView,view,position,id);  if (!contextualActionBarActive) {    Connection c=arrayAdapter.getItem(position);    Intent intent=new Intent();    intent.setClassName(getApplicationContext().getPackageName(),"org.eclipse.paho.android.service.sample.ConnectionDetails");    intent.putExtra("handle",c.handle());    startActivity(intent);  }}  }
class C{  protected void printLine(UnifiedImageBuilder imageBdr,List<MapNode> nodes,DefaultEntityViewInfo pInfo,boolean asArea,boolean asOneway,NameInfo textInfo){  int[] xPoints=new int[nodes.size()];  int[] yPoints=new int[nodes.size()];  int viewWidth=!asArea ? imageBdr.getWidth() : -1;  int viewHeight=!asArea ? imageBdr.getHeight() : -1;  boolean visible=getViewCoords(nodes,viewWidth,viewHeight,xPoints,yPoints);  if (visible) {    boolean filled=false;    if (asArea) {      imageBdr.setColor(pInfo.wayFillColor != null ? pInfo.wayFillColor : pInfo.wayColor);      imageBdr.setLineStyle(false,displayFactor);      imageBdr.setAreaFilled(true);      imageBdr.drawPolygon(xPoints,yPoints,nodes.size());      filled=true;    }    if (!filled || pInfo.wayFillColor != null && !pInfo.wayFillColor.equals(pInfo.wayColor)) {      imageBdr.setColor(pInfo.wayColor);      imageBdr.setLineStyle(pInfo.wayDashed,pInfo.wayWidth * displayFactorSym);      imageBdr.setAreaFilled(false);      imageBdr.drawPolyline(xPoints,yPoints,nodes.size());    }    if (asOneway) {      float x=xPoints[xPoints.length - 1];      float y=yPoints[yPoints.length - 1];      double angle=Math.atan2(x - xPoints[xPoints.length - 2],-(y - yPoints[yPoints.length - 2]));      printOnewayArrow(x,y,angle);    }    if (textInfo != null) {      setWayNamePosition(textInfo,xPoints,yPoints,filled);      nameInfoBuffer.add(textInfo);    }    if (debugMode && scale >= 2 * pInfo.minNameScale * displayFactor) {      int i=0;      for (      MapNode node : nodes) {        textInfo=new NameInfo(Long.toString(node.getId()),pInfo.nameColor,pInfo.printOrder);        textInfo.x=xPoints[i];        textInfo.y=yPoints[i];        nameInfoBuffer.add(textInfo);        ++i;      }    }  }}  }
class C{  private void verifyGroup(final GraphPatternGroup<IGroupMemberNode> group){  if (log.isDebugEnabled()) {    log.debug(group);  }}  }
class C{  public IdaException(final String msg,final Throwable cause){  super(msg,cause);}  }
class C{  private TvShowChooserModel(){  setName(BUNDLE.getString("chooser.nothingfound"));  combinedName=name;}  }
class C{  private void swim(int k){  while (k > 1 && greater(k / 2,k)) {    exch(k,k / 2);    k=k / 2;  }}  }
class C{  public MimeType(String primary,String sub,MimeTypeParameterList mtpl) throws MimeTypeParseException {  if (isValidToken(primary)) {    primaryType=primary.toLowerCase(Locale.ENGLISH);  } else {    throw new MimeTypeParseException("Primary type is invalid.");  }  if (isValidToken(sub)) {    subType=sub.toLowerCase(Locale.ENGLISH);  } else {    throw new MimeTypeParseException("Sub type is invalid.");  }  parameters=(MimeTypeParameterList)mtpl.clone();}  }
class C{  private static String correctReservedWord(String str){  char first=str.charAt(0);switch (first) {case 'a':    if (str.equals("abstract"))     return "_" + str;  break;case 'b':if (str.equals("boolean")) return "_" + str; else if (str.equals("break")) return "_" + str; else if (str.equals("byte")) return "_" + str;break;case 'c':if (str.equals("case")) return "_" + str; else if (str.equals("catch")) return "_" + str; else if (str.equals("char")) return "_" + str; else if (str.equals("const")) return "_" + str; else if (str.equals("class")) return "_" + str; else if (str.equals("continue")) return "_" + str;break;case 'd':if (str.equals("default")) return "_" + str; else if (str.equals("do")) return "_" + str; else if (str.equals("double")) return "_" + str;break;case 'e':if (str.equals("else")) return "_" + str; else if (str.equals("extends")) return "_" + str; else if (str.equals("enum")) return "_" + str;break;case 'f':if (str.equals("false")) return "_" + str; else if (str.equals("final")) return "_" + str; else if (str.equals("finally")) return "_" + str; else if (str.equals("float")) return "_" + str; else if (str.equals("for")) return "_" + str;break;case 'g':if (str.equals("goto")) return "_" + str;break;case 'i':if (str.equals("if")) return "_" + str; else if (str.equals("implements")) return "_" + str; else if (str.equals("import")) return "_" + str; else if (str.equals("instanceof")) return "_" + str; else if (str.equals("int")) return "_" + str; else if (str.equals("interface")) return "_" + str;break;case 'n':if (str.equals("native")) return "_" + str; else if (str.equals("new")) return "_" + str; else if (str.equals("null")) return "_" + str;break;case 'p':if (str.equals("package")) return "_" + str; else if (str.equals("private")) return "_" + str; else if (str.equals("protected")) return "_" + str; else if (str.equals("public")) return "_" + str;break;case 'r':if (str.equals("return")) return "_" + str;break;case 's':if (str.equals("short")) return "_" + str; else if (str.equals("static")) return "_" + str; else if (str.equals("strictfp")) return "_" + str; else if (str.equals("super")) return "_" + str; else if (str.equals("switch")) return "_" + str; else if (str.equals("synchronized")) return "_" + str;break;case 't':if (str.equals("this")) return "_" + str; else if (str.equals("throw")) return "_" + str; else if (str.equals("throws")) return "_" + str; else if (str.equals("transient")) return "_" + str; else if (str.equals("true")) return "_" + str; else if (str.equals("try")) return "_" + str;break;case 'v':if (str.equals("void")) return "_" + str; else if (str.equals("volatile")) return "_" + str;break;case 'w':if (str.equals("while")) return "_" + str;break;}return str;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private int detectCycles(IntList A){  IntList tortoise=A;  IntList hare=A;  if (A == null)   return 0;  int cnt=0;  while (true) {    cnt++;    if (hare.tail != null)     hare=hare.tail.tail; else     return 0;    tortoise=tortoise.tail;    if (tortoise == null || hare == null)     return 0;    if (hare == tortoise)     return cnt;  }}  }
class C{  protected static token do_code_string() throws java.io.IOException {  StringBuffer result=new StringBuffer();  advance();  advance();  while (!(next_char == ':' && next_char2 == '}')) {    if (next_char == EOF_CHAR) {      emit_error("Specification file ends inside a code string");      break;    }    result.append(new Character((char)next_char));    advance();  }  advance();  advance();  return new str_token(sym.CODE_STRING,result.toString());}  }
class C{  public SubscriptionNotEnabledException(String message){  super(message);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:    return getDeclaredName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Graph search(List<Node> nodes){  this.logger.log("info","Starting PC PATTERN algorithm");  this.logger.log("info","Independence test = " + independenceTest + ".");  long startTime=System.currentTimeMillis();  numIndependenceTests=0;  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  List allNodes=getIndependenceTest().getVariables();  if (!allNodes.containsAll(nodes)) {    throw new IllegalArgumentException("All of the given nodes must " + "be in the domain of the independence test provided.");  }  FasStable fas=new FasStable(getIndependenceTest());  fas.setKnowledge(getKnowledge());  fas.setDepth(getDepth());  graph=fas.search();  this.sepset=fas.getSepsets();  this.numIndependenceTests=fas.getNumIndependenceTests();  enumerateTriples();  SearchGraphUtils.pcOrientbk(getKnowledge(),graph,nodes);  orientCollidersUsingSepsetsPattern(sepset,getKnowledge(),graph);  handleDirectableCycles(graph);  MeekRulesPattern rules=new MeekRulesPattern();  rules.orientImplied(graph);  this.logger.log("graph","\nReturning this graph: " + graph);  this.elapsedTime=System.currentTimeMillis() - startTime;  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.log("info","Finishing PC PATTERN Algorithm.");  this.logger.flush();  return graph;}  }
class C{  public Network newMemory(){  return new BasicNetwork(getLongTermMemory());}  }
class C{  public void validate(){}  }
class C{  static byte[] readFile(InputStream in,long expectedSize) throws IOException {  if (expectedSize > Integer.MAX_VALUE) {    throw new OutOfMemoryError("file is too large to fit in a byte array: " + expectedSize + " bytes");  }  return expectedSize == 0 ? ByteStreams.toByteArray(in) : ByteStreams.toByteArray(in,(int)expectedSize);}  }
class C{  public static <T extends Object>void putIfNotDefault(Properties props,String propertyName,T value,T def){  if (value != null) {    String valString=value.toString().trim();    if (def == null || (def != null && !def.toString().trim().equals(valString))) {      if (valString.length() != 0) {        props.put(propertyName,valString);      }    }  }}  }
class C{  public PatternTokenizerFactory(Map<String,String> args){  super(args);  pattern=getPattern(args,PATTERN);  group=getInt(args,GROUP,-1);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @Override protected byte[] decrypt(byte type,byte[] fragment,int offset,int len){  byte[] data=decCipher.update(fragment,offset,len);  byte[] content;  if (block_size != 0) {    int padding_length=data[data.length - 1] & 0xFF;    for (int i=0; i < padding_length; i++) {      if ((data[data.length - 2 - i] & 0xFF) != padding_length) {        throw new AlertException(AlertProtocol.DECRYPTION_FAILED,new SSLProtocolException("Received message has bad padding"));      }    }    content=new byte[data.length - hash_size - padding_length- 1];  } else {    content=new byte[data.length - hash_size];  }  mac_material_header[0]=type;  mac_material_header[3]=(byte)((0x00FF00 & content.length) >> 8);  mac_material_header[4]=(byte)(0x0000FF & content.length);  decMac.update(read_seq_num);  decMac.update(mac_material_header);  decMac.update(data,0,content.length);  byte[] mac_value=decMac.doFinal();  if (logger != null) {    logger.println("Decrypted:");    logger.print(data);    logger.println("Expected mac value:");    logger.print(mac_value);  }  for (int i=0; i < hash_size; i++) {    if (mac_value[i] != data[i + content.length]) {      throw new AlertException(AlertProtocol.BAD_RECORD_MAC,new SSLProtocolException("Bad record MAC"));    }  }  System.arraycopy(data,0,content,0,content.length);  incSequenceNumber(read_seq_num);  return content;}  }
class C{  public void deleteDescriptores(String[] listaIds){  String qual=new StringBuffer().append(DBUtils.WHERE).append(DBUtils.generateInTokenField(CAMPO_ID,listaIds)).toString();  if (logger.isDebugEnabled())   logger.debug("Se van a eliminar los descriptores con ids: " + listaIds);  deleteVO(qual,TABLE_NAME);}  }
class C{  public void excludeStandardObjectNames(){  String[] names={"Object","Object.prototype","Function","Function.prototype","String","String.prototype","Math","Array","Array.prototype","Error","Error.prototype","Number","Number.prototype","Date","Date.prototype","RegExp","RegExp.prototype","Script","Script.prototype","Continuation","Continuation.prototype"};  for (int i=0; i < names.length; i++) {    addExcludedName(names[i]);  }  String[] optionalNames={"XML","XML.prototype","XMLList","XMLList.prototype"};  for (int i=0; i < optionalNames.length; i++) {    addOptionalExcludedName(optionalNames[i]);  }}  }
class C{  public double mutualInformation(int child,int[] parents,int[] lags){  double M;  int maxlag=0;  for (  int lag : lags) {    if (lag > maxlag) {      maxlag=lag;    }  }  int[] c=new int[ntimes - maxlag];  for (int i=maxlag; i < ntimes; i++) {    c[i - maxlag]=cases[i][child];  }  double hchild=entropy(c);  int[] p1=new int[ntimes - maxlag];  int[][] pm=new int[parents.length][ntimes - maxlag];  double hparents;  for (int i=0; i < ntimes - maxlag; i++) {    p1[i]=cases[maxlag - lags[0] + i][parents[0]];  }  hparents=entropy(p1);  if (parents.length > 1) {    for (int i=0; i < ntimes - maxlag; i++) {      for (int j=1; j < parents.length; j++) {        pm[j - 1][i]=cases[maxlag - lags[j] + i][parents[j]];      }    }    hparents=jointEntropy(p1,pm);  }  double hjoint;  if (parents.length == 1) {    hjoint=jointEntropy(c,p1);  } else {    int[][] p1pm=new int[parents.length][ntimes - maxlag];    for (int i=0; i < ntimes - maxlag; i++) {      p1pm[0][i]=p1[i];      for (int j=0; j < parents.length - 1; j++) {        p1pm[j + 1][i]=pm[j][i];      }    }    hjoint=jointEntropy(c,p1pm);  }  M=hchild + hparents - hjoint;  return M;}  }
class C{  public SearchRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  public IntIterator rangeSortedBy(String field,float lo,float hi,int indexType){  Index index=getIndex(field,float.class,true);  return index.rows(lo,hi,indexType);}  }
class C{  public static <T>T firstResult(Collection<T> results){  int size=(results != null ? results.size() : 0);  if (size == 0) {    return null;  }  return results.iterator().next();}  }
class C{  protected void handleInsertBreak(RSyntaxTextArea textArea,boolean noSelection){  if (noSelection && textArea.isAutoIndentEnabled()) {    insertNewlineWithAutoIndent(textArea);  } else {    textArea.replaceSelection("\n");    if (noSelection) {      possiblyCloseCurlyBrace(textArea,null);    }  }}  }
class C{  public static String executeFunction(String[] values,Variables variables){  try {    if (values[2].equalsIgnoreCase("getcsv")) {      return GenericFunctions.getCSVData(Integer.parseInt(values[3]));    } else     if (values[2].equalsIgnoreCase("getfiledata")) {      return GenericFunctions.getCSVData(values,variables);    } else     if (values[2].equalsIgnoreCase("getssn")) {      return GenericFunctions.getSsn(values[3]);    }    return "";  } catch (  Exception ex) {    return "";  }}  }
class C{  public StringConverter(){  this(LENGTH_LIMIT);}  }
class C{  public <IN>TestOutputFormat<IN> createTestOutputFormat(OutputVerifier<IN> verifier,VerifyFinishedTrigger trigger){  int port=runner.registerListener(verifier,trigger);  TestOutputFormat<IN> format=new TestOutputFormat<IN>(port);  return format;}  }
class C{  public static void killAll(){  for (  IgniteProcessProxy ignite : gridProxies.values()) {    try {      ignite.getProcess().kill();    } catch (    Exception e) {      U.error(ignite.log,"Killing failed.",e);    }  }  gridProxies.clear();}  }
class C{  public CharClassException(String message){  super(message);}  }
class C{  public boolean isFavorite(){  if (mFavoritesCache != null) {synchronized (this) {      final Long id=mFavoritesCache.getSongId(getAudioId());      return id != null ? true : false;    }  }  return false;}  }
class C{  public static String generateActivationKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public ToStringBuilder reflectionAppendArray(Object array){  this.getStyle().reflectionAppendArrayDetail(this.getStringBuffer(),null,array);  return this;}  }
class C{  private byte[][] deriveDH(String keyId,PublicKey publicKey) throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeyException, IOException {  PublicKey senderPubKey=keys.get(keyId).getPublic();  KeyAgreement keyAgreement=KeyAgreement.getInstance("ECDH");  keyAgreement.init(keys.get(keyId).getPrivate());  keyAgreement.doPhase(publicKey,true);  byte[] secret=keyAgreement.generateSecret();  byte[] context=concat(labels.get(keyId).getBytes(),new byte[1],lengthPrefix(publicKey),lengthPrefix(senderPubKey));  return new byte[][]{secret,context};}  }
class C{  public static short guessType(String value){  short type=CSSPrimitiveValue.CSS_STRING;  if (value != null && value.length() > 1) {    if (value.endsWith("%")) {      type=CSSPrimitiveValue.CSS_PERCENTAGE;    } else     if (value.startsWith("rgb") || value.startsWith("#")) {      type=CSSPrimitiveValue.CSS_RGBCOLOR;    } else {      String hmm=value.substring(value.length() - 2);      if ("pt".equals(hmm)) {        type=CSSPrimitiveValue.CSS_PT;      } else       if ("px".equals(hmm)) {        type=CSSPrimitiveValue.CSS_PX;      } else       if ("em".equals(hmm)) {        type=CSSPrimitiveValue.CSS_EMS;      } else       if ("ex".equals(hmm)) {        type=CSSPrimitiveValue.CSS_EXS;      } else       if ("in".equals(hmm)) {        type=CSSPrimitiveValue.CSS_IN;      } else       if ("cm".equals(hmm)) {        type=CSSPrimitiveValue.CSS_CM;      } else       if ("mm".equals(hmm)) {        type=CSSPrimitiveValue.CSS_MM;      } else {        if (Character.isDigit(value.charAt(value.length() - 1))) {          try {            new Float(value);            type=CSSPrimitiveValue.CSS_NUMBER;          } catch (          NumberFormatException ex) {            type=CSSPrimitiveValue.CSS_STRING;          }        } else {          type=CSSPrimitiveValue.CSS_STRING;        }      }    }  }  return type;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean isDefaultSelected(){  return p_isDefaultSelected;}  }
class C{  protected TopDocs scoreDocs(String queryString,IndexReader reader) throws IOException {  throw new UnsupportedOperationException("Not supported currently in Lucene 4.0");}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type_1: ");  result.append(type_1);  result.append(", roleName_1: ");  result.append(roleName_1);  result.append(')');  return result.toString();}  }
class C{  public static Query create(QueryParseContext context,GeoPointFieldMapper.GeoPointFieldType fieldType,String geohash,@Nullable List<CharSequence> geohashes){  MappedFieldType geoHashMapper=fieldType.geohashFieldType();  if (geoHashMapper == null) {    throw new IllegalArgumentException("geohash filter needs geohash_prefix to be enabled");  }  if (geohashes == null || geohashes.size() == 0) {    return geoHashMapper.termQuery(geohash,context);  } else {    geohashes.add(geohash);    return geoHashMapper.termsQuery(geohashes,context);  }}  }
class C{  public static void assertNotEquals(String itemName,byte notExpected,byte actual){  try {    if (notExpected == actual) {      Assert.fail(itemName + " should not be equal:<" + notExpected+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  protected void stopOutputTest(){  if (testRunning && outTest) {    outTimer.stop();    statusText1.setText("Output Test stopped after " + Integer.toString(numIterations) + " Cycles");    statusText1.setVisible(true);    statusText2.setText("  ");    statusText2.setVisible(true);  }}  }
class C{  public static boolean isConstantParameter(int index){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  return false;}  }
class C{  public ExpressionException(String message){  this(message,-1);}  }
class C{  public void map(String value,Configuration configuration,Context context) throws IOException {  LOG.info("Processing file {}",value);  InputStream in=null;  Record record=null;  Timer.Context timerContext=elapsedTime.time();  try {    PathParts parts=new PathParts(value.toString(),configuration);    record=getRecord(parts);    if (record == null) {      return;    }    for (    Map.Entry<String,String> entry : commandLineMorphlineHeaders.entrySet()) {      record.replaceValues(entry.getKey(),entry.getValue());    }    long fileLength=parts.getFileStatus().getLen();    if (disableFileOpen) {      in=new ByteArrayInputStream(new byte[0]);    } else {      in=new BufferedInputStream(parts.getFileSystem().open(parts.getUploadPath()));    }    record.put(Fields.ATTACHMENT_BODY,in);    Notifications.notifyStartSession(morphline);    if (!morphline.process(record)) {      LOG.warn("Morphline {} failed to process record: {}",morphlineFileAndId,record);    }    if (context != null) {      context.getCounter(MorphlineCounters.class.getName(),MorphlineCounters.FILES_READ.toString()).increment(1);      context.getCounter(MorphlineCounters.class.getName(),MorphlineCounters.FILE_BYTES_READ.toString()).increment(fileLength);    }  } catch (  Exception e) {    LOG.error("Unable to process file " + value,e);    if (context != null) {      context.getCounter(getClass().getName() + ".errors",e.getClass().getName()).increment(1);    }    morphlineContext.getExceptionHandler().handleException(e,record);  } finally {    timerContext.stop();    if (in != null) {      in.close();    }  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public String encode(String pString){  return metaphone(pString);}  }
class C{  public void testConstructorBytesNegative2(){  byte aBytes[]={-12,56,100};  byte rBytes[]={-12,56,100};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  XmlElements(XmlElement[] elems){  m_elems=elems;}  }
class C{  public static double[] append(double buffer[],double newElement){  double[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  public void multiply(Matrix4f rhs){  Matrix4f tmp=new Matrix4f();  tmp.loadMultiply(this,rhs);  load(tmp);}  }
class C{  public COperandsMenu(final INaviCodeNode node,final INaviInstruction instruction,final List<ICodeNodeExtension> extensions) throws InternalTranslationException, MaybeNullException {  super("Operands");  final ITranslator<INaviInstruction> translator=CTranslatorFactory.getTranslator(instruction.getArchitecture());  if (translator == null) {    throw new MaybeNullException();  }  final Pair<Set<String>,Set<String>> operands=COperandsDeterminer.getRegisters(instruction);  final Set<String> inSet=operands.first();  final Set<String> outSet=operands.second();  final JMenu inRegisters=new JMenu("Incoming Registers");  final JMenu outRegisters=new JMenu("Outgoing Registers");  if (!inSet.isEmpty()) {    add(inRegisters);  }  if (!outSet.isEmpty()) {    add(outRegisters);  }  for (  final String register : inSet) {    final JMenu operandMenu=new JMenu(register);    for (    final ICodeNodeExtension extension : extensions) {      extension.extendIncomingRegistersMenu(operandMenu,node,instruction,register);    }    inRegisters.add(operandMenu);  }  for (  final String register : outSet) {    final JMenu operandMenu=new JMenu(register);    for (    final ICodeNodeExtension extension : extensions) {      extension.extendOutgoingRegistersMenu(operandMenu,node,instruction,register);    }    outRegisters.add(operandMenu);  }}  }
class C{  public static void out(final Throwable _exception){  out("",_exception);}  }
class C{  public IndexSegmentIndex(IRawStore store,Checkpoint checkpoint,IndexMetadata metadata,boolean readOnly){  super(store,checkpoint,metadata,readOnly);}  }
class C{  private Object iterativeMethod(Context cx,int id,Scriptable scope,Scriptable thisObj,Object[] args){  Object callbackArg=args.length > 0 ? args[0] : Undefined.instance;  if (callbackArg == null || !(callbackArg instanceof Function)) {    throw ScriptRuntime.notFunctionError(callbackArg);  }  Function f=(Function)callbackArg;  Scriptable parent=ScriptableObject.getTopLevelScope(f);  Scriptable thisArg;  if (args.length < 2 || args[1] == null || args[1] == Undefined.instance) {    thisArg=parent;  } else {    thisArg=ScriptRuntime.toObject(cx,scope,args[1]);  }  long length=getLengthProperty(cx,thisObj);  int resultLength=id == Id_map ? (int)length : 0;  Scriptable array=cx.newArray(scope,resultLength);  long j=0;  for (long i=0; i < length; i++) {    Object[] innerArgs=new Object[3];    Object elem=getRawElem(thisObj,i);    if (elem == Scriptable.NOT_FOUND) {      continue;    }    innerArgs[0]=elem;    innerArgs[1]=Long.valueOf(i);    innerArgs[2]=thisObj;    Object result=f.call(cx,parent,thisArg,innerArgs);switch (id) {case Id_every:      if (!ScriptRuntime.toBoolean(result))       return Boolean.FALSE;    break;case Id_filter:  if (ScriptRuntime.toBoolean(result))   setElem(cx,array,j++,innerArgs[0]);break;case Id_forEach:break;case Id_map:setElem(cx,array,i,result);break;case Id_some:if (ScriptRuntime.toBoolean(result)) return Boolean.TRUE;break;}}switch (id) {case Id_every:return Boolean.TRUE;case Id_filter:case Id_map:return array;case Id_some:return Boolean.FALSE;case Id_forEach:default :return Undefined.instance;}}  }
class C{  public OneRRule newRule(Attribute attr,Instances data) throws Exception {  OneRRule r;  int[] missingValueCounts=new int[data.classAttribute().numValues()];  if (attr.isNominal()) {    r=newNominalRule(attr,data,missingValueCounts);  } else {    r=newNumericRule(attr,data,missingValueCounts);  }  r.m_missingValueClass=Utils.maxIndex(missingValueCounts);  if (missingValueCounts[r.m_missingValueClass] == 0) {    r.m_missingValueClass=-1;  } else {    r.m_correct+=missingValueCounts[r.m_missingValueClass];  }  return r;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getHomeItemDBDao() : null;}  }
class C{  private void displaySrtData(){  try {    if (subtitleDisplayHandler != null) {      subtitleDisplayHandler.removeCallbacks(subtitleProcessesor);    }    resetClosedCaptioning();    if (srtList != null && srtList.size() > 0) {      final String languageSubtitle=getSubtitleLanguage();      if (languageSubtitle != null) {        srt=srtList.get(languageSubtitle);        if (srt != null) {          try {            if (player != null) {              environment.getSegment().trackShowTranscript(videoEntry.videoId,player.getCurrentPosition() / AppConstants.MILLISECONDS_PER_SECOND,videoEntry.eid,videoEntry.lmsUrl);            }          } catch (          Exception e) {            logger.error(e);          }          if (subtitleDisplayHandler == null) {            subtitleDisplayHandler=new Handler();          }          subtitleDisplayHandler.post(subtitleProcessesor);        }      }    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public void init(final int expectedEventCout){  latch=new CountDownLatch(expectedEventCout);}  }
class C{  public static void importGwtSourceProjects() throws CoreException {  IWorkspace workspace=ResourcesPlugin.getWorkspace();  String gwtDevProjectName="gwt-dev";  URI gwtProjectsUri=workspace.getPathVariableManager().getURIValue("GWT_ROOT");  IPath gwtProjectsDir=URIUtil.toPath(gwtProjectsUri).append("eclipse");  IPath gwtDevDir=gwtProjectsDir.append("dev");  ProjectUtilities.importProject(gwtDevProjectName,gwtDevDir);  IPath gwtUserDir=gwtProjectsDir.append("user");  ProjectUtilities.importProject("gwt-user",gwtUserDir);}  }
class C{  public static boolean computeBooleanFromString(String stringBoolean){  return computeBooleanFromString(stringBoolean,false);}  }
class C{  public HighlightBuilder order(String order){  this.order=order;  return this;}  }
class C{  public static Report createReport(final CommandLine cmd,final ReportType def){  ReportType reportType=ReportType.parse(cmd.getOptionValue('r',"none"));  final String name=cmd.getOptionValue("report-name");  final Report report;  if (ReportType.NONE == reportType && null != def) {    reportType=def;  }  if (ReportType.REDIS == reportType) {    report=RedisReport.create(RedisConfigFactory.createConfig(cmd),name);  } else {    report=null;  }  return report;}  }
class C{  public String synopsis(){  return m_Synopsis;}  }
class C{  public ChooseProjectDialog(@NotNull Project project,@NotNull String title,@NotNull String okText){  super(project,true);  init();  setTitle(title);  setOKButtonText(okText);  setOKActionEnabled(false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.707 -0500",hash_original_method="7071111779A5C9E705ECA7E7B982D4CC",hash_generated_method="E5B0B7E68DE882FA88F406B138EA0556") public static int[] oidStrToInts(String oid) throws IOException {  int length=oid.length();  if (oid.charAt(length - 1) == '.') {    throw new IOException("Bad OID: " + oid);  }  int[] result=new int[length / 2 + 1];  int number=0;  for (int i=0; i < length; i++) {    int value=0;    int pos=i;    for (; i < length; i++) {      char ch=oid.charAt(i);      if ((ch < '0') || (ch > '9')) {        break;      }      value=10 * value + (ch - '0');    }    if (i == pos) {      throw new IOException("Bad OID: " + oid);    }    result[number++]=value;    if (i == length) {      break;    }    char ch=oid.charAt(i);    if (ch != '.') {      throw new IOException("Bad OID: " + oid);    }  }  if (number < 2) {    throw new IOException("OID should consist of no less than 2 components: " + oid);  }  return Arrays.copyOfRange(result,0,number);}  }
class C{  private static Tree generateSubTree(HashMap<Integer,Pair<IndexedWord,List<Integer>>> dependencies,int root){  List<Integer> children=dependencies.get(root).second;  IndexedWord tw=dependencies.get(root).first;  Tree tree=new LabeledScoredTreeNode(tw);  boolean addedHead=children.isEmpty();  List<Integer> sortedChildren=CollectionUtils.sorted(children);  for (  Integer c : sortedChildren) {    if (c > root && !addedHead) {      Tree child=new LabeledScoredTreeNode(tw);      tree.addChild(child);      addedHead=true;    }    Tree child=generateSubTree(dependencies,c);    tree.addChild(child);  }  if (!addedHead) {    Tree child=new LabeledScoredTreeNode(tw);    tree.addChild(child);  }  return tree;}  }
class C{  private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){  JsonObject request=new JsonObject();  JsonArray jsonHeaders=new JsonArray();  headers.forEach(null);  request.put("headers",jsonHeaders);  request.put("uri",uri);  request.put("method",method.toString());  request.put("payload",payload);  return request;}  }
class C{  public TIntHashSet(int[] array,TIntHashingStrategy strategy){  this(array.length,strategy);  addAll(array);}  }
class C{  public boolean mousePressed(MouseEvent e){  Debug.message("eomg","PointStateMachine|undefined state|mousePressed = " + graphic.getGraphic().getRenderType());  GrabPoint gb=graphic.getGrabPoint(EditableOMPoint.CENTER_POINT_INDEX);  gb.set(e.getX(),e.getY());  graphic.setMovingPoint(gb);  if (graphic.getGraphic().getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {    graphic.getGrabPoint(EditableOMPoint.OFFSET_POINT_INDEX).set(e.getX(),e.getY());    graphic.getStateMachine().setOffsetNeeded(true);    Debug.message("eomg","PointStateMachine|undefined state| *offset needed*");  }  graphic.getStateMachine().setEdit();  return getMapMouseListenerResponse();}  }
class C{  public boolean isOutputAll(){  return _outputAll;}  }
class C{  public static final long crc64Long(String in){  if (in == null || in.length() == 0) {    return 0;  }  return crc64Long(getBytes(in));}  }
class C{  @Override protected void parse(char[] text,int off,int len){  if (attribute || capital) {    text[off]=toUpper(text[off]);  }  capital=true;}  }
class C{  public static void safeClose(Closeable stream){  try {    if (stream != null)     stream.close();  } catch (  IOException e) {  }}  }
class C{  public ReceiveMessageResult receiveMessage(ReceiveMessageRequest receiveMessageRequest){  if (receiveMessageRequest == null) {    String errorMessage="receiveMessageRequest cannot be null.";    LOG.error(errorMessage);    throw new AmazonClientException(errorMessage);  }  receiveMessageRequest.getRequestClientOptions().appendUserAgent(SQSExtendedClientConstants.USER_AGENT_HEADER);  if (!clientConfiguration.isLargePayloadSupportEnabled()) {    return super.receiveMessage(receiveMessageRequest);  }  receiveMessageRequest.getMessageAttributeNames().add(SQSExtendedClientConstants.RESERVED_ATTRIBUTE_NAME);  ReceiveMessageResult receiveMessageResult=super.receiveMessage(receiveMessageRequest);  List<Message> messages=receiveMessageResult.getMessages();  for (  Message message : messages) {    MessageAttributeValue largePayloadAttributeValue=message.getMessageAttributes().get(SQSExtendedClientConstants.RESERVED_ATTRIBUTE_NAME);    if (largePayloadAttributeValue != null) {      String messageBody=message.getBody();      MessageS3Pointer s3Pointer=readMessageS3PointerFromJSON(messageBody);      String s3MsgBucketName=s3Pointer.getS3BucketName();      String s3MsgKey=s3Pointer.getS3Key();      String origMsgBody=getTextFromS3(s3MsgBucketName,s3MsgKey);      LOG.info("S3 object read, Bucket name: " + s3MsgBucketName + ", Object key: "+ s3MsgKey+ ".");      message.setBody(origMsgBody);      message.getMessageAttributes().remove(SQSExtendedClientConstants.RESERVED_ATTRIBUTE_NAME);      String modifiedReceiptHandle=embedS3PointerInReceiptHandle(message.getReceiptHandle(),s3MsgBucketName,s3MsgKey);      message.setReceiptHandle(modifiedReceiptHandle);    }  }  return receiveMessageResult;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.580 -0500",hash_original_method="8921946161DEF2C387CE09B16F70206C",hash_generated_method="8921946161DEF2C387CE09B16F70206C") boolean fullScroll(int direction){  boolean moved=false;  if (direction == FOCUS_UP) {    mLayoutMode=LAYOUT_SET_SELECTION;    setSelectionInt(0);    invokeOnItemScrollListener();    moved=true;  } else   if (direction == FOCUS_DOWN) {    mLayoutMode=LAYOUT_SET_SELECTION;    setSelectionInt(mItemCount - 1);    invokeOnItemScrollListener();    moved=true;  }  if (moved) {    awakenScrollBars();  }  return moved;}  }
class C{  public static void reload(ServerConfProvider conf){  log.trace("reload({})",conf.getClass());  instance=conf;}  }
class C{  public void addRootCertificate(X509Certificate[] certificateChain,PrivateKey key) throws Exception {  try (VMCAServerContext context=getServerContext()){    VMCAAdapter2.AddRootCertificate(context,encodeX509CertificatesToString(certificateChain),encodePrivateKeyToString(key));  } }  }
class C{  public Model removeModule(String module){  if (modules().remove(requireNonNull(module,"Required not null module"))) {    removeModuleFromXML(module);  }  return this;}  }
class C{  protected boolean emitCompare(SPARCKind cmpKind,Value a,Value b){  boolean mirrored;  if (cmpKind.isInteger()) {    mirrored=emitIntegerCompare(cmpKind,a,b);  } else   if (cmpKind.isFloat()) {    mirrored=false;    emitFloatCompare(cmpKind,a,b,Fcc0);  } else {    throw GraalError.shouldNotReachHere();  }  return mirrored;}  }
class C{  public void cleanPage(){  while (!(mDrawableList.isEmpty())) {    mDrawableList.remove(0);  }  invalidate();}  }
class C{  public static DecompoundedWord createFromString(String aSplit){  DecompoundedWord s=new DecompoundedWord();  String[] elems=aSplit.split("\\+");  for (  String string : elems) {    s.appendSplitElement(Fragment.createFromString(string));  }  return s;}  }
class C{  public HTTPTokener(String string){  super(string);}  }
class C{  public boolean isEmpty(){  return table.isEmpty();}  }
class C{  public PermImpl(){  _id=Defs.NULL_ID;  _dest=Defs.DESTINATION_USER;  _product=UserDefs.PRODUCT_IDOC;  _perm=UserDefs.PERMISSION_NONE;}  }
class C{  private void restoreVolatileRegisters(Instruction inst){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  int i=0;  for (Enumeration<Register> e=phys.enumerateVolatileGPRs(); e.hasMoreElements(); i++) {    Register r=e.nextElement();    int location=saveVolatileGPRLocation[i];    Operand M=new StackLocationOperand(true,-location,WORDSIZE);    inst.insertBefore(MIR_Move.create(IA32_MOV,new RegisterOperand(r,PRIMITIVE_TYPE_FOR_WORD),M));  }}  }
class C{  public boolean isDestructuring(){  return isDestructuring;}  }
class C{  private RyaType serializeAndDeserialize(String dateTimeString,org.openrdf.model.URI type) throws RyaTypeResolverException {  if (type == null)   type=XMLSchema.DATETIME;  RyaType ryaType=new RyaType(type,dateTimeString);  byte[] serialize=new DateTimeRyaTypeResolver().serialize(ryaType);  return new DateTimeRyaTypeResolver().deserialize(serialize);}  }
class C{  public boolean contains(Keyword keyword){  return keywords.containsKey(keyword);}  }
class C{  public static int floorLog10(double d){  int guess=(int)(LOG2_DIV_LOG10 * MathLib.floorLog2(d));  double pow10=MathLib.toDoublePow10(1,guess);  if ((pow10 <= d) && (pow10 * 10 > d))   return guess;  if (pow10 > d)   return guess - 1;  return guess + 1;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public GF2Vector extractVector(int[] setJ){  int k=setJ.length;  if (setJ[k - 1] > length) {    throw new ArithmeticException("invalid index set");  }  GF2Vector result=new GF2Vector(k);  for (int i=0; i < k; i++) {    int e=v[setJ[i] >> 5] & (1 << (setJ[i] & 0x1f));    if (e != 0) {      result.v[i >> 5]|=1 << (i & 0x1f);    }  }  return result;}  }
class C{  public void testRandomHugeStrings() throws Exception {  Analyzer analyzer=new SmartChineseAnalyzer();  checkRandomData(random(),analyzer,100 * RANDOM_MULTIPLIER,8192);  analyzer.close();}  }
class C{  public LazilyLoadedTexture(Object imageSource){  this(imageSource,true);}  }
class C{  protected TypeValue(TypeValue type){  super((ObjectValue)type);  this.type_id=type.type_id;  this.prototype=new ObjectValue(type.prototype);  this.name=type.name;  this.type=type.type;  this.baseclass=type.baseclass;}  }
class C{  private static Instruction transform(Instruction s,Instruction def){  final RegisterOperand a=getUseFromCandidate(def);  final RegisterOperand x=getDefFromCandidate(def,true);  if (x == null) {    return null;  }  final RegisterOperand y=getDefFromCandidate(s,false);  if (y == null) {    return null;  }  if (VM.VerifyAssertions) {    RegisterOperand x2;    x2=getUseFromCandidate(s);    boolean similar=x.similar(x2);    if (!similar) {      String msg="x not similar to x2 " + x + " : "+ x2;      VM._assert(VM.NOT_REACHED,msg);    }  }switch (s.getOpcode()) {case INT_ADD_opcode:{      if (FOLD_INTS && FOLD_ADDS) {        int c2=getIntValue(Binary.getVal2(s));        if (def.operator() == INT_ADD) {          int c1=getIntValue(Binary.getVal2(def));          return Binary.create(INT_ADD,y.copyRO(),a.copyRO(),IC(c1 + c2));        } else         if (def.operator() == INT_SUB) {          int c1=getIntValue(Binary.getVal2(def));          return Binary.create(INT_ADD,y.copyRO(),a.copyRO(),IC(c2 - c1));        } else         if (def.operator() == INT_NEG && FOLD_CONSTANTS_TO_LHS) {          return Binary.create(INT_SUB,y.copyRO(),IC(c2),a.copyRO());        }      }      return null;    }case REF_ADD_opcode:{    if (FOLD_REFS && FOLD_ADDS) {      Address c2=getAddressValue(Binary.getVal2(s));      if (def.operator() == REF_ADD) {        Address c1=getAddressValue(Binary.getVal2(def));        return Binary.create(REF_ADD,y.copyRO(),a.copyRO(),AC(c1.toWord().plus(c2.toWord()).toAddress()));      } else       if (def.operator() == REF_SUB) {        Address c1=getAddressValue(Binary.getVal2(def));        return Binary.create(REF_ADD,y.copyRO(),a.copyRO(),AC(c2.toWord().minus(c1.toWord()).toAddress()));      } else       if (def.operator() == REF_NEG && FOLD_CONSTANTS_TO_LHS) {        return Binary.create(REF_SUB,y.copyRO(),AC(c2),a.copyRO());      }    }    return null;  }case LONG_ADD_opcode:{  if (FOLD_LONGS && FOLD_ADDS) {    long c2=getLongValue(Binary.getVal2(s));    if (def.operator() == LONG_ADD) {      long c1=getLongValue(Binary.getVal2(def));      return Binary.create(LONG_ADD,y.copyRO(),a.copyRO(),LC(c1 + c2));    } else     if (def.operator() == LONG_SUB) {      long c1=getLongValue(Binary.getVal2(def));      return Binary.create(LONG_ADD,y.copyRO(),a.copyRO(),LC(c2 - c1));    } else     if (def.operator() == LONG_NEG && FOLD_CONSTANTS_TO_LHS) {      return Binary.create(LONG_SUB,y.copyRO(),LC(c2),a.copyRO());    }  }  return null;}case FLOAT_ADD_opcode:{if (FOLD_FLOATS && FOLD_ADDS) {  float c2=getFloatValue(Binary.getVal2(s));  if (def.operator() == FLOAT_ADD) {    float c1=getFloatValue(Binary.getVal2(def));    return Binary.create(FLOAT_ADD,y.copyRO(),a.copyRO(),FC(c1 + c2));  } else   if (def.operator() == FLOAT_SUB) {    float c1=getFloatValue(Binary.getVal2(def));    return Binary.create(FLOAT_ADD,y.copyRO(),a.copyRO(),FC(c2 - c1));  } else   if (def.operator() == FLOAT_NEG && FOLD_CONSTANTS_TO_LHS) {    return Binary.create(FLOAT_SUB,y.copyRO(),FC(c2),a.copyRO());  }}return null;}case DOUBLE_ADD_opcode:{if (FOLD_DOUBLES && FOLD_ADDS) {double c2=getDoubleValue(Binary.getVal2(s));if (def.operator() == DOUBLE_ADD) {  double c1=getDoubleValue(Binary.getVal2(def));  return Binary.create(DOUBLE_ADD,y.copyRO(),a.copyRO(),DC(c1 + c2));} else if (def.operator() == DOUBLE_SUB) {  double c1=getDoubleValue(Binary.getVal2(def));  return Binary.create(DOUBLE_ADD,y.copyRO(),a.copyRO(),DC(c2 - c1));} else if (def.operator() == DOUBLE_NEG && FOLD_CONSTANTS_TO_LHS) {  return Binary.create(DOUBLE_SUB,y.copyRO(),DC(c2),a.copyRO());}}return null;}case INT_SUB_opcode:{if (FOLD_INTS && FOLD_SUBS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == INT_ADD) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_ADD,y.copyRO(),a.copyRO(),IC(c1 - c2));} else if (def.operator() == INT_SUB) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_ADD,y.copyRO(),a.copyRO(),IC(-c1 - c2));} else if (def.operator() == INT_NEG && FOLD_CONSTANTS_TO_LHS) {return Binary.create(INT_SUB,y.copyRO(),IC(-c2),a.copyRO());}}return null;}case REF_SUB_opcode:{if (FOLD_REFS && FOLD_SUBS) {Address c2=getAddressValue(Binary.getVal2(s));if (def.operator() == REF_ADD) {Address c1=getAddressValue(Binary.getVal2(def));return Binary.create(REF_ADD,y.copyRO(),a.copyRO(),AC(c1.toWord().minus(c2.toWord()).toAddress()));} else if (def.operator() == REF_SUB) {Address c1=getAddressValue(Binary.getVal2(def));return Binary.create(REF_ADD,y.copyRO(),a.copyRO(),AC(Word.zero().minus(c1.toWord()).minus(c2.toWord()).toAddress()));} else if (def.operator() == REF_NEG && FOLD_CONSTANTS_TO_LHS) {return Binary.create(REF_SUB,y.copyRO(),AC(Word.zero().minus(c2.toWord()).toAddress()),a.copyRO());}}return null;}case LONG_SUB_opcode:{if (FOLD_LONGS && FOLD_SUBS) {long c2=getLongValue(Binary.getVal2(s));if (def.operator() == LONG_ADD) {long c1=getLongValue(Binary.getVal2(def));return Binary.create(LONG_ADD,y.copyRO(),a.copyRO(),LC(c1 - c2));} else if (def.operator() == LONG_SUB) {long c1=getLongValue(Binary.getVal2(def));return Binary.create(LONG_ADD,y.copyRO(),a.copyRO(),LC(-c1 - c2));} else if (def.operator() == LONG_NEG && FOLD_CONSTANTS_TO_LHS) {return Binary.create(LONG_SUB,y.copyRO(),LC(-c2),a.copyRO());}}return null;}case FLOAT_SUB_opcode:{if (FOLD_FLOATS && FOLD_SUBS) {float c2=getFloatValue(Binary.getVal2(s));if (def.operator() == FLOAT_ADD) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(FLOAT_ADD,y.copyRO(),a.copyRO(),FC(c1 - c2));} else if (def.operator() == FLOAT_SUB) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(FLOAT_ADD,y.copyRO(),a.copyRO(),FC(-c1 - c2));} else if (def.operator() == FLOAT_NEG && FOLD_CONSTANTS_TO_LHS) {return Binary.create(FLOAT_SUB,y.copyRO(),FC(-c2),a.copyRO());}}return null;}case DOUBLE_SUB_opcode:{if (FOLD_DOUBLES && FOLD_SUBS) {double c2=getDoubleValue(Binary.getVal2(s));if (def.operator() == FLOAT_ADD) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(DOUBLE_ADD,y.copyRO(),a.copyRO(),DC(c1 - c2));} else if (def.operator() == DOUBLE_SUB) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(DOUBLE_ADD,y.copyRO(),a.copyRO(),DC(-c1 - c2));} else if (def.operator() == DOUBLE_NEG && FOLD_CONSTANTS_TO_LHS) {return Binary.create(DOUBLE_SUB,y.copyRO(),DC(-c2),a.copyRO());}}return null;}case INT_MUL_opcode:{if (FOLD_INTS && FOLD_MULTS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == INT_MUL) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_MUL,y.copyRO(),a.copyRO(),IC(c1 * c2));} else if (def.operator() == INT_NEG) {return Binary.create(INT_MUL,y.copyRO(),a.copyRO(),IC(-c2));}}return null;}case LONG_MUL_opcode:{if (FOLD_LONGS && FOLD_MULTS) {long c2=getLongValue(Binary.getVal2(s));if (def.operator() == LONG_MUL) {long c1=getLongValue(Binary.getVal2(def));return Binary.create(LONG_MUL,y.copyRO(),a.copyRO(),LC(c1 * c2));} else if (def.operator() == LONG_NEG) {return Binary.create(LONG_MUL,y.copyRO(),a.copyRO(),LC(-c2));}}return null;}case FLOAT_MUL_opcode:{if (FOLD_FLOATS && FOLD_MULTS) {float c2=getFloatValue(Binary.getVal2(s));if (def.operator() == FLOAT_MUL) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(FLOAT_MUL,y.copyRO(),a.copyRO(),FC(c1 * c2));} else if (def.operator() == FLOAT_NEG) {return Binary.create(FLOAT_MUL,y.copyRO(),a.copyRO(),FC(-c2));}}return null;}case DOUBLE_MUL_opcode:{if (FOLD_DOUBLES && FOLD_MULTS) {double c2=getDoubleValue(Binary.getVal2(s));if (def.operator() == DOUBLE_MUL) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(DOUBLE_MUL,y.copyRO(),a.copyRO(),DC(c1 * c2));} else if (def.operator() == DOUBLE_NEG) {return Binary.create(DOUBLE_MUL,y.copyRO(),a.copyRO(),DC(-c2));}}return null;}case INT_DIV_opcode:{if (FOLD_INTS && FOLD_DIVS) {int c2=getIntValue(GuardedBinary.getVal2(s));if (def.operator() == INT_DIV) {int c1=getIntValue(GuardedBinary.getVal2(def));Operand guard=GuardedBinary.getGuard(def);return GuardedBinary.create(INT_DIV,y.copyRO(),a.copyRO(),IC(c1 * c2),guard);} else if (def.operator() == INT_NEG) {Operand guard=GuardedBinary.getGuard(s);return GuardedBinary.create(INT_DIV,y.copyRO(),a.copyRO(),IC(-c2),guard);}}return null;}case LONG_DIV_opcode:{if (FOLD_LONGS && FOLD_DIVS) {long c2=getLongValue(GuardedBinary.getVal2(s));if (def.operator() == LONG_DIV) {long c1=getLongValue(GuardedBinary.getVal2(def));Operand guard=GuardedBinary.getGuard(def);return GuardedBinary.create(LONG_DIV,y.copyRO(),a.copyRO(),LC(c1 * c2),guard);} else if (def.operator() == LONG_NEG) {Operand guard=GuardedBinary.getGuard(s);return GuardedBinary.create(LONG_DIV,y.copyRO(),a.copyRO(),LC(-c2),guard);}}return null;}case FLOAT_DIV_opcode:{if (FOLD_FLOATS && FOLD_DIVS) {float c2=getFloatValue(Binary.getVal2(s));if (def.operator() == FLOAT_DIV) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(FLOAT_DIV,y.copyRO(),a.copyRO(),FC(c1 * c2));} else if (def.operator() == FLOAT_NEG) {return Binary.create(FLOAT_DIV,y.copyRO(),a.copyRO(),FC(-c2));}}return null;}case DOUBLE_DIV_opcode:{if (FOLD_DOUBLES && FOLD_DIVS) {double c2=getDoubleValue(Binary.getVal2(s));if (def.operator() == DOUBLE_DIV) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(DOUBLE_DIV,y.copyRO(),a.copyRO(),DC(c1 * c2));} else if (def.operator() == DOUBLE_NEG) {return Binary.create(DOUBLE_DIV,y.copyRO(),a.copyRO(),DC(-c2));}}return null;}case INT_SHL_opcode:{if (FOLD_INTS && FOLD_SHIFTLS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == INT_SHL) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_SHL,y.copyRO(),a.copyRO(),IC(c1 + c2));} else if ((def.operator() == INT_SHR) || (def.operator() == INT_USHR)) {int c1=getIntValue(Binary.getVal2(def));if (c1 == c2) {return Binary.create(INT_AND,y.copyRO(),a.copyRO(),IC(-1 << c1));}} else if (def.operator() == INT_AND) {int c1=getIntValue(Binary.getVal2(def));if ((c1 << c2) == (-1 << c2)) {return Binary.create(INT_SHL,y.copyRO(),a.copyRO(),IC(c2));}} else if ((def.operator() == INT_OR) || (def.operator() == INT_XOR)) {int c1=getIntValue(Binary.getVal2(def));if ((c1 << c2) == 0) {return Binary.create(INT_SHL,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case REF_SHL_opcode:{if (FOLD_REFS && FOLD_SHIFTLS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == REF_SHL) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(REF_SHL,y.copyRO(),a.copyRO(),IC(c1 + c2));} else if ((def.operator() == REF_SHR) || (def.operator() == REF_USHR)) {int c1=getIntValue(Binary.getVal2(def));if (c1 == c2) {return Binary.create(REF_AND,y.copyRO(),a.copyRO(),AC(Word.zero().minus(Word.one()).lsh(c1).toAddress()));}} else if (def.operator() == REF_AND) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().lsh(c2).EQ(Word.fromIntSignExtend(-1).lsh(c2))) {return Binary.create(REF_SHL,y.copyRO(),a.copyRO(),IC(c2));}} else if ((def.operator() == REF_OR) || (def.operator() == REF_XOR)) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().lsh(c2).EQ(Word.zero())) {return Binary.create(REF_SHL,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case LONG_SHL_opcode:{if (FOLD_LONGS && FOLD_SHIFTLS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == LONG_SHL) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(LONG_SHL,y.copyRO(),a.copyRO(),IC(c1 + c2));} else if ((def.operator() == LONG_SHR) || (def.operator() == LONG_USHR)) {int c1=getIntValue(Binary.getVal2(def));if (c1 == c2) {return Binary.create(LONG_AND,y.copyRO(),a.copyRO(),LC(-1L << c1));}} else if (def.operator() == LONG_AND) {long c1=getLongValue(Binary.getVal2(def));if ((c1 << c2) == (-1L << c2)) {return Binary.create(LONG_SHL,y.copyRO(),a.copyRO(),IC(c2));}} else if ((def.operator() == LONG_OR) || (def.operator() == LONG_XOR)) {long c1=getLongValue(Binary.getVal2(def));if ((c1 << c2) == 0L) {return Binary.create(LONG_SHL,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case INT_SHR_opcode:{if (FOLD_INTS && FOLD_SHIFTRS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == INT_SHR) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_SHR,y.copyRO(),a.copyRO(),IC(c1 + c2));} else if (def.operator() == INT_SHL) {int c1=getIntValue(Binary.getVal2(def));if (c1 == c2) {if (c1 == 24) {return Unary.create(INT_2BYTE,y.copyRO(),a.copyRO());} else if (c1 == 16) {return Unary.create(INT_2SHORT,y.copyRO(),a.copyRO());}}} else if (def.operator() == INT_AND) {int c1=getIntValue(Binary.getVal2(def));if ((c1 >> c2) == -1) {return Binary.create(INT_SHR,y.copyRO(),a.copyRO(),IC(c2));}} else if ((def.operator() == INT_OR) || (def.operator() == INT_XOR)) {int c1=getIntValue(Binary.getVal2(def));if ((c1 >>> c2) == 0) {return Binary.create(INT_SHR,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case REF_SHR_opcode:{if (FOLD_REFS && FOLD_SHIFTRS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == REF_SHR) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(REF_SHR,y.copyRO(),a.copyRO(),IC(c1 + c2));} else if (def.operator() == REF_AND) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().rsha(c2).EQ(Word.zero().minus(Word.one()))) {return Binary.create(REF_SHR,y.copyRO(),a.copyRO(),IC(c2));}} else if ((def.operator() == REF_OR) || (def.operator() == REF_XOR)) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().rshl(c2).EQ(Word.zero())) {return Binary.create(REF_SHR,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case LONG_SHR_opcode:{if (FOLD_LONGS && FOLD_SHIFTRS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == LONG_SHR) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(LONG_SHR,y.copyRO(),a.copyRO(),IC(c1 + c2));} else if (def.operator() == LONG_AND) {long c1=getLongValue(Binary.getVal2(def));if ((c1 >> c2) == -1L) {return Binary.create(LONG_SHR,y.copyRO(),a.copyRO(),IC(c2));}} else if ((def.operator() == LONG_OR) || (def.operator() == LONG_XOR)) {long c1=getLongValue(Binary.getVal2(def));if ((c1 >>> c2) == 0L) {return Binary.create(LONG_SHR,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case INT_USHR_opcode:{if (FOLD_INTS && FOLD_SHIFTRS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == INT_USHR) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_USHR,y.copyRO(),a.copyRO(),IC(c1 + c2));} else if (def.operator() == INT_SHL) {int c1=getIntValue(Binary.getVal2(def));if (c1 == c2) {return Binary.create(INT_AND,y.copyRO(),a.copyRO(),IC(-1 >>> c1));}} else if (def.operator() == INT_AND) {int c1=getIntValue(Binary.getVal2(def));if ((c1 >> c2) == -1L) {return Binary.create(INT_USHR,y.copyRO(),a.copyRO(),IC(c2));}} else if ((def.operator() == INT_OR) || (def.operator() == INT_XOR)) {int c1=getIntValue(Binary.getVal2(def));if ((c1 >>> c2) == 0) {return Binary.create(INT_USHR,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case REF_USHR_opcode:{if (FOLD_REFS && FOLD_SHIFTRS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == REF_USHR) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(REF_USHR,y.copyRO(),a.copyRO(),IC(c1 + c2));} else if (def.operator() == REF_SHL) {int c1=getIntValue(Binary.getVal2(def));if (c1 == c2) {return Binary.create(REF_AND,y.copyRO(),a.copyRO(),AC(Word.zero().minus(Word.one()).rshl(c1).toAddress()));}} else if (def.operator() == REF_AND) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().rsha(c2).EQ(Word.zero().minus(Word.one()))) {return Binary.create(REF_USHR,y.copyRO(),a.copyRO(),IC(c2));}} else if (false) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().rshl(c2).EQ(Word.zero())) {return Binary.create(REF_USHR,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case LONG_USHR_opcode:{if (FOLD_LONGS && FOLD_SHIFTRS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == LONG_USHR) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(LONG_USHR,y.copyRO(),a.copyRO(),IC(c1 + c2));} else if (def.operator() == LONG_SHL) {int c1=getIntValue(Binary.getVal2(def));if (c1 == c2) {return Binary.create(LONG_AND,y.copyRO(),a.copyRO(),LC(-1L >>> c1));}} else if (def.operator() == LONG_AND) {long c1=getLongValue(Binary.getVal2(def));if ((c1 >> c2) == -1L) {return Binary.create(LONG_USHR,y.copyRO(),a.copyRO(),IC(c2));}} else if ((def.operator() == LONG_OR) || (def.operator() == LONG_XOR)) {long c1=getLongValue(Binary.getVal2(def));if ((c1 >>> c2) == 0L) {return Binary.create(LONG_USHR,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case INT_AND_opcode:{if (FOLD_INTS && FOLD_ANDS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == INT_AND) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_AND,y.copyRO(),a.copyRO(),IC(c1 & c2));} else if (def.operator() == INT_OR) {int c1=getIntValue(Binary.getVal2(def));if ((c1 & c2) == 0) {return Binary.create(INT_AND,y.copyRO(),a.copyRO(),IC(c2));}} else if (def.operator() == INT_XOR) {int c1=getIntValue(Binary.getVal2(def));if ((c1 & c2) == 0) {return Binary.create(INT_AND,y.copyRO(),a.copyRO(),IC(c2));}} else if (def.operator() == INT_SHR) {int c1=getIntValue(Binary.getVal2(def));if ((-1 >>> c1) == c2) {return Binary.create(INT_USHR,y.copyRO(),a.copyRO(),IC(c1));}} else if (def.operator() == INT_SHL) {int c1=getIntValue(Binary.getVal2(def));if (((-1 << c1) & c2) == (-1 << c1)) {return Binary.create(INT_SHL,y.copyRO(),a.copyRO(),IC(c1));}} else if (def.operator() == INT_USHR) {int c1=getIntValue(Binary.getVal2(def));if (((-1 >>> c1) & c2) == (-1 >>> c1)) {return Binary.create(INT_USHR,y.copyRO(),a.copyRO(),IC(c1));}}}return null;}case REF_AND_opcode:{if (FOLD_REFS && FOLD_ANDS) {Address c2=getAddressValue(Binary.getVal2(s));if (def.operator() == REF_AND) {Address c1=getAddressValue(Binary.getVal2(def));return Binary.create(REF_AND,y.copyRO(),a.copyRO(),AC(c1.toWord().and(c2.toWord()).toAddress()));} else if (def.operator() == REF_OR) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().and(c2.toWord()).EQ(Word.zero())) {return Binary.create(REF_AND,y.copyRO(),a.copyRO(),AC(c2));}} else if (def.operator() == REF_XOR) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().and(c2.toWord()).EQ(Word.zero())) {return Binary.create(REF_AND,y.copyRO(),a.copyRO(),AC(c2));}} else if (def.operator() == REF_SHR) {int c1=getIntValue(Binary.getVal2(def));if (Word.zero().minus(Word.one()).rshl(c1).toAddress().EQ(c2)) {return Binary.create(REF_USHR,y.copyRO(),a.copyRO(),IC(c1));}} else if (def.operator() == REF_SHL) {int c1=getIntValue(Binary.getVal2(def));if (Word.zero().minus(Word.one()).lsh(c1).and(c2.toWord()).EQ(Word.zero().minus(Word.one()).lsh(c1))) {return Binary.create(REF_SHL,y.copyRO(),a.copyRO(),IC(c1));}} else if (def.operator() == REF_USHR) {int c1=getIntValue(Binary.getVal2(def));if (Word.zero().minus(Word.one()).rshl(c1).and(c2.toWord()).EQ(Word.zero().minus(Word.one()).rshl(c1))) {return Binary.create(REF_USHR,y.copyRO(),a.copyRO(),IC(c1));}}}return null;}case LONG_AND_opcode:{if (FOLD_LONGS && FOLD_ANDS) {long c2=getLongValue(Binary.getVal2(s));if (def.operator() == LONG_AND) {long c1=getLongValue(Binary.getVal2(def));return Binary.create(LONG_AND,y.copyRO(),a.copyRO(),LC(c1 & c2));} else if (def.operator() == LONG_OR) {long c1=getLongValue(Binary.getVal2(def));if ((c1 & c2) == 0) {return Binary.create(LONG_AND,y.copyRO(),a.copyRO(),LC(c2));}} else if (def.operator() == LONG_XOR) {long c1=getLongValue(Binary.getVal2(def));if ((c1 & c2) == 0) {return Binary.create(LONG_AND,y.copyRO(),a.copyRO(),LC(c2));}} else if (def.operator() == LONG_SHR) {int c1=getIntValue(Binary.getVal2(def));if ((-1L >>> c1) == c2) {return Binary.create(LONG_USHR,y.copyRO(),a.copyRO(),IC(c1));}} else if (def.operator() == LONG_SHL) {int c1=getIntValue(Binary.getVal2(def));if (((-1L << c1) & c2) == (-1L << c1)) {return Binary.create(LONG_SHL,y.copyRO(),a.copyRO(),IC(c1));}} else if (def.operator() == LONG_USHR) {int c1=getIntValue(Binary.getVal2(def));if (((-1L >>> c1) & c2) == (-1L >>> c1)) {return Binary.create(LONG_USHR,y.copyRO(),a.copyRO(),IC(c1));}}}return null;}case INT_OR_opcode:{if (FOLD_INTS && FOLD_ORS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == INT_OR) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_OR,y.copyRO(),a.copyRO(),IC(c1 | c2));} else if (def.operator() == INT_AND) {int c1=getIntValue(Binary.getVal2(def));if ((~c1 | c2) == c2) {return Binary.create(INT_OR,y.copyRO(),a.copyRO(),IC(c2));}} else if (def.operator() == INT_XOR) {int c1=getIntValue(Binary.getVal2(def));if ((c1 | c2) == c2) {return Binary.create(INT_OR,y.copyRO(),a.copyRO(),IC(c2));}}}return null;}case REF_OR_opcode:{if (FOLD_REFS && FOLD_ORS) {Address c2=getAddressValue(Binary.getVal2(s));if (def.operator() == REF_OR) {Address c1=getAddressValue(Binary.getVal2(def));return Binary.create(REF_OR,y.copyRO(),a.copyRO(),AC(c1.toWord().or(c2.toWord()).toAddress()));} else if (def.operator() == REF_AND) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().not().or(c2.toWord()).EQ(c2.toWord())) {return Binary.create(REF_OR,y.copyRO(),a.copyRO(),AC(c2));}} else if (def.operator() == REF_XOR) {Address c1=getAddressValue(Binary.getVal2(def));if (c1.toWord().or(c2.toWord()).EQ(c2.toWord())) {return Binary.create(REF_OR,y.copyRO(),a.copyRO(),AC(c2));}}}return null;}case LONG_OR_opcode:{if (FOLD_LONGS && FOLD_ORS) {long c2=getLongValue(Binary.getVal2(s));if (def.operator() == LONG_OR) {long c1=getLongValue(Binary.getVal2(def));return Binary.create(LONG_OR,y.copyRO(),a.copyRO(),LC(c1 | c2));} else if (def.operator() == LONG_AND) {long c1=getLongValue(Binary.getVal2(def));if ((~c1 | c2) == c2) {return Binary.create(LONG_OR,y.copyRO(),a.copyRO(),LC(c2));}} else if (def.operator() == LONG_XOR) {long c1=getLongValue(Binary.getVal2(def));if ((c1 | c2) == c2) {return Binary.create(LONG_OR,y.copyRO(),a.copyRO(),LC(c2));}}}return null;}case INT_XOR_opcode:{if (FOLD_INTS && FOLD_XORS) {int c2=getIntValue(Binary.getVal2(s));if (def.operator() == INT_XOR) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_XOR,y.copyRO(),a.copyRO(),IC(c1 ^ c2));} else if (def.operator() == INT_NOT) {return Binary.create(INT_XOR,y.copyRO(),a.copyRO(),IC(~c2));} else if (def.operator() == BOOLEAN_NOT) {return Binary.create(INT_XOR,y.copyRO(),a.copyRO(),IC(c2 ^ 1));}}return null;}case REF_XOR_opcode:{if (FOLD_REFS && FOLD_XORS) {Address c2=getAddressValue(Binary.getVal2(s));if (def.operator() == REF_XOR) {Address c1=getAddressValue(Binary.getVal2(def));return Binary.create(REF_XOR,y.copyRO(),a.copyRO(),AC(c1.toWord().xor(c2.toWord()).toAddress()));} else if (def.operator() == REF_NOT) {return Binary.create(REF_XOR,y.copyRO(),a.copyRO(),AC(c2.toWord().not().toAddress()));}}return null;}case LONG_XOR_opcode:{if (FOLD_LONGS && FOLD_XORS) {long c2=getLongValue(Binary.getVal2(s));if (def.operator() == LONG_XOR) {long c1=getLongValue(Binary.getVal2(def));return Binary.create(LONG_XOR,y.copyRO(),a.copyRO(),LC(c1 ^ c2));} else if (def.operator() == LONG_NOT) {return Binary.create(LONG_XOR,y.copyRO(),a.copyRO(),LC(~c2));}}return null;}case LONG_CMP_opcode:{if (FOLD_LONGS && FOLD_CMPS) {long c2=getLongValue(Binary.getVal2(s));if (def.operator() == LONG_NEG) {return Binary.create(LONG_CMP,y.copyRO(),LC(-c2),a.copyRO());}}return null;}case FLOAT_CMPL_opcode:case FLOAT_CMPG_opcode:{if (FOLD_FLOATS && FOLD_CMPS) {float c2=getFloatValue(Binary.getVal2(s));if (def.operator() == FLOAT_ADD) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(s.operator(),y.copyRO(),a.copyRO(),FC(c2 - c1));} else if (def.operator() == FLOAT_SUB) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(s.operator(),y.copyRO(),a.copyRO(),FC(c1 + c2));} else if (def.operator() == FLOAT_NEG) {return Binary.create(s.operator(),y.copyRO(),FC(-c2),a.copyRO());}}return null;}case DOUBLE_CMPL_opcode:case DOUBLE_CMPG_opcode:{if (FOLD_DOUBLES && FOLD_CMPS) {double c2=getDoubleValue(Binary.getVal2(s));if (def.operator() == DOUBLE_ADD) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(s.operator(),y.copyRO(),a.copyRO(),DC(c2 - c1));} else if (def.operator() == DOUBLE_SUB) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(s.operator(),y.copyRO(),a.copyRO(),DC(c1 + c2));} else if (def.operator() == DOUBLE_NEG) {return Binary.create(s.operator(),y.copyRO(),DC(-c2),a.copyRO());}}return null;}case BOOLEAN_CMP_INT_opcode:{if (FOLD_INTS && FOLD_CMPS) {int c2=getIntValue(BooleanCmp.getVal2(s));ConditionOperand cond=(ConditionOperand)BooleanCmp.getCond(s).copy();BranchProfileOperand prof=(BranchProfileOperand)BooleanCmp.getBranchProfile(s).copy();if (cond.isEQUAL() || cond.isNOT_EQUAL()) {if (def.operator() == INT_ADD) {int c1=getIntValue(Binary.getVal2(def));return BooleanCmp.create(BOOLEAN_CMP_INT,y.copyRO(),a.copyRO(),IC(c2 - c1),cond,prof);} else if (def.operator() == INT_SUB) {int c1=getIntValue(Binary.getVal2(def));return BooleanCmp.create(BOOLEAN_CMP_INT,y.copyRO(),a.copyRO(),IC(c1 + c2),cond,prof);} else if (def.operator() == INT_NEG) {return BooleanCmp.create(BOOLEAN_CMP_INT,y.copyRO(),a.copyRO(),IC(-c2),cond.flipOperands(),prof);} else if (def.operator() == BOOLEAN_CMP_INT) {int c1=getIntValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return BooleanCmp.create(BOOLEAN_CMP_INT,y.copyRO(),a.copyRO(),IC(c1),cond2,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return BooleanCmp.create(BOOLEAN_CMP_INT,y.copyRO(),a.copyRO(),IC(c1),cond2.flipCode(),prof);}} else if (def.operator() == BOOLEAN_CMP_LONG) {long c1=getLongValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c1),cond2,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c1),cond2.flipCode(),prof);}} else if (def.operator() == BOOLEAN_CMP_ADDR) {Address c1=getAddressValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return BooleanCmp.create(BOOLEAN_CMP_ADDR,y.copyRO(),a.copyRO(),AC(c1),cond2,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return BooleanCmp.create(BOOLEAN_CMP_ADDR,y.copyRO(),a.copyRO(),AC(c1),cond2.flipCode(),prof);}} else if (def.operator() == BOOLEAN_CMP_FLOAT) {float c1=getFloatValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return BooleanCmp.create(BOOLEAN_CMP_FLOAT,y.copyRO(),a.copyRO(),FC(c1),cond2,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return BooleanCmp.create(BOOLEAN_CMP_FLOAT,y.copyRO(),a.copyRO(),FC(c1),cond2.flipCode(),prof);}} else if (def.operator() == BOOLEAN_CMP_DOUBLE) {double c1=getDoubleValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return BooleanCmp.create(BOOLEAN_CMP_DOUBLE,y.copyRO(),a.copyRO(),DC(c1),cond2,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return BooleanCmp.create(BOOLEAN_CMP_DOUBLE,y.copyRO(),a.copyRO(),DC(c1),cond2.flipCode(),prof);}} else if (def.operator() == LONG_CMP) {long c1=getLongValue(Binary.getVal2(def));if (cond.isEQUAL() && c2 == 0) {return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.EQUAL(),prof);} else if (cond.isNOT_EQUAL() && c2 == 0) {return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.NOT_EQUAL(),prof);} else if ((cond.isEQUAL() && c2 == 1) || (cond.isGREATER() && c2 == 0)) {return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.GREATER(),prof);} else if (cond.isGREATER_EQUAL() && c2 == 0) {return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.GREATER_EQUAL(),prof);} else if ((cond.isEQUAL() && c2 == -1) || (cond.isLESS() && c2 == 0)) {return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.LESS(),prof);} else if (cond.isLESS_EQUAL() && c2 == 0) {return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.LESS_EQUAL(),prof);}}}}return null;}case BOOLEAN_CMP_LONG_opcode:{if (FOLD_LONGS && FOLD_CMPS) {long c2=getLongValue(BooleanCmp.getVal2(s));ConditionOperand cond=(ConditionOperand)BooleanCmp.getCond(s).copy();BranchProfileOperand prof=(BranchProfileOperand)BooleanCmp.getBranchProfile(s).copy();if (cond.isEQUAL() || cond.isNOT_EQUAL()) {if (def.operator() == LONG_ADD) {long c1=getLongValue(Binary.getVal2(def));return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c2 - c1),cond,prof);} else if (def.operator() == LONG_SUB) {long c1=getLongValue(Binary.getVal2(def));return BooleanCmp.create(BOOLEAN_CMP_LONG,y.copyRO(),a.copyRO(),LC(c1 + c2),cond,prof);} else if (def.operator() == LONG_NEG) {return BooleanCmp.create(BOOLEAN_CMP_INT,y.copyRO(),a.copyRO(),LC(-c2),cond.flipOperands(),prof);}}}return null;}case BOOLEAN_CMP_ADDR_opcode:{if (FOLD_REFS && FOLD_CMPS) {Address c2=getAddressValue(BooleanCmp.getVal2(s));ConditionOperand cond=(ConditionOperand)BooleanCmp.getCond(s).copy();BranchProfileOperand prof=(BranchProfileOperand)BooleanCmp.getBranchProfile(s).copy();if (cond.isEQUAL() || cond.isNOT_EQUAL()) {if (def.operator() == REF_ADD) {Address c1=getAddressValue(Binary.getVal2(def));return BooleanCmp.create(BOOLEAN_CMP_ADDR,y.copyRO(),a.copyRO(),AC(c2.toWord().minus(c1.toWord()).toAddress()),cond,prof);} else if (def.operator() == REF_SUB) {Address c1=getAddressValue(Binary.getVal2(def));return BooleanCmp.create(BOOLEAN_CMP_ADDR,y.copyRO(),a.copyRO(),AC(c1.toWord().plus(c2.toWord()).toAddress()),cond,prof);} else if (def.operator() == REF_NEG) {return BooleanCmp.create(BOOLEAN_CMP_ADDR,y.copyRO(),a.copyRO(),AC(Word.zero().minus(c2.toWord()).toAddress()),cond.flipOperands(),prof);}}}return null;}case INT_IFCMP_opcode:{if (FOLD_INTS && FOLD_IFCMPS) {int c2=getIntValue(IfCmp.getVal2(s));ConditionOperand cond=(ConditionOperand)IfCmp.getCond(s).copy();BranchOperand target=(BranchOperand)IfCmp.getTarget(s).copy();BranchProfileOperand prof=(BranchProfileOperand)IfCmp.getBranchProfile(s).copy();if (cond.isEQUAL() || cond.isNOT_EQUAL()) {if (def.operator() == INT_ADD) {int c1=getIntValue(Binary.getVal2(def));return IfCmp.create(INT_IFCMP,y.copyRO(),a.copyRO(),IC(c2 - c1),cond,target,prof);} else if (def.operator() == INT_SUB) {int c1=getIntValue(Binary.getVal2(def));return IfCmp.create(INT_IFCMP,y.copyRO(),a.copyRO(),IC(c1 + c2),cond,target,prof);} else if (def.operator() == INT_NEG) {return IfCmp.create(INT_IFCMP,y.copyRO(),a.copyRO(),IC(-c2),cond.flipOperands(),target,prof);} else if (def.operator() == BOOLEAN_CMP_INT) {int c1=getIntValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return IfCmp.create(INT_IFCMP,y.copyRO(),a.copyRO(),IC(c1),cond2,target,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return IfCmp.create(INT_IFCMP,y.copyRO(),a.copyRO(),IC(c1),cond2.flipCode(),target,prof);}} else if (def.operator() == BOOLEAN_CMP_LONG) {long c1=getLongValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c1),cond2,target,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c1),cond2.flipCode(),target,prof);}} else if (def.operator() == BOOLEAN_CMP_ADDR) {Address c1=getAddressValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return IfCmp.create(REF_IFCMP,y.copyRO(),a.copyRO(),AC(c1),cond2,target,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return IfCmp.create(REF_IFCMP,y.copyRO(),a.copyRO(),AC(c1),cond2.flipCode(),target,prof);}} else if (def.operator() == BOOLEAN_CMP_FLOAT) {float c1=getFloatValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return IfCmp.create(FLOAT_IFCMP,y.copyRO(),a.copyRO(),FC(c1),cond2,target,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return IfCmp.create(FLOAT_IFCMP,y.copyRO(),a.copyRO(),FC(c1),cond2.flipCode(),target,prof);}} else if (def.operator() == BOOLEAN_CMP_DOUBLE) {double c1=getDoubleValue(BooleanCmp.getVal2(def));ConditionOperand cond2=BooleanCmp.getCond(def).copy().asCondition();if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return IfCmp.create(DOUBLE_IFCMP,y.copyRO(),a.copyRO(),DC(c1),cond2,target,prof);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return IfCmp.create(DOUBLE_IFCMP,y.copyRO(),a.copyRO(),DC(c1),cond2.flipCode(),target,prof);}} else if (def.operator() == LONG_CMP) {long c1=getLongValue(Binary.getVal2(def));if (cond.isEQUAL() && c2 == 0) {return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.EQUAL(),target,prof);} else if (cond.isNOT_EQUAL() && c2 == 0) {return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.NOT_EQUAL(),target,prof);} else if ((cond.isEQUAL() && c2 == 1) || (cond.isGREATER() && c2 == 0)) {return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.GREATER(),target,prof);} else if (cond.isGREATER_EQUAL() && c2 == 0) {return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.GREATER_EQUAL(),target,prof);} else if ((cond.isEQUAL() && c2 == -1) || (cond.isLESS() && c2 == 0)) {return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.LESS(),target,prof);} else if (cond.isLESS_EQUAL() && c2 == 0) {return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.LESS_EQUAL(),target,prof);}}}}return null;}case LONG_IFCMP_opcode:{if (FOLD_LONGS && FOLD_IFCMPS) {long c2=getLongValue(IfCmp.getVal2(s));ConditionOperand cond=(ConditionOperand)IfCmp.getCond(s).copy();BranchOperand target=(BranchOperand)IfCmp.getTarget(s).copy();BranchProfileOperand prof=(BranchProfileOperand)IfCmp.getBranchProfile(s).copy();if (cond.isEQUAL() || cond.isNOT_EQUAL()) {if (def.operator() == LONG_ADD) {long c1=getLongValue(Binary.getVal2(def));return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c2 - c1),cond,target,prof);} else if (def.operator() == LONG_SUB) {long c1=getLongValue(Binary.getVal2(def));return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(c1 + c2),cond,target,prof);} else if (def.operator() == LONG_NEG) {return IfCmp.create(LONG_IFCMP,y.copyRO(),a.copyRO(),LC(-c2),cond.flipOperands(),target,prof);}}}return null;}case FLOAT_IFCMP_opcode:{if (FOLD_FLOATS && FOLD_IFCMPS) {float c2=getFloatValue(IfCmp.getVal2(s));ConditionOperand cond=(ConditionOperand)IfCmp.getCond(s).copy();BranchOperand target=(BranchOperand)IfCmp.getTarget(s).copy();BranchProfileOperand prof=(BranchProfileOperand)IfCmp.getBranchProfile(s).copy();if (def.operator() == FLOAT_ADD) {float c1=getFloatValue(Binary.getVal2(def));return IfCmp.create(FLOAT_IFCMP,y.copyRO(),a.copyRO(),FC(c2 - c1),cond,target,prof);} else if (def.operator() == FLOAT_SUB) {float c1=getFloatValue(Binary.getVal2(def));return IfCmp.create(FLOAT_IFCMP,y.copyRO(),a.copyRO(),FC(c1 + c2),cond,target,prof);} else if (def.operator() == FLOAT_NEG) {return IfCmp.create(FLOAT_IFCMP,y.copyRO(),a.copyRO(),FC(-c2),cond.flipOperands(),target,prof);}}return null;}case DOUBLE_IFCMP_opcode:{if (FOLD_DOUBLES && FOLD_IFCMPS) {double c2=getDoubleValue(IfCmp.getVal2(s));ConditionOperand cond=(ConditionOperand)IfCmp.getCond(s).copy();BranchOperand target=(BranchOperand)IfCmp.getTarget(s).copy();BranchProfileOperand prof=(BranchProfileOperand)IfCmp.getBranchProfile(s).copy();if (def.operator() == DOUBLE_ADD) {double c1=getDoubleValue(Binary.getVal2(def));return IfCmp.create(DOUBLE_IFCMP,y.copyRO(),a.copyRO(),DC(c2 - c1),cond,target,prof);} else if (def.operator() == DOUBLE_SUB) {double c1=getDoubleValue(Binary.getVal2(def));return IfCmp.create(DOUBLE_IFCMP,y.copyRO(),a.copyRO(),DC(c1 + c2),cond,target,prof);} else if (def.operator() == DOUBLE_NEG) {return IfCmp.create(DOUBLE_IFCMP,y.copyRO(),a.copyRO(),DC(-c2),cond.flipOperands(),target,prof);}}return null;}case REF_IFCMP_opcode:{if (FOLD_REFS && FOLD_IFCMPS) {Address c2=getAddressValue(IfCmp.getVal2(s));ConditionOperand cond=(ConditionOperand)IfCmp.getCond(s).copy();BranchOperand target=(BranchOperand)IfCmp.getTarget(s).copy();BranchProfileOperand prof=(BranchProfileOperand)IfCmp.getBranchProfile(s).copy();if (cond.isEQUAL() || cond.isNOT_EQUAL()) {if ((def.operator() == NEW || def.operator() == NEWARRAY) && c2.EQ(Address.zero())) {return IfCmp.create(REF_IFCMP,y.copyRO(),AC(Address.zero()),AC(Address.zero()),cond.flipCode(),target,prof);} else if (def.operator() == REF_ADD) {Address c1=getAddressValue(Binary.getVal2(def));return IfCmp.create(REF_IFCMP,y.copyRO(),a.copyRO(),AC(c2.toWord().minus(c1.toWord()).toAddress()),cond,target,prof);} else if (def.operator() == REF_SUB) {Address c1=getAddressValue(Binary.getVal2(def));return IfCmp.create(REF_IFCMP,y.copyRO(),a.copyRO(),AC(c1.toWord().plus(c2.toWord()).toAddress()),cond,target,prof);} else if (def.operator() == REF_NEG) {return IfCmp.create(REF_IFCMP,y.copyRO(),a.copyRO(),AC(Word.zero().minus(c2.toWord()).toAddress()),cond.flipOperands(),target,prof);}}}return null;}case INT_IFCMP2_opcode:{if (FOLD_INTS && FOLD_IFCMPS) {int c2=getIntValue(IfCmp2.getVal2(s));ConditionOperand cond1=(ConditionOperand)IfCmp2.getCond1(s).copy();ConditionOperand cond2=(ConditionOperand)IfCmp2.getCond2(s).copy();BranchOperand target1=(BranchOperand)IfCmp2.getTarget1(s).copy();BranchOperand target2=(BranchOperand)IfCmp2.getTarget2(s).copy();BranchProfileOperand prof1=(BranchProfileOperand)IfCmp2.getBranchProfile1(s).copy();BranchProfileOperand prof2=(BranchProfileOperand)IfCmp2.getBranchProfile2(s).copy();if ((cond1.isEQUAL() || cond1.isNOT_EQUAL()) && (cond2.isEQUAL() || cond2.isNOT_EQUAL())) {if (def.operator() == INT_ADD) {int c1=getIntValue(Binary.getVal2(def));return IfCmp2.create(INT_IFCMP2,y.copyRO(),a.copyRO(),IC(c2 - c1),cond1,target1,prof1,cond2,target2,prof2);} else if (def.operator() == INT_SUB) {int c1=getIntValue(Binary.getVal2(def));return IfCmp2.create(INT_IFCMP2,y.copyRO(),a.copyRO(),IC(c1 + c2),cond1,target1,prof1,cond2,target2,prof2);} else if (def.operator() == INT_NEG) {return IfCmp2.create(INT_IFCMP2,y.copyRO(),a.copyRO(),IC(-c2),cond1.flipOperands(),target1,prof1,cond2.flipOperands(),target2,prof2);}}}return null;}case INT_COND_MOVE_opcode:case LONG_COND_MOVE_opcode:case REF_COND_MOVE_opcode:case FLOAT_COND_MOVE_opcode:case DOUBLE_COND_MOVE_opcode:case GUARD_COND_MOVE_opcode:{if (FOLD_INTS && FOLD_CONDMOVES) {Operand trueValue=CondMove.getTrueValue(s);Operand falseValue=CondMove.getFalseValue(s);ConditionOperand cond=(ConditionOperand)CondMove.getCond(s).copy();boolean isEqualityTest=cond.isEQUAL() || cond.isNOT_EQUAL();switch (def.getOpcode()) {case INT_ADD_opcode:if (isEqualityTest) {int c1=getIntValue(Binary.getVal2(def));int c2=getIntValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),IC(c2 - c1),cond,trueValue,falseValue);}break;case LONG_ADD_opcode:if (isEqualityTest) {long c1=getLongValue(Binary.getVal2(def));long c2=getLongValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c2 - c1),cond,trueValue,falseValue);}break;case REF_ADD_opcode:if (isEqualityTest) {Address c1=getAddressValue(Binary.getVal2(def));Address c2=getAddressValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),AC(c2.toWord().minus(c1.toWord()).toAddress()),cond,trueValue,falseValue);}break;case FLOAT_ADD_opcode:{float c1=getFloatValue(Binary.getVal2(def));float c2=getFloatValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),FC(c2 - c1),cond,trueValue,falseValue);}case DOUBLE_ADD_opcode:{double c1=getDoubleValue(Binary.getVal2(def));double c2=getDoubleValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),DC(c2 - c1),cond,trueValue,falseValue);}case INT_SUB_opcode:if (isEqualityTest) {int c1=getIntValue(Binary.getVal2(def));int c2=getIntValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),IC(c1 + c2),cond,trueValue,falseValue);}break;case LONG_SUB_opcode:if (isEqualityTest) {long c1=getLongValue(Binary.getVal2(def));long c2=getLongValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c1 + c2),cond,trueValue,falseValue);}break;case REF_SUB_opcode:if (isEqualityTest) {Address c1=getAddressValue(Binary.getVal2(def));Address c2=getAddressValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),AC(c1.toWord().plus(c2.toWord()).toAddress()),cond,trueValue,falseValue);}break;case FLOAT_SUB_opcode:{float c1=getFloatValue(Binary.getVal2(def));float c2=getFloatValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),FC(c1 + c2),cond,trueValue,falseValue);}case DOUBLE_SUB_opcode:{double c1=getDoubleValue(Binary.getVal2(def));double c2=getDoubleValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),DC(c1 + c2),cond,trueValue,falseValue);}case INT_NEG_opcode:if (isEqualityTest) {int c2=getIntValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),IC(-c2),cond.flipOperands(),trueValue,falseValue);}break;case LONG_NEG_opcode:if (isEqualityTest) {long c2=getLongValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(-c2),cond.flipOperands(),trueValue,falseValue);}break;case REF_NEG_opcode:if (isEqualityTest) {Address c2=getAddressValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),AC(Word.zero().minus(c2.toWord()).toAddress()),cond.flipOperands(),trueValue,falseValue);}break;case FLOAT_NEG_opcode:{float c2=getFloatValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),FC(-c2),cond.flipOperands(),trueValue,falseValue);}case DOUBLE_NEG_opcode:{double c2=getDoubleValue(CondMove.getVal2(s));return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),DC(-c2),cond.flipOperands(),trueValue,falseValue);}case BOOLEAN_CMP_INT_opcode:{int c1=getIntValue(BooleanCmp.getVal2(def));int c2=getIntValue(CondMove.getVal2(s));if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),IC(c1),BooleanCmp.getCond(def).copy().asCondition(),trueValue,falseValue);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),IC(c1),BooleanCmp.getCond(def).copy().asCondition().flipCode(),trueValue,falseValue);}break;}case BOOLEAN_CMP_ADDR_opcode:{Address c1=getAddressValue(BooleanCmp.getVal2(def));int c2=getIntValue(CondMove.getVal2(s));if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),AC(c1),BooleanCmp.getCond(def).copy().asCondition(),trueValue,falseValue);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),AC(c1),BooleanCmp.getCond(def).flipCode(),trueValue,falseValue);}break;}case BOOLEAN_CMP_LONG_opcode:{long c1=getLongValue(BooleanCmp.getVal2(def));int c2=getIntValue(CondMove.getVal2(s));if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c1),BooleanCmp.getCond(def).copy().asCondition(),trueValue,falseValue);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c1),BooleanCmp.getCond(def).copy().asCondition().flipCode(),trueValue,falseValue);} else {return null;}}case BOOLEAN_CMP_DOUBLE_opcode:{double c1=getDoubleValue(BooleanCmp.getVal2(def));int c2=getIntValue(CondMove.getVal2(s));if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),DC(c1),BooleanCmp.getCond(def).copy().asCondition(),trueValue,falseValue);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),DC(c1),BooleanCmp.getCond(def).copy().asCondition().flipCode(),trueValue,falseValue);}break;}case BOOLEAN_CMP_FLOAT_opcode:{float c1=getFloatValue(BooleanCmp.getVal2(def));int c2=getIntValue(CondMove.getVal2(s));if ((cond.isEQUAL() && c2 == 1) || (cond.isNOT_EQUAL() && c2 == 0)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),FC(c1),BooleanCmp.getCond(def).copy().asCondition(),trueValue,falseValue);} else if ((cond.isEQUAL() && c2 == 0) || (cond.isNOT_EQUAL() && c2 == 1)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),FC(c1),BooleanCmp.getCond(def).copy().asCondition().flipCode(),trueValue,falseValue);}break;}case LONG_CMP_opcode:{long c1=getLongValue(Binary.getVal2(def));int c2=getIntValue(CondMove.getVal2(s));if (cond.isEQUAL() && c2 == 0) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.EQUAL(),trueValue,falseValue);} else if (cond.isNOT_EQUAL() && c2 == 0) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.NOT_EQUAL(),trueValue,falseValue);} else if ((cond.isEQUAL() && c2 == 1) || (cond.isGREATER() && c2 == 0)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.GREATER(),trueValue,falseValue);} else if (cond.isGREATER_EQUAL() && c2 == 0) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.GREATER_EQUAL(),trueValue,falseValue);} else if ((cond.isEQUAL() && c2 == -1) || (cond.isLESS() && c2 == 0)) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.LESS(),trueValue,falseValue);} else if (cond.isLESS_EQUAL() && c2 == 0) {return CondMove.create(s.operator(),y.copyRO(),a.copyRO(),LC(c1),ConditionOperand.LESS_EQUAL(),trueValue,falseValue);}break;}default :}}return null;}case INT_NEG_opcode:{if (FOLD_INTS && FOLD_NEGS) {if (def.operator() == INT_NEG) {return Move.create(INT_MOVE,y.copyRO(),Unary.getVal(def).copy());} else if (def.operator() == INT_MUL) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_MUL,y.copyRO(),a.copyRO(),IC(-c1));} else if (def.operator() == INT_DIV) {int c1=getIntValue(GuardedBinary.getVal2(def));Operand guard=GuardedBinary.getGuard(def);return GuardedBinary.create(INT_DIV,y.copyRO(),a.copyRO(),IC(-c1),guard.copy());} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == INT_ADD)) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_SUB,y.copyRO(),IC(-c1),a.copyRO());} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == INT_SUB)) {int c1=getIntValue(Binary.getVal2(def));return Binary.create(INT_SUB,y.copyRO(),IC(c1),a.copyRO());}}return null;}case REF_NEG_opcode:{if (FOLD_REFS && FOLD_NEGS) {if (def.operator() == REF_NEG) {return Move.create(REF_MOVE,y.copyRO(),Unary.getVal(def).copy());} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == REF_ADD)) {Address c1=getAddressValue(Binary.getVal2(def));return Binary.create(REF_SUB,y.copyRO(),AC(Word.zero().minus(c1.toWord()).toAddress()),a.copyRO());} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == REF_SUB)) {Address c1=getAddressValue(Binary.getVal2(def));return Binary.create(REF_SUB,y.copyRO(),AC(c1),a.copyRO());}}return null;}case LONG_NEG_opcode:{if (FOLD_LONGS && FOLD_NEGS) {if (def.operator() == LONG_NEG) {return Move.create(LONG_MOVE,y.copyRO(),Unary.getVal(def).copy());} else if (def.operator() == LONG_MUL) {long c1=getLongValue(Binary.getVal2(def));return Binary.create(LONG_MUL,y.copyRO(),a.copyRO(),LC(-c1));} else if (def.operator() == LONG_DIV) {long c1=getLongValue(GuardedBinary.getVal2(def));Operand guard=GuardedBinary.getGuard(def);return GuardedBinary.create(LONG_DIV,y.copyRO(),a.copyRO(),LC(-c1),guard.copy());} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == LONG_ADD)) {long c1=getLongValue(Binary.getVal2(def));return Binary.create(LONG_SUB,y.copyRO(),LC(-c1),a.copyRO());} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == LONG_SUB)) {long c1=getLongValue(Binary.getVal2(def));return Binary.create(LONG_SUB,y.copyRO(),LC(c1),a.copyRO());}}return null;}case FLOAT_NEG_opcode:{if (FOLD_FLOATS && FOLD_NEGS) {if (def.operator() == FLOAT_NEG) {return Move.create(FLOAT_MOVE,y.copyRO(),Unary.getVal(def).copy());} else if (def.operator() == FLOAT_MUL) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(FLOAT_MUL,y.copyRO(),a.copyRO(),FC(-c1));} else if (def.operator() == FLOAT_DIV) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(FLOAT_DIV,y.copyRO(),a.copyRO(),FC(-c1));} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == FLOAT_ADD)) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(FLOAT_SUB,y.copyRO(),FC(-c1),a.copyRO());} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == FLOAT_SUB)) {float c1=getFloatValue(Binary.getVal2(def));return Binary.create(FLOAT_SUB,y.copyRO(),FC(c1),a.copyRO());}}return null;}case DOUBLE_NEG_opcode:{if (FOLD_DOUBLES && FOLD_NEGS) {if (def.operator() == DOUBLE_NEG) {return Move.create(DOUBLE_MOVE,y.copyRO(),Unary.getVal(def).copy());} else if (def.operator() == DOUBLE_MUL) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(DOUBLE_MUL,y.copyRO(),a.copyRO(),DC(-c1));} else if (def.operator() == DOUBLE_DIV) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(DOUBLE_DIV,y.copyRO(),a.copyRO(),DC(-c1));} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == DOUBLE_ADD)) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(DOUBLE_SUB,y.copyRO(),DC(-c1),a.copyRO());} else if (FOLD_CONSTANTS_TO_LHS && (def.operator() == DOUBLE_SUB)) {double c1=getDoubleValue(Binary.getVal2(def));return Binary.create(DOUBLE_SUB,y.copyRO(),DC(c1),a.copyRO());}}return null;}case BOOLEAN_NOT_opcode:{if (FOLD_INTS && FOLD_NOTS) {if (def.operator() == BOOLEAN_NOT) {return Move.create(INT_MOVE,y.copyRO(),Unary.getVal(def).copy());} else if (BooleanCmp.conforms(def)) {return BooleanCmp.create(def.operator(),y.copyRO(),BooleanCmp.getVal1(def).copy(),BooleanCmp.getVal2(def).copy(),((ConditionOperand)BooleanCmp.getCond(def).copy()).flipCode(),((BranchProfileOperand)BooleanCmp.getBranchProfile(def).copy()));}}return null;}case INT_NOT_opcode:{if (FOLD_INTS && FOLD_NOTS) {if (def.operator() == INT_NOT) {return Move.create(INT_MOVE,y.copyRO(),a.copy());}}return null;}case REF_NOT_opcode:{if (FOLD_REFS && FOLD_NOTS) {if (def.operator() == REF_NOT) {return Move.create(REF_MOVE,y.copyRO(),a.copy());}}return null;}case LONG_NOT_opcode:{if (FOLD_LONGS && FOLD_NOTS) {if (def.operator() == LONG_NOT) {return Move.create(LONG_MOVE,y.copyRO(),a.copy());}}return null;}case INT_2BYTE_opcode:{if (FOLD_INTS && FOLD_2CONVERSION) {if ((def.operator() == INT_2BYTE) || (def.operator() == INT_2SHORT)) {return Unary.create(INT_2BYTE,y.copyRO(),a.copy());} else if (def.operator() == INT_2USHORT) {return Binary.create(INT_AND,y.copyRO(),a.copy(),IC(0xFF));}}return null;}case INT_2SHORT_opcode:{if (FOLD_INTS && FOLD_2CONVERSION) {if (def.operator() == INT_2BYTE) {return Unary.create(INT_2BYTE,y.copyRO(),a.copy());} else if (def.operator() == INT_2SHORT) {return Unary.create(INT_2SHORT,y.copyRO(),a.copy());} else if (def.operator() == INT_2USHORT) {return Unary.create(INT_2USHORT,y.copyRO(),a.copy());}}return null;}case INT_2USHORT_opcode:{if (FOLD_INTS && FOLD_2CONVERSION) {if ((def.operator() == INT_2SHORT) || (def.operator() == INT_2USHORT)) {return Unary.create(INT_2USHORT,y.copyRO(),a.copy());}}return null;}case LONG_2INT_opcode:{if (FOLD_LONGS && FOLD_2CONVERSION) {if (def.operator() == INT_2LONG) {return Move.create(INT_MOVE,y.copyRO(),a.copy());}}return null;}case INT_2LONG_opcode:return null;case DOUBLE_2FLOAT_opcode:{if (FOLD_DOUBLES && FOLD_2CONVERSION) {if (def.operator() == FLOAT_2DOUBLE) {return Move.create(FLOAT_MOVE,y.copyRO(),a.copy());}}return null;}case FLOAT_2DOUBLE_opcode:return null;case INT_ZERO_CHECK_opcode:{if (FOLD_INTS && FOLD_CHECKS) {if (def.operator() == INT_NEG) {return ZeroCheck.create(INT_ZERO_CHECK,y.copyRO(),Unary.getVal(def).copy());}}return null;}case LONG_ZERO_CHECK_opcode:{if (FOLD_INTS && FOLD_CHECKS) {if (def.operator() == INT_NEG) {return ZeroCheck.create(INT_ZERO_CHECK,y.copyRO(),Unary.getVal(def).copy());}}return null;}case NEWARRAY_opcode:return null;case BOUNDS_CHECK_opcode:{if (FOLD_CHECKS) {if (def.operator() == NEWARRAY) {int c1=getIntValue(NewArray.getSize(def));int c2=getIntValue(BoundsCheck.getIndex(s));if (c2 >= 0 && c2 < c1) {return Move.create(GUARD_MOVE,y.copyRO(),BoundsCheck.getGuard(def).copy());}}}return null;}case NULL_CHECK_opcode:{if (FOLD_CHECKS) {if (def.operator() == NEWARRAY || def.operator() == NEW) {return Move.create(GUARD_MOVE,y.copyRO(),new TrueGuardOperand());}}return null;}case INSTANCEOF_opcode:{if (FOLD_CHECKS) {TypeReference newType;if (def.operator() == NEW) {newType=New.getType(def).getTypeRef();} else if (def.operator() == NEWARRAY) {newType=NewArray.getType(def).getTypeRef();} else {return null;}TypeReference instanceofType=InstanceOf.getType(s).getTypeRef();if (newType == instanceofType) {return Move.create(INT_MOVE,y.copyRO(),IC(1));} else {return Move.create(INT_MOVE,y.copyRO(),IC(RuntimeEntrypoints.isAssignableWith(instanceofType.resolve(),newType.resolve()) ? 1 : 0));}}return null;}case ARRAYLENGTH_opcode:{if (FOLD_CHECKS) {if (def.operator() == NEWARRAY) {return Move.create(INT_MOVE,y.copyRO(),NewArray.getSize(def).copy());}}return null;}default :OptimizingCompilerException.UNREACHABLE();return null;}}  }
class C{  private TPS atomicDelete(final IIndex ndx,final byte[] fromKey,final Schema schema,final long writeTime,final INameFilter filter){  final TPS tps=atomicRead(ndx,fromKey,schema,fromTime,toTime,filter,new TPS(schema,writeTime));  if (tps != null) {    final Map<String,Object> map=tps.asMap();    if (log.isInfoEnabled()) {      log.info("Will delete " + map.size() + " properties: names="+ map.keySet());    }    final IKeyBuilder keyBuilder=ndx.getIndexMetadata().getKeyBuilder();    final Iterator<String> itr=map.keySet().iterator();    while (itr.hasNext()) {      final String col=itr.next();      final byte[] key=schema.getKey(keyBuilder,primaryKey,col,writeTime);      ndx.insert(key,null);    }  }  return tps;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzPushbackPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead < 0) {    return true;  } else {    zzEndRead+=numRead;    return false;  }}  }
class C{  public static String clean(String html){  if (mWhitelist == null) {    mWhitelist=new Whitelist();    mWhitelist.addTags("a","br","p","b","i","strike","strong","u","font").addAttributes("a","href").addAttributes("font","color").addProtocols("a","href","http","https");  }  return Jsoup.clean(html,"",mWhitelist,new Document.OutputSettings().prettyPrint(false));}  }
class C{  public void recordLayoutId(int layoutId){  if (mLayoutIds == null)   mLayoutIds=new ArrayList<>();  if (!mLayoutIds.contains(layoutId)) {    mLayoutIds.add(layoutId);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void checkLeagueRecords(LeagueRecords records){  records.checkRecord("Team PPG",teamPoints / numGames(),abbr,league.getYear());  records.checkRecord("Team Opp PPG",teamOppPoints / numGames(),abbr,league.getYear());  records.checkRecord("Team YPG",teamYards / numGames(),abbr,league.getYear());  records.checkRecord("Team Opp YPG",teamOppYards / numGames(),abbr,league.getYear());  records.checkRecord("Team PPG",teamPoints / numGames(),abbr,league.getYear());  records.checkRecord("Team TO Diff",teamTODiff,abbr,league.getYear());  for (int i=0; i < teamQBs.size(); ++i) {    if (getQB(i).gamesPlayed > 6) {      records.checkRecord("Pass Yards",getQB(i).statsPassYards,abbr + " " + getQB(i).getInitialName(),league.getYear());      records.checkRecord("Pass TDs",getQB(i).statsTD,abbr + " " + getQB(i).getInitialName(),league.getYear());      records.checkRecord("Interceptions",getQB(i).statsInt,abbr + " " + getQB(i).getInitialName(),league.getYear());      records.checkRecord("Comp Percent",(100 * getQB(i).statsPassComp) / (getQB(i).statsPassAtt + 1),abbr + " " + getQB(i).getInitialName(),league.getYear());    }  }  for (int i=0; i < teamRBs.size(); ++i) {    if (getRB(i).gamesPlayed > 6) {      records.checkRecord("Rush Yards",getRB(i).statsRushYards,abbr + " " + getRB(i).getInitialName(),league.getYear());      records.checkRecord("Rush TDs",getRB(i).statsTD,abbr + " " + getRB(i).getInitialName(),league.getYear());      records.checkRecord("Rush Fumbles",getRB(i).statsFumbles,abbr + " " + getRB(i).getInitialName(),league.getYear());    }  }  for (int i=0; i < teamWRs.size(); ++i) {    if (getWR(i).gamesPlayed > 6) {      records.checkRecord("Rec Yards",getWR(i).statsRecYards,abbr + " " + getWR(i).getInitialName(),league.getYear());      records.checkRecord("Rec TDs",getWR(i).statsTD,abbr + " " + getWR(i).getInitialName(),league.getYear());      records.checkRecord("Catch Percent",(100 * getWR(i).statsReceptions) / (getWR(i).statsTargets + 1),abbr + " " + getWR(i).getInitialName(),league.getYear());    }  }}  }
class C{  public PDUByteBuffer(CapacityPolicy capacityPolicy){  bytes=new byte[4];  this.capacityPolicy=capacityPolicy;  bytesLength=4;  normalizeCommandLength();}  }
class C{  public Client(String name,String host,int port){  this.name=name;  this.host=host;  this.port=port;  registerCommand(new HelpCommand(this));  registerCommand(new MoveCommand(this));  registerCommand(new RulerCommand(this));  registerCommand(new ShowEntityCommand(this));  registerCommand(new FireCommand(this));  registerCommand(new DeployCommand(this));  registerCommand(new ShowTileCommand(this));  registerCommand(new AddBotCommand(this));  registerCommand(new AssignNovaNetworkCommand(this));  rsg=new RandomSkillsGenerator();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.372 -0500",hash_original_method="614FAF75AF873709E1677408EE18D7B6",hash_generated_method="C183834A8960AE30ED8ABDDEA347E16E") public boolean clearBlacklist(){  try {    mService.clearBlacklist();    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public double addAndEvaluate(Recommendation<U,I> recommendation){  double v=metric.evaluate(recommendation);  if (!ignoreNaN || !Double.isNaN(v)) {    sum+=v;    if (!allUsers) {      numUsers++;    }  }  return v;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.VARIABLE_DECLARATION_CONTAINER;}  }
class C{  boolean hasBody(Response response){  if (useNewMethod) {    return HttpHeaders.hasBody(response);  } else {    try {      return (boolean)legacyMethod.invoke(null,response);    } catch (    IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {      throw new IllegalStateException("Failed to invoke hasBody method: " + e.getMessage(),e);    }  }}  }
class C{  public static RenderedImage process1BImage(RenderedImageAdapter input,int bands,int horizontal_padding,int vertical_padding){  DrbCollectionImage source=(DrbCollectionImage)input.getWrappedImage();  return process1BImage(source,bands,horizontal_padding,vertical_padding);}  }
class C{  @Override public Object[] toArray(){  return newArray(new Object[size()]);}  }
class C{  private void describeDanger(int dangerLevel){  glassPane.setToolTipText(dangerLevelStrings[dangerLevel]);}  }
class C{  public Document parse(char[] content){  LagartoParser lagartoParser=new LagartoParser(content,true);  return doParse(lagartoParser);}  }
class C{  public void testCertPathValidator13() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < validValues.length; i++) {    certPV=CertPathValidator.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);    try {      certPV=CertPathValidator.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchAlgorithmException " + e.getMessage());    }    certPV=CertPathValidator.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);  }}  }
class C{  public void onReqFinancialAccount(){}  }
class C{  public ModelBuilder defaultGraph(){  this.currentSubject=null;  this.currentNamedGraph=null;  return this;}  }
class C{  public base addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public int indexOfNext(char c){  for (int i=pos; i < lcText.length; i++) {    if (lcText[i] == c)     return i;  }  return -1;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_GEN_EXPR_1__INDEX_1:    return INDEX_1_EDEFAULT == null ? index_1 != null : !INDEX_1_EDEFAULT.equals(index_1);}return super.eIsSet(featureID);}  }
class C{  public boolean isSmtpAuthorization(){  Object oo=get_Value(COLUMNNAME_IsSmtpAuthorization);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SabresQuery<T> whereExists(String key){  addWhere(key,Where.isNot(key,new StringValue("NULL")));  return this;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.238 -0500",hash_original_method="C93410329A523BCD2A1636A4AEB3409A",hash_generated_method="8C1BC44A51E102FD4811ACD830EA9366") public final short readShort() throws IOException {  readFully(scratch,0,SizeOf.SHORT);  return Memory.peekShort(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  private boolean isFinisher(RemoteOperationResult failedResult){  if (failedResult != null) {    RemoteOperationResult.ResultCode code=failedResult.getCode();    return (code.equals(RemoteOperationResult.ResultCode.SSL_ERROR) || code.equals(RemoteOperationResult.ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED) || code.equals(RemoteOperationResult.ResultCode.BAD_OC_VERSION)|| code.equals(RemoteOperationResult.ResultCode.INSTANCE_NOT_CONFIGURED));  }  return false;}  }
class C{  public static InputStream stringToStream(String s){  return new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8));}  }
class C{  private static boolean isRoundedToZero(double source,int decimals,int precision){  return source == 0.0 || Math.abs(source) < 4.999999999999999 / tenPowDouble(Math.max(decimals,precision) + 1);}  }
class C{  public void disconnect(N nodeA,N nodeB) throws NullPointerException {  nodeLinks.get(nodeA).remove(nodeB);  nodeLinks.get(nodeB).remove(nodeA);}  }
class C{  public double distance(V p){  return distance(p.toArray());}  }
class C{  public boolean equals(DTNHost otherHost){  return this == otherHost;}  }
class C{  public void drawVertical(Canvas c,RecyclerView parent){  if (parent.getChildCount() == 0)   return;  final int left=parent.getPaddingLeft();  final int right=parent.getWidth() - parent.getPaddingRight();  final View child=parent.getChildAt(0);  if (child.getHeight() == 0)   return;  final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();  int top=child.getBottom() + params.bottomMargin + mInsets;  int bottom=top + mDivider.getIntrinsicHeight();  final int parentBottom=parent.getHeight() - parent.getPaddingBottom();  while (bottom < parentBottom) {    mDivider.setBounds(left,top,right,bottom);    mDivider.draw(c);    top+=mInsets + params.topMargin + child.getHeight()+ params.bottomMargin+ mInsets;    bottom=top + mDivider.getIntrinsicHeight();  }}  }
class C{  public T sessionControl(String value){  setString(SESSION_CONTROL,value);  return (T)this;}  }
class C{  public final static float degToRad(float deg){  return (float)Math.toRadians((double)deg);}  }
class C{  public void copyFrom(OutputProperties opsrc) throws TransformerException {  copyFrom(opsrc.getProperties());}  }
class C{  public static <U extends Key<?>>NameMatcher<U> nameEndsWith(String compareTo){  return new NameMatcher<U>(compareTo,StringOperatorName.ENDS_WITH);}  }
class C{  public long key(){  return _map._set[_index];}  }
class C{  public void profile(ProfilerSection section){  this.section=section;}  }
class C{  public void zoomIn(){  if (mZoomIn != null) {    mZoomIn.apply(Zoom.ZOOM_AXIS_XY);    repaint();  }}  }
class C{  public String encodeBody(){  return organization;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  NumberAxis clone=(NumberAxis)super.clone();  if (this.numberFormatOverride != null) {    clone.numberFormatOverride=(NumberFormat)this.numberFormatOverride.clone();  }  return clone;}  }
class C{  public void flip(int i){  bits[i >> 5]^=1 << (i & 0x1F);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static _WorkspaceMappingType fromString(final String value) throws SOAPSerializationException {  return (_WorkspaceMappingType)Enumeration.fromString(value,_WorkspaceMappingType.VALUES_TO_INSTANCES);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent a=(Agent)stack.pop();  return (a == null) ? "" : a.getTypeName();}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  int k=0;  for (  double value : mValues) {    xySeries.add(++k,value);  }  return xySeries;}  }
class C{  public final synchronized void stopPonder(){  if (humansTurn() && (computerPlayer != null)) {    if (computerPlayer.getSearchType() == SearchType.PONDER) {      boolean updateGui=abortSearch();      if (updateGui)       updateGUI();    }  }}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public String convertParameterizedTypeRefIterableToString(EDataType eDataType,Object instanceValue){  return super.convertToString(instanceValue);}  }
class C{  private void testSequentialEvent(int nodes) throws Throwable {  createServers(nodes);  AtomicLong count=new AtomicLong();  AtomicLong index=new AtomicLong();  CopycatClient client=createClient();  client.onEvent("test",null);  client.submit(new TestEvent(true)).thenAccept(null);  await(30000,2);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  private void updateExportRules(VNXeApiClient vnxeApiClient,DbClient dbClient,FileShare fileObj,VNXeNfsShare nfsShare){  _logger.info("updating file export. ");  try {    FileExportRule newRule=new FileExportRule();    URI snapshotId=null;    if (!isFile) {      snapshotId=getTaskCompleter().getId();    }    copyPropertiesToSave(newRule,rule,fileObj,dbClient,snapshotId);    newRule=getAvailableExportRule(newRule,dbClient);    if (newRule != null) {      newRule.setInactive(true);      _logger.info("Removing Existing DB Export Rule {}",rule);      dbClient.persistObject(newRule);    }    if (!isDeleteRule) {      newRule=new FileExportRule();      newRule.setId(URIUtil.createId(FileExportRule.class));      if (nfsShare != null) {        if (nfsShare.getReadOnlyHosts() != null) {          Set<String> hosts=new HashSet<String>();          for (          VNXeBase hostId : nfsShare.getReadOnlyHosts()) {            hosts.add(vnxeApiClient.getHostById(hostId.getId()).getName());          }          rule.setReadOnlyHosts(hosts);        }        if (nfsShare.getReadWriteHosts() != null) {          Set<String> hosts=new HashSet<String>();          for (          VNXeBase hostId : nfsShare.getReadWriteHosts()) {            hosts.add(vnxeApiClient.getHostById(hostId.getId()).getName());          }          rule.setReadWriteHosts(hosts);        }        if (nfsShare.getRootAccessHosts() != null) {          Set<String> hosts=new HashSet<String>();          for (          VNXeBase hostId : nfsShare.getRootAccessHosts()) {            hosts.add(vnxeApiClient.getHostById(hostId.getId()).getName());          }          rule.setRootHosts(hosts);        }      }      copyPropertiesToSave(newRule,rule,fileObj,dbClient,snapshotId);      _logger.info("Storing New DB Export Rule {}",newRule);      dbClient.createObject(newRule);    }  } catch (  Exception e) {    _logger.info("Error While executing CRUD Operations {}",e);  }}  }
class C{  protected static InternalDistributedMember identifyLockGrantor_DTLS(){  TXLockService dtls=TXLockService.getDTLS();  String serviceName=((TXLockServiceImpl)dtls).getInternalDistributedLockService().getName();  return identifyLockGrantor(serviceName);}  }
class C{  private void putNonEmptyString(ContentValues values,JSONObject quiz,String jsonKey,String contentKey){  final String stringToPut=quiz.optString(jsonKey,null);  if (!TextUtils.isEmpty(stringToPut)) {    values.put(contentKey,stringToPut);  }}  }
class C{  private String translateTriggerCode(String sourceVendorName,String targetVendorName,String actionType,String triggerName,String triggerFunction){  return m_interfaces.get(getDBVendorID(targetVendorName)).translateTriggerCode(sourceVendorName.toUpperCase(),actionType,triggerName,triggerFunction);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.message);  ((TextView)findViewById(R.id.message)).setText(getIntent().getExtras().getString(Extra.MESSAGE));}  }
class C{  private static String parseDERString(byte[] alterNameValue) throws Throwable {  try {    ASN1StreamParser p=new ASN1StreamParser(alterNameValue);    ASN1Encodable d=p.readObject();    ASN1Primitive der=d.toASN1Primitive();    return getStringFromObject(der);  } catch (  Throwable e) {    logger.error("Unable to extract User Principal Name: " + e.getMessage());    throw e;  }}  }
class C{  @Override protected void onStop(){  super.onStop();  ResponseHandler.unregister(mDungeonsPurchaseObserver);}  }
class C{  protected void boundsCheck(int i1,int i2){  if (i1 < 0 || i2 < 0)   throw new ArrayIndexOutOfBoundsException("Attempted to access negative index of DVector2D.");}  }
class C{  @Override public double approximateConservativeKnnDistance(int k){  return conservativeApproximation.getApproximatedKnnDistance(k);}  }
class C{  public PSOutputStream realloc(final long oldAddr,final int size){  free(oldAddr,size);  return PSOutputStream.getNew(this,m_maxFixedAlloc,null);}  }
class C{  public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException {  resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);  FinderPatternFinder finder=new FinderPatternFinder(image,resultPointCallback);  FinderPatternInfo info=finder.find(hints);  return processFinderPatternInfo(info);}  }
class C{  public boolean redo(){  boolean canRedo=undoManager.canRedo();  if (canRedo) {    undoManager.redo();    canRedo=undoManager.canRedo();  } else {    UIManager.getLookAndFeel().provideErrorFeedback(editor);  }  return canRedo;}  }
class C{  public static String createCompositeSetting(final String caption,final String[] settings){  Assert.isNotNull(caption);  Assert.isNotNull(settings);  final StringBuffer buffer=new StringBuffer(128);  for (int index=0; index < settings.length; index++) {    if (settings[index] != null && !"".equals(settings[index])) {      buffer.append(LINE_DELIMITER);      buffer.append(ELEMENT_DELIMITER);      buffer.append(settings[index]);    } else {      buffer.append(LINE_DELIMITER);      buffer.append(ELEMENT_DELIMITER);      buffer.append(RefactoringCoreMessages.JavaRefactoringDescriptor_not_available);    }  }  if (buffer.length() > 0)   buffer.insert(0,caption);  return buffer.toString();}  }
class C{  public boolean isBrandingPackageAvailable(){  return brandingPackage != null;}  }
class C{  @Override public void run(){  String inputImageFile=args[0];  String imageGCPFile=args[1];  String mapGCPFile=args[2];  String outputFile=args[3];  ImageRectificationPanel ird=new ImageRectificationPanel(inputImageFile,imageGCPFile,mapGCPFile,outputFile,myHost);  returnData(ird);}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  public void onReceive(NotificationRemote remote,NotificationEntry entry,Intent intent,String intentAction){  if (DBG)   Log.d(TAG,"onReceive - " + entry.ID + ", "+ intentAction);}  }
class C{  public boolean isGerund(){  return typeString.startsWith(VERB_GERUND);}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  PositionableRoundRect ps=new PositionableRoundRect(ed);  Element elem=element.getChild("size");  ps.setWidth(getInt(elem,"width"));  ps.setHeight(getInt(elem,"height"));  ps.setCornerRadius(getInt(elem,"cornerRadius"));  ed.putItem(ps);  loadCommonAttributes(ps,Editor.MARKERS,element);}  }
class C{  public int update(Event event){  return updateTableRow(Event.uri,event);}  }
class C{  public boolean freeCareful(T obj){  if (checkDuplicate(obj))   throw new IllegalStateException("tried to free object twice: " + obj);  return free(obj);}  }
class C{  public MetricQuery(String scope,String metric,Map<String,String> tags,Long startTimestamp,Long endTimestamp){  super(scope,metric,tags,startTimestamp,endTimestamp);  SystemAssert.requireArgument(metric != null,"Metric cannot be null");}  }
class C{  private int extractArgName(int index,String working){  for (int i=index; i < working.length(); i++) {    char c=working.charAt(i);    if (c == ' ')     return i;    if (c == '=')     return i;  }  return -1;}  }
class C{  public StringConverter(){  super();}  }
class C{  public static boolean isValidAcceptorOnSide(TileEntity cableEntity,TileEntity tile,ForgeDirection side){  if (isCable(tile)) {    return false;  }  if (isEnergyAcceptor(tile) && isConnectable(cableEntity,tile,side)) {    return true;  }  return isOutputter(tile,side);}  }
class C{  public static void d(String msg){  if (LOGD_DEBUG && mLogAll) {    Log.d(DEFAULT_TAG,getInformation(msg));  }}  }
class C{  IteratorImpl(int position){  if (position < 0 || position > _size) {    throw new IndexOutOfBoundsException();  }  _nextIndex=position;  if (position == 0) {    _next=_head;  } else   if (position == _size) {    _next=null;  } else   if (position < (_size >> 1)) {    int pos=0;    for (_next=_head; pos < position; pos++) {      _next=(T)_next.getNext();    }  } else {    int pos=_size - 1;    for (_next=_tail; pos > position; pos--) {      _next=(T)_next.getPrevious();    }  }}  }
class C{  public boolean isInfoSent(){  Object oo=get_Value(COLUMNNAME_IsInfoSent);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static public double normalToLognormal(double mu,double sigma,double normalVal){  return Math.exp(mu + sigma * normalVal);}  }
class C{  public FixedLagSmoothing(HiddenMarkovModel hmm,int d){  this.hmm=hmm;  this.d=d;  initPersistent();}  }
class C{  protected synchronized void maybeSchedulePingServerTask(){  maybeStopPingServerTask();  if (pingInterval > 0) {    periodicPingTask=periodicPingExecutorService.schedule(new ServerPingTask(connection),pingInterval,TimeUnit.SECONDS);  }}  }
class C{  static void b2lBig(byte[] in,int inOfs,long[] out,int outOfs,int len){  if ((inOfs < 0) || ((in.length - inOfs) < len) || (outOfs < 0)|| ((out.length - outOfs) < len / 8)) {    throw new ArrayIndexOutOfBoundsException();  }  if (littleEndianUnaligned) {    inOfs+=byteArrayOfs;    len+=inOfs;    while (inOfs < len) {      out[outOfs++]=reverseBytes(unsafe.getLong(in,(long)inOfs));      inOfs+=8;    }  } else   if (bigEndian && ((inOfs & 3) == 0)) {    inOfs+=byteArrayOfs;    len+=inOfs;    while (inOfs < len) {      out[outOfs++]=((long)unsafe.getInt(in,(long)inOfs) << 32) | (unsafe.getInt(in,(long)(inOfs + 4)) & 0xffffffffL);      inOfs+=8;    }  } else {    len+=inOfs;    while (inOfs < len) {      int i1=((in[inOfs + 3] & 0xff)) | ((in[inOfs + 2] & 0xff) << 8) | ((in[inOfs + 1] & 0xff) << 16)| ((in[inOfs]) << 24);      inOfs+=4;      int i2=((in[inOfs + 3] & 0xff)) | ((in[inOfs + 2] & 0xff) << 8) | ((in[inOfs + 1] & 0xff) << 16)| ((in[inOfs]) << 24);      out[outOfs++]=((long)i1 << 32) | (i2 & 0xffffffffL);      inOfs+=4;    }  }}  }
class C{  protected boolean hasActiveMasks(DbClient dbClient,ExportGroup exportGroup){  List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(dbClient,exportGroup);  for (  ExportMask exportMask : exportMasks) {    if (exportMask != null && !exportMask.getInactive()) {      _logger.info("this ExportGroup has active masks: " + exportGroup.getGeneratedName());      return true;    }  }  _logger.info("this ExportGroup does not have any remaining active masks: " + exportGroup.getGeneratedName());  return false;}  }
class C{  public BlockChainScore(final BigInteger score){  super(score,BlockChainScore.class);  if (this.getRaw().compareTo(BigInteger.ZERO) < 0) {    throw new IllegalArgumentException("block chain score can't be negative");  }}  }
class C{  @RequestMapping(value="",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<FileDto> createFile(@RequestParam(required=false,name="name") String fileName,InputStream inputStream,UriComponentsBuilder uriBuilder){  final FileDto fd=FileDto.fromFile(fileService.create(fileName,inputStream));  return ResponseEntity.created(uriBuilder.path("/api/files/{fileId}").buildAndExpand(fd.getId()).toUri()).body(fd);}  }
class C{  public static boolean isNotEmpty(final long[] array){  return array != null && array.length != 0;}  }
class C{  public static <T>T[] rshift(T[] field,int offset,int size,int shiftCount,boolean expandIfNeeded){  if (field == null) {    throw new IllegalArgumentException("the field argument must not be null");  }  if (offset < 0 || offset >= field.length) {    throw new IllegalArgumentException("the offset argument must be in range 0 >= offset < field.length");  }  size=Math.min(field.length - offset,size);  int to=offset + size + shiftCount;  int from=offset + size;  if (to > field.length) {    if (expandIfNeeded) {      field=expand(field,to,true);    } else {      to=field.length;      from=field.length - shiftCount;    }  }  while (from > offset) {    field[--to]=field[--from];  }  return field;}  }
class C{  public static boolean isOutputZipFormat(Configuration conf){  return conf.getBoolean(OUTPUT_ZIP_FILE,false);}  }
class C{  public boolean isMinValue(Number check){  if (check.doubleValue() < this.minValue.doubleValue()) {    return true;  }  return false;}  }
class C{  public final double sizeOfPredictedRegions(){  return m_delegate.sizeOfPredictedRegions();}  }
class C{  public void error(CSSParseException e){}  }
class C{  public static ConditionalMutualInformationCalculatorDiscrete newInstance(int base1,int base2,int condBase){  return new ConditionalMutualInformationCalculatorDiscrete(base1,base2,condBase);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:41.126 -0500",hash_original_method="F30D19D7197AEDE7B7CBD76BE8FA4C90",hash_generated_method="335049FAAF8BAC78F9C38099BA975A90") public void removeAuthenticationHeader(String callId){  this.authorizationHeaders.remove(callId);}  }
class C{  @Inline public static int computeScalarHeaderSize(RVMClass type){  return JavaHeader.computeScalarHeaderSize(type);}  }
class C{  private int removeTrack(final long id){  int numremoved=0;synchronized (this) {    for (int i=0; i < mPlayListLen; i++) {      if (mPlayList[i] == id) {        numremoved+=removeTracksInternal(i,i);        i--;      }    }  }  if (numremoved > 0) {    notifyChange(QUEUE_CHANGED);  }  return numremoved;}  }
class C{  public GeoPoint[] findCrossings(final PlanetModel planetModel,final Plane q,final Membership... bounds){  if (isNumericallyIdentical(q)) {    return null;  }  return findCrossings(planetModel,q,bounds,NO_BOUNDS);}  }
class C{  private void reset(ICompilationUnit unit){  fUnit=unit;  fLocalVariables.clear();  fFields.clear();  fLocalTypes.clear();  if (fUnit != null) {    try {      IType[] cuTypes=fUnit.getAllTypes();      for (int i=0; i < cuTypes.length; i++) {        String fqn=cuTypes[i].getFullyQualifiedName();        String sig=Signature.createTypeSignature(fqn,true);        fLocalTypes.put(sig,cuTypes[i].getElementName());      }    } catch (    JavaModelException e) {    }  }  fError=false;}  }
class C{  public static MockTransaction createTransactionWithFee(final int customField,final long fee){  final Account sender=Utils.generateRandomAccount();  final MockTransaction transaction=new MockTransaction(sender,customField);  transaction.setFee(new Amount(fee));  return transaction;}  }
class C{  public static String escape(String s){  return JSONValue.escape(s);}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenees.size() == 0) {    return false;  }  boolean ok=false;  for (  Object o : m_listenees) {    if (o instanceof EventConstraints) {      if (((EventConstraints)o).eventGeneratable("dataSet") || ((EventConstraints)o).eventGeneratable("trainingSet") || ((EventConstraints)o).eventGeneratable("testSet")) {        ok=true;        break;      }    }  }  return ok;}  }
class C{  public void addUserRole(UserRoleType userRole){  userRoles.add(userRole);}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.172 -0500",hash_original_method="8E1D6FEDF1AFEDBCDCF9E63EFF23CA00",hash_generated_method="F6D7C174AEA7671EB5A5529CC69A276B") protected void dump(FileDescriptor fd,PrintWriter fout,String[] args){  fout.addTaint(fd.getTaintInt() + args[0].getTaintInt());}  }
class C{  private static String genPassword(){  SecureRandom rand=new SecureRandom();  StringBuilder builder=new StringBuilder();  while (builder.length() != 12) {    int next=rand.nextInt();    if (Character.isJavaIdentifierStart(next)) {      char c=(char)next;      if (c == next) {        builder.append(c);      }    }  }  return builder.toString();}  }
class C{  private int updateRedundancy(){  int desiredRedundancy=this.pRegion.getRedundantCopies();  int numBucketHosts=getNumInitializedBuckets();  if (isClosed()) {    return numBucketHosts;  }  int actualRedundancy=numBucketHosts - 1;  this.redundancy=actualRedundancy;  if (this.redundancySatisfied && numBucketHosts > 0 && actualRedundancy < desiredRedundancy) {    incLowRedundancyBucketCount(1);    this.redundancySatisfied=false;  } else   if (!this.redundancySatisfied && numBucketHosts > 0 && actualRedundancy >= desiredRedundancy) {    incLowRedundancyBucketCount(-1);    this.redundancySatisfied=true;    this.redundancyEverSatisfied=true;  }  return numBucketHosts;}  }
class C{  public boolean isNativeLookAndFeel(){  return true;}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  public final void kill(){  uiAccessor.access(null);}  }
class C{  public boolean isPluralForms(){  return nouns != null;}  }
class C{  public void actionPerformed(ActionEvent e){  if (log.isDebugEnabled()) {    log.debug("actionPerformed");  }  try {    int newVal=textToValue(_value.getText());    updatedTextField();    prop.firePropertyChange("Value",null,newVal);  } catch (  java.lang.NumberFormatException ex) {    _value.setText(oldContents);  }}  }
class C{  public void addActionListener(ActionListener listener){}  }
class C{  public SQLDataException(Throwable cause){  super(cause);}  }
class C{  public void input(Log log){  eventStream.input(log);}  }
class C{  public int indexOf(final E o){  final int index=indexes.get(o,-1);  return index;}  }
class C{  public void putAttribute(final String name,final byte[] val){  if (attrs == null)   attrs=new HashMap<>();  attrs.put(name,val);}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public Object clone(){  return new MD4(this);}  }
class C{  public String paramString(){  String typeStr;switch (id) {case FOCUS_GAINED:    typeStr="FOCUS_GAINED";  break;case FOCUS_LOST:typeStr="FOCUS_LOST";break;default :typeStr="unknown type";}return typeStr + (temporary ? ",temporary" : ",permanent") + ",opposite="+ getOppositeComponent();}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  URICertStore(CertStoreParameters params) throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {  super(params);  if (!(params instanceof URICertStoreParameters)) {    throw new InvalidAlgorithmParameterException("params must be instanceof URICertStoreParameters");  }  this.uri=((URICertStoreParameters)params).uri;  if (uri.getScheme().toLowerCase(Locale.ENGLISH).equals("ldap")) {    ldap=true;    ldapHelper=CertStoreHelper.getInstance("LDAP");    ldapCertStore=ldapHelper.getCertStore(uri);    ldapPath=uri.getPath();    if (ldapPath.charAt(0) == '/') {      ldapPath=ldapPath.substring(1);    }  }  try {    factory=CertificateFactory.getInstance("X.509");  } catch (  CertificateException e) {    throw new RuntimeException();  }}  }
class C{  @Override public void followAgent(final IAgent a){}  }
class C{  synchronized void sendMessage(DMessage dm){  try {    if (dm.getType() != DMessage.OutSetActiveIsolate) {      int isolate=dm.getTargetIsolate();      if (isolate != getActiveIsolate().getId()) {        DMessage dm1=DMessageCache.alloc(4);        dm1.setTargetIsolate(isolate);        dm1.setType(DMessage.OutSetActiveIsolate);        dm1.putDWord(isolate);        sendMessage(dm1);        m_manager.setActiveIsolate(m_manager.getIsolate(isolate));      }    }    m_protocol.txMessage(dm);    if (m_debugMsgOn || m_debugMsgFileOn)     trace(dm,false);  } catch (  IOException io) {    if (Trace.error) {      Trace.trace("Attempt to send message " + dm.outToString() + " failed");      io.printStackTrace();    }  }  DMessageCache.free(dm);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    double fx, fy;    float aspect;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("circular_bw.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            aspect=(float)(180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx)));            outputFile.setValue(row,col,aspect);          } else {            outputFile.setValue(row,col,-1);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public synchronized void acceptDataSet(DataSetEvent e){  TextEvent nt=new TextEvent(e.getSource(),e.getDataSet().toString(),e.getDataSet().relationName());  acceptText(nt);}  }
class C{  public Map<String,String> list(URI uri){  Map<String,String> result=new HashMap<>();  String origin=buildOrigin(uri);  Set<Cookie> byOrigin=this.cookiesByOrigin.get(origin);  if (byOrigin != null) {    for (    Cookie cookie : byOrigin) {      if (cookie.isSecure() && !uri.getScheme().equals(URI_SCHEME_HTTPS)) {        continue;      }      result.put(cookie.name(),cookie.value());    }  }  return result;}  }
class C{  public boolean isCheckOnStart(){  return checkOnStart;}  }
class C{  public String diff_text1(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  public void testBooleanWrapper() throws Exception {  ObjectMapper mapper=new ObjectMapper();  Boolean result=mapper.readValue(new StringReader("true"),Boolean.class);  assertEquals(Boolean.TRUE,result);  result=mapper.readValue(new StringReader("false"),Boolean.class);  assertEquals(Boolean.FALSE,result);  result=mapper.readValue(new StringReader("0"),Boolean.class);  assertEquals(Boolean.FALSE,result);  result=mapper.readValue(new StringReader("1"),Boolean.class);  assertEquals(Boolean.TRUE,result);}  }
class C{  public static String findUserFromRequest(HttpServletRequest req){  if (req.getUserPrincipal() != null)   return req.getUserPrincipal().getName();  if (req.getSession() != null) {    try {      return AppUser.class.cast(req.getSession().getAttribute(AppUser.SESSION_ATTRIBUTE)).getName();    } catch (    Exception ex) {    }  }  return null;}  }
class C{  public ParserFactory(final ClientReader clientReader){  attachParser=new AttachParser(clientReader);  breakpointHitParser=new BreakpointHitParser(clientReader);  breakpointRemovedParser=new BreakpointsRemovedParser(clientReader);  breakpointSetParser=new BreakpointSetParser(clientReader);  cancelTargetSelectionParser=new CancelTargetSelectionParser(clientReader);  detachParser=new DetachParser(clientReader);  echoBreakpointHitParser=new EchoBreakpointHitParser(clientReader);  echoBreakpointRemovedParser=new EchoBreakpointRemovedParser(clientReader);  echoBreakpointSetParser=new EchoBreakpointSetParser(clientReader);  exceptionOccurredParser=new ExceptionOccurredParser(clientReader);  listFilesParser=new ListFilesParser(clientReader);  listProcessesParser=new ListProcessesParser(clientReader);  memoryMapParser=new MemoryMapParser(clientReader);  moduleLoadedParser=new ModuleLoadedParser(clientReader);  moduleUnloadedParser=new ModuleUnloadedParser(clientReader);  processClosedParser=new ProcessClosedParser(clientReader);  readMemoryParser=new ReadMemoryParser(clientReader);  registersParser=new RegistersParser(clientReader);  requestTargetParser=new RequestTargetParser(clientReader);  resumeParser=new ResumeParser(clientReader);  searchParser=new SearchParser(clientReader);  selectProcessParser=new SelectProcessParser(clientReader);  setRegisterParser=new SetRegisterParser(clientReader);  singleStepParser=new SingleStepParser(clientReader);  stepBreakpointHitParser=new StepBreakpointHitParser(clientReader);  stepBreakpointRemovedParser=new StepBreakpointRemovedParser(clientReader);  stepBreakpointSetParser=new StepBreakpointSetParser(clientReader);  targetInformationParser=new TargetInformationReplyParser(clientReader);  terminateParser=new TerminateParser(clientReader);  threadClosedParser=new ThreadClosedParser(clientReader);  threadCreatedParser=new ThreadCreatedParser(clientReader);  validatedMemoryParser=new ValidateMemoryParser(clientReader);  selectedFileParser=new SelectFileParser(clientReader);  haltParser=new HaltParser(clientReader);  resumeThreadParser=new ResumeThreadParser(clientReader);  suspendThreadParser=new SuspendThreadParser(clientReader);  breakpointConditionSetParser=new BreakpointConditionSetParser(clientReader);  writeMemoryParser=new WriteMemoryParser(clientReader);  setExceptionSettingsParser=new SetExceptionSettingsParser(clientReader);  setDebugEventSettingsParser=new SetDebuggerEventSettingsParser(clientReader);  queryDebuggerEventSettingsParser=new QueryDebuggerEventSettingsParser(clientReader);  processStartParser=new ProcessStartReplyParser(clientReader);}  }
class C{  public LambdaFactoryConfiguration withStaticImports(String... newStaticImports){  return copy().setStaticImports(listWithNewElements(staticImports,newStaticImports));}  }
class C{  @Override public void processAttribute(String namespace,String localName,String value) throws ParseException {  if (namespace.equals("")) {    if (localName.equals("type")) {      try {        mimeType=new ContentType(value);      } catch (      IllegalArgumentException e) {        throw new ParseException(CoreErrorDomain.ERR.invalidMimeType,e);      }    } else     if (localName.equals("src")) {      uri=getAbsoluteUri(value);    }  } else   if (namespace.equals(Namespaces.g)) {    if (localName.equals("etag")) {      setEtag(value);      return;    }  }}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  void initDerivedMembers(){  for (int i=0; i < fields.size(); i++) {    final GeoSpatialDatatypeFieldConfiguration field=fields.get(i);switch (field.getServiceMapping()) {case LATITUDE:      hasLat=true;    break;case LONGITUDE:  hasLon=true;break;case COORD_SYSTEM:hasCoordSystem=true;break;case TIME:hasTime=true;break;case CUSTOM:customFieldsIdxs.put(field.getCustomServiceMapping(),i);break;default :throw new InvalidGeoSpatialDatatypeConfigurationError("Unhandled field type: " + field.getServiceMapping());}}}  }
class C{  private void addCSSClasses(){  final StyleLibrary style=context.getStyleLibrary();  if (!svgp.getCSSClassManager().contains(CSS_EPSILON)) {    final CSSClass label=new CSSClass(svgp,CSS_EPSILON);    label.setStatement(SVGConstants.CSS_FILL_PROPERTY,style.getTextColor(StyleLibrary.AXIS_LABEL));    label.setStatement(SVGConstants.CSS_FONT_FAMILY_PROPERTY,style.getFontFamily(StyleLibrary.AXIS_LABEL));    label.setStatement(SVGConstants.CSS_FONT_SIZE_PROPERTY,style.getTextSize(StyleLibrary.AXIS_LABEL));    svgp.addCSSClassOrLogError(label);  }  if (!svgp.getCSSClassManager().contains(CSS_LINE)) {    final CSSClass lcls=new CSSClass(svgp,CSS_LINE);    lcls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,style.getColor(StyleLibrary.PLOT));    lcls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,0.5 * style.getLineWidth(StyleLibrary.PLOT));    svgp.addCSSClassOrLogError(lcls);  }}  }
class C{  private String createFileFullPath(){  String fullPath=url.toString();  fullPath=fullPath.replaceFirst("://([^:]+)(?:.+)@","://$1@");  return fullPath;}  }
class C{  @Override public List<EvaluationStatistics> read(){  List<EvaluationStatistics> result;  String line;  String[] parts;  String[] entries;  HashMap<String,String> raw;  EvaluationStatistics stat;  BufferedReader breader;  FileReader freader;  result=new ArrayList<>();  freader=null;  breader=null;  try {    freader=new FileReader(m_File);    breader=new BufferedReader(freader);    while ((line=breader.readLine()) != null) {      if (line.trim().isEmpty())       continue;      entries=line.split("\t");      raw=new HashMap<>();      for (      String entry : entries) {        if (entry.trim().isEmpty())         continue;        parts=entry.split("=");        if (parts.length == 2)         raw.put(parts[0],parts[1]); else         log("Failed to parse: " + entry);      }      if (raw.containsKey(KEY_CLASSIFIER) && raw.containsKey(KEY_RELATION)) {        stat=new EvaluationStatistics(OptionUtils.fromCommandLine(MultiLabelClassifier.class,raw.get(KEY_CLASSIFIER)),raw.get(KEY_RELATION),null);        for (        String key : raw.keySet()) {          if (key.equals(KEY_CLASSIFIER) || key.equals(KEY_RELATION))           continue;          try {            stat.put(key,Double.parseDouble(raw.get(key)));          } catch (          Exception e) {            log("Failed to parse double value of '" + key + "': "+ raw.get(key));          }        }        result.add(stat);      }    }  } catch (  Exception e) {    result=null;    handleException("Failed to read serialized statistics from: " + m_File,e);  } finally {    FileUtils.closeQuietly(breader);    FileUtils.closeQuietly(freader);  }  return result;}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("prepareStatement(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    return prepareStatement(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean hasPhotosUsedExt(){  return hasExtension(GphotoPhotosUsed.class);}  }
class C{  public SVGPath relativeSmoothQuadTo(double[] xy){  append(PATH_SMOOTH_QUAD_TO_RELATIVE,xy[0],xy[1]);  return this;}  }
class C{  @Override public boolean othersInsertsAreVisible(int type){  debugCodeCall("othersInsertsAreVisible",type);  return false;}  }
class C{  public synchronized void resetIncrementalLogs(){  if (Cfg.DEBUG) {    Check.log(TAG + " (resetIncrementalLogs)");  }  for (  BaseModule agent : threads.keySet()) {    if (agent != null && agent instanceof IncrementalLog) {      ((IncrementalLog)agent).resetLog();    }  }  Utils.sleep(2000);}  }
class C{  public String methodDescriptor(){  ConstPool cp=getConstPool();  int mi=methodIndex();  int ti=cp.getNameAndTypeDescriptor(mi);  return cp.getUtf8Info(ti);}  }
class C{  public final boolean check(final long i){  Exam.assertTrue(i + ":" + toString(),inRange(i));  return true;}  }
class C{  public boolean hasEphemeris(){  return mHasEphemeris;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:02.377 -0500",hash_original_method="006A266C2AF487BC68B2B3E1762E4A9B",hash_generated_method="E656F0061A5D0B51468D11AEE7DA96A6") public static IssuingDistributionPoint decode(byte[] encoding) throws IOException {  IssuingDistributionPoint idp=(IssuingDistributionPoint)ASN1.decode(encoding);  idp.encoding=encoding;  return idp;}  }
class C{  public void removeExternalIdpConfig(String tenantName,String configEntityId,boolean removeJitUsers) throws Exception {  getService().removeExternalIdpForTenant(tenantName,configEntityId,removeJitUsers,this.getServiceContext());}  }
class C{  private ItemData fromString(String s){  String[] strings=s.split("-");  int len=strings.length;  int sm=len > 1 ? catchWildcard(strings[len > 3 ? 2 : 1]) : WILDCARD;  int em=len > 2 ? catchWildcard(strings[len > 3 ? 3 : 2]) : sm;  if (!strings[0].contains(":")) {    strings[0]="minecraft:" + strings[0];  }  return new ItemData(strings[0],sm,em);}  }
class C{  @SafeVarargs protected <T extends AbstractOptionValue<?,?>>AbstractOptions(Function<T,T> valueFilter,T... values){  requireNonNull(valueFilter,"valueFilter");  requireNonNull(values,"values");  valueMap=new IdentityHashMap<>();  putAll(valueFilter,Stream.of(values));}  }
class C{  public ImageInputFormat(ImageHolderFigure prototype,String formatName,String description,String fileExtension,String mimeType){  this(prototype,formatName,description,new String[]{fileExtension},new String[]{mimeType});}  }
class C{  protected DoubleMatrix1D viewSelectionLike(int[] offsets){  return new SelectedDenseDoubleMatrix1D(this.elements,offsets);}  }
class C{  public static void writeFile(File file,byte[] data){  try {    RandomAccessFile ra=new RandomAccessFile(file,"rw");    ra.write(data);    ra.setLength(data.length);    ra.close();  } catch (  IOException e) {    throw new RuntimeException("Error writing to file " + file,e);  }}  }
class C{  public void addServer(InetSocketAddress addr){  serverAddresses.add(addr);}  }
class C{  public static String toString(Node node,Map<String,String> outputProperties){  try {    StringWriter writer=new StringWriter();    toWriter(node,writer,outputProperties);    return writer.toString();  } catch (  TransformerException e) {    throw new RuntimeException(e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void validateBusinessObjectFormatDdl(String expectedNamespaceCode,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,BusinessObjectDataDdlOutputFormatEnum expectedOutputFormat,String expectedTableName,String expectedCustomDdlName,String expectedDdl,BusinessObjectFormatDdl actualBusinessObjectFormatDdl){  assertNotNull(actualBusinessObjectFormatDdl);  assertEquals(expectedNamespaceCode,actualBusinessObjectFormatDdl.getNamespace());  assertEquals(expectedBusinessObjectDefinitionName,actualBusinessObjectFormatDdl.getBusinessObjectDefinitionName());  assertEquals(expectedBusinessObjectFormatUsage,actualBusinessObjectFormatDdl.getBusinessObjectFormatUsage());  assertEquals(expectedBusinessObjectFormatFileType,actualBusinessObjectFormatDdl.getBusinessObjectFormatFileType());  assertEquals(expectedBusinessObjectFormatVersion,actualBusinessObjectFormatDdl.getBusinessObjectFormatVersion());  assertEquals(expectedOutputFormat,actualBusinessObjectFormatDdl.getOutputFormat());  assertEquals(expectedTableName,actualBusinessObjectFormatDdl.getTableName());  assertEquals(expectedCustomDdlName,actualBusinessObjectFormatDdl.getCustomDdlName());  assertEquals(expectedDdl,actualBusinessObjectFormatDdl.getDdl());}  }
class C{  public Builder year(Integer year){  components[YEAR]=year;  return this;}  }
class C{  static boolean isRefreshNotificationRegistered(NotificationListener client,RefreshNotificationType type){  boolean isRegistered=false;  Map<RefreshNotificationType,Integer> notifications=null;synchronized (refreshClients) {    notifications=(Map<RefreshNotificationType,Integer>)refreshClients.get(client);  }  if (notifications != null) {    Integer timerNotificationId=notifications.get(type);    if (timerNotificationId != null) {      isRegistered=true;    }  }  return isRegistered;}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public String ruleString(){  String ruleString="(" + rules[0].ruleString();  for (int i=1; i < rules.length; i++) {    ruleString+="| " + rules[i].ruleString();  }  return ruleString + ")";}  }
class C{  public Pair<PRCreateStatus,String> parseException(final Throwable t,final String sourceBranch,final GitRemoteBranch targetBranch,final ServerContext context,final GitHttpClient gitClient){  if (t == null) {    return Pair.create(PRCreateStatus.UNKNOWN,StringUtils.EMPTY);  }  if ((StringUtils.contains(t.getMessage(),PR_EXISTS_EXCEPTION_NAME)) || (StringUtils.contains(t.getMessage(),PR_EXISTS_EXCEPTION_CODE))) {    try {      final UUID repoId=context.getGitRepository().getId();      final GitPullRequestSearchCriteria searchCriteria=new GitPullRequestSearchCriteria();      searchCriteria.setRepositoryId(repoId);      searchCriteria.setStatus(PullRequestStatus.ACTIVE);      searchCriteria.setSourceRefName(getVSORefName(sourceBranch));      searchCriteria.setTargetRefName(getVSORefName(targetBranch.getNameForRemoteOperations()));      List<GitPullRequest> pullRequests=gitClient.getPullRequests(repoId,searchCriteria,null,0,1);      if (pullRequests != null && pullRequests.size() > 0) {        final String repositoryRemoteUrl=context.getGitRepository().getRemoteUrl();        final String notifyMsgInHtml=getHtmlMsg(repositoryRemoteUrl,pullRequests.get(0).getPullRequestId());        return Pair.create(PRCreateStatus.DUPLICATE,notifyMsgInHtml);      }    } catch (    Throwable innerT) {      logger.error("Failed to retrieve existing pull request",innerT);      return Pair.create(PRCreateStatus.FAILED,t.getMessage());    }  }  return Pair.create(PRCreateStatus.FAILED,t.getMessage());}  }
class C{  public String periodicPruningRateTipText(){  return "How often to prune low density canopies during training";}  }
class C{  public void endVisit(NormalAnnotation node){}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("  DDFField:\n");  buf.append("\tTag = ").append(poDefn.getName()).append("\n");  buf.append("\tDescription = ").append(poDefn.getDescription()).append("\n");  int size=getDataSize();  buf.append("\tDataSize = ").append(size).append("\n");  if (pachData == null) {    buf.append("\tHeader offset = ").append(headerOffset).append("\n");    buf.append("\tData position = ").append(dataPosition).append("\n");    buf.append("\tData length = ").append(dataLength).append("\n");    return buf.toString();  }  buf.append("\tData = ");  for (int i=0; i < Math.min(size,40); i++) {    if (pachData[i] < 32 || pachData[i] > 126) {      buf.append(" | ").append((char)pachData[i]);    } else {      buf.append(pachData[i]);    }  }  if (size > 40)   buf.append("...");  buf.append("\n");  if (Debug.debugging("iso8211.raw")) {    int iOffset=0;    MutableInt nBytesConsumed=new MutableInt(0);    for (int nLoopCount=0; nLoopCount < getRepeatCount(); nLoopCount++) {      if (nLoopCount > 8) {        buf.append("      ...\n");        break;      }      for (int i=0; i < poDefn.getSubfieldCount(); i++) {        byte[] subPachData=new byte[pachData.length - iOffset];        System.arraycopy(pachData,iOffset,subPachData,0,subPachData.length);        buf.append(poDefn.getSubfieldDefn(i).dumpData(subPachData,subPachData.length));        poDefn.getSubfieldDefn(i).getDataLength(subPachData,subPachData.length,nBytesConsumed);        iOffset+=nBytesConsumed.value;      }    }  } else {    buf.append("      Subfields:\n");    for (Enumeration enumeration=subfields.keys(); enumeration.hasMoreElements(); ) {      Object obj=subfields.get(enumeration.nextElement());      if (obj instanceof List) {        for (Iterator it=((List)obj).iterator(); it.hasNext(); ) {          DDFSubfield ddfs=(DDFSubfield)it.next();          buf.append("        ").append(ddfs.toString()).append("\n");        }      } else {        buf.append("        ").append(obj.toString()).append("\n");      }    }  }  return buf.toString();}  }
class C{  private void init(Config config){  this.config=config;  this.stormConfig.site=config.getString("siteId");  this.stormConfig.aggregationDuration=config.getLong("stormConfig.aggregationDuration");  this.zkStateConfig.zkQuorum=config.getString("zookeeper.zkQuorum");  this.zkStateConfig.zkSessionTimeoutMs=config.getInt("zookeeper.zkSessionTimeoutMs");  this.zkStateConfig.zkRetryTimes=config.getInt("zookeeper.zkRetryTimes");  this.zkStateConfig.zkRetryInterval=config.getInt("zookeeper.zkRetryInterval");  this.zkStateConfig.zkRoot=ZK_ROOT_PREFIX + "/" + this.stormConfig.site;  this.eagleServiceConfig.eagleServiceHost=config.getString("service.host");  String port=config.getString("service.port");  this.eagleServiceConfig.eagleServicePort=(port == null ? 8080 : Integer.parseInt(port));  this.eagleServiceConfig.username=config.getString("service.username");  this.eagleServiceConfig.password=config.getString("service.password");  LOG.info("Successfully initialized Aggregation Config");  LOG.info("zookeeper.quorum: " + this.zkStateConfig.zkQuorum);  LOG.info("service.host: " + this.eagleServiceConfig.eagleServiceHost);  LOG.info("service.port: " + this.eagleServiceConfig.eagleServicePort);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrlastchild.class,args);}  }
class C{  public RgbFilter(final int red,final int green,final int blue,final int lower,final int upper){  this.red=red;  this.green=green;  this.blue=blue;  this.lower=lower;  this.upper=upper;}  }
class C{  public Boolean isGuestAutoLockEnabled(){  return guestAutoLockEnabled;}  }
class C{  public void testDescendingIterator(){  LinkedBlockingDeque q=populatedDeque(SIZE);  int i=0;  Iterator it=q.descendingIterator();  while (it.hasNext()) {    assertTrue(q.contains(it.next()));    ++i;  }  assertEquals(i,SIZE);  assertFalse(it.hasNext());  try {    it.next();    shouldThrow();  } catch (  NoSuchElementException success) {  }}  }
class C{  private void primitiveArrayStoreHelper(int size){  Barriers.compileModifyCheck(asm,(size == 8) ? 3 * WORDSIZE : 2 * WORDSIZE);  if (VM.BuildFor32Addr) {    if (size == 8) {      asm.emitPOP_Reg(S1);    }    asm.emitPOP_Reg(T1);    asm.emitPOP_Reg(T0);    asm.emitPOP_Reg(S0);  } else {    asm.emitPOP_Reg(T1);    if (size == 8) {      adjustStack(WORDSIZE,true);    }    asm.emitPOP_Reg(T0);    asm.emitPOP_Reg(S0);    asm.emitAND_Reg_Reg(T0,T0);  }  genBoundsCheck(asm,T0,S0);switch (size) {case 8:    if (VM.BuildFor32Addr) {      asm.emitMOV_RegIdx_Reg(S0,T0,LONG,NO_SLOT,S1);      asm.emitMOV_RegIdx_Reg(S0,T0,LONG,ONE_SLOT,T1);    } else {      asm.emitMOV_RegIdx_Reg_Quad(S0,T0,LONG,NO_SLOT,T1);    }  break;case 4:asm.emitMOV_RegIdx_Reg(S0,T0,WORD,NO_SLOT,T1);break;case 2:asm.emitMOV_RegIdx_Reg_Word(S0,T0,SHORT,NO_SLOT,T1);break;case 1:asm.emitMOV_RegIdx_Reg_Byte(S0,T0,BYTE,NO_SLOT,T1);break;default :if (VM.VerifyAssertions) {VM._assert(VM.NOT_REACHED,"Unhandled byte size!");} else {VM.sysFail("Unhandled byte size");}}}  }
class C{  public static final byte[] decodeQuotedPrintable(byte[] bytes){  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == ESCAPE_CHAR) {      try {        if ('\r' == (char)bytes[i + 1] && '\n' == (char)bytes[i + 2]) {          i+=2;          continue;        }        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          return null;        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        return null;      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public static String encryptCFB(final byte[] concatenatedHashValue,final Long turnoverCounter,final SecretKey symmetricKey,int turnOverCounterLengthInBytes) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {  final ByteBuffer byteBufferIV=ByteBuffer.allocate(16);  byteBufferIV.put(concatenatedHashValue);  final byte[] IV=byteBufferIV.array();  final ByteBuffer byteBufferData=ByteBuffer.allocate(16);  byteBufferData.putLong(turnoverCounter);  final byte[] data=byteBufferData.array();  byte[] turnOverCounterByteRep=get2ComplementRepForLong(turnoverCounter,turnOverCounterLengthInBytes);  System.arraycopy(turnOverCounterByteRep,0,data,0,turnOverCounterByteRep.length);  final IvParameterSpec ivSpec=new IvParameterSpec(IV);  final Cipher cipher=Cipher.getInstance("AES/CFB/NoPadding","BC");  cipher.init(Cipher.ENCRYPT_MODE,symmetricKey,ivSpec);  final byte[] encryptedTurnOverValueComplete=cipher.doFinal(data);  final byte[] encryptedTurnOverValue=new byte[turnOverCounterLengthInBytes];  System.arraycopy(encryptedTurnOverValueComplete,0,encryptedTurnOverValue,0,turnOverCounterLengthInBytes);  final String base64EncryptedTurnOverValue=CashBoxUtils.base64Encode(encryptedTurnOverValue,false);  return base64EncryptedTurnOverValue;}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public void prepareOperation(ISchedulingRule rule,IProgressMonitor monitor) throws CoreException {  try {    ISchedulingRule buildRule=getRuleFactory().buildRule();  }  finally {    getWorkManager().checkIn(rule,monitor);  }}  }
class C{  public void registerElement(Label label) throws Exception {  String name=label.getName();  if (elements.get(name) != null) {    throw new ElementException("Duplicate annotation of name '%s' on %s",name,label);  }  if (!order.contains(name)) {    order.add(name);  }  if (label.isTextList()) {    list=label;  }  elements.put(name,label);}  }
class C{  public void handleLocatorStart(Locator locator) throws ManagementException {  if (!isServiceInitialised("handleLocatorCreation")) {    return;  }  ObjectName locatorMBeanName=MBeanJMXAdapter.getLocatorMBeanName(cacheImpl.getDistributedSystem().getDistributedMember());  LocatorMBeanBridge bridge=new LocatorMBeanBridge(locator);  LocatorMBean locatorMBean=new LocatorMBean(bridge);  ObjectName changedMBeanName=service.registerInternalMBean((LocatorMXBean)locatorMBean,locatorMBeanName);  service.federate(changedMBeanName,LocatorMXBean.class,true);  Notification notification=new Notification(JMXNotificationType.LOCATOR_STARTED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.LOCATOR_STARTED_PREFIX);  memberLevelNotifEmitter.sendNotification(notification);}  }
class C{  private void donateBitcoinOnClick(View view){  Intent i=new Intent(Intent.ACTION_VIEW);  i.setData(Uri.parse("bitcoin:" + mBitcoinAddress));  if (mDebug)   Timber.d("Attempting to donate bitcoin using URI: " + i.getDataString());  try {    startActivity(i);  } catch (  ActivityNotFoundException e) {    view.findViewById(R.id.donations__bitcoin_button).performLongClick();  }}  }
class C{  public static boolean isArrayByteBase64(byte[] arrayOctect){  arrayOctect=discardWhitespace(arrayOctect);  int length=arrayOctect.length;  if (length == 0) {    return true;  }  for (int i=0; i < length; i++) {    if (!isBase64(arrayOctect[i])) {      return false;    }  }  return true;}  }
class C{  public void collect(){  VM.assertions.fail("Collector has not implemented collectionPhase");}  }
class C{  private void releaseValidator(Schema schema,Validator vh){  if (vh == null)   return;  vh.reset();  ((Stack)validatorHandlerCache.get(schema)).push(vh);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static SnmpEngineId createEngineId(){  byte[] address=null;  byte[] engineid=new byte[13];  int iana=42;  long mask=0xFF;  long time=System.currentTimeMillis();  engineid[0]=(byte)((iana & 0xFF000000) >> 24);  engineid[0]|=0x80;  engineid[1]=(byte)((iana & 0x00FF0000) >> 16);  engineid[2]=(byte)((iana & 0x0000FF00) >> 8);  engineid[3]=(byte)(iana & 0x000000FF);  engineid[4]=0x05;  engineid[5]=(byte)((time & (mask << 56)) >>> 56);  engineid[6]=(byte)((time & (mask << 48)) >>> 48);  engineid[7]=(byte)((time & (mask << 40)) >>> 40);  engineid[8]=(byte)((time & (mask << 32)) >>> 32);  engineid[9]=(byte)((time & (mask << 24)) >>> 24);  engineid[10]=(byte)((time & (mask << 16)) >>> 16);  engineid[11]=(byte)((time & (mask << 8)) >>> 8);  engineid[12]=(byte)(time & mask);  return new SnmpEngineId(engineid);}  }
class C{  private static Pair<String,String> postIndexedASR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String index=environment.getNextVariableString();  final String tmpVar=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));  if (immediateNodeValue.equals("0")) {    final String isZeroCondition=environment.getNextVariableString();    final String tmpVar1=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));  } else {    final String tmpVar1=environment.getNextVariableString();    final String tmpVar2=environment.getNextVariableString();    final String tmpVar3=environment.getNextVariableString();    final String tmpVar4=environment.getNextVariableString();    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,"-" + immediateNodeValue,dw,tmpVar2));    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,"-" + immediateNodeValue,dw,tmpVar3));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));  }  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  protected <O>void testFMeasure(Database database,Clustering<?> clustering,double expected){  ByLabelClustering bylabel=new ByLabelClustering();  Clustering<Model> rbl=bylabel.run(database);  ClusterContingencyTable ct=new ClusterContingencyTable(true,false);  ct.process(clustering,rbl);  double score=ct.getPaircount().f1Measure();  if (logger.isVerbose()) {    logger.verbose(this.getClass().getSimpleName() + " score: " + score+ " expect: "+ expected);  }  assertEquals(this.getClass().getSimpleName() + ": Score does not match.",expected,score,0.0001);}  }
class C{  private void injectTestMailAdress() throws Exception {  Statement stmt=testDatabase.getDBconnection().createStatement();  stmt.execute("UPDATE platformuser SET email = '" + testMailAddress + "'");}  }
class C{  public T caseProjectDependencies(ProjectDependencies object){  return null;}  }
class C{  public int maxIndex(){  if (n == 0)   throw new NoSuchElementException("Priority queue underflow");  return pq[1];}  }
class C{  public ExpConstExpDemographicModel(Parameter N0Parameter,Parameter N1Parameter,Parameter growthRateParameter,Parameter timeParameter,Parameter relTimeParameter,Type units){  this(ExpConstExpDemographicModelParser.EXP_CONST_EXP_MODEL,N0Parameter,N1Parameter,growthRateParameter,timeParameter,relTimeParameter,units);}  }
class C{  public void update(byte[] buffer){  update(buffer,0,buffer.length);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static String readFileToString(File file,String encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toString(in,encoding);  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public boolean isRepresentationClassRemote(){  return DataTransferer.isRemote(representationClass);}  }
class C{  protected String formatPatternRun(final LogEvent event,final PatternRun run){switch (run.m_type) {case TYPE_RELATIVE_TIME:    return getRTime(event.getRelativeTime(),run.m_format);case TYPE_TIME:  return getTime(event.getTime(),run.m_format);case TYPE_THROWABLE:return getStackTrace(event.getThrowable(),run.m_format);case TYPE_MESSAGE:return getMessage(event.getMessage(),run.m_format);case TYPE_CATEGORY:return getCategory(event.getCategory(),run.m_format);case TYPE_PRIORITY:return getPriority(event.getPriority(),run.m_format);case TYPE_CONTEXT:return getContextMap(event.getContextMap(),run.m_format);case TYPE_THREAD:return getThread(run.m_format);default :throw new IllegalStateException("Unknown Pattern specification." + run.m_type);}}  }
class C{  @Override public Dimension preferredLayoutSize(Container parent){  Dimension rd, mbd;  Insets i=rootPane.getInsets();  Container contentPane=rootPane.getContentPane();  JMenuBar menuBar=rootPane.getJMenuBar();  if (contentPane.isVisible()) {    rd=contentPane.getPreferredSize();  } else {    rd=new Dimension(0,contentPane.getPreferredSize().height);  }  if (menuBar != null && menuBar.isVisible()) {    mbd=menuBar.getPreferredSize();  } else {    mbd=new Dimension(0,0);  }  return new Dimension(Math.max(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);}  }
class C{  public final void testIsStatePreserved2(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  byte[] encodedKeyCopy=encodedKey.clone();  PKCS8EncodedKeySpec meks=new PKCS8EncodedKeySpec(encodedKeyCopy);  byte[] ek=meks.getEncoded();  ek[3]=(byte)5;  byte[] ek1=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek1));}  }
class C{  public CasualtyDetails(){  super();  m_autoCalculated=true;}  }
class C{  public static void addGhoulLeggingsTexture(Item leggings,String res){  addGhoulLeggingsTexture(leggings,new ResourceLocation(res));}  }
class C{  public void addListener(ILabelProviderListener listener){}  }
class C{  public ViewAnimator repeatMode(@RepeatMode int repeatMode){  this.repeatMode=repeatMode;  return this;}  }
class C{  public static Rectangle2D convertFilterPrimitiveRegion(Element filterPrimitiveElement,Element filteredElement,GraphicsNode filteredNode,Rectangle2D defaultRegion,Rectangle2D filterRegion,BridgeContext ctx){  Node parentNode=filterPrimitiveElement.getParentNode();  Element filterElement=null;  if (parentNode != null && parentNode.getNodeType() == Node.ELEMENT_NODE) {    filterElement=(Element)parentNode;  }  return convertFilterPrimitiveRegion(filterPrimitiveElement,filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);}  }
class C{  public void actionPerformed(ActionEvent e){  String action=e.getActionCommand();  if (action == null || action.length() == 0)   return;  log.info("SubCurrentLine - actionPerformed: " + action);  if (action.equals("Plus")) {    if (orderLineId > 0) {      MOrderLine line=new MOrderLine(p_ctx,orderLineId,null);      if (line != null) {        line.setQty(line.getQtyOrdered().add(Env.ONE));        line.saveEx();        p_posPanel.updateInfo();      }    }  } else   if (action.equals("Minus")) {    if (orderLineId > 0) {      MOrderLine line=new MOrderLine(p_ctx,orderLineId,null);      if (line != null) {        line.setQty(line.getQtyOrdered().subtract(Env.ONE));        line.saveEx();        p_posPanel.updateInfo();      }    }  } else   if (e.getSource() == f_price) {    MOrderLine line=new MOrderLine(p_ctx,orderLineId,null);    if (line != null) {      line.setQty(new BigDecimal(f_price.getValue().toString()));      line.saveEx();      p_posPanel.updateInfo();    }  } else   if (e.getSource() == f_quantity && orderLineId > 0) {    MOrderLine line=new MOrderLine(p_ctx,orderLineId,null);    if (line != null) {      line.setQty(new BigDecimal(f_quantity.getValue().toString()));      line.saveEx();      p_posPanel.updateInfo();    }  }  if (action.equals("Product")) {    setParameter();    QueryProduct qt=new QueryProduct(p_posPanel);    qt.setQueryData(m_M_PriceList_Version_ID,m_M_Warehouse_ID);    qt.setVisible(true);    findProduct();    int row=m_table.getSelectedRow();    if (row < 0)     row=0;    m_table.getSelectionModel().setSelectionInterval(row,row);    m_table.scrollRectToVisible(m_table.getCellRect(row,1,true));  } else   if (e.getSource() == f_name)   findProduct();  if ("Previous".equalsIgnoreCase(e.getActionCommand())) {    int rows=m_table.getRowCount();    if (rows == 0)     return;    int row=m_table.getSelectedRow();    row--;    if (row < 0)     row=0;    m_table.getSelectionModel().setSelectionInterval(row,row);    m_table.scrollRectToVisible(m_table.getCellRect(row,1,true));    return;  } else   if ("Next".equalsIgnoreCase(e.getActionCommand())) {    int rows=m_table.getRowCount();    if (rows == 0)     return;    int row=m_table.getSelectedRow();    row++;    if (row >= rows)     row=rows - 1;    m_table.getSelectionModel().setSelectionInterval(row,row);    m_table.scrollRectToVisible(m_table.getCellRect(row,1,true));    return;  } else   if (action.equals("Cancel")) {    int rows=m_table.getRowCount();    if (rows != 0) {      int row=m_table.getSelectedRow();      if (row != -1) {        if (p_posPanel.m_order != null)         p_posPanel.m_order.deleteLine(m_table.getSelectedRowKey());        setQty(null);        setPrice(null);        orderLineId=0;      }    }  }  p_posPanel.updateInfo();}  }
class C{  public Domain findDomainByID(AppContext ctx,DomainPK domainPK) throws ScopeException {  if (domainPK.getParent() == null) {    throw new ScopeException("invalid domain PK, parent cannot be null");  }  ProjectDynamicContent content=getProjectContent(ctx,domainPK.getParent(),true);  return content.findDomainByID(domainPK);}  }
class C{  public String shortestMatch(String input){  TrieNode node=root;  for (int i=input.length() - 1; i >= 0; i--) {    node=node.getChild(input.charAt(i));    if (node == null)     return null;    if (node.isTerminal())     return input.substring(i);  }  return null;}  }
class C{  protected AbstractSiteMap processXml(URL sitemapUrl,InputSource is) throws UnknownFormatException {  Document doc=null;  try {    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();    doc=dbf.newDocumentBuilder().parse(is);  } catch (  Exception e) {    LOG.debug(e.toString(),e);    throw new UnknownFormatException("Error parsing XML for: " + sitemapUrl);  }  NodeList nodeList=doc.getElementsByTagName("sitemapindex");  if (nodeList.getLength() > 0) {    nodeList=doc.getElementsByTagName("sitemap");    return parseSitemapIndex(sitemapUrl,nodeList);  } else   if (doc.getElementsByTagName("urlset").getLength() > 0) {    return parseXmlSitemap(sitemapUrl,doc);  } else   if (doc.getElementsByTagName("link").getLength() > 0) {    return parseSyndicationFormat(sitemapUrl,doc);  }  throw new UnknownFormatException("Unknown XML format for: " + sitemapUrl);}  }
class C{  private int intLength(){  return (bitLength() >>> 5) + 1;}  }
class C{  protected void doWork(){  m_summary=new StringBuffer();  processEMail();  findSalesRep();  processStatus();  processRequests();  processECR();  int no=m_model.deleteLog();  m_summary.append("Logs deleted=").append(no);  MRequestProcessorLog pLog=new MRequestProcessorLog(m_model,m_summary.toString());  pLog.setReference("#" + String.valueOf(p_runCount) + " - "+ TimeUtil.formatElapsed(new Timestamp(p_startWork)));  pLog.saveEx();}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  super.startElement(handler,uri,localName,rawName,attributes);  try {    XSLTElementDef def=getElemDef();    Class classObject=def.getClassObject();    ElemTemplateElement elem=null;    try {      elem=(ElemTemplateElement)classObject.newInstance();      elem.setDOMBackPointer(handler.getOriginatingNode());      elem.setLocaterInfo(handler.getLocator());      elem.setPrefixes(handler.getNamespaceSupport());    } catch (    InstantiationException ie) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMTMPL,null,ie);    }catch (    IllegalAccessException iae) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMTMPL,null,iae);    }    setPropertiesFromAttributes(handler,rawName,attributes,elem);    appendAndPush(handler,elem);  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public static void updateTempMLConfusionMatrix(MultilabelResult r,String[] classNames,List<String> actualLabelsList,List<String> predictedLabelsList,HashMap<String,Map<String,Integer>> tempM){  for (int i=0; i < r.getGoldstandard().length; i++) {    int[] prediction=r.getPredictionsBipartition()[i];    int[] actual=r.getGoldstandard()[i];    String predString=ReportUtils.doubleArrayToClassNames(prediction,classNames,';');    String actString=ReportUtils.doubleArrayToClassNames(actual,classNames,';');    if (!predictedLabelsList.contains(predString)) {      predictedLabelsList.add(predString);    }    if (tempM.get(actString) != null) {      if (tempM.get(actString).get(predString) != null) {        tempM.get(actString).put(predString,tempM.get(actString).get(predString) + 1);      } else {        tempM.get(actString).put(predString,1);      }    } else {      HashMap<String,Integer> h=new HashMap<String,Integer>();      h.put(predString,1);      tempM.put(actString,h);      actualLabelsList.add(actString);    }  }}  }
class C{  public static FilePath[] sortPathsFromOutermost(FilePath[] files){  return sortPaths(files,1);}  }
class C{  public static IDownloaderClient CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  public static String translateCategoryToName(String category){switch (category) {case "cmdi":    return "Command Injection";case "xss":  return "Cross-Site Scripting";case "ldapi":return "LDAP Injection";case "headeri":return "Header Injection";case "securecookie":return "Insecure Cookie";case "pathtraver":return "Path Traversal";case "crypto":return "Weak Encryption Algorithm";case "hash":return "Weak Hash Algorithm";case "weakrand":return "Weak Random Number";case "sqli":return "SQL Injection";case "hqli":return "Hibernate Injection";case "trustbound":return "Trust Boundary Violation";case "xpathi":return "XPath Injection";default :return "Unknown Vulnerability: " + category;}}  }
class C{  public void tabSelected(){}  }
class C{  private void bluetoothSensorTest(int sensorTypeStringId,String nameString,boolean isUnderRecording){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_sensor));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_sensor_type));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(sensorTypeStringId));  checkPairedSensorsNumber(nameString);  EndToEndTestUtils.SOLO.clickOnText(nameString);  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.SOLO.goBack();  if (isUnderRecording) {    assertTrue(checkSensorsStatus_underRecording());  } else {    assertTrue(checkSensorsStatus_notRecording());  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Content.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);  builder.addElement(Feed.KEY);  builder.addElement(Entry.KEY);  registry.adapt(Content.KEY,KIND,KEY);}  }
class C{  public CommandLine add(String... args){  if (args != null && args.length > 0) {    Collections.addAll(line,args);  }  return this;}  }
class C{  boolean isDefined(){  return defined;}  }
class C{  public void testMoveRenameDirectory() throws Exception {  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBSUBDIR_NEW);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public void write(String str,int off,int len) throws IOException {  se.write(str,off,len);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  return (uiMgr == null || uiMgr.getRootPanel() == null || uiMgr.getRootPanel().getRenderEngine() == null || !uiMgr.getRootPanel().getRenderEngine().canSupportAnimations()) ? Boolean.FALSE : Boolean.TRUE;}  }
class C{  public GroupCategory(String id,String name,String description){  Assert.isNotNull(id);  Assert.isNotNull(name);  Assert.isNotNull(description);  fId=id;  fName=name;  fDescription=description;}  }
class C{  void run() throws Exception {  File javaHome=new File(System.getProperty("java.home"));  if (javaHome.getName().equals("jre"))   javaHome=javaHome.getParentFile();  File javadoc=new File(new File(javaHome,"bin"),"javadoc");  File testSrc=new File(System.getProperty("test.src"));  String thisClassName=TestStdDoclet.class.getName();  Process p=new ProcessBuilder().command(javadoc.getPath(),"-J-Xbootclasspath:" + System.getProperty("sun.boot.class.path"),"-package",new File(testSrc,thisClassName + ".java").getPath()).redirectErrorStream(true).start();  int actualDocletWarnCount=0;  int reportedDocletWarnCount=0;  BufferedReader in=new BufferedReader(new InputStreamReader(p.getInputStream()));  try {    String line;    while ((line=in.readLine()) != null) {      System.err.println(line);      if (line.contains("DoesNotExist"))       actualDocletWarnCount++;      if (line.matches("[0-9]+ warning(s)?"))       reportedDocletWarnCount=Integer.valueOf(line.substring(0,line.indexOf(" ")));    }  }  finally {    in.close();  }  int rc=p.waitFor();  if (rc != 0)   System.err.println("javadoc failed, rc:" + rc);  int expectedDocletWarnCount=2;  checkEqual("actual",actualDocletWarnCount,"expected",expectedDocletWarnCount);  checkEqual("actual",actualDocletWarnCount,"reported",reportedDocletWarnCount);}  }
class C{  public void testGetOutputBooksOperador1(){  ISWebServiceBooksSoap client=(ISWebServiceBooksSoap)this.applicationContext.getBean("clientWebServiceBooks");  Security security=new Security();  UsernameTokenClass value=new UsernameTokenClass();  value.setUsername("operador1");  value.setPassword("operador1");  value.setOfficeCode("001");  security.setUsernameToken(value);  ArrayOfWSBook result=client.wsGetOutputBooks(security);  assertNotNull(result);  assertEquals(1,result.getWSBook().size());  WSBook wsBook=(WSBook)CollectionUtils.find(result.getWSBook(),new BeanPropertyValueEqualsPredicate("id",2));  assertNotNull(wsBook);  assertEquals(2,wsBook.getId());  assertEquals("Libro de Salida",wsBook.getName());  assertEquals(2,wsBook.getType());  assertTrue(wsBook.isCanCreate());  assertTrue(wsBook.isCanModify());  assertFalse(wsBook.isReadOnly());}  }
class C{  public IPv4AddressValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId,REGEX);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.738 -0500",hash_original_method="1F181158365375850544D6C69D49DA70",hash_generated_method="4C88D912CF4A5C65E82F69DF5E54C385") public void removeQValue(){  removeParameter("q");}  }
class C{  public void removeJavaReferenceFor(int native_object){  T delegate=getDelegate(native_object);  if (Debug.DEBUG) {    System.out.println("Removing main Java ref on " + mClass.getSimpleName() + " with int "+ native_object);  }  mJavaReferences.remove(delegate);}  }
class C{  public ConcurrentSkipListSet(SortedSet<E> s){  m=new ConcurrentSkipListMap<E,Object>(s.comparator());  addAll(s);}  }
class C{  public int findNonWhitespaceForwardInAnyPartition(int position,int bound){  return scanForward(position,bound,_nonWS);}  }
class C{  private void adjustSystemClock(String xml){  final String PUSHCLOCK="/usr/bin/buendia-pushclock";  if (!new File(PUSHCLOCK).exists()) {    getLog().warn(PUSHCLOCK + " is missing; not adjusting the clock");    return;  }  try {    Document doc=XmlUtil.parse(xml);    Date date=getEncounterDatetime(doc);    getLog().info("encounter_datetime parsed as " + date);    long timeSecs=(date.getTime() / 1000) + 60 + 60;    Process pushClock=Runtime.getRuntime().exec(new String[]{PUSHCLOCK,"" + timeSecs});    int code=pushClock.waitFor();    getLog().info("buendia-pushclock " + timeSecs + " -> exit code "+ code);  } catch (  SAXException|IOException|InterruptedException e) {    getLog().error("adjustSystemClock failed:",e);  }}  }
class C{  public void run(){  for (int x=0; x < n_incoming; x++) {    try {      inSockets[x]=serverSocket.accept();      DataOutputStream dataOutput;      if (compressedCommunication) {        OutputStream compressedo=Output.makeCompressingOutputStream(inSockets[x].getOutputStream());        InputStream compressedi=Output.makeCompressingInputStream(inSockets[x].getInputStream());        if (compressedi == null || compressedo == null)         state.output.fatal("You do not appear to have JZLib installed on your system, and so may must have compression turned off for IslandExchange.  " + "To get JZLib, download from the ECJ website or from http://www.jcraft.com/jzlib/");        dataInput[x]=new DataInputStream(compressedi);        dataOutput=new DataOutputStream(compressedo);      } else {        dataInput[x]=new DataInputStream(inSockets[x].getInputStream());        dataOutput=new DataOutputStream(inSockets[x].getOutputStream());      }      dataOutput.writeUTF(myId);      dataOutput.flush();      incomingIds[x]=dataInput[x].readUTF().trim();      state.output.message("Island " + incomingIds[x] + " connected to my mailbox");      inSockets[x].setSoTimeout(CHECK_TIMEOUT);      running[x]=true;    } catch (    IOException e) {      running[x]=false;      state.output.fatal("An exception was generated while creating communication structures for island " + x + ".  Here it is: "+ e);    }  }  state.output.message("All islands have connected to my client.");  boolean shouldExit=false;  do {    try {      Thread.sleep(SLEEP_BETWEEN_CHECKING_FOR_IMMIGRANTS);    } catch (    InterruptedException e) {    }    for (int x=0; x < n_incoming; x++) {      if (running[x]) {        try {          while (true) {            int subpop=dataInput[x].readInt();            try {              inSockets[x].setSoTimeout(0);            } catch (            SocketException e) {              state.output.warning("Could not set the socket to blocking while receiving individuals in the mailbox.");            }            int how_many_to_come=dataInput[x].readInt();            if (chatty)             state.output.message("Receiving " + how_many_to_come + " immigrants for subpopulation "+ subpop+ " from island "+ incomingIds[x]);synchronized (immigrants) {              if (nImmigrants[subpop] == 0)               nextIndexPosition[subpop]=0;              for (int ind=0; ind < how_many_to_come; ind++) {                try {                  immigrants[subpop][nextIndexPosition[subpop]]=state.population.subpops[subpop].species.newIndividual(state,dataInput[x]);                  if (nextIndexPosition[subpop] == immigrants[subpop].length - 1)                   nextIndexPosition[subpop]=0; else                   nextIndexPosition[subpop]++;                  if (nImmigrants[subpop] < immigrants[subpop].length)                   nImmigrants[subpop]++;                } catch (                IOException e) {                  state.output.message("IO exception while communicating with an island");                  running[x]=false;                  continue;                }catch (                NumberFormatException e) {                  state.output.message("IO exception while communicating with an island");                  running[x]=false;                  continue;                }              }            }            try {              inSockets[x].setSoTimeout(CHECK_TIMEOUT);            } catch (            SocketException e) {              state.output.warning("Could not set the socket to non-blocking while receiving individuals in the mailbox.");            }          }        } catch (        InterruptedIOException e) {        }catch (        IOException e) {          state.output.message("IO exception while communicating with an island");          running[x]=false;        }catch (        NumberFormatException e) {          state.output.message("Socket closed");          running[x]=false;        }      }    }synchronized (syncVar) {      shouldExit=syncVar[0];    }  } while (!shouldExit);  try {    serverSocket.close();  } catch (  IOException e) {  }  for (int x=0; x < n_incoming; x++) {    try {      inSockets[x].close();    } catch (    IOException e) {      continue;    }  }}  }
class C{  private void assertExtendSignaturePossible() throws DSSException {  final SignatureLevel signatureLevel=params.getSignatureLevel();  if (SignatureLevel.XAdES_BASELINE_LT.equals(signatureLevel) && xadesSignature.hasLTAProfile()) {    final String exceptionMessage="Cannot extend signature. The signedData is already extended with [%s].";    throw new DSSException(String.format(exceptionMessage,"XAdES LTA"));  }}  }
class C{  @Override public void inputChanged(Viewer viewer,Object oldInput,Object newInput){}  }
class C{  @Override public boolean offer(final T data){  fromStream(Stream.of(data));  return true;}  }
class C{  private void playBounceSound(float impulse){  if (impulse > 80) {    mSoundPool.play(mSoundBounceLarge,1,1,0,0,1.0f);  } else   if (impulse > 60) {    mSoundPool.play(mSoundBounceMed,1,1,0,0,1.0f);  } else   if (impulse > 30) {    mSoundPool.play(mSoundBounceSmall,1,1,0,0,1.0f);  }}  }
class C{  @Override public QueryNodeWithBindingSet optimize(final AST2BOpContext context,final QueryNodeWithBindingSet input){  final StaticAnalysisStats saStats=context.getStaticAnalysisStats();  final long startLoop=System.nanoTime();  final IQueryNode queryNode=input.getQueryNode();  final IBindingSet[] bindingSets=input.getBindingSets();  if (DEBUG)   log.debug("Original AST:\n" + queryNode);  QueryNodeWithBindingSet tmp=new QueryNodeWithBindingSet((IQueryNode)BOpUtility.deepCopy((BOp)queryNode),bindingSets);  for (  IASTOptimizer opt : this) {    final long startOpt=System.nanoTime();    if (INFO)     log.info("Applying: " + opt);    tmp=opt.optimize(context,tmp);    if (queryNode == null)     throw new AssertionError("Optimized discarded query: " + opt);    if (DEBUG)     log.debug("Rewritten AST:\n" + tmp.getQueryNode());    saStats.registerOptimizerCall(opt.getClass().getSimpleName(),System.nanoTime() - startOpt);  }  saStats.registerOptimizerLoopCall(System.nanoTime() - startLoop);  return tmp;}  }
class C{  static private int countOpenParens(String s,int pos){  java.util.regex.Pattern p=java.util.regex.Pattern.compile("\\(");  java.util.regex.Matcher m=p.matcher(s.subSequence(0,pos));  int numParens=0;  while (m.find()) {    if (isInsideCharClass(s,m.start())) {      continue;    }    if (isEscapedChar(s,m.start()))     continue;    if (!isNoncapturingParen(s,m.start())) {      numParens++;    }  }  return numParens;}  }
class C{  @Override public void flush(){}  }
class C{  public MessageAckHandler(ImplDiscordAPI api){  super(api,true,"MESSAGE_ACK");}  }
class C{  public int indexOf(GenericObject gobj){  return hlist.indexOf(gobj);}  }
class C{  @Override public boolean clickAndWaitForNewWindow(String obj,long timeout) throws UiObjectNotFoundException {  return getUiObject(obj).clickAndWaitForNewWindow(timeout);}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer(ipAddress.toString());  result.append("/");  result.append(extendedNetworkPrefix);  return result.toString();}  }
class C{  public VcpcFastRunner(GraphWrapper graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public static byte[] createHeader(long reqId,IgfsIpcCommand cmd){  assert cmd != null;  byte[] hdr=new byte[HEADER_SIZE];  U.longToBytes(reqId,hdr,0);  U.intToBytes(cmd.ordinal(),hdr,8);  return hdr;}  }
class C{  public boolean update(long elapsedTime){  this.frames++;  this.time+=elapsedTime;  if (this.time >= Fps.ONE_SECOND_IN_NANOSECONDS) {synchronized (this) {      this.fps=this.frames * Fps.ONE_SECOND_IN_NANOSECONDS / this.time;    }    this.frames=0;    this.time=0;    return true;  }  return false;}  }
class C{  protected static Pair<String,String> asrRegister(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  final String isZeroCondition=environment.getNextVariableString();  final String isLessCondition=environment.getNextVariableString();  final String isGtEqCondition=environment.getNextVariableString();  final String shifterCarryOutTmp1=environment.getNextVariableString();  final String shifterCarryOutTmp2=environment.getNextVariableString();  final String shifterCarryOutTmp3=environment.getNextVariableString();  final String shifterCarryOutTmp4=environment.getNextVariableString();  final String shifterOperandTmp1=environment.getNextVariableString();  final String shifterOperandTmp2=environment.getNextVariableString();  final String shifterOperandTmp3=environment.getNextVariableString();  final String shifterOperandTmp4=environment.getNextVariableString();  final String tmpRsRegister=environment.getNextVariableString();  final String negativeTmpRsRegister=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  final String tmpVar4=environment.getNextVariableString();  final String tmpVar5=environment.getNextVariableString();  final String tmpVar6=environment.getNextVariableString();  final String tmpVar7=environment.getNextVariableString();  final String tmpVar8=environment.getNextVariableString();  final String tmpVar9=environment.getNextVariableString();  final String tmpVar10=environment.getNextVariableString();  final String tmpVar11=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,registerNodeValue2,dWordSize,String.valueOf(0xFFL),dWordSize,tmpRsRegister));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,zeroSet,dWordSize,tmpRsRegister,dWordSize,negativeTmpRsRegister));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpRsRegister,byteSize,isZeroCondition));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,"C",byteSize,isZeroCondition,byteSize,shifterCarryOutTmp1));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,String.valueOf(0),byteSize,isZeroCondition,dWordSize,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar1,dWordSize,registerNodeValue2,dWordSize,shifterOperandTmp1));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpRsRegister,dWordSize,String.valueOf(0xFFFFFFE0L),dWordSize,tmpVar2));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpVar2,byteSize,isLessCondition));  instructions.add(ReilHelpers.createAdd(baseOffset++,dWordSize,registerNodeValue1,dWordSize,bitMaskHighestBitSet,dWordSize,tmpVar3));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,tmpVar3,dWordSize,negativeTmpRsRegister,dWordSize,tmpVar4));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,bitMaskHighestBitSet,dWordSize,negativeTmpRsRegister,dWordSize,tmpVar5));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,tmpVar4,dWordSize,tmpVar5,dWordSize,tmpVar6));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,zeroSet,byteSize,isLessCondition,dWordSize,tmpVar7));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar6,dWordSize,tmpVar7,dWordSize,shifterOperandTmp2));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,tmpRsRegister,byteSize,oneSet,dWordSize,tmpVar8));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,zeroSet,dWordSize,tmpVar8,dWordSize,tmpVar8));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,tmpVar8,dWordSize,tmpVar9));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar9,byteSize,isLessCondition,byteSize,shifterCarryOutTmp2));  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,isZeroCondition,byteSize,isLessCondition,byteSize,tmpVar10));  instructions.add(ReilHelpers.createBisz(baseOffset++,byteSize,tmpVar10,byteSize,isGtEqCondition));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,minusThirtyOneSet,byteSize,tmpVar11));  instructions.add(ReilHelpers.createSub(baseOffset++,byteSize,zeroSet,byteSize,isGtEqCondition,dWordSize,shifterOperandTmp3));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,tmpVar11,byteSize,isGtEqCondition,byteSize,shifterCarryOutTmp3));  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp1,byteSize,shifterCarryOutTmp2,byteSize,shifterCarryOutTmp4));  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp3,byteSize,shifterCarryOutTmp4,byteSize,shifterCarryOut));  instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,shifterOperandTmp1,dWordSize,shifterOperandTmp2,dWordSize,shifterOperandTmp4));  instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,shifterOperandTmp3,dWordSize,shifterOperandTmp4,dWordSize,shifterOperand));  return new Pair<String,String>(shifterOperand,shifterCarryOut);}  }
class C{  public static ExceptionlessOutputStream openBufferedStream(URL url){  if (!url.getProtocol().equals("file")) {    System.err.println("Can't open URL with protocol '" + url.getProtocol() + "' for output.");    new Exception().printStackTrace();    System.exit(1);  }  return openBufferedStream(url.getFile());}  }
class C{  public static JobReturn runJob(MRJobInstruction inst,String[] dataGenInstructions,String instructionsInMapper,String aggInstructionsInReducer,String otherInstructionsInReducer,int numReducers,int replication,byte[] resultIndexes,String dimsUnknownFilePrefix,String[] outputs,OutputInfo[] outputInfos) throws Exception {  JobConf job=new JobConf(DataGenMR.class);  job.setJobName("DataGen-MR");  MRJobConfiguration.setMatrixValueClass(job,true);  byte[] realIndexes=new byte[dataGenInstructions.length];  for (byte b=0; b < realIndexes.length; b++)   realIndexes[b]=b;  String[] inputs=new String[dataGenInstructions.length];  InputInfo[] inputInfos=new InputInfo[dataGenInstructions.length];  long[] rlens=new long[dataGenInstructions.length];  long[] clens=new long[dataGenInstructions.length];  int[] brlens=new int[dataGenInstructions.length];  int[] bclens=new int[dataGenInstructions.length];  FileSystem fs=FileSystem.get(job);  String dataGenInsStr="";  int numblocks=0;  int maxbrlen=-1, maxbclen=-1;  double maxsparsity=-1;  for (int i=0; i < dataGenInstructions.length; i++) {    dataGenInsStr=dataGenInsStr + Lop.INSTRUCTION_DELIMITOR + dataGenInstructions[i];    MRInstruction mrins=MRInstructionParser.parseSingleInstruction(dataGenInstructions[i]);    MRINSTRUCTION_TYPE mrtype=mrins.getMRInstructionType();    DataGenMRInstruction genInst=(DataGenMRInstruction)mrins;    rlens[i]=genInst.getRows();    clens[i]=genInst.getCols();    brlens[i]=genInst.getRowsInBlock();    bclens[i]=genInst.getColsInBlock();    maxbrlen=Math.max(maxbrlen,brlens[i]);    maxbclen=Math.max(maxbclen,bclens[i]);    if (mrtype == MRINSTRUCTION_TYPE.Rand) {      RandInstruction randInst=(RandInstruction)mrins;      inputs[i]=LibMatrixDatagen.generateUniqueSeedPath(genInst.getBaseDir());      maxsparsity=Math.max(maxsparsity,randInst.getSparsity());      FSDataOutputStream fsOut=fs.create(new Path(inputs[i]));      PrintWriter pw=new PrintWriter(fsOut);      StringBuilder sb=new StringBuilder();      Well1024a bigrand=LibMatrixDatagen.setupSeedsForRand(randInst.getSeed());      long[] nnz=LibMatrixDatagen.computeNNZperBlock(rlens[i],clens[i],brlens[i],bclens[i],randInst.getSparsity());      int nnzIx=0;      for (long r=0; r < rlens[i]; r+=brlens[i]) {        long curBlockRowSize=Math.min(brlens[i],(rlens[i] - r));        for (long c=0; c < clens[i]; c+=bclens[i]) {          long curBlockColSize=Math.min(bclens[i],(clens[i] - c));          sb.append((r / brlens[i]) + 1);          sb.append(',');          sb.append((c / bclens[i]) + 1);          sb.append(',');          sb.append(curBlockRowSize);          sb.append(',');          sb.append(curBlockColSize);          sb.append(',');          sb.append(nnz[nnzIx++]);          sb.append(',');          sb.append(bigrand.nextLong());          pw.println(sb.toString());          sb.setLength(0);          numblocks++;        }      }      pw.close();      fsOut.close();      inputInfos[i]=InputInfo.TextCellInputInfo;    } else     if (mrtype == MRINSTRUCTION_TYPE.Seq) {      SeqInstruction seqInst=(SeqInstruction)mrins;      inputs[i]=genInst.getBaseDir() + System.currentTimeMillis() + ".seqinput";      maxsparsity=1.0;      double from=seqInst.fromValue;      double to=seqInst.toValue;      double incr=seqInst.incrValue;      incr=LibMatrixDatagen.updateSeqIncr(from,to,incr);      boolean neg=(from > to);      if (incr == 0)       throw new DMLRuntimeException("Invalid value for \"increment\" in seq().");      if (neg != (incr < 0))       throw new DMLRuntimeException("Wrong sign for the increment in a call to seq()");      long numrows=1 + (long)Math.floor((to - from) / incr);      if (rlens[i] > 0) {        if (numrows != rlens[i])         throw new DMLRuntimeException("Unexpected error while processing sequence instruction. Expected number of rows does not match given number: " + rlens[i] + " != "+ numrows);      } else {        rlens[i]=numrows;      }      if (clens[i] > 0 && clens[i] != 1)       throw new DMLRuntimeException("Unexpected error while processing sequence instruction. Number of columns (" + clens[i] + ") must be equal to 1."); else       clens[i]=1;      FSDataOutputStream fsOut=fs.create(new Path(inputs[i]));      PrintWriter pw=new PrintWriter(fsOut);      StringBuilder sb=new StringBuilder();      double temp=from;      double block_from, block_to;      for (long r=0; r < rlens[i]; r+=brlens[i]) {        long curBlockRowSize=Math.min(brlens[i],(rlens[i] - r));        long bid_i=((r / brlens[i]) + 1);        long bid_j=1;        block_from=temp;        block_to=temp + (curBlockRowSize - 1) * incr;        temp=block_to + incr;        sb.append(bid_i);        sb.append(',');        sb.append(bid_j);        sb.append(',');        sb.append(block_from);        sb.append(',');        sb.append(block_to);        sb.append(',');        sb.append(incr);        pw.println(sb.toString());        sb.setLength(0);        numblocks++;      }      pw.close();      fsOut.close();      inputInfos[i]=InputInfo.TextCellInputInfo;    } else {      throw new DMLRuntimeException("Unexpected Data Generation Instruction Type: " + mrtype);    }  }  dataGenInsStr=dataGenInsStr.substring(1);  RunningJob runjob;  MatrixCharacteristics[] stats;  try {    MRJobConfiguration.setBlocksSizes(job,realIndexes,brlens,bclens);    MRJobConfiguration.setUpMultipleInputs(job,realIndexes,inputs,inputInfos,brlens,bclens,false,ConvertTarget.BLOCK);    MRJobConfiguration.setMatricesDimensions(job,realIndexes,rlens,clens);    MRJobConfiguration.setDimsUnknownFilePrefix(job,dimsUnknownFilePrefix);    MRJobConfiguration.setBlocksSizes(job,realIndexes,brlens,bclens);    MRJobConfiguration.setRandInstructions(job,dataGenInsStr);    MRJobConfiguration.setInstructionsInMapper(job,instructionsInMapper);    MRJobConfiguration.setAggregateInstructions(job,aggInstructionsInReducer);    MRJobConfiguration.setInstructionsInReducer(job,otherInstructionsInReducer);    job.setInt(MRConfigurationNames.DFS_REPLICATION,replication);    DMLConfig config=ConfigurationManager.getDMLConfig();    DMLAppMasterUtils.setupMRJobRemoteMaxMemory(job,config);    MRJobConfiguration.setupCustomMRConfigurations(job,config);    int capacity=InfrastructureAnalyzer.getRemoteParallelMapTasks();    long dfsblocksize=InfrastructureAnalyzer.getHDFSBlockSize();    if (InfrastructureAnalyzer.isYarnEnabled())     capacity=(int)Math.max(capacity,YarnClusterAnalyzer.getNumCores());    int nmapers=Math.max(Math.min((int)(8 * maxbrlen * maxbclen* (long)numblocks / dfsblocksize),capacity),1);    job.setNumMapTasks(nmapers);    HashSet<Byte> mapoutputIndexes=MRJobConfiguration.setUpOutputIndexesForMapper(job,realIndexes,dataGenInsStr,instructionsInMapper,null,aggInstructionsInReducer,otherInstructionsInReducer,resultIndexes);    MatrixChar_N_ReducerGroups ret=MRJobConfiguration.computeMatrixCharacteristics(job,realIndexes,dataGenInsStr,instructionsInMapper,null,aggInstructionsInReducer,null,otherInstructionsInReducer,resultIndexes,mapoutputIndexes,false);    stats=ret.stats;    MRJobConfiguration.setNumReducers(job,ret.numReducerGroups,numReducers);    if (LOG.isTraceEnabled())     inst.printCompleteMRJobInstruction(stats);    byte[] resultDimsUnknown=new byte[resultIndexes.length];    for (int i=0; i < resultIndexes.length; i++) {      if (stats[i].getRows() == -1 || stats[i].getCols() == -1) {        resultDimsUnknown[i]=(byte)1;      } else {        resultDimsUnknown[i]=(byte)0;      }    }    boolean mayContainCtable=instructionsInMapper.contains("ctabletransform") || instructionsInMapper.contains("groupedagg");    MRJobConfiguration.setUpMultipleOutputs(job,resultIndexes,resultDimsUnknown,outputs,outputInfos,true,mayContainCtable);    job.setMapperClass(DataGenMapper.class);    if (numReducers == 0) {      job.setMapOutputKeyClass(Writable.class);      job.setMapOutputValueClass(Writable.class);    } else {      job.setMapOutputKeyClass(MatrixIndexes.class);      job.setMapOutputValueClass(TaggedMatrixBlock.class);    }    if (numReducers != 0 && aggInstructionsInReducer != null && !aggInstructionsInReducer.isEmpty())     job.setCombinerClass(GMRCombiner.class);    job.setReducerClass(GMRReducer.class);    MatrixCharacteristics[] inputStats=new MatrixCharacteristics[inputs.length];    for (int i=0; i < inputs.length; i++) {      inputStats[i]=new MatrixCharacteristics(rlens[i],clens[i],brlens[i],bclens[i]);    }    MRJobConfiguration.setUniqueWorkingDir(job);    runjob=JobClient.runJob(job);    Group group=runjob.getCounters().getGroup(MRJobConfiguration.NUM_NONZERO_CELLS);    for (int i=0; i < resultIndexes.length; i++) {      stats[i].setNonZeros(group.getCounter(Integer.toString(i)));    }    String dir=dimsUnknownFilePrefix + "/" + runjob.getID().toString()+ "_dimsFile";    stats=MapReduceTool.processDimsFiles(dir,stats);    MapReduceTool.deleteFileIfExistOnHDFS(dir);  }  finally {    for (    String input : inputs)     MapReduceTool.deleteFileIfExistOnHDFS(new Path(input),job);  }  return new JobReturn(stats,outputInfos,runjob.isSuccessful());}  }
class C{  public static <T>Flux<T> sorted(Flux<T> flux){  return Flux.fromIterable(null);}  }
class C{  public void paint(Graphics g){  Collection values=graphics.values();  Iterator iter=values.iterator();  while (iter.hasNext()) {    OMGraphic graphic=(OMGraphic)iter.next();    graphic.render(g);  }}  }
class C{  public ComputeState createInstance() throws Exception {  ManagedObjectReference vm;  if (isOvfDeploy()) {    vm=deployOvf();    this.vm=vm;  } else {    vm=createVm();    if (vm == null) {      return null;    }    this.vm=vm;  }  ComputeState state=new ComputeState();  state.resourcePoolLink=VimUtils.firstNonNull(this.state.resourcePoolLink,this.parent.resourcePoolLink);  return state;}  }
class C{  public TLongIntHashMap(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public void addClient(final HttpClient client){  Check.notNull(client,"client");synchronized (clientWeakReferences) {    clientWeakReferences.add(new WeakReference(client));  }}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs){  this(context,attrs,R.attr.switchPreferenceStyle);}  }
class C{  @ConstructorProperties({"target"}) public OverlayLayout(Container target){  this.target=target;}  }
class C{  final Type capture(){  Type superclass=getClass().getGenericSuperclass();  checkArgument(superclass instanceof ParameterizedType,"%s isn't parameterized",superclass);  return ((ParameterizedType)superclass).getActualTypeArguments()[0];}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static int base10toBase100SortableInt(char[] arr,int start,int end,char[] out,int outend){  int wpos=outend;  boolean neg=false;  --end;  while (start <= end) {    char val=arr[start];    if (val == '-')     neg=!neg; else     if (val >= '1' && val <= '9')     break;    start++;  }  outer:   while (start <= end) {switch (arr[end]) {case ' ':case '\t':case '\n':case '\r':      end--;    break;default :  break outer;}}int hundreds=0;while (start <= end) {int val=arr[end--];val=val - '0';if (start <= end) {int val2=arr[end--];val=val + (val2 - '0') * 10;}out[--wpos]=neg ? (char)(99 - val) : (char)val;}hundreds+=outend - wpos;out[--wpos]=neg ? (char)(ZERO_EXPONENT - hundreds) : (char)(ZERO_EXPONENT + hundreds);return outend - wpos;}  }
class C{  public void closePrepare(int statementId) throws IOException {  byte[] packetBuffer;  if (useCompression) {    packetBuffer=new byte[12];    packetBuffer[0]=(byte)5;    packetBuffer[7]=Packet.COM_STMT_CLOSE;    packetBuffer[8]=(byte)(statementId & 0xff);    packetBuffer[9]=(byte)((statementId >> 8) & 0xff);    packetBuffer[10]=(byte)((statementId >> 16) & 0xff);    packetBuffer[11]=(byte)((statementId >> 24) & 0xff);  } else {    packetBuffer=new byte[9];    packetBuffer[0]=(byte)5;    packetBuffer[4]=Packet.COM_STMT_CLOSE;    packetBuffer[5]=(byte)(statementId & 0xff);    packetBuffer[6]=(byte)((statementId >> 8) & 0xff);    packetBuffer[7]=(byte)((statementId >> 16) & 0xff);    packetBuffer[8]=(byte)((statementId >> 24) & 0xff);  }  if (logger.isTraceEnabled()) {    logger.trace("send packet seq:" + seqNo + " length:"+ 5+ " data:"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog));  }  outputStream.write(packetBuffer);}  }
class C{  protected void add(Instance inst){  for (int i=0; i < m_Specifiers.size(); i++) {    Instance specifier=m_Specifiers.get(i);    boolean found=true;    for (    int m_DatasetKeyColumn : m_DatasetKeyColumns) {      if (inst.value(m_DatasetKeyColumn) != specifier.value(m_DatasetKeyColumn)) {        found=false;      }    }    if (found) {      return;    }  }  m_Specifiers.add(inst);}  }
class C{  public int size(){  int x=0;  for (  Segment<K,V> s : segments) {    x+=s.size();  }  return x;}  }
class C{  public static ArrayList listFilesRecursively(File rootDir,FilenameFilter filter){  ArrayList list=new ArrayList();  File[] files=rootDir.listFiles(filter);  for (int i=0; i < Array.getLength(files); ++i) {    if (files[i].isFile()) {      list.add(files[i]);    } else     if (files[i].isDirectory()) {      list.addAll(listFilesRecursively(files[i],filter));    }  }  return list;}  }
class C{  public ThriftCall(int seqId,Class<?> serviceType,String method,Object... args){  this(seqId,serviceType,method,ImmutableList.copyOf(args));}  }
class C{  public void put(NumberVector val,double weight){  assert (val.getDimensionality() == mean.length);  final double nwsum=wsum + weight;  for (int i=0; i < mean.length; i++) {    final double delta=val.doubleValue(i) - mean[i];    final double rval=delta * weight / nwsum;    nmea[i]=mean[i] + rval;  }  for (int i=0; i < mean.length; i++) {    for (int j=i; j < mean.length; j++) {      double delta=(val.doubleValue(i) - nmea[i]) * (val.doubleValue(j) - mean[j]) * weight;      elements[i][j]=elements[i][j] + delta;      if (i != j) {        elements[j][i]=elements[j][i] + delta;      }    }  }  wsum=nwsum;  System.arraycopy(nmea,0,mean,0,nmea.length);}  }
class C{  private int[][] toIndexArray(Map<Integer,int[]> input){  ArrayList<int[]> result=new ArrayList<>();  for (  int i : input.keySet()) {    int[] wordIdAndLength=input.get(i);    int wordId=wordIdAndLength[0];    int current=i;    for (int j=1; j < wordIdAndLength.length; j++) {      int[] token={wordId + j - 1,current,wordIdAndLength[j]};      result.add(token);      current+=wordIdAndLength[j];    }  }  return result.toArray(new int[result.size()][]);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.972 -0500",hash_original_method="E9376C130584FE2146C1CFB7A84FB471",hash_generated_method="FA6BBF0A4D9665939C38DB115FB61EFF") private boolean cookiesEnabled(){  return CookieManager.getInstance().acceptCookie();}  }
class C{  public Value evaluate(Regex node,BindingSet bindings) throws ValueExprEvaluationException, QueryEvaluationException {  Value arg=evaluate(node.getArg(),bindings);  Value parg=evaluate(node.getPatternArg(),bindings);  Value farg=null;  ValueExpr flagsArg=node.getFlagsArg();  if (flagsArg != null) {    farg=evaluate(flagsArg,bindings);  }  if (QueryEvaluationUtil.isStringLiteral(arg) && QueryEvaluationUtil.isSimpleLiteral(parg) && (farg == null || QueryEvaluationUtil.isSimpleLiteral(farg))) {    String text=((Literal)arg).getLabel();    String ptn=((Literal)parg).getLabel();    String flags="";    if (farg != null) {      flags=((Literal)farg).getLabel();    }    int f=0;    for (    char c : flags.toCharArray()) {switch (c) {case 's':        f|=Pattern.DOTALL;      break;case 'm':    f|=Pattern.MULTILINE;  break;case 'i':f|=Pattern.CASE_INSENSITIVE;f|=Pattern.UNICODE_CASE;break;case 'x':f|=Pattern.COMMENTS;break;case 'd':f|=Pattern.UNIX_LINES;break;case 'u':f|=Pattern.UNICODE_CASE;break;default :throw new ValueExprEvaluationException(flags);}}Pattern pattern=Pattern.compile(ptn,f);boolean result=pattern.matcher(text).find();return BooleanLiteral.valueOf(result);}throw new ValueExprEvaluationException();}  }
class C{  public void testRemoveColumn(){  DefaultCategoryDataset d=new DefaultCategoryDataset();  d.addValue(1.0,"R1","C1");  d.addValue(2.0,"R2","C2");  assertEquals(2,d.getColumnCount());  d.removeColumn("C2");  assertEquals(1,d.getColumnCount());  boolean pass=false;  try {    d.removeColumn("XXX");  } catch (  UnknownKeyException e) {    pass=true;  }  assertTrue(pass);  pass=false;  try {    d.removeColumn(null);  } catch (  IllegalArgumentException e) {    pass=true;  }  assertTrue(pass);}  }
class C{  public static RegionStatisticsRequest create(){  RegionStatisticsRequest m=new RegionStatisticsRequest();  return m;}  }
class C{  @Override public final synchronized void decodePageInBackground(final int i) throws Exception {  parser.decodePageInBackground(i);}  }
class C{  public void syncBulkOp(Runnable r,EventID eventID){  Assert.assertTrue(eventID != null);  ThreadIdentifier membershipID=new ThreadIdentifier(eventID.getMembershipID(),eventID.getThreadID());  BulkOpProcessed opSyncObj=recordedBulkOps.putIfAbsent(membershipID,new BulkOpProcessed(false));  if (opSyncObj == null) {    opSyncObj=recordedBulkOps.get(membershipID);  }synchronized (opSyncObj) {    try {      if (opSyncObj.getStatus() && logger.isDebugEnabled()) {        logger.debug("SyncBulkOp: The operation was performed by another thread.");      } else {        recordBulkOpStart(membershipID);        r.run();        opSyncObj.setStatus(true);        recordedBulkOps.remove(membershipID);      }    }  finally {      recordedBulkOps.remove(membershipID);    }  }}  }
class C{  public void testArgsRequired() throws Exception {  CommandTestTools.initFileType();  validateNextArgument("command","positional_argument");}  }
class C{  public void writeEnumNoTag(final int value) throws IOException {  writeInt32NoTag(value);}  }
class C{  public int countWrite(byte[] value){  return count(writeSetted,write,value);}  }
class C{  public IOException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void sendFinalResponse(SipRequest request,int code) throws NetworkException, PayloadException {  mImsModule.getCurrentNetworkInterface().getSipManager().sendSipResponse(SipMessageFactory.createResponse(request,IdGenerator.getIdentifier(),code));}  }
class C{  public void testBug44056() throws Exception {  createTable("testBug44056","(pk int primary key not null auto_increment)");  Statement newStmt=this.conn.createStatement();  try {    newStmt.executeUpdate("INSERT INTO testBug44056 VALUES (null)",Statement.RETURN_GENERATED_KEYS);    checkOpenResultsFor44056(newStmt);    this.pstmt=this.conn.prepareStatement("INSERT INTO testBug44056 VALUES (null)",Statement.RETURN_GENERATED_KEYS);    this.pstmt.executeUpdate();    checkOpenResultsFor44056(this.pstmt);    this.pstmt=((com.mysql.jdbc.Connection)this.conn).serverPrepareStatement("INSERT INTO testBug44056 VALUES (null)",Statement.RETURN_GENERATED_KEYS);    this.pstmt.executeUpdate();    checkOpenResultsFor44056(this.pstmt);  }  finally {    newStmt.close();  }}  }
class C{  public XercesHTML2DocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class htmlBuilderClass=classLoader.loadClass("org.apache.html2.dom.HTMLBuilder");    htmlBuilderConstructor=htmlBuilderClass.getConstructor(NO_CLASSES);    getHTMLDocumentMethod=htmlBuilderClass.getMethod("getHTMLDocument",NO_CLASSES);    Class htmlDOMImpl=classLoader.loadClass("org.apache.html2.dom.HTMLDOMImplementationImpl");    Method method=htmlDOMImpl.getMethod("getHTMLDOMImplementation",NO_CLASSES);    domImpl=(DOMImplementation)method.invoke(null,NO_OBJECTS);    Class saxFactoryClass=classLoader.loadClass("org.apache.xerces.jaxp.SAXParserFactoryImpl");    factory=(SAXParserFactory)saxFactoryClass.newInstance();  } catch (  InvocationTargetException ex) {    throw new DOMTestIncompatibleException(ex.getTargetException(),null);  }catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }  if (settings != null) {    for (int i=0; i < settings.length; i++) {    }  }  try {    factory.newSAXParser();  } catch (  ParserConfigurationException ex) {    throw new DOMTestIncompatibleException(ex,null);  }catch (  SAXException ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  private boolean isAgentsListEmpty(List<Agent> agents){  for (  Agent agent : agents) {    boolean isEmpty=isAgentEmpty(agent);    if (!isEmpty) {      return false;    }  }  return true;}  }
class C{  @Override public boolean isEmpty(){  return tail == null;}  }
class C{  private boolean tryConnection(){  m_user=userTextField.getText();  m_pwd=new String(passwordField.getPassword());  if (!DB.isConnected(false))   validateConnection();  if (!DB.isConnected(false)) {    statusBar.setStatusLine(txt_NoDatabase,true);    hostField.setBackground(AdempierePLAF.getFieldBackground_Error());    return false;  }  Ini.setProperty(Ini.P_ADEMPIERESYS,"Reference".equalsIgnoreCase(CConnection.get().getDbUid()));  Ini.setProperty(Ini.P_LOGMIGRATIONSCRIPT,"Reference".equalsIgnoreCase(CConnection.get().getDbUid()));  m_login=new Login(m_ctx);  KeyNamePair[] roles=null;  try {    roles=m_login.getRoles(m_user,m_pwd);    if (roles == null || roles.length == 0) {      statusBar.setStatusLine(txt_UserPwdError,true);      userTextField.setBackground(AdempierePLAF.getFieldBackground_Error());      passwordField.setBackground(AdempierePLAF.getFieldBackground_Error());      return false;    }  } catch (  Throwable e) {    if (e.getCause() instanceof AccessException) {      statusBar.setStatusLine(txt_UserPwdError,true);      userTextField.setBackground(AdempierePLAF.getFieldBackground_Error());      passwordField.setBackground(AdempierePLAF.getFieldBackground_Error());      return false;    } else {      log.severe(CLogger.getRootCause(e).getLocalizedMessage());      statusBar.setStatusLine(CLogger.getRootCause(e).getLocalizedMessage(),true);      return false;    }  }  m_comboActive=true;  if (roleCombo.getItemCount() > 0)   roleCombo.removeAllItems();  KeyNamePair iniValue=null;  String iniDefault=Ini.getProperty(Ini.P_ROLE);  for (int i=0; i < roles.length; i++) {    roleCombo.addItem(roles[i]);    if (roles[i].getName().equals(iniDefault))     iniValue=roles[i];  }  if (iniValue != null)   roleCombo.setSelectedItem(iniValue);  if (roleCombo.getItemCount() == 1 && !MSysConfig.getBooleanValue("ALogin_ShowOneRole",true)) {    roleCombo.setSelectedIndex(0);    roleLabel.setVisible(false);    roleCombo.setVisible(false);  } else {    roleLabel.setVisible(true);    roleCombo.setVisible(true);  }  userTextField.setBackground(AdempierePLAF.getFieldBackground_Normal());  passwordField.setBackground(AdempierePLAF.getFieldBackground_Normal());  this.setTitle(hostField.getDisplay());  statusBar.setStatusLine(txt_LoggedIn);  m_comboActive=false;  roleComboChanged();  return true;}  }
class C{  private Object[] fillGreeting(){  String sql="SELECT C_Greeting_ID, Name FROM C_Greeting WHERE IsActive='Y' ORDER BY 2";  sql=MRole.getDefault().addAccessSQL(sql,"C_Greeting",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  return DB.getKeyNamePairs(sql,true);}  }
class C{  public static File scenariosDir(){  lock.readLock().lock();  try {    return (scenarios_dir != null) ? scenarios_dir : new File(dataDir(),DEFAULT_DIR_NAME_SCENARIOS);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public SendChat sendChat(User receiver,boolean passive) throws IOException, InterruptedException {  checkNotNull(receiver,"Receiver user cannot be null");  int dccAcceptTimeout=bot.getConfiguration().getDccAcceptTimeout();  if (passive) {    String chatToken=Integer.toString(TOKEN_RANDOM.nextInt(TOKEN_RANDOM_MAX));    PendingSendChatPassive pendingChat=new PendingSendChatPassive(receiver,chatToken);    CountDownLatch countdown=new CountDownLatch(1);synchronized (pendingSendPassiveChat) {      pendingSendPassiveChat.put(pendingChat,countdown);    }    InetAddress publicAddress=getRealDccPublicAddress();    bot.sendDCC().chatPassiveRequest(receiver.getNick(),publicAddress,chatToken);    log.debug("Sent DCC send chat request to user {} ({}ms timeout) for passive connect info using public address {}",receiver.getNick(),bot.getConfiguration().getDccAcceptTimeout(),publicAddress);    if (!countdown.await(dccAcceptTimeout,TimeUnit.MILLISECONDS))     throw new DccException(DccException.Reason.ChatTimeout,receiver,"");    if (shuttingDown)     throw new DccException(DccException.Reason.ChatCancelled,receiver,"");    Socket chatSocket=new Socket(pendingChat.getReceiverAddress(),pendingChat.getReceiverPort());    return bot.getConfiguration().getBotFactory().createSendChat(bot,receiver,chatSocket);  } else {    ServerSocket serverSocket=createServerSocket(receiver);    InetAddress publicAddress=getRealDccPublicAddress(serverSocket);    bot.sendDCC().chatRequest(receiver.getNick(),publicAddress,serverSocket.getLocalPort());    log.debug("Sent DCC send chat request to user {} ({}ms timeout) to connect on public address {}:{}, local address {}",receiver.getNick(),bot.getConfiguration().getDccAcceptTimeout(),publicAddress,serverSocket.getLocalPort(),serverSocket.getLocalSocketAddress());    Socket userSocket=serverSocket.accept();    log.debug("Recieved connection");    serverSocket.close();    return bot.getConfiguration().getBotFactory().createSendChat(bot,receiver,userSocket);  }}  }
class C{  public void registerSVGBridges(){  UserAgent ua=getUserAgent();  List ext=getBridgeExtensions(document);  Iterator iter=ext.iterator();  while (iter.hasNext()) {    BridgeExtension be=(BridgeExtension)iter.next();    be.registerTags(this);    ua.registerExtension(be);  }}  }
class C{  @Override public void respondPrivateMessage(String response){  getUser().send().message(response);}  }
class C{  public DateTimeProperty(Date value){  super(value);}  }
class C{  public void createAddressBookReceivingAddresses(String walletFilename){  if (walletFilename == null) {    return;  }  WalletData perWalletModelData=null;  if (perWalletModelDataList != null) {    for (    WalletData loopPerWalletModelData : perWalletModelDataList) {      if (walletFilename.equals(loopPerWalletModelData.getWalletFilename())) {        perWalletModelData=loopPerWalletModelData;        break;      }    }  }  if (!(perWalletModelData == null)) {    List<ECKey> keyChain=perWalletModelData.getWallet().getKeychain();    if (keyChain != null) {      NetworkParameters networkParameters=getNetworkParameters();      if (networkParameters != null) {        if (perWalletModelData.getWalletInfo() != null) {          List<WalletAddressBookData> currentReceivingAddresses=perWalletModelData.getWalletInfo().getReceivingAddresses();          ArrayList<WalletAddressBookData> newReceivingAddresses=new ArrayList<WalletAddressBookData>();          perWalletModelData.getWalletInfo().setReceivingAddresses(newReceivingAddresses);          for (          ECKey key : keyChain) {            Address address=key.toAddress(getNetworkParameters());            String addressString=address.toString();            WalletAddressBookData addressBookData=new WalletAddressBookData(null,addressString);            for (            WalletAddressBookData loopAddressBookData : currentReceivingAddresses) {              if (loopAddressBookData.getAddress().equals(addressString)) {                addressBookData.setLabel(loopAddressBookData.getLabel());                break;              }            }            perWalletModelData.getWalletInfo().addReceivingAddress(addressBookData,false);          }        }      }    }  }}  }
class C{  public boolean invalidateVirtualVolumeCache(String virtualVolumeName) throws VPlexApiException {  s_logger.info("Request to invalidate virtual volume cache for volume {}",virtualVolumeName);  ClientResponse response=null;  try {    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    VPlexVirtualVolumeInfo virtualVolumeInfo=discoveryMgr.findVirtualVolume(virtualVolumeName,false);    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_INVALIDATE_VOLUME_CACHE);    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_V,virtualVolumeInfo.getPath());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Invalidate cache POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Invalidate cache response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Invalidate cache completing asynchrounously");        _vplexApiClient.waitForCompletion(response);        return false;      } else {        String exceptionMessage=VPlexApiUtils.getExceptionMessageFromResponse(responseStr);        if ((exceptionMessage != null) && (exceptionMessage.contains(VPlexApiConstants.CACHE_INVALIDATE_IN_PROGRESS_MSG))) {          return true;        } else {          String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);          throw VPlexApiException.exceptions.invalidateCacheFailureStatus(virtualVolumeName,String.valueOf(response.getStatus()),cause);        }      }    }    return false;  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedInvalidatingVolumeCache(virtualVolumeName,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public void clear(){  clearImpl();}  }
class C{  boolean isUploadReady(byte[] buffer){  if (buffer[0] != 31) {    return false;  }  if (buffer[1] != 32) {    return false;  }  if (buffer[2] != 99) {    return false;  }  if (buffer[3] != 00) {    return false;  }  if (!((buffer[4] == 44) || (buffer[4] == 45))) {    return false;  }  return true;}  }
class C{  public LeExpr newLeExpr(Value op1,Value op2){  return new JLeExpr(op1,op2);}  }
class C{  protected Node newNode(){  return new SVGOMPatternElement();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tWhen determining whether an edge exists a search is performed \n" + "\tfor a set Z that separates the nodes. MaxCardinality determines \n" + "\tthe maximum size of the set Z. This greatly influences the \n"+ "\tlength of the search. (default 2)","cardinality",1,"-cardinality <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public static Integer valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseInt(string,radix));}  }
class C{  private static SecretKey retrieveEncryptionKey(){  SecureRandom rnd=new SecureRandom();  byte[] rawKey=new byte[16];  rnd.nextBytes(rawKey);  return new SecretKeySpec(rawKey,"AES");}  }
class C{  @Override public Statement createStatement() throws SQLException {  try {    int id=getNextId(TraceObject.STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("Statement",TraceObject.STATEMENT,id,"createStatement()");    }    checkClosed();    return new JdbcStatement(this,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static Filter parseFrom(final byte[] pbBytes) throws DeserializationException {  ByteArrayDataInput byteArrayDataInput=ByteStreams.newDataInput(pbBytes);  RowValueFilter filter=new RowValueFilter();  try {    filter.readFields(byteArrayDataInput);  } catch (  IOException e) {    LOG.error("Got error to deserialize RowValueFilter from PB bytes",e);    throw new DeserializationException(e);  }  return filter;}  }
class C{  public void releaseSelection(Entity item){  currentSelection.remove(item);  Overlap2DFacade.getInstance().sendNotification(MsgAPI.ITEM_SELECTION_CHANGED,currentSelection);}  }
class C{  public static <A>List<A> of(A x1){  return new List<A>(x1,List.<A>nil());}  }
class C{  public boolean contains(String key){  if (key == null)   return false;  Entry e=this.get(key);  return e == null ? false : e.enabled();}  }
class C{  protected ArrayList<float[]> _forwardPoly(float[] rawllpts,int ltype,int nsegs,boolean isFilled){  int n, k, flag=0, min=0, max=0;  float xp, xadj=0;  int len=rawllpts.length >> 1;  if (len < 2)   return new ArrayList<float[]>(0);  if (isComplicatedLineType(ltype)) {    return doPolyDispatch(rawllpts,ltype,nsegs,isFilled);  }  Point2D temp=new Point2D.Float(0,0);  float[] xs=new float[len];  float[] ys=new float[len];  forward(rawllpts[0],rawllpts[1],temp,true);  xp=(float)temp.getX();  xs[0]=(float)temp.getX();  ys[0]=(float)temp.getY();  for (n=1, k=2; n < len; n++, k+=2) {    forward(rawllpts[k],rawllpts[k + 1],temp,true);    xs[n]=(float)temp.getX();    ys[n]=(float)temp.getY();    if (Math.abs(xp - xs[n]) >= half_world) {      flag+=(xp < xs[n]) ? -1 : 1;      min=(flag < min) ? flag : min;      max=(flag > max) ? flag : max;      xadj=flag * world.x;    }    xp=(float)temp.getX();    if (flag != 0) {      xs[n]+=xadj;    }  }  min*=-1;  ArrayList<float[]> ret_val=null;  ret_val=new ArrayList<float[]>(2 + 2 * (max + min));  ret_val.add(xs);  ret_val.add(ys);  float[] altx=null;  for (int i=1; i <= min; i++) {    altx=new float[xs.length];    xadj=i * world.x;    for (int j=0; j < altx.length; j++) {      altx[j]=xs[j] + xadj;    }    ret_val.add(altx);    ret_val.add(ys);  }  for (int i=1; i <= max; i++) {    altx=new float[xs.length];    xadj=-i * world.x;    for (int j=0; j < altx.length; j++) {      altx[j]=xs[j] + xadj;    }    ret_val.add(altx);    ret_val.add(ys);  }  return ret_val;}  }
class C{  public void addDatasource(DsDef... dsDefs){  for (  DsDef dsDef : dsDefs) {    addDatasource(dsDef);  }}  }
class C{  protected void onException(Exception e) throws RuntimeException {  onThrowable(e);}  }
class C{  public static _SensitivityEnum fromString(final String value) throws SOAPSerializationException {  return (_SensitivityEnum)Enumeration.fromString(value,_SensitivityEnum.VALUES_TO_INSTANCES);}  }
class C{  private void sendHelloMessage() throws IOException {  OFHello.Builder builder=factory.buildHello();  if (factory.getVersion().compareTo(OFVersion.OF_13) >= 0) {    List<OFHelloElem> he=new ArrayList<OFHelloElem>();    he.add(factory.buildHelloElemVersionbitmap().setBitmaps(ofBitmaps).build());    builder.setElements(he);  }  OFHello m=builder.setXid(handshakeTransactionIds--).build();  write(m);  log.debug("Send hello: {}",m);}  }
class C{  public DOMSignedInfo(CanonicalizationMethod cm,SignatureMethod sm,List<? extends Reference> references,String id){  this(cm,sm,references);  this.id=id;}  }
class C{  public int load32(int addr){  return (loadSigned8(addr + 3) << 24) | (loadUnsigned8(addr + 2) << 16) | (loadUnsigned8(addr + 1) << 8)| loadUnsigned8(addr);}  }
class C{  protected void processNodesAfterAddInstance(BallNode node){  node.m_Start++;  node.m_End++;  if (node.m_Left != null && node.m_Right != null) {    processNodesAfterAddInstance(node.m_Left);    processNodesAfterAddInstance(node.m_Right);  }}  }
class C{  private static void usage(){  for (  String s : USAGE_MESSAGE) {    System.out.println(s);  }  for (  String s : WELCOME_MESSAGE) {    System.out.println(s);  }}  }
class C{  public static String formatString(byte[] b,int lineLength,String prefix,boolean addClose){  String s=toString(b);  StringBuffer sb=new StringBuffer();  for (int i=0; i < s.length(); i+=lineLength) {    sb.append(prefix);    if (i + lineLength >= s.length()) {      sb.append(s.substring(i));      if (addClose)       sb.append(" )");    } else {      sb.append(s.substring(i,i + lineLength));      sb.append("\n");    }  }  return sb.toString();}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TRIGGER_ID;case 2:  return TRIGGER_NAME;case 3:return CREATE_TIME;case 4:return OPERATOR_ID;case 5:return TRIGGER_TYPE;case 6:return CRON_EXPRESSION;default :return null;}}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a decimal number: ");  int value=input.nextInt();  System.out.println("The binary equivalent of " + value + " is "+ dec2Bin(value));}  }
class C{  public PartialCallGraph(double initialWeight){  seedWeight=initialWeight;  totalEdgeWeights=initialWeight;}  }
class C{  public void paint(Graphics g,JComponent c){  int tabPlacement=tabPane.getTabPlacement();  Insets insets=c.getInsets();  Dimension size=c.getSize();  if (tabPane.isOpaque()) {    g.setColor(c.getBackground());switch (tabPlacement) {case LEFT:      g.fillRect(insets.left,insets.top,calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth),size.height - insets.bottom - insets.top);    break;case BOTTOM:  int totalTabHeight=calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight);g.fillRect(insets.left,size.height - insets.bottom - totalTabHeight,size.width - insets.left - insets.right,totalTabHeight);break;case RIGHT:int totalTabWidth=calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth);g.fillRect(size.width - insets.right - totalTabWidth,insets.top,totalTabWidth,size.height - insets.top - insets.bottom);break;case TOP:default :g.fillRect(insets.left,insets.top,size.width - insets.right - insets.left,calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight));paintHighlightBelowTab();}} else super.paint(g,c);}  }
class C{  public T caseShiftExpression(ShiftExpression object){  return null;}  }
class C{  public FilteredCausedDelayHandler(final Scenario scenario,final int noOfTimeBins,final double simulationEndTime){  this(scenario,noOfTimeBins,null,null,null);  LOGGER.info("No filtering is used, result will include all links, persons from all user groups.");}  }
class C{  public static boolean isValidValue(String value,IRI datatype){  boolean result=true;  if (datatype.equals(XMLSchema.DECIMAL)) {    result=isValidDecimal(value);  } else   if (datatype.equals(XMLSchema.INTEGER)) {    result=isValidInteger(value);  } else   if (datatype.equals(XMLSchema.NEGATIVE_INTEGER)) {    result=isValidNegativeInteger(value);  } else   if (datatype.equals(XMLSchema.NON_POSITIVE_INTEGER)) {    result=isValidNonPositiveInteger(value);  } else   if (datatype.equals(XMLSchema.NON_NEGATIVE_INTEGER)) {    result=isValidNonNegativeInteger(value);  } else   if (datatype.equals(XMLSchema.POSITIVE_INTEGER)) {    result=isValidPositiveInteger(value);  } else   if (datatype.equals(XMLSchema.LONG)) {    result=isValidLong(value);  } else   if (datatype.equals(XMLSchema.INT)) {    result=isValidInt(value);  } else   if (datatype.equals(XMLSchema.SHORT)) {    result=isValidShort(value);  } else   if (datatype.equals(XMLSchema.BYTE)) {    result=isValidByte(value);  } else   if (datatype.equals(XMLSchema.UNSIGNED_LONG)) {    result=isValidUnsignedLong(value);  } else   if (datatype.equals(XMLSchema.UNSIGNED_INT)) {    result=isValidUnsignedInt(value);  } else   if (datatype.equals(XMLSchema.UNSIGNED_SHORT)) {    result=isValidUnsignedShort(value);  } else   if (datatype.equals(XMLSchema.UNSIGNED_BYTE)) {    result=isValidUnsignedByte(value);  } else   if (datatype.equals(XMLSchema.FLOAT)) {    result=isValidFloat(value);  } else   if (datatype.equals(XMLSchema.DOUBLE)) {    result=isValidDouble(value);  } else   if (datatype.equals(XMLSchema.BOOLEAN)) {    result=isValidBoolean(value);  } else   if (datatype.equals(XMLSchema.DATETIME)) {    result=isValidDateTime(value);  } else   if (datatype.equals(XMLSchema.DATE)) {    result=isValidDate(value);  } else   if (datatype.equals(XMLSchema.TIME)) {    result=isValidTime(value);  } else   if (datatype.equals(XMLSchema.GDAY)) {    result=isValidGDay(value);  } else   if (datatype.equals(XMLSchema.GMONTH)) {    result=isValidGMonth(value);  } else   if (datatype.equals(XMLSchema.GMONTHDAY)) {    result=isValidGMonthDay(value);  } else   if (datatype.equals(XMLSchema.GYEAR)) {    result=isValidGYear(value);  } else   if (datatype.equals(XMLSchema.GYEARMONTH)) {    result=isValidGYearMonth(value);  } else   if (datatype.equals(XMLSchema.DURATION)) {    result=isValidDuration(value);  } else   if (datatype.equals(XMLSchema.DAYTIMEDURATION)) {    result=isValidDayTimeDuration(value);  } else   if (datatype.equals(XMLSchema.YEARMONTHDURATION)) {    result=isValidYearMonthDuration(value);  } else   if (datatype.equals(XMLSchema.QNAME)) {    result=isValidQName(value);  }  return result;}  }
class C{  public void registerConnected(long platformIdent){  AgentStatusData agentStatusData=agentStatusDataMap.get(platformIdent);  if (null == agentStatusData) {    agentStatusData=new AgentStatusData(AgentConnection.CONNECTED);    AgentStatusData existing=agentStatusDataMap.putIfAbsent(platformIdent,agentStatusData);    if (null != existing) {      agentStatusData=existing;    }  }  long currentTimeMillis=System.currentTimeMillis();  agentStatusData.setLastKeepAliveTimestamp(currentTimeMillis);  agentStatusData.setConnectionTimestamp(currentTimeMillis);  agentStatusData.setAgentConnection(AgentConnection.CONNECTED);}  }
class C{  public int length(){  return this.map.size();}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (baseFeatureID) {case GamlPackage.GAML_DEFINITION__NAME:      return GamlPackage.MODEL__NAME;default :    return -1;}}if (baseClass == VarDefinition.class) {switch (baseFeatureID) {default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private void clearDuplicatesAndNulls(){  if (dups != null) {    assert (ownedCount() >= 1);    for (    Name dup : dups) {      for (int i=firstChange; i < length; i++) {        if (names[i] == dup && originalNames[i] != dup) {          names[i]=null;          assert (Arrays.asList(names).contains(dup));          break;        }      }    }    dups.clear();  }  int oldLength=length;  for (int i=firstChange; i < length; i++) {    if (names[i] == null) {      System.arraycopy(names,i + 1,names,i,(--length - i));      --i;    }  }  if (length < oldLength) {    Arrays.fill(names,length,oldLength,null);  }  assert (!Arrays.asList(names).subList(0,length).contains(null));}  }
class C{  private void computeExtentPositions(){  Globe globe=this.wwd.getModel().getGlobe();  this.extentPositions=new ArrayList<LatLon>();  Angle heading=Angle.ZERO;  int cpn=0;  if (this.centerPositions.size() > 1)   heading=LatLon.greatCircleAzimuth(this.centerPositions.get(cpn),this.centerPositions.get(cpn + 1));  this.extentPositions.addAll(computeArcPositions(globe,this.centerPositions.get(cpn),heading.addDegrees(90),heading.addDegrees(270),this.radius));  while (cpn < this.centerPositions.size() - 1) {    Angle previousHeading=heading;    heading=LatLon.greatCircleAzimuth(this.centerPositions.get(cpn),this.centerPositions.get(cpn + 1));    Angle nextHeading=heading;    if (cpn < this.centerPositions.size() - 2)     nextHeading=LatLon.greatCircleAzimuth(this.centerPositions.get(cpn + 1),this.centerPositions.get(cpn + 2));    this.extentPositions.addAll(computeLinePositions(globe,this.centerPositions.get(cpn),this.centerPositions.get(cpn + 1),previousHeading,heading,nextHeading,radius));    cpn++;  }  heading=normalizedHeading(heading.addDegrees(180));  cpn=this.centerPositions.size() - 1;  this.extentPositions.addAll(computeArcPositions(globe,this.centerPositions.get(cpn),heading.addDegrees(90),heading.addDegrees(270),this.radius));  while (cpn > 0) {    Angle previousHeading=heading;    heading=LatLon.greatCircleAzimuth(this.centerPositions.get(cpn),this.centerPositions.get(cpn - 1));    Angle nextHeading=heading;    if (cpn > 1)     nextHeading=LatLon.greatCircleAzimuth(this.centerPositions.get(cpn - 1),this.centerPositions.get(cpn - 2));    this.extentPositions.addAll(computeLinePositions(globe,this.centerPositions.get(cpn),this.centerPositions.get(cpn - 1),previousHeading,heading,nextHeading,radius));    cpn--;  }  this.extentPositions.add(this.extentPositions.get(0));}  }
class C{  public void stop(){  if (mEventThread != null) {    mEventThread.requestStop();    try {      mEventThread.join(500);    } catch (    InterruptedException e) {      Log.e(TAG,"Interrupted while waiting for MIDI EventScheduler thread to stop.");    } finally {      mEventThread=null;    }  }}  }
class C{  public boolean isForcing(){  return this.force;}  }
class C{  public TypeVariableBinding typeVariable(){  if (this.typeVariable == null) {    TypeVariableBinding[] typeVariables=this.genericType.typeVariables();    if (this.rank < typeVariables.length)     this.typeVariable=typeVariables[this.rank];  }  return this.typeVariable;}  }
class C{  private void handleMmsReceived(Intent intent){  if (BuildConfig.DEBUG)   Log.v("MMS received!");  SmsMmsMessage mmsMessage=null;  int count=0;  while (mmsMessage == null && count < MESSAGE_RETRY) {    mmsMessage=SmsPopupUtils.getMmsDetails(context);    if (mmsMessage != null) {      if (BuildConfig.DEBUG)       Log.v("MMS found in content provider");      notifyMessageReceived(mmsMessage);    } else {      if (BuildConfig.DEBUG)       Log.v("MMS not found, sleeping (count is " + count + ")");      count++;      try {        Thread.sleep(MESSAGE_RETRY_PAUSE);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public void addMoreInfo(RoutingInfo info){  if (this.moreInfo == null) {    this.moreInfo=new ArrayList<RoutingInfo>();  }  this.moreInfo.add(info);}  }
class C{  @Override protected void createChildren(){  if (m_database.isConnected() && m_database.isLoaded()) {    add(new CProjectContainerNode(getProjectTree(),m_database));    add(new CModuleContainerNode(getProjectTree(),m_database));    add(new CDebuggerContainerNode(getProjectTree(),m_database));    add(new CTagContainerNode(getProjectTree(),m_database));  }}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  public int index(int i){  return ByteArray.readU16bit(info,i * 10 + 10);}  }
class C{  public boolean isSscrSSDSet(){  return Format.isBitSet(getReg(SSCR),Sscr_SSD_pos);}  }
class C{  private MongoClient newMongo() throws UnknownHostException, MongoException {  return new MongoClient(new ServerAddress(mongodProcess.getConfig().net().getServerAddress(),mongodProcess.getConfig().net().getPort()));}  }
class C{  public static ConditionOperand LOWER(){  return new ConditionOperand(LOWER);}  }
class C{  @Override public <T>T convert(Class<T> cls,Object value){  try {    if (ClassUtils.isAssignable(value.getClass(),String.class)) {      return stringToEnum(cls,(String)value);    } else     if (ClassUtils.isAssignable(value.getClass(),Integer.class,true)) {      return intToEnum(cls,(Integer)value);    } else {      throw new UnsupportedOperationException(value.getClass().getSimpleName() + " to Enum no supported");    }  } catch (  IndexOutOfBoundsException|ReflectiveOperationException|UnsupportedOperationException|IllegalArgumentException e) {    throw new InvalidAttributeException("Unknown " + cls.getSimpleName() + " value "+ value,e);  }}  }
class C{  public void writePage(ByteBuffer page,int pageNumber) throws IOException {  writePage(page,pageNumber,0);}  }
class C{  public void execute(){  final RTimer timer=new RTimer();  if (DATA_MODE_FILES.equals(mode) && args.length > 0) {    doFilesMode();  } else   if (DATA_MODE_ARGS.equals(mode) && args.length > 0) {    doArgsMode();  } else   if (DATA_MODE_WEB.equals(mode) && args.length > 0) {    doWebMode();  } else   if (DATA_MODE_STDIN.equals(mode)) {    doStdinMode();  } else {    usageShort();    return;  }  if (commit)   commit();  if (optimize)   optimize();  displayTiming((long)timer.getTime());}  }
class C{  public void registerFocusHotkey(final JComponent rootComponent,final KeyStroke keyStroke){  textField.registerFocusHotkey(rootComponent,keyStroke);}  }
class C{  public static String toHexString(int decimal,int stringLength){  StringBuilder sb=new StringBuilder(stringLength);  String hexVal=Integer.toHexString(decimal).toUpperCase();  int nofZeros=stringLength - hexVal.length();  for (int i=0; i < nofZeros; i++) {    sb.append('0');  }  sb.append(hexVal);  return sb.toString();}  }
class C{  public boolean testNoCollisions(PhysicalObject2D c1,PhysicalObject2D c2){  PhysicalObjectPair pair=new PhysicalObjectPair(c1,c2);  return noCollisions.contains(pair);}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  return (p1 > p2) ? p1 : p2;}  }
class C{  private static Vec4 SphericalToCartesian(double latitude,double longitude,float radius){  latitude*=Math.PI / 180.0f;  longitude*=Math.PI / 180.0f;  double radCosLat=radius * Math.cos(latitude);  return new Vec4(radCosLat * Math.sin(longitude),(double)radius * Math.sin(latitude),radCosLat * Math.cos(longitude));}  }
class C{  public static String replaceTokens(String text,Map<String,String> replacements,boolean matchUsingPrefixSuffix){  if (text != null && replacements != null && replacements.size() > 0) {    if (matchUsingPrefixSuffix) {      Matcher matcher=pattern.matcher(text);      StringBuffer buffer=new StringBuffer();      while (matcher.find()) {        String[] match=matcher.group(1).split("\\|");        String replacement=replacements.get(match[0]);        if (replacement != null) {          matcher.appendReplacement(buffer,"");          if (match.length == 2) {            replacement=formatString(match[1],replacement);          }          buffer.append(replacement);        }      }      matcher.appendTail(buffer);      text=buffer.toString();    } else {      for (      Object key : replacements.keySet()) {        text=text.replaceAll(key.toString(),replacements.get(key));      }    }  }  return text;}  }
class C{  private boolean addDependencies(InferenceVariable infVar,int limit,Set<InferenceVariable> addHere){  if (addHere.size() >= limit) {    return false;  }  if (!addHere.add(infVar)) {    return true;  }  for (  InferenceVariable candidate : inferenceVariables) {    if (candidate != infVar) {      if (!(currentBounds.isInstantiated(candidate))) {        if (currentBounds.dependsOnResolutionOf(infVar,candidate) && !addDependencies(candidate,limit,addHere)) {          return false;        }      }    }  }  return true;}  }
class C{  public static String markLTR(String string){  if (!USE_TEXT_PROCESSOR)   return string;  return TextProcessor.process(string);}  }
class C{  @After public void unregisterIdlingResource(){  Espresso.unregisterIdlingResources(mAddNoteIntentsTestRule.getActivity().getCountingIdlingResource());}  }
class C{  public static GCounter newGCounter(){  return new StateBasedGCounter();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static QueryExp leq(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(LE,v1,v2);}  }
class C{  public final JMenuItem addItem(JMenu menu,String key,String label,int mnemonic){  JMenuItem item=new JMenuItem(label);  if (mnemonic != -1) {    item.setMnemonic(mnemonic);  }  menuItems.put(key,item);  item.setActionCommand(key);  menu.add(item);  item.addActionListener(actionListener);  return item;}  }
class C{  public Maybe<Zipper<A>> maybeBackwards(){  return Maybe.JustWhenTrue(!isStart(),null);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void load(Element element,Object o){  Editor p=(Editor)o;  MemorySpinnerIcon l=new MemorySpinnerIcon(p);  l.setMemory(element.getAttribute("memory").getValue());  loadTextInfo(l,element);  p.putItem(l);  loadCommonAttributes(l,Editor.MEMORIES,element);}  }
class C{  public static boolean isEmpty(String str){  return (str == null) || (str.trim().length() == 0);}  }
class C{  private Object readResolve(){  return getInstance(iType);}  }
class C{  public static void showAlert(Context context,CharSequence title,CharSequence msg,CharSequence ok,CharSequence cancel,DialogInterface.OnClickListener lOk,DialogInterface.OnClickListener lCancel){  AlertDialog dialog=buildAlert(context,title,msg,ok,cancel,lOk,lCancel);  if (dialog != null) {    dialog.show();  }}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.writeShort(reference);  dout.writeShort(bitCount);}  }
class C{  public Builder withVersion(long version){  buffer.writeLong(8,version);  return this;}  }
class C{  protected boolean isTokenChar(int chr){  return true;}  }
class C{  protected void update(){  size=0;  Node shadowTree=getXblShadowTree(record.node);  Node n=shadowTree == null ? record.node.getFirstChild() : shadowTree.getFirstChild();  while (n != null) {    collectXblScopedChildNodes(n);    n=n.getNextSibling();  }}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public void updateScopeCascadingType(short type) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  if (type == ConfigWeb.SCOPE_STRICT)   scope.setAttribute("cascading","strict"); else   if (type == ConfigWeb.SCOPE_SMALL)   scope.setAttribute("cascading","small"); else   if (type == ConfigWeb.SCOPE_STANDARD)   scope.setAttribute("cascading","standard");}  }
class C{  public void ReInit(JavaCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public TOMConfiguration(int processId,String configHome,String hostsFileName){  super(processId,configHome,hostsFileName);}  }
class C{  public static final <T>Event<T> of(Selector selector,T data){  return new Event<T>(selector,data);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public ObjectMatrix2D make(Object values[],int rows){  int columns=(rows != 0 ? values.length / rows : 0);  if (rows * columns != values.length)   throw new IllegalArgumentException("Array length must be a multiple of m.");  ObjectMatrix2D matrix=make(rows,columns);  for (int row=0; row < rows; row++) {    for (int column=0; column < columns; column++) {      matrix.setQuick(row,column,values[row + column * rows]);    }  }  return matrix;}  }
class C{  public static MPrintFormat loadPrintFormat(Properties ctx,MProcess process,String trxName) throws Exception {  MPrintFormat retValue=null;  if (process.getAD_PrintFormat_ID() == 0) {    I_AD_ReportView reportView=process.getAD_ReportView();    int reportViewId=0;    int tableId=0;    if (reportView != null) {      reportViewId=reportView.getAD_ReportView_ID();      tableId=reportView.getAD_Table_ID();    }    PreparedStatement pstmt=null;    ResultSet rs=null;    String sql="SELECT * FROM AD_PrintFormat WHERE ";    if (reportViewId > 0) {      sql+="AD_ReportView_ID=?";    } else {      sql+="AD_Table_ID=?";    }    sql+=" AND AD_Client_ID = " + Env.getAD_Client_ID(ctx);    sql+=" ORDER BY IsDefault DESC";    try {      pstmt=DB.prepareStatement(sql,trxName);      pstmt.setInt(1,reportViewId > 0 ? reportViewId : tableId);      rs=pstmt.executeQuery();      if (rs.next()) {        retValue=new MPrintFormat(ctx,rs,trxName);      }    } catch (    Exception e) {    } finally {      DB.close(rs,pstmt);      pstmt=null;      rs=null;    }    retValue=retValue == null ? MPrintFormat.createFromTable(ctx,tableId) : retValue;  } else {    retValue=new MPrintFormat(ctx,process.getAD_PrintFormat_ID(),null);  }  return retValue;}  }
class C{  @DSSource({DSSourceKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.456 -0500",hash_original_method="C3F915B9919F99B9388976510DFE400E",hash_generated_method="2E81C69D1D763F3DD7F082DF5A790E3F") public ServerRequestInterface newSIPServerRequest(SIPRequest requestReceived,MessageChannel requestMessageChannel){  Iterator<SIPServerTransaction> transactionIterator;  SIPServerTransaction nextTransaction;  SIPServerTransaction currentTransaction;  String key=requestReceived.getTransactionId();  requestReceived.setMessageChannel(requestMessageChannel);  currentTransaction=(SIPServerTransaction)serverTransactionTable.get(key);  if (currentTransaction == null || !currentTransaction.isMessagePartOfTransaction(requestReceived)) {    transactionIterator=serverTransactionTable.values().iterator();    currentTransaction=null;    if (!key.toLowerCase().startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE)) {      while (transactionIterator.hasNext() && currentTransaction == null) {        nextTransaction=(SIPServerTransaction)transactionIterator.next();        if (nextTransaction.isMessagePartOfTransaction(requestReceived)) {          currentTransaction=nextTransaction;        }      }    }    if (currentTransaction == null) {      currentTransaction=findPendingTransaction(requestReceived);      if (currentTransaction != null) {        requestReceived.setTransaction(currentTransaction);        if (currentTransaction != null && currentTransaction.acquireSem())         return currentTransaction; else         return null;      }      currentTransaction=createServerTransaction(requestMessageChannel);      if (currentTransaction != null) {        currentTransaction.setOriginalRequest(requestReceived);        requestReceived.setTransaction(currentTransaction);      }    }  }  if (stackLogger.isLoggingEnabled()) {    stackLogger.logDebug("newSIPServerRequest( " + requestReceived.getMethod() + ":"+ requestReceived.getTopmostVia().getBranch()+ "):"+ currentTransaction);  }  if (currentTransaction != null)   currentTransaction.setRequestInterface(sipMessageFactory.newSIPServerRequest(requestReceived,currentTransaction));  if (currentTransaction != null && currentTransaction.acquireSem()) {    return currentTransaction;  } else   if (currentTransaction != null) {    try {      if (currentTransaction.isMessagePartOfTransaction(requestReceived) && currentTransaction.getMethod().equals(requestReceived.getMethod())) {        SIPResponse trying=requestReceived.createResponse(Response.TRYING);        trying.removeContent();        currentTransaction.getMessageChannel().sendMessage(trying);      }    } catch (    Exception ex) {      if (isLoggingEnabled())       stackLogger.logError("Exception occured sending TRYING");    }    return null;  } else {    return null;  }}  }
class C{  public ClusterJoinRequestMessage(ClusterJoinRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetNode()) {    this.node=new Node(other.node);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (modifier_1: ");  result.append(modifier_1);  result.append(", code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  public Boolean exists(final byte[] key){  checkIsInMulti();  client.exists(key);  return client.getIntegerReply() == 1;}  }
class C{  public SVGHKernElementBridge(){}  }
class C{  public SourceStorageDto build(GithubUrl githubUrl){  Map<String,String> parameters=new HashMap<>(2);  parameters.put("branch",githubUrl.branch());  if (!Strings.isNullOrEmpty(githubUrl.subfolder())) {    parameters.put("keepDir",githubUrl.subfolder());  }  return newDto(SourceStorageDto.class).withLocation(githubUrl.repositoryLocation()).withType("git").withParameters(parameters);}  }
class C{  public Link(String href,Map<String,?> meta){  this.href=href;  this.meta=meta;}  }
class C{  public static Pair<Integer,Integer> sequenceSlicing(String slice){  int ind=slice.indexOf(':');  if (ind < 0) {    int i=Integer.parseInt(slice.trim());    if (i >= 0) {      return new Pair<Integer,Integer>(0,i);    } else {      return new Pair<Integer,Integer>(i,0);    }  }  String left=slice.substring(0,ind).trim();  String right=slice.substring(1 + ind).trim();  int start, end;  if (left.length() <= 0) {    start=0;  } else {    start=Integer.parseInt(left);  }  if (right.length() <= 0) {    end=0;  } else {    end=Integer.parseInt(right);  }  return new Pair<Integer,Integer>(start,end);}  }
class C{  public void test() throws Exception {  long val=0xffffffffL;  TestCase.assertEquals(-1,U32.t(val));  TestCase.assertEquals(val,U32.f(-1));}  }
class C{  public int describeContents(){  return 0;}  }
class C{  protected boolean isOffscreenBufferNeeded(){  return ((filter != null) || (mask != null) || (composite != null && !AlphaComposite.SrcOver.equals(composite)));}  }
class C{  private static void header(Collection<String> src,String pkg,String desc,String cls,String... imports){  add0(src,"/*");  add0(src," * Licensed to the Apache Software Foundation (ASF) under one or more");  add0(src," * contributor license agreements.  See the NOTICE file distributed with");  add0(src," * this work for additional information regarding copyright ownership.");  add0(src," * The ASF licenses this file to You under the Apache License, Version 2.0");  add0(src," * (the \"License\"); you may not use this file except in compliance with");  add0(src," * the License.  You may obtain a copy of the License at");  add0(src," *");  add0(src," *      http://www.apache.org/licenses/LICENSE-2.0");  add0(src," *");  add0(src," * Unless required by applicable law or agreed to in writing, software");  add0(src," * distributed under the License is distributed on an \"AS IS\" BASIS,");  add0(src," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");  add0(src," * See the License for the specific language governing permissions and");  add0(src," * limitations under the License.");  add0(src," */");  add0(src,"");  add0(src,"package " + pkg + ";");  add0(src,"");  if (imports != null && imports.length > 0) {    for (    String imp : imports)     add0(src,imp.isEmpty() ? "" : "import " + imp + ";");    add0(src,"");  }  add0(src,"/**");  add0(src," * " + desc + " definition.");  add0(src," *");  add0(src," * Code generated by Apache Ignite Schema Import utility: " + new SimpleDateFormat("MM/dd/yyyy").format(new Date()) + ".");  add0(src," */");  add0(src,"public class " + cls + " {");}  }
class C{  @Override public void close() throws IOException {  close(ErrorCode.NO_ERROR,ErrorCode.CANCEL);}  }
class C{  public XMLX509SubjectName itemSubjectName(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_X509SUBJECTNAME,i);  if (e != null) {    return new XMLX509SubjectName(e,this.baseURI);  }  return null;}  }
class C{  @After public void tearDown(){  if (previousFormatLocale != null) {    Locale.setDefault(previousFormatLocale);  }  if (previousTimeZone != null) {    TimeZone.setDefault(previousTimeZone);  }}  }
class C{  public long tryConvertToReadLock(long stamp){  long a=stamp & ABITS, m, s, next;  WNode h;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break; else       if (m < RFULL) {        if (U.compareAndSwapLong(this,STATE,s,next=s + RUNIT))         return next;      } else       if ((next=tryIncReaderOverflow(s)) != 0L)       return next;    } else     if (m == WBIT) {      if (a != m)       break;      state=next=s + (WBIT + RUNIT);      if ((h=whead) != null && h.status != 0)       release(h);      return next;    } else     if (a != 0L && a < WBIT)     return stamp; else     break;  }  return 0L;}  }
class C{  @Override public String globalInfo(){  return "A filter that applies filters on subsets of attributes and " + "assembles the output into a new dataset. Attributes that are " + "not covered by any of the ranges can be either retained or removed "+ "from the output.";}  }
class C{  @Override public void mouseDragged(MouseEvent e){  if (!events.isEmpty()) {    int dop=mapDragOperationFromModifiers(e);    if (dop == DnDConstants.ACTION_NONE) {      return;    }    MouseEvent trigger=(MouseEvent)events.get(0);    Point origin=trigger.getPoint();    Point current=e.getPoint();    int dx=Math.abs(origin.x - current.x);    int dy=Math.abs(origin.y - current.y);    if (dx > motionThreshold || dy > motionThreshold) {      fireDragGestureRecognized(dop,((MouseEvent)getTriggerEvent()).getPoint());    } else     appendEvent(e);  }}  }
class C{  public void sendMessage(int what,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.obj=obj;  sendMessage(msg);}  }
class C{  private void resetUi(){  if (null != mWaitWhileSearchInProgressView) {    mWaitWhileSearchInProgressView.setVisibility(View.GONE);  }  if (null != mLoadOldestContentView) {    mLoadOldestContentView.setVisibility(View.GONE);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.728 -0400",hash_original_method="E7CCB98064AA32ED0B661F6C268E4C15",hash_generated_method="91245A789931B90D6E40E3826EA79AF4") public int advance(){  return SR_RecognizerAdvance(mRecognizer);}  }
class C{  private double[] pruneEM(Tree tree,NodeRef node,ColourChangeMatrix mm,MetaPopulation mp){  double[] p=new double[colourCount];  if (tree.isExternal(node)) {    p[getColour(node)]=1.0;  } else {    NodeRef leftChild=tree.getChild(node,0);    NodeRef rightChild=tree.getChild(node,1);    double[] left=pruneEM(tree,leftChild,mm,mp);    double[] right=pruneEM(tree,rightChild,mm,mp);    double[] leftBranchPartials=pruneBranchEM(mm,left,node,leftChild,tree,mp);    double[] rightBranchPartials=pruneBranchEM(mm,right,node,rightChild,tree,mp);    double maxp=0.0;    for (int i=0; i < colourCount; i++) {      p[i]=leftBranchPartials[i] * rightBranchPartials[i];      if (useNodeBias) {        p[i]*=mm.getEquilibrium(i) / mp.getDemographic(tree.getNodeHeight(node) - tinyTime,i);      }      if (p[i] > maxp) {        maxp=p[i];      }    }    if (maxp < 1.0e-100) {      for (int i=0; i < colourCount; i++) {        p[i]*=1.0e+100;      }      logNodePartialsRescaling-=Math.log(1.0e+100);    }  }  nodePartials[node.getNumber()]=p;  if (debugNodePartials) {    prettyPrint("Node " + node.getNumber() + " pruneEM=",p);  }  return p;}  }
class C{  public void updateStorageGroupName(WBEMClient client,CIMObjectPath storageGroupPath,String storageGroupName) throws WBEMException {  if (StringUtils.isEmpty(storageGroupName)) {    return;  }  _log.info("Attempting to update storage group name to: " + storageGroupName);  CIMPropertyFactory factoryRef=(CIMPropertyFactory)ControllerServiceImpl.getBean("CIMPropertyFactory");  CIMInstance toUpdate=new CIMInstance(storageGroupPath,new CIMProperty[]{factoryRef.string(CP_ELEMENT_NAME,storageGroupName)});  _log.debug("Params: " + toUpdate.toString());  client.modifyInstance(toUpdate,PS_ELEMENT_NAME);}  }
class C{  public List<?> searchEntriesForUserByNote(String userId,String query,int startPosition,int maxResults){  return db.searchEntriesForUserHelper(userId,"note",query,startPosition,maxResults);}  }
class C{  public final DD selfMultiply(DD y){  return selfMultiply(y.hi,y.lo);}  }
class C{  public XTokenQueue(String data){  Validate.notNull(data);  queue=data;}  }
class C{  boolean hasAnimations(){  return (animatableComponents != null && animatableComponents.size() > 0) || (internalAnimatableComponents != null && internalAnimatableComponents.size() > 0) || (animMananger != null && animMananger.isAnimating());}  }
class C{  static public PVector fromAngle(float angle,PVector target){  if (target == null) {    target=new PVector((float)Math.cos(angle),(float)Math.sin(angle),0);  } else {    target.set((float)Math.cos(angle),(float)Math.sin(angle),0);  }  return target;}  }
class C{  protected CoverageFormat1(RandomAccessFile raf) throws IOException {  glyphCount=raf.readUnsignedShort();  glyphIds=new int[glyphCount];  for (int i=0; i < glyphCount; i++) {    glyphIds[i]=raf.readUnsignedShort();  }}  }
class C{  public String[] countryMustMatchList(){  String countryMustMatch=get(CrawlAttribute.CRAWLER_COUNTRY_MUSTMATCH.key);  if (countryMustMatch == null)   countryMustMatch=CrawlProfile.MATCH_NEVER_STRING;  if (countryMustMatch.isEmpty())   return new String[0];  String[] list=CommonPattern.COMMA.split(countryMustMatch);  if (list.length == 1 && list.length == 0)   list=new String[0];  return list;}  }
class C{  public Player(String name){  this.name=name;  this.hand=new Hand(name);}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(VesselTest.class);}  }
class C{  public boolean isNotAssignedToProject(){  return (associatedProjects == null || associatedProjects.isEmpty());}  }
class C{  public boolean isBusinessObjectDataAttributeRequired(String businessObjectAttributeName,BusinessObjectFormatEntity businessObjectFormatEntity){  boolean required=false;  for (  BusinessObjectDataAttributeDefinitionEntity attributeDefinitionEntity : businessObjectFormatEntity.getAttributeDefinitions()) {    if (businessObjectAttributeName.equalsIgnoreCase(attributeDefinitionEntity.getName())) {      required=true;      break;    }  }  return required;}  }
class C{  @Override public void agentAdded(Agent agent,Environment source){  String loc=getMapEnv().getAgentLocation(agent);  updateTrack(agent,loc);}  }
class C{  public void addPath(int[] path){  paths.add(path);}  }
class C{  public void addCustomProperty(CustomProperty customProperty){  getCustomProperties().add(customProperty);}  }
class C{  boolean hasPostponedMessages(){  String[] projection=new String[]{BaseColumns._ID,Imps.Messages.BODY,Imps.Messages.PACKET_ID,Imps.Messages.DATE,Imps.Messages.TYPE,Imps.Messages.IS_DELIVERED};  String selection=Imps.Messages.TYPE + "=?";  boolean result=false;  Cursor c=mContentResolver.query(mMessageURI,projection,selection,new String[]{Integer.toString(Imps.MessageType.POSTPONED)},null);  if (c == null) {    RemoteImService.debug("Query error while querying postponed messages");    return false;  } else   if (c.getCount() > 0) {    result=true;  }  c.close();  return true;}  }
class C{  protected StoragePort checkPortExistsInDB(String nativeGuid){  StoragePort port=null;  List<StoragePort> portInDB=CustomQueryUtility.getActiveStoragePortByNativeGuid(_dbClient,nativeGuid);  if (portInDB != null && !portInDB.isEmpty()) {    port=portInDB.get(0);  }  return port;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  if (root)   buf.append('/');  for (int i=0, len=names.size(); i < len; i++) {    if (i != 0)     buf.append('/');    buf.append((String)names.elementAt(i));  }  return buf.toString();}  }
class C{  public VertexDegreeColorizer(Graph graph){  Degree degree=Degree.getInstance();  DescriptiveStatistics distr=degree.statistics(graph.getVertices());  k_min=(int)distr.getMin();  k_max=(int)distr.getMax();}  }
class C{  public void addKnownPeer(InetSocketAddress peerAddress,String identity,byte[] key){  knownPeers.put(peerAddress,identity);  keys.put(identity,key);}  }
class C{  @SuppressWarnings("unused") private Intent packDefaults(){  Intent intent=new Intent();  intent.putExtras(resultData);  intent.putExtra(ActivityConstants.username,ActivityConstants.empty);  intent.putExtra(ActivityConstants.password,ActivityConstants.empty);  intent.putExtra(ActivityConstants.timeout,ActivityConstants.defaultTimeOut);  intent.putExtra(ActivityConstants.keepalive,ActivityConstants.defaultKeepAlive);  intent.putExtra(ActivityConstants.ssl,ActivityConstants.defaultSsl);  return intent;}  }
class C{  public static AppEventsLogger newLogger(Context context){  return new AppEventsLogger(context,null,null);}  }
class C{  public static void assignOutputProperties(Transformer transformer,Map<String,String> outputProperties){  for (  Map.Entry<String,String> property : outputProperties.entrySet()) {    try {      transformer.setOutputProperty(property.getKey(),property.getValue());    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  private void drawEndOfTheWorld(Graphics g,int xAdjust,int yAdjust){  if (xAdjust > 0) {    g.setColor(Color.BLACK);    g.fillRect(0,0,xAdjust,sh);  }  if (yAdjust > 0) {    g.setColor(Color.BLACK);    g.fillRect(0,0,sw,yAdjust);  }  int tmpY=yAdjust + convertWorldToPixelUnits(wh);  if (tmpY < sh) {    g.setColor(Color.BLACK);    g.fillRect(svx,tmpY,sw,sh);  }  int tmpX=yAdjust + convertWorldToPixelUnits(ww);  if (tmpX < sw) {    g.setColor(Color.BLACK);    g.fillRect(tmpX,svy,sw,sh);  }}  }
class C{  public static FileInfo fromXContent(XContentParser parser) throws IOException {  XContentParser.Token token=parser.currentToken();  String name=null;  String physicalName=null;  long length=-1;  String checksum=null;  ByteSizeValue partSize=null;  Version writtenBy=null;  BytesRef metaHash=new BytesRef();  if (token == XContentParser.Token.START_OBJECT) {    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {      if (token == XContentParser.Token.FIELD_NAME) {        String currentFieldName=parser.currentName();        token=parser.nextToken();        if (token.isValue()) {          if ("name".equals(currentFieldName)) {            name=parser.text();          } else           if ("physical_name".equals(currentFieldName)) {            physicalName=parser.text();          } else           if ("length".equals(currentFieldName)) {            length=parser.longValue();          } else           if ("checksum".equals(currentFieldName)) {            checksum=parser.text();          } else           if ("part_size".equals(currentFieldName)) {            partSize=new ByteSizeValue(parser.longValue());          } else           if ("written_by".equals(currentFieldName)) {            writtenBy=Lucene.parseVersionLenient(parser.text(),null);          } else           if ("meta_hash".equals(currentFieldName)) {            metaHash.bytes=parser.binaryValue();            metaHash.offset=0;            metaHash.length=metaHash.bytes.length;          } else {            throw new ElasticsearchParseException("unknown parameter [{}]",currentFieldName);          }        } else {          throw new ElasticsearchParseException("unexpected token  [{}]",token);        }      } else {        throw new ElasticsearchParseException("unexpected token [{}]",token);      }    }  }  if (name == null || Strings.validFileName(name) == false) {    throw new ElasticsearchParseException("missing or invalid file name [" + name + "]");  } else   if (physicalName == null || Strings.validFileName(physicalName) == false) {    throw new ElasticsearchParseException("missing or invalid physical file name [" + physicalName + "]");  } else   if (length < 0) {    throw new ElasticsearchParseException("missing or invalid file length");  }  return new FileInfo(name,new StoreFileMetaData(physicalName,length,checksum,writtenBy,metaHash),partSize);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case CURSOR_ID:return isSetCursorId();case CLOSE:return isSetClose();}throw new IllegalStateException();}  }
class C{  public org.dom4j.Namespace createNamespace(Namespace ns){  return factory.createNamespace(ns.getPrefix(),ns.getNamespaceURI());}  }
class C{  public static MockAccelerometer accelerometer(){  return new MockAccelerometer();}  }
class C{  @Override public void updateAsciiStream(String columnLabel,InputStream x,int length) throws SQLException {  updateAsciiStream(columnLabel,x,(long)length);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BoxAndWhiskerItem)) {    return false;  }  BoxAndWhiskerItem that=(BoxAndWhiskerItem)obj;  if (!ObjectUtilities.equal(this.mean,that.mean)) {    return false;  }  if (!ObjectUtilities.equal(this.median,that.median)) {    return false;  }  if (!ObjectUtilities.equal(this.q1,that.q1)) {    return false;  }  if (!ObjectUtilities.equal(this.q3,that.q3)) {    return false;  }  if (!ObjectUtilities.equal(this.minRegularValue,that.minRegularValue)) {    return false;  }  if (!ObjectUtilities.equal(this.maxRegularValue,that.maxRegularValue)) {    return false;  }  if (!ObjectUtilities.equal(this.minOutlier,that.minOutlier)) {    return false;  }  if (!ObjectUtilities.equal(this.maxOutlier,that.maxOutlier)) {    return false;  }  if (!ObjectUtilities.equal(this.outliers,that.outliers)) {    return false;  }  return true;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void addFieldClause(QueryTask.Query.Builder builder,String fieldName,String valuePrefix,ResourceConstraint constraint){  List<String> values=constraint.getValues();  boolean isNegative=false;  if (constraint.isSetNegative() && constraint.isNegative()) {    isNegative=true;  }  QueryTask.Query.Occurance occurance=isNegative ? QueryTask.Query.Occurance.MUST_NOT_OCCUR : QueryTask.Query.Occurance.MUST_OCCUR;  if (values == null || values.size() == 0) {    return;  }  if (values.size() == 1) {    String value;    if (valuePrefix != null) {      value=valuePrefix + values.get(0);    } else {      value=values.get(0);    }    builder.addFieldClause(fieldName,value,occurance);    return;  }  QueryTask.Query.Builder innerBuilder=QueryTask.Query.Builder.create(occurance);  for (  String value : values) {    if (valuePrefix != null) {      value=valuePrefix + value;    }    innerBuilder.addFieldClause(fieldName,value,Occurance.SHOULD_OCCUR);  }  builder.addClause(innerBuilder.build());}  }
class C{  public void testAddFileByOutputStream(ArchiveSource src) throws IOException {  src.clear();  try {    src.startWrite();    addFileByOutputStream(src,m_file1,m_data1);    addFileByOutputStream(src,m_file2,m_data2);    addFileByOutputStream(src,m_file3,m_data3);  }  finally {    src.finishWrite();  }  checkFilesAdded(src);}  }
class C{  public static void loadAllInnerData(Collection<? extends IAddressBook> addressBooks){  for (  IAddressBook addressBook : addressBooks) {    addressBook.getAddresses();    Collection<IContact> contacts=addressBook.getContacts();    for (    IContact contact : contacts) {      contact.getAddressBookField();    }  }}  }
class C{  public void fill(long size){  try {    LibaioContext.fill(fd,size);  } catch (  OutOfMemoryError e) {    NativeLogger.LOGGER.debug("Didn't have enough memory to allocate " + size + " bytes in memory, using simple fallocate");    LibaioContext.fallocate(fd,size);  }}  }
class C{  public static void randomNumber(int[] num,int n){  for (int j=0; j < n; j++) {    num[j]=(int)(Math.random() * 10);  }}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static boolean isRelaxedMode(){  return getProperty(RELAXED_REPORTING_MODE);}  }
class C{  public boolean isDeliveryTransacted(){  if (ActiveMQActivation.trace) {    ActiveMQRALogger.LOGGER.trace("isDeliveryTransacted()");  }  return isDeliveryTransacted;}  }
class C{  public LinkedList<IGroupMemberNode> extractNodeList(final boolean includeOptionalOrMinusNode){  LinkedList<IGroupMemberNode> res=new LinkedList<IGroupMemberNode>();  for (int i=0; i < partitions.size(); i++) {    res.addAll(partitions.get(i).extractNodeList(includeOptionalOrMinusNode));  }  return res;}  }
class C{  protected void checkAutoGeneratedKeysSupport() throws SQLException {  GDSHelper gdsHelper=getGDSHelper();  if (gdsHelper.compareToVersion(2,0) < 0) {    throw new FBDriverNotCapableException("This version of Firebird does not support retrieving generated keys (support was added in Firebird 2.0)");  }}  }
class C{  @SuppressWarnings("unchecked") public ContentScraper(final DigestURL root,int maxLinks,final VocabularyScraper vocabularyScraper,int timezoneOffset){  super(linkTags0,linkTags1);  assert root != null;  this.root=root;  this.maxLinks=maxLinks;  this.vocabularyScraper=vocabularyScraper;  this.timezoneOffset=timezoneOffset;  this.evaluationScores=new Evaluation();  this.rss=new SizeLimitedMap<DigestURL,String>(maxLinks);  this.css=new SizeLimitedMap<DigestURL,String>(maxLinks);  this.anchors=new ArrayList<AnchorURL>();  this.images=new ArrayList<ImageEntry>();  this.icons=new HashMap<>();  this.embeds=new SizeLimitedMap<AnchorURL,EmbedEntry>(maxLinks);  this.frames=new SizeLimitedSet<AnchorURL>(maxLinks);  this.iframes=new SizeLimitedSet<AnchorURL>(maxLinks);  this.metas=new SizeLimitedMap<String,String>(maxLinks);  this.hreflang=new SizeLimitedMap<String,DigestURL>(maxLinks);  this.navigation=new SizeLimitedMap<String,DigestURL>(maxLinks);  this.script=new SizeLimitedSet<AnchorURL>(maxLinks);  this.titles=new LinkedHashSet<String>();  this.articles=new ArrayList<String>();  this.startDates=new ArrayList<>();  this.endDates=new ArrayList<>();  this.headlines=(List<String>[])Array.newInstance(ArrayList.class,6);  for (int i=0; i < this.headlines.length; i++)   this.headlines[i]=new ArrayList<String>();  this.bold=new ClusteredScoreMap<String>(false);  this.italic=new ClusteredScoreMap<String>(false);  this.underline=new ClusteredScoreMap<String>(false);  this.li=new ArrayList<String>();  this.dt=new ArrayList<String>();  this.dd=new ArrayList<String>();  this.content=new CharBuffer(MAX_DOCSIZE,1024);  this.htmlFilterEventListeners=new EventListenerList();  this.lon=0.0d;  this.lat=0.0d;  this.evaluationScores.match(Element.url,root.toNormalform(true));  this.canonical=null;  this.publisher=null;  this.breadcrumbs=0;}  }
class C{  public static String leakInfo(Context context,HeapDump heapDump,AnalysisResult result,boolean detailed){  PackageManager packageManager=context.getPackageManager();  String packageName=context.getPackageName();  PackageInfo packageInfo;  try {    packageInfo=packageManager.getPackageInfo(packageName,0);  } catch (  PackageManager.NameNotFoundException e) {    throw new RuntimeException(e);  }  String versionName=packageInfo.versionName;  int versionCode=packageInfo.versionCode;  String info="In " + packageName + ":"+ versionName+ ":"+ versionCode+ ".\n";  String detailedString="";  if (result.leakFound) {    if (result.excludedLeak) {      info+="* EXCLUDED LEAK.\n";    }    info+="* " + result.className;    if (!heapDump.referenceName.equals("")) {      info+=" (" + heapDump.referenceName + ")";    }    info+=" has leaked:\n" + result.leakTrace.toString() + "\n";    info+="* Retaining: " + formatShortFileSize(context,result.retainedHeapSize) + ".\n";    if (detailed) {      detailedString="\n* Details:\n" + result.leakTrace.toDetailedString();    }  } else   if (result.failure != null) {    info+="* FAILURE in " + LIBRARY_VERSION + " "+ GIT_SHA+ ":"+ Log.getStackTraceString(result.failure)+ "\n";  } else {    info+="* NO LEAK FOUND.\n\n";  }  if (detailed) {    detailedString+="* Excluded Refs:\n" + heapDump.excludedRefs;  }  info+="* Reference Key: " + heapDump.referenceKey + "\n"+ "* Device: "+ Build.MANUFACTURER+ " "+ Build.BRAND+ " "+ Build.MODEL+ " "+ Build.PRODUCT+ "\n"+ "* Android Version: "+ Build.VERSION.RELEASE+ " API: "+ Build.VERSION.SDK_INT+ " LeakCanary: "+ LIBRARY_VERSION+ " "+ GIT_SHA+ "\n"+ "* Durations: watch="+ heapDump.watchDurationMs+ "ms, gc="+ heapDump.gcDurationMs+ "ms, heap dump="+ heapDump.heapDumpDurationMs+ "ms, analysis="+ result.analysisDurationMs+ "ms"+ "\n"+ detailedString;  return info;}  }
class C{  @Override public void mouseExited(MouseEvent evt){  delegate.mouseMoved(evt);}  }
class C{  public static int toInt(String num,int defaultValue){  if (num != null) {    try {      return Integer.parseInt(num);    } catch (    NumberFormatException e) {      logger.trace("",e);    }  }  return defaultValue;}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  super(context,attrs,defStyleAttr,defStyleRes);  init(context,attrs,defStyleAttr,defStyleRes);}  }
class C{  public SwitchPortTuple(SwitchPortTuple other){  __isset_bitfield=other.__isset_bitfield;  this.dpid=other.dpid;  this.port=other.port;}  }
class C{  public static long max(long a,long b){  return 0l;}  }
class C{  public void add(Context context,WebItem story){  Observable.defer(null).map(null).map(null).subscribeOn(mIoScheduler).observeOn(AndroidSchedulers.mainThread()).subscribe(null);  ItemSyncAdapter.initSync(context,story.getId());}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(Application.class);  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);  addDefaultProfile(app,source);  Environment env=app.run(args).getEnvironment();  log.info("Access URLs:\n----------------------------------------------------------\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t" + "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));}  }
class C{  public XmlSource<T> withRecordElement(String recordElement){  return new XmlSource<>(getFileOrPatternSpec(),getMinBundleSize(),rootElement,recordElement,recordClass);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException, java.io.InvalidObjectException {  Object a=s.readFields().get("array",null);  if (a == null || !a.getClass().isArray())   throw new java.io.InvalidObjectException("Not array type");  if (a.getClass() != Object[].class)   a=Arrays.copyOf((Object[])a,Array.getLength(a),Object[].class);  unsafe.putObjectVolatile(this,arrayFieldOffset,a);}  }
class C{  public void register(Class<?> clazz){  this.kryo.register(clazz);}  }
class C{  public EmbeddedJMSResource(int serverId){  this.serverId=serverId;  Map<String,Object> props=new HashMap<>();  props.put(TransportConstants.SERVER_ID_PROP_NAME,serverId);  configuration=new ConfigurationImpl().setName(SERVER_NAME + "-" + serverId).setPersistenceEnabled(false).setSecurityEnabled(false).addAcceptorConfiguration(new TransportConfiguration(InVMAcceptorFactory.class.getName(),props));  jmsConfiguration=new JMSConfigurationImpl();  init();}  }
class C{  private ViewUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public MetricSchemaRecord(String scope,String metric){  this(null,scope,metric,null,null);}  }
class C{  @Override protected void writeEntityToNBT(NBTTagCompound nbt){  NBTTagCompound baoZhaNBT=new NBTTagCompound();  baoZhaNBT.setString("class",this.blast.getClass().getCanonicalName());  this.blast.writeToNBT(baoZhaNBT);  nbt.setTag("blast",baoZhaNBT);}  }
class C{  private void drawData(final SampleWrapper sample){  final List<Double> data=sample.getData();  if (data == null || data.size() < 2) {    return;  }  final Rectangle clientArea=getClientArea();  final double maxValue=sample.getMaxValue();  this.gc.setClipping(clientArea);  final Color borderColor=new Color(getDisplay(),sample.getBorderColor());  final Color color=new Color(getDisplay(),sample.getColor());  final int[] pointArray=new int[2 * (data.size() + 2)];  final int availableWidth=clientArea.width - this.gridSize;  final int availableHeight=(int)((clientArea.height - this.gridSize) * 0.98f);  int x=this.gridSize / 2 + availableWidth - (data.size() - 1) * this.gridSize;  pointArray[0]=x;  pointArray[1]=clientArea.y + clientArea.height + this.gridSize / 2 - (this.captionVisible ? 25 : 0);  int index=2;  double maxDisplayedValue=-1d;  for (  final Double datum : data) {    pointArray[index++]=x;    pointArray[index++]=clientArea.height - (int)(this.gridSize / 2 + availableHeight * datum / maxValue);    x+=this.gridSize;    maxDisplayedValue=Math.max(maxDisplayedValue,datum);  }  pointArray[index++]=x - this.gridSize;  pointArray[index++]=clientArea.y + clientArea.height + this.gridSize / 2 - (this.captionVisible ? 25 : 0);  this.gc.setAlpha(this.samples.size() == 1 ? 210 : 150);  final Region region=new Region(getDisplay());  region.add(pointArray);  this.gc.setClipping(region);  this.gc.setForeground(borderColor);  this.gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_BLACK));  this.gc.fillGradientRectangle(this.gridSize / 2,clientArea.height - (int)(this.gridSize / 2 + availableHeight * maxDisplayedValue / maxValue),availableWidth,(int)(availableHeight * maxDisplayedValue / maxValue),true);  this.gc.setClipping(clientArea);  this.gc.setForeground(borderColor);  this.gc.drawPolygon(pointArray);  region.dispose();  borderColor.dispose();  color.dispose();  this.gc.setAlpha(255);}  }
class C{  protected void uninstallListeners(){  spinner.removePropertyChangeListener(propertyChangeListener);  spinner.removeChangeListener(handler);  JComponent editor=spinner.getEditor();  removeEditorBorderListener(editor);  if (editor instanceof JSpinner.DefaultEditor) {    JTextField tf=((JSpinner.DefaultEditor)editor).getTextField();    if (tf != null) {      tf.removeFocusListener(nextButtonHandler);      tf.removeFocusListener(previousButtonHandler);    }  }  propertyChangeListener=null;  handler=null;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  private void addMenuItem(JPopupMenu menu,String title,MWFNodeNext line){  WFPopupItem item=new WFPopupItem(title,line);  menu.add(item);  item.addActionListener(this);}  }
class C{  public static void finishMockSleep(){  if (mockSleepQueue != null) {    mockSleepQueue.offer(true);  }}  }
class C{  public void moveToIndex(Operator op,int newIndex){  int oldIndex=operators.indexOf(op);  Process process=getEnclosingOperator().getProcess();  if (oldIndex != -1) {    operators.remove(op);    if (process != null) {      int oldIndexAmongEnabled=getEnabledOperators().indexOf(op);      process.fireOperatorRemoved(op,oldIndex,oldIndexAmongEnabled);    }    if (oldIndex < newIndex) {      newIndex--;    }    operators.add(newIndex,op);    if (process != null) {      process.fireOperatorAdded(op);    }    fireUpdate();    updateExecutionOrder();  }}  }
class C{  @Deprecated public static TimeZone timeZoneGMT(){  return TIMEZONE_GMT;}  }
class C{  public float percentAllocations(final long totalAllocations){  if (totalAllocations == 0) {    return 0.0f;  }  final BigDecimal used=new BigDecimal(100 * m_slotAllocations);  final BigDecimal total=new BigDecimal(totalAllocations);  if (total.signum() == 0)   return 0f;  return used.divide(total,2,RoundingMode.HALF_UP).floatValue();}  }
class C{  public String toStringTrim(){  int st=0;  int len=count;  char[] val=buf;  while ((st < len) && (val[st] <= ' ')) {    st++;    len--;  }  while ((st < len) && (val[len - 1] <= ' ')) {    len--;  }  return new String(buf,st,len);}  }
class C{  public DeterministicKey derive(int child){  return HDKeyDerivation.deriveChildKey(this,new ChildNumber(child,true));}  }
class C{  public static void write(BufferedWriter writer,DatabaseFieldConfig config,String tableName) throws SQLException {  try {    writeConfig(writer,config,tableName);  } catch (  IOException e) {    throw SqlExceptionUtil.create("Could not write config to writer",e);  }}  }
class C{  public Builder tcpSettings(TcpSettings tcpSettings){  this.tcpSettings=tcpSettings;  return this;}  }
class C{  private static IgniteConfiguration configuration(String name,boolean client){  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName(name);  cfg.setClientMode(client);  cfg.setLocalHost("127.0.0.1");  cfg.setPeerClassLoadingEnabled(false);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  TcpDiscoveryVmIpFinder ipFinder=new TcpDiscoveryVmIpFinder();  ipFinder.setAddresses(Collections.singletonList("127.0.0.1:47500"));  discoSpi.setIpFinder(ipFinder);  cfg.setDiscoverySpi(discoSpi);  CacheConfiguration ccfg=new CacheConfiguration();  ccfg.setCacheMode(CacheMode.PARTITIONED);  cfg.setCacheConfiguration(ccfg);  return cfg;}  }
class C{  private void sendToClient(EntityPlayerMP player){  setSendToClient(true);  final SPacketUpdateTileEntity updatePacket=getUpdatePacket();  if (updatePacket != null) {    player.connection.sendPacket(updatePacket);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void inputKeyevent(int value){  executeCommandQuietly(adbCommand("shell","input","keyevent","" + value));  try {    Thread.sleep(500);  } catch (  InterruptedException e) {    log.warn("",e);  }}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){  inactivityTimer.onActivity();  lastResult=rawResult;  ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    historyManager.addHistoryItem(rawResult,resultHandler);    beepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,scaleFactor,rawResult);  }switch (source) {case NATIVE_APP_INTENT:case PRODUCT_SEARCH_LINK:    handleDecodeExternally(rawResult,resultHandler,barcode);  break;case ZXING_LINK:if (scanFromWebPageManager == null || !scanFromWebPageManager.isScanFromWebPage()) {  handleDecodeInternally(rawResult,resultHandler,barcode);} else {  handleDecodeExternally(rawResult,resultHandler,barcode);}break;case NONE:SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) {Toast.makeText(getApplicationContext(),getResources().getString(R.string.msg_bulk_mode_scanned) + " (" + rawResult.getText()+ ')',Toast.LENGTH_SHORT).show();restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);} else {handleDecodeInternally(rawResult,resultHandler,barcode);}break;}}  }
class C{  private void removeProgressNotificationForDownload(int downloadId){  mDownloadProgressMap.remove(downloadId);  mDownloadNotifier.cancelNotification(downloadId);  removeDownloadIdFromSharedPrefs(downloadId);}  }
class C{  public BuilderForDnsDiscoverer discoverAttemptInterval(Duration discoverAttemptInterval){  super.discoverAttemptInterval=discoverAttemptInterval;  return this;}  }
class C{  public static void updateNeurons(List<Neuron> neuronList){  for (  Neuron neuron : neuronList) {    neuron.update();  }  for (  Neuron neuron : neuronList) {    neuron.setToBufferVals();  }}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  if (m_Train.numInstances() == 0) {    return m_defaultModel.distributionForInstance(instance);  }  if ((m_WindowSize > 0) && (m_Train.numInstances() > m_WindowSize)) {    m_kNNValid=false;    boolean deletedInstance=false;    while (m_Train.numInstances() > m_WindowSize) {      m_Train.delete(0);    }    if (deletedInstance == true)     m_NNSearch.setInstances(m_Train);  }  if (!m_kNNValid && (m_CrossValidate) && (m_kNNUpper >= 1)) {    crossValidate();  }  m_NNSearch.addInstanceInfo(instance);  Instances neighbours=m_NNSearch.kNearestNeighbours(instance,m_kNN);  double[] distances=m_NNSearch.getDistances();  double[] distribution=makeDistribution(neighbours,distances);  return distribution;}  }
class C{  @Override public boolean addAll(Collection<? extends E> c){  if (null == c) {    throw new NullPointerException();  }  if (this == c) {    throw new IllegalArgumentException();  }  return super.addAll(c);}  }
class C{  private void notifyInterfaceStatusChanged(String iface,boolean up){  final int length=mObservers.beginBroadcast();  for (int i=0; i < length; i++) {    try {      mObservers.getBroadcastItem(i).interfaceStatusChanged(iface,up);    } catch (    RemoteException e) {    }catch (    RuntimeException e) {    }  }  mObservers.finishBroadcast();}  }
class C{  private void endCurrentBeginNewWindow() throws InterruptedException {  queue.put(new EndWindowTuple(baseSeconds | windowId));  if (++checkPointWindowCount == checkpointCount) {    queue.put(new Tuple(MessageType.CHECKPOINT,baseSeconds | windowId));    checkPointWindowCount=0;  }  if (windowId == MAX_WINDOW_ID) {    advanceWindow();    run();  } else {    advanceWindow();    queue.put(new Tuple(MessageType.BEGIN_WINDOW,baseSeconds | windowId));  }}  }
class C{  public ChannelFavorites(Settings settings){  this.settings=settings;  if (settings.getBoolean("historyClear")) {    removeOld();  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected static String toPath(String className,String suffix){  return className.replace(".",File.separator) + suffix;}  }
class C{  public SecretKeys(SecretKey confidentialityKeyIn,SecretKey integrityKeyIn){  setConfidentialityKey(confidentialityKeyIn);  setIntegrityKey(integrityKeyIn);}  }
class C{  public void saveVoice(VoiceConfig config){  config.addCredentials(this);  POST(this.url + "/save-voice",config.toXML());}  }
class C{  public void testRbrUpdate() throws Exception {  OneRowChange oneRowChange=generateRowChange("foo","bar",RowChangeData.ActionType.UPDATE);  oneRowChange.setColumnSpec(generateSpec(oneRowChange));  oneRowChange.setColumnValues(generateValues(oneRowChange,1,"two"));  oneRowChange.setKeySpec(generateSpec(oneRowChange));  oneRowChange.setKeyValues(generateValues(oneRowChange,1,"one"));  RbrTableChangeSet changeSet=new RbrTableChangeSet(oneRowChange);  assertEquals("check schema","foo",changeSet.getSchemaName());  assertEquals("check table","bar",changeSet.getTableName());  assertEquals("check rows",1,changeSet.size());  RbrRowChange rowChange=changeSet.getRowChange(0);  assertEquals("check schema","foo",rowChange.getSchemaName());  assertEquals("check table","bar",rowChange.getTableName());  assertTrue(rowChange.isUpdate());  assertFalse(rowChange.isDelete());  assertFalse(rowChange.isInsert());  RbrRowImage before=rowChange.getBeforeImage();  assertNotNull(before);  assertEquals("c1 is int",Types.INTEGER,before.getSpec(1).getType());  assertEquals("c2 is c2","c2",before.getSpec("c2").getName());  assertEquals("key is 1",1,before.getValue(1).getValue());  assertEquals("col is one","one",before.getValue("c2").getValue());  RbrRowImage after=rowChange.getAfterImage();  assertNotNull(after);  assertEquals("c1 is c1","c1",after.getSpec("c1").getName());  assertEquals("c2 is char",Types.CHAR,after.getSpec(2).getType());  assertEquals("key is 1",1,after.getValue("c1").getValue());  assertEquals("col is two","two",after.getValue(2).getValue());}  }
class C{  public static void enableJettyLogging(){  Log.setLog(jettyLogger);}  }
class C{  private SSLContext createAndConfigureSSLContext() throws GeneralSecurityException, IOException {  SSLContext newSSLContext=getSSLContextInstance();  KeyManager[] keyManagers=getKeyManagers();  TrustManager[] trustManagers=getTrustManagers();  newSSLContext.init(keyManagers,trustManagers,null);  return newSSLContext;}  }
class C{  public List<Glyph.Builder<? extends Glyph>> glyphBuilders(){  return this.getGlyphBuilders();}  }
class C{  public SelectionInputDialog(Window owner,String key,boolean editable,T[] selectionValues,T initialSelectionValue,InputValidator<T> inputValidator,Object... keyArguments){  this(owner,key,selectionValues,initialSelectionValue,inputValidator,keyArguments);  comboBox.setEditable(editable);}  }
class C{  private String scanUriEscapes(String name,Mark startMark){  int length=1;  while (reader.peek(length * 3) == '%') {    length++;  }  Mark beginningMark=reader.getMark();  ByteBuffer buff=ByteBuffer.allocate(length);  while (reader.peek() == '%') {    reader.forward();    try {      byte code=(byte)Integer.parseInt(reader.prefix(2),16);      buff.put(code);    } catch (    NumberFormatException nfe) {      throw new ScannerException("while scanning a " + name,startMark,"expected URI escape sequence of 2 hexadecimal numbers, but found " + reader.peek() + "("+ ((int)reader.peek())+ ") and "+ reader.peek(1)+ "("+ ((int)reader.peek(1))+ ")",reader.getMark());    }    reader.forward(2);  }  buff.flip();  try {    return UriEncoder.decode(buff);  } catch (  CharacterCodingException e) {    throw new ScannerException("while scanning a " + name,startMark,"expected URI in UTF-8: " + e.getMessage(),beginningMark);  }}  }
class C{  protected synchronized void error(String err){  m_anyWrapper.error(err);}  }
class C{  public static Timestamp firstOf(Timestamp p_dateTime,String XX){  Timestamp time=p_dateTime;  if (time == null)   time=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(time);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  if ("MM".equals(XX))   cal.set(Calendar.DAY_OF_MONTH,1); else   if ("DY".equals(XX))   cal.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY); else   if ("Q".equals(XX)) {    cal.set(Calendar.DAY_OF_MONTH,1);    int mm=cal.get(Calendar.MONTH);    if (mm < Calendar.APRIL)     cal.set(Calendar.MONTH,Calendar.JANUARY); else     if (mm < Calendar.JULY)     cal.set(Calendar.MONTH,Calendar.APRIL); else     if (mm < Calendar.OCTOBER)     cal.set(Calendar.MONTH,Calendar.JULY); else     cal.set(Calendar.MONTH,Calendar.OCTOBER);  }  java.util.Date temp=cal.getTime();  return new Timestamp(temp.getTime());}  }
class C{  @Override public void sendBroadcast(Intent intent){  mRealContext.sendBroadcast(intent);}  }
class C{  public boolean isKanban(){  Object oo=get_Value(COLUMNNAME_IsKanban);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSComment("no suspicious activity, just creates object") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:14.945 -0500",hash_original_method="61498548735D8100B59ED3B549CA2D7D",hash_generated_method="8FEC3AB94E860C562C0D31C07152B7D5") public URL toURL() throws MalformedURLException {  if (!absolute) {    throw new IllegalArgumentException("URI is not absolute: " + toString());  }  return new URL(toString());}  }
class C{  public void error(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {  String formattedMsg=e.getMessage();  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    handler.error(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public synchronized void connect() throws Exception {  connect(false);}  }
class C{  public void becomeDefaultLogger(){  LoggingConfiguration.replaceDefaultHandler(new LogPaneHandler());}  }
class C{  public static OutputStream ostream(File f){  try {    if (!f.isAbsolute())     f=new File(getResourcesDir(),f.getPath());    return new FileOutputStream(f);  } catch (  FileNotFoundException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isSnapshotInEffect(){  return nextSnapshot;}  }
class C{  public DBCredential copy(){  DBCredential cred=new DBCredential();  cred.setAppUser(this.appUser);  cred.setDbGroupName(this.dbGroupName);  cred.setUsername(this.username);  cred.setPassword(this.password);  cred.setEncrypted(encrypted);  return cred;}  }
class C{  private JMenu createHelpMenu(){  JMenu helpMenu=new JMenu("Help");  helpMenu.add(new ShowHelpAction("Main Help","SimbrainDocs.html"));  helpMenu.addSeparator();  helpMenu.add(new ShowHelpAction("Quick start","Pages/QuickStart.html"));  helpMenu.add(new ShowHelpAction("Keyboard Shortcuts","KeyboardShortcuts.html"));  helpMenu.add(new ShowHelpAction("Credits","SimbrainCredits.html"));  return helpMenu;}  }
class C{  public void verifyIndexing(Object obj,String... indexed) throws Exception {  Set<String> indexedSet=ImmutableSet.copyOf(indexed);  Set<String> allSet=getAllPotentiallyIndexedFieldPaths(obj.getClass());  assertThat(Sets.intersection(allSet,indexedSet)).containsExactlyElementsIn(indexedSet);  verifyIndexingHelper(obj,true,indexedSet);  verifyIndexingHelper(obj,false,Sets.difference(allSet,indexedSet));}  }
class C{  public static void responseCodeReceived(Context context,RestoreTransactions request,ResponseCode responseCode){  if (sPurchaseObserver != null) {    sPurchaseObserver.onRestoreTransactionsResponse(request,responseCode);  }}  }
class C{  private void recursiveDelete(final File f){  if (f.isDirectory()) {    final File[] children=f.listFiles();    for (int i=0; i < children.length; i++) {      recursiveDelete(children[i]);    }  }  if (log.isInfoEnabled())   log.info("Removing: " + f);  if (f.exists() && !f.delete()) {    log.warn("Could not remove: " + f);  }}  }
class C{  public boolean isContextual(){  return fContextual;}  }
class C{  public void close(){  _client.close();}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  int requested=zzBuffer.length - zzEndRead - zzFinalHighSurrogate;  int totalRead=0;  while (totalRead < requested) {    int numRead=zzReader.read(zzBuffer,zzEndRead + totalRead,requested - totalRead);    if (numRead == -1) {      break;    }    totalRead+=numRead;  }  if (totalRead > 0) {    zzEndRead+=totalRead;    if (totalRead == requested) {      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {        --zzEndRead;        zzFinalHighSurrogate=1;        if (totalRead == 1) {          return true;        }      }    }    return false;  }  return true;}  }
class C{  public void test_plain_literal_ordering(){  final V v=new V();  final IVComparator c=new IVComparator();  assertLT(c.compare(v.noninline_plain_lit1,v.noninline_plain_lit2));}  }
class C{  public final int find(SnmpOid index){  return Arrays.binarySearch(indexes,index,oidComparator);}  }
class C{  public OutlierResult run(Database database,Relation<N> nrel,Relation<? extends NumberVector> relation){  final NeighborSetPredicate npred=getNeighborSetPredicateFactory().instantiate(database,nrel);  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  MeanVariance mv=new MeanVariance();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    DBIDs neighbors=npred.getNeighborDBIDs(iditer);    final double median;{      double[] fi=new double[neighbors.size()];      int c=0;      for (DBIDIter iter=neighbors.iter(); iter.valid(); iter.advance()) {        if (DBIDUtil.equal(iditer,iter)) {          continue;        }        fi[c]=relation.get(iter).doubleValue(0);        c++;      }      if (c > 0) {        median=QuickSelect.median(fi,0,c);      } else {        median=relation.get(iditer).doubleValue(0);      }    }    double h=relation.get(iditer).doubleValue(0) - median;    scores.putDouble(iditer,h);    mv.put(h);  }  final double mean=mv.getMean();  final double stddev=mv.getNaiveStddev();  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double score=Math.abs((scores.doubleValue(iditer) - mean) / stddev);    minmax.put(score);    scores.putDouble(iditer,score);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("MO","Median-outlier",scores,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY,0);  OutlierResult or=new OutlierResult(scoreMeta,scoreResult);  or.addChildResult(npred);  return or;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  private boolean checkGooglePlayServicesAvailable(){  final int connectionStatusCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);  if (GooglePlayServicesUtil.isUserRecoverableError(connectionStatusCode)) {    showGooglePlayServicesAvailabilityErrorDialog(connectionStatusCode);    return false;  }  return true;}  }
class C{  public void selectItemsByLayerName(String name){}  }
class C{  public synchronized void release(){  if (!done) {    ArrayList<LogConnection> cRefs=new ArrayList<LogConnection>(cursors.size());    for (    LogConnection c : cursors.keySet()) {      cRefs.add(c);    }    for (    LogConnection c : cRefs) {      releaseConnection(c);    }    cursors=null;    done=true;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:16.639 -0500",hash_original_method="EBDE0BAE6A65E045698E84F7289F4664",hash_generated_method="0E4864763233876F8875A8560CBC3873") synchronized void deleteACookie(Cookie cookie){  if (cookie.mode == Cookie.MODE_DELETED) {    String baseDomain=getBaseDomain(cookie.domain);    ArrayList<Cookie> cookieList=mCookieMap.get(baseDomain);    if (cookieList != null) {      cookieList.remove(cookie);      if (cookieList.isEmpty()) {        mCookieMap.remove(baseDomain);      }    }  }}  }
class C{  protected ArrayList<String> convertStatement(String sqlStatement){  ArrayList<String> result=new ArrayList<String>();  Vector<String> retVars=new Vector<String>();  int found_next_fuction=sqlStatement.toUpperCase().indexOf("NEXTIDFUNC(");  if (found_next_fuction <= 0)   found_next_fuction=sqlStatement.toUpperCase().indexOf("NEXTID(");  if (found_next_fuction > 0) {    boolean SYSTEM_NATIVE_SEQUENCE=MSysConfig.getBooleanValue("SYSTEM_NATIVE_SEQUENCE",false);    boolean adempiereSys=Ini.isPropertyBool(Ini.P_ADEMPIERESYS);    if (SYSTEM_NATIVE_SEQUENCE && !adempiereSys) {      String function_before=sqlStatement.substring(0,found_next_fuction);      String function_start=sqlStatement.substring(found_next_fuction);      String function_after=function_start.substring(function_start.indexOf(")") + 1);      String sequence=function_start.substring(function_start.indexOf("(") + 1,function_start.indexOf(","));      int separator=function_start.indexOf("'") + 1;      String next=function_start.substring(separator);      String system=next.substring(0,next.indexOf("'"));      if (system.equals("N")) {        String seq_name=DB.getSQLValueString(null,"SELECT Name FROM AD_Sequence WHERE AD_Sequence_ID=" + sequence);        sqlStatement=function_before + " nextval('" + seq_name+ "_seq') "+ function_after;      }    }  }  String statement=replaceQuotedStrings(sqlStatement,retVars);  statement=convertWithConvertMap(statement);  statement=statement.replace(DB_PostgreSQL.NATIVE_MARKER,"");  String cmpString=statement.toUpperCase();  boolean isCreate=cmpString.startsWith("CREATE ");  if (isCreate && cmpString.indexOf(" FUNCTION ") != -1)   ; else   if (isCreate && cmpString.indexOf(" TRIGGER ") != -1)   ; else   if (isCreate && cmpString.indexOf(" PROCEDURE ") != -1)   ; else   if (isCreate && cmpString.indexOf(" VIEW ") != -1)   ; else   if (cmpString.indexOf("ALTER TABLE") != -1) {    statement=recoverQuotedStrings(statement,retVars);    retVars.clear();    statement=convertDDL(convertComplexStatement(statement));  } else   if (cmpString.indexOf("DELETE ") != -1 && cmpString.indexOf("DELETE FROM") == -1) {    statement=convertDelete(statement);    statement=convertComplexStatement(convertAlias(statement));  } else   if (cmpString.indexOf("DELETE FROM") != -1) {    statement=convertComplexStatement(convertAlias(statement));  } else   if (cmpString.indexOf("UPDATE ") != -1) {    statement=convertComplexStatement(convertUpdate(convertAlias(statement)));  } else {    statement=convertComplexStatement(convertAlias(statement));  }  if (retVars.size() > 0)   statement=recoverQuotedStrings(statement,retVars);  result.add(statement);  return result;}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public void addText(String text) throws ConfigException, PatternSyntaxException {  text=text.trim();  if (!text.equals(""))   setName(text);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xDF9D0C92,version=271) public int sceUsbCamGetReadVideoFrameSize(){  return jpegBufferSize;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == SimpleProjectDependency.class) {switch (baseOperationID) {case N4mfPackage.SIMPLE_PROJECT_DEPENDENCY___GET_SCOPE:      return N4mfPackage.PROJECT_DEPENDENCY___GET_SCOPE;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.914 -0500",hash_original_method="DD8EBB0EDF44ABE263687E4C98AB74A0",hash_generated_method="DF02DED43394811F487DC203A1224014") protected synchronized byte[] engineGenerateSeed(int numBytes){  byte[] myBytes;  if (numBytes < 0) {    throw new NegativeArraySizeException(Integer.toString(numBytes));  }  if (numBytes == 0) {    return EmptyArray.BYTE;  }  if (myRandom == null) {    myRandom=new SHA1PRNG_SecureRandomImpl();    myRandom.engineSetSeed(RandomBitsSupplier.getRandomBits(DIGEST_LENGTH));  }  myBytes=new byte[numBytes];  myRandom.engineNextBytes(myBytes);  return myBytes;}  }
class C{  private BlockMirror queryMirror(URI id){  ArgValidator.checkUri(id);  BlockMirror mirror=_permissionsHelper.getObjectById(id,BlockMirror.class);  ArgValidator.checkEntityNotNull(mirror,id,isIdEmbeddedInURL(id));  return mirror;}  }
class C{  protected String paramString(){  StringBuffer chooserPanelsString=new StringBuffer("");  for (int i=0; i < chooserPanels.length; i++) {    chooserPanelsString.append("[" + chooserPanels[i].toString() + "]");  }  String previewPanelString=(previewPanel != null ? previewPanel.toString() : "");  return super.paramString() + ",chooserPanels=" + chooserPanelsString.toString()+ ",previewPanel="+ previewPanelString;}  }
class C{  public String toRrData(){  return String.format("%d %d %d %s",this.keyTag,this.algorithm,this.digestType,DatatypeConverter.printHexBinary(digest));}  }
class C{  protected static List<URI> toURIs(Iterable<String> ids){  List<URI> uris=Lists.newArrayList();  for (  String id : ids) {    uris.add(URI.create(id));  }  return uris;}  }
class C{  @Override public int size(){  return _map.size();}  }
class C{  public void postMessage(String id,Object data){  if (this.pluginManager != null) {    this.pluginManager.postMessage(id,data);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public Node insertBefore(Node newChild,Node refChild) throws DOMException {  if (null == refChild) {    appendChild(newChild);    return newChild;  }  if (newChild == refChild) {    return newChild;  }  Node node=m_firstChild;  Node prev=null;  boolean foundit=false;  while (null != node) {    if (newChild == node) {      if (null != prev)       ((ElemTemplateElement)prev).m_nextSibling=(ElemTemplateElement)node.getNextSibling(); else       m_firstChild=(ElemTemplateElement)node.getNextSibling();      node=node.getNextSibling();      continue;    }    if (refChild == node) {      if (null != prev) {        ((ElemTemplateElement)prev).m_nextSibling=(ElemTemplateElement)newChild;      } else {        m_firstChild=(ElemTemplateElement)newChild;      }      ((ElemTemplateElement)newChild).m_nextSibling=(ElemTemplateElement)refChild;      ((ElemTemplateElement)newChild).setParentElem(this);      prev=newChild;      node=node.getNextSibling();      foundit=true;      continue;    }    prev=node;    node=node.getNextSibling();  }  if (!foundit)   throw new DOMException(DOMException.NOT_FOUND_ERR,"refChild was not found in insertBefore method!"); else   return newChild;}  }
class C{  @Override protected void patchJumpTarget(int branch,int jumpTarget){  int instruction=getInt(branch);  int branchOffset=jumpTarget - branch;  PatchLabelKind type=PatchLabelKind.fromEncoding(instruction);switch (type) {case BRANCH_CONDITIONALLY:    ConditionFlag cf=ConditionFlag.fromEncoding(instruction >>> PatchLabelKind.INFORMATION_OFFSET);  super.b(cf,branchOffset,branch);break;case BRANCH_UNCONDITIONALLY:super.b(branchOffset,branch);break;case JUMP_ADDRESS:emitInt(jumpTarget,branch);break;case BRANCH_NONZERO:case BRANCH_ZERO:{int information=instruction >>> PatchLabelKind.INFORMATION_OFFSET;int sizeEncoding=information & 1;int regEncoding=information >>> 1;Register reg=AArch64.cpuRegisters.get(regEncoding);int size=sizeEncoding * 32 + 32;switch (type) {case BRANCH_NONZERO:super.cbnz(size,reg,branchOffset,branch);break;case BRANCH_ZERO:super.cbz(size,reg,branchOffset,branch);break;}break;}case ADR:{int information=instruction >>> PatchLabelKind.INFORMATION_OFFSET;int regEncoding=information;Register reg=AArch64.cpuRegisters.get(regEncoding);super.adr(reg,branchOffset,branch);break;}default :throw GraalError.shouldNotReachHere();}}  }
class C{  @Override public boolean ready() throws IOException {synchronized (lock) {    checkNotClosed();    return ((end - pos) > 0) || in.ready();  }}  }
class C{  protected void prepare(){  StringBuffer sb=new StringBuffer("AD_PInstance_ID=").append(getAD_PInstance_ID());  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_AcctSchema_ID"))     p_C_AcctSchema_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Period_ID"))     p_C_Period_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DateAcct")) {      p_DateAcct_From=(Timestamp)para[i].getParameter();      p_DateAcct_To=(Timestamp)para[i].getParameter_To();    } else     if (name.equals("PA_Hierarchy_ID"))     p_PA_Hierarchy_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("Account_ID"))     p_Account_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AccountValue")) {      p_AccountValue_From=(String)para[i].getParameter();      p_AccountValue_To=(String)para[i].getParameter_To();    } else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Product_ID"))     p_M_Product_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Project_ID"))     p_C_Project_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Activity_ID"))     p_C_Activity_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_SalesRegion_ID"))     p_C_SalesRegion_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Campaign_ID"))     p_C_Campaign_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("PostingType"))     p_PostingType=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  m_parameterWhere.append("C_AcctSchema_ID=").append(p_C_AcctSchema_ID);  if (p_Account_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Account,p_Account_ID));  if (p_AccountValue_From != null && p_AccountValue_From.length() == 0)   p_AccountValue_From=null;  if (p_AccountValue_To != null && p_AccountValue_To.length() == 0)   p_AccountValue_To=null;  if (p_AccountValue_From != null && p_AccountValue_To != null)   m_parameterWhere.append(" AND (Account_ID IS NULL OR EXISTS (SELECT * FROM C_ElementValue ev ").append("WHERE Account_ID=ev.C_ElementValue_ID AND ev.Value >= ").append(DB.TO_STRING(p_AccountValue_From)).append(" AND ev.Value <= ").append(DB.TO_STRING(p_AccountValue_To)).append("))"); else   if (p_AccountValue_From != null && p_AccountValue_To == null)   m_parameterWhere.append(" AND (Account_ID IS NULL OR EXISTS (SELECT * FROM C_ElementValue ev ").append("WHERE Account_ID=ev.C_ElementValue_ID AND ev.Value >= ").append(DB.TO_STRING(p_AccountValue_From)).append("))"); else   if (p_AccountValue_From == null && p_AccountValue_To != null)   m_parameterWhere.append(" AND (Account_ID IS NULL OR EXISTS (SELECT * FROM C_ElementValue ev ").append("WHERE Account_ID=ev.C_ElementValue_ID AND ev.Value <= ").append(DB.TO_STRING(p_AccountValue_To)).append("))");  if (p_AD_Org_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Organization,p_AD_Org_ID));  if (p_C_BPartner_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_BPartner,p_C_BPartner_ID));  if (p_M_Product_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Product,p_M_Product_ID));  if (p_C_Project_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Project,p_C_Project_ID));  if (p_C_Activity_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Activity,p_C_Activity_ID));  if (p_C_Campaign_ID != 0)   m_parameterWhere.append(" AND C_Campaign_ID=").append(p_C_Campaign_ID);  if (p_C_SalesRegion_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_SalesRegion,p_C_SalesRegion_ID));  m_parameterWhere.append(" AND PostingType='").append(p_PostingType).append("'");  setDateAcct();  sb.append(" - DateAcct ").append(p_DateAcct_From).append("-").append(p_DateAcct_To);  sb.append(" - Where=").append(m_parameterWhere);  log.fine(sb.toString());}  }
class C{  public boolean init(StepMetaInterface smi,StepDataInterface sdi){  this.meta=((SortKeyStepMeta)smi);  this.data=((SortKeyStepData)sdi);  return super.init(smi,sdi);}  }
class C{  public final void pgnTreeWalker(PGNOptions options,PgnToken.PgnTokenReceiver out){  String pgnResultString;{    List<Integer> currPath=new ArrayList<Integer>();    while (currentNode != rootNode) {      Node child=currentNode;      goBack();      int childNum=currentNode.children.indexOf(child);      currPath.add(childNum);    }    while (variations().size() > 0)     goForward(0,false);    pgnResultString=getPGNResultString();    while (currentNode != rootNode)     goBack();    for (int i=currPath.size() - 1; i >= 0; i--)     goForward(currPath.get(i),false);  }  addTagPair(out,"Event",event);  addTagPair(out,"Site",site);  addTagPair(out,"Date",date);  addTagPair(out,"Round",round);  addTagPair(out,"White",white);  addTagPair(out,"Black",black);  addTagPair(out,"Result",pgnResultString);  String fen=TextIO.toFEN(startPos);  if (!fen.equals(TextIO.startPosFEN)) {    addTagPair(out,"FEN",fen);    addTagPair(out,"SetUp","1");  }  if (!timeControl.equals("?"))   addTagPair(out,"TimeControl",timeControl);  if (!whiteTimeControl.equals("?"))   addTagPair(out,"WhiteTimeControl",whiteTimeControl);  if (!blackTimeControl.equals("?"))   addTagPair(out,"BlackTimeControl",blackTimeControl);  for (int i=0; i < tagPairs.size(); i++)   addTagPair(out,tagPairs.get(i).tagName,tagPairs.get(i).tagValue);  MoveNumber mn=new MoveNumber(startPos.fullMoveCounter,startPos.whiteMove);  Node.addPgnData(out,rootNode,mn.prev(),options);  out.processToken(null,PgnToken.SYMBOL,pgnResultString);  out.processToken(null,PgnToken.EOF,null);}  }
class C{  private boolean checkForUnsignedCompare(SimplifierTool tool){  assert trueSuccessor().hasNoUsages() && falseSuccessor().hasNoUsages();  if (condition() instanceof IntegerLessThanNode) {    IntegerLessThanNode lessThan=(IntegerLessThanNode)condition();    Constant y=lessThan.getY().stamp().asConstant();    if (y instanceof PrimitiveConstant && ((PrimitiveConstant)y).asLong() == 0 && falseSuccessor().next() instanceof IfNode) {      IfNode ifNode2=(IfNode)falseSuccessor().next();      if (ifNode2.condition() instanceof IntegerLessThanNode) {        IntegerLessThanNode lessThan2=(IntegerLessThanNode)ifNode2.condition();        AbstractBeginNode falseSucc=ifNode2.falseSuccessor();        AbstractBeginNode trueSucc=ifNode2.trueSuccessor();        IntegerBelowNode below=null;        if (lessThan2.getX() == lessThan.getX() && lessThan2.getY().stamp() instanceof IntegerStamp && ((IntegerStamp)lessThan2.getY().stamp()).isPositive() && sameDestination(trueSuccessor(),ifNode2.falseSuccessor)) {          below=graph().unique(new IntegerBelowNode(lessThan2.getX(),lessThan2.getY()));          AbstractBeginNode tmp=falseSucc;          falseSucc=trueSucc;          trueSucc=tmp;        } else         if (lessThan2.getY() == lessThan.getX() && sameDestination(trueSuccessor(),ifNode2.trueSuccessor)) {          JavaConstant positive=lessThan2.getX().asJavaConstant();          if (positive != null && positive.asLong() > 0 && positive.asLong() < positive.getJavaKind().getMaxValue()) {            ConstantNode newLimit=ConstantNode.forIntegerStamp(lessThan2.getX().stamp(),positive.asLong() + 1,graph());            below=graph().unique(new IntegerBelowNode(lessThan.getX(),newLimit));          }        }        if (below != null) {          ifNode2.setTrueSuccessor(null);          ifNode2.setFalseSuccessor(null);          IfNode newIfNode=graph().add(new IfNode(below,falseSucc,trueSucc,1 - trueSuccessorProbability));          tool.deleteBranch(trueSuccessor);          graph().removeSplit(this,falseSuccessor);          ifNode2.predecessor().replaceFirstSuccessor(ifNode2,newIfNode);          ifNode2.safeDelete();          return true;        }      }    }  }  return false;}  }
class C{  private void parse(){  try {    FileInputStream xmlStream=new FileInputStream(mailTemplateFile);    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    factory.setIgnoringComments(true);    DocumentBuilder builder=factory.newDocumentBuilder();    doc=builder.parse(xmlStream);    xmlStream.close();    rootElement=doc.getDocumentElement();  } catch (  javax.xml.parsers.ParserConfigurationException e) {    e.printStackTrace();  }catch (  org.xml.sax.SAXException e) {    e.printStackTrace();  }catch (  Exception e) {    System.out.println("File error!");    e.printStackTrace();  }}  }
class C{  public synchronized void shutdown(){  if (!shutdown) {    if (ownExecutor) {      getExecutorService().shutdownNow();    }    if (task != null) {      task.cancel(false);    }    shutdown=true;  }}  }
class C{  public boolean isOracle(){  return false;}  }
class C{  private PropertyMapping populatePropertyMapping(ExtensionProperty ep){  PropertyMapping pm=mapping.getField(ep.getQualname());  if (pm == null) {    pm=new PropertyMapping();  }  pm.setTerm(ep);  return pm;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public static int compare(long x,long y){  if (x > y) {    return 1;  }  if (x < y) {    return -1;  }  return 0;}  }
class C{  public boolean start(String file){  boolean ok=true;  try {    out=new BufferedOutputStream(new FileOutputStream(file));    ok=start(out);    closeStream=true;  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  public GameLog(String filename){  try {    File logDir=new File(LOG_DIR);    if (!logDir.exists()) {      logDir.mkdir();    }    if (PreferenceManager.getClientPreferences().stampFilenames()) {      filename=StringUtil.addDateTimeStamp(filename);    }    logfile=new File(LOG_DIR + File.separator + filename);    writer=new BufferedWriter(new FileWriter(logfile));    append("Log file opened " + new Date().toString());  } catch (  IOException ex) {    writer=null;    System.err.println("GameLog:" + ex.getMessage());  }}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  protected FinalizablePhantomReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  protected void handleStatementInternal(Statement st,boolean endRDFCalled,boolean canShortenSubjectBNode,boolean canShortenObjectBNode){  if (prettyPrintModel != null && !endRDFCalled) {    prettyPrintModel.add(st);    return;  }  Resource subj=st.getSubject();  IRI pred=st.getPredicate();  Value obj=st.getObject();  try {    if (subj.equals(lastWrittenSubject)) {      if (pred.equals(lastWrittenPredicate)) {        writer.write(" , ");      } else {        writer.write(" ;");        writer.writeEOL();        writePredicate(pred);        writer.write(" ");        lastWrittenPredicate=pred;      }    } else {      closePreviousStatement();      writer.writeEOL();      writeResource(subj,canShortenSubjectBNode);      writer.write(" ");      lastWrittenSubject=subj;      writePredicate(pred);      writer.write(" ");      lastWrittenPredicate=pred;      statementClosed=false;      writer.increaseIndentation();    }    writeValue(obj,canShortenObjectBNode);  } catch (  IOException e) {    throw new RDFHandlerException(e);  }}  }
class C{  public Step(String name,Rule rules[],int min,String suffixes[]){  this.name=name;  this.rules=rules;  if (min == 0) {    min=Integer.MAX_VALUE;    for (    Rule r : rules)     min=Math.min(min,r.min + r.suffix.length);  }  this.min=min;  if (suffixes == null || suffixes.length == 0) {    this.suffixes=null;  } else {    this.suffixes=new char[suffixes.length][];    for (int i=0; i < suffixes.length; i++)     this.suffixes[i]=suffixes[i].toCharArray();  }}  }
class C{  public void sendSerialMessage(byte[] value){  Buffer buffer=new Buffer();  buffer.write(value);  sendMessage(BeanMessageID.SERIAL_DATA,buffer);}  }
class C{  public ComplexTypeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public int calculateBattleValue(boolean ignoreC3,boolean ignorePilot){  if (useManualBV) {    return manualBV;  }  if (isCarcass() && !ignorePilot) {    return 0;  }  bvText=new StringBuffer("<HTML><BODY><CENTER><b>Battle Value Calculations For ");  bvText.append(getChassis());  bvText.append(" ");  bvText.append(getModel());  bvText.append("</b></CENTER>");  bvText.append(nl);  bvText.append("<b>Defensive Battle Rating Calculation:</b>");  bvText.append(nl);  double dbv=0;  double obv=0;  boolean blueShield=false;  if (hasWorkingMisc(MiscType.F_BLUE_SHIELD)) {    blueShield=true;  }  bvText.append(startTable);  double armorMultiplier=1.0;  for (int loc=1; loc < locations(); loc++) {    int modularArmor=0;    for (    Mounted mounted : getEquipment()) {      if ((mounted.getType() instanceof MiscType) && mounted.getType().hasFlag(MiscType.F_MODULAR_ARMOR) && (mounted.getLocation() == loc)) {        modularArmor+=mounted.getBaseDamageCapacity() - mounted.getDamageTaken();      }    }switch (getArmorType(loc)) {case EquipmentType.T_ARMOR_COMMERCIAL:      armorMultiplier=0.5;    break;case EquipmentType.T_ARMOR_HARDENED:  armorMultiplier=2.0;break;case EquipmentType.T_ARMOR_REACTIVE:case EquipmentType.T_ARMOR_REFLECTIVE:case EquipmentType.T_ARMOR_BALLISTIC_REINFORCED:armorMultiplier=1.5;break;case EquipmentType.T_ARMOR_LAMELLOR_FERRO_CARBIDE:case EquipmentType.T_ARMOR_FERRO_LAMELLOR:case EquipmentType.T_ARMOR_ANTI_PENETRATIVE_ABLATION:armorMultiplier=1.2;break;default :armorMultiplier=1.0;break;}if (hasWorkingMisc(MiscType.F_BLUE_SHIELD)) {armorMultiplier+=0.2;}bvText.append(startRow);bvText.append(startColumn);int armor=getArmor(loc) + modularArmor;bvText.append("Total Armor " + this.getLocationAbbr(loc) + " ("+ armor+ ") x ");bvText.append(armorMultiplier);bvText.append(" x ");bvText.append(getBARRating(loc));bvText.append("/10");bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);double armorBV=(getArmor(loc) + modularArmor) * armorMultiplier * (getBARRating(loc) / 10);bvText.append(armorBV);dbv+=armorBV;bvText.append(endColumn);}bvText.append(startRow);bvText.append(startColumn);bvText.append("Total modified armor BV x 2.5 ");bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("= ");dbv*=2.5;bvText.append(dbv);bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append("Total I.S. Points x 1.5 x Blue Shield Multipler");bvText.append(endColumn);bvText.append(startColumn);bvText.append(getTotalInternal());bvText.append(" x 1.5 x ");bvText.append((blueShield ? 1.2 : 1));bvText.append(endColumn);bvText.append(startColumn);bvText.append("= ");bvText.append(getTotalInternal() * 1.5 * (blueShield ? 1.2 : 1));bvText.append(endColumn);bvText.append(endRow);dbv+=getTotalInternal() * 1.5 * (blueShield ? 1.2 : 1);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("--------------");bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append("Defensive Equipment");bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);double amsAmmoBV=0;for (Mounted mounted : getAmmo()) {AmmoType atype=(AmmoType)mounted.getType();if ((atype.getAmmoType() == AmmoType.T_AMS) || (atype.getAmmoType() == AmmoType.T_APDS)) {amsAmmoBV+=atype.getBV(this);}}double amsBV=0;double dEquipmentBV=0;for (Mounted mounted : getEquipment()) {EquipmentType etype=mounted.getType();if (mounted.isDestroyed()) {continue;}if (((etype instanceof WeaponType) && (etype.hasFlag(WeaponType.F_AMS) || etype.hasFlag(WeaponType.F_B_POD) || etype.hasFlag(WeaponType.F_M_POD)))) {bvText.append(startRow);bvText.append(startColumn);bvText.append(etype.getName());bvText.append(endColumn);bvText.append(startColumn);bvText.append(etype.getBV(this));bvText.append(endColumn);bvText.append(endRow);dEquipmentBV+=etype.getBV(this);WeaponType wtype=(WeaponType)etype;if ((wtype.hasFlag(WeaponType.F_AMS) && (wtype.getAmmoType() == AmmoType.T_AMS)) || (wtype.getAmmoType() == AmmoType.T_APDS)) {amsBV+=etype.getBV(this);}} else if (((etype instanceof MiscType) && (etype.hasFlag(MiscType.F_ECM) || etype.hasFlag(MiscType.F_AP_POD) || etype.hasFlag(MiscType.F_HEAVY_BRIDGE_LAYER)|| etype.hasFlag(MiscType.F_MEDIUM_BRIDGE_LAYER)|| etype.hasFlag(MiscType.F_HEAVY_BRIDGE_LAYER)|| etype.hasFlag(MiscType.F_BULLDOZER)|| etype.hasFlag(MiscType.F_CHAFF_POD)|| etype.hasFlag(MiscType.F_BAP))) || etype.hasFlag(MiscType.F_MINESWEEPER)) {MiscType mtype=(MiscType)etype;double bv=mtype.getBV(this,mounted.getLocation());bvText.append(startColumn);bvText.append(etype.getName());bvText.append(endColumn);bvText.append(startColumn);bvText.append(bv);dEquipmentBV+=bv;bvText.append(endColumn);bvText.append(endRow);}}if (amsAmmoBV > 0) {bvText.append(startRow);bvText.append(startColumn);bvText.append("AMS Ammo (to a maximum of AMS BV)");bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("+");bvText.append(Math.min(amsBV,amsAmmoBV));bvText.append(endColumn);bvText.append(endRow);dEquipmentBV+=Math.min(amsBV,amsAmmoBV);}bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("= ");bvText.append(dEquipmentBV);bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);dbv+=dEquipmentBV;bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("--------------");bvText.append(endColumn);bvText.append(endRow);double typeModifier;switch (getMovementMode()) {case TRACKED:typeModifier=0.9;break;case WHEELED:typeModifier=0.8;break;case HOVER:case VTOL:case WIGE:typeModifier=0.7;break;case NAVAL:case RAIL:typeModifier=0.6;break;default :typeModifier=0.6;}if (!(this instanceof SupportTank) && (hasWorkingMisc(MiscType.F_LIMITED_AMPHIBIOUS) || hasWorkingMisc(MiscType.F_DUNE_BUGGY) || hasWorkingMisc(MiscType.F_FLOTATION_HULL)|| hasWorkingMisc(MiscType.F_VACUUM_PROTECTION)|| hasWorkingMisc(MiscType.F_ENVIRONMENTAL_SEALING)|| hasWorkingMisc(MiscType.F_ARMORED_MOTIVE_SYSTEM))) {typeModifier+=.1;} else if (hasWorkingMisc(MiscType.F_FULLY_AMPHIBIOUS) && !(this instanceof SupportTank)) {typeModifier+=.2;}bvText.append(startColumn);bvText.append("x Body Type Modier");bvText.append(endColumn);bvText.append(startColumn);bvText.append("x ");bvText.append(typeModifier);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);dbv*=typeModifier;bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append("x Target Movement modifier");bvText.append(endColumn);double tmmRan=Compute.getTargetMovementModifier(getRunMP(false,true,true),this instanceof VTOL,this instanceof VTOL,game).getValue();double tmmJumped=(getJumpMP() > 0) ? Compute.getTargetMovementModifier(getJumpMP(),true,false,game).getValue() : 0;if (hasStealth()) {tmmRan+=2;tmmJumped+=2;}if (getMovementMode() == EntityMovementMode.WIGE) {tmmRan+=1;tmmJumped+=1;}double tmmFactor=1 + (Math.max(tmmRan,tmmJumped) / 10);dbv*=tmmFactor;bvText.append(startColumn);bvText.append("x ");bvText.append(tmmFactor);bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("--------------");bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(dbv);bvText.append(endColumn);bvText.append(endRow);double weaponBV=0;double weaponsBVFront=0;double weaponsBVRear=0;boolean hasTargComp=hasTargComp();double targetingSystemBVMod=1.0;if ((this instanceof SupportTank) || (this instanceof SupportVTOL)) {if (hasWorkingMisc(MiscType.F_ADVANCED_FIRECONTROL)) {targetingSystemBVMod=1.0;} else if (hasWorkingMisc(MiscType.F_BASIC_FIRECONTROL)) {targetingSystemBVMod=.9;} else {targetingSystemBVMod=.8;}}bvText.append(startRow);bvText.append(startColumn);bvText.append("Weapons");bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);Map<String,Double> weaponsForExcessiveAmmo=new HashMap<String,Double>();for (Mounted mounted : getWeaponList()) {WeaponType wtype=(WeaponType)mounted.getType();double dBV=wtype.getBV(this);if (mounted.isDestroyed()) {continue;}if (wtype.hasFlag(WeaponType.F_AMS)) {continue;}if (wtype.hasFlag(WeaponType.F_B_POD)) {continue;}if (wtype.hasFlag(WeaponType.F_M_POD)) {continue;}String weaponName=wtype.getName();if (mounted.getLinkedBy() != null) {if (wtype.hasFlag(WeaponType.F_PPC)) {dBV+=((MiscType)mounted.getLinkedBy().getType()).getBV(this,mounted);weaponName=weaponName.concat(" with Capacitor");}}if (wtype.hasFlag(WeaponType.F_MGA)) {double mgaBV=0;for (Mounted possibleMG : getWeaponList()) {if (possibleMG.getType().hasFlag(WeaponType.F_MG) && (possibleMG.getLocation() == mounted.getLocation())) {mgaBV+=possibleMG.getType().getBV(this);}}dBV=mgaBV * 0.67;}bvText.append(weaponName);bvText.append(" ");bvText.append(dBV);if (mounted.getLinkedBy() != null) {Mounted mLinker=mounted.getLinkedBy();if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_ARTEMIS)) {dBV*=1.2;bvText.append(" x 1.2 Artemis");}if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_ARTEMIS_V)) {dBV*=1.3;bvText.append(" x 1.3 Artemis V");}if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_APOLLO)) {dBV*=1.15;bvText.append(" x 1.15 Apollo");}if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_RISC_LASER_PULSE_MODULE)) {dBV*=1.25;bvText.append(" x 1.25 RISC Laser Pulse Module");}}if (hasWorkingMisc(MiscType.F_DRONE_OPERATING_SYSTEM)) {dBV*=0.8;bvText.append(" x 0.8 Drone OS");}if (wtype.hasFlag(WeaponType.F_DIRECT_FIRE) && hasTargComp) {dBV*=1.25;bvText.append(" x 1.25 Direct Fire and TC");} else if ((this instanceof SupportTank) && !wtype.hasFlag(WeaponType.F_INFANTRY)) {dBV*=targetingSystemBVMod;bvText.append(" x ");bvText.append(targetingSystemBVMod);bvText.append(" Targeting System");}bvText.append(endColumn);bvText.append(startColumn);if (mounted.getLocation() == (this instanceof SuperHeavyTank ? SuperHeavyTank.LOC_REAR : this instanceof LargeSupportTank ? LargeSupportTank.LOC_REAR : LOC_REAR)) {weaponsBVRear+=dBV;bvText.append(" Rear");} else if (mounted.getLocation() == LOC_FRONT) {weaponsBVFront+=dBV;bvText.append(" Front");} else {weaponBV+=dBV;bvText.append(" Side/Turret");}if (!((wtype.hasFlag(WeaponType.F_ENERGY) && !((wtype.getAmmoType() == AmmoType.T_PLASMA) || (wtype.getAmmoType() == AmmoType.T_VEHICLE_FLAMER) || (wtype.getAmmoType() == AmmoType.T_HEAVY_FLAMER)|| (wtype.getAmmoType() == AmmoType.T_CHEMICAL_LASER))) || wtype.hasFlag(WeaponType.F_ONESHOT) || wtype.hasFlag(WeaponType.F_INFANTRY)|| (wtype.getAmmoType() == AmmoType.T_NA))) {String key=wtype.getAmmoType() + ":" + wtype.getRackSize();if (!weaponsForExcessiveAmmo.containsKey(key)) {weaponsForExcessiveAmmo.put(key,wtype.getBV(this));} else {weaponsForExcessiveAmmo.put(key,wtype.getBV(this) + weaponsForExcessiveAmmo.get(key));}}bvText.append(endColumn);bvText.append(startColumn);bvText.append(dBV);bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);}bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);if (weaponsBVFront > weaponsBVRear) {weaponBV+=weaponsBVFront;weaponBV+=(weaponsBVRear * 0.5);} else {weaponBV+=weaponsBVRear;weaponBV+=(weaponsBVFront * 0.5);}bvText.append(startColumn);bvText.append("= ");bvText.append(weaponBV);bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("--------------");bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append("Ammo BV");bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);double ammoBV=0;double tagBV=0;Map<String,Double> ammo=new HashMap<String,Double>();ArrayList<String> keys=new ArrayList<String>();for (Mounted mounted : getAmmo()) {AmmoType atype=(AmmoType)mounted.getType();if (mounted.getUsableShotsLeft() == 0) {continue;}if ((atype.getAmmoType() == AmmoType.T_AMS) || (atype.getAmmoType() == AmmoType.T_APDS)) {continue;}if (mounted.getLocation() == Entity.LOC_NONE) {continue;}bvText.append(atype.getName());bvText.append(endColumn);bvText.append(startColumn);if ((atype.getMunitionType() == AmmoType.M_SEMIGUIDED) || (atype.getMunitionType() == AmmoType.M_HOMING)) {IPlayer tmpP=getOwner();if (tmpP != null) {if (tmpP.hasTAG()) {tagBV+=atype.getBV(this);} else if ((tmpP.getTeam() != IPlayer.TEAM_NONE) && (game != null)) {for (Enumeration<Team> e=game.getTeams(); e.hasMoreElements(); ) {Team m=e.nextElement();if (m.getId() == tmpP.getTeam()) {if (m.hasTAG(game)) {tagBV+=atype.getBV(this);bvText.append("Tag: ");bvText.append(atype.getBV(this));}break;}}}}}String key=atype.getAmmoType() + ":" + atype.getRackSize();if (!keys.contains(key)) {keys.add(key);}if (!ammo.containsKey(key)) {ammo.put(key,atype.getBV(this));} else {ammo.put(key,atype.getBV(this) + ammo.get(key));}bvText.append("BV: ");bvText.append(atype.getBV(this));bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);}bvText.append(endColumn);bvText.append(endRow);for (String key : keys) {if (!ammo.containsKey(key) || !weaponsForExcessiveAmmo.containsKey(key)) {continue;}if (ammo.get(key) > weaponsForExcessiveAmmo.get(key)) {ammoBV+=weaponsForExcessiveAmmo.get(key);} else {ammoBV+=ammo.get(key);}}ammoBV*=targetingSystemBVMod;bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("= ");bvText.append(ammoBV);bvText.append(endColumn);bvText.append(endRow);weaponBV+=ammoBV;bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("--------------");bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append("Offensive Equipment");bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);double oEquipmentBV=0;for (Mounted mounted : getMisc()) {MiscType mtype=(MiscType)mounted.getType();if (mounted.isDestroyed()) {continue;}if ((mtype.hasFlag(MiscType.F_ECM) && !mtype.hasFlag(MiscType.F_WATCHDOG)) || mtype.hasFlag(MiscType.F_AP_POD) || mtype.hasFlag(MiscType.F_LIGHT_BRIDGE_LAYER)|| mtype.hasFlag(MiscType.F_MEDIUM_BRIDGE_LAYER)|| mtype.hasFlag(MiscType.F_HEAVY_BRIDGE_LAYER)|| mtype.hasFlag(MiscType.F_CHAFF_POD)|| mtype.hasFlag(MiscType.F_BAP)|| mtype.hasFlag(MiscType.F_TARGCOMP)|| mtype.hasFlag(MiscType.F_MINESWEEPER)) {continue;}double bv=mtype.getBV(this,mounted.getLocation());if (mtype.hasFlag(MiscType.F_WATCHDOG)) {bv=7;}oEquipmentBV+=bv;bvText.append(mtype.getName());bvText.append(endColumn);bvText.append(startColumn);bvText.append(bv);bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);}bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("= ");bvText.append(oEquipmentBV);bvText.append(endColumn);bvText.append(endRow);weaponBV+=oEquipmentBV;bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("--------------");bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append("+ weight / 2");bvText.append(endColumn);bvText.append(startColumn);bvText.append(getWeight());bvText.append(" / 2 ");bvText.append(endColumn);bvText.append(startColumn);bvText.append("= ");bvText.append(getWeight() / 2);bvText.append(endColumn);bvText.append(endRow);weaponBV+=getWeight() / 2;double runMP=getRunMP(false,true,true);if (getMovementMode() == EntityMovementMode.RAIL) {runMP=getWalkMP(false,true,true);}if (getOriginalRunMP() == 0) {runMP=1;}double speedFactor=Math.pow(1 + (((runMP + (Math.round(getJumpMP(false) / 2.0))) - 5) / 10),1.2);speedFactor=Math.round(speedFactor * 100) / 100.0;obv=weaponBV * speedFactor;bvText.append(startRow);bvText.append(startColumn);bvText.append("+ weapons bv * speed factor");bvText.append(endColumn);bvText.append(startColumn);bvText.append(weaponBV);bvText.append(" * ");bvText.append(speedFactor);bvText.append(endColumn);bvText.append(startColumn);bvText.append("= ");bvText.append(obv);bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("--------------");bvText.append(endColumn);bvText.append(endRow);double finalBV;if (useGeometricMeanBV()) {finalBV=2 * Math.sqrt(obv * dbv);if (finalBV == 0) {finalBV=dbv + obv;}} else {finalBV=dbv + obv;}double totalBV=finalBV;if (hasWorkingMisc(MiscType.F_DRONE_OPERATING_SYSTEM)) {finalBV*=0.95;finalBV=Math.round(finalBV);bvText.append(startRow);bvText.append(startColumn);bvText.append("Total BV * Drone Operating System Modifier");bvText.append(endColumn);bvText.append(startColumn);bvText.append(totalBV);bvText.append(" * ");bvText.append("0.95");bvText.append(endColumn);bvText.append(startColumn);bvText.append(" = ");bvText.append(finalBV);bvText.append(endColumn);bvText.append(endRow);bvText.append(startRow);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("-------------");bvText.append(endColumn);bvText.append(endRow);}bvText.append(startRow);bvText.append(startColumn);bvText.append("Final BV");bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append(finalBV);bvText.append(endColumn);bvText.append(endRow);double xbv=0.0;xbv+=tagBV;if (!ignoreC3) {xbv+=getExtraC3BV((int)Math.round(finalBV));}finalBV=Math.round(finalBV + xbv);double pilotFactor=1;if (!ignorePilot && (null != getCrew())) {pilotFactor=getCrew().getBVSkillMultiplier(game);}int retVal=(int)Math.round((finalBV) * pilotFactor);bvText.append(startRow);bvText.append(startColumn);bvText.append("Final BV");bvText.append(endColumn);bvText.append(startColumn);bvText.append(endColumn);bvText.append(startColumn);bvText.append("= ");bvText.append(retVal);bvText.append(endColumn);bvText.append(endRow);return retVal;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public NokiaPictureMessage(OtaBitmap otaBitmap,String msg){  this(otaBitmap,msg,false);}  }
class C{  public Boolean isPowerOffOnIsolation(){  return powerOffOnIsolation;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ATTRIBUTE___SIMPLE_ATTRIBUTE_1:    return ((InternalEList<?>)getSimpleAttribute_1()).basicRemove(otherEnd,msgs);case UmplePackage.ATTRIBUTE___AUTOUNIQUE_ATTRIBUTE_1:  return ((InternalEList<?>)getAutouniqueAttribute_1()).basicRemove(otherEnd,msgs);case UmplePackage.ATTRIBUTE___DERIVED_ATTRIBUTE_1:return ((InternalEList<?>)getDerivedAttribute_1()).basicRemove(otherEnd,msgs);case UmplePackage.ATTRIBUTE___COMPLEX_ATTRIBUTE_1:return ((InternalEList<?>)getComplexAttribute_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static <T extends Annotation>boolean hasAnnotation(Object o,Class<T> annCls){  return o != null && hasAnnotation(o.getClass(),annCls);}  }
class C{  @SuppressWarnings("restriction") public void registerChildrenCallback(String path){  try {    transport.getZKHandle().getChildren().usingWatcher(watcher).inBackground((BackgroundCallback)watcher).forPath(path);  } catch (  Exception e) {    LOGGER.error("Exception while registering childrencallback for " + path,e);  }}  }
class C{  public CertificatePinner certificatePinner(){  return certificatePinner;}  }
class C{  protected void put(String key,String value,Map<String,String> params){  params.put(key,value);}  }
class C{  public void appendByte(int b){  elems=ArrayUtils.ensureCapacity(elems,length);  elems[length++]=(byte)b;}  }
class C{  public static GroupMatcher<JobKey> jobGroupEndsWith(String compareTo){  return GroupMatcher.groupEndsWith(compareTo);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.808 -0400",hash_original_method="17D37254811C4EF4B8866B9452E16190",hash_generated_method="41344D21B7D684F953824CB8654BB9CA") private void onAgentAuthorize(String objectPath,String deviceUuid,int nativeData){  if (!mBluetoothService.isEnabled())   return;  String address=mBluetoothService.getAddressFromObjectPath(objectPath);  if (address == null) {    Log.e(TAG,"Unable to get device address in onAuthAgentAuthorize");    return;  }  boolean authorized=false;  ParcelUuid uuid=ParcelUuid.fromString(deviceUuid);  BluetoothDevice device=mAdapter.getRemoteDevice(address);  mAuthorizationAgentRequestData.put(address,new Integer(nativeData));  if (mA2dp != null && (BluetoothUuid.isAudioSource(uuid) || BluetoothUuid.isAvrcpTarget(uuid) || BluetoothUuid.isAdvAudioDist(uuid)) && !isOtherSinkInNonDisconnectedState(address)) {    authorized=mA2dp.getPriority(device) > BluetoothProfile.PRIORITY_OFF;    if (authorized && !BluetoothUuid.isAvrcpTarget(uuid)) {      Log.i(TAG,"First check pass for incoming A2DP / AVRCP connection from " + address);      mBluetoothService.notifyIncomingA2dpConnection(address,false);    } else {      Log.i(TAG,"" + authorized + "Incoming A2DP / AVRCP connection from "+ address);      mA2dp.allowIncomingConnect(device,authorized);      mBluetoothService.notifyIncomingA2dpConnection(address,true);    }  } else   if (BluetoothUuid.isInputDevice(uuid)) {    authorized=mBluetoothService.getInputDevicePriority(device) > BluetoothInputDevice.PRIORITY_OFF;    if (authorized) {      Log.i(TAG,"First check pass for incoming HID connection from " + address);      mBluetoothService.notifyIncomingHidConnection(address);    } else {      Log.i(TAG,"Rejecting incoming HID connection from " + address);      mBluetoothService.allowIncomingProfileConnect(device,authorized);    }  } else   if (BluetoothUuid.isBnep(uuid)) {    authorized=mBluetoothService.allowIncomingTethering();    mBluetoothService.allowIncomingProfileConnect(device,authorized);  } else {    Log.i(TAG,"Rejecting incoming " + deviceUuid + " connection from "+ address);    mBluetoothService.allowIncomingProfileConnect(device,authorized);  }  log("onAgentAuthorize(" + objectPath + ", "+ deviceUuid+ ") = "+ authorized);}  }
class C{  private View inflateHeaderView(@LayoutRes int res){  return mPresenter.inflateHeaderView(res);}  }
class C{  public static FloatMatrix valueOf(String text){  String[] rowValues=text.split(";");  String[] columnValues=rowValues[0].trim().split("\\s+");  FloatMatrix result=null;  for (int r=0; r < rowValues.length; r++) {    columnValues=rowValues[r].trim().split("\\s+");    if (r == 0) {      result=new FloatMatrix(rowValues.length,columnValues.length);    }    for (int c=0; c < columnValues.length; c++) {      result.put(r,c,Float.valueOf(columnValues[c]));    }  }  return result;}  }
class C{  private static int randInt(Random rand,int min,int max){  int randomNum=rand.nextInt((max - min) + 1) + min;  if (randomNum == max) {    if (!(rand.nextInt((max - min) + 1) + min == max)) {      randomNum=(min + max) / 2;    }  }  return randomNum;}  }
class C{  private static Long computeSignatureChecksum(Configuration configuration,final Source source){  assert (configuration != null);  final As3Compiler asc=new As3Compiler(configuration.getCompilerConfiguration());  asc.addCompilerExtension(SignatureExtension.getInstance());  CompilationUnit u=null;  ThreadLocalToolkit.setCompatibilityVersion(configuration.getCompatibilityVersion());  final Logger original=ThreadLocalToolkit.getLogger();  ThreadLocalToolkit.setLogger(new LocalLogger(null));{    final Source tmpSource=asc.preprocess(Source.newSource(source.getBackingFile(),source.getFileTime(),source.getPathRoot(),source.getRelativePath(),source.getShortName(),source.getOwner(),source.isInternal(),source.isRoot(),source.isDebuggable(),source.getFileIncludesSet(),source.getFileIncludeTimes(),source.getLogger()));    final String tmp=SignatureExtension.signatureDirectory;    SignatureExtension.signatureDirectory=null;{      u=asc.parse1(tmpSource,new SymbolTable(configuration));    }    SignatureExtension.signatureDirectory=tmp;  }  ThreadLocalToolkit.setLogger(original);  return ((u != null) ? u.getSignatureChecksum() : null);}  }
class C{  protected synchronized void minorRequirementChange(ChildState cs){  minorChanged=true;}  }
class C{  private String createFileName(String fName){  List<String> forbiddenCharsPatterns=new ArrayList<>();  forbiddenCharsPatterns.add("[:]+");  forbiddenCharsPatterns.add("[\\*\"/\\\\\\[\\]\\:\\;\\|\\=\\,]+");  forbiddenCharsPatterns.add("[^\\w\\d\\.]+");  String nameToTest=fName;  for (  String pattern : forbiddenCharsPatterns) {    nameToTest=nameToTest.replaceAll(pattern,"_");  }  return nameToTest;}  }
class C{  public static LocalSize ofArray(long arrayLength,Type componentType){  PointerIO io=PointerIO.getInstance(componentType);  if (io == null)   throw new RuntimeException("Unsupported type : " + Utils.toString(componentType));  return new LocalSize(arrayLength * io.getTargetSize());}  }
class C{  public void flatten(){  shadowRippleGenerator.flatten();}  }
class C{  public void updateSize(){  invalidate();  setSize(maxWidth(),maxHeight());  if (log.isDebugEnabled()) {    log.debug("updateSize: {}, text: w={} h={}",_popupUtil.toString(),getFontMetrics(_popupUtil.getFont()).stringWidth(_popupUtil.getText()),getFontMetrics(_popupUtil.getFont()).getHeight());  }  validate();  repaint();}  }
class C{  public static void serializePMMLModel(PMMLModel model,OutputStream stream) throws Exception {  ObjectOutputStream oo=new ObjectOutputStream(stream);  Instances header=model.getMiningSchema().getFieldsAsInstances();  oo.writeObject(header);  oo.writeObject(model);  oo.flush();  oo.close();}  }
class C{  public void update(ExampleSet exampleSet,OperatorProgress opProg) throws ProcessStoppedException {  Attribute weightAttribute=exampleSet.getAttributes().getWeight();  if (opProg != null) {    opProg.setTotal(exampleSet.size());  }  int progressCounter=0;  for (  Example example : exampleSet) {    double weight=weightAttribute == null ? 1.0d : example.getWeight();    totalWeight+=weight;    double labelValue=example.getLabel();    if (!Double.isNaN(labelValue)) {      int classIndex=(int)example.getLabel();      classWeights[classIndex]+=weight;      int attributeIndex=0;      for (      Attribute attribute : exampleSet.getAttributes()) {        double attributeValue=example.getValue(attribute);        if (nominal[attributeIndex]) {          if (!Double.isNaN(attributeValue) & attributeValue >= 0) {            if ((int)attributeValue < weightSums[attributeIndex][classIndex].length - 1) {              weightSums[attributeIndex][classIndex][(int)attributeValue]+=weight;            } else {              for (int i=0; i < numberOfClasses; i++) {                double[] newWeightSums=new double[(int)attributeValue + 2];                newWeightSums[newWeightSums.length - 1]=weightSums[attributeIndex][i][weightSums[attributeIndex][i].length - 1];                for (int j=0; j < weightSums[attributeIndex][i].length - 1; j++) {                  newWeightSums[j]=weightSums[attributeIndex][i][j];                }                weightSums[attributeIndex][i]=newWeightSums;                distributionProperties[attributeIndex][i]=new double[(int)attributeValue + 2];              }              weightSums[attributeIndex][classIndex][(int)attributeValue]+=weight;              attributeValues[attributeIndex]=new String[(int)attributeValue + 2];              for (int i=0; i < attributeValues[attributeIndex].length - 1; i++) {                attributeValues[attributeIndex][i]=attribute.getMapping().mapIndex(i);              }              attributeValues[attributeIndex][attributeValues[attributeIndex].length - 1]=UNKNOWN_VALUE_NAME;            }          } else {            weightSums[attributeIndex][classIndex][weightSums[attributeIndex][classIndex].length - 1]+=weight;          }        } else         if (attribute.isNumerical() || attribute.isDateTime()) {          if (!Double.isNaN(attributeValue)) {            weightSums[attributeIndex][classIndex][INDEX_VALUE_SUM]+=weight * attributeValue;            weightSums[attributeIndex][classIndex][INDEX_SQUARED_VALUE_SUM]+=weight * attributeValue * attributeValue;          } else {            weightSums[attributeIndex][classIndex][INDEX_MISSING_WEIGHTS]+=weight;          }        }        attributeIndex++;      }    }    if (opProg != null && ++progressCounter % 100 == 0) {      opProg.setCompleted(progressCounter);    }  }  modelRecentlyUpdated=true;}  }
class C{  public Shape createRadioButton(int x,int y,int diameter){  return createEllipseInternal(x,y,diameter,diameter);}  }
class C{  public void play(){  animation.play();}  }
class C{  public static void main(String[] arguments) throws KeyczarException {  if (arguments.length != 2) {    System.err.println("SecretsBundle (path) (string to sign)");    System.exit(1);  }  String secretsPath=arguments[0];  String data=arguments[1];  System.out.println("Signing string: " + data);  SecretsBundle secrets=new SecretsBundle(secretsPath);  String signature=secrets.signToken(data);  System.out.println("Signature: " + signature);}  }
class C{  @Override public synchronized void reset(){  m_accumulatedTime=0;  m_startTime=getMsClock();}  }
class C{  public Frame appendFrame(){  frameCount++;  Frame frame=new Frame(frameCount,this);  frames.put(new Integer(frameCount),frame);  return frame;}  }
class C{  public HaskellException(final String msg,final Expression exp){  super(msg);  this.exp=exp;}  }
class C{  public boolean needsOffset(){  if (isEnabled() && isDrawLabelsEnabled() && getLabelPosition() == YAxisLabelPosition.OUTSIDE_CHART)   return true; else   return false;}  }
class C{  public int allocHigh(int size,int addrAlignment){  for (MemoryChunk memoryChunk=high; memoryChunk != null; memoryChunk=memoryChunk.previous) {    if (memoryChunk.isAvailable(size,addrAlignment)) {      return allocHigh(memoryChunk,size,addrAlignment);    }  }  return 0;}  }
class C{  private void writeDateColumn(DateColumn dateCol,JsonWriter writer) throws IOException {  if (dateCol.getLow() != null) {    writer.name(RANGE).beginObject();    writer.name(LOW).value(DATE_FORMATTER.format(dateCol.getLow()));    writer.name(HIGH).value(DATE_FORMATTER.format(dateCol.getHigh()));    writer.endObject();  }}  }
class C{  public static TupleSlot of(String name,Type type){  checkNotNull(name,"name must not be null");  checkNotNull(type,"type must not be null");  return new TupleSlot(name,TypeToken.of(type));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      attribute=(Attr)attributes.removeNamedItemNS("http://www.Nist.gov","domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  protected static void denseDenseMatmult(MatrixObject output,MatrixObject left1,MatrixObject right1,boolean isLeftTransposed1,boolean isRightTransposed1) throws DMLRuntimeException {  Pointer leftPtr=((JCudaObject)left1.getGPUObject()).jcudaDenseMatrixPtr;  Pointer rightPtr=((JCudaObject)right1.getGPUObject()).jcudaDenseMatrixPtr;  int leftRows=(int)left1.getNumRows();  int leftCols=(int)left1.getNumColumns();  int rightRows=(int)right1.getNumRows();  int rightCols=(int)right1.getNumColumns();  Pointer C=((JCudaObject)output.getGPUObject()).jcudaDenseMatrixPtr;  denseDenseMatmult(C,leftRows,leftCols,rightRows,rightCols,isLeftTransposed1,isRightTransposed1,leftPtr,rightPtr);}  }
class C{  @Override public void error(int errno){  this.cc.tessError(errno);}  }
class C{  protected long countSolutions(final String query) throws QueryEvaluationException, RepositoryException, MalformedQueryException {  TupleQueryResult result=con.prepareTupleQuery(QueryLanguage.SPARQL,query).evaluate();  try {    long n=0;    while (result.hasNext()) {      final BindingSet bset=result.next();      n++;      if (logger.isInfoEnabled())       logger.info(bset.toString());    }    return n;  }  finally {    result.close();  }}  }
class C{  @Override public void onCardboardTrigger(){  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean("pref_UseFuse",true))   fuseStart=-1;  boolean somethingPressed=false;  for (  ButtonThing button : buttonList) {    if (button.onTrigger(mHeadViewUse))     somethingPressed=true;  }  if (screen.onTrigger(mHeadViewUse)) {    somethingPressed=true;  }  if (!somethingPressed) {    Matrix.invertM(mOffsetView,0,mView,0);    moveall();  }}  }
class C{  static String increaseLetter(String word,int pos){  char ch=word.charAt(pos);  ch++;  return word.substring(0,pos) + ch + word.substring(pos + 1);}  }
class C{  public void fireTreeExpanded(TreePath path){  Object[] listeners=listenerList.getListenerList();  TreeExpansionEvent e=null;  if (uiTreeExpansionListener != null) {    e=new TreeExpansionEvent(this,path);    uiTreeExpansionListener.treeExpanded(e);  }  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeExpansionListener.class && listeners[i + 1] != uiTreeExpansionListener) {      if (e == null)       e=new TreeExpansionEvent(this,path);      ((TreeExpansionListener)listeners[i + 1]).treeExpanded(e);    }  }}  }
class C{  public static int[] createIntArray(List<? extends Integer> coll){  int[] array=new int[coll.size()];  for (int i=0; i < coll.size(); i++) {    array[i]=coll.get(i);  }  return array;}  }
class C{  final void advance(){  if (next == null)   throw new NoSuchElementException();  lastReturned=next;  for (; ; ) {    next=next.next;    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  public SmbNamedPipe(String url,int pipeType) throws MalformedURLException, UnknownHostException {  super(url);  this.pipeType=pipeType;  type=TYPE_NAMED_PIPE;}  }
class C{  @RpcMethod public void createVm(String reservation,Map<String,String> environment,AsyncMethodCallback<Host.AsyncClient.create_vm_call> handler) throws RpcException {  ensureClient();  CreateVmRequest createVmRequest=new CreateVmRequest(reservation);  if (environment != null && !environment.isEmpty()) {    createVmRequest.setEnvironment(environment);  }  clientProxy.setTimeout(CREATE_VM_TIMEOUT_MS);  logger.info("create_vm target {}, reservation {}, request {}",getHostIp(),reservation,createVmRequest);  try {    clientProxy.create_vm(createVmRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  System.out.print(root.element + " ");  preorder(root.left);  preorder(root.right);}  }
class C{  public void showDialog(){  if (line == null) {    line=createLine(1.0);  } else {    line=line.clone();  }  if (horizontalLineRadiobutton.isSelected()) {    line.setValue(Double.parseDouble(yField.getText()));  } else {    line.setValue(Double.parseDouble(xField.getText()));  }  setVisible(true);}  }
class C{  public ChartMouseEventFX(JFreeChart chart,MouseEvent trigger,ChartEntity entity){  super(chart);  this.chart=chart;  this.trigger=trigger;  this.entity=entity;}  }
class C{  protected void cacheCtClass(String classname,CtClass c,boolean dynamic){  classes.put(classname,c);}  }
class C{  public static TestAssertion defaultAssertion(){  return TestAssertionImpl.defaultInstance();}  }
class C{  public void addEmailAddress(Email emailAddress){  getEmailAddresses().add(emailAddress);}  }
class C{  private int processDirty(char[] chars,int end,int i,char ch,int lastDirty,boolean fromTextNode) throws IOException {  int startClean=lastDirty + 1;  if (i > startClean) {    int lengthClean=i - startClean;    m_writer.write(chars,startClean,lengthClean);  }  if (CharInfo.S_LINEFEED == ch && fromTextNode) {    m_writer.write(m_lineSep,0,m_lineSepLen);  } else {    startClean=accumDefaultEscape(m_writer,(char)ch,i,chars,end,fromTextNode,false);    i=startClean - 1;  }  return i;}  }
class C{  private void LoadELFSections(ByteBuffer f,SceModule module,int baseAddress,Elf32 elf,int elfOffset,boolean analyzeOnly) throws IOException {  List<Elf32SectionHeader> sectionHeaderList=elf.getSectionHeaderList();  Memory mem=Memory.getInstance();  module.text_addr=baseAddress;  module.text_size=0;  module.data_size=0;  module.bss_size=0;  for (  Elf32SectionHeader shdr : sectionHeaderList) {    if (log.isTraceEnabled()) {      log.trace(String.format("ELF Section Header: %s",shdr.toString()));    }    int memOffset=shdr.getSh_addr(baseAddress);    int len=shdr.getSh_size();    int flags=shdr.getSh_flags();    if (flags != SHF_NONE && Memory.isAddressGood(memOffset)) {      boolean read=(flags & SHF_ALLOCATE) != 0;      boolean write=(flags & SHF_WRITE) != 0;      boolean execute=(flags & SHF_EXECUTE) != 0;      MemorySection memorySection=new MemorySection(memOffset,len,read,write,execute);      MemorySections.getInstance().addMemorySection(memorySection);    }    if ((flags & SHF_ALLOCATE) != 0) {switch (shdr.getSh_type()) {case Elf32SectionHeader.SHT_PROGBITS:{          if (len == 0) {            if (log.isDebugEnabled()) {              log.debug(String.format("%s: ignoring zero-length type 1 section %08X",shdr.getSh_namez(),memOffset));            }          } else           if (!Memory.isAddressGood(memOffset)) {            log.error(String.format("Section header (type 1) has invalid memory offset 0x%08X!",memOffset));          } else {            if (memOffset < module.loadAddressLow) {              log.warn(String.format("%s: section allocates more than program %08X - %08X",shdr.getSh_namez(),memOffset,(memOffset + len)));              module.loadAddressLow=memOffset;            }            if (memOffset + len > module.loadAddressHigh) {              log.warn(String.format("%s: section allocates more than program %08X - %08X",shdr.getSh_namez(),memOffset,(memOffset + len)));              module.loadAddressHigh=memOffset + len;            }            if ((flags & SHF_WRITE) != 0) {              module.data_size+=len;              if (log.isTraceEnabled()) {                log.trace(String.format("Section Header as data, len=0x%08X, data_size=0x%08X",len,module.data_size));              }            } else {              module.text_size+=len;              if (log.isTraceEnabled()) {                log.trace(String.format("Section Header as text, len=0x%08X, text_size=0x%08X",len,module.text_size));              }            }          }          break;        }case Elf32SectionHeader.SHT_NOBITS:{        if (len == 0) {          if (log.isDebugEnabled()) {            log.debug(String.format("%s: ignoring zero-length type 8 section %08X",shdr.getSh_namez(),memOffset));          }        } else         if (!Memory.isAddressGood(memOffset)) {          log.error(String.format("Section header (type 8) has invalid memory offset 0x%08X!",memOffset));        } else {          if (log.isDebugEnabled()) {            log.debug(String.format("%s: clearing section %08X - %08X (len %08X)",shdr.getSh_namez(),memOffset,(memOffset + len),len));          }          if (!analyzeOnly) {            mem.memset(memOffset,(byte)0x0,len);          }          if (memOffset < module.loadAddressLow) {            module.loadAddressLow=memOffset;            if (log.isDebugEnabled()) {              log.debug(String.format("%s: new loadAddressLow %08X (+%08X)",shdr.getSh_namez(),module.loadAddressLow,len));            }          }          if (memOffset + len > module.loadAddressHigh) {            module.loadAddressHigh=memOffset + len;            if (log.isDebugEnabled()) {              log.debug(String.format("%s: new loadAddressHigh %08X (+%08X)",shdr.getSh_namez(),module.loadAddressHigh,len));            }          }          module.bss_size+=len;        }        break;      }  }}}if (log.isTraceEnabled()) {log.trace(String.format("Storing module info: text addr 0x%08X, text_size 0x%08X, data_size 0x%08X, bss_size 0x%08X",module.text_addr,module.text_size,module.data_size,module.bss_size));}}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.RECORD_ENTITY___ANONYMOUS_RECORD_ENTITY_11:    getAnonymous_recordEntity_1_1().clear();  getAnonymous_recordEntity_1_1().addAll((Collection<? extends String>)newValue);return;case UmplePackage.RECORD_ENTITY___TRACE_RECORD_1:setTrace_record_1((String)newValue);return;case UmplePackage.RECORD_ENTITY___ANONYMOUS_RECORD_ENTITY_21:getAnonymous_recordEntity_2_1().clear();getAnonymous_recordEntity_2_1().addAll((Collection<? extends Anonymous_recordEntity_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void enqueueIfNeeded(){synchronized (lock) {    if (daemons == null)     throw new RuntimeException("Failed to create HadoopDaemon (its registry is already cleared): " + "[classLoader=" + getClass().getClassLoader() + ']');    if (runnable.getClass().getClassLoader() == getClass().getClassLoader() && isPeerCacheRunnable(runnable))     daemons.add(this);  }}  }
class C{  private void paint(int brushObject,int penObject,Shape shape){  if ((brushObject >= 0) || (penObject >= 0)) {    Color col;    if (brushObject >= 0)     col=getColorFromObject(brushObject); else     col=getColorFromObject(penObject);    if (!(firstEffectivePaint && (col.equals(Color.white)))) {      Rectangle rec=shape.getBounds();      resizeBounds((int)rec.getMinX(),(int)rec.getMinY());      resizeBounds((int)rec.getMaxX(),(int)rec.getMaxY());      firstEffectivePaint=false;    }  }}  }
class C{  @Override public String toString(){  try {    return format(2);  } catch (  Exception e) {    return null;  }}  }
class C{  @RequestMapping(value="/register",params={"key"},method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed @Transactional public ResponseEntity<?> registerAccount(@Valid @RequestBody UserDTO userDTO,@RequestParam("key") String key,HttpServletRequest request){  log.debug("REST request to register account");  return userEmailActivationRepository.findByActivationKey(key).map(null).orElseGet(null);}  }
class C{  public static void requestEmail(String session){  final Activity currentActivity=UnityPlayer.currentActivity;  final Intent intent=new Intent(currentActivity,RequestEmailActivity.class);  intent.putExtra(EXTRA_TWITTER_SESSION,session);  currentActivity.startActivity(intent);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static GroupMatcher<TriggerKey> triggerGroupContains(String compareTo){  return GroupMatcher.groupContains(compareTo);}  }
class C{  public void testSpatialiteMultiGeometry() throws ParseException {  checkWKBGeometry("01060000000200000069030000000100000004000000000000000000444000000000000044400000000000003440000000000080464000000000008046400000000000003E4000000000000044400000000000004440690300000001000000040000000000000000003E40000000000000344000000000000034400000000000002E40000000000000344000000000000039400000000000003E400000000000003440","MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((30 20, 20 15, 20 25, 30 20)))'");  checkWKBGeometry("0104000000020000006901000000000000000000F03F000000000000F03F690100000000000000000000400000000000000040","MULTIPOINT(1 1,2 2)'");  checkWKBGeometry("010500000002000000690200000003000000000000000000244000000000000024400000000000003440000000000000344000000000000024400000000000004440690200000004000000000000000000444000000000000044400000000000003E400000000000003E40000000000000444000000000000034400000000000003E400000000000002440","MULTILINESTRING ((10 10, 20 20, 10 40), (40 40, 30 30, 40 20, 30 10))");  checkWKBGeometry("010700000002000000690100000000000000000010400000000000001840690200000002000000000000000000104000000000000018400000000000001C400000000000002440","GEOMETRYCOLLECTION(POINT(4 6),LINESTRING(4 6,7 10))");}  }
class C{  public boolean isDeclaredStatic(){  return declaredStatic;}  }
class C{  public void addView(final INaviView view){  Preconditions.checkNotNull(view,"IE00151: View can not be null");  Preconditions.checkArgument(view.getType() != ViewType.Native,"IE00152: Only non-native views can be added to modules");  Preconditions.checkArgument(!m_customViews.contains(view),"IE00154: View can not be added to the module more than once");  Preconditions.checkArgument(view.inSameDatabase(m_provider),"IE00155: View and module are not in the same database");  m_customViews.add(view);  if (view.getConfiguration().getId() != -1) {    viewIdView.put(view.getConfiguration().getId(),view);  }  view.addListener(m_viewListener);  for (  final IModuleListener listener : m_listeners) {    try {      listener.addedView(m_module,view);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public synchronized boolean hasTimeToExecuteATestCase(){  return isThereStillTimeInThisPhase(Properties.TIMEOUT);}  }
class C{  public void cancelJobInBackground(long id,boolean isPersistent){  cancelJobInBackground(id,isPersistent,null);}  }
class C{  public void testSinglePolygonHolesRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberPoints(10);  pg.setNumberHoles(4);  Polygon pt=(Polygon)pg.create();  checkRoundTrip(pt);}  }
class C{  @Override protected void onSetInviteOnly(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_set_invite_only,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public void fatal(Throwable throwable,String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.FATAL,throwable,msg,arg0,arg1,arg2,null);}  }
class C{  public void testPlayFromStringReader() throws Exception {  String myCSV="symbol, price, volume" + NEW_LINE + "IBM, 10.2, 10000";  StringReader reader=new StringReader(myCSV);  trySource(new AdapterInputSource(reader));}  }
class C{  public Departments(){  _departmentsImpl=new DepartmentsImpl();}  }
class C{  @Override default CompletableFuture<OptionalDouble> minDouble(final ToDoubleFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public MockUpnpServiceConfiguration(boolean maintainsRegistry){  this(maintainsRegistry,false);}  }
class C{  public void addComment(int pos,String comment){  List<String> list=comments.get(pos);  if (list == null) {    list=new ArrayList<>();    comments.put(pos,list);  }  list.add(encodeString(comment));}  }
class C{  protected void shutdown(UserTransaction userTransaction){}  }
class C{  public void encodeEnd(FacesContext context,UIComponent component) throws IOException {  if (context == null || component == null) {    throw new NullPointerException("'context' and/or 'component' is null");  }  if (!component.isRendered()) {    if (logger.isLoggable(Level.FINER)) {      logger.log(Level.FINER,"End encoding component " + component.getId() + " since "+ "rendered attribute is set to false ");    }    return;  }  context.getApplication().getViewHandler().writeState(context);  ResponseWriter writer=context.getResponseWriter();  writer.endElement("g");  writer.writeText("\n",null);  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"End encoding component " + component.getId());  }  buildPost(context,component);}  }
class C{  protected String startSetToString(){  StringBuffer FString=new StringBuffer();  boolean didPrint;  if (m_starting == null) {    return getStartSet();  }  for (int i=0; i < m_starting.length; i++) {    didPrint=false;    if ((m_hasClass == false) || (m_hasClass == true && i != m_classIndex)) {      FString.append((m_starting[i] + 1));      didPrint=true;    }    if (i == (m_starting.length - 1)) {      FString.append("");    } else {      if (didPrint) {        FString.append(",");      }    }  }  return FString.toString();}  }
class C{  private void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @Override protected void loadChars(jmri.jmrix.AbstractMRReply msg,java.io.DataInputStream istream) throws java.io.IOException {  int i;  byte lastbyte=(byte)0xFF;  if (log.isDebugEnabled()) {    log.debug("loading characters from port");  }  for (i=0; i < msg.maxSize(); i++) {    byte char1=readByteProtected(istream);    while ((i == 0) && ((char1 & 0xF0) == 0xF0)) {      if ((char1 & 0xFF) != 0xF0 && (char1 & 0xFF) != 0xF2) {        lastbyte=char1;        char1=readByteProtected(istream);      }    }    if (lastbyte == (byte)0xFD) {      msg.setUnsolicited();    }    msg.setElement(i,char1 & 0xFF);    if (endOfMessage(msg)) {      break;    }  }}  }
class C{  public static Date min(final Date... t){  QL.require(t != null,"argument cannot be null");  if (t.length == 0)   return new Date(); else {    Date min=t[0];    for (int i=1; i < t.length; i++) {      final Date curr=t[i];      if (curr.lt(min)) {        min=curr;      }    }    return min;  }}  }
class C{  public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_Charge_ID=(Integer)value;  if (isCalloutActive() || C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return "";  mTab.setValue("C_Invoice_ID",null);  mTab.setValue("C_Order_ID",null);  mTab.setValue("IsPrepayment",Boolean.FALSE);  mTab.setValue("DiscountAmt",Env.ZERO);  mTab.setValue("WriteOffAmt",Env.ZERO);  mTab.setValue("IsOverUnderPayment",Boolean.FALSE);  mTab.setValue("OverUnderAmt",Env.ZERO);  return "";}  }
class C{  public static ContactResource persistDeletedContact(String contactId,DateTime deletionTime){  return persistResource(newContactResource(contactId).asBuilder().setDeletionTime(deletionTime).build());}  }
class C{  public static String toXml(final PluginsCollectionConfig toConvert,Boolean prettyXml) throws JAXBException, IOException {  String retVal="";  try (StringWriter writer=new StringWriter()){    toXml(toConvert,writer,prettyXml);    retVal=writer.toString();    return retVal;  } }  }
class C{  @Override public byte toByteArray()[]{  return count == buf.length ? buf : Utils.copyOf(buf,count);}  }
class C{  public DatePicker2(Composite parent,int style){  this(parent,style,Calendar.getInstance());}  }
class C{  public Point centroid(){  if (count() < 2)   return center();  double xSum=0.0;  double ySum=0.0;  double area=0.0;  Point[] points=this.getPoints();  for (int i=0; i < points.length - 1; i++) {    double signedArea=(points[i].x * points[i + 1].y) - (points[i + 1].x * points[i].y);    xSum+=(points[i].x + points[i + 1].x) * signedArea;    ySum+=(points[i].y + points[i + 1].y) * signedArea;    area+=signedArea;  }  if (area == 0)   return center();  double coefficient=3 * area;  return new Point(xSum / coefficient,ySum / coefficient);}  }
class C{  protected void validateSystemVcenter(VcenterParam param,Vcenter vcenter,Boolean validateConnection){  validateVcenterCommon(param,vcenter,validateConnection);  updateSystemVcenterCascadeTenancy(param,vcenter);}  }
class C{  ICC_ProfileRGB(Profile p){  super(p);}  }
class C{  public void createWebAppBookmark(String url,String title){  final Intent bookmarkIntent=new Intent();  final Intent actionIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));  long urlHash=url.hashCode();  long uniqueId=(urlHash << MAX_URL_HASH) | actionIntent.hashCode();  actionIntent.putExtra(Browser.EXTRA_APPLICATION_ID,Long.toString(uniqueId));  bookmarkIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,actionIntent);  bookmarkIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,title);  bookmarkIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(context,R.drawable.ic_bookmark));  bookmarkIntent.setAction(resources.getString(R.string.application_package_launcher_action));  context.sendBroadcast(bookmarkIntent);}  }
class C{  private static boolean useField(){  return 0 != TestUtil.nextInt(random(),0,9);}  }
class C{  public Status abortDriver(){  this.driverLock.lock();  try {    if (isRunning()) {      LOGGER.info("Aborting driver...");      this.driverStatus=this.driver.abort();      LOGGER.info("Aborted driver with status: {}",this.driverStatus);    }  }  finally {    this.driverLock.unlock();  }  return driverStatus;}  }
class C{  public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){  final CompletableFuture<T> future=new CompletableFuture<T>();  future.completeExceptionally(throwable);  return future;}  }
class C{  protected boolean processQuery(Message msg,Query query,String queryString,Set regionNames,long start,ServerCQ cqQuery,QueryOperationContext queryContext,ServerConnection servConn,boolean sendResults) throws IOException, InterruptedException {  return processQueryUsingParams(msg,query,queryString,regionNames,start,cqQuery,queryContext,servConn,sendResults,null);}  }
class C{  public static final double[][] copy(final double[][] m1){  final int columndimension=m1[0].length;  final double[][] X=new double[m1.length][columndimension];  for (int i=0; i < m1.length; i++) {    System.arraycopy(m1[i],0,X[i],0,columndimension);  }  return X;}  }
class C{  public String enclosureCharactersTipText(){  return "The characters to use as enclosures for strings. E.g. \",'";}  }
class C{  private void loadConverter(){  AudioConversionLibrary library=null;  try {    @SuppressWarnings("rawtypes") Class temp=Class.forName("jmbe.JMBEAudioLibrary");    library=(AudioConversionLibrary)temp.newInstance();    if ((library.getMajorVersion() == 0 && library.getMinorVersion() >= 3 && library.getBuildVersion() >= 3) || library.getMajorVersion() >= 1) {      mAudioConverter=library.getAudioConverter(IMBE_CODEC,AudioFormats.PCM_SIGNED_8KHZ_16BITS_MONO);      if (mAudioConverter != null) {        mCanConvertAudio=true;        if (!mLibraryLoadStatusLogged) {          StringBuilder sb=new StringBuilder();          sb.append("JMBE audio conversion library [");          sb.append(library.getVersion());          sb.append("] successfully loaded - P25 audio will be available");          mLog.info(sb.toString());          mLibraryLoadStatusLogged=true;        }      } else {        if (!mLibraryLoadStatusLogged) {          mLog.info("JMBE audio conversion library NOT FOUND");          mLibraryLoadStatusLogged=true;        }      }    } else {      mLog.warn("JMBE library version 0.3.1 or higher is required - found: " + library.getVersion());    }  } catch (  ClassNotFoundException e1) {    if (!mLibraryLoadStatusLogged) {      mLog.error("Couldn't find/load JMBE audio conversion library");      mLibraryLoadStatusLogged=true;    }  }catch (  InstantiationException e1) {    if (!mLibraryLoadStatusLogged) {      mLog.error("Couldn't instantiate JMBE audio conversion library class");      mLibraryLoadStatusLogged=true;    }  }catch (  IllegalAccessException e1) {    if (!mLibraryLoadStatusLogged) {      mLog.error("Couldn't load JMBE audio conversion library due to " + "security restrictions");      mLibraryLoadStatusLogged=true;    }  }}  }
class C{  protected void workerComplete(ISwingWorker<OMGraphicList> worker){  boolean finishUpWithWorker=false;synchronized (LAYERWORKER_LOCK) {    finishUpWithWorker=!layerWorkerQueue;    setLayerWorker(layerWorkerQueue ? createLayerWorker() : null);    layerWorkerQueue=false;  }  if (finishUpWithWorker) {    getProjectionChangePolicy().workerComplete(worker.get());  }}  }
class C{  protected void validateArrayUniqueId(java.lang.String[] param){}  }
class C{  public static void save(String filename,double[] samples){  AudioFormat format=new AudioFormat(SAMPLE_RATE,16,1,true,false);  byte[] data=new byte[2 * samples.length];  for (int i=0; i < samples.length; i++) {    int temp=(short)(samples[i] * MAX_16_BIT);    data[2 * i + 0]=(byte)temp;    data[2 * i + 1]=(byte)(temp >> 8);  }  try {    ByteArrayInputStream bais=new ByteArrayInputStream(data);    AudioInputStream ais=new AudioInputStream(bais,format,samples.length);    if (filename.endsWith(".wav") || filename.endsWith(".WAV")) {      AudioSystem.write(ais,AudioFileFormat.Type.WAVE,new File(filename));    } else     if (filename.endsWith(".au") || filename.endsWith(".AU")) {      AudioSystem.write(ais,AudioFileFormat.Type.AU,new File(filename));    } else {      throw new RuntimeException("File format not supported: " + filename);    }  } catch (  IOException e) {    System.out.println(e);  }}  }
class C{  public SortedMapTest(){  dataSet.put(0,"zz");  dataSet.put(10,"za");  dataSet.put(1,"oo");  dataSet.put(11,"oa");  dataSet.put(2,"jj");  dataSet.put(12,"jk");  dataSet.put(3,"ee");  dataSet.put(13,"ez");  dataSet.put(4,"aa");  dataSet.put(14,"az");}  }
class C{  private InputStream writeBinary(Model statements) throws RDFHandlerException {  ByteArrayOutputStream output=new ByteArrayOutputStream(8096);  RDFWriter binaryWriter=new BinaryRDFWriter(output);  binaryWriter.startRDF();  for (  Statement nextStatement : statements) {    binaryWriter.handleStatement(nextStatement);  }  binaryWriter.endRDF();  return new ByteArrayInputStream(output.toByteArray());}  }
class C{  public ObjectMatrix2D like(int rows,int columns){  return new SparseObjectMatrix2D(rows,columns);}  }
class C{  public void store(Element root){  Element values=new Element(Xml.LOADS);  Element defaults=new Element(Xml.DEFAULTS);  defaults.setAttribute(Xml.EMPTY,getDefaultEmptyName());  defaults.setAttribute(Xml.LOAD,getDefaultLoadName());  values.addContent(defaults);  Enumeration<String> en=listCarLoads.keys();  while (en.hasMoreElements()) {    String carType=en.nextElement();    if (!CarTypes.instance().containsName(carType)) {      continue;    }    List<CarLoad> loads=getSortedList(carType);    Element xmlLoad=new Element(Xml.LOAD);    xmlLoad.setAttribute(Xml.TYPE,carType);    boolean mustStore=false;    for (    CarLoad load : loads) {      if ((load.getName().equals(getDefaultEmptyName()) || load.getName().equals(getDefaultLoadName())) && load.getPriority().equals(CarLoad.PRIORITY_LOW) && load.getPickupComment().equals(CarLoad.NONE)&& load.getDropComment().equals(CarLoad.NONE))       continue;      Element xmlCarLoad=new Element(Xml.CAR_LOAD);      xmlCarLoad.setAttribute(Xml.NAME,load.getName());      if (!load.getPriority().equals(CarLoad.PRIORITY_LOW)) {        xmlCarLoad.setAttribute(Xml.PRIORITY,load.getPriority());        mustStore=true;      }      if (!load.getPickupComment().equals(CarLoad.NONE)) {        xmlCarLoad.setAttribute(Xml.PICKUP_COMMENT,load.getPickupComment());        mustStore=true;      }      if (!load.getDropComment().equals(CarLoad.NONE)) {        xmlCarLoad.setAttribute(Xml.DROP_COMMENT,load.getDropComment());        mustStore=true;      }      xmlCarLoad.setAttribute(Xml.LOAD_TYPE,load.getLoadType());      xmlLoad.addContent(xmlCarLoad);    }    if (loads.size() > 2 || mustStore) {      values.addContent(xmlLoad);    }  }  root.addContent(values);}  }
class C{  public static TermQueryBuilder termQuery(String name,double value){  return new TermQueryBuilder(name,value);}  }
class C{  public void checkForDeadEntities(int i){  if (i > 20) {    panicDump();    throw new RuntimeException("Infinite death checking loop");  }  List<Actor> destroyList=new ArrayList<>();  for (  Player player : context.getPlayers()) {    for (    Minion minion : player.getMinions()) {      if (minion.isDestroyed()) {        destroyList.add(minion);      }    }    if (player.getHero().getWeapon() != null && player.getHero().getWeapon().isDestroyed()) {      destroyList.add(player.getHero().getWeapon());    }  }  if (destroyList.isEmpty()) {    return;  }  Collections.sort(destroyList,null);  destroy(destroyList.toArray(new Actor[0]));  checkForDeadEntities(i + 1);}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numNominal,int numNumeric,int numString,int numDate,int numRelational,int numClasses,int classType,int classIndex,boolean multiInstance) throws Exception {  TestInstances dataset=new TestInstances();  dataset.setSeed(seed);  dataset.setNumInstances(numInstances);  dataset.setNumNominal(numNominal);  dataset.setNumNumeric(numNumeric);  dataset.setNumString(numString);  dataset.setNumDate(numDate);  dataset.setNumRelational(numRelational);  dataset.setNumClasses(numClasses);  dataset.setClassType(classType);  dataset.setClassIndex(classIndex);  dataset.setNumClasses(numClasses);  dataset.setMultiInstance(multiInstance);  dataset.setWords(getWords());  dataset.setWordSeparators(getWordSeparators());  return process(dataset.generate());}  }
class C{  public boolean isGifImage(){  return (mGifLogoImageView.getVisibility() == View.VISIBLE) ? true : false;}  }
class C{  public void reject(){  for (  ComparisonCondition condition : conditions)   condition.setImplementation(ConditionExpression.Implementation.POTENTIAL_GROUP_JOIN);  child.setParentJoin(null);  group.rejectJoin(this);}  }
class C{  _JavaLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  @Override public OutputStream writeFileStream(String filename) throws IOException {  if (logger.isDebugEnabled())   logger.debug("Creating " + filename);  return hdfs.create(new Path(filename));}  }
class C{  public ClusteredScoreMap(boolean sortedKeys){  this.map=sortedKeys ? new TreeMap<E,Long>() : new LinkedHashMap<E,Long>();  this.pam=new TreeMap<Long,E>();  this.gcount=0;  this.encnt=0;}  }
class C{  public WriteResult tcpWritePacket(PseudoTCPBase tcp,byte[] buffer,int len){  if (logger.isLoggable(Level.FINEST)) {    logger.log(Level.FINEST,"write packet to network length " + len + " address "+ remoteAddr);  }  try {    DatagramPacket packet=new DatagramPacket(buffer,len,remoteAddr);    socket.send(packet);    return WriteResult.WR_SUCCESS;  } catch (  IOException ex) {    logger.log(Level.SEVERE,"TcpWritePacket exception: " + ex);    return WriteResult.WR_FAIL;  }}  }
class C{  public static Date parseRfc822(String date){  try {    return RFC822.parse(date);  } catch (  ParseException e) {    LogUtil.e(e.getMessage());    return new Date();  }}  }
class C{  public final double angle(){  return Math.atan2(y,x);}  }
class C{  @Override protected void process(DistributionManager dm){  SearchLoadAndWriteProcessor processor=null;  processor=(SearchLoadAndWriteProcessor)getProcessorKeeper().retrieve(this.processorId);  if (processor == null) {    if (logger.isDebugEnabled()) {      logger.debug("Response() SearchLoadAndWriteProcessor no longer exists");    }    return;  }  long lastModifiedSystemTime=0;  if (this.lastModified != 0) {    lastModifiedSystemTime=this.lastModified;  }  if (this.versionTag != null) {    this.versionTag.replaceNullIDs(getSender());  }  processor.incomingResponse(this.result,lastModifiedSystemTime,this.isPresent,this.isSerialized,this.requestorTimedOut,this.getSender(),dm,versionTag);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.152 -0500",hash_original_method="332D5DD16F528ACCDED76BFE26F4F243",hash_generated_method="116978D5ECE6F115C01EBBBAF952AACA") public CSeqHeader createCSeqHeader(int sequenceNumber,String method) throws ParseException, InvalidArgumentException {  return this.createCSeqHeader((long)sequenceNumber,method);}  }
class C{  public void onStopAnimation(View view){  if (!checkReady()) {    return;  }  mMap.stopAnimation();}  }
class C{  public int loadInstruction8(int addr){  return executableMemory[AbstractMemory.getPTE(addr)][AbstractMemory.getOffset(addr)] & 0xFF;}  }
class C{  protected void _skipString() throws IOException, JsonParseException {  _tokenIncomplete=false;  final int[] codes=sInputCodesUtf8;  final byte[] inputBuffer=_inputBuffer;  main_loop:   while (true) {    int c;    ascii_loop:     while (true) {      int ptr=_inputPtr;      int max=_inputEnd;      if (ptr >= max) {        loadMoreGuaranteed();        ptr=_inputPtr;        max=_inputEnd;      }      while (ptr < max) {        c=(int)inputBuffer[ptr++] & 0xFF;        if (codes[c] != 0) {          _inputPtr=ptr;          break ascii_loop;        }      }      _inputPtr=ptr;    }    if (c == INT_QUOTE) {      break main_loop;    }switch (codes[c]) {case 1:      _decodeEscaped();    break;case 2:  _skipUtf8_2(c);break;case 3:_skipUtf8_3(c);break;case 4:_skipUtf8_4(c);break;default :if (c < INT_SPACE) {_throwUnquotedSpace(c,"string value");} else {_reportInvalidChar(c);}}}}  }
class C{  private void updateAction(){  int numSelected=networkPanel.getSelectedModelElements().size();  if (numSelected > 0) {    setEnabled(true);  } else {    setEnabled(false);  }}  }
class C{  public KeyPairViewModel(final KeyPair keyPair,final byte networkVersion){  this.keyPair=keyPair;  this.networkVersion=networkVersion;}  }
class C{  public void write(OutputStream out) throws IOException {  int len=this.position - HEADER_LENGTH;  if (len >= 256 * 256 * 256) {    String message="Trying to send packet of size " + len + ", packets bigger than 16 MB are not supported yet!";    logger.error(message);    throw new IOException(message);  }  byte[] b=this.byteBuffer;  b[0]=(byte)(len & 0xff);  b[1]=(byte)(len >>> 8);  b[2]=(byte)(len >>> 16);  out.write(b,0,this.position);}  }
class C{  public static String toJsonString(Object object){  try {    return getGson().toJson(object);  } catch (  Throwable var2) {    var2.printStackTrace();    return "";  }}  }
class C{  public static long stringToStamp(String strdate){  int year=1;  int month=1;  int day=1;  int hour=0;  int minute=0;  int second=0;  int microsecond=0;  int len=(strdate == null) ? 0 : strdate.length();  try {    if (len == 0)     throw (new IllegalArgumentException(Message.EX_ILLEGAL_DATE_TIME2.get())); else     if (len < 4)     year=Integer.parseInt(strdate.substring(0,len)); else     year=Integer.parseInt(strdate.substring(0,4));    if (len >= 9) {      if ((strdate.charAt(4) != '-') || (strdate.charAt(7) != '-'))       throwException(strdate);      month=Integer.parseInt(strdate.substring(5,7));      day=Integer.parseInt(strdate.substring(8,10));    }    if (len >= 16) {      if (((strdate.charAt(10) != 'T') && (strdate.charAt(10) != 't') && (strdate.charAt(10) != ' ')) || (strdate.charAt(13) != ':'))       throwException(strdate);      hour=Integer.parseInt(strdate.substring(11,13));      minute=Integer.parseInt(strdate.substring(14,16));    }    if (len >= 19) {      if (strdate.charAt(16) != ':')       throwException(strdate);      second=Integer.parseInt(strdate.substring(17,19));    }    if (len > 20) {      int zpos=(len > 26) ? 26 : len;      if (strdate.charAt(zpos - 1) == 'Z')       --zpos;      if (strdate.charAt(19) != '.')       throwException(strdate);      microsecond=Integer.parseInt(strdate.substring(20,zpos));      for (zpos-=20; zpos < 6; ++zpos)       microsecond*=10;    }  } catch (  NumberFormatException e) {    throwException(strdate);  }  if ((year > 9999) || (day > 31) || (month > 12)|| (hour > 23)|| (minute > 59)|| (second > 62)|| (year <= 0)|| (day <= 0)|| (month <= 0)|| (hour < 0)|| (minute < 0)|| (second < 0))   throwException(strdate);  return (ComponentTime.packBits(year,month,day,hour,minute,second,microsecond));}  }
class C{  public boolean isFinal(){  return true;}  }
class C{  public int compareTo(CallChainInfo other){  return method.getSignature().compareTo(other.method.getSignature());}  }
class C{  @Override public void prepare(Map map,TopologyContext topologyContext,OutputCollector collector){  start();  this.collector=collector;}  }
class C{  public final synchronized void sendRawLine(String line){  if (isConnected()) {    _inputThread.sendRawLine(line);  }}  }
class C{  @Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){  return (Math.exp(gamma * norm2(x_index,x_att,y_index,y_att)));}  }
class C{  private void createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  assertNotNull(ds);  ds.disconnect();  ds=getSystem(props);  cache=CacheFactory.create(ds);  assertNotNull(cache);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {}  }
class C{  public static void sort(Comparable[] a){  int n=a.length;  for (int i=1; i < n; i++) {    Comparable v=a[i];    int lo=0, hi=i;    while (lo < hi) {      int mid=lo + (hi - lo) / 2;      if (less(v,a[mid]))       hi=mid; else       lo=mid + 1;    }    for (int j=i; j > lo; --j)     a[j]=a[j - 1];    a[lo]=v;  }  assert isSorted(a);}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (e.getValueIsAdjusting())   return;  ListItem selected=null;  try {    selected=(ListItem)centerList.getSelectedValue();  } catch (  Exception ex) {  }  log.info("Selected=" + selected);  if (selected != null)   bAdd.setEnabled(!centerTree.setSelectedNode(selected.id));}  }
class C{  @Override public void accumulate(Object value){  this.distinct.addAll((Set)value);}  }
class C{  public void applyPattern(String pattern){  this.pattern=pattern;  if (patternTokens != null) {    patternTokens.clear();    patternTokens=null;  }}  }
class C{  public InvalidPasswordException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void addRolePricesForContainerKey(Long containerKey,Map<Long,RolePricingDetails> containerPrices){  content.put(containerKey,containerPrices);}  }
class C{  public List<URI> injectResourceURI(final DbClient dbClient,final String nativeGuid){  List<URI> fileshareURIs=null;  try {    fileshareURIs=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileShareNativeIdConstraint(nativeGuid));  } catch (  Exception e) {    _logger.error("Cassandra Database Error while querying FileshareUUId: {}--> ",nativeGuid,e);  }  return fileshareURIs;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction tell=new RPAction();  StringBuilder sb=new StringBuilder();  String patchLevel=System.getProperty("sun.os.patch.level");  if ((patchLevel == null) || (patchLevel.equals("unknown"))) {    patchLevel="";  }  sb.append("\n");  sb.append("Stendhal: " + Debug.VERSION);  if (Debug.PRE_RELEASE_VERSION != null) {    sb.append(" - ");    sb.append(Debug.PRE_RELEASE_VERSION);  }  sb.append("\n");  sb.append("OS: " + System.getProperty("os.name") + " "+ patchLevel+ " "+ System.getProperty("os.version")+ " "+ System.getProperty("os.arch")+ "\n");  sb.append("Java-Runtime: " + System.getProperty("java.runtime.name") + " "+ System.getProperty("java.runtime.version")+ " from "+ System.getProperty("java.home")+ "\n");  sb.append("Java-VM: " + System.getProperty("java.vm.vendor") + " "+ System.getProperty("java.vm.name")+ " "+ System.getProperty("java.vm.version")+ "\n");  final long freeMemory=Runtime.getRuntime().freeMemory() / 1024;  final long totalMemory=Runtime.getRuntime().totalMemory() / 1024;  sb.append("Total/Used memory: " + totalMemory + "/"+ (totalMemory - freeMemory)+ "\n");  ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(sb.toString(),NotificationType.CLIENT));  if (first) {    tell.put("type","support");    tell.put("text",sb.toString());    ClientSingletonRepository.getClientFramework().send(tell);    first=false;  }  return true;}  }
class C{  public static <T>String obj2String(T src){  if (src == null) {    return null;  }  try {    return src instanceof String ? (String)src : objectMapper.writeValueAsString(src);  } catch (  Exception e) {    log.info("parse Object to String error",e);    return null;  }}  }
class C{  public void addDominatedNetSize(long size){  dominatedNetSize+=size;}  }
class C{  public Environment importEnvironment(Environment environment) throws BusinessException, JAXBException, IOException {  if (null == environment.getId()) {    throw new BusinessException("Import the environment '" + environment.getName() + "'.",ConfigurationInterfaceErrorCodeEnum.IMPORT_DATA_NOT_VALID);  }  environment.setImportDate(new Date());  if (existingEnvironments.containsKey(environment.getId())) {    Environment old=existingEnvironments.replace(environment.getId(),environment);    Files.deleteIfExists(pathResolver.getEnvironmentFilePath(old));  } else {    existingEnvironments.put(environment.getId(),environment);  }  checkProfiles(environment);  saveEnvironment(environment);  return environment;}  }
class C{  private DigicoreChain cleanChain(DigicoreChain chain){  return chain;}  }
class C{  public void addParameter(String label,Component comp){  addParameter(-1,label,comp);}  }
class C{  public void nextCharacter(){  if (currentOffset < currentField.size() && currentField.getArgument(currentOffset) != null && currentField.getArgument(currentOffset) instanceof MathContainer && ((MathContainer)currentField.getArgument(currentOffset)).hasChildren()) {    MathComponent component=currentField.getArgument(currentOffset);    firstField((MathContainer)component);  } else   if (currentOffset < currentField.size()) {    currentOffset++;  } else {    nextField();  }}  }
class C{  public void nextSeed(){  currentSeed++;  currentNFE=0;  updateStatistics();  sendProgressEvent(true);}  }
class C{  public RadixTreeImpl(){  root=new RadixTreeNode<T>();  root.setKey("");  size=0;}  }
class C{  public Class<?>[] declaredExceptions(){  return declaredExceptions;}  }
class C{  public static String formatDuration(final long durationMillis,final String format,final boolean padWithZeros){  Validate.inclusiveBetween(0,Long.MAX_VALUE,durationMillis,"durationMillis must not be negative");  final Token[] tokens=lexx(format);  long days=0;  long hours=0;  long minutes=0;  long seconds=0;  long milliseconds=durationMillis;  if (Token.containsTokenWithValue(tokens,d)) {    days=milliseconds / DateUtils.MILLIS_PER_DAY;    milliseconds=milliseconds - (days * DateUtils.MILLIS_PER_DAY);  }  if (Token.containsTokenWithValue(tokens,H)) {    hours=milliseconds / DateUtils.MILLIS_PER_HOUR;    milliseconds=milliseconds - (hours * DateUtils.MILLIS_PER_HOUR);  }  if (Token.containsTokenWithValue(tokens,m)) {    minutes=milliseconds / DateUtils.MILLIS_PER_MINUTE;    milliseconds=milliseconds - (minutes * DateUtils.MILLIS_PER_MINUTE);  }  if (Token.containsTokenWithValue(tokens,s)) {    seconds=milliseconds / DateUtils.MILLIS_PER_SECOND;    milliseconds=milliseconds - (seconds * DateUtils.MILLIS_PER_SECOND);  }  return format(tokens,0,0,days,hours,minutes,seconds,milliseconds,padWithZeros);}  }
class C{  public void notifyObservers(Notification note){  if (view != null) {    view.notifyObservers(note);  }}  }
class C{  public Exception execute(){  m_result=null;  m_description=null;  if (m_variable == null || m_variable.length() == 0 || m_script == null || m_script.length() == 0) {    IllegalArgumentException e=new IllegalArgumentException("No variable/script");    log.warning(e.toString());    return e;  }  Interpreter i=new Interpreter();  loadEnvironment(i);  try {    log.config(m_script);    i.eval(m_script);  } catch (  Exception e) {    log.warning(e.toString());    return e;  }  try {    m_result=i.get(m_variable);    log.config("Result (" + m_result.getClass().getName() + ") "+ m_result);  } catch (  Exception e) {    log.warning("Result - " + e);    if (e instanceof NullPointerException)     e=new IllegalArgumentException("Result Variable not found - " + m_variable);    return e;  }  try {    m_description=i.get(DESCRIPTION_VARIABLE);  } catch (  Exception e) {    log.warning("Description - " + e);    return e;  }  return null;}  }
class C{  private synchronized void switchRemovedFromStore(DatapathId dpid){  if (floodlightProvider.getRole() != HARole.STANDBY) {    return;  }  IOFSwitch oldSw=syncedSwitches.remove(dpid);  if (oldSw != null) {    addUpdateToQueue(new SwitchUpdate(dpid,SwitchUpdateType.REMOVED));  } else {  }}  }
class C{  public int FindProcess(String id){  int i=0;  while (i < processes.size()) {    ProcessEntry pe=(ProcessEntry)processes.elementAt(i);    if (pe.name.equals(id))     return i;    i=i + 1;  }  return i;}  }
class C{  public void testSetCondition_AddsEncounterForNewCondition(){  mController.init();  mController.setCondition(ConceptUuids.GENERAL_CONDITION_PALLIATIVE_UUID);  verify(mMockAppModel).addEncounter(any(CrudEventBus.class),any(Patient.class),any(Encounter.class));}  }
class C{  public List<ServerAddress> addresses(){  return addresses;}  }
class C{  private void parseWebApps(){  if (this.webapps == null) {    Map<String,String> webapps=new HashMap<String,String>();    try {      EarArchive ear=new DefaultEarArchive(getFile());      ApplicationXml applicationXml=ear.getApplicationXml();      for (      String webUri : applicationXml.getWebModuleUris()) {        String context=applicationXml.getWebModuleContextRoot(webUri);        if (context == null) {          throw new ContainerException("Your application.xml must define a " + "<context-root> element in the <web> module definition.");        }        if (context.startsWith("/")) {          context=context.substring(1);        }        getLogger().debug("Found Web URI [" + webUri + "], context ["+ context+ "]",this.getClass().getName());        webapps.put(context,webUri);      }    } catch (    Exception e) {      throw new ContainerException("Failed to parse webapps from [" + getFile() + "] EAR.",e);    }    this.webapps=webapps;  }}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public static void addDiscoveryToContainers(EntityPlayer player,AspectItem item,IAspectType type){  List<DiscoveryContainer<?>> discoveryContainers=getWritableDiscoveryContainers(player);  for (  DiscoveryContainer<?> container : discoveryContainers)   container.addDiscovery(item,type);}  }
class C{  public PaymentTypeHistory(PaymentType c){  super(c);  if (c.getPsp() != null) {    setPspObjKey(c.getPsp().getKey());  }}  }
class C{  public static LoggingFraction createErrorLoggingFraction(){  return createDefaultLoggingFraction(Level.ERROR);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.757 -0500",hash_original_method="E991CC87C4293999DC349BC54F0EAD62",hash_generated_method="335AA15B01538D8EEE3697FCE8CC5FE1") public void fatal(Object message,Throwable exception){  log(Level.SEVERE,String.valueOf(message),exception);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  @Override public boolean isReadOnly(int column) throws SQLException {  try {    debugCodeCall("isReadOnly",column);    checkColumnIndex(column);    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static boolean sessionIsRunning(){  if (mProcess == null)   return false;  try {    mProcess.exitValue();    return false;  } catch (  IllegalThreadStateException ex) {    return true;  }}  }
class C{  protected void applyEdits(Patient patient,SimpleObject edits){  boolean changedPatient=false;  String newGivenName=null;  String newFamilyName=null;  String newId=null;  for (  Map.Entry<String,Object> entry : edits.entrySet()) {switch (entry.getKey()) {case FAMILY_NAME:      newFamilyName=(String)entry.getValue();    break;case GIVEN_NAME:  newGivenName=(String)entry.getValue();break;case ASSIGNED_LOCATION:Map assignedLocation=(Map)entry.getValue();setLocation(patient,(String)assignedLocation.get(UUID));break;case BIRTHDATE:patient.setBirthdate(Utils.parseLocalDate((String)entry.getValue(),BIRTHDATE));changedPatient=true;break;case ID:newId=(String)entry.getValue();break;default :log.warn("Property is nonexistent or not updatable; ignoring: " + entry);break;}}PatientIdentifier identifier=patient.getPatientIdentifier(DbUtil.getMsfIdentifierType());if (newId != null && (identifier == null || !newId.equals(identifier.getIdentifier()))) {synchronized (createPatientLock) {List<PatientIdentifierType> identifierTypes=Collections.singletonList(DbUtil.getMsfIdentifierType());List<Patient> existing=patientService.getPatients(null,newId,identifierTypes,true);if (!existing.isEmpty()) {Patient idMatch=existing.get(0);String name=getFullName(idMatch);throw new InvalidObjectDataException(String.format("Another patient (%s) already has the ID \"%s\"",name.isEmpty() ? "with no name" : "named " + name,newId));}if (identifier != null) {patient.removeIdentifier(identifier);}identifier=new PatientIdentifier();identifier.setCreator(patient.getCreator());identifier.setDateCreated(patient.getDateCreated());identifier.setLocation(DbUtil.getLocationByName(FACILITY_NAME,null));identifier.setIdentifier(newId);identifier.setIdentifierType(DbUtil.getMsfIdentifierType());identifier.setPreferred(true);patient.addIdentifier(identifier);patientService.savePatient(patient);}changedPatient=true;}if (newGivenName != null || newFamilyName != null) {PersonName oldName=patient.getPersonName();if (!normalizeName(newGivenName).equals(oldName.getGivenName()) || !normalizeName(newFamilyName).equals(oldName.getFamilyName())) {PersonName newName=new PersonName();newName.setGivenName(newGivenName != null ? normalizeName(newGivenName) : oldName.getGivenName());newName.setFamilyName(newFamilyName != null ? normalizeName(newFamilyName) : oldName.getFamilyName());patient.addName(newName);oldName.setVoided(true);changedPatient=true;}}if (changedPatient) {patientService.savePatient(patient);}}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getChallengeDao() : null;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.TYPE_TYPE_REF__TYPE_ARG:    return basicSetTypeArg(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final void insert(Address addr1,Address addr2){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr1.isZero());  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr2.isZero());  checkTailInsert(2);  uncheckedTailInsert(addr1);  uncheckedTailInsert(addr2);}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public static boolean asBoolean(double[] array){  return array.length > 0;}  }
class C{  public void insert(Envelope itemEnv,Object item){  int index=getSubnodeIndex(itemEnv,origin.x,origin.y);  if (index == -1) {    add(item);    return;  }  Node node=subnode[index];  if (node == null || !node.getEnvelope().contains(itemEnv)) {    Node largerNode=Node.createExpanded(node,itemEnv);    subnode[index]=largerNode;  }  insertContained(subnode[index],itemEnv,item);}  }
class C{  @Override public String format(LogRecord r){  StringBuilder sb=new StringBuilder();  sb.append(ISO_DATE_TIME_FORMATTER.print(r.getMillis())).append(" ");  sb.append(r.getLevel().getName()).append(" ");  sb.append("[").append(r.getThreadID()).append("] ");  sb.append(r.getLoggerName()).append(": ");  sb.append(formatMessage(r)).append(LINE_SEPARATOR);  if (r.getThrown() != null) {    sb.append("Stacktrace: ");    sb.append(ExceptionUtils.getStackTrace(r.getThrown()));  }  return sb.toString();}  }
class C{  public void deleteMessage(String queueUrl,String receiptHandle) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.deleteMessage(queueUrl,receiptHandle);}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double noData;  int progress;  int i;  int numReclassRanges;  int numReclassRangesMinusOne;  String[] reclassRangeStr=null;  double[][] reclassRange;  boolean blnAssignMode=false;  String delimiter="\t";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  reclassRangeStr=args[2].split(delimiter);  if (reclassRangeStr.length == 1) {    delimiter=";";    reclassRangeStr=args[2].split(delimiter);    if (reclassRangeStr.length == 1) {      delimiter=",";      reclassRangeStr=args[2].split(delimiter);      if (reclassRangeStr.length == 1) {        showFeedback("Unrecognized relcass string delimiter. Please use " + "a tab, semicolon, or comma to delimite relcass values.");        return;      }    }  }  if (reclassRangeStr[2].toLowerCase().equals("not specified")) {    blnAssignMode=true;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double[] data;    noData=image.getNoDataValue();    numReclassRanges=reclassRangeStr.length / 3;    numReclassRangesMinusOne=numReclassRanges - 1;    reclassRange=new double[3][numReclassRanges];    i=0;    for (int b=0; b < reclassRangeStr.length; b++) {      if (!reclassRangeStr[b].toLowerCase().equals("not specified")) {        if (!reclassRangeStr[b].toLowerCase().equals("nodata")) {          reclassRange[i][b / 3]=Double.parseDouble(reclassRangeStr[b]);        } else {          reclassRange[i][b / 3]=noData;        }      } else {        reclassRange[i][b / 3]=0;      }      i++;      if (i == 3) {        i=0;      }    }    if (numReclassRanges == 0) {      showFeedback("There is an error with the reclass ranges.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    if (blnAssignMode) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] == reclassRange[1][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] >= reclassRange[1][i] && data[col] < reclassRange[2][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void toggleCurrency(){  if (currencyPanel.isVisible())   currencyPanel.setVisible(false); else {    if (!m_currencyOK)     loadCurrency();    currencyPanel.setVisible(true);  }  pack();}  }
class C{  public static void logResult(String result){  logResult(result,out);}  }
class C{  public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  public A readBefore() throws NoSuchElementException {  return front.head();}  }
class C{  public Object visit(ASTNumberLiteral node,Object data){  return showNode(node,data);}  }
class C{  private void removeTransaction(CompositeTransaction ct){  if (ct == null)   return;  Thread thread=getThread(ct);  if (thread == null)   return;  Stack<CompositeTransaction> mappings=removeThreadMappings(thread);  if (mappings != null && !mappings.empty()) {    mappings.pop();    if (!mappings.empty())     restoreThreadMappings(mappings,thread);  }}  }
class C{  public static void show(Context context,CharSequence text,@Duration int duration){  ToastBean bean=new ToastBean(context,text,duration);  show(bean);}  }
class C{  public void endElement(String name) throws IOException {  if (name == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  dontEscape=false;  if (closeStart) {    writer.write(">");    closeStart=false;  }  writer.write("</");  writer.write(name);  writer.write(">");}  }
class C{  public static MosaicId createMosaicId(final NamespaceId namespaceId,final int id){  return new MosaicId(namespaceId,String.format("name%d",id));}  }
class C{  public static void writeTo(Node node,Resource file) throws PageException {  OutputStream os=null;  try {    os=IOUtil.toBufferedOutputStream(file.getOutputStream());    writeTo(node,new StreamResult(os),false,false,null,null,null);  } catch (  IOException ioe) {    throw Caster.toPageException(ioe);  } finally {    IOUtil.closeEL(os);  }}  }
class C{  public boolean isClientIdValid(String clientId){  return this.clientIdPattern == null || this.clientIdPattern.matcher(clientId).matches();}  }
class C{  protected void collectExportedEntries(IJavaProject proj,List<IRuntimeClasspathEntry> runtimeEntries) throws CoreException {  IClasspathEntry[] entries=proj.getRawClasspath();  for (int i=0; i < entries.length; i++) {    IClasspathEntry entry=entries[i];    if (entry.isExported()) {      IRuntimeClasspathEntry rte=null;switch (entry.getEntryKind()) {case IClasspathEntry.CPE_CONTAINER:        IClasspathContainer container=JavaCore.getClasspathContainer(entry.getPath(),proj);      int kind=0;switch (container.getKind()) {case IClasspathContainer.K_APPLICATION:      kind=IRuntimeClasspathEntry.USER_CLASSES;    break;case IClasspathContainer.K_SYSTEM:  kind=IRuntimeClasspathEntry.BOOTSTRAP_CLASSES;break;case IClasspathContainer.K_DEFAULT_SYSTEM:kind=IRuntimeClasspathEntry.STANDARD_CLASSES;break;}rte=JavaRuntime.newRuntimeContainerClasspathEntry(entry.getPath(),kind,proj);break;case IClasspathEntry.CPE_LIBRARY:rte=JavaRuntime.newArchiveRuntimeClasspathEntry(entry.getPath());rte.setSourceAttachmentPath(entry.getSourceAttachmentPath());rte.setSourceAttachmentRootPath(entry.getSourceAttachmentRootPath());break;case IClasspathEntry.CPE_PROJECT:String name=entry.getPath().segment(0);IProject p=ResourcesPlugin.getWorkspace().getRoot().getProject(name);if (p.exists()) {IJavaProject jp=JavaCore.create(p);if (jp.exists()) {rte=JavaRuntime.newProjectRuntimeClasspathEntry(jp);}}break;case IClasspathEntry.CPE_VARIABLE:rte=JavaRuntime.newVariableRuntimeClasspathEntry(entry.getPath());break;default :break;}if (rte != null) {if (!runtimeEntries.contains(rte)) {runtimeEntries.add(rte);}}}}}  }
class C{  static void test1(SocketChannel client,SocketChannel server) throws Exception {  assert server.socket().getOOBInline();  ByteBuffer bb=ByteBuffer.allocate(100);  for (int i=0; i < 1000; i++) {    int b1=-127 + rand.nextInt(384);    client.socket().sendUrgentData(b1);    bb.clear();    if (server.read(bb) != 1)     throw new RuntimeException("One byte expected");    bb.flip();    byte b2=bb.get();    if ((byte)b1 != b2)     throw new RuntimeException("Unexpected byte");  }}  }
class C{  public SQLTransientException(){}  }
class C{  public void parseForClass(GenericDeclaration genericDecl,SignatureTag signature){  setInput(genericDecl,signature);  if (!eof) {    parseClassSignature();  } else {    if (genericDecl instanceof SootClassType) {      SootClassType c=(SootClassType)genericDecl;      this.formalTypeParameters=ListOfVariables.EMPTY;      this.superclassType=c.getSuperclass();      this.interfaceTypes=new ListOfTypes(c.getInterfaces());    } else {      this.formalTypeParameters=ListOfVariables.EMPTY;      this.superclassType=new SootClassType("java.lang.Object");      this.interfaceTypes=ListOfTypes.EMPTY;    }  }}  }
class C{  public static void sort(int[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public boolean matchTagName(char[] tagNameLowercase){  return TagUtil.equalsToLowercase(name,tagNameLowercase);}  }
class C{  @Override public long position(byte[] pattern,long start) throws SQLException {  if (isDebugEnabled()) {    debugCode("position(" + quoteBytes(pattern) + ", "+ start+ ");");  }  if (Constants.BLOB_SEARCH) {    try {      checkClosed();      if (pattern == null) {        return -1;      }      if (pattern.length == 0) {        return 1;      }      BufferedInputStream in=new BufferedInputStream(value.getInputStream());      IOUtils.skipFully(in,start - 1);      int pos=0;      int patternPos=0;      while (true) {        int x=in.read();        if (x < 0) {          break;        }        if (x == (pattern[patternPos] & 0xff)) {          if (patternPos == 0) {            in.mark(pattern.length);          }          if (patternPos == pattern.length) {            return pos - patternPos;          }          patternPos++;        } else {          if (patternPos > 0) {            in.reset();            pos-=patternPos;          }        }        pos++;      }      return -1;    } catch (    Exception e) {      throw logAndConvert(e);    }  }  throw unsupported("LOB search");}  }
class C{  void drawTop(Graphics2D g){  for (  final EntityView<IEntity> view : visibleViews) {    try {      view.drawTop(g);    } catch (    RuntimeException e) {      logger.error(e,e);    }  }}  }
class C{  public void testReloadEvictionPartitionedCacheNearDisabled() throws Exception {  cacheMode=PARTITIONED;  nearEnabled=false;  doTest();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:23.275 -0500",hash_original_method="2941E7D87CA3D32F9ED426806A173E79",hash_generated_method="EB3FD27410C95C1DF24D1F0C00CA8AC6") public static void startDataProfiling(Context context){synchronized (sProfilingLock) {    if (sActiveProfilingStart != null) {      throw new IllegalStateException("already profiling data");    }    sActiveProfilingStart=getDataLayerSnapshotForUid(context);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String inputHeaderAlpha=null;  String outputHeader=null;  boolean alphaChannelSpecified=true;  boolean performContrastEnhancement=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderRed=args[0];  inputHeaderGreen=args[1];  inputHeaderBlue=args[2];  inputHeaderAlpha=args[3];  if (inputHeaderAlpha.toLowerCase().contains("not specified")) {    alphaChannelSpecified=false;  }  outputHeader=args[4];  String doEnhancement=args[5];  if (doEnhancement.toLowerCase().contains("not specified") || doEnhancement.toLowerCase().contains("f")) {    performContrastEnhancement=false;  }  if ((inputHeaderRed == null) || (inputHeaderGreen == null) || (inputHeaderBlue == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal, alphaVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    int r, g, b, a;    double z;    int progress=0;    int oldProgress=-1;    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    if ((green.getNumberRows() != rows) || (green.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);    if ((blue.getNumberRows() != rows) || (blue.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    double noData=red.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeaderRed,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("rgb.pal");    outputFile.setDataScale(WhiteboxRaster.DataScale.RGB);    redMin=red.getDisplayMinimum();    greenMin=green.getDisplayMinimum();    blueMin=blue.getDisplayMinimum();    redRange=red.getDisplayMaximum() - redMin;    greenRange=green.getDisplayMaximum() - greenMin;    blueRange=blue.getDisplayMaximum() - blueMin;    if (!alphaChannelSpecified) {      double[] dataRed, dataGreen, dataBlue;      oldProgress=-1;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      WhiteboxRaster alpha=new WhiteboxRaster(inputHeaderAlpha,"r");      if ((alpha.getNumberRows() != rows) || (alpha.getNumberColumns() != cols)) {        showFeedback("All input images must have the same dimensions.");        return;      }      double[] dataRed, dataGreen, dataBlue, dataAlpha;      double alphaMin, alphaRange;      alphaMin=alpha.getDisplayMinimum();      alphaRange=alpha.getDisplayMaximum() - alphaMin;      oldProgress=-1;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        dataAlpha=alpha.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          alphaVal=dataAlpha[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            a=(int)((alphaVal - alphaMin) / alphaRange * 255);            if (a < 0) {              a=0;            }            if (a > 255) {              a=255;            }            z=(a << 24) | (b << 16) | (g << 8)| r;            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      alpha.close();    }    red.close();    green.close();    blue.close();    if (performContrastEnhancement) {      outputFile.flush();      int rOut, gOut, bOut;      int E=100;      double[] data;      long numPixels=0;      int r_l=Integer.MAX_VALUE;      int r_h=Integer.MIN_VALUE;      long r_e=0;      long rSqrTotal=0;      int g_l=Integer.MAX_VALUE;      int g_h=Integer.MIN_VALUE;      long g_e=0;      long gSqrTotal=0;      int b_l=Integer.MAX_VALUE;      int b_h=Integer.MIN_VALUE;      long b_e=0;      long bSqrTotal=0;      int L=0;      int H=255;      oldProgress=-1;      for (row=0; row < rows; row++) {        data=outputFile.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            numPixels++;            r=((int)z & 0xFF);            g=(((int)z >> 8) & 0xFF);            b=(((int)z >> 16) & 0xFF);            if (r < r_l) {              r_l=r;            }            if (r > r_h) {              r_h=r;            }            r_e+=r;            rSqrTotal+=r * r;            if (g < g_l) {              g_l=g;            }            if (g > g_h) {              g_h=g;            }            g_e+=g;            gSqrTotal+=g * g;            if (b < b_l) {              b_l=b;            }            if (b > b_h) {              b_h=b;            }            b_e+=b;            bSqrTotal+=b * b;          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Performing Enhancement (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      r_e=r_e / numPixels;      g_e=g_e / numPixels;      b_e=b_e / numPixels;      double r_s=(double)rSqrTotal / numPixels;      double g_s=(double)gSqrTotal / numPixels;      double b_s=(double)bSqrTotal / numPixels;      double r_b=(r_h * r_h * (E - L) - r_s * (H - L) + r_l * r_l * (H - E)) / (2 * (r_h * (E - L) - r_e * (H - L) + r_l * (H - E)));      double r_a=(H - L) / ((r_h - r_l) * (r_h + r_l - 2 * r_b));      double r_c=L - r_a * ((r_l - r_b) * (r_l - r_b));      double g_b=(g_h * g_h * (E - L) - g_s * (H - L) + g_l * g_l * (H - E)) / (2 * (g_h * (E - L) - g_e * (H - L) + g_l * (H - E)));      double g_a=(H - L) / ((g_h - g_l) * (g_h + g_l - 2 * g_b));      double g_c=L - g_a * ((g_l - g_b) * (g_l - g_b));      double b_b=(b_h * b_h * (E - L) - b_s * (H - L) + b_l * b_l * (H - E)) / (2 * (b_h * (E - L) - b_e * (H - L) + b_l * (H - E)));      double b_a=(H - L) / ((b_h - b_l) * (b_h + b_l - 2 * b_b));      double b_c=L - b_a * ((b_l - b_b) * (b_l - b_b));      oldProgress=-1;      for (row=0; row < rows; row++) {        data=outputFile.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            numPixels++;            r=((int)z & 0xFF);            g=(((int)z >> 8) & 0xFF);            b=(((int)z >> 16) & 0xFF);            a=(((int)z >> 24) & 0xFF);            rOut=(int)(r_a * ((r - r_b) * (r - r_b)) + r_c);            gOut=(int)(g_a * ((g - g_b) * (g - g_b)) + g_c);            bOut=(int)(b_a * ((b - b_b) * (b - b_b)) + b_c);            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            z=(double)((a << 24) | (bOut << 16) | (gOut << 8)| rOut);            outputFile.setValue(row,col,z);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Performing Enhancement (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (Anonymous_PreOrPostCondition_1_1: ");  result.append(anonymous_PreOrPostCondition_1_1);  result.append(')');  return result.toString();}  }
class C{  public boolean hasMapKey(){  return false;}  }
class C{  @Override public double splitValue(){  return splitValue;}  }
class C{  public boolean isDefaultValueUsedForIdentitySpec(){  return defaultValueUsedForIdentitySpec;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.288 -0500",hash_original_method="3156E5829AEB14A787F26082DFE50344",hash_generated_method="E56B43F48F2878D3CB0575C123027539") private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public WrappingStringBuilder(){  this("");}  }
